record `com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` @kind class @AccessFlag FINAL extends `com.google.crypto.tink.shaded.protobuf.CodedInputStream` @kind class {
  `byte`[] `com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.f` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.g` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.h` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.k` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.l` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.m` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.n` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 , `boolean` v5 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.<init>:([BIIZ)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L1b0730.  v0:= 0I;
  #L1b0732.  call `<init>`(v1, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;.<init>:(Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$a;)V` @kind direct;
  #L1b0738.  v0:= 2147483647I;
  #L1b073e.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.n` @type ^`int` := v0;
  #L1b0742.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.f` @type ^`byte`[] := v2 @kind object;
  #L1b0746.  v4:= v4 + v3 @kind int;
  #L1b0748.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.h` @type ^`int` := v4;
  #L1b074c.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int` := v3;
  #L1b0750.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.k` @type ^`int` := v3;
  #L1b0754.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.g` @type ^`boolean` := v5 @kind boolean;
  #L1b0758.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `int` v3 , `boolean` v4 , `com.google.crypto.tink.shaded.protobuf.CodedInputStream$a` v5 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.<init>:([BIIZLcom/google/crypto/tink/shaded/protobuf/CodedInputStream$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L1b076c.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.<init>:([BIIZ)V` @kind direct;
  #L1b0772.  return @kind void;
}
procedure `void` `e`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v3 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1b08b4.  v0:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.h` @type ^`int`;
  #L1b08b8.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int`;
  #L1b08bc.  v0:= v0 + v1 @kind int;
  #L1b08be.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.h` @type ^`int` := v0;
  #L1b08c2.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.k` @type ^`int`;
  #L1b08c6.  v1:= v0 - v1 @kind int;
  #L1b08ca.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.n` @type ^`int`;
  #L1b08ce.  if v1 <= v2 then goto L1b08e0;
  #L1b08d2.  v1:= v1 - v2 @kind int;
  #L1b08d4.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int` := v1;
  #L1b08d8.  v0:= v0 - v1 @kind int;
  #L1b08da.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.h` @type ^`int` := v0;
  #L1b08de.  goto L1b08e6;
  #L1b08e0.  v0:= 0I;
  #L1b08e2.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int` := v0;
  #L1b08e6.  return @kind void;
}
procedure `void` `f`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.f:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1b09b0.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.h` @type ^`int`;
  #L1b09b4.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int`;
  #L1b09b8.  v0:= v0 - v1 @kind int;
  #L1b09ba.  v1:= 10I;
  #L1b09be.  if v0 < v1 then goto L1b09ca;
  #L1b09c2.  call `g`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.g:()V` @kind direct;
  #L1b09c8.  goto L1b09d0;
  #L1b09ca.  call `h`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.h:()V` @kind direct;
  #L1b09d0.  return @kind void;
}
procedure `void` `g`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v4 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.g:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b09e4.  v0:= 0I;
  #L1b09e6.  v1:= 10I;
  #L1b09ea.  if v0 >= v1 then goto L1b0a0e;
  #L1b09ee.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.f` @type ^`byte`[] @kind object;
  #L1b09f2.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int`;
  #L1b09f6.  v3:= v2 + 1;
  #L1b09fa.  v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int` := v3;
  #L1b09fe.  v1:= v1[v2] @kind byte;
  #L1b0a02.  if v1 < 0 then goto L1b0a08;
  #L1b0a06.  return @kind void;
  #L1b0a08.  v0:= v0 + 1;
  #L1b0a0c.  goto L1b09e6;
  #L1b0a0e.  call temp:= `e`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.e:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b0a14.  v0:= temp @kind object;
  #L1b0a16.  throw v0;
}
procedure `void` `h`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.h:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1b0a28.  v0:= 0I;
  #L1b0a2a.  v1:= 10I;
  #L1b0a2e.  if v0 >= v1 then goto L1b0a46;
  #L1b0a32.  call temp:= `readRawByte`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawByte:()B` @kind virtual;
  #L1b0a38.  v1:= temp;
  #L1b0a3a.  if v1 < 0 then goto L1b0a40;
  #L1b0a3e.  return @kind void;
  #L1b0a40.  v0:= v0 + 1;
  #L1b0a44.  goto L1b0a2a;
  #L1b0a46.  call temp:= `e`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.e:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b0a4c.  v0:= temp @kind object;
  #L1b0a4e.  throw v0;
}
procedure `void` `checkLastTagWas`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this, `int` v2 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.checkLastTagWas:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0784.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.l` @type ^`int`;
  #L1b0788.  if v0 != v2 then goto L1b078e;
  #L1b078c.  return @kind void;
  #L1b078e.  call temp:= `a`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.a:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b0794.  v2:= temp @kind object;
  #L1b0796.  throw v2;
}
procedure `long` `d`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v6 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.d:()J` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1b0688.  v0:= 0L;
  #L1b068c.  v2:= 0I;
  #L1b068e.  v3:= 64I;
  #L1b0692.  if v2 >= v3 then goto L1b06b8;
  #L1b0696.  call temp:= `readRawByte`(v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawByte:()B` @kind virtual;
  #L1b069c.  v3:= temp;
  #L1b069e.  v4:= v3 ^& 127;
  #L1b06a2.  v4:= (`long`) v4 @kind i2l;
  #L1b06a4.  v4:= v4 ^< v2 @kind long;
  #L1b06a6.  v0:= v0 ^| v4 @kind long;
  #L1b06a8.  v3:= v3 ^& 128;
  #L1b06ac.  if v3 != 0 then goto L1b06b2;
  #L1b06b0.  return v0 @kind wide;
  #L1b06b2.  v2:= v2 + 7;
  #L1b06b6.  goto L1b068e;
  #L1b06b8.  call temp:= `e`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.e:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b06be.  v0:= temp @kind object;
  #L1b06c0.  throw v0;
}
procedure `void` `enableAliasing`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v0 @kind this, `boolean` v1 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.enableAliasing:(Z)V` @AccessFlag PUBLIC {
    temp;

  #L1b07a8.  v0.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.m` @type ^`boolean` := v1 @kind boolean;
  #L1b07ac.  return @kind void;
}
procedure `int` `getBytesUntilLimit`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.getBytesUntilLimit:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1aff70.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.n` @type ^`int`;
  #L1aff74.  v1:= 2147483647I;
  #L1aff7a.  if v0 != v1 then goto L1aff82;
  #L1aff7e.  v0:= -1I;
  #L1aff80.  return v0;
  #L1aff82.  call temp:= `getTotalBytesRead`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.getTotalBytesRead:()I` @kind virtual;
  #L1aff88.  v1:= temp;
  #L1aff8a.  v0:= v0 - v1 @kind int;
  #L1aff8c.  return v0;
}
procedure `int` `getLastTag`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.getLastTag:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1affa0.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.l` @type ^`int`;
  #L1affa4.  return v0;
}
procedure `int` `getTotalBytesRead`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.getTotalBytesRead:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1affb8.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int`;
  #L1affbc.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.k` @type ^`int`;
  #L1affc0.  v0:= v0 - v1 @kind int;
  #L1affc2.  return v0;
}
procedure `boolean` `isAtEnd`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.isAtEnd:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1afb84.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int`;
  #L1afb88.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.h` @type ^`int`;
  #L1afb8c.  if v0 != v1 then goto L1afb94;
  #L1afb90.  v0:= 1I;
  #L1afb92.  goto L1afb96;
  #L1afb94.  v0:= 0I;
  #L1afb96.  return v0;
}
procedure `void` `popLimit`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v0 @kind this, `int` v1 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.popLimit:(I)V` @AccessFlag PUBLIC {
    temp;

  #L1b07c0.  v0.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.n` @type ^`int` := v1;
  #L1b07c4.  call `e`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.e:()V` @kind direct;
  #L1b07ca.  return @kind void;
}
procedure `int` `pushLimit`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this, `int` v2 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.pushLimit:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1affd4.  if v2 < 0 then goto L1b0000;
  #L1affd8.  call temp:= `getTotalBytesRead`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.getTotalBytesRead:()I` @kind virtual;
  #L1affde.  v0:= temp;
  #L1affe0.  v2:= v2 + v0 @kind int;
  #L1affe2.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.n` @type ^`int`;
  #L1affe6.  if v2 > v0 then goto L1afff6;
  #L1affea.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.n` @type ^`int` := v2;
  #L1affee.  call `e`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.e:()V` @kind direct;
  #L1afff4.  return v0;
  #L1afff6.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1afffc.  v2:= temp @kind object;
  #L1afffe.  throw v2;
  #L1b0000.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.f:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b0006.  v2:= temp @kind object;
  #L1b0008.  throw v2;
}
procedure `boolean` `readBool`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v5 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readBool:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1afba8.  call temp:= `readRawVarint64`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint64:()J` @kind virtual;
  #L1afbae.  v0:= temp @kind wide;
  #L1afbb0.  v2:= 0L;
  #L1afbb4.  v4:= lcmp(v0, v2);
  #L1afbb8.  if v4 == 0 then goto L1afbc0;
  #L1afbbc.  v0:= 1I;
  #L1afbbe.  goto L1afbc2;
  #L1afbc0.  v0:= 0I;
  #L1afbc2.  return v0;
}
procedure `byte`[] `readByteArray`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readByteArray:()[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1afd6c.  call temp:= `readRawVarint32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint32:()I` @kind virtual;
  #L1afd72.  v0:= temp;
  #L1afd74.  call temp:= `readRawBytes`(v1, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawBytes:(I)[B` @kind virtual;
  #L1afd7a.  v0:= temp @kind object;
  #L1afd7c.  return v0 @kind object;
}
procedure `java.nio.ByteBuffer` `readByteBuffer`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v4 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readByteBuffer:()Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b0358.  call temp:= `readRawVarint32`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint32:()I` @kind virtual;
  #L1b035e.  v0:= temp;
  #L1b0360.  if v0 <= 0 then goto L1b03bc;
  #L1b0364.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.h` @type ^`int`;
  #L1b0368.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int`;
  #L1b036c.  v1:= v1 - v2 @kind int;
  #L1b036e.  if v0 > v1 then goto L1b03bc;
  #L1b0372.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.g` @type ^`boolean` @kind boolean;
  #L1b0376.  if v1 != 0 then goto L1b0398;
  #L1b037a.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.m` @type ^`boolean` @kind boolean;
  #L1b037e.  if v1 == 0 then goto L1b0398;
  #L1b0382.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.f` @type ^`byte`[] @kind object;
  #L1b0386.  call temp:= `wrap`(v1, v2, v0) @signature `Ljava/nio/ByteBuffer;.wrap:([BII)Ljava/nio/ByteBuffer;` @kind static;
  #L1b038c.  v1:= temp @kind object;
  #L1b038e.  call temp:= `slice`(v1) @signature `Ljava/nio/ByteBuffer;.slice:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L1b0394.  v1:= temp @kind object;
  #L1b0396.  goto L1b03b0;
  #L1b0398.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.f` @type ^`byte`[] @kind object;
  #L1b039c.  v3:= v2 + v0 @kind int;
  #L1b03a0.  call temp:= `copyOfRange`(v1, v2, v3) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L1b03a6.  v1:= temp @kind object;
  #L1b03a8.  call temp:= `wrap`(v1) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L1b03ae.  v1:= temp @kind object;
  #L1b03b0.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int`;
  #L1b03b4.  v2:= v2 + v0 @kind int;
  #L1b03b6.  v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int` := v2;
  #L1b03ba.  return v1 @kind object;
  #L1b03bc.  if v0 != 0 then goto L1b03c6;
  #L1b03c0.  v0:= `@@com.google.crypto.tink.shaded.protobuf.Internal.EMPTY_BYTE_BUFFER` @type ^`java.nio.ByteBuffer` @kind object;
  #L1b03c4.  return v0 @kind object;
  #L1b03c6.  if v0 >= 0 then goto L1b03d4;
  #L1b03ca.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.f:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b03d0.  v0:= temp @kind object;
  #L1b03d2.  throw v0;
  #L1b03d4.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b03da.  v0:= temp @kind object;
  #L1b03dc.  throw v0;
}
procedure `com.google.crypto.tink.shaded.protobuf.ByteString` `readBytes`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v3 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readBytes:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1afde8.  call temp:= `readRawVarint32`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint32:()I` @kind virtual;
  #L1afdee.  v0:= temp;
  #L1afdf0.  if v0 <= 0 then goto L1afe38;
  #L1afdf4.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.h` @type ^`int`;
  #L1afdf8.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int`;
  #L1afdfc.  v1:= v1 - v2 @kind int;
  #L1afdfe.  if v0 > v1 then goto L1afe38;
  #L1afe02.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.g` @type ^`boolean` @kind boolean;
  #L1afe06.  if v1 == 0 then goto L1afe20;
  #L1afe0a.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.m` @type ^`boolean` @kind boolean;
  #L1afe0e.  if v1 == 0 then goto L1afe20;
  #L1afe12.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.f` @type ^`byte`[] @kind object;
  #L1afe16.  call temp:= `l`(v1, v2, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.l:([BII)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L1afe1c.  v1:= temp @kind object;
  #L1afe1e.  goto L1afe2c;
  #L1afe20.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.f` @type ^`byte`[] @kind object;
  #L1afe24.  call temp:= `copyFrom`(v1, v2, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([BII)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L1afe2a.  v1:= temp @kind object;
  #L1afe2c.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int`;
  #L1afe30.  v2:= v2 + v0 @kind int;
  #L1afe32.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int` := v2;
  #L1afe36.  return v1 @kind object;
  #L1afe38.  if v0 != 0 then goto L1afe42;
  #L1afe3c.  v0:= `@@com.google.crypto.tink.shaded.protobuf.ByteString.EMPTY` @type ^`com.google.crypto.tink.shaded.protobuf.ByteString` @kind object;
  #L1afe40.  return v0 @kind object;
  #L1afe42.  call temp:= `readRawBytes`(v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawBytes:(I)[B` @kind virtual;
  #L1afe48.  v0:= temp @kind object;
  #L1afe4a.  call temp:= `k`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.k:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L1afe50.  v0:= temp @kind object;
  #L1afe52.  return v0 @kind object;
}
procedure `double` `readDouble`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readDouble:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1aff28.  call temp:= `readRawLittleEndian64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawLittleEndian64:()J` @kind virtual;
  #L1aff2e.  v0:= temp @kind wide;
  #L1aff30.  call temp:= `longBitsToDouble`(v0) @signature `Ljava/lang/Double;.longBitsToDouble:(J)D` @kind static;
  #L1aff36.  v0:= temp @kind wide;
  #L1aff38.  return v0 @kind wide;
}
procedure `int` `readEnum`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readEnum:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b001c.  call temp:= `readRawVarint32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint32:()I` @kind virtual;
  #L1b0022.  v0:= temp;
  #L1b0024.  return v0;
}
procedure `int` `readFixed32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readFixed32:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0038.  call temp:= `readRawLittleEndian32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawLittleEndian32:()I` @kind virtual;
  #L1b003e.  v0:= temp;
  #L1b0040.  return v0;
}
procedure `long` `readFixed64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readFixed64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b03f0.  call temp:= `readRawLittleEndian64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawLittleEndian64:()J` @kind virtual;
  #L1b03f6.  v0:= temp @kind wide;
  #L1b03f8.  return v0 @kind wide;
}
procedure `float` `readFloat`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readFloat:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1aff4c.  call temp:= `readRawLittleEndian32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawLittleEndian32:()I` @kind virtual;
  #L1aff52.  v0:= temp;
  #L1aff54.  call temp:= `intBitsToFloat`(v0) @signature `Ljava/lang/Float;.intBitsToFloat:(I)F` @kind static;
  #L1aff5a.  v0:= temp;
  #L1aff5c.  return v0;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `readGroup`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this, `int` v3 , `com.google.crypto.tink.shaded.protobuf.Parser` v4 @kind object, `com.google.crypto.tink.shaded.protobuf.ExtensionRegistryLite` v5 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readGroup:(ILcom/google/crypto/tink/shaded/protobuf/Parser;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1afe64.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1afe68.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.b` @type ^`int`;
  #L1afe6c.  if v0 >= v1 then goto L1afea2;
  #L1afe70.  v0:= v0 + 1;
  #L1afe74.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v0;
  #L1afe78.  call temp:= `parsePartialFrom`(v4, v2, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/Parser;.parsePartialFrom:(Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Ljava/lang/Object;` @kind interface;
  #L1afe7e.  v4:= temp @kind object;
  #L1afe80.  v4:= (`com.google.crypto.tink.shaded.protobuf.MessageLite`) v4 @kind object;
  #L1afe84.  v5:= 4I;
  #L1afe86.  call temp:= `a`(v3, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.a:(II)I` @kind static;
  #L1afe8c.  v3:= temp;
  #L1afe8e.  call `checkLastTagWas`(v2, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.checkLastTagWas:(I)V` @kind virtual;
  #L1afe94.  v3:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1afe98.  v3:= v3 + -1;
  #L1afe9c.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v3;
  #L1afea0.  return v4 @kind object;
  #L1afea2.  call temp:= `h`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.h:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1afea8.  v3:= temp @kind object;
  #L1afeaa.  throw v3;
}
procedure `void` `readGroup`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this, `int` v3 , `com.google.crypto.tink.shaded.protobuf.MessageLite$Builder` v4 @kind object, `com.google.crypto.tink.shaded.protobuf.ExtensionRegistryLite` v5 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readGroup:(ILcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b07dc.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1b07e0.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.b` @type ^`int`;
  #L1b07e4.  if v0 >= v1 then goto L1b0814;
  #L1b07e8.  v0:= v0 + 1;
  #L1b07ec.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v0;
  #L1b07f0.  call temp:= `mergeFrom`(v4, v2, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;.mergeFrom:(Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;` @kind interface;
  #L1b07f6.  v4:= 4I;
  #L1b07f8.  call temp:= `a`(v3, v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.a:(II)I` @kind static;
  #L1b07fe.  v3:= temp;
  #L1b0800.  call `checkLastTagWas`(v2, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.checkLastTagWas:(I)V` @kind virtual;
  #L1b0806.  v3:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1b080a.  v3:= v3 + -1;
  #L1b080e.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v3;
  #L1b0812.  return @kind void;
  #L1b0814.  call temp:= `h`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.h:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b081a.  v3:= temp @kind object;
  #L1b081c.  throw v3;
}
procedure `int` `readInt32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readInt32:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0054.  call temp:= `readRawVarint32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint32:()I` @kind virtual;
  #L1b005a.  v0:= temp;
  #L1b005c.  return v0;
}
procedure `long` `readInt64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readInt64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b040c.  call temp:= `readRawVarint64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint64:()J` @kind virtual;
  #L1b0412.  v0:= temp @kind wide;
  #L1b0414.  return v0 @kind wide;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `readMessage`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v3 @kind this, `com.google.crypto.tink.shaded.protobuf.Parser` v4 @kind object, `com.google.crypto.tink.shaded.protobuf.ExtensionRegistryLite` v5 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readMessage:(Lcom/google/crypto/tink/shaded/protobuf/Parser;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1afebc.  call temp:= `readRawVarint32`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint32:()I` @kind virtual;
  #L1afec2.  v0:= temp;
  #L1afec4.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1afec8.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.b` @type ^`int`;
  #L1afecc.  if v1 >= v2 then goto L1aff0c;
  #L1afed0.  call temp:= `pushLimit`(v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.pushLimit:(I)I` @kind virtual;
  #L1afed6.  v0:= temp;
  #L1afed8.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1afedc.  v1:= v1 + 1;
  #L1afee0.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v1;
  #L1afee4.  call temp:= `parsePartialFrom`(v4, v3, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/Parser;.parsePartialFrom:(Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Ljava/lang/Object;` @kind interface;
  #L1afeea.  v4:= temp @kind object;
  #L1afeec.  v4:= (`com.google.crypto.tink.shaded.protobuf.MessageLite`) v4 @kind object;
  #L1afef0.  v5:= 0I;
  #L1afef2.  call `checkLastTagWas`(v3, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.checkLastTagWas:(I)V` @kind virtual;
  #L1afef8.  v5:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1afefc.  v5:= v5 + -1;
  #L1aff00.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v5;
  #L1aff04.  call `popLimit`(v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.popLimit:(I)V` @kind virtual;
  #L1aff0a.  return v4 @kind object;
  #L1aff0c.  call temp:= `h`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.h:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1aff12.  v4:= temp @kind object;
  #L1aff14.  throw v4;
}
procedure `void` `readMessage`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v3 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite$Builder` v4 @kind object, `com.google.crypto.tink.shaded.protobuf.ExtensionRegistryLite` v5 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readMessage:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1b0830.  call temp:= `readRawVarint32`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint32:()I` @kind virtual;
  #L1b0836.  v0:= temp;
  #L1b0838.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1b083c.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.b` @type ^`int`;
  #L1b0840.  if v1 >= v2 then goto L1b087a;
  #L1b0844.  call temp:= `pushLimit`(v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.pushLimit:(I)I` @kind virtual;
  #L1b084a.  v0:= temp;
  #L1b084c.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1b0850.  v1:= v1 + 1;
  #L1b0854.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v1;
  #L1b0858.  call temp:= `mergeFrom`(v4, v3, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;.mergeFrom:(Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;` @kind interface;
  #L1b085e.  v4:= 0I;
  #L1b0860.  call `checkLastTagWas`(v3, v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.checkLastTagWas:(I)V` @kind virtual;
  #L1b0866.  v4:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1b086a.  v4:= v4 + -1;
  #L1b086e.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v4;
  #L1b0872.  call `popLimit`(v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.popLimit:(I)V` @kind virtual;
  #L1b0878.  return @kind void;
  #L1b087a.  call temp:= `h`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.h:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b0880.  v4:= temp @kind object;
  #L1b0882.  throw v4;
}
procedure `byte` `readRawByte`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v3 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawByte:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1afd34.  v0:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int`;
  #L1afd38.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.h` @type ^`int`;
  #L1afd3c.  if v0 == v1 then goto L1afd52;
  #L1afd40.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.f` @type ^`byte`[] @kind object;
  #L1afd44.  v2:= v0 + 1;
  #L1afd48.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int` := v2;
  #L1afd4c.  v0:= v1[v0] @kind byte;
  #L1afd50.  return v0;
  #L1afd52.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1afd58.  v0:= temp @kind object;
  #L1afd5a.  throw v0;
}
procedure `byte`[] `readRawBytes`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this, `int` v3 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawBytes:(I)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1afd90.  if v3 <= 0 then goto L1afdb6;
  #L1afd94.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.h` @type ^`int`;
  #L1afd98.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int`;
  #L1afd9c.  v0:= v0 - v1 @kind int;
  #L1afd9e.  if v3 > v0 then goto L1afdb6;
  #L1afda2.  v3:= v3 + v1 @kind int;
  #L1afda4.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int` := v3;
  #L1afda8.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.f` @type ^`byte`[] @kind object;
  #L1afdac.  call temp:= `copyOfRange`(v0, v1, v3) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L1afdb2.  v3:= temp @kind object;
  #L1afdb4.  return v3 @kind object;
  #L1afdb6.  if v3 > 0 then goto L1afdce;
  #L1afdba.  if v3 != 0 then goto L1afdc4;
  #L1afdbe.  v3:= `@@com.google.crypto.tink.shaded.protobuf.Internal.EMPTY_BYTE_ARRAY` @type ^`byte`[] @kind object;
  #L1afdc2.  return v3 @kind object;
  #L1afdc4.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.f:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1afdca.  v3:= temp @kind object;
  #L1afdcc.  throw v3;
  #L1afdce.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1afdd4.  v3:= temp @kind object;
  #L1afdd6.  throw v3;
}
procedure `int` `readRawLittleEndian32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v4 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawLittleEndian32:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b0070.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int`;
  #L1b0074.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.h` @type ^`int`;
  #L1b0078.  v1:= v1 - v0 @kind int;
  #L1b007a.  v2:= 4I;
  #L1b007c.  if v1 < v2 then goto L1b00cc;
  #L1b0080.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.f` @type ^`byte`[] @kind object;
  #L1b0084.  v2:= v0 + 4;
  #L1b0088.  v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int` := v2;
  #L1b008c.  v2:= v1[v0] @kind byte;
  #L1b0090.  v2:= v2 ^& 255;
  #L1b0094.  v3:= v0 + 1;
  #L1b0098.  v3:= v1[v3] @kind byte;
  #L1b009c.  v3:= v3 ^& 255;
  #L1b00a0.  v3:= v3 ^< 8;
  #L1b00a4.  v2:= v2 ^| v3 @kind int;
  #L1b00a6.  v3:= v0 + 2;
  #L1b00aa.  v3:= v1[v3] @kind byte;
  #L1b00ae.  v3:= v3 ^& 255;
  #L1b00b2.  v3:= v3 ^< 16;
  #L1b00b6.  v2:= v2 ^| v3 @kind int;
  #L1b00b8.  v0:= v0 + 3;
  #L1b00bc.  v0:= v1[v0] @kind byte;
  #L1b00c0.  v0:= v0 ^& 255;
  #L1b00c4.  v0:= v0 ^< 24;
  #L1b00c8.  v0:= v0 ^| v2 @kind int;
  #L1b00ca.  return v0;
  #L1b00cc.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b00d2.  v0:= temp @kind object;
  #L1b00d4.  throw v0;
}
procedure `long` `readRawLittleEndian64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v9 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawLittleEndian64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1b0428.  v0:= v9.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int`;
  #L1b042c.  v1:= v9.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.h` @type ^`int`;
  #L1b0430.  v1:= v1 - v0 @kind int;
  #L1b0432.  v2:= 8I;
  #L1b0436.  if v1 < v2 then goto L1b04de;
  #L1b043a.  v1:= v9.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.f` @type ^`byte`[] @kind object;
  #L1b043e.  v3:= v0 + 8;
  #L1b0442.  v9.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int` := v3;
  #L1b0446.  v3:= v1[v0] @kind byte;
  #L1b044a.  v3:= (`long`) v3 @kind i2l;
  #L1b044c.  v5:= 255L;
  #L1b0450.  v3:= v3 ^& v5 @kind long;
  #L1b0452.  v7:= v0 + 1;
  #L1b0456.  v7:= v1[v7] @kind byte;
  #L1b045a.  v7:= (`long`) v7 @kind i2l;
  #L1b045c.  v7:= v7 ^& v5 @kind long;
  #L1b045e.  v7:= v7 ^< v2 @kind long;
  #L1b0460.  v2:= v3 ^| v7 @kind long;
  #L1b0464.  v4:= v0 + 2;
  #L1b0468.  v4:= v1[v4] @kind byte;
  #L1b046c.  v7:= (`long`) v4 @kind i2l;
  #L1b046e.  v7:= v7 ^& v5 @kind long;
  #L1b0470.  v4:= 16I;
  #L1b0474.  v7:= v7 ^< v4 @kind long;
  #L1b0476.  v2:= v2 ^| v7 @kind long;
  #L1b0478.  v4:= v0 + 3;
  #L1b047c.  v4:= v1[v4] @kind byte;
  #L1b0480.  v7:= (`long`) v4 @kind i2l;
  #L1b0482.  v7:= v7 ^& v5 @kind long;
  #L1b0484.  v4:= 24I;
  #L1b0488.  v7:= v7 ^< v4 @kind long;
  #L1b048a.  v2:= v2 ^| v7 @kind long;
  #L1b048c.  v4:= v0 + 4;
  #L1b0490.  v4:= v1[v4] @kind byte;
  #L1b0494.  v7:= (`long`) v4 @kind i2l;
  #L1b0496.  v7:= v7 ^& v5 @kind long;
  #L1b0498.  v4:= 32I;
  #L1b049c.  v7:= v7 ^< v4 @kind long;
  #L1b049e.  v2:= v2 ^| v7 @kind long;
  #L1b04a0.  v4:= v0 + 5;
  #L1b04a4.  v4:= v1[v4] @kind byte;
  #L1b04a8.  v7:= (`long`) v4 @kind i2l;
  #L1b04aa.  v7:= v7 ^& v5 @kind long;
  #L1b04ac.  v4:= 40I;
  #L1b04b0.  v7:= v7 ^< v4 @kind long;
  #L1b04b2.  v2:= v2 ^| v7 @kind long;
  #L1b04b4.  v4:= v0 + 6;
  #L1b04b8.  v4:= v1[v4] @kind byte;
  #L1b04bc.  v7:= (`long`) v4 @kind i2l;
  #L1b04be.  v7:= v7 ^& v5 @kind long;
  #L1b04c0.  v4:= 48I;
  #L1b04c4.  v7:= v7 ^< v4 @kind long;
  #L1b04c6.  v2:= v2 ^| v7 @kind long;
  #L1b04c8.  v0:= v0 + 7;
  #L1b04cc.  v0:= v1[v0] @kind byte;
  #L1b04d0.  v0:= (`long`) v0 @kind i2l;
  #L1b04d2.  v0:= v0 ^& v5 @kind long;
  #L1b04d4.  v4:= 56I;
  #L1b04d8.  v0:= v0 ^< v4 @kind long;
  #L1b04da.  v0:= v0 ^| v2 @kind long;
  #L1b04dc.  return v0 @kind wide;
  #L1b04de.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b04e4.  v0:= temp @kind object;
  #L1b04e6.  throw v0;
}
procedure `int` `readRawVarint32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v5 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint32:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b00e8.  v0:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int`;
  #L1b00ec.  v1:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.h` @type ^`int`;
  #L1b00f0.  if v1 != v0 then goto L1b00f6;
  #L1b00f4.  goto L1b01bc;
  #L1b00f6.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.f` @type ^`byte`[] @kind object;
  #L1b00fa.  v3:= v0 + 1;
  #L1b00fe.  v0:= v2[v0] @kind byte;
  #L1b0102.  if v0 < 0 then goto L1b010c;
  #L1b0106.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int` := v3;
  #L1b010a.  return v0;
  #L1b010c.  v1:= v1 - v3 @kind int;
  #L1b010e.  v4:= 9I;
  #L1b0112.  if v1 >= v4 then goto L1b0118;
  #L1b0116.  goto L1b01bc;
  #L1b0118.  v1:= v3 + 1;
  #L1b011c.  v3:= v2[v3] @kind byte;
  #L1b0120.  v3:= v3 ^< 7;
  #L1b0124.  v0:= v0 ^~ v3 @kind int;
  #L1b0126.  if v0 >= 0 then goto L1b0130;
  #L1b012a.  v0:= v0 ^~ -128;
  #L1b012e.  goto L1b01c8;
  #L1b0130.  v3:= v1 + 1;
  #L1b0134.  v1:= v2[v1] @kind byte;
  #L1b0138.  v1:= v1 ^< 14;
  #L1b013c.  v0:= v0 ^~ v1 @kind int;
  #L1b013e.  if v0 < 0 then goto L1b014a;
  #L1b0142.  v0:= v0 ^~ 16256;
  #L1b0146.  v1:= v3;
  #L1b0148.  goto L1b01c8;
  #L1b014a.  v1:= v3 + 1;
  #L1b014e.  v3:= v2[v3] @kind byte;
  #L1b0152.  v3:= v3 ^< 21;
  #L1b0156.  v0:= v0 ^~ v3 @kind int;
  #L1b0158.  if v0 >= 0 then goto L1b0166;
  #L1b015c.  v2:= -2080896I;
  #L1b0162.  v0:= v0 ^~ v2 @kind int;
  #L1b0164.  goto L1b01c8;
  #L1b0166.  v3:= v1 + 1;
  #L1b016a.  v1:= v2[v1] @kind byte;
  #L1b016e.  v4:= v1 ^< 28;
  #L1b0172.  v0:= v0 ^~ v4 @kind int;
  #L1b0174.  v4:= 266354560I;
  #L1b017a.  v0:= v0 ^~ v4 @kind int;
  #L1b017c.  if v1 >= 0 then goto L1b0146;
  #L1b0180.  v1:= v3 + 1;
  #L1b0184.  v3:= v2[v3] @kind byte;
  #L1b0188.  if v3 >= 0 then goto L1b01c8;
  #L1b018c.  v3:= v1 + 1;
  #L1b0190.  v1:= v2[v1] @kind byte;
  #L1b0194.  if v1 >= 0 then goto L1b0146;
  #L1b0198.  v1:= v3 + 1;
  #L1b019c.  v3:= v2[v3] @kind byte;
  #L1b01a0.  if v3 >= 0 then goto L1b01c8;
  #L1b01a4.  v3:= v1 + 1;
  #L1b01a8.  v1:= v2[v1] @kind byte;
  #L1b01ac.  if v1 >= 0 then goto L1b0146;
  #L1b01b0.  v1:= v3 + 1;
  #L1b01b4.  v2:= v2[v3] @kind byte;
  #L1b01b8.  if v2 >= 0 then goto L1b01c8;
  #L1b01bc.  call temp:= `d`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.d:()J` @kind virtual;
  #L1b01c2.  v0:= temp @kind wide;
  #L1b01c4.  v1:= (`int`) v0 @kind l2i;
  #L1b01c6.  return v1;
  #L1b01c8.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int` := v1;
  #L1b01cc.  return v0;
}
procedure `long` `readRawVarint64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v11 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1b04f8.  v0:= v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int`;
  #L1b04fc.  v1:= v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.h` @type ^`int`;
  #L1b0500.  if v1 != v0 then goto L1b0508;
  #L1b0504.  goto L1b0664;
  #L1b0508.  v2:= v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.f` @type ^`byte`[] @kind object;
  #L1b050c.  v3:= v0 + 1;
  #L1b0510.  v0:= v2[v0] @kind byte;
  #L1b0514.  if v0 < 0 then goto L1b0520;
  #L1b0518.  v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int` := v3;
  #L1b051c.  v0:= (`long`) v0 @kind i2l;
  #L1b051e.  return v0 @kind wide;
  #L1b0520.  v1:= v1 - v3 @kind int;
  #L1b0522.  v4:= 9I;
  #L1b0526.  if v1 >= v4 then goto L1b052e;
  #L1b052a.  goto L1b0664;
  #L1b052e.  v1:= v3 + 1;
  #L1b0532.  v3:= v2[v3] @kind byte;
  #L1b0536.  v3:= v3 ^< 7;
  #L1b053a.  v0:= v0 ^~ v3 @kind int;
  #L1b053c.  if v0 >= 0 then goto L1b054a;
  #L1b0540.  v0:= v0 ^~ -128;
  #L1b0544.  v2:= (`long`) v0 @kind i2l;
  #L1b0546.  goto L1b0672;
  #L1b054a.  v3:= v1 + 1;
  #L1b054e.  v1:= v2[v1] @kind byte;
  #L1b0552.  v1:= v1 ^< 14;
  #L1b0556.  v0:= v0 ^~ v1 @kind int;
  #L1b0558.  if v0 < 0 then goto L1b056c;
  #L1b055c.  v0:= v0 ^~ 16256;
  #L1b0560.  v0:= (`long`) v0 @kind i2l;
  #L1b0562.  v9:= v0 @kind wide;
  #L1b0564.  v1:= v3;
  #L1b0566.  v2:= v9 @kind wide;
  #L1b0568.  goto L1b0672;
  #L1b056c.  v1:= v3 + 1;
  #L1b0570.  v3:= v2[v3] @kind byte;
  #L1b0574.  v3:= v3 ^< 21;
  #L1b0578.  v0:= v0 ^~ v3 @kind int;
  #L1b057a.  if v0 >= 0 then goto L1b0588;
  #L1b057e.  v2:= -2080896I;
  #L1b0584.  v0:= v0 ^~ v2 @kind int;
  #L1b0586.  goto L1b0544;
  #L1b0588.  v3:= (`long`) v0 @kind i2l;
  #L1b058a.  v0:= v1 + 1;
  #L1b058e.  v1:= v2[v1] @kind byte;
  #L1b0592.  v5:= (`long`) v1 @kind i2l;
  #L1b0594.  v1:= 28I;
  #L1b0598.  v5:= v5 ^< v1 @kind long;
  #L1b059a.  v3:= v3 ^~ v5 @kind long;
  #L1b059c.  v5:= 0L;
  #L1b05a0.  v1:= lcmp(v3, v5);
  #L1b05a4.  if v1 < 0 then goto L1b05b6;
  #L1b05a8.  v1:= 266354560L;
  #L1b05ae.  v2:= v3 ^~ v1 @kind long;
  #L1b05b2.  v1:= v0;
  #L1b05b4.  goto L1b0672;
  #L1b05b6.  v1:= v0 + 1;
  #L1b05ba.  v0:= v2[v0] @kind byte;
  #L1b05be.  v7:= (`long`) v0 @kind i2l;
  #L1b05c0.  v0:= 35I;
  #L1b05c4.  v7:= v7 ^< v0 @kind long;
  #L1b05c6.  v3:= v3 ^~ v7 @kind long;
  #L1b05c8.  v0:= lcmp(v3, v5);
  #L1b05cc.  if v0 >= 0 then goto L1b05e0;
  #L1b05d0.  v5:= -34093383808L;
  #L1b05da.  v2:= v3 ^~ v5 @kind long;
  #L1b05de.  goto L1b0672;
  #L1b05e0.  v0:= v1 + 1;
  #L1b05e4.  v1:= v2[v1] @kind byte;
  #L1b05e8.  v7:= (`long`) v1 @kind i2l;
  #L1b05ea.  v1:= 42I;
  #L1b05ee.  v7:= v7 ^< v1 @kind long;
  #L1b05f0.  v3:= v3 ^~ v7 @kind long;
  #L1b05f2.  v1:= lcmp(v3, v5);
  #L1b05f6.  if v1 < 0 then goto L1b0606;
  #L1b05fa.  v1:= 4363953127296L;
  #L1b0604.  goto L1b05ae;
  #L1b0606.  v1:= v0 + 1;
  #L1b060a.  v0:= v2[v0] @kind byte;
  #L1b060e.  v7:= (`long`) v0 @kind i2l;
  #L1b0610.  v0:= 49I;
  #L1b0614.  v7:= v7 ^< v0 @kind long;
  #L1b0616.  v3:= v3 ^~ v7 @kind long;
  #L1b0618.  v0:= lcmp(v3, v5);
  #L1b061c.  if v0 >= 0 then goto L1b062c;
  #L1b0620.  v5:= -558586000294016L;
  #L1b062a.  goto L1b05da;
  #L1b062c.  v0:= v1 + 1;
  #L1b0630.  v1:= v2[v1] @kind byte;
  #L1b0634.  v7:= (`long`) v1 @kind i2l;
  #L1b0636.  v1:= 56I;
  #L1b063a.  v7:= v7 ^< v1 @kind long;
  #L1b063c.  v3:= v3 ^~ v7 @kind long;
  #L1b063e.  v7:= 71499008037633920L;
  #L1b0648.  v3:= v3 ^~ v7 @kind long;
  #L1b064a.  v1:= lcmp(v3, v5);
  #L1b064e.  if v1 >= 0 then goto L1b066e;
  #L1b0652.  v1:= v0 + 1;
  #L1b0656.  v0:= v2[v0] @kind byte;
  #L1b065a.  v7:= (`long`) v0 @kind i2l;
  #L1b065c.  v0:= lcmp(v7, v5);
  #L1b0660.  if v0 >= 0 then goto L1b0670;
  #L1b0664.  call temp:= `d`(v11) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.d:()J` @kind virtual;
  #L1b066a.  v0:= temp @kind wide;
  #L1b066c.  return v0 @kind wide;
  #L1b066e.  v1:= v0;
  #L1b0670.  v2:= v3 @kind wide;
  #L1b0672.  v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int` := v1;
  #L1b0676.  return v2 @kind wide;
}
procedure `int` `readSFixed32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readSFixed32:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b01e0.  call temp:= `readRawLittleEndian32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawLittleEndian32:()I` @kind virtual;
  #L1b01e6.  v0:= temp;
  #L1b01e8.  return v0;
}
procedure `long` `readSFixed64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readSFixed64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b06d4.  call temp:= `readRawLittleEndian64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawLittleEndian64:()J` @kind virtual;
  #L1b06da.  v0:= temp @kind wide;
  #L1b06dc.  return v0 @kind wide;
}
procedure `int` `readSInt32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readSInt32:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b01fc.  call temp:= `readRawVarint32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint32:()I` @kind virtual;
  #L1b0202.  v0:= temp;
  #L1b0204.  call temp:= `decodeZigZag32`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;.decodeZigZag32:(I)I` @kind static;
  #L1b020a.  v0:= temp;
  #L1b020c.  return v0;
}
procedure `long` `readSInt64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readSInt64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b06f0.  call temp:= `readRawVarint64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint64:()J` @kind virtual;
  #L1b06f6.  v0:= temp @kind wide;
  #L1b06f8.  call temp:= `decodeZigZag64`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;.decodeZigZag64:(J)J` @kind static;
  #L1b06fe.  v0:= temp @kind wide;
  #L1b0700.  return v0 @kind wide;
}
procedure `java.lang.String` `readString`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v5 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b0288.  call temp:= `readRawVarint32`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint32:()I` @kind virtual;
  #L1b028e.  v0:= temp;
  #L1b0290.  if v0 <= 0 then goto L1b02c0;
  #L1b0294.  v1:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.h` @type ^`int`;
  #L1b0298.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int`;
  #L1b029c.  v1:= v1 - v2 @kind int;
  #L1b029e.  if v0 > v1 then goto L1b02c0;
  #L1b02a2.  v1:= new `java.lang.String`;
  #L1b02a6.  v3:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.f` @type ^`byte`[] @kind object;
  #L1b02aa.  v4:= `@@com.google.crypto.tink.shaded.protobuf.Internal.a` @type ^`java.nio.charset.Charset` @kind object;
  #L1b02ae.  call `<init>`(v1, v3, v2, v0, v4) @signature `Ljava/lang/String;.<init>:([BIILjava/nio/charset/Charset;)V` @kind direct;
  #L1b02b4.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int`;
  #L1b02b8.  v2:= v2 + v0 @kind int;
  #L1b02ba.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int` := v2;
  #L1b02be.  return v1 @kind object;
  #L1b02c0.  if v0 != 0 then goto L1b02ca;
  #L1b02c4.  v0:= "" @kind object;
  #L1b02c8.  return v0 @kind object;
  #L1b02ca.  if v0 >= 0 then goto L1b02d8;
  #L1b02ce.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.f:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b02d4.  v0:= temp @kind object;
  #L1b02d6.  throw v0;
  #L1b02d8.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b02de.  v0:= temp @kind object;
  #L1b02e0.  throw v0;
}
procedure `java.lang.String` `readStringRequireUtf8`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v3 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readStringRequireUtf8:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1b02f4.  call temp:= `readRawVarint32`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint32:()I` @kind virtual;
  #L1b02fa.  v0:= temp;
  #L1b02fc.  if v0 <= 0 then goto L1b0326;
  #L1b0300.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.h` @type ^`int`;
  #L1b0304.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int`;
  #L1b0308.  v1:= v1 - v2 @kind int;
  #L1b030a.  if v0 > v1 then goto L1b0326;
  #L1b030e.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.f` @type ^`byte`[] @kind object;
  #L1b0312.  call temp:= `h`(v1, v2, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/u0;.h:([BII)Ljava/lang/String;` @kind static;
  #L1b0318.  v1:= temp @kind object;
  #L1b031a.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int`;
  #L1b031e.  v2:= v2 + v0 @kind int;
  #L1b0320.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int` := v2;
  #L1b0324.  return v1 @kind object;
  #L1b0326.  if v0 != 0 then goto L1b0330;
  #L1b032a.  v0:= "" @kind object;
  #L1b032e.  return v0 @kind object;
  #L1b0330.  if v0 > 0 then goto L1b033e;
  #L1b0334.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.f:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b033a.  v0:= temp @kind object;
  #L1b033c.  throw v0;
  #L1b033e.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b0344.  v0:= temp @kind object;
  #L1b0346.  throw v0;
}
procedure `int` `readTag`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readTag:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0220.  call temp:= `isAtEnd`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.isAtEnd:()Z` @kind virtual;
  #L1b0226.  v0:= temp;
  #L1b0228.  if v0 == 0 then goto L1b0234;
  #L1b022c.  v0:= 0I;
  #L1b022e.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.l` @type ^`int` := v0;
  #L1b0232.  return v0;
  #L1b0234.  call temp:= `readRawVarint32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint32:()I` @kind virtual;
  #L1b023a.  v0:= temp;
  #L1b023c.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.l` @type ^`int` := v0;
  #L1b0240.  call temp:= `getTagFieldNumber`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.getTagFieldNumber:(I)I` @kind static;
  #L1b0246.  v0:= temp;
  #L1b0248.  if v0 == 0 then goto L1b0252;
  #L1b024c.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.l` @type ^`int`;
  #L1b0250.  return v0;
  #L1b0252.  call temp:= `b`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.b:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b0258.  v0:= temp @kind object;
  #L1b025a.  throw v0;
}
procedure `int` `readUInt32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readUInt32:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b026c.  call temp:= `readRawVarint32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint32:()I` @kind virtual;
  #L1b0272.  v0:= temp;
  #L1b0274.  return v0;
}
procedure `long` `readUInt64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readUInt64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b0714.  call temp:= `readRawVarint64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint64:()J` @kind virtual;
  #L1b071a.  v0:= temp @kind wide;
  #L1b071c.  return v0 @kind wide;
}
procedure `void` `readUnknownGroup`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this, `int` v2 , `com.google.crypto.tink.shaded.protobuf.MessageLite$Builder` v3 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readUnknownGroup:(ILcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0894.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L1b089a.  v0:= temp @kind object;
  #L1b089c.  call `readGroup`(v1, v2, v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readGroup:(ILcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)V` @kind virtual;
  #L1b08a2.  return @kind void;
}
procedure `void` `resetSizeCounter`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.resetSizeCounter:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b08f8.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int`;
  #L1b08fc.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.k` @type ^`int` := v0;
  #L1b0900.  return @kind void;
}
procedure `boolean` `skipField`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v4 @kind this, `int` v5 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.skipField:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1afbd4.  call temp:= `getTagWireType`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.getTagWireType:(I)I` @kind static;
  #L1afbda.  v0:= temp;
  #L1afbdc.  v1:= 1I;
  #L1afbde.  if v0 == 0 then goto L1afc4e;
  #L1afbe2.  if v0 == v1 then goto L1afc42;
  #L1afbe6.  v2:= 2I;
  #L1afbe8.  if v0 == v2 then goto L1afc32;
  #L1afbec.  v2:= 3I;
  #L1afbee.  v3:= 4I;
  #L1afbf0.  if v0 == v2 then goto L1afc14;
  #L1afbf4.  if v0 == v3 then goto L1afc10;
  #L1afbf8.  v5:= 5I;
  #L1afbfa.  if v0 != v5 then goto L1afc06;
  #L1afbfe.  call `skipRawBytes`(v4, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.skipRawBytes:(I)V` @kind virtual;
  #L1afc04.  return v1;
  #L1afc06.  call temp:= `d`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.d:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException$InvalidWireTypeException;` @kind static;
  #L1afc0c.  v5:= temp @kind object;
  #L1afc0e.  throw v5;
  #L1afc10.  v5:= 0I;
  #L1afc12.  return v5;
  #L1afc14.  call `skipMessage`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.skipMessage:()V` @kind virtual;
  #L1afc1a.  call temp:= `getTagFieldNumber`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.getTagFieldNumber:(I)I` @kind static;
  #L1afc20.  v5:= temp;
  #L1afc22.  call temp:= `a`(v5, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.a:(II)I` @kind static;
  #L1afc28.  v5:= temp;
  #L1afc2a.  call `checkLastTagWas`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.checkLastTagWas:(I)V` @kind virtual;
  #L1afc30.  return v1;
  #L1afc32.  call temp:= `readRawVarint32`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint32:()I` @kind virtual;
  #L1afc38.  v5:= temp;
  #L1afc3a.  call `skipRawBytes`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.skipRawBytes:(I)V` @kind virtual;
  #L1afc40.  return v1;
  #L1afc42.  v5:= 8I;
  #L1afc46.  call `skipRawBytes`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.skipRawBytes:(I)V` @kind virtual;
  #L1afc4c.  return v1;
  #L1afc4e.  call `f`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.f:()V` @kind direct;
  #L1afc54.  return v1;
}
procedure `boolean` `skipField`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v4 @kind this, `int` v5 , `com.google.crypto.tink.shaded.protobuf.CodedOutputStream` v6 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.skipField:(ILcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1afc68.  call temp:= `getTagWireType`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.getTagWireType:(I)I` @kind static;
  #L1afc6e.  v0:= temp;
  #L1afc70.  v1:= 1I;
  #L1afc72.  if v0 == 0 then goto L1afd0c;
  #L1afc76.  if v0 == v1 then goto L1afcf6;
  #L1afc7a.  v2:= 2I;
  #L1afc7c.  if v0 == v2 then goto L1afce0;
  #L1afc80.  v2:= 3I;
  #L1afc82.  v3:= 4I;
  #L1afc84.  if v0 == v2 then goto L1afcb6;
  #L1afc88.  if v0 == v3 then goto L1afcb2;
  #L1afc8c.  v2:= 5I;
  #L1afc8e.  if v0 != v2 then goto L1afca8;
  #L1afc92.  call temp:= `readRawLittleEndian32`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawLittleEndian32:()I` @kind virtual;
  #L1afc98.  v0:= temp;
  #L1afc9a.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L1afca0.  call `writeFixed32NoTag`(v6, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeFixed32NoTag:(I)V` @kind virtual;
  #L1afca6.  return v1;
  #L1afca8.  call temp:= `d`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.d:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException$InvalidWireTypeException;` @kind static;
  #L1afcae.  v5:= temp @kind object;
  #L1afcb0.  throw v5;
  #L1afcb2.  v5:= 0I;
  #L1afcb4.  return v5;
  #L1afcb6.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L1afcbc.  call `skipMessage`(v4, v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.skipMessage:(Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;)V` @kind virtual;
  #L1afcc2.  call temp:= `getTagFieldNumber`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.getTagFieldNumber:(I)I` @kind static;
  #L1afcc8.  v5:= temp;
  #L1afcca.  call temp:= `a`(v5, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.a:(II)I` @kind static;
  #L1afcd0.  v5:= temp;
  #L1afcd2.  call `checkLastTagWas`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.checkLastTagWas:(I)V` @kind virtual;
  #L1afcd8.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L1afcde.  return v1;
  #L1afce0.  call temp:= `readBytes`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readBytes:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L1afce6.  v0:= temp @kind object;
  #L1afce8.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L1afcee.  call `writeBytesNoTag`(v6, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeBytesNoTag:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)V` @kind virtual;
  #L1afcf4.  return v1;
  #L1afcf6.  call temp:= `readRawLittleEndian64`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawLittleEndian64:()J` @kind virtual;
  #L1afcfc.  v2:= temp @kind wide;
  #L1afcfe.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L1afd04.  call `writeFixed64NoTag`(v6, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeFixed64NoTag:(J)V` @kind virtual;
  #L1afd0a.  return v1;
  #L1afd0c.  call temp:= `readInt64`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readInt64:()J` @kind virtual;
  #L1afd12.  v2:= temp @kind wide;
  #L1afd14.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L1afd1a.  call `writeUInt64NoTag`(v6, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeUInt64NoTag:(J)V` @kind virtual;
  #L1afd20.  return v1;
}
procedure `void` `skipMessage`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.skipMessage:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0914.  call temp:= `readTag`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readTag:()I` @kind virtual;
  #L1b091a.  v0:= temp;
  #L1b091c.  if v0 == 0 then goto L1b092c;
  #L1b0920.  call temp:= `skipField`(v1, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.skipField:(I)Z` @kind virtual;
  #L1b0926.  v0:= temp;
  #L1b0928.  if v0 != 0 then goto L1b0914;
  #L1b092c.  return @kind void;
}
procedure `void` `skipMessage`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.CodedOutputStream` v2 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.skipMessage:(Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0940.  call temp:= `readTag`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readTag:()I` @kind virtual;
  #L1b0946.  v0:= temp;
  #L1b0948.  if v0 == 0 then goto L1b0958;
  #L1b094c.  call temp:= `skipField`(v1, v0, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.skipField:(ILcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;)Z` @kind virtual;
  #L1b0952.  v0:= temp;
  #L1b0954.  if v0 != 0 then goto L1b0940;
  #L1b0958.  return @kind void;
}
procedure `void` `skipRawBytes`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this, `int` v3 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.skipRawBytes:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b096c.  if v3 < 0 then goto L1b0986;
  #L1b0970.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.h` @type ^`int`;
  #L1b0974.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int`;
  #L1b0978.  v0:= v0 - v1 @kind int;
  #L1b097a.  if v3 > v0 then goto L1b0986;
  #L1b097e.  v1:= v1 + v3 @kind int;
  #L1b0980.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int` := v1;
  #L1b0984.  return @kind void;
  #L1b0986.  if v3 >= 0 then goto L1b0994;
  #L1b098a.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.f:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b0990.  v3:= temp @kind object;
  #L1b0992.  throw v3;
  #L1b0994.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b099a.  v3:= temp @kind object;
  #L1b099c.  throw v3;
}
