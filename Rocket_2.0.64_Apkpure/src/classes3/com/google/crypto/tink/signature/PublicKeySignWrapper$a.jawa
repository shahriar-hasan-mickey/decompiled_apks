record `com.google.crypto.tink.signature.PublicKeySignWrapper$a` @kind class @AccessFlag  extends `com.google.crypto.tink.PublicKeySign` @kind interface {
  `com.google.crypto.tink.PrimitiveSet` `com.google.crypto.tink.signature.PublicKeySignWrapper$a.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.signature.PublicKeySignWrapper$a` v0 @kind this, `com.google.crypto.tink.PrimitiveSet` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/PublicKeySignWrapper$a;.<init>:(Lcom/google/crypto/tink/PrimitiveSet;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1dbd64.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1dbd6a.  v0.`com.google.crypto.tink.signature.PublicKeySignWrapper$a.a` @type ^`com.google.crypto.tink.PrimitiveSet` := v1 @kind object;
  #L1dbd6e.  return @kind void;
}
procedure `byte`[] `sign`(`com.google.crypto.tink.signature.PublicKeySignWrapper$a` v6 @kind this, `byte`[] v7 @kind object) @signature `Lcom/google/crypto/tink/signature/PublicKeySignWrapper$a;.sign:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1dbc78.  v0:= v6.`com.google.crypto.tink.signature.PublicKeySignWrapper$a.a` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L1dbc7c.  call temp:= `getPrimary`(v0) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimary:()Lcom/google/crypto/tink/PrimitiveSet$Entry;` @kind virtual;
  #L1dbc82.  v0:= temp @kind object;
  #L1dbc84.  call temp:= `getOutputPrefixType`(v0) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getOutputPrefixType:()Lcom/google/crypto/tink/proto/OutputPrefixType;` @kind virtual;
  #L1dbc8a.  v0:= temp @kind object;
  #L1dbc8c.  v1:= `@@com.google.crypto.tink.proto.OutputPrefixType.LEGACY` @type ^`com.google.crypto.tink.proto.OutputPrefixType` @kind object;
  #L1dbc90.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Enum;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1dbc96.  v0:= temp;
  #L1dbc98.  v1:= 2I;
  #L1dbc9a.  v2:= 1I;
  #L1dbc9c.  v3:= 0I;
  #L1dbc9e.  if v0 == 0 then goto L1dbd08;
  #L1dbca2.  v0:= new `byte`[v2];
  #L1dbca6.  v0[v3]:= v3 @kind byte;
  #L1dbcaa.  v4:= new `byte`[][v1];
  #L1dbcae.  v5:= v6.`com.google.crypto.tink.signature.PublicKeySignWrapper$a.a` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L1dbcb2.  call temp:= `getPrimary`(v5) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimary:()Lcom/google/crypto/tink/PrimitiveSet$Entry;` @kind virtual;
  #L1dbcb8.  v5:= temp @kind object;
  #L1dbcba.  call temp:= `getIdentifier`(v5) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getIdentifier:()[B` @kind virtual;
  #L1dbcc0.  v5:= temp @kind object;
  #L1dbcc2.  v4[v3]:= v5 @kind object;
  #L1dbcc6.  v5:= v6.`com.google.crypto.tink.signature.PublicKeySignWrapper$a.a` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L1dbcca.  call temp:= `getPrimary`(v5) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimary:()Lcom/google/crypto/tink/PrimitiveSet$Entry;` @kind virtual;
  #L1dbcd0.  v5:= temp @kind object;
  #L1dbcd2.  call temp:= `getPrimitive`(v5) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getPrimitive:()Ljava/lang/Object;` @kind virtual;
  #L1dbcd8.  v5:= temp @kind object;
  #L1dbcda.  v5:= (`com.google.crypto.tink.PublicKeySign`) v5 @kind object;
  #L1dbcde.  v1:= new `byte`[][v1];
  #L1dbce2.  v1[v3]:= v7 @kind object;
  #L1dbce6.  v1[v2]:= v0 @kind object;
  #L1dbcea.  call temp:= `concat`(v1) @signature `Lcom/google/crypto/tink/subtle/Bytes;.concat:([[B)[B` @kind static;
  #L1dbcf0.  v7:= temp @kind object;
  #L1dbcf2.  call temp:= `sign`(v5, v7) @signature `Lcom/google/crypto/tink/PublicKeySign;.sign:([B)[B` @kind interface;
  #L1dbcf8.  v7:= temp @kind object;
  #L1dbcfa.  v4[v2]:= v7 @kind object;
  #L1dbcfe.  call temp:= `concat`(v4) @signature `Lcom/google/crypto/tink/subtle/Bytes;.concat:([[B)[B` @kind static;
  #L1dbd04.  v7:= temp @kind object;
  #L1dbd06.  return v7 @kind object;
  #L1dbd08.  v0:= new `byte`[][v1];
  #L1dbd0c.  v1:= v6.`com.google.crypto.tink.signature.PublicKeySignWrapper$a.a` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L1dbd10.  call temp:= `getPrimary`(v1) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimary:()Lcom/google/crypto/tink/PrimitiveSet$Entry;` @kind virtual;
  #L1dbd16.  v1:= temp @kind object;
  #L1dbd18.  call temp:= `getIdentifier`(v1) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getIdentifier:()[B` @kind virtual;
  #L1dbd1e.  v1:= temp @kind object;
  #L1dbd20.  v0[v3]:= v1 @kind object;
  #L1dbd24.  v1:= v6.`com.google.crypto.tink.signature.PublicKeySignWrapper$a.a` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L1dbd28.  call temp:= `getPrimary`(v1) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimary:()Lcom/google/crypto/tink/PrimitiveSet$Entry;` @kind virtual;
  #L1dbd2e.  v1:= temp @kind object;
  #L1dbd30.  call temp:= `getPrimitive`(v1) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getPrimitive:()Ljava/lang/Object;` @kind virtual;
  #L1dbd36.  v1:= temp @kind object;
  #L1dbd38.  v1:= (`com.google.crypto.tink.PublicKeySign`) v1 @kind object;
  #L1dbd3c.  call temp:= `sign`(v1, v7) @signature `Lcom/google/crypto/tink/PublicKeySign;.sign:([B)[B` @kind interface;
  #L1dbd42.  v7:= temp @kind object;
  #L1dbd44.  v0[v2]:= v7 @kind object;
  #L1dbd48.  call temp:= `concat`(v0) @signature `Lcom/google/crypto/tink/subtle/Bytes;.concat:([[B)[B` @kind static;
  #L1dbd4e.  v7:= temp @kind object;
  #L1dbd50.  return v7 @kind object;
}
