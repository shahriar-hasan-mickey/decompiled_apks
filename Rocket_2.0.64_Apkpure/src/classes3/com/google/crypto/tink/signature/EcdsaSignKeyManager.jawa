record `com.google.crypto.tink.signature.EcdsaSignKeyManager` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.PrivateKeyTypeManager` @kind class {
}
procedure `void` `<init>`(`com.google.crypto.tink.signature.EcdsaSignKeyManager` v5 @kind this) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1db3f4.  v0:= constclass @type ^`com.google.crypto.tink.proto.EcdsaPrivateKey` @kind object;
  #L1db3f8.  v1:= constclass @type ^`com.google.crypto.tink.proto.EcdsaPublicKey` @kind object;
  #L1db3fc.  v2:= 1I;
  #L1db3fe.  v2:= new `com.google.crypto.tink.KeyTypeManager$PrimitiveFactory`[v2];
  #L1db402.  v3:= new `com.google.crypto.tink.signature.EcdsaSignKeyManager$a`;
  #L1db406.  v4:= constclass @type ^`com.google.crypto.tink.PublicKeySign` @kind object;
  #L1db40a.  call `<init>`(v3, v4) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager$a;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L1db410.  v4:= 0I;
  #L1db412.  v2[v4]:= v3 @kind object;
  #L1db416.  call `<init>`(v5, v0, v1, v2) @signature `Lcom/google/crypto/tink/PrivateKeyTypeManager;.<init>:(Ljava/lang/Class;Ljava/lang/Class;[Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;)V` @kind direct;
  #L1db41c.  return @kind void;
}
procedure `com.google.crypto.tink.KeyTemplate` `createKeyTemplate`(`com.google.crypto.tink.proto.HashType` v1 @kind object, `com.google.crypto.tink.proto.EllipticCurveType` v2 @kind object, `com.google.crypto.tink.proto.EcdsaSignatureEncoding` v3 @kind object, `com.google.crypto.tink.KeyTemplate$OutputPrefixType` v4 @kind object) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;.createKeyTemplate:(Lcom/google/crypto/tink/proto/HashType;Lcom/google/crypto/tink/proto/EllipticCurveType;Lcom/google/crypto/tink/proto/EcdsaSignatureEncoding;Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1db240.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/EcdsaParams;.newBuilder:()Lcom/google/crypto/tink/proto/EcdsaParams$Builder;` @kind static;
  #L1db246.  v0:= temp @kind object;
  #L1db248.  call temp:= `setHashType`(v0, v1) @signature `Lcom/google/crypto/tink/proto/EcdsaParams$Builder;.setHashType:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/proto/EcdsaParams$Builder;` @kind virtual;
  #L1db24e.  v1:= temp @kind object;
  #L1db250.  call temp:= `setCurve`(v1, v2) @signature `Lcom/google/crypto/tink/proto/EcdsaParams$Builder;.setCurve:(Lcom/google/crypto/tink/proto/EllipticCurveType;)Lcom/google/crypto/tink/proto/EcdsaParams$Builder;` @kind virtual;
  #L1db256.  v1:= temp @kind object;
  #L1db258.  call temp:= `setEncoding`(v1, v3) @signature `Lcom/google/crypto/tink/proto/EcdsaParams$Builder;.setEncoding:(Lcom/google/crypto/tink/proto/EcdsaSignatureEncoding;)Lcom/google/crypto/tink/proto/EcdsaParams$Builder;` @kind virtual;
  #L1db25e.  v1:= temp @kind object;
  #L1db260.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L1db266.  v1:= temp @kind object;
  #L1db268.  v1:= (`com.google.crypto.tink.proto.EcdsaParams`) v1 @kind object;
  #L1db26c.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/EcdsaKeyFormat;.newBuilder:()Lcom/google/crypto/tink/proto/EcdsaKeyFormat$Builder;` @kind static;
  #L1db272.  v2:= temp @kind object;
  #L1db274.  call temp:= `setParams`(v2, v1) @signature `Lcom/google/crypto/tink/proto/EcdsaKeyFormat$Builder;.setParams:(Lcom/google/crypto/tink/proto/EcdsaParams;)Lcom/google/crypto/tink/proto/EcdsaKeyFormat$Builder;` @kind virtual;
  #L1db27a.  v1:= temp @kind object;
  #L1db27c.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L1db282.  v1:= temp @kind object;
  #L1db284.  v1:= (`com.google.crypto.tink.proto.EcdsaKeyFormat`) v1 @kind object;
  #L1db288.  v2:= new `com.google.crypto.tink.signature.EcdsaSignKeyManager`;
  #L1db28c.  call `<init>`(v2) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;.<init>:()V` @kind direct;
  #L1db292.  call temp:= `getKeyType`(v2) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L1db298.  v2:= temp @kind object;
  #L1db29a.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteArray:()[B` @kind virtual;
  #L1db2a0.  v1:= temp @kind object;
  #L1db2a2.  call temp:= `create`(v2, v1, v4) @signature `Lcom/google/crypto/tink/KeyTemplate;.create:(Ljava/lang/String;[BLcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L1db2a8.  v1:= temp @kind object;
  #L1db2aa.  return v1 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `ecdsaP256Template`() @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;.ecdsaP256Template:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1db2bc.  v0:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L1db2c0.  v1:= `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P256` @type ^`com.google.crypto.tink.proto.EllipticCurveType` @kind object;
  #L1db2c4.  v2:= `@@com.google.crypto.tink.proto.EcdsaSignatureEncoding.DER` @type ^`com.google.crypto.tink.proto.EcdsaSignatureEncoding` @kind object;
  #L1db2c8.  v3:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.TINK` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L1db2cc.  call temp:= `createKeyTemplate`(v0, v1, v2, v3) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;.createKeyTemplate:(Lcom/google/crypto/tink/proto/HashType;Lcom/google/crypto/tink/proto/EllipticCurveType;Lcom/google/crypto/tink/proto/EcdsaSignatureEncoding;Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L1db2d2.  v0:= temp @kind object;
  #L1db2d4.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `rawEcdsaP256Template`() @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;.rawEcdsaP256Template:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1db2e8.  v0:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L1db2ec.  v1:= `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P256` @type ^`com.google.crypto.tink.proto.EllipticCurveType` @kind object;
  #L1db2f0.  v2:= `@@com.google.crypto.tink.proto.EcdsaSignatureEncoding.IEEE_P1363` @type ^`com.google.crypto.tink.proto.EcdsaSignatureEncoding` @kind object;
  #L1db2f4.  v3:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L1db2f8.  call temp:= `createKeyTemplate`(v0, v1, v2, v3) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;.createKeyTemplate:(Lcom/google/crypto/tink/proto/HashType;Lcom/google/crypto/tink/proto/EllipticCurveType;Lcom/google/crypto/tink/proto/EcdsaSignatureEncoding;Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L1db2fe.  v0:= temp @kind object;
  #L1db300.  return v0 @kind object;
}
procedure `void` `registerPair`(`boolean` v2 ) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;.registerPair:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1db430.  v0:= new `com.google.crypto.tink.signature.EcdsaSignKeyManager`;
  #L1db434.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;.<init>:()V` @kind direct;
  #L1db43a.  v1:= new `com.google.crypto.tink.signature.a`;
  #L1db43e.  call `<init>`(v1) @signature `Lcom/google/crypto/tink/signature/a;.<init>:()V` @kind direct;
  #L1db444.  call `registerAsymmetricKeyManagers`(v0, v1, v2) @signature `Lcom/google/crypto/tink/Registry;.registerAsymmetricKeyManagers:(Lcom/google/crypto/tink/PrivateKeyTypeManager;Lcom/google/crypto/tink/KeyTypeManager;Z)V` @kind static;
  #L1db44a.  return @kind void;
}
procedure `java.lang.String` `getKeyType`(`com.google.crypto.tink.signature.EcdsaSignKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;.getKeyType:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1db3dc.  v0:= "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey" @kind object;
  #L1db3e0.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.EcdsaPublicKey` `getPublicKey`(`com.google.crypto.tink.signature.EcdsaSignKeyManager` v0 @kind this, `com.google.crypto.tink.proto.EcdsaPrivateKey` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;.getPublicKey:(Lcom/google/crypto/tink/proto/EcdsaPrivateKey;)Lcom/google/crypto/tink/proto/EcdsaPublicKey;` @AccessFlag PUBLIC {
    temp;

  #L1db358.  call temp:= `getPublicKey`(v1) @signature `Lcom/google/crypto/tink/proto/EcdsaPrivateKey;.getPublicKey:()Lcom/google/crypto/tink/proto/EcdsaPublicKey;` @kind virtual;
  #L1db35e.  v1:= temp @kind object;
  #L1db360.  return v1 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `getPublicKey`(`com.google.crypto.tink.signature.EcdsaSignKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;.getPublicKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1db38c.  v1:= (`com.google.crypto.tink.proto.EcdsaPrivateKey`) v1 @kind object;
  #L1db390.  call temp:= `getPublicKey`(v0, v1) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;.getPublicKey:(Lcom/google/crypto/tink/proto/EcdsaPrivateKey;)Lcom/google/crypto/tink/proto/EcdsaPublicKey;` @kind virtual;
  #L1db396.  v1:= temp @kind object;
  #L1db398.  return v1 @kind object;
}
procedure `int` `getVersion`(`com.google.crypto.tink.signature.EcdsaSignKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;.getVersion:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1db3c8.  v0:= 0I;
  #L1db3ca.  return v0;
}
procedure `com.google.crypto.tink.KeyTypeManager$KeyFactory` `keyFactory`(`com.google.crypto.tink.signature.EcdsaSignKeyManager` v2 @kind this) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;.keyFactory:()Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1db314.  v0:= new `com.google.crypto.tink.signature.EcdsaSignKeyManager$b`;
  #L1db318.  v1:= constclass @type ^`com.google.crypto.tink.proto.EcdsaKeyFormat` @kind object;
  #L1db31c.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager$b;.<init>:(Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;Ljava/lang/Class;)V` @kind direct;
  #L1db322.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.KeyData$KeyMaterialType` `keyMaterialType`(`com.google.crypto.tink.signature.EcdsaSignKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;.keyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1db374.  v0:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.ASYMMETRIC_PRIVATE` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L1db378.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.EcdsaPrivateKey` `parseKey`(`com.google.crypto.tink.signature.EcdsaSignKeyManager` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/EcdsaPrivateKey;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1db334.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L1db33a.  v0:= temp @kind object;
  #L1db33c.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/EcdsaPrivateKey;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/EcdsaPrivateKey;` @kind static;
  #L1db342.  v2:= temp @kind object;
  #L1db344.  return v2 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKey`(`com.google.crypto.tink.signature.EcdsaSignKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1db3ac.  call temp:= `parseKey`(v0, v1) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/EcdsaPrivateKey;` @kind virtual;
  #L1db3b2.  v1:= temp @kind object;
  #L1db3b4.  return v1 @kind object;
}
procedure `void` `validateKey`(`com.google.crypto.tink.signature.EcdsaSignKeyManager` v2 @kind this, `com.google.crypto.tink.proto.EcdsaPrivateKey` v3 @kind object) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/EcdsaPrivateKey;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1db45c.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/proto/EcdsaPrivateKey;.getVersion:()I` @kind virtual;
  #L1db462.  v0:= temp;
  #L1db464.  call temp:= `getVersion`(v2) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;.getVersion:()I` @kind virtual;
  #L1db46a.  v1:= temp;
  #L1db46c.  call `validateVersion`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @kind static;
  #L1db472.  call temp:= `getPublicKey`(v3) @signature `Lcom/google/crypto/tink/proto/EcdsaPrivateKey;.getPublicKey:()Lcom/google/crypto/tink/proto/EcdsaPublicKey;` @kind virtual;
  #L1db478.  v3:= temp @kind object;
  #L1db47a.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/EcdsaPublicKey;.getParams:()Lcom/google/crypto/tink/proto/EcdsaParams;` @kind virtual;
  #L1db480.  v3:= temp @kind object;
  #L1db482.  call `d`(v3) @signature `Lcom/google/crypto/tink/signature/f;.d:(Lcom/google/crypto/tink/proto/EcdsaParams;)V` @kind static;
  #L1db488.  return @kind void;
}
procedure `void` `validateKey`(`com.google.crypto.tink.signature.EcdsaSignKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;.validateKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1db49c.  v1:= (`com.google.crypto.tink.proto.EcdsaPrivateKey`) v1 @kind object;
  #L1db4a0.  call `validateKey`(v0, v1) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/EcdsaPrivateKey;)V` @kind virtual;
  #L1db4a6.  return @kind void;
}
