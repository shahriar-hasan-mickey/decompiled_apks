record `com.google.crypto.tink.signature.c$a` @kind class @AccessFlag  extends `com.google.crypto.tink.PublicKeyVerify` @kind interface {
  `com.google.crypto.tink.PrimitiveSet` `com.google.crypto.tink.signature.c$a.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.signature.c$a` v0 @kind this, `com.google.crypto.tink.PrimitiveSet` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/c$a;.<init>:(Lcom/google/crypto/tink/PrimitiveSet;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1dbe94.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1dbe9a.  v0.`com.google.crypto.tink.signature.c$a.a` @type ^`com.google.crypto.tink.PrimitiveSet` := v1 @kind object;
  #L1dbe9e.  return @kind void;
}
procedure `void` `verify`(`com.google.crypto.tink.signature.c$a` v7 @kind this, `byte`[] v8 @kind object, `byte`[] v9 @kind object) @signature `Lcom/google/crypto/tink/signature/c$a;.verify:([B[B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1dbeb0.  v0:= length @variable v8;
  #L1dbeb2.  v1:= 5I;
  #L1dbeb4.  if v0 <= v1 then goto L1dbfe8;
  #L1dbeb8.  v0:= 0I;
  #L1dbeba.  call temp:= `copyOfRange`(v8, v0, v1) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L1dbec0.  v2:= temp @kind object;
  #L1dbec2.  v3:= length @variable v8;
  #L1dbec4.  call temp:= `copyOfRange`(v8, v1, v3) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L1dbeca.  v1:= temp @kind object;
  #L1dbecc.  v3:= v7.`com.google.crypto.tink.signature.c$a.a` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L1dbed0.  call temp:= `getPrimitive`(v3, v2) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimitive:([B)Ljava/util/List;` @kind virtual;
  #L1dbed6.  v2:= temp @kind object;
  #L1dbed8.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1dbede.  v2:= temp @kind object;
  #L1dbee0.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1dbee6.  v3:= temp;
  #L1dbee8.  if v3 == 0 then goto L1dbf94;
  #L1dbeec.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1dbef2.  v3:= temp @kind object;
  #L1dbef4.  v3:= (`com.google.crypto.tink.PrimitiveSet$Entry`) v3 @kind object;
  #L1dbef8.  call temp:= `getOutputPrefixType`(v3) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getOutputPrefixType:()Lcom/google/crypto/tink/proto/OutputPrefixType;` @kind virtual;
  #L1dbefe.  v4:= temp @kind object;
  #L1dbf00.  v5:= `@@com.google.crypto.tink.proto.OutputPrefixType.LEGACY` @type ^`com.google.crypto.tink.proto.OutputPrefixType` @kind object;
  #L1dbf04.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/Enum;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1dbf0a.  v4:= temp;
  #L1dbf0c.  if v4 == 0 then goto L1dbf44;
  #L1dbf10.  v4:= 1I;
  #L1dbf12.  v5:= new `byte`[v4];
  #L1dbf16.  v5[v0]:= v0 @kind byte;
  #L1dbf1a.  v6:= 2I;
  #L1dbf1c.  v6:= new `byte`[][v6];
  #L1dbf20.  v6[v0]:= v9 @kind object;
  #L1dbf24.  v6[v4]:= v5 @kind object;
  #L1dbf28.  call temp:= `concat`(v6) @signature `Lcom/google/crypto/tink/subtle/Bytes;.concat:([[B)[B` @kind static;
  #L1dbf2e.  v4:= temp @kind object;
  #L1dbf30.  call temp:= `getPrimitive`(v3) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getPrimitive:()Ljava/lang/Object;` @kind virtual;
  #L1dbf36.  v3:= temp @kind object;
  #L1dbf38.  v3:= (`com.google.crypto.tink.PublicKeyVerify`) v3 @kind object;
  #L1dbf3c.  call `verify`(v3, v1, v4) @signature `Lcom/google/crypto/tink/PublicKeyVerify;.verify:([B[B)V` @kind interface;
  #L1dbf42.  goto L1dbf56;
  #L1dbf44.  call temp:= `getPrimitive`(v3) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getPrimitive:()Ljava/lang/Object;` @kind virtual;
  #L1dbf4a.  v3:= temp @kind object;
  #L1dbf4c.  v3:= (`com.google.crypto.tink.PublicKeyVerify`) v3 @kind object;
  #L1dbf50.  call `verify`(v3, v1, v9) @signature `Lcom/google/crypto/tink/PublicKeyVerify;.verify:([B[B)V` @kind interface;
  #L1dbf56.  return @kind void;
  #L1dbf58.  v3:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L1dbf5a.  call temp:= `a`() @signature `Lcom/google/crypto/tink/signature/c;.a:()Ljava/util/logging/Logger;` @kind static;
  #L1dbf60.  v4:= temp @kind object;
  #L1dbf62.  v5:= new `java.lang.StringBuilder`;
  #L1dbf66.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1dbf6c.  v6:= "signature prefix matches a key, but cannot verify: " @kind object;
  #L1dbf70.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dbf76.  call temp:= `toString`(v3) @signature `Ljava/security/GeneralSecurityException;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dbf7c.  v3:= temp @kind object;
  #L1dbf7e.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dbf84.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dbf8a.  v3:= temp @kind object;
  #L1dbf8c.  call `info`(v4, v3) @signature `Ljava/util/logging/Logger;.info:(Ljava/lang/String;)V` @kind virtual;
  #L1dbf92.  goto L1dbee0;
  #L1dbf94.  v0:= v7.`com.google.crypto.tink.signature.c$a.a` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L1dbf98.  call temp:= `getRawPrimitives`(v0) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getRawPrimitives:()Ljava/util/List;` @kind virtual;
  #L1dbf9e.  v0:= temp @kind object;
  #L1dbfa0.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1dbfa6.  v0:= temp @kind object;
  #L1dbfa8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1dbfae.  v1:= temp;
  #L1dbfb0.  if v1 == 0 then goto L1dbfd8;
  #L1dbfb4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1dbfba.  v1:= temp @kind object;
  #L1dbfbc.  v1:= (`com.google.crypto.tink.PrimitiveSet$Entry`) v1 @kind object;
  #L1dbfc0.  call temp:= `getPrimitive`(v1) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getPrimitive:()Ljava/lang/Object;` @kind virtual;
  #L1dbfc6.  v1:= temp @kind object;
  #L1dbfc8.  v1:= (`com.google.crypto.tink.PublicKeyVerify`) v1 @kind object;
  #L1dbfcc.  call `verify`(v1, v8, v9) @signature `Lcom/google/crypto/tink/PublicKeyVerify;.verify:([B[B)V` @kind interface;
  #L1dbfd2.  return @kind void;
  #L1dbfd4.  
  #L1dbfd6.  goto L1dbfa8;
  #L1dbfd8.  v8:= new `java.security.GeneralSecurityException`;
  #L1dbfdc.  v9:= "invalid signature" @kind object;
  #L1dbfe0.  call `<init>`(v8, v9) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dbfe6.  throw v8;
  #L1dbfe8.  v8:= new `java.security.GeneralSecurityException`;
  #L1dbfec.  v9:= "signature too short" @kind object;
  #L1dbff0.  call `<init>`(v8, v9) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dbff6.  throw v8;
  catch `java.security.GeneralSecurityException` @[L1dbef8..L1dbf56] goto L1dbf58;
  catch `java.security.GeneralSecurityException` @[L1dbfc0..L1dbfd2] goto L1dbfd4;
}
