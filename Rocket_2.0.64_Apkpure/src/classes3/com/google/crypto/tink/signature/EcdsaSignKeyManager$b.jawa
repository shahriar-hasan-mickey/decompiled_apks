record `com.google.crypto.tink.signature.EcdsaSignKeyManager$b` @kind class @AccessFlag  extends `com.google.crypto.tink.KeyTypeManager$KeyFactory` @kind class {
  `com.google.crypto.tink.signature.EcdsaSignKeyManager` `com.google.crypto.tink.signature.EcdsaSignKeyManager$b.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.crypto.tink.signature.EcdsaSignKeyManager$b` v0 @kind this, `com.google.crypto.tink.signature.EcdsaSignKeyManager` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager$b;.<init>:(Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1db1e8.  v0.`com.google.crypto.tink.signature.EcdsaSignKeyManager$b.b` @type ^`com.google.crypto.tink.signature.EcdsaSignKeyManager` := v1 @kind object;
  #L1db1ec.  call `<init>`(v0, v2) @signature `Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L1db1f2.  return @kind void;
}
procedure `com.google.crypto.tink.proto.EcdsaPrivateKey` `a`(`com.google.crypto.tink.signature.EcdsaSignKeyManager$b` v4 @kind this, `com.google.crypto.tink.proto.EcdsaKeyFormat` v5 @kind object) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager$b;.a:(Lcom/google/crypto/tink/proto/EcdsaKeyFormat;)Lcom/google/crypto/tink/proto/EcdsaPrivateKey;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1db098.  call temp:= `getParams`(v5) @signature `Lcom/google/crypto/tink/proto/EcdsaKeyFormat;.getParams:()Lcom/google/crypto/tink/proto/EcdsaParams;` @kind virtual;
  #L1db09e.  v5:= temp @kind object;
  #L1db0a0.  call temp:= `getCurve`(v5) @signature `Lcom/google/crypto/tink/proto/EcdsaParams;.getCurve:()Lcom/google/crypto/tink/proto/EllipticCurveType;` @kind virtual;
  #L1db0a6.  v0:= temp @kind object;
  #L1db0a8.  call temp:= `a`(v0) @signature `Lcom/google/crypto/tink/signature/f;.a:(Lcom/google/crypto/tink/proto/EllipticCurveType;)Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;` @kind static;
  #L1db0ae.  v0:= temp @kind object;
  #L1db0b0.  call temp:= `generateKeyPair`(v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.generateKeyPair:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;)Ljava/security/KeyPair;` @kind static;
  #L1db0b6.  v0:= temp @kind object;
  #L1db0b8.  call temp:= `getPublic`(v0) @signature `Ljava/security/KeyPair;.getPublic:()Ljava/security/PublicKey;` @kind virtual;
  #L1db0be.  v1:= temp @kind object;
  #L1db0c0.  v1:= (`java.security.interfaces.ECPublicKey`) v1 @kind object;
  #L1db0c4.  call temp:= `getPrivate`(v0) @signature `Ljava/security/KeyPair;.getPrivate:()Ljava/security/PrivateKey;` @kind virtual;
  #L1db0ca.  v0:= temp @kind object;
  #L1db0cc.  v0:= (`java.security.interfaces.ECPrivateKey`) v0 @kind object;
  #L1db0d0.  call temp:= `getW`(v1) @signature `Ljava/security/interfaces/ECPublicKey;.getW:()Ljava/security/spec/ECPoint;` @kind interface;
  #L1db0d6.  v1:= temp @kind object;
  #L1db0d8.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/EcdsaPublicKey;.newBuilder:()Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;` @kind static;
  #L1db0de.  v2:= temp @kind object;
  #L1db0e0.  v3:= v4.`com.google.crypto.tink.signature.EcdsaSignKeyManager$b.b` @type ^`com.google.crypto.tink.signature.EcdsaSignKeyManager` @kind object;
  #L1db0e4.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;.getVersion:()I` @kind virtual;
  #L1db0ea.  v3:= temp;
  #L1db0ec.  call temp:= `setVersion`(v2, v3) @signature `Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;.setVersion:(I)Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;` @kind virtual;
  #L1db0f2.  v2:= temp @kind object;
  #L1db0f4.  call temp:= `setParams`(v2, v5) @signature `Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;.setParams:(Lcom/google/crypto/tink/proto/EcdsaParams;)Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;` @kind virtual;
  #L1db0fa.  v5:= temp @kind object;
  #L1db0fc.  call temp:= `getAffineX`(v1) @signature `Ljava/security/spec/ECPoint;.getAffineX:()Ljava/math/BigInteger;` @kind virtual;
  #L1db102.  v2:= temp @kind object;
  #L1db104.  call temp:= `toByteArray`(v2) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L1db10a.  v2:= temp @kind object;
  #L1db10c.  call temp:= `copyFrom`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L1db112.  v2:= temp @kind object;
  #L1db114.  call temp:= `setX`(v5, v2) @signature `Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;.setX:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;` @kind virtual;
  #L1db11a.  v5:= temp @kind object;
  #L1db11c.  call temp:= `getAffineY`(v1) @signature `Ljava/security/spec/ECPoint;.getAffineY:()Ljava/math/BigInteger;` @kind virtual;
  #L1db122.  v1:= temp @kind object;
  #L1db124.  call temp:= `toByteArray`(v1) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L1db12a.  v1:= temp @kind object;
  #L1db12c.  call temp:= `copyFrom`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L1db132.  v1:= temp @kind object;
  #L1db134.  call temp:= `setY`(v5, v1) @signature `Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;.setY:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;` @kind virtual;
  #L1db13a.  v5:= temp @kind object;
  #L1db13c.  call temp:= `build`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L1db142.  v5:= temp @kind object;
  #L1db144.  v5:= (`com.google.crypto.tink.proto.EcdsaPublicKey`) v5 @kind object;
  #L1db148.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/EcdsaPrivateKey;.newBuilder:()Lcom/google/crypto/tink/proto/EcdsaPrivateKey$Builder;` @kind static;
  #L1db14e.  v1:= temp @kind object;
  #L1db150.  v2:= v4.`com.google.crypto.tink.signature.EcdsaSignKeyManager$b.b` @type ^`com.google.crypto.tink.signature.EcdsaSignKeyManager` @kind object;
  #L1db154.  call temp:= `getVersion`(v2) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;.getVersion:()I` @kind virtual;
  #L1db15a.  v2:= temp;
  #L1db15c.  call temp:= `setVersion`(v1, v2) @signature `Lcom/google/crypto/tink/proto/EcdsaPrivateKey$Builder;.setVersion:(I)Lcom/google/crypto/tink/proto/EcdsaPrivateKey$Builder;` @kind virtual;
  #L1db162.  v1:= temp @kind object;
  #L1db164.  call temp:= `setPublicKey`(v1, v5) @signature `Lcom/google/crypto/tink/proto/EcdsaPrivateKey$Builder;.setPublicKey:(Lcom/google/crypto/tink/proto/EcdsaPublicKey;)Lcom/google/crypto/tink/proto/EcdsaPrivateKey$Builder;` @kind virtual;
  #L1db16a.  v5:= temp @kind object;
  #L1db16c.  call temp:= `getS`(v0) @signature `Ljava/security/interfaces/ECPrivateKey;.getS:()Ljava/math/BigInteger;` @kind interface;
  #L1db172.  v0:= temp @kind object;
  #L1db174.  call temp:= `toByteArray`(v0) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L1db17a.  v0:= temp @kind object;
  #L1db17c.  call temp:= `copyFrom`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L1db182.  v0:= temp @kind object;
  #L1db184.  call temp:= `setKeyValue`(v5, v0) @signature `Lcom/google/crypto/tink/proto/EcdsaPrivateKey$Builder;.setKeyValue:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/EcdsaPrivateKey$Builder;` @kind virtual;
  #L1db18a.  v5:= temp @kind object;
  #L1db18c.  call temp:= `build`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L1db192.  v5:= temp @kind object;
  #L1db194.  v5:= (`com.google.crypto.tink.proto.EcdsaPrivateKey`) v5 @kind object;
  #L1db198.  return v5 @kind object;
}
procedure `com.google.crypto.tink.proto.EcdsaKeyFormat` `b`(`com.google.crypto.tink.signature.EcdsaSignKeyManager$b` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager$b;.b:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/EcdsaKeyFormat;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1db074.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L1db07a.  v0:= temp @kind object;
  #L1db07c.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/EcdsaKeyFormat;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/EcdsaKeyFormat;` @kind static;
  #L1db082.  v2:= temp @kind object;
  #L1db084.  return v2 @kind object;
}
procedure `void` `c`(`com.google.crypto.tink.signature.EcdsaSignKeyManager$b` v0 @kind this, `com.google.crypto.tink.proto.EcdsaKeyFormat` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager$b;.c:(Lcom/google/crypto/tink/proto/EcdsaKeyFormat;)V` @AccessFlag PUBLIC {
    temp;

  #L1db204.  call temp:= `getParams`(v1) @signature `Lcom/google/crypto/tink/proto/EcdsaKeyFormat;.getParams:()Lcom/google/crypto/tink/proto/EcdsaParams;` @kind virtual;
  #L1db20a.  v1:= temp @kind object;
  #L1db20c.  call `d`(v1) @signature `Lcom/google/crypto/tink/signature/f;.d:(Lcom/google/crypto/tink/proto/EcdsaParams;)V` @kind static;
  #L1db212.  return @kind void;
}
procedure `java.lang.Object` `createKey`(`com.google.crypto.tink.signature.EcdsaSignKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager$b;.createKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1db1c8.  v1:= (`com.google.crypto.tink.proto.EcdsaKeyFormat`) v1 @kind object;
  #L1db1cc.  call temp:= `a`(v0, v1) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager$b;.a:(Lcom/google/crypto/tink/proto/EcdsaKeyFormat;)Lcom/google/crypto/tink/proto/EcdsaPrivateKey;` @kind virtual;
  #L1db1d2.  v1:= temp @kind object;
  #L1db1d4.  return v1 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKeyFormat`(`com.google.crypto.tink.signature.EcdsaSignKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager$b;.parseKeyFormat:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1db1ac.  call temp:= `b`(v0, v1) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager$b;.b:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/EcdsaKeyFormat;` @kind virtual;
  #L1db1b2.  v1:= temp @kind object;
  #L1db1b4.  return v1 @kind object;
}
procedure `void` `validateKeyFormat`(`com.google.crypto.tink.signature.EcdsaSignKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager$b;.validateKeyFormat:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1db224.  v1:= (`com.google.crypto.tink.proto.EcdsaKeyFormat`) v1 @kind object;
  #L1db228.  call `c`(v0, v1) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager$b;.c:(Lcom/google/crypto/tink/proto/EcdsaKeyFormat;)V` @kind virtual;
  #L1db22e.  return @kind void;
}
