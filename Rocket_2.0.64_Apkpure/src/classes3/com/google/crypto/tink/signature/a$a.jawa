record `com.google.crypto.tink.signature.a$a` @kind class @AccessFlag  extends `com.google.crypto.tink.KeyTypeManager$PrimitiveFactory` @kind class {
}
procedure `void` `<init>`(`com.google.crypto.tink.signature.a$a` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/a$a;.<init>:(Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1db564.  call `<init>`(v0, v1) @signature `Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L1db56a.  return @kind void;
}
procedure `com.google.crypto.tink.PublicKeyVerify` `b`(`com.google.crypto.tink.signature.a$a` v3 @kind this, `com.google.crypto.tink.proto.EcdsaPublicKey` v4 @kind object) @signature `Lcom/google/crypto/tink/signature/a$a;.b:(Lcom/google/crypto/tink/proto/EcdsaPublicKey;)Lcom/google/crypto/tink/PublicKeyVerify;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1db4b8.  call temp:= `getParams`(v4) @signature `Lcom/google/crypto/tink/proto/EcdsaPublicKey;.getParams:()Lcom/google/crypto/tink/proto/EcdsaParams;` @kind virtual;
  #L1db4be.  v0:= temp @kind object;
  #L1db4c0.  call temp:= `getCurve`(v0) @signature `Lcom/google/crypto/tink/proto/EcdsaParams;.getCurve:()Lcom/google/crypto/tink/proto/EllipticCurveType;` @kind virtual;
  #L1db4c6.  v0:= temp @kind object;
  #L1db4c8.  call temp:= `a`(v0) @signature `Lcom/google/crypto/tink/signature/f;.a:(Lcom/google/crypto/tink/proto/EllipticCurveType;)Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;` @kind static;
  #L1db4ce.  v0:= temp @kind object;
  #L1db4d0.  call temp:= `getX`(v4) @signature `Lcom/google/crypto/tink/proto/EcdsaPublicKey;.getX:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L1db4d6.  v1:= temp @kind object;
  #L1db4d8.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L1db4de.  v1:= temp @kind object;
  #L1db4e0.  call temp:= `getY`(v4) @signature `Lcom/google/crypto/tink/proto/EcdsaPublicKey;.getY:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L1db4e6.  v2:= temp @kind object;
  #L1db4e8.  call temp:= `toByteArray`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L1db4ee.  v2:= temp @kind object;
  #L1db4f0.  call temp:= `getEcPublicKey`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getEcPublicKey:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;[B[B)Ljava/security/interfaces/ECPublicKey;` @kind static;
  #L1db4f6.  v0:= temp @kind object;
  #L1db4f8.  v1:= new `com.google.crypto.tink.subtle.EcdsaVerifyJce`;
  #L1db4fc.  call temp:= `getParams`(v4) @signature `Lcom/google/crypto/tink/proto/EcdsaPublicKey;.getParams:()Lcom/google/crypto/tink/proto/EcdsaParams;` @kind virtual;
  #L1db502.  v2:= temp @kind object;
  #L1db504.  call temp:= `getHashType`(v2) @signature `Lcom/google/crypto/tink/proto/EcdsaParams;.getHashType:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L1db50a.  v2:= temp @kind object;
  #L1db50c.  call temp:= `c`(v2) @signature `Lcom/google/crypto/tink/signature/f;.c:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/subtle/Enums$HashType;` @kind static;
  #L1db512.  v2:= temp @kind object;
  #L1db514.  call temp:= `getParams`(v4) @signature `Lcom/google/crypto/tink/proto/EcdsaPublicKey;.getParams:()Lcom/google/crypto/tink/proto/EcdsaParams;` @kind virtual;
  #L1db51a.  v4:= temp @kind object;
  #L1db51c.  call temp:= `getEncoding`(v4) @signature `Lcom/google/crypto/tink/proto/EcdsaParams;.getEncoding:()Lcom/google/crypto/tink/proto/EcdsaSignatureEncoding;` @kind virtual;
  #L1db522.  v4:= temp @kind object;
  #L1db524.  call temp:= `b`(v4) @signature `Lcom/google/crypto/tink/signature/f;.b:(Lcom/google/crypto/tink/proto/EcdsaSignatureEncoding;)Lcom/google/crypto/tink/subtle/EllipticCurves$EcdsaEncoding;` @kind static;
  #L1db52a.  v4:= temp @kind object;
  #L1db52c.  call `<init>`(v1, v0, v2, v4) @signature `Lcom/google/crypto/tink/subtle/EcdsaVerifyJce;.<init>:(Ljava/security/interfaces/ECPublicKey;Lcom/google/crypto/tink/subtle/Enums$HashType;Lcom/google/crypto/tink/subtle/EllipticCurves$EcdsaEncoding;)V` @kind direct;
  #L1db532.  return v1 @kind object;
}
procedure `java.lang.Object` `getPrimitive`(`com.google.crypto.tink.signature.a$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/a$a;.getPrimitive:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1db544.  v1:= (`com.google.crypto.tink.proto.EcdsaPublicKey`) v1 @kind object;
  #L1db548.  call temp:= `b`(v0, v1) @signature `Lcom/google/crypto/tink/signature/a$a;.b:(Lcom/google/crypto/tink/proto/EcdsaPublicKey;)Lcom/google/crypto/tink/PublicKeyVerify;` @kind virtual;
  #L1db54e.  v1:= temp @kind object;
  #L1db550.  return v1 @kind object;
}
