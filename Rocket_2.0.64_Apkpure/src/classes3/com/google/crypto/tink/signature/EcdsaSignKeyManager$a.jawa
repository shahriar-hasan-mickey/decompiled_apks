record `com.google.crypto.tink.signature.EcdsaSignKeyManager$a` @kind class @AccessFlag  extends `com.google.crypto.tink.KeyTypeManager$PrimitiveFactory` @kind class {
}
procedure `void` `<init>`(`com.google.crypto.tink.signature.EcdsaSignKeyManager$a` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager$a;.<init>:(Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1db05c.  call `<init>`(v0, v1) @signature `Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L1db062.  return @kind void;
}
procedure `com.google.crypto.tink.PublicKeySign` `b`(`com.google.crypto.tink.signature.EcdsaSignKeyManager$a` v3 @kind this, `com.google.crypto.tink.proto.EcdsaPrivateKey` v4 @kind object) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager$a;.b:(Lcom/google/crypto/tink/proto/EcdsaPrivateKey;)Lcom/google/crypto/tink/PublicKeySign;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1dafa8.  call temp:= `getPublicKey`(v4) @signature `Lcom/google/crypto/tink/proto/EcdsaPrivateKey;.getPublicKey:()Lcom/google/crypto/tink/proto/EcdsaPublicKey;` @kind virtual;
  #L1dafae.  v0:= temp @kind object;
  #L1dafb0.  call temp:= `getParams`(v0) @signature `Lcom/google/crypto/tink/proto/EcdsaPublicKey;.getParams:()Lcom/google/crypto/tink/proto/EcdsaParams;` @kind virtual;
  #L1dafb6.  v0:= temp @kind object;
  #L1dafb8.  call temp:= `getCurve`(v0) @signature `Lcom/google/crypto/tink/proto/EcdsaParams;.getCurve:()Lcom/google/crypto/tink/proto/EllipticCurveType;` @kind virtual;
  #L1dafbe.  v0:= temp @kind object;
  #L1dafc0.  call temp:= `a`(v0) @signature `Lcom/google/crypto/tink/signature/f;.a:(Lcom/google/crypto/tink/proto/EllipticCurveType;)Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;` @kind static;
  #L1dafc6.  v0:= temp @kind object;
  #L1dafc8.  call temp:= `getKeyValue`(v4) @signature `Lcom/google/crypto/tink/proto/EcdsaPrivateKey;.getKeyValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L1dafce.  v1:= temp @kind object;
  #L1dafd0.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L1dafd6.  v1:= temp @kind object;
  #L1dafd8.  call temp:= `getEcPrivateKey`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getEcPrivateKey:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;[B)Ljava/security/interfaces/ECPrivateKey;` @kind static;
  #L1dafde.  v0:= temp @kind object;
  #L1dafe0.  v1:= new `com.google.crypto.tink.subtle.EcdsaSignJce`;
  #L1dafe4.  call temp:= `getPublicKey`(v4) @signature `Lcom/google/crypto/tink/proto/EcdsaPrivateKey;.getPublicKey:()Lcom/google/crypto/tink/proto/EcdsaPublicKey;` @kind virtual;
  #L1dafea.  v2:= temp @kind object;
  #L1dafec.  call temp:= `getParams`(v2) @signature `Lcom/google/crypto/tink/proto/EcdsaPublicKey;.getParams:()Lcom/google/crypto/tink/proto/EcdsaParams;` @kind virtual;
  #L1daff2.  v2:= temp @kind object;
  #L1daff4.  call temp:= `getHashType`(v2) @signature `Lcom/google/crypto/tink/proto/EcdsaParams;.getHashType:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L1daffa.  v2:= temp @kind object;
  #L1daffc.  call temp:= `c`(v2) @signature `Lcom/google/crypto/tink/signature/f;.c:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/subtle/Enums$HashType;` @kind static;
  #L1db002.  v2:= temp @kind object;
  #L1db004.  call temp:= `getPublicKey`(v4) @signature `Lcom/google/crypto/tink/proto/EcdsaPrivateKey;.getPublicKey:()Lcom/google/crypto/tink/proto/EcdsaPublicKey;` @kind virtual;
  #L1db00a.  v4:= temp @kind object;
  #L1db00c.  call temp:= `getParams`(v4) @signature `Lcom/google/crypto/tink/proto/EcdsaPublicKey;.getParams:()Lcom/google/crypto/tink/proto/EcdsaParams;` @kind virtual;
  #L1db012.  v4:= temp @kind object;
  #L1db014.  call temp:= `getEncoding`(v4) @signature `Lcom/google/crypto/tink/proto/EcdsaParams;.getEncoding:()Lcom/google/crypto/tink/proto/EcdsaSignatureEncoding;` @kind virtual;
  #L1db01a.  v4:= temp @kind object;
  #L1db01c.  call temp:= `b`(v4) @signature `Lcom/google/crypto/tink/signature/f;.b:(Lcom/google/crypto/tink/proto/EcdsaSignatureEncoding;)Lcom/google/crypto/tink/subtle/EllipticCurves$EcdsaEncoding;` @kind static;
  #L1db022.  v4:= temp @kind object;
  #L1db024.  call `<init>`(v1, v0, v2, v4) @signature `Lcom/google/crypto/tink/subtle/EcdsaSignJce;.<init>:(Ljava/security/interfaces/ECPrivateKey;Lcom/google/crypto/tink/subtle/Enums$HashType;Lcom/google/crypto/tink/subtle/EllipticCurves$EcdsaEncoding;)V` @kind direct;
  #L1db02a.  return v1 @kind object;
}
procedure `java.lang.Object` `getPrimitive`(`com.google.crypto.tink.signature.EcdsaSignKeyManager$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager$a;.getPrimitive:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1db03c.  v1:= (`com.google.crypto.tink.proto.EcdsaPrivateKey`) v1 @kind object;
  #L1db040.  call temp:= `b`(v0, v1) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager$a;.b:(Lcom/google/crypto/tink/proto/EcdsaPrivateKey;)Lcom/google/crypto/tink/PublicKeySign;` @kind virtual;
  #L1db046.  v1:= temp @kind object;
  #L1db048.  return v1 @kind object;
}
