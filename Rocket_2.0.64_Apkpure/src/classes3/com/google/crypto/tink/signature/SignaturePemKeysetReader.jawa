record `com.google.crypto.tink.signature.SignaturePemKeysetReader` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.KeysetReader` @kind interface {
  `java.util.List` `com.google.crypto.tink.signature.SignaturePemKeysetReader.a` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.google.crypto.tink.signature.SignaturePemKeysetReader` v0 @kind this, `java.util.List` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.<init>:(Ljava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1de7fc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1de802.  v0.`com.google.crypto.tink.signature.SignaturePemKeysetReader.a` @type ^`java.util.List` := v1 @kind object;
  #L1de806.  return @kind void;
}
procedure `com.google.crypto.tink.proto.KeyData` `a`(`com.google.crypto.tink.subtle.PemKeyType` v2 @kind object, `java.security.interfaces.ECPublicKey` v3 @kind object) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.a:(Lcom/google/crypto/tink/subtle/PemKeyType;Ljava/security/interfaces/ECPublicKey;)Lcom/google/crypto/tink/proto/KeyData;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1de25c.  v0:= v2.`com.google.crypto.tink.subtle.PemKeyType.algorithm` @type ^`java.lang.String` @kind object;
  #L1de260.  v1:= "ECDSA" @kind object;
  #L1de264.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1de26a.  v0:= temp;
  #L1de26c.  if v0 == 0 then goto L1de382;
  #L1de270.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/EcdsaParams;.newBuilder:()Lcom/google/crypto/tink/proto/EcdsaParams$Builder;` @kind static;
  #L1de276.  v0:= temp @kind object;
  #L1de278.  call temp:= `e`(v2) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.e:(Lcom/google/crypto/tink/subtle/PemKeyType;)Lcom/google/crypto/tink/proto/HashType;` @kind static;
  #L1de27e.  v1:= temp @kind object;
  #L1de280.  call temp:= `setHashType`(v0, v1) @signature `Lcom/google/crypto/tink/proto/EcdsaParams$Builder;.setHashType:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/proto/EcdsaParams$Builder;` @kind virtual;
  #L1de286.  v0:= temp @kind object;
  #L1de288.  call temp:= `c`(v2) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.c:(Lcom/google/crypto/tink/subtle/PemKeyType;)Lcom/google/crypto/tink/proto/EllipticCurveType;` @kind static;
  #L1de28e.  v2:= temp @kind object;
  #L1de290.  call temp:= `setCurve`(v0, v2) @signature `Lcom/google/crypto/tink/proto/EcdsaParams$Builder;.setCurve:(Lcom/google/crypto/tink/proto/EllipticCurveType;)Lcom/google/crypto/tink/proto/EcdsaParams$Builder;` @kind virtual;
  #L1de296.  v2:= temp @kind object;
  #L1de298.  v0:= `@@com.google.crypto.tink.proto.EcdsaSignatureEncoding.DER` @type ^`com.google.crypto.tink.proto.EcdsaSignatureEncoding` @kind object;
  #L1de29c.  call temp:= `setEncoding`(v2, v0) @signature `Lcom/google/crypto/tink/proto/EcdsaParams$Builder;.setEncoding:(Lcom/google/crypto/tink/proto/EcdsaSignatureEncoding;)Lcom/google/crypto/tink/proto/EcdsaParams$Builder;` @kind virtual;
  #L1de2a2.  v2:= temp @kind object;
  #L1de2a4.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L1de2aa.  v2:= temp @kind object;
  #L1de2ac.  v2:= (`com.google.crypto.tink.proto.EcdsaParams`) v2 @kind object;
  #L1de2b0.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/EcdsaPublicKey;.newBuilder:()Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;` @kind static;
  #L1de2b6.  v0:= temp @kind object;
  #L1de2b8.  v1:= new `com.google.crypto.tink.signature.a`;
  #L1de2bc.  call `<init>`(v1) @signature `Lcom/google/crypto/tink/signature/a;.<init>:()V` @kind direct;
  #L1de2c2.  call temp:= `getVersion`(v1) @signature `Lcom/google/crypto/tink/signature/a;.getVersion:()I` @kind virtual;
  #L1de2c8.  v1:= temp;
  #L1de2ca.  call temp:= `setVersion`(v0, v1) @signature `Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;.setVersion:(I)Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;` @kind virtual;
  #L1de2d0.  v0:= temp @kind object;
  #L1de2d2.  call temp:= `setParams`(v0, v2) @signature `Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;.setParams:(Lcom/google/crypto/tink/proto/EcdsaParams;)Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;` @kind virtual;
  #L1de2d8.  v2:= temp @kind object;
  #L1de2da.  call temp:= `getW`(v3) @signature `Ljava/security/interfaces/ECPublicKey;.getW:()Ljava/security/spec/ECPoint;` @kind interface;
  #L1de2e0.  v0:= temp @kind object;
  #L1de2e2.  call temp:= `getAffineX`(v0) @signature `Ljava/security/spec/ECPoint;.getAffineX:()Ljava/math/BigInteger;` @kind virtual;
  #L1de2e8.  v0:= temp @kind object;
  #L1de2ea.  call temp:= `toByteArray`(v0) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L1de2f0.  v0:= temp @kind object;
  #L1de2f2.  call temp:= `copyFrom`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L1de2f8.  v0:= temp @kind object;
  #L1de2fa.  call temp:= `setX`(v2, v0) @signature `Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;.setX:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;` @kind virtual;
  #L1de300.  v2:= temp @kind object;
  #L1de302.  call temp:= `getW`(v3) @signature `Ljava/security/interfaces/ECPublicKey;.getW:()Ljava/security/spec/ECPoint;` @kind interface;
  #L1de308.  v3:= temp @kind object;
  #L1de30a.  call temp:= `getAffineY`(v3) @signature `Ljava/security/spec/ECPoint;.getAffineY:()Ljava/math/BigInteger;` @kind virtual;
  #L1de310.  v3:= temp @kind object;
  #L1de312.  call temp:= `toByteArray`(v3) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L1de318.  v3:= temp @kind object;
  #L1de31a.  call temp:= `copyFrom`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L1de320.  v3:= temp @kind object;
  #L1de322.  call temp:= `setY`(v2, v3) @signature `Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;.setY:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;` @kind virtual;
  #L1de328.  v2:= temp @kind object;
  #L1de32a.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L1de330.  v2:= temp @kind object;
  #L1de332.  v2:= (`com.google.crypto.tink.proto.EcdsaPublicKey`) v2 @kind object;
  #L1de336.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/KeyData;.newBuilder:()Lcom/google/crypto/tink/proto/KeyData$Builder;` @kind static;
  #L1de33c.  v3:= temp @kind object;
  #L1de33e.  v0:= new `com.google.crypto.tink.signature.a`;
  #L1de342.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/signature/a;.<init>:()V` @kind direct;
  #L1de348.  call temp:= `getKeyType`(v0) @signature `Lcom/google/crypto/tink/signature/a;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L1de34e.  v0:= temp @kind object;
  #L1de350.  call temp:= `setTypeUrl`(v3, v0) @signature `Lcom/google/crypto/tink/proto/KeyData$Builder;.setTypeUrl:(Ljava/lang/String;)Lcom/google/crypto/tink/proto/KeyData$Builder;` @kind virtual;
  #L1de356.  v3:= temp @kind object;
  #L1de358.  call temp:= `toByteString`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteString:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L1de35e.  v2:= temp @kind object;
  #L1de360.  call temp:= `setValue`(v3, v2) @signature `Lcom/google/crypto/tink/proto/KeyData$Builder;.setValue:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/KeyData$Builder;` @kind virtual;
  #L1de366.  v2:= temp @kind object;
  #L1de368.  v3:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.ASYMMETRIC_PUBLIC` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L1de36c.  call temp:= `setKeyMaterialType`(v2, v3) @signature `Lcom/google/crypto/tink/proto/KeyData$Builder;.setKeyMaterialType:(Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;)Lcom/google/crypto/tink/proto/KeyData$Builder;` @kind virtual;
  #L1de372.  v2:= temp @kind object;
  #L1de374.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L1de37a.  v2:= temp @kind object;
  #L1de37c.  v2:= (`com.google.crypto.tink.proto.KeyData`) v2 @kind object;
  #L1de380.  return v2 @kind object;
  #L1de382.  v3:= new `java.io.IOException`;
  #L1de386.  v0:= new `java.lang.StringBuilder`;
  #L1de38a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1de390.  v1:= "unsupported EC signature algorithm: " @kind object;
  #L1de394.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1de39a.  v2:= v2.`com.google.crypto.tink.subtle.PemKeyType.algorithm` @type ^`java.lang.String` @kind object;
  #L1de39e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1de3a4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1de3aa.  v2:= temp @kind object;
  #L1de3ac.  call `<init>`(v3, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1de3b2.  throw v3;
}
procedure `com.google.crypto.tink.proto.KeyData` `b`(`com.google.crypto.tink.subtle.PemKeyType` v2 @kind object, `java.security.interfaces.RSAPublicKey` v3 @kind object) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.b:(Lcom/google/crypto/tink/subtle/PemKeyType;Ljava/security/interfaces/RSAPublicKey;)Lcom/google/crypto/tink/proto/KeyData;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1de3c4.  v0:= v2.`com.google.crypto.tink.subtle.PemKeyType.algorithm` @type ^`java.lang.String` @kind object;
  #L1de3c8.  v1:= "RSASSA-PKCS1-v1_5" @kind object;
  #L1de3cc.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1de3d2.  v0:= temp;
  #L1de3d4.  if v0 == 0 then goto L1de4be;
  #L1de3d8.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1Params;.newBuilder:()Lcom/google/crypto/tink/proto/RsaSsaPkcs1Params$Builder;` @kind static;
  #L1de3de.  v0:= temp @kind object;
  #L1de3e0.  call temp:= `e`(v2) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.e:(Lcom/google/crypto/tink/subtle/PemKeyType;)Lcom/google/crypto/tink/proto/HashType;` @kind static;
  #L1de3e6.  v2:= temp @kind object;
  #L1de3e8.  call temp:= `setHashType`(v0, v2) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1Params$Builder;.setHashType:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/proto/RsaSsaPkcs1Params$Builder;` @kind virtual;
  #L1de3ee.  v2:= temp @kind object;
  #L1de3f0.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L1de3f6.  v2:= temp @kind object;
  #L1de3f8.  v2:= (`com.google.crypto.tink.proto.RsaSsaPkcs1Params`) v2 @kind object;
  #L1de3fc.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey;.newBuilder:()Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey$Builder;` @kind static;
  #L1de402.  v0:= temp @kind object;
  #L1de404.  v1:= new `com.google.crypto.tink.signature.d`;
  #L1de408.  call `<init>`(v1) @signature `Lcom/google/crypto/tink/signature/d;.<init>:()V` @kind direct;
  #L1de40e.  call temp:= `getVersion`(v1) @signature `Lcom/google/crypto/tink/signature/d;.getVersion:()I` @kind virtual;
  #L1de414.  v1:= temp;
  #L1de416.  call temp:= `setVersion`(v0, v1) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey$Builder;.setVersion:(I)Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey$Builder;` @kind virtual;
  #L1de41c.  v0:= temp @kind object;
  #L1de41e.  call temp:= `setParams`(v0, v2) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey$Builder;.setParams:(Lcom/google/crypto/tink/proto/RsaSsaPkcs1Params;)Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey$Builder;` @kind virtual;
  #L1de424.  v2:= temp @kind object;
  #L1de426.  call temp:= `getPublicExponent`(v3) @signature `Ljava/security/interfaces/RSAPublicKey;.getPublicExponent:()Ljava/math/BigInteger;` @kind interface;
  #L1de42c.  v0:= temp @kind object;
  #L1de42e.  call temp:= `toByteArray`(v0) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L1de434.  v0:= temp @kind object;
  #L1de436.  call temp:= `copyFrom`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L1de43c.  v0:= temp @kind object;
  #L1de43e.  call temp:= `setE`(v2, v0) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey$Builder;.setE:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey$Builder;` @kind virtual;
  #L1de444.  v2:= temp @kind object;
  #L1de446.  call temp:= `getModulus`(v3) @signature `Ljava/security/interfaces/RSAPublicKey;.getModulus:()Ljava/math/BigInteger;` @kind interface;
  #L1de44c.  v3:= temp @kind object;
  #L1de44e.  call temp:= `toByteArray`(v3) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L1de454.  v3:= temp @kind object;
  #L1de456.  call temp:= `copyFrom`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L1de45c.  v3:= temp @kind object;
  #L1de45e.  call temp:= `setN`(v2, v3) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey$Builder;.setN:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey$Builder;` @kind virtual;
  #L1de464.  v2:= temp @kind object;
  #L1de466.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L1de46c.  v2:= temp @kind object;
  #L1de46e.  v2:= (`com.google.crypto.tink.proto.RsaSsaPkcs1PublicKey`) v2 @kind object;
  #L1de472.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/KeyData;.newBuilder:()Lcom/google/crypto/tink/proto/KeyData$Builder;` @kind static;
  #L1de478.  v3:= temp @kind object;
  #L1de47a.  v0:= new `com.google.crypto.tink.signature.d`;
  #L1de47e.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/signature/d;.<init>:()V` @kind direct;
  #L1de484.  call temp:= `getKeyType`(v0) @signature `Lcom/google/crypto/tink/signature/d;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L1de48a.  v0:= temp @kind object;
  #L1de48c.  call temp:= `setTypeUrl`(v3, v0) @signature `Lcom/google/crypto/tink/proto/KeyData$Builder;.setTypeUrl:(Ljava/lang/String;)Lcom/google/crypto/tink/proto/KeyData$Builder;` @kind virtual;
  #L1de492.  v3:= temp @kind object;
  #L1de494.  call temp:= `toByteString`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteString:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L1de49a.  v2:= temp @kind object;
  #L1de49c.  call temp:= `setValue`(v3, v2) @signature `Lcom/google/crypto/tink/proto/KeyData$Builder;.setValue:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/KeyData$Builder;` @kind virtual;
  #L1de4a2.  v2:= temp @kind object;
  #L1de4a4.  v3:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.ASYMMETRIC_PUBLIC` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L1de4a8.  call temp:= `setKeyMaterialType`(v2, v3) @signature `Lcom/google/crypto/tink/proto/KeyData$Builder;.setKeyMaterialType:(Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;)Lcom/google/crypto/tink/proto/KeyData$Builder;` @kind virtual;
  #L1de4ae.  v2:= temp @kind object;
  #L1de4b0.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L1de4b6.  v2:= temp @kind object;
  #L1de4b8.  v2:= (`com.google.crypto.tink.proto.KeyData`) v2 @kind object;
  #L1de4bc.  return v2 @kind object;
  #L1de4be.  v0:= v2.`com.google.crypto.tink.subtle.PemKeyType.algorithm` @type ^`java.lang.String` @kind object;
  #L1de4c2.  v1:= "RSASSA-PSS" @kind object;
  #L1de4c6.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1de4cc.  v0:= temp;
  #L1de4ce.  if v0 == 0 then goto L1de5d8;
  #L1de4d2.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/RsaSsaPssParams;.newBuilder:()Lcom/google/crypto/tink/proto/RsaSsaPssParams$Builder;` @kind static;
  #L1de4d8.  v0:= temp @kind object;
  #L1de4da.  call temp:= `e`(v2) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.e:(Lcom/google/crypto/tink/subtle/PemKeyType;)Lcom/google/crypto/tink/proto/HashType;` @kind static;
  #L1de4e0.  v1:= temp @kind object;
  #L1de4e2.  call temp:= `setSigHash`(v0, v1) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssParams$Builder;.setSigHash:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/proto/RsaSsaPssParams$Builder;` @kind virtual;
  #L1de4e8.  v0:= temp @kind object;
  #L1de4ea.  call temp:= `e`(v2) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.e:(Lcom/google/crypto/tink/subtle/PemKeyType;)Lcom/google/crypto/tink/proto/HashType;` @kind static;
  #L1de4f0.  v1:= temp @kind object;
  #L1de4f2.  call temp:= `setMgf1Hash`(v0, v1) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssParams$Builder;.setMgf1Hash:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/proto/RsaSsaPssParams$Builder;` @kind virtual;
  #L1de4f8.  v0:= temp @kind object;
  #L1de4fa.  call temp:= `d`(v2) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.d:(Lcom/google/crypto/tink/subtle/PemKeyType;)I` @kind static;
  #L1de500.  v2:= temp;
  #L1de502.  call temp:= `setSaltLength`(v0, v2) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssParams$Builder;.setSaltLength:(I)Lcom/google/crypto/tink/proto/RsaSsaPssParams$Builder;` @kind virtual;
  #L1de508.  v2:= temp @kind object;
  #L1de50a.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L1de510.  v2:= temp @kind object;
  #L1de512.  v2:= (`com.google.crypto.tink.proto.RsaSsaPssParams`) v2 @kind object;
  #L1de516.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey;.newBuilder:()Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey$Builder;` @kind static;
  #L1de51c.  v0:= temp @kind object;
  #L1de51e.  v1:= new `com.google.crypto.tink.signature.e`;
  #L1de522.  call `<init>`(v1) @signature `Lcom/google/crypto/tink/signature/e;.<init>:()V` @kind direct;
  #L1de528.  call temp:= `getVersion`(v1) @signature `Lcom/google/crypto/tink/signature/e;.getVersion:()I` @kind virtual;
  #L1de52e.  v1:= temp;
  #L1de530.  call temp:= `setVersion`(v0, v1) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey$Builder;.setVersion:(I)Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey$Builder;` @kind virtual;
  #L1de536.  v0:= temp @kind object;
  #L1de538.  call temp:= `setParams`(v0, v2) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey$Builder;.setParams:(Lcom/google/crypto/tink/proto/RsaSsaPssParams;)Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey$Builder;` @kind virtual;
  #L1de53e.  v2:= temp @kind object;
  #L1de540.  call temp:= `getPublicExponent`(v3) @signature `Ljava/security/interfaces/RSAPublicKey;.getPublicExponent:()Ljava/math/BigInteger;` @kind interface;
  #L1de546.  v0:= temp @kind object;
  #L1de548.  call temp:= `toByteArray`(v0) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L1de54e.  v0:= temp @kind object;
  #L1de550.  call temp:= `copyFrom`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L1de556.  v0:= temp @kind object;
  #L1de558.  call temp:= `setE`(v2, v0) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey$Builder;.setE:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey$Builder;` @kind virtual;
  #L1de55e.  v2:= temp @kind object;
  #L1de560.  call temp:= `getModulus`(v3) @signature `Ljava/security/interfaces/RSAPublicKey;.getModulus:()Ljava/math/BigInteger;` @kind interface;
  #L1de566.  v3:= temp @kind object;
  #L1de568.  call temp:= `toByteArray`(v3) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L1de56e.  v3:= temp @kind object;
  #L1de570.  call temp:= `copyFrom`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L1de576.  v3:= temp @kind object;
  #L1de578.  call temp:= `setN`(v2, v3) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey$Builder;.setN:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey$Builder;` @kind virtual;
  #L1de57e.  v2:= temp @kind object;
  #L1de580.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L1de586.  v2:= temp @kind object;
  #L1de588.  v2:= (`com.google.crypto.tink.proto.RsaSsaPssPublicKey`) v2 @kind object;
  #L1de58c.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/KeyData;.newBuilder:()Lcom/google/crypto/tink/proto/KeyData$Builder;` @kind static;
  #L1de592.  v3:= temp @kind object;
  #L1de594.  v0:= new `com.google.crypto.tink.signature.e`;
  #L1de598.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/signature/e;.<init>:()V` @kind direct;
  #L1de59e.  call temp:= `getKeyType`(v0) @signature `Lcom/google/crypto/tink/signature/e;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L1de5a4.  v0:= temp @kind object;
  #L1de5a6.  call temp:= `setTypeUrl`(v3, v0) @signature `Lcom/google/crypto/tink/proto/KeyData$Builder;.setTypeUrl:(Ljava/lang/String;)Lcom/google/crypto/tink/proto/KeyData$Builder;` @kind virtual;
  #L1de5ac.  v3:= temp @kind object;
  #L1de5ae.  call temp:= `toByteString`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteString:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L1de5b4.  v2:= temp @kind object;
  #L1de5b6.  call temp:= `setValue`(v3, v2) @signature `Lcom/google/crypto/tink/proto/KeyData$Builder;.setValue:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/KeyData$Builder;` @kind virtual;
  #L1de5bc.  v2:= temp @kind object;
  #L1de5be.  v3:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.ASYMMETRIC_PUBLIC` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L1de5c2.  call temp:= `setKeyMaterialType`(v2, v3) @signature `Lcom/google/crypto/tink/proto/KeyData$Builder;.setKeyMaterialType:(Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;)Lcom/google/crypto/tink/proto/KeyData$Builder;` @kind virtual;
  #L1de5c8.  v2:= temp @kind object;
  #L1de5ca.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L1de5d0.  v2:= temp @kind object;
  #L1de5d2.  v2:= (`com.google.crypto.tink.proto.KeyData`) v2 @kind object;
  #L1de5d6.  return v2 @kind object;
  #L1de5d8.  v3:= new `java.io.IOException`;
  #L1de5dc.  v0:= new `java.lang.StringBuilder`;
  #L1de5e0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1de5e6.  v1:= "unsupported RSA signature algorithm: " @kind object;
  #L1de5ea.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1de5f0.  v2:= v2.`com.google.crypto.tink.subtle.PemKeyType.algorithm` @type ^`java.lang.String` @kind object;
  #L1de5f4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1de5fa.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1de600.  v2:= temp @kind object;
  #L1de602.  call `<init>`(v3, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1de608.  throw v3;
}
procedure `com.google.crypto.tink.proto.EllipticCurveType` `c`(`com.google.crypto.tink.subtle.PemKeyType` v3 @kind object) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.c:(Lcom/google/crypto/tink/subtle/PemKeyType;)Lcom/google/crypto/tink/proto/EllipticCurveType;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1de14c.  v0:= v3.`com.google.crypto.tink.subtle.PemKeyType.keySizeInBits` @type ^`int`;
  #L1de150.  v1:= 256I;
  #L1de154.  if v0 == v1 then goto L1de1a6;
  #L1de158.  v1:= 384I;
  #L1de15c.  if v0 == v1 then goto L1de1a0;
  #L1de160.  v1:= 521I;
  #L1de164.  if v0 != v1 then goto L1de16e;
  #L1de168.  v3:= `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P521` @type ^`com.google.crypto.tink.proto.EllipticCurveType` @kind object;
  #L1de16c.  return v3 @kind object;
  #L1de16e.  v0:= new `java.lang.IllegalArgumentException`;
  #L1de172.  v1:= new `java.lang.StringBuilder`;
  #L1de176.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1de17c.  v2:= "unsupported curve for key size: " @kind object;
  #L1de180.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1de186.  v3:= v3.`com.google.crypto.tink.subtle.PemKeyType.keySizeInBits` @type ^`int`;
  #L1de18a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1de190.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1de196.  v3:= temp @kind object;
  #L1de198.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1de19e.  throw v0;
  #L1de1a0.  v3:= `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P384` @type ^`com.google.crypto.tink.proto.EllipticCurveType` @kind object;
  #L1de1a4.  return v3 @kind object;
  #L1de1a6.  v3:= `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P256` @type ^`com.google.crypto.tink.proto.EllipticCurveType` @kind object;
  #L1de1aa.  return v3 @kind object;
}
procedure `int` `d`(`com.google.crypto.tink.subtle.PemKeyType` v3 @kind object) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.d:(Lcom/google/crypto/tink/subtle/PemKeyType;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1de778.  v0:= `@@com.google.crypto.tink.signature.SignaturePemKeysetReader$a.a` @type ^`int`[] @kind object;
  #L1de77c.  v1:= v3.`com.google.crypto.tink.subtle.PemKeyType.hash` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L1de780.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1de786.  v1:= temp;
  #L1de788.  v0:= v0[v1];
  #L1de78c.  v1:= 1I;
  #L1de78e.  if v0 == v1 then goto L1de7e4;
  #L1de792.  v1:= 2I;
  #L1de794.  if v0 == v1 then goto L1de7de;
  #L1de798.  v1:= 3I;
  #L1de79a.  if v0 != v1 then goto L1de7a4;
  #L1de79e.  v3:= 64I;
  #L1de7a2.  return v3;
  #L1de7a4.  v0:= new `java.lang.IllegalArgumentException`;
  #L1de7a8.  v1:= new `java.lang.StringBuilder`;
  #L1de7ac.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1de7b2.  v2:= "unsupported hash type: " @kind object;
  #L1de7b6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1de7bc.  v3:= v3.`com.google.crypto.tink.subtle.PemKeyType.hash` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L1de7c0.  call temp:= `name`(v3) @signature `Ljava/lang/Enum;.name:()Ljava/lang/String;` @kind virtual;
  #L1de7c6.  v3:= temp @kind object;
  #L1de7c8.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1de7ce.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1de7d4.  v3:= temp @kind object;
  #L1de7d6.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1de7dc.  throw v0;
  #L1de7de.  v3:= 48I;
  #L1de7e2.  return v3;
  #L1de7e4.  v3:= 32I;
  #L1de7e8.  return v3;
}
procedure `com.google.crypto.tink.proto.HashType` `e`(`com.google.crypto.tink.subtle.PemKeyType` v3 @kind object) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.e:(Lcom/google/crypto/tink/subtle/PemKeyType;)Lcom/google/crypto/tink/proto/HashType;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1de1d8.  v0:= `@@com.google.crypto.tink.signature.SignaturePemKeysetReader$a.a` @type ^`int`[] @kind object;
  #L1de1dc.  v1:= v3.`com.google.crypto.tink.subtle.PemKeyType.hash` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L1de1e0.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1de1e6.  v1:= temp;
  #L1de1e8.  v0:= v0[v1];
  #L1de1ec.  v1:= 1I;
  #L1de1ee.  if v0 == v1 then goto L1de244;
  #L1de1f2.  v1:= 2I;
  #L1de1f4.  if v0 == v1 then goto L1de23e;
  #L1de1f8.  v1:= 3I;
  #L1de1fa.  if v0 != v1 then goto L1de204;
  #L1de1fe.  v3:= `@@com.google.crypto.tink.proto.HashType.SHA512` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L1de202.  return v3 @kind object;
  #L1de204.  v0:= new `java.lang.IllegalArgumentException`;
  #L1de208.  v1:= new `java.lang.StringBuilder`;
  #L1de20c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1de212.  v2:= "unsupported hash type: " @kind object;
  #L1de216.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1de21c.  v3:= v3.`com.google.crypto.tink.subtle.PemKeyType.hash` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L1de220.  call temp:= `name`(v3) @signature `Ljava/lang/Enum;.name:()Ljava/lang/String;` @kind virtual;
  #L1de226.  v3:= temp @kind object;
  #L1de228.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1de22e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1de234.  v3:= temp @kind object;
  #L1de236.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1de23c.  throw v0;
  #L1de23e.  v3:= `@@com.google.crypto.tink.proto.HashType.SHA384` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L1de242.  return v3 @kind object;
  #L1de244.  v3:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L1de248.  return v3 @kind object;
}
procedure `com.google.crypto.tink.proto.Keyset$Key` `f`(`java.io.BufferedReader` v2 @kind object, `com.google.crypto.tink.subtle.PemKeyType` v3 @kind object) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.f:(Ljava/io/BufferedReader;Lcom/google/crypto/tink/subtle/PemKeyType;)Lcom/google/crypto/tink/proto/Keyset$Key;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1de6c8.  call temp:= `readKey`(v3, v2) @signature `Lcom/google/crypto/tink/subtle/PemKeyType;.readKey:(Ljava/io/BufferedReader;)Ljava/security/Key;` @kind virtual;
  #L1de6ce.  v2:= temp @kind object;
  #L1de6d0.  v0:= 0I;
  #L1de6d2.  if v2 != 0 then goto L1de6d8;
  #L1de6d6.  return v0 @kind object;
  #L1de6d8.  v1:= instanceof @variable v2 @type ^`java.security.interfaces.RSAPublicKey` @kind boolean;
  #L1de6dc.  if v1 == 0 then goto L1de6ee;
  #L1de6e0.  v2:= (`java.security.interfaces.RSAPublicKey`) v2 @kind object;
  #L1de6e4.  call temp:= `b`(v3, v2) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.b:(Lcom/google/crypto/tink/subtle/PemKeyType;Ljava/security/interfaces/RSAPublicKey;)Lcom/google/crypto/tink/proto/KeyData;` @kind static;
  #L1de6ea.  v2:= temp @kind object;
  #L1de6ec.  goto L1de702;
  #L1de6ee.  v1:= instanceof @variable v2 @type ^`java.security.interfaces.ECPublicKey` @kind boolean;
  #L1de6f2.  if v1 == 0 then goto L1de748;
  #L1de6f6.  v2:= (`java.security.interfaces.ECPublicKey`) v2 @kind object;
  #L1de6fa.  call temp:= `a`(v3, v2) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.a:(Lcom/google/crypto/tink/subtle/PemKeyType;Ljava/security/interfaces/ECPublicKey;)Lcom/google/crypto/tink/proto/KeyData;` @kind static;
  #L1de700.  v2:= temp @kind object;
  #L1de702.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.newBuilder:()Lcom/google/crypto/tink/proto/Keyset$Key$Builder;` @kind static;
  #L1de708.  v3:= temp @kind object;
  #L1de70a.  call temp:= `setKeyData`(v3, v2) @signature `Lcom/google/crypto/tink/proto/Keyset$Key$Builder;.setKeyData:(Lcom/google/crypto/tink/proto/KeyData;)Lcom/google/crypto/tink/proto/Keyset$Key$Builder;` @kind virtual;
  #L1de710.  v2:= temp @kind object;
  #L1de712.  v3:= `@@com.google.crypto.tink.proto.KeyStatusType.ENABLED` @type ^`com.google.crypto.tink.proto.KeyStatusType` @kind object;
  #L1de716.  call temp:= `setStatus`(v2, v3) @signature `Lcom/google/crypto/tink/proto/Keyset$Key$Builder;.setStatus:(Lcom/google/crypto/tink/proto/KeyStatusType;)Lcom/google/crypto/tink/proto/Keyset$Key$Builder;` @kind virtual;
  #L1de71c.  v2:= temp @kind object;
  #L1de71e.  v3:= `@@com.google.crypto.tink.proto.OutputPrefixType.RAW` @type ^`com.google.crypto.tink.proto.OutputPrefixType` @kind object;
  #L1de722.  call temp:= `setOutputPrefixType`(v2, v3) @signature `Lcom/google/crypto/tink/proto/Keyset$Key$Builder;.setOutputPrefixType:(Lcom/google/crypto/tink/proto/OutputPrefixType;)Lcom/google/crypto/tink/proto/Keyset$Key$Builder;` @kind virtual;
  #L1de728.  v2:= temp @kind object;
  #L1de72a.  call temp:= `randInt`() @signature `Lcom/google/crypto/tink/subtle/Random;.randInt:()I` @kind static;
  #L1de730.  v3:= temp;
  #L1de732.  call temp:= `setKeyId`(v2, v3) @signature `Lcom/google/crypto/tink/proto/Keyset$Key$Builder;.setKeyId:(I)Lcom/google/crypto/tink/proto/Keyset$Key$Builder;` @kind virtual;
  #L1de738.  v2:= temp @kind object;
  #L1de73a.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L1de740.  v2:= temp @kind object;
  #L1de742.  v2:= (`com.google.crypto.tink.proto.Keyset$Key`) v2 @kind object;
  #L1de746.  return v2 @kind object;
  #L1de748.  return v0 @kind object;
}
procedure `com.google.crypto.tink.signature.SignaturePemKeysetReader$Builder` `newBuilder`() @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.newBuilder:()Lcom/google/crypto/tink/signature/SignaturePemKeysetReader$Builder;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1de75c.  v0:= new `com.google.crypto.tink.signature.SignaturePemKeysetReader$Builder`;
  #L1de760.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader$Builder;.<init>:()V` @kind direct;
  #L1de766.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.Keyset` `read`(`com.google.crypto.tink.signature.SignaturePemKeysetReader` v5 @kind this) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.read:()Lcom/google/crypto/tink/proto/Keyset;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1de61c.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/Keyset;.newBuilder:()Lcom/google/crypto/tink/proto/Keyset$Builder;` @kind static;
  #L1de622.  v0:= temp @kind object;
  #L1de624.  v1:= v5.`com.google.crypto.tink.signature.SignaturePemKeysetReader.a` @type ^`java.util.List` @kind object;
  #L1de628.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1de62e.  v1:= temp @kind object;
  #L1de630.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1de636.  v2:= temp;
  #L1de638.  if v2 == 0 then goto L1de674;
  #L1de63c.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1de642.  v2:= temp @kind object;
  #L1de644.  v2:= (`com.google.crypto.tink.signature.SignaturePemKeysetReader$b`) v2 @kind object;
  #L1de648.  v3:= v2.`com.google.crypto.tink.signature.SignaturePemKeysetReader$b.a` @type ^`java.io.BufferedReader` @kind object;
  #L1de64c.  v4:= v2.`com.google.crypto.tink.signature.SignaturePemKeysetReader$b.b` @type ^`com.google.crypto.tink.subtle.PemKeyType` @kind object;
  #L1de650.  call temp:= `f`(v3, v4) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.f:(Ljava/io/BufferedReader;Lcom/google/crypto/tink/subtle/PemKeyType;)Lcom/google/crypto/tink/proto/Keyset$Key;` @kind static;
  #L1de656.  v3:= temp @kind object;
  #L1de658.  if v3 == 0 then goto L1de630;
  #L1de65c.  call temp:= `addKey`(v0, v3) @signature `Lcom/google/crypto/tink/proto/Keyset$Builder;.addKey:(Lcom/google/crypto/tink/proto/Keyset$Key;)Lcom/google/crypto/tink/proto/Keyset$Builder;` @kind virtual;
  #L1de662.  v3:= v2.`com.google.crypto.tink.signature.SignaturePemKeysetReader$b.a` @type ^`java.io.BufferedReader` @kind object;
  #L1de666.  v4:= v2.`com.google.crypto.tink.signature.SignaturePemKeysetReader$b.b` @type ^`com.google.crypto.tink.subtle.PemKeyType` @kind object;
  #L1de66a.  call temp:= `f`(v3, v4) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.f:(Ljava/io/BufferedReader;Lcom/google/crypto/tink/subtle/PemKeyType;)Lcom/google/crypto/tink/proto/Keyset$Key;` @kind static;
  #L1de670.  v3:= temp @kind object;
  #L1de672.  goto L1de658;
  #L1de674.  call temp:= `getKeyCount`(v0) @signature `Lcom/google/crypto/tink/proto/Keyset$Builder;.getKeyCount:()I` @kind virtual;
  #L1de67a.  v1:= temp;
  #L1de67c.  if v1 == 0 then goto L1de6a6;
  #L1de680.  v1:= 0I;
  #L1de682.  call temp:= `getKey`(v0, v1) @signature `Lcom/google/crypto/tink/proto/Keyset$Builder;.getKey:(I)Lcom/google/crypto/tink/proto/Keyset$Key;` @kind virtual;
  #L1de688.  v1:= temp @kind object;
  #L1de68a.  call temp:= `getKeyId`(v1) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyId:()I` @kind virtual;
  #L1de690.  v1:= temp;
  #L1de692.  call temp:= `setPrimaryKeyId`(v0, v1) @signature `Lcom/google/crypto/tink/proto/Keyset$Builder;.setPrimaryKeyId:(I)Lcom/google/crypto/tink/proto/Keyset$Builder;` @kind virtual;
  #L1de698.  call temp:= `build`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L1de69e.  v0:= temp @kind object;
  #L1de6a0.  v0:= (`com.google.crypto.tink.proto.Keyset`) v0 @kind object;
  #L1de6a4.  return v0 @kind object;
  #L1de6a6.  v0:= new `java.io.IOException`;
  #L1de6aa.  v1:= "cannot find any key" @kind object;
  #L1de6ae.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1de6b4.  throw v0;
}
procedure `com.google.crypto.tink.proto.EncryptedKeyset` `readEncrypted`(`com.google.crypto.tink.signature.SignaturePemKeysetReader` v1 @kind this) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.readEncrypted:()Lcom/google/crypto/tink/proto/EncryptedKeyset;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1de1bc.  v0:= new `java.lang.UnsupportedOperationException`;
  #L1de1c0.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L1de1c6.  throw v0;
}
