record `com.google.crypto.tink.signature.f` @kind class @AccessFlag FINAL {
}
procedure `com.google.crypto.tink.subtle.EllipticCurves$CurveType` `a`(`com.google.crypto.tink.proto.EllipticCurveType` v3 @kind object) @signature `Lcom/google/crypto/tink/signature/f;.a:(Lcom/google/crypto/tink/proto/EllipticCurveType;)Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1dd878.  v0:= `@@com.google.crypto.tink.signature.f$a.b` @type ^`int`[] @kind object;
  #L1dd87c.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1dd882.  v1:= temp;
  #L1dd884.  v0:= v0[v1];
  #L1dd888.  v1:= 1I;
  #L1dd88a.  if v0 == v1 then goto L1dd8dc;
  #L1dd88e.  v1:= 2I;
  #L1dd890.  if v0 == v1 then goto L1dd8d6;
  #L1dd894.  v1:= 3I;
  #L1dd896.  if v0 != v1 then goto L1dd8a0;
  #L1dd89a.  v3:= `@@com.google.crypto.tink.subtle.EllipticCurves$CurveType.NIST_P521` @type ^`com.google.crypto.tink.subtle.EllipticCurves$CurveType` @kind object;
  #L1dd89e.  return v3 @kind object;
  #L1dd8a0.  v0:= new `java.security.GeneralSecurityException`;
  #L1dd8a4.  v1:= new `java.lang.StringBuilder`;
  #L1dd8a8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1dd8ae.  v2:= "unknown curve type: " @kind object;
  #L1dd8b2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dd8b8.  call temp:= `name`(v3) @signature `Ljava/lang/Enum;.name:()Ljava/lang/String;` @kind virtual;
  #L1dd8be.  v3:= temp @kind object;
  #L1dd8c0.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dd8c6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dd8cc.  v3:= temp @kind object;
  #L1dd8ce.  call `<init>`(v0, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dd8d4.  throw v0;
  #L1dd8d6.  v3:= `@@com.google.crypto.tink.subtle.EllipticCurves$CurveType.NIST_P384` @type ^`com.google.crypto.tink.subtle.EllipticCurves$CurveType` @kind object;
  #L1dd8da.  return v3 @kind object;
  #L1dd8dc.  v3:= `@@com.google.crypto.tink.subtle.EllipticCurves$CurveType.NIST_P256` @type ^`com.google.crypto.tink.subtle.EllipticCurves$CurveType` @kind object;
  #L1dd8e0.  return v3 @kind object;
}
procedure `com.google.crypto.tink.subtle.EllipticCurves$EcdsaEncoding` `b`(`com.google.crypto.tink.proto.EcdsaSignatureEncoding` v3 @kind object) @signature `Lcom/google/crypto/tink/signature/f;.b:(Lcom/google/crypto/tink/proto/EcdsaSignatureEncoding;)Lcom/google/crypto/tink/subtle/EllipticCurves$EcdsaEncoding;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1dd8f4.  v0:= `@@com.google.crypto.tink.signature.f$a.a` @type ^`int`[] @kind object;
  #L1dd8f8.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1dd8fe.  v1:= temp;
  #L1dd900.  v0:= v0[v1];
  #L1dd904.  v1:= 1I;
  #L1dd906.  if v0 == v1 then goto L1dd94c;
  #L1dd90a.  v1:= 2I;
  #L1dd90c.  if v0 != v1 then goto L1dd916;
  #L1dd910.  v3:= `@@com.google.crypto.tink.subtle.EllipticCurves$EcdsaEncoding.IEEE_P1363` @type ^`com.google.crypto.tink.subtle.EllipticCurves$EcdsaEncoding` @kind object;
  #L1dd914.  return v3 @kind object;
  #L1dd916.  v0:= new `java.security.GeneralSecurityException`;
  #L1dd91a.  v1:= new `java.lang.StringBuilder`;
  #L1dd91e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1dd924.  v2:= "unknown ECDSA encoding: " @kind object;
  #L1dd928.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dd92e.  call temp:= `name`(v3) @signature `Ljava/lang/Enum;.name:()Ljava/lang/String;` @kind virtual;
  #L1dd934.  v3:= temp @kind object;
  #L1dd936.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dd93c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dd942.  v3:= temp @kind object;
  #L1dd944.  call `<init>`(v0, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dd94a.  throw v0;
  #L1dd94c.  v3:= `@@com.google.crypto.tink.subtle.EllipticCurves$EcdsaEncoding.DER` @type ^`com.google.crypto.tink.subtle.EllipticCurves$EcdsaEncoding` @kind object;
  #L1dd950.  return v3 @kind object;
}
procedure `com.google.crypto.tink.subtle.Enums$HashType` `c`(`com.google.crypto.tink.proto.HashType` v3 @kind object) @signature `Lcom/google/crypto/tink/signature/f;.c:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/subtle/Enums$HashType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1dd964.  v0:= `@@com.google.crypto.tink.signature.f$a.c` @type ^`int`[] @kind object;
  #L1dd968.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1dd96e.  v1:= temp;
  #L1dd970.  v0:= v0[v1];
  #L1dd974.  v1:= 1I;
  #L1dd976.  if v0 == v1 then goto L1dd9c8;
  #L1dd97a.  v1:= 2I;
  #L1dd97c.  if v0 == v1 then goto L1dd9c2;
  #L1dd980.  v1:= 3I;
  #L1dd982.  if v0 != v1 then goto L1dd98c;
  #L1dd986.  v3:= `@@com.google.crypto.tink.subtle.Enums$HashType.SHA512` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L1dd98a.  return v3 @kind object;
  #L1dd98c.  v0:= new `java.security.GeneralSecurityException`;
  #L1dd990.  v1:= new `java.lang.StringBuilder`;
  #L1dd994.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1dd99a.  v2:= "unsupported hash type: " @kind object;
  #L1dd99e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dd9a4.  call temp:= `name`(v3) @signature `Ljava/lang/Enum;.name:()Ljava/lang/String;` @kind virtual;
  #L1dd9aa.  v3:= temp @kind object;
  #L1dd9ac.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dd9b2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dd9b8.  v3:= temp @kind object;
  #L1dd9ba.  call `<init>`(v0, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dd9c0.  throw v0;
  #L1dd9c2.  v3:= `@@com.google.crypto.tink.subtle.Enums$HashType.SHA384` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L1dd9c6.  return v3 @kind object;
  #L1dd9c8.  v3:= `@@com.google.crypto.tink.subtle.Enums$HashType.SHA256` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L1dd9cc.  return v3 @kind object;
}
procedure `void` `d`(`com.google.crypto.tink.proto.EcdsaParams` v4 @kind object) @signature `Lcom/google/crypto/tink/signature/f;.d:(Lcom/google/crypto/tink/proto/EcdsaParams;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1dd9e0.  call temp:= `getEncoding`(v4) @signature `Lcom/google/crypto/tink/proto/EcdsaParams;.getEncoding:()Lcom/google/crypto/tink/proto/EcdsaSignatureEncoding;` @kind virtual;
  #L1dd9e6.  v0:= temp @kind object;
  #L1dd9e8.  call temp:= `getHashType`(v4) @signature `Lcom/google/crypto/tink/proto/EcdsaParams;.getHashType:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L1dd9ee.  v1:= temp @kind object;
  #L1dd9f0.  call temp:= `getCurve`(v4) @signature `Lcom/google/crypto/tink/proto/EcdsaParams;.getCurve:()Lcom/google/crypto/tink/proto/EllipticCurveType;` @kind virtual;
  #L1dd9f6.  v4:= temp @kind object;
  #L1dd9f8.  v2:= `@@com.google.crypto.tink.signature.f$a.a` @type ^`int`[] @kind object;
  #L1dd9fc.  call temp:= `ordinal`(v0) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1dda02.  v0:= temp;
  #L1dda04.  v0:= v2[v0];
  #L1dda08.  v2:= 2I;
  #L1dda0a.  v3:= 1I;
  #L1dda0c.  if v0 == v3 then goto L1dda26;
  #L1dda10.  if v0 != v2 then goto L1dda16;
  #L1dda14.  goto L1dda26;
  #L1dda16.  v4:= new `java.security.GeneralSecurityException`;
  #L1dda1a.  v0:= "unsupported signature encoding" @kind object;
  #L1dda1e.  call `<init>`(v4, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dda24.  throw v4;
  #L1dda26.  v0:= `@@com.google.crypto.tink.signature.f$a.b` @type ^`int`[] @kind object;
  #L1dda2a.  call temp:= `ordinal`(v4) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1dda30.  v4:= temp;
  #L1dda32.  v4:= v0[v4];
  #L1dda36.  v0:= "Invalid ECDSA parameters" @kind object;
  #L1dda3a.  if v4 == v3 then goto L1dda88;
  #L1dda3e.  if v4 == v2 then goto L1dda6a;
  #L1dda42.  v2:= 3I;
  #L1dda44.  if v4 != v2 then goto L1dda5e;
  #L1dda48.  v4:= `@@com.google.crypto.tink.proto.HashType.SHA512` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L1dda4c.  if v1 != v4 then goto L1dda52;
  #L1dda50.  goto L1dda90;
  #L1dda52.  v4:= new `java.security.GeneralSecurityException`;
  #L1dda56.  call `<init>`(v4, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dda5c.  throw v4;
  #L1dda5e.  v4:= new `java.security.GeneralSecurityException`;
  #L1dda62.  call `<init>`(v4, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dda68.  throw v4;
  #L1dda6a.  v4:= `@@com.google.crypto.tink.proto.HashType.SHA384` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L1dda6e.  if v1 == v4 then goto L1dda90;
  #L1dda72.  v4:= `@@com.google.crypto.tink.proto.HashType.SHA512` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L1dda76.  if v1 != v4 then goto L1dda7c;
  #L1dda7a.  goto L1dda90;
  #L1dda7c.  v4:= new `java.security.GeneralSecurityException`;
  #L1dda80.  call `<init>`(v4, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dda86.  throw v4;
  #L1dda88.  v4:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L1dda8c.  if v1 != v4 then goto L1dda92;
  #L1dda90.  return @kind void;
  #L1dda92.  v4:= new `java.security.GeneralSecurityException`;
  #L1dda96.  call `<init>`(v4, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dda9c.  throw v4;
}
procedure `void` `e`(`com.google.crypto.tink.proto.RsaSsaPkcs1Params` v0 @kind object) @signature `Lcom/google/crypto/tink/signature/f;.e:(Lcom/google/crypto/tink/proto/RsaSsaPkcs1Params;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1ddab0.  call temp:= `getHashType`(v0) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1Params;.getHashType:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L1ddab6.  v0:= temp @kind object;
  #L1ddab8.  call temp:= `c`(v0) @signature `Lcom/google/crypto/tink/signature/f;.c:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/subtle/Enums$HashType;` @kind static;
  #L1ddabe.  return @kind void;
}
procedure `void` `f`(`com.google.crypto.tink.proto.RsaSsaPssParams` v2 @kind object) @signature `Lcom/google/crypto/tink/signature/f;.f:(Lcom/google/crypto/tink/proto/RsaSsaPssParams;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1ddad0.  call temp:= `getSigHash`(v2) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssParams;.getSigHash:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L1ddad6.  v0:= temp @kind object;
  #L1ddad8.  call temp:= `c`(v0) @signature `Lcom/google/crypto/tink/signature/f;.c:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/subtle/Enums$HashType;` @kind static;
  #L1ddade.  call temp:= `getSigHash`(v2) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssParams;.getSigHash:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L1ddae4.  v0:= temp @kind object;
  #L1ddae6.  call temp:= `getMgf1Hash`(v2) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssParams;.getMgf1Hash:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L1ddaec.  v1:= temp @kind object;
  #L1ddaee.  if v0 != v1 then goto L1ddb10;
  #L1ddaf2.  call temp:= `getSaltLength`(v2) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssParams;.getSaltLength:()I` @kind virtual;
  #L1ddaf8.  v2:= temp;
  #L1ddafa.  if v2 < 0 then goto L1ddb00;
  #L1ddafe.  return @kind void;
  #L1ddb00.  v2:= new `java.security.GeneralSecurityException`;
  #L1ddb04.  v0:= "salt length is negative" @kind object;
  #L1ddb08.  call `<init>`(v2, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ddb0e.  throw v2;
  #L1ddb10.  v2:= new `java.security.GeneralSecurityException`;
  #L1ddb14.  v0:= "MGF1 hash is different from signature hash" @kind object;
  #L1ddb18.  call `<init>`(v2, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ddb1e.  throw v2;
}
