record `com.google.mlkit.common.sdkinternal.zzj` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC extends `java.util.concurrent.ThreadFactory` @kind interface {
  `java.util.concurrent.ThreadFactory` `com.google.mlkit.common.sdkinternal.zzj.zza` @AccessFlag PUBLIC_FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.mlkit.common.sdkinternal.zzj` v0 @kind this, `java.util.concurrent.ThreadFactory` v1 @kind object) @signature `Lcom/google/mlkit/common/sdkinternal/zzj;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L2a7eac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a7eb2.  v0.`com.google.mlkit.common.sdkinternal.zzj.zza` @type ^`java.util.concurrent.ThreadFactory` := v1 @kind object;
  #L2a7eb6.  return @kind void;
}
procedure `java.lang.Thread` `newThread`(`com.google.mlkit.common.sdkinternal.zzj` v2 @kind this, `java.lang.Runnable` v3 @kind object) @signature `Lcom/google/mlkit/common/sdkinternal/zzj;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2a7e84.  v0:= v2.`com.google.mlkit.common.sdkinternal.zzj.zza` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L2a7e88.  v1:= new `com.google.mlkit.common.sdkinternal.zzi`;
  #L2a7e8c.  call `<init>`(v1, v3) @signature `Lcom/google/mlkit/common/sdkinternal/zzi;.<init>:(Ljava/lang/Runnable;)V` @kind direct;
  #L2a7e92.  call temp:= `newThread`(v0, v1) @signature `Ljava/util/concurrent/ThreadFactory;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @kind interface;
  #L2a7e98.  v3:= temp @kind object;
  #L2a7e9a.  return v3 @kind object;
}
