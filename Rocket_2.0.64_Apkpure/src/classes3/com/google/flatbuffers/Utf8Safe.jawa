record `com.google.flatbuffers.Utf8Safe` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.flatbuffers.Utf8` @kind class {
}
procedure `void` `<init>`(`com.google.flatbuffers.Utf8Safe` v0 @kind this) @signature `Lcom/google/flatbuffers/Utf8Safe;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L287b8c.  call `<init>`(v0) @signature `Lcom/google/flatbuffers/Utf8;.<init>:()V` @kind direct;
  #L287b92.  return @kind void;
}
procedure `int` `a`(`java.lang.CharSequence` v5 @kind object) @signature `Lcom/google/flatbuffers/Utf8Safe;.a:(Ljava/lang/CharSequence;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L287454.  call temp:= `length`(v5) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L28745a.  v0:= temp;
  #L28745c.  v1:= 0I;
  #L28745e.  if v1 >= v0 then goto L287478;
  #L287462.  call temp:= `charAt`(v5, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L287468.  v2:= temp;
  #L28746a.  v3:= 128I;
  #L28746e.  if v2 >= v3 then goto L287478;
  #L287472.  v1:= v1 + 1;
  #L287476.  goto L28745e;
  #L287478.  v2:= v0;
  #L28747a.  if v1 >= v0 then goto L2874a8;
  #L28747e.  call temp:= `charAt`(v5, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L287484.  v3:= temp;
  #L287486.  v4:= 2048I;
  #L28748a.  if v3 >= v4 then goto L28749e;
  #L28748e.  v3:= v3 - 127;
  #L287492.  v3:= v3 ^>> 31;
  #L287496.  v2:= v2 + v3 @kind int;
  #L287498.  v1:= v1 + 1;
  #L28749c.  goto L28747a;
  #L28749e.  call temp:= `d`(v5, v1) @signature `Lcom/google/flatbuffers/Utf8Safe;.d:(Ljava/lang/CharSequence;I)I` @kind static;
  #L2874a4.  v5:= temp;
  #L2874a6.  v2:= v2 + v5 @kind int;
  #L2874a8.  if v2 < v0 then goto L2874ae;
  #L2874ac.  return v2;
  #L2874ae.  v5:= new `java.lang.IllegalArgumentException`;
  #L2874b2.  v0:= new `java.lang.StringBuilder`;
  #L2874b6.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2874bc.  v1:= "UTF-8 length does not fit in int: " @kind object;
  #L2874c0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2874c6.  v1:= (`long`) v2 @kind i2l;
  #L2874c8.  v3:= 4294967296L;
  #L2874d2.  v1:= v1 + v3 @kind long;
  #L2874d4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2874da.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2874e0.  v0:= temp @kind object;
  #L2874e2.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2874e8.  throw v5;
}
procedure `int` `b`(`java.lang.CharSequence` v7 @kind object, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lcom/google/flatbuffers/Utf8Safe;.b:(Ljava/lang/CharSequence;[BII)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2874fc.  call temp:= `length`(v7) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L287502.  v0:= temp;
  #L287504.  v10:= v10 + v9 @kind int;
  #L287506.  v1:= 0I;
  #L287508.  v2:= 128I;
  #L28750c.  if v1 >= v0 then goto L287530;
  #L287510.  v3:= v1 + v9 @kind int;
  #L287514.  if v3 >= v10 then goto L287530;
  #L287518.  call temp:= `charAt`(v7, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L28751e.  v4:= temp;
  #L287520.  if v4 >= v2 then goto L287530;
  #L287524.  v2:= (`byte`) v4 @kind i2b;
  #L287526.  v8[v3]:= v2 @kind byte;
  #L28752a.  v1:= v1 + 1;
  #L28752e.  goto L287508;
  #L287530.  if v1 != v0 then goto L287538;
  #L287534.  v9:= v9 + v0 @kind int;
  #L287536.  return v9;
  #L287538.  v9:= v9 + v1 @kind int;
  #L28753a.  if v1 >= v0 then goto L2876f6;
  #L28753e.  call temp:= `charAt`(v7, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L287544.  v3:= temp;
  #L287546.  if v3 >= v2 then goto L28755e;
  #L28754a.  if v9 >= v10 then goto L28755e;
  #L28754e.  v4:= v9 + 1;
  #L287552.  v3:= (`byte`) v3 @kind i2b;
  #L287554.  v8[v9]:= v3 @kind byte;
  #L287558.  v9:= v4;
  #L28755a.  goto L287666;
  #L28755e.  v4:= 2048I;
  #L287562.  if v3 >= v4 then goto L287592;
  #L287566.  v4:= v10 + -2;
  #L28756a.  if v9 > v4 then goto L287592;
  #L28756e.  v4:= v9 + 1;
  #L287572.  v5:= v3 ^>> 6;
  #L287576.  v5:= v5 ^| 960;
  #L28757a.  v5:= (`byte`) v5 @kind i2b;
  #L28757c.  v8[v9]:= v5 @kind byte;
  #L287580.  v9:= v4 + 1;
  #L287584.  v3:= v3 ^& 63;
  #L287588.  v3:= v3 ^| v2 @kind int;
  #L28758a.  v3:= (`byte`) v3 @kind i2b;
  #L28758c.  v8[v4]:= v3 @kind byte;
  #L287590.  goto L287666;
  #L287592.  v4:= 57343I;
  #L287598.  v5:= 55296I;
  #L28759e.  if v3 < v5 then goto L2875a6;
  #L2875a2.  if v4 >= v3 then goto L2875e6;
  #L2875a6.  v6:= v10 + -3;
  #L2875aa.  if v9 > v6 then goto L2875e6;
  #L2875ae.  v4:= v9 + 1;
  #L2875b2.  v5:= v3 ^>> 12;
  #L2875b6.  v5:= v5 ^| 480;
  #L2875ba.  v5:= (`byte`) v5 @kind i2b;
  #L2875bc.  v8[v9]:= v5 @kind byte;
  #L2875c0.  v9:= v4 + 1;
  #L2875c4.  v5:= v3 ^>> 6;
  #L2875c8.  v5:= v5 ^& 63;
  #L2875cc.  v5:= v5 ^| v2 @kind int;
  #L2875ce.  v5:= (`byte`) v5 @kind i2b;
  #L2875d0.  v8[v4]:= v5 @kind byte;
  #L2875d4.  v4:= v9 + 1;
  #L2875d8.  v3:= v3 ^& 63;
  #L2875dc.  v3:= v3 ^| v2 @kind int;
  #L2875de.  v3:= (`byte`) v3 @kind i2b;
  #L2875e0.  v8[v9]:= v3 @kind byte;
  #L2875e4.  goto L287558;
  #L2875e6.  v6:= v10 + -4;
  #L2875ea.  if v9 > v6 then goto L287680;
  #L2875ee.  v4:= v1 + 1;
  #L2875f2.  call temp:= `length`(v7) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L2875f8.  v5:= temp;
  #L2875fa.  if v4 == v5 then goto L287670;
  #L2875fe.  call temp:= `charAt`(v7, v4) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L287604.  v1:= temp;
  #L287606.  call temp:= `isSurrogatePair`(v3, v1) @signature `Ljava/lang/Character;.isSurrogatePair:(CC)Z` @kind static;
  #L28760c.  v5:= temp;
  #L28760e.  if v5 == 0 then goto L28766e;
  #L287612.  call temp:= `toCodePoint`(v3, v1) @signature `Ljava/lang/Character;.toCodePoint:(CC)I` @kind static;
  #L287618.  v1:= temp;
  #L28761a.  v3:= v9 + 1;
  #L28761e.  v5:= v1 ^>> 18;
  #L287622.  v5:= v5 ^| 240;
  #L287626.  v5:= (`byte`) v5 @kind i2b;
  #L287628.  v8[v9]:= v5 @kind byte;
  #L28762c.  v9:= v3 + 1;
  #L287630.  v5:= v1 ^>> 12;
  #L287634.  v5:= v5 ^& 63;
  #L287638.  v5:= v5 ^| v2 @kind int;
  #L28763a.  v5:= (`byte`) v5 @kind i2b;
  #L28763c.  v8[v3]:= v5 @kind byte;
  #L287640.  v3:= v9 + 1;
  #L287644.  v5:= v1 ^>> 6;
  #L287648.  v5:= v5 ^& 63;
  #L28764c.  v5:= v5 ^| v2 @kind int;
  #L28764e.  v5:= (`byte`) v5 @kind i2b;
  #L287650.  v8[v9]:= v5 @kind byte;
  #L287654.  v9:= v3 + 1;
  #L287658.  v1:= v1 ^& 63;
  #L28765c.  v1:= v1 ^| v2 @kind int;
  #L28765e.  v1:= (`byte`) v1 @kind i2b;
  #L287660.  v8[v3]:= v1 @kind byte;
  #L287664.  v1:= v4;
  #L287666.  v1:= v1 + 1;
  #L28766a.  goto L28753a;
  #L28766e.  v1:= v4;
  #L287670.  v7:= new `com.google.flatbuffers.Utf8Safe$a`;
  #L287674.  v1:= v1 + -1;
  #L287678.  call `<init>`(v7, v1, v0) @signature `Lcom/google/flatbuffers/Utf8Safe$a;.<init>:(II)V` @kind direct;
  #L28767e.  throw v7;
  #L287680.  if v5 > v3 then goto L2876b8;
  #L287684.  if v3 > v4 then goto L2876b8;
  #L287688.  v8:= v1 + 1;
  #L28768c.  call temp:= `length`(v7) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L287692.  v10:= temp;
  #L287694.  if v8 == v10 then goto L2876ac;
  #L287698.  call temp:= `charAt`(v7, v8) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L28769e.  v7:= temp;
  #L2876a0.  call temp:= `isSurrogatePair`(v3, v7) @signature `Ljava/lang/Character;.isSurrogatePair:(CC)Z` @kind static;
  #L2876a6.  v7:= temp;
  #L2876a8.  if v7 != 0 then goto L2876b8;
  #L2876ac.  v7:= new `com.google.flatbuffers.Utf8Safe$a`;
  #L2876b0.  call `<init>`(v7, v1, v0) @signature `Lcom/google/flatbuffers/Utf8Safe$a;.<init>:(II)V` @kind direct;
  #L2876b6.  throw v7;
  #L2876b8.  v7:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L2876bc.  v8:= new `java.lang.StringBuilder`;
  #L2876c0.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2876c6.  v10:= "Failed writing " @kind object;
  #L2876ca.  call temp:= `append`(v8, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2876d0.  call temp:= `append`(v8, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2876d6.  v10:= " at index " @kind object;
  #L2876da.  call temp:= `append`(v8, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2876e0.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2876e6.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2876ec.  v8:= temp @kind object;
  #L2876ee.  call `<init>`(v7, v8) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2876f4.  throw v7;
  #L2876f6.  return v9;
}
procedure `void` `c`(`java.lang.CharSequence` v7 @kind object, `java.nio.ByteBuffer` v8 @kind object) @signature `Lcom/google/flatbuffers/Utf8Safe;.c:(Ljava/lang/CharSequence;Ljava/nio/ByteBuffer;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L287bfc.  call temp:= `length`(v7) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L287c02.  v0:= temp;
  #L287c04.  call temp:= `position`(v8) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L287c0a.  v1:= temp;
  #L287c0c.  v2:= 0I;
  #L287c0e.  v3:= 128I;
  #L287c12.  if v2 >= v0 then goto L287c34;
  #L287c16.  call temp:= `charAt`(v7, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L287c1c.  v4:= temp;
  #L287c1e.  if v4 >= v3 then goto L287c34;
  #L287c22.  v3:= v1 + v2 @kind int;
  #L287c26.  v4:= (`byte`) v4 @kind i2b;
  #L287c28.  call temp:= `put`(v8, v3, v4) @signature `Ljava/nio/ByteBuffer;.put:(IB)Ljava/nio/ByteBuffer;` @kind virtual;
  #L287c2e.  v2:= v2 + 1;
  #L287c32.  goto L287c0e;
  #L287c34.  if v2 != v0 then goto L287c44;
  #L287c38.  v0:= v1 + v2 @kind int;
  #L287c3c.  call temp:= `position`(v8, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L287c42.  return @kind void;
  #L287c44.  v1:= v1 + v2 @kind int;
  #L287c46.  if v2 >= v0 then goto L287d82;
  #L287c4a.  call temp:= `charAt`(v7, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L287c50.  v4:= temp;
  #L287c52.  if v4 >= v3 then goto L287c62;
  #L287c56.  v4:= (`byte`) v4 @kind i2b;
  #L287c58.  call temp:= `put`(v8, v1, v4) @signature `Ljava/nio/ByteBuffer;.put:(IB)Ljava/nio/ByteBuffer;` @kind virtual;
  #L287c5e.  goto L287d76;
  #L287c62.  v5:= 2048I;
  #L287c66.  if v4 >= v5 then goto L287c98;
  #L287c6a.  v5:= v1 + 1;
  #L287c6e.  v6:= v4 ^>> 6;
  #L287c72.  v6:= v6 ^| 192;
  #L287c76.  v6:= (`byte`) v6 @kind i2b;
  #L287c78.  call temp:= `put`(v8, v1, v6) @signature `Ljava/nio/ByteBuffer;.put:(IB)Ljava/nio/ByteBuffer;` @kind virtual;
  #L287c7e.  v1:= v4 ^& 63;
  #L287c82.  v1:= v1 ^| v3 @kind int;
  #L287c84.  v1:= (`byte`) v1 @kind i2b;
  #L287c86.  call temp:= `put`(v8, v5, v1) @signature `Ljava/nio/ByteBuffer;.put:(IB)Ljava/nio/ByteBuffer;` @kind virtual;
  #L287c8c.  v1:= v5;
  #L287c8e.  goto L287d76;
  #L287c92.  v1:= v5;
  #L287c94.  goto L287d8a;
  #L287c98.  v5:= 55296I;
  #L287c9e.  if v4 < v5 then goto L287d3e;
  #L287ca2.  v5:= 57343I;
  #L287ca8.  if v5 >= v4 then goto L287cae;
  #L287cac.  goto L287d3e;
  #L287cae.  v5:= v2 + 1;
  #L287cb2.  if v5 == v0 then goto L287d32;
  #L287cb6.  call temp:= `charAt`(v7, v5) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L287cbc.  v2:= temp;
  #L287cbe.  call temp:= `isSurrogatePair`(v4, v2) @signature `Ljava/lang/Character;.isSurrogatePair:(CC)Z` @kind static;
  #L287cc4.  v6:= temp;
  #L287cc6.  if v6 == 0 then goto L287d2a;
  #L287cca.  call temp:= `toCodePoint`(v4, v2) @signature `Ljava/lang/Character;.toCodePoint:(CC)I` @kind static;
  #L287cd0.  v2:= temp;
  #L287cd2.  v4:= v1 + 1;
  #L287cd6.  v6:= v2 ^>> 18;
  #L287cda.  v6:= v6 ^| 240;
  #L287cde.  v6:= (`byte`) v6 @kind i2b;
  #L287ce0.  call temp:= `put`(v8, v1, v6) @signature `Ljava/nio/ByteBuffer;.put:(IB)Ljava/nio/ByteBuffer;` @kind virtual;
  #L287ce6.  v1:= v4 + 1;
  #L287cea.  v6:= v2 ^>> 12;
  #L287cee.  v6:= v6 ^& 63;
  #L287cf2.  v6:= v6 ^| v3 @kind int;
  #L287cf4.  v6:= (`byte`) v6 @kind i2b;
  #L287cf6.  call temp:= `put`(v8, v4, v6) @signature `Ljava/nio/ByteBuffer;.put:(IB)Ljava/nio/ByteBuffer;` @kind virtual;
  #L287cfc.  v4:= v1 + 1;
  #L287d00.  v6:= v2 ^>> 6;
  #L287d04.  v6:= v6 ^& 63;
  #L287d08.  v6:= v6 ^| v3 @kind int;
  #L287d0a.  v6:= (`byte`) v6 @kind i2b;
  #L287d0c.  call temp:= `put`(v8, v1, v6) @signature `Ljava/nio/ByteBuffer;.put:(IB)Ljava/nio/ByteBuffer;` @kind virtual;
  #L287d12.  v1:= v2 ^& 63;
  #L287d16.  v1:= v1 ^| v3 @kind int;
  #L287d18.  v1:= (`byte`) v1 @kind i2b;
  #L287d1a.  call temp:= `put`(v8, v4, v1) @signature `Ljava/nio/ByteBuffer;.put:(IB)Ljava/nio/ByteBuffer;` @kind virtual;
  #L287d20.  v1:= v4;
  #L287d22.  v2:= v5;
  #L287d24.  goto L287d76;
  #L287d26.  v1:= v4;
  #L287d28.  goto L287d2e;
  #L287d2a.  v2:= v5;
  #L287d2c.  goto L287d32;
  #L287d2e.  v2:= v5;
  #L287d30.  goto L287d8a;
  #L287d32.  v3:= new `com.google.flatbuffers.Utf8Safe$a`;
  #L287d36.  call `<init>`(v3, v2, v0) @signature `Lcom/google/flatbuffers/Utf8Safe$a;.<init>:(II)V` @kind direct;
  #L287d3c.  throw v3;
  #L287d3e.  v5:= v1 + 1;
  #L287d42.  v6:= v4 ^>> 12;
  #L287d46.  v6:= v6 ^| 224;
  #L287d4a.  v6:= (`byte`) v6 @kind i2b;
  #L287d4c.  call temp:= `put`(v8, v1, v6) @signature `Ljava/nio/ByteBuffer;.put:(IB)Ljava/nio/ByteBuffer;` @kind virtual;
  #L287d52.  v1:= v5 + 1;
  #L287d56.  v6:= v4 ^>> 6;
  #L287d5a.  v6:= v6 ^& 63;
  #L287d5e.  v6:= v6 ^| v3 @kind int;
  #L287d60.  v6:= (`byte`) v6 @kind i2b;
  #L287d62.  call temp:= `put`(v8, v5, v6) @signature `Ljava/nio/ByteBuffer;.put:(IB)Ljava/nio/ByteBuffer;` @kind virtual;
  #L287d68.  v4:= v4 ^& 63;
  #L287d6c.  v4:= v4 ^| v3 @kind int;
  #L287d6e.  v4:= (`byte`) v4 @kind i2b;
  #L287d70.  call temp:= `put`(v8, v1, v4) @signature `Ljava/nio/ByteBuffer;.put:(IB)Ljava/nio/ByteBuffer;` @kind virtual;
  #L287d76.  v2:= v2 + 1;
  #L287d7a.  v1:= v1 + 1;
  #L287d7e.  goto L287c46;
  #L287d82.  call temp:= `position`(v8, v1) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L287d88.  return @kind void;
  #L287d8a.  call temp:= `position`(v8) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L287d90.  v0:= temp;
  #L287d92.  call temp:= `position`(v8) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L287d98.  v8:= temp;
  #L287d9a.  v1:= v1 - v8 @kind int;
  #L287d9c.  v1:= v1 + 1;
  #L287da0.  call temp:= `max`(v2, v1) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L287da6.  v8:= temp;
  #L287da8.  v0:= v0 + v8 @kind int;
  #L287daa.  v8:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L287dae.  v1:= new `java.lang.StringBuilder`;
  #L287db2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L287db8.  v3:= "Failed writing " @kind object;
  #L287dbc.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L287dc2.  call temp:= `charAt`(v7, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L287dc8.  v7:= temp;
  #L287dca.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L287dd0.  v7:= " at index " @kind object;
  #L287dd4.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L287dda.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L287de0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L287de6.  v7:= temp @kind object;
  #L287de8.  call `<init>`(v8, v7) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L287dee.  throw v8;
  catch `java.lang.IndexOutOfBoundsException` @[L287c16..L287c5e] goto L287d8a;
  catch `java.lang.IndexOutOfBoundsException` @[L287c78..L287c8c] goto L287c92;
  catch `java.lang.IndexOutOfBoundsException` @[L287cb6..L287cd2] goto L287d2e;
  catch `java.lang.IndexOutOfBoundsException` @[L287ce0..L287ce6] goto L287d26;
  catch `java.lang.IndexOutOfBoundsException` @[L287cf6..L287cfc] goto L287d2e;
  catch `java.lang.IndexOutOfBoundsException` @[L287d0c..L287d20] goto L287d26;
  catch `java.lang.IndexOutOfBoundsException` @[L287d32..L287d3e] goto L287d8a;
  catch `java.lang.IndexOutOfBoundsException` @[L287d4c..L287d52] goto L287c92;
  catch `java.lang.IndexOutOfBoundsException` @[L287d62..L287d88] goto L287d8a;
}
procedure `int` `d`(`java.lang.CharSequence` v4 @kind object, `int` v5 ) @signature `Lcom/google/flatbuffers/Utf8Safe;.d:(Ljava/lang/CharSequence;I)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L287724.  call temp:= `length`(v4) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L28772a.  v0:= temp;
  #L28772c.  v1:= 0I;
  #L28772e.  if v5 >= v0 then goto L28778e;
  #L287732.  call temp:= `charAt`(v4, v5) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L287738.  v2:= temp;
  #L28773a.  v3:= 2048I;
  #L28773e.  if v2 >= v3 then goto L28774e;
  #L287742.  v2:= v2 - 127;
  #L287746.  v2:= v2 ^>> 31;
  #L28774a.  v1:= v1 + v2 @kind int;
  #L28774c.  goto L287788;
  #L28774e.  v1:= v1 + 2;
  #L287752.  v3:= 55296I;
  #L287758.  if v3 > v2 then goto L287788;
  #L28775c.  v3:= 57343I;
  #L287762.  if v2 > v3 then goto L287788;
  #L287766.  call temp:= `codePointAt`(v4, v5) @signature `Ljava/lang/Character;.codePointAt:(Ljava/lang/CharSequence;I)I` @kind static;
  #L28776c.  v2:= temp;
  #L28776e.  v3:= 65536I;
  #L287772.  if v2 < v3 then goto L28777c;
  #L287776.  v5:= v5 + 1;
  #L28777a.  goto L287788;
  #L28777c.  v4:= new `com.google.flatbuffers.Utf8Safe$a`;
  #L287780.  call `<init>`(v4, v5, v0) @signature `Lcom/google/flatbuffers/Utf8Safe$a;.<init>:(II)V` @kind direct;
  #L287786.  throw v4;
  #L287788.  v5:= v5 + 1;
  #L28778c.  goto L28772e;
  #L28778e.  return v1;
}
procedure `java.lang.String` `decodeUtf8Array`(`byte`[] v11 @kind object, `int` v12 , `int` v13 ) @signature `Lcom/google/flatbuffers/Utf8Safe;.decodeUtf8Array:([BII)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L2877e4.  v0:= v12 ^| v13 @kind int;
  #L2877e8.  v1:= length @variable v11;
  #L2877ea.  v1:= v1 - v12 @kind int;
  #L2877ec.  v1:= v1 - v13 @kind int;
  #L2877ee.  v0:= v0 ^| v1 @kind int;
  #L2877f0.  v1:= 0I;
  #L2877f2.  v2:= 1I;
  #L2877f4.  if v0 < 0 then goto L28794a;
  #L2877f8.  v0:= v12 + v13 @kind int;
  #L2877fc.  v13:= new `char`[v13];
  #L287800.  v3:= 0I;
  #L287802.  if v12 >= v0 then goto L28782a;
  #L287806.  v4:= v11[v12] @kind byte;
  #L28780a.  call temp:= `g`(v4) @signature `Lcom/google/flatbuffers/Utf8$a;.g:(B)Z` @kind static;
  #L287810.  v5:= temp;
  #L287812.  if v5 != 0 then goto L287818;
  #L287816.  goto L28782a;
  #L287818.  v12:= v12 + 1;
  #L28781c.  v5:= v3 + 1;
  #L287820.  call `b`(v4, v13, v3) @signature `Lcom/google/flatbuffers/Utf8$a;.b:(B[CI)V` @kind static;
  #L287826.  v3:= v5;
  #L287828.  goto L287802;
  #L28782a.  v8:= v3;
  #L28782c.  if v12 >= v0 then goto L28793e;
  #L287830.  v3:= v12 + 1;
  #L287834.  v12:= v11[v12] @kind byte;
  #L287838.  call temp:= `g`(v12) @signature `Lcom/google/flatbuffers/Utf8$a;.g:(B)Z` @kind static;
  #L28783e.  v4:= temp;
  #L287840.  if v4 == 0 then goto L28787c;
  #L287844.  v4:= v8 + 1;
  #L287848.  call `b`(v12, v13, v8) @signature `Lcom/google/flatbuffers/Utf8$a;.b:(B[CI)V` @kind static;
  #L28784e.  if v3 >= v0 then goto L287876;
  #L287852.  v12:= v11[v3] @kind byte;
  #L287856.  call temp:= `g`(v12) @signature `Lcom/google/flatbuffers/Utf8$a;.g:(B)Z` @kind static;
  #L28785c.  v5:= temp;
  #L28785e.  if v5 != 0 then goto L287864;
  #L287862.  goto L287876;
  #L287864.  v3:= v3 + 1;
  #L287868.  v5:= v4 + 1;
  #L28786c.  call `b`(v12, v13, v4) @signature `Lcom/google/flatbuffers/Utf8$a;.b:(B[CI)V` @kind static;
  #L287872.  v4:= v5;
  #L287874.  goto L28784e;
  #L287876.  v12:= v3;
  #L287878.  v8:= v4;
  #L28787a.  goto L28782c;
  #L28787c.  call temp:= `i`(v12) @signature `Lcom/google/flatbuffers/Utf8$a;.i:(B)Z` @kind static;
  #L287882.  v4:= temp;
  #L287884.  v5:= "Invalid UTF-8" @kind object;
  #L287888.  if v4 == 0 then goto L2878b4;
  #L28788c.  if v3 >= v0 then goto L2878a8;
  #L287890.  v4:= v3 + 1;
  #L287894.  v3:= v11[v3] @kind byte;
  #L287898.  v5:= v8 + 1;
  #L28789c.  call `d`(v12, v3, v13, v8) @signature `Lcom/google/flatbuffers/Utf8$a;.d:(BB[CI)V` @kind static;
  #L2878a2.  v12:= v4;
  #L2878a4.  v8:= v5;
  #L2878a6.  goto L28782c;
  #L2878a8.  v11:= new `java.lang.IllegalArgumentException`;
  #L2878ac.  call `<init>`(v11, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2878b2.  throw v11;
  #L2878b4.  call temp:= `h`(v12) @signature `Lcom/google/flatbuffers/Utf8$a;.h:(B)Z` @kind static;
  #L2878ba.  v4:= temp;
  #L2878bc.  if v4 == 0 then goto L2878f4;
  #L2878c0.  v4:= v0 + -1;
  #L2878c4.  if v3 >= v4 then goto L2878e8;
  #L2878c8.  v4:= v3 + 1;
  #L2878cc.  v3:= v11[v3] @kind byte;
  #L2878d0.  v5:= v4 + 1;
  #L2878d4.  v4:= v11[v4] @kind byte;
  #L2878d8.  v6:= v8 + 1;
  #L2878dc.  call `c`(v12, v3, v4, v13, v8) @signature `Lcom/google/flatbuffers/Utf8$a;.c:(BBB[CI)V` @kind static;
  #L2878e2.  v12:= v5;
  #L2878e4.  v8:= v6;
  #L2878e6.  goto L28782c;
  #L2878e8.  v11:= new `java.lang.IllegalArgumentException`;
  #L2878ec.  call `<init>`(v11, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2878f2.  throw v11;
  #L2878f4.  v4:= v0 + -2;
  #L2878f8.  if v3 >= v4 then goto L287932;
  #L2878fc.  v4:= v3 + 1;
  #L287900.  v5:= v11[v3] @kind byte;
  #L287904.  v3:= v4 + 1;
  #L287908.  v6:= v11[v4] @kind byte;
  #L28790c.  v9:= v3 + 1;
  #L287910.  v7:= v11[v3] @kind byte;
  #L287914.  v10:= v8 + 1;
  #L287918.  v3:= v12;
  #L28791a.  v4:= v5;
  #L28791c.  v5:= v6;
  #L28791e.  v6:= v7;
  #L287920.  v7:= v13 @kind object;
  #L287922.  call `a`(v3, v4, v5, v6, v7, v8) @signature `Lcom/google/flatbuffers/Utf8$a;.a:(BBBB[CI)V` @kind static;
  #L287928.  v10:= v10 + v2 @kind int;
  #L28792a.  v12:= v9;
  #L28792c.  v8:= v10;
  #L28792e.  goto L28782c;
  #L287932.  v11:= new `java.lang.IllegalArgumentException`;
  #L287936.  call `<init>`(v11, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28793c.  throw v11;
  #L28793e.  v11:= new `java.lang.String`;
  #L287942.  call `<init>`(v11, v13, v1, v8) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L287948.  return v11 @kind object;
  #L28794a.  v0:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L28794e.  v3:= 3I;
  #L287950.  v3:= new `java.lang.Object`[v3];
  #L287954.  v11:= length @variable v11;
  #L287956.  call temp:= `valueOf`(v11) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L28795c.  v11:= temp @kind object;
  #L28795e.  v3[v1]:= v11 @kind object;
  #L287962.  call temp:= `valueOf`(v12) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L287968.  v11:= temp @kind object;
  #L28796a.  v3[v2]:= v11 @kind object;
  #L28796e.  call temp:= `valueOf`(v13) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L287974.  v11:= temp @kind object;
  #L287976.  v12:= 2I;
  #L287978.  v3[v12]:= v11 @kind object;
  #L28797c.  v11:= "buffer length=%d, index=%d, size=%d" @kind object;
  #L287980.  call temp:= `format`(v11, v3) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L287986.  v11:= temp @kind object;
  #L287988.  call `<init>`(v0, v11) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28798e.  throw v0;
}
procedure `java.lang.String` `decodeUtf8Buffer`(`java.nio.ByteBuffer` v11 @kind object, `int` v12 , `int` v13 ) @signature `Lcom/google/flatbuffers/Utf8Safe;.decodeUtf8Buffer:(Ljava/nio/ByteBuffer;II)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L2879a0.  v0:= v12 ^| v13 @kind int;
  #L2879a4.  call temp:= `limit`(v11) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L2879aa.  v1:= temp;
  #L2879ac.  v1:= v1 - v12 @kind int;
  #L2879ae.  v1:= v1 - v13 @kind int;
  #L2879b0.  v0:= v0 ^| v1 @kind int;
  #L2879b2.  v1:= 0I;
  #L2879b4.  v2:= 1I;
  #L2879b6.  if v0 < 0 then goto L287b30;
  #L2879ba.  v0:= v12 + v13 @kind int;
  #L2879be.  v13:= new `char`[v13];
  #L2879c2.  v3:= 0I;
  #L2879c4.  if v12 >= v0 then goto L2879f0;
  #L2879c8.  call temp:= `get`(v11, v12) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L2879ce.  v4:= temp;
  #L2879d0.  call temp:= `g`(v4) @signature `Lcom/google/flatbuffers/Utf8$a;.g:(B)Z` @kind static;
  #L2879d6.  v5:= temp;
  #L2879d8.  if v5 != 0 then goto L2879de;
  #L2879dc.  goto L2879f0;
  #L2879de.  v12:= v12 + 1;
  #L2879e2.  v5:= v3 + 1;
  #L2879e6.  call `b`(v4, v13, v3) @signature `Lcom/google/flatbuffers/Utf8$a;.b:(B[CI)V` @kind static;
  #L2879ec.  v3:= v5;
  #L2879ee.  goto L2879c4;
  #L2879f0.  v8:= v3;
  #L2879f2.  if v12 >= v0 then goto L287b24;
  #L2879f6.  v3:= v12 + 1;
  #L2879fa.  call temp:= `get`(v11, v12) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L287a00.  v12:= temp;
  #L287a02.  call temp:= `g`(v12) @signature `Lcom/google/flatbuffers/Utf8$a;.g:(B)Z` @kind static;
  #L287a08.  v4:= temp;
  #L287a0a.  if v4 == 0 then goto L287a4a;
  #L287a0e.  v4:= v8 + 1;
  #L287a12.  call `b`(v12, v13, v8) @signature `Lcom/google/flatbuffers/Utf8$a;.b:(B[CI)V` @kind static;
  #L287a18.  if v3 >= v0 then goto L287a44;
  #L287a1c.  call temp:= `get`(v11, v3) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L287a22.  v12:= temp;
  #L287a24.  call temp:= `g`(v12) @signature `Lcom/google/flatbuffers/Utf8$a;.g:(B)Z` @kind static;
  #L287a2a.  v5:= temp;
  #L287a2c.  if v5 != 0 then goto L287a32;
  #L287a30.  goto L287a44;
  #L287a32.  v3:= v3 + 1;
  #L287a36.  v5:= v4 + 1;
  #L287a3a.  call `b`(v12, v13, v4) @signature `Lcom/google/flatbuffers/Utf8$a;.b:(B[CI)V` @kind static;
  #L287a40.  v4:= v5;
  #L287a42.  goto L287a18;
  #L287a44.  v12:= v3;
  #L287a46.  v8:= v4;
  #L287a48.  goto L2879f2;
  #L287a4a.  call temp:= `i`(v12) @signature `Lcom/google/flatbuffers/Utf8$a;.i:(B)Z` @kind static;
  #L287a50.  v4:= temp;
  #L287a52.  v5:= "Invalid UTF-8" @kind object;
  #L287a56.  if v4 == 0 then goto L287a86;
  #L287a5a.  if v3 >= v0 then goto L287a7a;
  #L287a5e.  v4:= v3 + 1;
  #L287a62.  call temp:= `get`(v11, v3) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L287a68.  v3:= temp;
  #L287a6a.  v5:= v8 + 1;
  #L287a6e.  call `d`(v12, v3, v13, v8) @signature `Lcom/google/flatbuffers/Utf8$a;.d:(BB[CI)V` @kind static;
  #L287a74.  v12:= v4;
  #L287a76.  v8:= v5;
  #L287a78.  goto L2879f2;
  #L287a7a.  v11:= new `java.lang.IllegalArgumentException`;
  #L287a7e.  call `<init>`(v11, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L287a84.  throw v11;
  #L287a86.  call temp:= `h`(v12) @signature `Lcom/google/flatbuffers/Utf8$a;.h:(B)Z` @kind static;
  #L287a8c.  v4:= temp;
  #L287a8e.  if v4 == 0 then goto L287ace;
  #L287a92.  v4:= v0 + -1;
  #L287a96.  if v3 >= v4 then goto L287ac2;
  #L287a9a.  v4:= v3 + 1;
  #L287a9e.  call temp:= `get`(v11, v3) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L287aa4.  v3:= temp;
  #L287aa6.  v5:= v4 + 1;
  #L287aaa.  call temp:= `get`(v11, v4) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L287ab0.  v4:= temp;
  #L287ab2.  v6:= v8 + 1;
  #L287ab6.  call `c`(v12, v3, v4, v13, v8) @signature `Lcom/google/flatbuffers/Utf8$a;.c:(BBB[CI)V` @kind static;
  #L287abc.  v12:= v5;
  #L287abe.  v8:= v6;
  #L287ac0.  goto L2879f2;
  #L287ac2.  v11:= new `java.lang.IllegalArgumentException`;
  #L287ac6.  call `<init>`(v11, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L287acc.  throw v11;
  #L287ace.  v4:= v0 + -2;
  #L287ad2.  if v3 >= v4 then goto L287b18;
  #L287ad6.  v4:= v3 + 1;
  #L287ada.  call temp:= `get`(v11, v3) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L287ae0.  v5:= temp;
  #L287ae2.  v3:= v4 + 1;
  #L287ae6.  call temp:= `get`(v11, v4) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L287aec.  v6:= temp;
  #L287aee.  v9:= v3 + 1;
  #L287af2.  call temp:= `get`(v11, v3) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L287af8.  v7:= temp;
  #L287afa.  v10:= v8 + 1;
  #L287afe.  v3:= v12;
  #L287b00.  v4:= v5;
  #L287b02.  v5:= v6;
  #L287b04.  v6:= v7;
  #L287b06.  v7:= v13 @kind object;
  #L287b08.  call `a`(v3, v4, v5, v6, v7, v8) @signature `Lcom/google/flatbuffers/Utf8$a;.a:(BBBB[CI)V` @kind static;
  #L287b0e.  v10:= v10 + v2 @kind int;
  #L287b10.  v12:= v9;
  #L287b12.  v8:= v10;
  #L287b14.  goto L2879f2;
  #L287b18.  v11:= new `java.lang.IllegalArgumentException`;
  #L287b1c.  call `<init>`(v11, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L287b22.  throw v11;
  #L287b24.  v11:= new `java.lang.String`;
  #L287b28.  call `<init>`(v11, v13, v1, v8) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L287b2e.  return v11 @kind object;
  #L287b30.  v0:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L287b34.  v3:= 3I;
  #L287b36.  v3:= new `java.lang.Object`[v3];
  #L287b3a.  call temp:= `limit`(v11) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L287b40.  v11:= temp;
  #L287b42.  call temp:= `valueOf`(v11) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L287b48.  v11:= temp @kind object;
  #L287b4a.  v3[v1]:= v11 @kind object;
  #L287b4e.  call temp:= `valueOf`(v12) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L287b54.  v11:= temp @kind object;
  #L287b56.  v3[v2]:= v11 @kind object;
  #L287b5a.  call temp:= `valueOf`(v13) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L287b60.  v11:= temp @kind object;
  #L287b62.  v12:= 2I;
  #L287b64.  v3[v12]:= v11 @kind object;
  #L287b68.  v11:= "buffer limit=%d, index=%d, limit=%d" @kind object;
  #L287b6c.  call temp:= `format`(v11, v3) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L287b72.  v11:= temp @kind object;
  #L287b74.  call `<init>`(v0, v11) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L287b7a.  throw v0;
}
procedure `java.lang.String` `decodeUtf8`(`com.google.flatbuffers.Utf8Safe` v1 @kind this, `java.nio.ByteBuffer` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lcom/google/flatbuffers/Utf8Safe;.decodeUtf8:(Ljava/nio/ByteBuffer;II)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2877a0.  call temp:= `hasArray`(v2) @signature `Ljava/nio/ByteBuffer;.hasArray:()Z` @kind virtual;
  #L2877a6.  v0:= temp;
  #L2877a8.  if v0 == 0 then goto L2877c8;
  #L2877ac.  call temp:= `array`(v2) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L2877b2.  v0:= temp @kind object;
  #L2877b4.  call temp:= `arrayOffset`(v2) @signature `Ljava/nio/ByteBuffer;.arrayOffset:()I` @kind virtual;
  #L2877ba.  v2:= temp;
  #L2877bc.  v2:= v2 + v3 @kind int;
  #L2877be.  call temp:= `decodeUtf8Array`(v0, v2, v4) @signature `Lcom/google/flatbuffers/Utf8Safe;.decodeUtf8Array:([BII)Ljava/lang/String;` @kind static;
  #L2877c4.  v2:= temp @kind object;
  #L2877c6.  return v2 @kind object;
  #L2877c8.  call temp:= `decodeUtf8Buffer`(v2, v3, v4) @signature `Lcom/google/flatbuffers/Utf8Safe;.decodeUtf8Buffer:(Ljava/nio/ByteBuffer;II)Ljava/lang/String;` @kind static;
  #L2877ce.  v2:= temp @kind object;
  #L2877d0.  return v2 @kind object;
}
procedure `void` `encodeUtf8`(`com.google.flatbuffers.Utf8Safe` v4 @kind this, `java.lang.CharSequence` v5 @kind object, `java.nio.ByteBuffer` v6 @kind object) @signature `Lcom/google/flatbuffers/Utf8Safe;.encodeUtf8:(Ljava/lang/CharSequence;Ljava/nio/ByteBuffer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L287ba4.  call temp:= `hasArray`(v6) @signature `Ljava/nio/ByteBuffer;.hasArray:()Z` @kind virtual;
  #L287baa.  v0:= temp;
  #L287bac.  if v0 == 0 then goto L287be4;
  #L287bb0.  call temp:= `arrayOffset`(v6) @signature `Ljava/nio/ByteBuffer;.arrayOffset:()I` @kind virtual;
  #L287bb6.  v0:= temp;
  #L287bb8.  call temp:= `array`(v6) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L287bbe.  v1:= temp @kind object;
  #L287bc0.  call temp:= `position`(v6) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L287bc6.  v2:= temp;
  #L287bc8.  v2:= v2 + v0 @kind int;
  #L287bca.  call temp:= `remaining`(v6) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L287bd0.  v3:= temp;
  #L287bd2.  call temp:= `b`(v5, v1, v2, v3) @signature `Lcom/google/flatbuffers/Utf8Safe;.b:(Ljava/lang/CharSequence;[BII)I` @kind static;
  #L287bd8.  v5:= temp;
  #L287bda.  v5:= v5 - v0 @kind int;
  #L287bdc.  call temp:= `position`(v6, v5) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L287be2.  goto L287bea;
  #L287be4.  call `c`(v5, v6) @signature `Lcom/google/flatbuffers/Utf8Safe;.c:(Ljava/lang/CharSequence;Ljava/nio/ByteBuffer;)V` @kind static;
  #L287bea.  return @kind void;
}
procedure `int` `encodedLength`(`com.google.flatbuffers.Utf8Safe` v0 @kind this, `java.lang.CharSequence` v1 @kind object) @signature `Lcom/google/flatbuffers/Utf8Safe;.encodedLength:(Ljava/lang/CharSequence;)I` @AccessFlag PUBLIC {
    temp;

  #L287708.  call temp:= `a`(v1) @signature `Lcom/google/flatbuffers/Utf8Safe;.a:(Ljava/lang/CharSequence;)I` @kind static;
  #L28770e.  v1:= temp;
  #L287710.  return v1;
}
