record `com.google.flatbuffers.Utf8Old` @kind class @AccessFlag PUBLIC extends `com.google.flatbuffers.Utf8` @kind class {
}
global `java.lang.ThreadLocal` `@@com.google.flatbuffers.Utf8Old.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/flatbuffers/Utf8Old;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L287390.  v0:= `@@com.google.flatbuffers.c.a` @type ^`com.google.flatbuffers.c` @kind object;
  #L287394.  call temp:= `withInitial`(v0) @signature `Ljava/lang/ThreadLocal;.withInitial:(Ljava/util/function/Supplier;)Ljava/lang/ThreadLocal;` @kind static;
  #L28739a.  v0:= temp @kind object;
  #L28739c.  `@@com.google.flatbuffers.Utf8Old.b` @type ^`java.lang.ThreadLocal` := v0 @kind object;
  #L2873a0.  return @kind void;
}
procedure `void` `<init>`(`com.google.flatbuffers.Utf8Old` v0 @kind this) @signature `Lcom/google/flatbuffers/Utf8Old;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2873b4.  call `<init>`(v0) @signature `Lcom/google/flatbuffers/Utf8;.<init>:()V` @kind direct;
  #L2873ba.  return @kind void;
}
procedure `com.google.flatbuffers.Utf8Old$a` `a`() @signature `Lcom/google/flatbuffers/Utf8Old;.a:()Lcom/google/flatbuffers/Utf8Old$a;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;

  #L2871f8.  call temp:= `b`() @signature `Lcom/google/flatbuffers/Utf8Old;.b:()Lcom/google/flatbuffers/Utf8Old$a;` @kind static;
  #L2871fe.  v0:= temp @kind object;
  #L287200.  return v0 @kind object;
}
procedure `com.google.flatbuffers.Utf8Old$a` `b`() @signature `Lcom/google/flatbuffers/Utf8Old;.b:()Lcom/google/flatbuffers/Utf8Old$a;` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;
    v0;

  #L287214.  v0:= new `com.google.flatbuffers.Utf8Old$a`;
  #L287218.  call `<init>`(v0) @signature `Lcom/google/flatbuffers/Utf8Old$a;.<init>:()V` @kind direct;
  #L28721e.  return v0 @kind object;
}
procedure `java.lang.String` `decodeUtf8`(`com.google.flatbuffers.Utf8Old` v1 @kind this, `java.nio.ByteBuffer` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lcom/google/flatbuffers/Utf8Old;.decodeUtf8:(Ljava/nio/ByteBuffer;II)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28731c.  v0:= `@@com.google.flatbuffers.Utf8Old.b` @type ^`java.lang.ThreadLocal` @kind object;
  #L287320.  call temp:= `get`(v0) @signature `Ljava/lang/ThreadLocal;.get:()Ljava/lang/Object;` @kind virtual;
  #L287326.  v0:= temp @kind object;
  #L287328.  v0:= (`com.google.flatbuffers.Utf8Old$a`) v0 @kind object;
  #L28732c.  v0:= v0.`com.google.flatbuffers.Utf8Old$a.b` @type ^`java.nio.charset.CharsetDecoder` @kind object;
  #L287330.  call temp:= `reset`(v0) @signature `Ljava/nio/charset/CharsetDecoder;.reset:()Ljava/nio/charset/CharsetDecoder;` @kind virtual;
  #L287336.  call temp:= `duplicate`(v2) @signature `Ljava/nio/ByteBuffer;.duplicate:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L28733c.  v2:= temp @kind object;
  #L28733e.  call temp:= `position`(v2, v3) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L287344.  v3:= v3 + v4 @kind int;
  #L287346.  call temp:= `limit`(v2, v3) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L28734c.  call temp:= `decode`(v0, v2) @signature `Ljava/nio/charset/CharsetDecoder;.decode:(Ljava/nio/ByteBuffer;)Ljava/nio/CharBuffer;` @kind virtual;
  #L287352.  v2:= temp @kind object;
  #L287354.  call temp:= `toString`(v2) @signature `Ljava/nio/CharBuffer;.toString:()Ljava/lang/String;` @kind virtual;
  #L28735a.  v2:= temp @kind object;
  #L28735c.  return v2 @kind object;
  #L28735e.  v2:= Exception @type ^`java.nio.charset.CharacterCodingException` @kind object;
  #L287360.  v3:= new `java.lang.IllegalArgumentException`;
  #L287364.  v4:= "Bad encoding" @kind object;
  #L287368.  call `<init>`(v3, v4, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L28736e.  throw v3;
  catch `java.nio.charset.CharacterCodingException` @[L28734c..L28735c] goto L28735e;
}
procedure `void` `encodeUtf8`(`com.google.flatbuffers.Utf8Old` v2 @kind this, `java.lang.CharSequence` v3 @kind object, `java.nio.ByteBuffer` v4 @kind object) @signature `Lcom/google/flatbuffers/Utf8Old;.encodeUtf8:(Ljava/lang/CharSequence;Ljava/nio/ByteBuffer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2873cc.  v0:= `@@com.google.flatbuffers.Utf8Old.b` @type ^`java.lang.ThreadLocal` @kind object;
  #L2873d0.  call temp:= `get`(v0) @signature `Ljava/lang/ThreadLocal;.get:()Ljava/lang/Object;` @kind virtual;
  #L2873d6.  v0:= temp @kind object;
  #L2873d8.  v0:= (`com.google.flatbuffers.Utf8Old$a`) v0 @kind object;
  #L2873dc.  v1:= v0.`com.google.flatbuffers.Utf8Old$a.c` @type ^`java.lang.CharSequence` @kind object;
  #L2873e0.  if v1 == v3 then goto L2873ea;
  #L2873e4.  call temp:= `encodedLength`(v2, v3) @signature `Lcom/google/flatbuffers/Utf8Old;.encodedLength:(Ljava/lang/CharSequence;)I` @kind virtual;
  #L2873ea.  v3:= v0.`com.google.flatbuffers.Utf8Old$a.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L2873ee.  call temp:= `put`(v4, v3) @signature `Ljava/nio/ByteBuffer;.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L2873f4.  return @kind void;
}
procedure `int` `encodedLength`(`com.google.flatbuffers.Utf8Old` v4 @kind this, `java.lang.CharSequence` v5 @kind object) @signature `Lcom/google/flatbuffers/Utf8Old;.encodedLength:(Ljava/lang/CharSequence;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L287230.  v0:= `@@com.google.flatbuffers.Utf8Old.b` @type ^`java.lang.ThreadLocal` @kind object;
  #L287234.  call temp:= `get`(v0) @signature `Ljava/lang/ThreadLocal;.get:()Ljava/lang/Object;` @kind virtual;
  #L28723a.  v0:= temp @kind object;
  #L28723c.  v0:= (`com.google.flatbuffers.Utf8Old$a`) v0 @kind object;
  #L287240.  call temp:= `length`(v5) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L287246.  v1:= temp;
  #L287248.  v1:= (`float`) v1 @kind i2f;
  #L28724a.  v2:= v0.`com.google.flatbuffers.Utf8Old$a.a` @type ^`java.nio.charset.CharsetEncoder` @kind object;
  #L28724e.  call temp:= `maxBytesPerChar`(v2) @signature `Ljava/nio/charset/CharsetEncoder;.maxBytesPerChar:()F` @kind virtual;
  #L287254.  v2:= temp;
  #L287256.  v1:= v1 * v2 @kind float;
  #L28725a.  v1:= (`int`) v1 @kind f2i;
  #L28725c.  v2:= v0.`com.google.flatbuffers.Utf8Old$a.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L287260.  if v2 == 0 then goto L287270;
  #L287264.  call temp:= `capacity`(v2) @signature `Ljava/nio/ByteBuffer;.capacity:()I` @kind virtual;
  #L28726a.  v2:= temp;
  #L28726c.  if v2 >= v1 then goto L287288;
  #L287270.  v2:= 128I;
  #L287274.  call temp:= `max`(v2, v1) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L28727a.  v1:= temp;
  #L28727c.  call temp:= `allocate`(v1) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L287282.  v1:= temp @kind object;
  #L287284.  v0.`com.google.flatbuffers.Utf8Old$a.d` @type ^`java.nio.ByteBuffer` := v1 @kind object;
  #L287288.  v1:= v0.`com.google.flatbuffers.Utf8Old$a.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L28728c.  call temp:= `clear`(v1) @signature `Ljava/nio/ByteBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L287292.  v0.`com.google.flatbuffers.Utf8Old$a.c` @type ^`java.lang.CharSequence` := v5 @kind object;
  #L287296.  v1:= instanceof @variable v5 @type ^`java.nio.CharBuffer` @kind boolean;
  #L28729a.  if v1 == 0 then goto L2872a4;
  #L28729e.  v5:= (`java.nio.CharBuffer`) v5 @kind object;
  #L2872a2.  goto L2872ac;
  #L2872a4.  call temp:= `wrap`(v5) @signature `Ljava/nio/CharBuffer;.wrap:(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;` @kind static;
  #L2872aa.  v5:= temp @kind object;
  #L2872ac.  v1:= v0.`com.google.flatbuffers.Utf8Old$a.a` @type ^`java.nio.charset.CharsetEncoder` @kind object;
  #L2872b0.  v2:= v0.`com.google.flatbuffers.Utf8Old$a.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L2872b4.  v3:= 1I;
  #L2872b6.  call temp:= `encode`(v1, v5, v2, v3) @signature `Ljava/nio/charset/CharsetEncoder;.encode:(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;` @kind virtual;
  #L2872bc.  v5:= temp @kind object;
  #L2872be.  call temp:= `isError`(v5) @signature `Ljava/nio/charset/CoderResult;.isError:()Z` @kind virtual;
  #L2872c4.  v1:= temp;
  #L2872c6.  if v1 == 0 then goto L2872e4;
  #L2872ca.  call `throwException`(v5) @signature `Ljava/nio/charset/CoderResult;.throwException:()V` @kind virtual;
  #L2872d0.  goto L2872e4;
  #L2872d2.  v5:= Exception @type ^`java.nio.charset.CharacterCodingException` @kind object;
  #L2872d4.  v0:= new `java.lang.IllegalArgumentException`;
  #L2872d8.  v1:= "bad character encoding" @kind object;
  #L2872dc.  call `<init>`(v0, v1, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L2872e2.  throw v0;
  #L2872e4.  v5:= v0.`com.google.flatbuffers.Utf8Old$a.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L2872e8.  call temp:= `flip`(v5) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L2872ee.  v5:= v0.`com.google.flatbuffers.Utf8Old$a.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L2872f2.  call temp:= `remaining`(v5) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L2872f8.  v5:= temp;
  #L2872fa.  return v5;
  catch `java.nio.charset.CharacterCodingException` @[L2872ca..L2872d0] goto L2872d2;
}
