record `com.google.flatbuffers.Utf8$a` @kind class @AccessFlag  {
}
procedure `void` `a`(`byte` v2 , `byte` v3 , `byte` v4 , `byte` v5 , `char`[] v6 @kind object, `int` v7 ) @signature `Lcom/google/flatbuffers/Utf8$a;.a:(BBBB[CI)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L286fc8.  call temp:= `f`(v3) @signature `Lcom/google/flatbuffers/Utf8$a;.f:(B)Z` @kind static;
  #L286fce.  v0:= temp;
  #L286fd0.  if v0 != 0 then goto L28704a;
  #L286fd4.  v0:= v2 ^< 28;
  #L286fd8.  v1:= v3 + 112;
  #L286fdc.  v0:= v0 + v1 @kind int;
  #L286fde.  v0:= v0 ^> 30;
  #L286fe2.  if v0 != 0 then goto L28704a;
  #L286fe6.  call temp:= `f`(v4) @signature `Lcom/google/flatbuffers/Utf8$a;.f:(B)Z` @kind static;
  #L286fec.  v0:= temp;
  #L286fee.  if v0 != 0 then goto L28704a;
  #L286ff2.  call temp:= `f`(v5) @signature `Lcom/google/flatbuffers/Utf8$a;.f:(B)Z` @kind static;
  #L286ff8.  v0:= temp;
  #L286ffa.  if v0 != 0 then goto L28704a;
  #L286ffe.  v2:= v2 ^& 7;
  #L287002.  v2:= v2 ^< 18;
  #L287006.  call temp:= `k`(v3) @signature `Lcom/google/flatbuffers/Utf8$a;.k:(B)I` @kind static;
  #L28700c.  v3:= temp;
  #L28700e.  v3:= v3 ^< 12;
  #L287012.  v2:= v2 ^| v3 @kind int;
  #L287014.  call temp:= `k`(v4) @signature `Lcom/google/flatbuffers/Utf8$a;.k:(B)I` @kind static;
  #L28701a.  v3:= temp;
  #L28701c.  v3:= v3 ^< 6;
  #L287020.  v2:= v2 ^| v3 @kind int;
  #L287022.  call temp:= `k`(v5) @signature `Lcom/google/flatbuffers/Utf8$a;.k:(B)I` @kind static;
  #L287028.  v3:= temp;
  #L28702a.  v2:= v2 ^| v3 @kind int;
  #L28702c.  call temp:= `e`(v2) @signature `Lcom/google/flatbuffers/Utf8$a;.e:(I)C` @kind static;
  #L287032.  v3:= temp;
  #L287034.  v6[v7]:= v3 @kind char;
  #L287038.  v7:= v7 + 1;
  #L28703c.  call temp:= `j`(v2) @signature `Lcom/google/flatbuffers/Utf8$a;.j:(I)C` @kind static;
  #L287042.  v2:= temp;
  #L287044.  v6[v7]:= v2 @kind char;
  #L287048.  return @kind void;
  #L28704a.  v2:= new `java.lang.IllegalArgumentException`;
  #L28704e.  v3:= "Invalid UTF-8" @kind object;
  #L287052.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L287058.  throw v2;
}
procedure `void` `b`(`byte` v0 , `char`[] v1 @kind object, `int` v2 ) @signature `Lcom/google/flatbuffers/Utf8$a;.b:(B[CI)V` @AccessFlag STATIC {
    temp;

  #L28706c.  v0:= (`char`) v0 @kind i2c;
  #L28706e.  v1[v2]:= v0 @kind char;
  #L287072.  return @kind void;
}
procedure `void` `c`(`byte` v2 , `byte` v3 , `byte` v4 , `char`[] v5 @kind object, `int` v6 ) @signature `Lcom/google/flatbuffers/Utf8$a;.c:(BBB[CI)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L287084.  call temp:= `f`(v3) @signature `Lcom/google/flatbuffers/Utf8$a;.f:(B)Z` @kind static;
  #L28708a.  v0:= temp;
  #L28708c.  if v0 != 0 then goto L2870e0;
  #L287090.  v0:= -32I;
  #L287094.  v1:= -96I;
  #L287098.  if v2 != v0 then goto L2870a0;
  #L28709c.  if v3 < v1 then goto L2870e0;
  #L2870a0.  v0:= -19I;
  #L2870a4.  if v2 != v0 then goto L2870ac;
  #L2870a8.  if v3 >= v1 then goto L2870e0;
  #L2870ac.  call temp:= `f`(v4) @signature `Lcom/google/flatbuffers/Utf8$a;.f:(B)Z` @kind static;
  #L2870b2.  v0:= temp;
  #L2870b4.  if v0 != 0 then goto L2870e0;
  #L2870b8.  v2:= v2 ^& 15;
  #L2870bc.  v2:= v2 ^< 12;
  #L2870c0.  call temp:= `k`(v3) @signature `Lcom/google/flatbuffers/Utf8$a;.k:(B)I` @kind static;
  #L2870c6.  v3:= temp;
  #L2870c8.  v3:= v3 ^< 6;
  #L2870cc.  v2:= v2 ^| v3 @kind int;
  #L2870ce.  call temp:= `k`(v4) @signature `Lcom/google/flatbuffers/Utf8$a;.k:(B)I` @kind static;
  #L2870d4.  v3:= temp;
  #L2870d6.  v2:= v2 ^| v3 @kind int;
  #L2870d8.  v2:= (`char`) v2 @kind i2c;
  #L2870da.  v5[v6]:= v2 @kind char;
  #L2870de.  return @kind void;
  #L2870e0.  v2:= new `java.lang.IllegalArgumentException`;
  #L2870e4.  v3:= "Invalid UTF-8" @kind object;
  #L2870e8.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2870ee.  throw v2;
}
procedure `void` `d`(`byte` v1 , `byte` v2 , `char`[] v3 @kind object, `int` v4 ) @signature `Lcom/google/flatbuffers/Utf8$a;.d:(BB[CI)V` @AccessFlag STATIC {
    temp;
    v0;

  #L287100.  v0:= -62I;
  #L287104.  if v1 < v0 then goto L28713e;
  #L287108.  call temp:= `f`(v2) @signature `Lcom/google/flatbuffers/Utf8$a;.f:(B)Z` @kind static;
  #L28710e.  v0:= temp;
  #L287110.  if v0 != 0 then goto L28712e;
  #L287114.  v1:= v1 ^& 31;
  #L287118.  v1:= v1 ^< 6;
  #L28711c.  call temp:= `k`(v2) @signature `Lcom/google/flatbuffers/Utf8$a;.k:(B)I` @kind static;
  #L287122.  v2:= temp;
  #L287124.  v1:= v1 ^| v2 @kind int;
  #L287126.  v1:= (`char`) v1 @kind i2c;
  #L287128.  v3[v4]:= v1 @kind char;
  #L28712c.  return @kind void;
  #L28712e.  v1:= new `java.lang.IllegalArgumentException`;
  #L287132.  v2:= "Invalid UTF-8: Illegal trailing byte in 2 bytes utf" @kind object;
  #L287136.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28713c.  throw v1;
  #L28713e.  v1:= new `java.lang.IllegalArgumentException`;
  #L287142.  v2:= "Invalid UTF-8: Illegal leading byte in 2 bytes utf" @kind object;
  #L287146.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28714c.  throw v1;
}
procedure `char` `e`(`int` v1 ) @signature `Lcom/google/flatbuffers/Utf8$a;.e:(I)C` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L286f70.  v1:= v1 ^>> 10;
  #L286f74.  v0:= 55232I;
  #L286f7a.  v1:= v1 + v0 @kind int;
  #L286f7c.  v1:= (`char`) v1 @kind i2c;
  #L286f7e.  return v1;
}
procedure `boolean` `f`(`byte` v1 ) @signature `Lcom/google/flatbuffers/Utf8$a;.f:(B)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L286ef4.  v0:= -65I;
  #L286ef8.  if v1 <= v0 then goto L286f00;
  #L286efc.  v1:= 1I;
  #L286efe.  goto L286f02;
  #L286f00.  v1:= 0I;
  #L286f02.  return v1;
}
procedure `boolean` `g`(`byte` v0 ) @signature `Lcom/google/flatbuffers/Utf8$a;.g:(B)Z` @AccessFlag STATIC {
    temp;

  #L286f14.  if v0 < 0 then goto L286f1c;
  #L286f18.  v0:= 1I;
  #L286f1a.  goto L286f1e;
  #L286f1c.  v0:= 0I;
  #L286f1e.  return v0;
}
procedure `boolean` `h`(`byte` v1 ) @signature `Lcom/google/flatbuffers/Utf8$a;.h:(B)Z` @AccessFlag STATIC {
    temp;
    v0;

  #L286f30.  v0:= -16I;
  #L286f34.  if v1 >= v0 then goto L286f3c;
  #L286f38.  v1:= 1I;
  #L286f3a.  goto L286f3e;
  #L286f3c.  v1:= 0I;
  #L286f3e.  return v1;
}
procedure `boolean` `i`(`byte` v1 ) @signature `Lcom/google/flatbuffers/Utf8$a;.i:(B)Z` @AccessFlag STATIC {
    temp;
    v0;

  #L286f50.  v0:= -32I;
  #L286f54.  if v1 >= v0 then goto L286f5c;
  #L286f58.  v1:= 1I;
  #L286f5a.  goto L286f5e;
  #L286f5c.  v1:= 0I;
  #L286f5e.  return v1;
}
procedure `char` `j`(`int` v1 ) @signature `Lcom/google/flatbuffers/Utf8$a;.j:(I)C` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L286f90.  v1:= v1 ^& 1023;
  #L286f94.  v0:= 56320I;
  #L286f9a.  v1:= v1 + v0 @kind int;
  #L286f9c.  v1:= (`char`) v1 @kind i2c;
  #L286f9e.  return v1;
}
procedure `int` `k`(`byte` v0 ) @signature `Lcom/google/flatbuffers/Utf8$a;.k:(B)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L286fb0.  v0:= v0 ^& 63;
  #L286fb4.  return v0;
}
