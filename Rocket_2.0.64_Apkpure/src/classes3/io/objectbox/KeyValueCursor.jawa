record `io.objectbox.KeyValueCursor` @kind class @AccessFlag PUBLIC extends `java.io.Closeable` @kind interface {
  `long` `io.objectbox.KeyValueCursor.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.objectbox.KeyValueCursor` v0 @kind this, `long` v1 ) @signature `Lio/objectbox/KeyValueCursor;.<init>:(J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3e0f40.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e0f46.  v0.`io.objectbox.KeyValueCursor.a` @type ^`long` := v1 @kind wide;
  #L3e0f4a.  return @kind void;
}
procedure `void` `nativeDestroy`(`long` v0 ) @signature `Lio/objectbox/KeyValueCursor;.nativeDestroy:(J)V` @AccessFlag STATIC_NATIVE {

  # return;
}
procedure `byte`[] `nativeGetCurrent`(`long` v0 ) @signature `Lio/objectbox/KeyValueCursor;.nativeGetCurrent:(J)[B` @AccessFlag STATIC_NATIVE {

  # return;
}
procedure `byte`[] `nativeGetEqualOrGreater`(`long` v0 , `long` v2 ) @signature `Lio/objectbox/KeyValueCursor;.nativeGetEqualOrGreater:(JJ)[B` @AccessFlag STATIC_NATIVE {

  # return;
}
procedure `byte`[] `nativeGetFirst`(`long` v0 ) @signature `Lio/objectbox/KeyValueCursor;.nativeGetFirst:(J)[B` @AccessFlag STATIC_NATIVE {

  # return;
}
procedure `long` `nativeGetKey`(`long` v0 ) @signature `Lio/objectbox/KeyValueCursor;.nativeGetKey:(J)J` @AccessFlag STATIC_NATIVE {

  # return;
}
procedure `byte`[] `nativeGetLast`(`long` v0 ) @signature `Lio/objectbox/KeyValueCursor;.nativeGetLast:(J)[B` @AccessFlag STATIC_NATIVE {

  # return;
}
procedure `byte`[] `nativeGetLongKey`(`long` v0 , `long` v2 ) @signature `Lio/objectbox/KeyValueCursor;.nativeGetLongKey:(JJ)[B` @AccessFlag STATIC_NATIVE {

  # return;
}
procedure `byte`[] `nativeGetNext`(`long` v0 ) @signature `Lio/objectbox/KeyValueCursor;.nativeGetNext:(J)[B` @AccessFlag STATIC_NATIVE {

  # return;
}
procedure `byte`[] `nativeGetPrev`(`long` v0 ) @signature `Lio/objectbox/KeyValueCursor;.nativeGetPrev:(J)[B` @AccessFlag STATIC_NATIVE {

  # return;
}
procedure `void` `nativePutLongKey`(`long` v0 , `long` v2 , `byte`[] v4 @kind object) @signature `Lio/objectbox/KeyValueCursor;.nativePutLongKey:(JJ[B)V` @AccessFlag STATIC_NATIVE {

  # return;
}
procedure `boolean` `nativeRemoveAt`(`long` v0 , `long` v2 ) @signature `Lio/objectbox/KeyValueCursor;.nativeRemoveAt:(JJ)Z` @AccessFlag STATIC_NATIVE {

  # return;
}
procedure `boolean` `nativeSeek`(`long` v0 , `long` v2 ) @signature `Lio/objectbox/KeyValueCursor;.nativeSeek:(JJ)Z` @AccessFlag STATIC_NATIVE {

  # return;
}
procedure `void` `close`(`io.objectbox.KeyValueCursor` v2 @kind this) @signature `Lio/objectbox/KeyValueCursor;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e0f5c.  v0:= v2.`io.objectbox.KeyValueCursor.a` @type ^`long` @kind wide;
  #L3e0f60.  call `nativeDestroy`(v0) @signature `Lio/objectbox/KeyValueCursor;.nativeDestroy:(J)V` @kind static;
  #L3e0f66.  return @kind void;
}
procedure `byte`[] `get`(`io.objectbox.KeyValueCursor` v2 @kind this, `long` v3 ) @signature `Lio/objectbox/KeyValueCursor;.get:(J)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e0e40.  v0:= v2.`io.objectbox.KeyValueCursor.a` @type ^`long` @kind wide;
  #L3e0e44.  call temp:= `nativeGetLongKey`(v0, v3) @signature `Lio/objectbox/KeyValueCursor;.nativeGetLongKey:(JJ)[B` @kind static;
  #L3e0e4a.  v3:= temp @kind object;
  #L3e0e4c.  return v3 @kind object;
}
procedure `byte`[] `getCurrent`(`io.objectbox.KeyValueCursor` v2 @kind this) @signature `Lio/objectbox/KeyValueCursor;.getCurrent:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e0e60.  v0:= v2.`io.objectbox.KeyValueCursor.a` @type ^`long` @kind wide;
  #L3e0e64.  call temp:= `nativeGetCurrent`(v0) @signature `Lio/objectbox/KeyValueCursor;.nativeGetCurrent:(J)[B` @kind static;
  #L3e0e6a.  v0:= temp @kind object;
  #L3e0e6c.  return v0 @kind object;
}
procedure `byte`[] `getEqualOrGreater`(`io.objectbox.KeyValueCursor` v2 @kind this, `long` v3 ) @signature `Lio/objectbox/KeyValueCursor;.getEqualOrGreater:(J)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e0e80.  v0:= v2.`io.objectbox.KeyValueCursor.a` @type ^`long` @kind wide;
  #L3e0e84.  call temp:= `nativeGetEqualOrGreater`(v0, v3) @signature `Lio/objectbox/KeyValueCursor;.nativeGetEqualOrGreater:(JJ)[B` @kind static;
  #L3e0e8a.  v3:= temp @kind object;
  #L3e0e8c.  return v3 @kind object;
}
procedure `byte`[] `getFirst`(`io.objectbox.KeyValueCursor` v2 @kind this) @signature `Lio/objectbox/KeyValueCursor;.getFirst:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e0ea0.  v0:= v2.`io.objectbox.KeyValueCursor.a` @type ^`long` @kind wide;
  #L3e0ea4.  call temp:= `nativeGetFirst`(v0) @signature `Lio/objectbox/KeyValueCursor;.nativeGetFirst:(J)[B` @kind static;
  #L3e0eaa.  v0:= temp @kind object;
  #L3e0eac.  return v0 @kind object;
}
procedure `long` `getKey`(`io.objectbox.KeyValueCursor` v2 @kind this) @signature `Lio/objectbox/KeyValueCursor;.getKey:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e0f20.  v0:= v2.`io.objectbox.KeyValueCursor.a` @type ^`long` @kind wide;
  #L3e0f24.  call temp:= `nativeGetKey`(v0) @signature `Lio/objectbox/KeyValueCursor;.nativeGetKey:(J)J` @kind static;
  #L3e0f2a.  v0:= temp @kind wide;
  #L3e0f2c.  return v0 @kind wide;
}
procedure `byte`[] `getLast`(`io.objectbox.KeyValueCursor` v2 @kind this) @signature `Lio/objectbox/KeyValueCursor;.getLast:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e0ec0.  v0:= v2.`io.objectbox.KeyValueCursor.a` @type ^`long` @kind wide;
  #L3e0ec4.  call temp:= `nativeGetLast`(v0) @signature `Lio/objectbox/KeyValueCursor;.nativeGetLast:(J)[B` @kind static;
  #L3e0eca.  v0:= temp @kind object;
  #L3e0ecc.  return v0 @kind object;
}
procedure `byte`[] `getNext`(`io.objectbox.KeyValueCursor` v2 @kind this) @signature `Lio/objectbox/KeyValueCursor;.getNext:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e0ee0.  v0:= v2.`io.objectbox.KeyValueCursor.a` @type ^`long` @kind wide;
  #L3e0ee4.  call temp:= `nativeGetNext`(v0) @signature `Lio/objectbox/KeyValueCursor;.nativeGetNext:(J)[B` @kind static;
  #L3e0eea.  v0:= temp @kind object;
  #L3e0eec.  return v0 @kind object;
}
procedure `byte`[] `getPrev`(`io.objectbox.KeyValueCursor` v2 @kind this) @signature `Lio/objectbox/KeyValueCursor;.getPrev:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e0f00.  v0:= v2.`io.objectbox.KeyValueCursor.a` @type ^`long` @kind wide;
  #L3e0f04.  call temp:= `nativeGetPrev`(v0) @signature `Lio/objectbox/KeyValueCursor;.nativeGetPrev:(J)[B` @kind static;
  #L3e0f0a.  v0:= temp @kind object;
  #L3e0f0c.  return v0 @kind object;
}
procedure `void` `put`(`io.objectbox.KeyValueCursor` v2 @kind this, `long` v3 , `byte`[] v5 @kind object) @signature `Lio/objectbox/KeyValueCursor;.put:(J[B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e0f78.  v0:= v2.`io.objectbox.KeyValueCursor.a` @type ^`long` @kind wide;
  #L3e0f7c.  call `nativePutLongKey`(v0, v3, v5) @signature `Lio/objectbox/KeyValueCursor;.nativePutLongKey:(JJ[B)V` @kind static;
  #L3e0f82.  return @kind void;
}
procedure `boolean` `removeAt`(`io.objectbox.KeyValueCursor` v2 @kind this, `long` v3 ) @signature `Lio/objectbox/KeyValueCursor;.removeAt:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e0e00.  v0:= v2.`io.objectbox.KeyValueCursor.a` @type ^`long` @kind wide;
  #L3e0e04.  call temp:= `nativeRemoveAt`(v0, v3) @signature `Lio/objectbox/KeyValueCursor;.nativeRemoveAt:(JJ)Z` @kind static;
  #L3e0e0a.  v3:= temp;
  #L3e0e0c.  return v3;
}
procedure `boolean` `seek`(`io.objectbox.KeyValueCursor` v2 @kind this, `long` v3 ) @signature `Lio/objectbox/KeyValueCursor;.seek:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e0e20.  v0:= v2.`io.objectbox.KeyValueCursor.a` @type ^`long` @kind wide;
  #L3e0e24.  call temp:= `nativeSeek`(v0, v3) @signature `Lio/objectbox/KeyValueCursor;.nativeSeek:(JJ)Z` @kind static;
  #L3e0e2a.  v3:= temp;
  #L3e0e2c.  return v3;
}
