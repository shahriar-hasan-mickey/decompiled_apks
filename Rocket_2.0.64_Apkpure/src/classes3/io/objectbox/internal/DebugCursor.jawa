record `io.objectbox.internal.DebugCursor` @kind class @AccessFlag PUBLIC extends `java.io.Closeable` @kind interface {
  `io.objectbox.Transaction` `io.objectbox.internal.DebugCursor.a` @AccessFlag PRIVATE_FINAL;
  `long` `io.objectbox.internal.DebugCursor.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `io.objectbox.internal.DebugCursor.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`io.objectbox.internal.DebugCursor` v0 @kind this, `io.objectbox.Transaction` v1 @kind object, `long` v2 ) @signature `Lio/objectbox/internal/DebugCursor;.<init>:(Lio/objectbox/Transaction;J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3e3198.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e319e.  v0.`io.objectbox.internal.DebugCursor.a` @type ^`io.objectbox.Transaction` := v1 @kind object;
  #L3e31a2.  v0.`io.objectbox.internal.DebugCursor.b` @type ^`long` := v2 @kind wide;
  #L3e31a6.  return @kind void;
}
procedure `io.objectbox.internal.DebugCursor` `create`(`io.objectbox.Transaction` v5 @kind object) @signature `Lio/objectbox/internal/DebugCursor;.create:(Lio/objectbox/Transaction;)Lio/objectbox/internal/DebugCursor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3e3150.  call temp:= `getHandle`(v5) @signature `Lio/objectbox/InternalAccess;.getHandle:(Lio/objectbox/Transaction;)J` @kind static;
  #L3e3156.  v0:= temp @kind wide;
  #L3e3158.  call temp:= `nativeCreate`(v0) @signature `Lio/objectbox/internal/DebugCursor;.nativeCreate:(J)J` @kind static;
  #L3e315e.  v0:= temp @kind wide;
  #L3e3160.  v2:= 0L;
  #L3e3164.  v4:= lcmp(v0, v2);
  #L3e3168.  if v4 == 0 then goto L3e3178;
  #L3e316c.  v2:= new `io.objectbox.internal.DebugCursor`;
  #L3e3170.  call `<init>`(v2, v5, v0) @signature `Lio/objectbox/internal/DebugCursor;.<init>:(Lio/objectbox/Transaction;J)V` @kind direct;
  #L3e3176.  return v2 @kind object;
  #L3e3178.  v5:= new `io.objectbox.exception.DbException`;
  #L3e317c.  v0:= "Could not create native debug cursor" @kind object;
  #L3e3180.  call `<init>`(v5, v0) @signature `Lio/objectbox/exception/DbException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e3186.  throw v5;
}
procedure `long` `nativeCreate`(`long` v0 ) @signature `Lio/objectbox/internal/DebugCursor;.nativeCreate:(J)J` @AccessFlag STATIC_NATIVE {

  # return;
}
procedure `void` `nativeDestroy`(`long` v0 ) @signature `Lio/objectbox/internal/DebugCursor;.nativeDestroy:(J)V` @AccessFlag STATIC_NATIVE {

  # return;
}
procedure `byte`[] `nativeGet`(`long` v0 , `byte`[] v2 @kind object) @signature `Lio/objectbox/internal/DebugCursor;.nativeGet:(J[B)[B` @AccessFlag STATIC_NATIVE {

  # return;
}
procedure `byte`[] `nativeSeekOrNext`(`long` v0 , `byte`[] v2 @kind object) @signature `Lio/objectbox/internal/DebugCursor;.nativeSeekOrNext:(J[B)[B` @AccessFlag STATIC_NATIVE {

  # return;
}
procedure `void` `close`(`io.objectbox.internal.DebugCursor` v2 @kind this) @signature `Lio/objectbox/internal/DebugCursor;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e31b8.  @monitorenter v2
  #L3e31ba.  v0:= v2.`io.objectbox.internal.DebugCursor.c` @type ^`boolean` @kind boolean;
  #L3e31be.  if v0 != 0 then goto L3e31ee;
  #L3e31c2.  v0:= 1I;
  #L3e31c4.  v2.`io.objectbox.internal.DebugCursor.c` @type ^`boolean` := v0 @kind boolean;
  #L3e31c8.  v0:= v2.`io.objectbox.internal.DebugCursor.a` @type ^`io.objectbox.Transaction` @kind object;
  #L3e31cc.  if v0 == 0 then goto L3e31ee;
  #L3e31d0.  call temp:= `getStore`(v0) @signature `Lio/objectbox/Transaction;.getStore:()Lio/objectbox/BoxStore;` @kind virtual;
  #L3e31d6.  v0:= temp @kind object;
  #L3e31d8.  call temp:= `isClosed`(v0) @signature `Lio/objectbox/BoxStore;.isClosed:()Z` @kind virtual;
  #L3e31de.  v0:= temp;
  #L3e31e0.  if v0 != 0 then goto L3e31ee;
  #L3e31e4.  v0:= v2.`io.objectbox.internal.DebugCursor.b` @type ^`long` @kind wide;
  #L3e31e8.  call `nativeDestroy`(v0) @signature `Lio/objectbox/internal/DebugCursor;.nativeDestroy:(J)V` @kind static;
  #L3e31ee.  @monitorexit v2
  #L3e31f0.  return @kind void;
  #L3e31f2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3e31f4.  @monitorexit v2
  #L3e31f6.  throw v0;
  catch `java.lang.Throwable` @[L3e31ba..L3e31ee] goto L3e31f2;
}
procedure `void` `finalize`(`io.objectbox.internal.DebugCursor` v1 @kind this) @signature `Lio/objectbox/internal/DebugCursor;.finalize:()V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3e3214.  v0:= v1.`io.objectbox.internal.DebugCursor.c` @type ^`boolean` @kind boolean;
  #L3e3218.  if v0 != 0 then goto L3e3228;
  #L3e321c.  call `close`(v1) @signature `Lio/objectbox/internal/DebugCursor;.close:()V` @kind virtual;
  #L3e3222.  call `finalize`(v1) @signature `Ljava/lang/Object;.finalize:()V` @kind super;
  #L3e3228.  return @kind void;
}
procedure `byte`[] `get`(`io.objectbox.internal.DebugCursor` v2 @kind this, `byte`[] v3 @kind object) @signature `Lio/objectbox/internal/DebugCursor;.get:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e3110.  v0:= v2.`io.objectbox.internal.DebugCursor.b` @type ^`long` @kind wide;
  #L3e3114.  call temp:= `nativeGet`(v0, v3) @signature `Lio/objectbox/internal/DebugCursor;.nativeGet:(J[B)[B` @kind static;
  #L3e311a.  v3:= temp @kind object;
  #L3e311c.  return v3 @kind object;
}
procedure `byte`[] `seekOrNext`(`io.objectbox.internal.DebugCursor` v2 @kind this, `byte`[] v3 @kind object) @signature `Lio/objectbox/internal/DebugCursor;.seekOrNext:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e3130.  v0:= v2.`io.objectbox.internal.DebugCursor.b` @type ^`long` @kind wide;
  #L3e3134.  call temp:= `nativeSeekOrNext`(v0, v3) @signature `Lio/objectbox/internal/DebugCursor;.nativeSeekOrNext:(J[B)[B` @kind static;
  #L3e313a.  v3:= temp @kind object;
  #L3e313c.  return v3 @kind object;
}
