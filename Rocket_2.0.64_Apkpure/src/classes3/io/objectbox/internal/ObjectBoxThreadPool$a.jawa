record `io.objectbox.internal.ObjectBoxThreadPool$a` @kind class @AccessFlag  extends `java.util.concurrent.ThreadFactory` @kind interface {
  `java.lang.ThreadGroup` `io.objectbox.internal.ObjectBoxThreadPool$a.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `io.objectbox.internal.ObjectBoxThreadPool$a.b` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.objectbox.internal.ObjectBoxThreadPool$a.c` @AccessFlag PRIVATE_FINAL;
}
global `java.util.concurrent.atomic.AtomicInteger` `@@io.objectbox.internal.ObjectBoxThreadPool$a.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/objectbox/internal/ObjectBoxThreadPool$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3e3ab4.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L3e3ab8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3e3abe.  `@@io.objectbox.internal.ObjectBoxThreadPool$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L3e3ac2.  return @kind void;
}
procedure `void` `<init>`(`io.objectbox.internal.ObjectBoxThreadPool$a` v2 @kind this) @signature `Lio/objectbox/internal/ObjectBoxThreadPool$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3e3ad4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e3ada.  v0:= new `java.lang.StringBuilder`;
  #L3e3ade.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3e3ae4.  v1:= "ObjectBox-" @kind object;
  #L3e3ae8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e3aee.  v1:= `@@io.objectbox.internal.ObjectBoxThreadPool$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3e3af2.  call temp:= `incrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L3e3af8.  v1:= temp;
  #L3e3afa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e3b00.  v1:= "-Thread-" @kind object;
  #L3e3b04.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e3b0a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3e3b10.  v0:= temp @kind object;
  #L3e3b12.  v2.`io.objectbox.internal.ObjectBoxThreadPool$a.b` @type ^`java.lang.String` := v0 @kind object;
  #L3e3b16.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L3e3b1a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3e3b20.  v2.`io.objectbox.internal.ObjectBoxThreadPool$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L3e3b24.  call temp:= `getSecurityManager`() @signature `Ljava/lang/System;.getSecurityManager:()Ljava/lang/SecurityManager;` @kind static;
  #L3e3b2a.  v0:= temp @kind object;
  #L3e3b2c.  if v0 == 0 then goto L3e3b3a;
  #L3e3b30.  call temp:= `getThreadGroup`(v0) @signature `Ljava/lang/SecurityManager;.getThreadGroup:()Ljava/lang/ThreadGroup;` @kind virtual;
  #L3e3b36.  v0:= temp @kind object;
  #L3e3b38.  goto L3e3b4a;
  #L3e3b3a.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L3e3b40.  v0:= temp @kind object;
  #L3e3b42.  call temp:= `getThreadGroup`(v0) @signature `Ljava/lang/Thread;.getThreadGroup:()Ljava/lang/ThreadGroup;` @kind virtual;
  #L3e3b48.  v0:= temp @kind object;
  #L3e3b4a.  v2.`io.objectbox.internal.ObjectBoxThreadPool$a.a` @type ^`java.lang.ThreadGroup` := v0 @kind object;
  #L3e3b4e.  return @kind void;
}
procedure `java.lang.Thread` `newThread`(`io.objectbox.internal.ObjectBoxThreadPool$a` v3 @kind this, `java.lang.Runnable` v4 @kind object) @signature `Lio/objectbox/internal/ObjectBoxThreadPool$a;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3e3a3c.  v0:= new `java.lang.StringBuilder`;
  #L3e3a40.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3e3a46.  v1:= v3.`io.objectbox.internal.ObjectBoxThreadPool$a.b` @type ^`java.lang.String` @kind object;
  #L3e3a4a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e3a50.  v1:= v3.`io.objectbox.internal.ObjectBoxThreadPool$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3e3a54.  call temp:= `incrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L3e3a5a.  v1:= temp;
  #L3e3a5c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e3a62.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3e3a68.  v0:= temp @kind object;
  #L3e3a6a.  v1:= new `java.lang.Thread`;
  #L3e3a6e.  v2:= v3.`io.objectbox.internal.ObjectBoxThreadPool$a.a` @type ^`java.lang.ThreadGroup` @kind object;
  #L3e3a72.  call `<init>`(v1, v2, v4, v0) @signature `Ljava/lang/Thread;.<init>:(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;)V` @kind direct;
  #L3e3a78.  call temp:= `getPriority`(v1) @signature `Ljava/lang/Thread;.getPriority:()I` @kind virtual;
  #L3e3a7e.  v4:= temp;
  #L3e3a80.  v0:= 5I;
  #L3e3a82.  if v4 == v0 then goto L3e3a8c;
  #L3e3a86.  call `setPriority`(v1, v0) @signature `Ljava/lang/Thread;.setPriority:(I)V` @kind virtual;
  #L3e3a8c.  call temp:= `isDaemon`(v1) @signature `Ljava/lang/Thread;.isDaemon:()Z` @kind virtual;
  #L3e3a92.  v4:= temp;
  #L3e3a94.  if v4 == 0 then goto L3e3aa0;
  #L3e3a98.  v4:= 0I;
  #L3e3a9a.  call `setDaemon`(v1, v4) @signature `Ljava/lang/Thread;.setDaemon:(Z)V` @kind virtual;
  #L3e3aa0.  return v1 @kind object;
}
