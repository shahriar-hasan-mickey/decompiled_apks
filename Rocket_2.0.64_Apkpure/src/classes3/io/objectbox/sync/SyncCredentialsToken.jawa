record `io.objectbox.sync.SyncCredentialsToken` @kind class @AccessFlag PUBLIC extends `io.objectbox.sync.SyncCredentials` @kind class {
  `io.objectbox.sync.SyncCredentials$CredentialsType` `io.objectbox.sync.SyncCredentialsToken.a` @AccessFlag PRIVATE_FINAL;
  `byte`[] `io.objectbox.sync.SyncCredentialsToken.b` @AccessFlag PRIVATE;
  `boolean` `io.objectbox.sync.SyncCredentialsToken.c` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`io.objectbox.sync.SyncCredentialsToken` v0 @kind this, `io.objectbox.sync.SyncCredentials$CredentialsType` v1 @kind object) @signature `Lio/objectbox/sync/SyncCredentialsToken;.<init>:(Lio/objectbox/sync/SyncCredentials$CredentialsType;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3edb8c.  call `<init>`(v0) @signature `Lio/objectbox/sync/SyncCredentials;.<init>:()V` @kind direct;
  #L3edb92.  v0.`io.objectbox.sync.SyncCredentialsToken.a` @type ^`io.objectbox.sync.SyncCredentials$CredentialsType` := v1 @kind object;
  #L3edb96.  v1:= 0I;
  #L3edb98.  v0.`io.objectbox.sync.SyncCredentialsToken.b` @type ^`byte`[] := v1 @kind object;
  #L3edb9c.  return @kind void;
}
procedure `void` `<init>`(`io.objectbox.sync.SyncCredentialsToken` v0 @kind this, `io.objectbox.sync.SyncCredentials$CredentialsType` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lio/objectbox/sync/SyncCredentialsToken;.<init>:(Lio/objectbox/sync/SyncCredentials$CredentialsType;Ljava/lang/String;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3edbe8.  call temp:= `a`(v2) @signature `Lio/objectbox/sync/SyncCredentialsToken;.a:(Ljava/lang/String;)[B` @kind static;
  #L3edbee.  v2:= temp @kind object;
  #L3edbf0.  call `<init>`(v0, v1, v2) @signature `Lio/objectbox/sync/SyncCredentialsToken;.<init>:(Lio/objectbox/sync/SyncCredentials$CredentialsType;[B)V` @kind direct;
  #L3edbf6.  return @kind void;
}
procedure `void` `<init>`(`io.objectbox.sync.SyncCredentialsToken` v0 @kind this, `io.objectbox.sync.SyncCredentials$CredentialsType` v1 @kind object, `byte`[] v2 @kind object) @signature `Lio/objectbox/sync/SyncCredentialsToken;.<init>:(Lio/objectbox/sync/SyncCredentials$CredentialsType;[B)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3edbb0.  call `<init>`(v0, v1) @signature `Lio/objectbox/sync/SyncCredentialsToken;.<init>:(Lio/objectbox/sync/SyncCredentials$CredentialsType;)V` @kind direct;
  #L3edbb6.  if v2 == 0 then goto L3edbc6;
  #L3edbba.  v1:= length @variable v2;
  #L3edbbc.  if v1 == 0 then goto L3edbc6;
  #L3edbc0.  v0.`io.objectbox.sync.SyncCredentialsToken.b` @type ^`byte`[] := v2 @kind object;
  #L3edbc4.  return @kind void;
  #L3edbc6.  v1:= new `java.lang.IllegalArgumentException`;
  #L3edbca.  v2:= "Token must not be empty" @kind object;
  #L3edbce.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3edbd4.  throw v1;
}
procedure `byte`[] `a`(`java.lang.String` v1 @kind object) @signature `Lio/objectbox/sync/SyncCredentialsToken;.a:(Ljava/lang/String;)[B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3edb04.  v0:= "UTF-8" @kind object;
  #L3edb08.  call temp:= `getBytes`(v1, v0) @signature `Ljava/lang/String;.getBytes:(Ljava/lang/String;)[B` @kind virtual;
  #L3edb0e.  v1:= temp @kind object;
  #L3edb10.  return v1 @kind object;
  #L3edb12.  v1:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L3edb14.  v0:= new `java.lang.RuntimeException`;
  #L3edb18.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3edb1e.  throw v0;
  catch `java.io.UnsupportedEncodingException` @[L3edb04..L3edb10] goto L3edb12;
}
procedure `void` `clear`(`io.objectbox.sync.SyncCredentialsToken` v2 @kind this) @signature `Lio/objectbox/sync/SyncCredentialsToken;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3edc08.  v0:= 1I;
  #L3edc0a.  v2.`io.objectbox.sync.SyncCredentialsToken.c` @type ^`boolean` := v0 @kind boolean;
  #L3edc0e.  v0:= v2.`io.objectbox.sync.SyncCredentialsToken.b` @type ^`byte`[] @kind object;
  #L3edc12.  if v0 == 0 then goto L3edc1e;
  #L3edc16.  v1:= 0I;
  #L3edc18.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([BB)V` @kind static;
  #L3edc1e.  v0:= 0I;
  #L3edc20.  v2.`io.objectbox.sync.SyncCredentialsToken.b` @type ^`byte`[] := v0 @kind object;
  #L3edc24.  return @kind void;
}
procedure `byte`[] `getTokenBytes`(`io.objectbox.sync.SyncCredentialsToken` v2 @kind this) @signature `Lio/objectbox/sync/SyncCredentialsToken;.getTokenBytes:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3edb40.  v0:= v2.`io.objectbox.sync.SyncCredentialsToken.c` @type ^`boolean` @kind boolean;
  #L3edb44.  if v0 != 0 then goto L3edb4e;
  #L3edb48.  v0:= v2.`io.objectbox.sync.SyncCredentialsToken.b` @type ^`byte`[] @kind object;
  #L3edb4c.  return v0 @kind object;
  #L3edb4e.  v0:= new `java.lang.IllegalStateException`;
  #L3edb52.  v1:= "Credentials already have been cleared" @kind object;
  #L3edb56.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3edb5c.  throw v0;
}
procedure `long` `getTypeId`(`io.objectbox.sync.SyncCredentialsToken` v2 @kind this) @signature `Lio/objectbox/sync/SyncCredentialsToken;.getTypeId:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3edb70.  v0:= v2.`io.objectbox.sync.SyncCredentialsToken.a` @type ^`io.objectbox.sync.SyncCredentials$CredentialsType` @kind object;
  #L3edb74.  v0:= v0.`io.objectbox.sync.SyncCredentials$CredentialsType.id` @type ^`long` @kind wide;
  #L3edb78.  return v0 @kind wide;
}
