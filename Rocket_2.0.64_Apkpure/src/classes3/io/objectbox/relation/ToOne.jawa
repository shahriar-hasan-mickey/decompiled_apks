record `io.objectbox.relation.ToOne` @kind class @AccessFlag PUBLIC extends `java.io.Serializable` @kind interface {
  `java.lang.Object` `io.objectbox.relation.ToOne.a` @AccessFlag PRIVATE_FINAL;
  `io.objectbox.relation.RelationInfo` `io.objectbox.relation.ToOne.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `io.objectbox.relation.ToOne.c` @AccessFlag PRIVATE_FINAL;
  `io.objectbox.BoxStore` `io.objectbox.relation.ToOne.d` @AccessFlag PRIVATE_TRANSIENT;
  `io.objectbox.Box` `io.objectbox.relation.ToOne.e` @AccessFlag PRIVATE_TRANSIENT;
  `io.objectbox.Box` `io.objectbox.relation.ToOne.f` @AccessFlag PRIVATE_TRANSIENT_VOLATILE;
  `java.lang.reflect.Field` `io.objectbox.relation.ToOne.g` @AccessFlag PRIVATE_TRANSIENT;
  `java.lang.Object` `io.objectbox.relation.ToOne.h` @AccessFlag PRIVATE;
  `long` `io.objectbox.relation.ToOne.i` @AccessFlag PRIVATE;
  `long` `io.objectbox.relation.ToOne.j` @AccessFlag PRIVATE_VOLATILE;
  `boolean` `io.objectbox.relation.ToOne.k` @AccessFlag PRIVATE;
  `boolean` `io.objectbox.relation.ToOne.l` @AccessFlag PRIVATE;
}
global `long` `@@io.objectbox.relation.ToOne.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.objectbox.relation.ToOne` v0 @kind this, `java.lang.Object` v1 @kind object, `io.objectbox.relation.RelationInfo` v2 @kind object) @signature `Lio/objectbox/relation/ToOne;.<init>:(Ljava/lang/Object;Lio/objectbox/relation/RelationInfo;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3ecd78.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ecd7e.  if v1 == 0 then goto L3ecdac;
  #L3ecd82.  if v2 == 0 then goto L3ecd9c;
  #L3ecd86.  v0.`io.objectbox.relation.ToOne.a` @type ^`java.lang.Object` := v1 @kind object;
  #L3ecd8a.  v0.`io.objectbox.relation.ToOne.b` @type ^`io.objectbox.relation.RelationInfo` := v2 @kind object;
  #L3ecd8e.  v1:= v2.`io.objectbox.relation.RelationInfo.targetIdProperty` @type ^`io.objectbox.Property` @kind object;
  #L3ecd92.  v1:= v1.`io.objectbox.Property.isVirtual` @type ^`boolean` @kind boolean;
  #L3ecd96.  v0.`io.objectbox.relation.ToOne.c` @type ^`boolean` := v1 @kind boolean;
  #L3ecd9a.  return @kind void;
  #L3ecd9c.  v1:= new `java.lang.IllegalArgumentException`;
  #L3ecda0.  v2:= "No relation info given (null)" @kind object;
  #L3ecda4.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ecdaa.  throw v1;
  #L3ecdac.  v1:= new `java.lang.IllegalArgumentException`;
  #L3ecdb0.  v2:= "No source entity given (null)" @kind object;
  #L3ecdb4.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ecdba.  throw v1;
}
procedure `void` `a`(`io.objectbox.relation.ToOne` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lio/objectbox/relation/ToOne;.a:(Lio/objectbox/relation/ToOne;Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L3ecd60.  call `e`(v0, v1) @signature `Lio/objectbox/relation/ToOne;.e:(Ljava/lang/Object;)V` @kind direct;
  #L3ecd66.  return @kind void;
}
procedure `void` `b`(`io.objectbox.relation.ToOne` v2 @kind this) @signature `Lio/objectbox/relation/ToOne;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3ecdcc.  @monitorenter v2
  #L3ecdce.  v0:= 0L;
  #L3ecdd2.  v2.`io.objectbox.relation.ToOne.j` @type ^`long` := v0 @kind wide;
  #L3ecdd6.  v0:= 0I;
  #L3ecdd8.  v2.`io.objectbox.relation.ToOne.h` @type ^`java.lang.Object` := v0 @kind object;
  #L3ecddc.  @monitorexit v2
  #L3ecdde.  return @kind void;
  #L3ecde0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ecde2.  @monitorexit v2
  #L3ecde4.  throw v0;
  catch `java.lang.Throwable` @[L3ecdd2..L3ecddc] goto L3ecde0;
}
procedure `void` `c`(`io.objectbox.relation.ToOne` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/objectbox/relation/ToOne;.c:(Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3ece04.  v0:= v3.`io.objectbox.relation.ToOne.f` @type ^`io.objectbox.Box` @kind object;
  #L3ece08.  if v0 != 0 then goto L3eceea;
  #L3ece0c.  call temp:= `getInstance`() @signature `Lio/objectbox/internal/ReflectionCache;.getInstance:()Lio/objectbox/internal/ReflectionCache;` @kind static;
  #L3ece12.  v0:= temp @kind object;
  #L3ece14.  v1:= v3.`io.objectbox.relation.ToOne.a` @type ^`java.lang.Object` @kind object;
  #L3ece18.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3ece1e.  v1:= temp @kind object;
  #L3ece20.  v2:= "__boxStore" @kind object;
  #L3ece24.  call temp:= `getField`(v0, v1, v2) @signature `Lio/objectbox/internal/ReflectionCache;.getField:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/reflect/Field;` @kind virtual;
  #L3ece2a.  v0:= temp @kind object;
  #L3ece2c.  v1:= v3.`io.objectbox.relation.ToOne.a` @type ^`java.lang.Object` @kind object;
  #L3ece30.  call temp:= `get`(v0, v1) @signature `Ljava/lang/reflect/Field;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3ece36.  v0:= temp @kind object;
  #L3ece38.  v0:= (`io.objectbox.BoxStore`) v0 @kind object;
  #L3ece3c.  v3.`io.objectbox.relation.ToOne.d` @type ^`io.objectbox.BoxStore` := v0 @kind object;
  #L3ece40.  if v0 != 0 then goto L3ece8a;
  #L3ece44.  if v4 == 0 then goto L3ece70;
  #L3ece48.  call temp:= `getInstance`() @signature `Lio/objectbox/internal/ReflectionCache;.getInstance:()Lio/objectbox/internal/ReflectionCache;` @kind static;
  #L3ece4e.  v0:= temp @kind object;
  #L3ece50.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3ece56.  v1:= temp @kind object;
  #L3ece58.  call temp:= `getField`(v0, v1, v2) @signature `Lio/objectbox/internal/ReflectionCache;.getField:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/reflect/Field;` @kind virtual;
  #L3ece5e.  v0:= temp @kind object;
  #L3ece60.  call temp:= `get`(v0, v4) @signature `Ljava/lang/reflect/Field;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3ece66.  v4:= temp @kind object;
  #L3ece68.  v4:= (`io.objectbox.BoxStore`) v4 @kind object;
  #L3ece6c.  v3.`io.objectbox.relation.ToOne.d` @type ^`io.objectbox.BoxStore` := v4 @kind object;
  #L3ece70.  v4:= v3.`io.objectbox.relation.ToOne.d` @type ^`io.objectbox.BoxStore` @kind object;
  #L3ece74.  if v4 == 0 then goto L3ece7a;
  #L3ece78.  goto L3ece8a;
  #L3ece7a.  v4:= new `io.objectbox.exception.DbDetachedException`;
  #L3ece7e.  v0:= "Cannot resolve relation for detached entities, call box.attach(entity) beforehand." @kind object;
  #L3ece82.  call `<init>`(v4, v0) @signature `Lio/objectbox/exception/DbDetachedException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ece88.  throw v4;
  #L3ece8a.  v4:= v3.`io.objectbox.relation.ToOne.d` @type ^`io.objectbox.BoxStore` @kind object;
  #L3ece8e.  call temp:= `isDebugRelations`(v4) @signature `Lio/objectbox/BoxStore;.isDebugRelations:()Z` @kind virtual;
  #L3ece94.  v4:= temp;
  #L3ece96.  v3.`io.objectbox.relation.ToOne.l` @type ^`boolean` := v4 @kind boolean;
  #L3ece9a.  v4:= v3.`io.objectbox.relation.ToOne.d` @type ^`io.objectbox.BoxStore` @kind object;
  #L3ece9e.  v0:= v3.`io.objectbox.relation.ToOne.b` @type ^`io.objectbox.relation.RelationInfo` @kind object;
  #L3ecea2.  v0:= v0.`io.objectbox.relation.RelationInfo.sourceInfo` @type ^`io.objectbox.EntityInfo` @kind object;
  #L3ecea6.  call temp:= `getEntityClass`(v0) @signature `Lio/objectbox/EntityInfo;.getEntityClass:()Ljava/lang/Class;` @kind interface;
  #L3eceac.  v0:= temp @kind object;
  #L3eceae.  call temp:= `boxFor`(v4, v0) @signature `Lio/objectbox/BoxStore;.boxFor:(Ljava/lang/Class;)Lio/objectbox/Box;` @kind virtual;
  #L3eceb4.  v4:= temp @kind object;
  #L3eceb6.  v3.`io.objectbox.relation.ToOne.e` @type ^`io.objectbox.Box` := v4 @kind object;
  #L3eceba.  v4:= v3.`io.objectbox.relation.ToOne.d` @type ^`io.objectbox.BoxStore` @kind object;
  #L3ecebe.  v0:= v3.`io.objectbox.relation.ToOne.b` @type ^`io.objectbox.relation.RelationInfo` @kind object;
  #L3ecec2.  v0:= v0.`io.objectbox.relation.RelationInfo.targetInfo` @type ^`io.objectbox.EntityInfo` @kind object;
  #L3ecec6.  call temp:= `getEntityClass`(v0) @signature `Lio/objectbox/EntityInfo;.getEntityClass:()Ljava/lang/Class;` @kind interface;
  #L3ececc.  v0:= temp @kind object;
  #L3ecece.  call temp:= `boxFor`(v4, v0) @signature `Lio/objectbox/BoxStore;.boxFor:(Ljava/lang/Class;)Lio/objectbox/Box;` @kind virtual;
  #L3eced4.  v4:= temp @kind object;
  #L3eced6.  v3.`io.objectbox.relation.ToOne.f` @type ^`io.objectbox.Box` := v4 @kind object;
  #L3eceda.  goto L3eceea;
  #L3ecedc.  v4:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L3ecede.  v0:= new `java.lang.RuntimeException`;
  #L3ecee2.  call `<init>`(v0, v4) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3ecee8.  throw v0;
  #L3eceea.  return @kind void;
  catch `java.lang.IllegalAccessException` @[L3ece2c..L3ece9a] goto L3ecedc;
}
procedure `java.lang.reflect.Field` `d`(`io.objectbox.relation.ToOne` v3 @kind this) @signature `Lio/objectbox/relation/ToOne;.d:()Ljava/lang/reflect/Field;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3ecc8c.  v0:= v3.`io.objectbox.relation.ToOne.g` @type ^`java.lang.reflect.Field` @kind object;
  #L3ecc90.  if v0 != 0 then goto L3eccc0;
  #L3ecc94.  call temp:= `getInstance`() @signature `Lio/objectbox/internal/ReflectionCache;.getInstance:()Lio/objectbox/internal/ReflectionCache;` @kind static;
  #L3ecc9a.  v0:= temp @kind object;
  #L3ecc9c.  v1:= v3.`io.objectbox.relation.ToOne.a` @type ^`java.lang.Object` @kind object;
  #L3ecca0.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3ecca6.  v1:= temp @kind object;
  #L3ecca8.  v2:= v3.`io.objectbox.relation.ToOne.b` @type ^`io.objectbox.relation.RelationInfo` @kind object;
  #L3eccac.  v2:= v2.`io.objectbox.relation.RelationInfo.targetIdProperty` @type ^`io.objectbox.Property` @kind object;
  #L3eccb0.  v2:= v2.`io.objectbox.Property.name` @type ^`java.lang.String` @kind object;
  #L3eccb4.  call temp:= `getField`(v0, v1, v2) @signature `Lio/objectbox/internal/ReflectionCache;.getField:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/reflect/Field;` @kind virtual;
  #L3eccba.  v0:= temp @kind object;
  #L3eccbc.  v3.`io.objectbox.relation.ToOne.g` @type ^`java.lang.reflect.Field` := v0 @kind object;
  #L3eccc0.  v0:= v3.`io.objectbox.relation.ToOne.g` @type ^`java.lang.reflect.Field` @kind object;
  #L3eccc4.  return v0 @kind object;
}
procedure `void` `e`(`io.objectbox.relation.ToOne` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/objectbox/relation/ToOne;.e:(Ljava/lang/Object;)V` @AccessFlag PRIVATE_SYNTHETIC {
    temp;
    v0;
    v1;

  #L3ecf40.  v0:= v2.`io.objectbox.relation.ToOne.f` @type ^`io.objectbox.Box` @kind object;
  #L3ecf44.  call temp:= `put`(v0, v3) @signature `Lio/objectbox/Box;.put:(Ljava/lang/Object;)J` @kind virtual;
  #L3ecf4a.  v0:= temp @kind wide;
  #L3ecf4c.  call `f`(v2, v3, v0) @signature `Lio/objectbox/relation/ToOne;.f:(Ljava/lang/Object;J)V` @kind direct;
  #L3ecf52.  v3:= v2.`io.objectbox.relation.ToOne.e` @type ^`io.objectbox.Box` @kind object;
  #L3ecf56.  v0:= v2.`io.objectbox.relation.ToOne.a` @type ^`java.lang.Object` @kind object;
  #L3ecf5a.  call temp:= `put`(v3, v0) @signature `Lio/objectbox/Box;.put:(Ljava/lang/Object;)J` @kind virtual;
  #L3ecf60.  return @kind void;
}
procedure `void` `f`(`io.objectbox.relation.ToOne` v3 @kind this, `java.lang.Object` v4 @kind object, `long` v5 ) @signature `Lio/objectbox/relation/ToOne;.f:(Ljava/lang/Object;J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3ed038.  @monitorenter v3
  #L3ed03a.  v0:= v3.`io.objectbox.relation.ToOne.l` @type ^`boolean` @kind boolean;
  #L3ed03e.  if v0 == 0 then goto L3ed08c;
  #L3ed042.  v0:= `@@java.lang.System.out` @type ^`java.io.PrintStream` @kind object;
  #L3ed046.  v1:= new `java.lang.StringBuilder`;
  #L3ed04a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ed050.  v2:= "Setting resolved ToOne target to " @kind object;
  #L3ed054.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ed05a.  if v4 != 0 then goto L3ed064;
  #L3ed05e.  v2:= "null" @kind object;
  #L3ed062.  goto L3ed068;
  #L3ed064.  v2:= "non-null" @kind object;
  #L3ed068.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ed06e.  v2:= " for ID " @kind object;
  #L3ed072.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ed078.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ed07e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ed084.  v1:= temp @kind object;
  #L3ed086.  call `println`(v0, v1) @signature `Ljava/io/PrintStream;.println:(Ljava/lang/String;)V` @kind virtual;
  #L3ed08c.  v3.`io.objectbox.relation.ToOne.j` @type ^`long` := v5 @kind wide;
  #L3ed090.  v3.`io.objectbox.relation.ToOne.h` @type ^`java.lang.Object` := v4 @kind object;
  #L3ed094.  @monitorexit v3
  #L3ed096.  return @kind void;
  #L3ed098.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ed09a.  @monitorexit v3
  #L3ed09c.  throw v4;
  catch `java.lang.Throwable` @[L3ed03a..L3ed094] goto L3ed098;
}
procedure `boolean` `equals`(`io.objectbox.relation.ToOne` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/objectbox/relation/ToOne;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3ecaa8.  v0:= instanceof @variable v7 @type ^`io.objectbox.relation.ToOne` @kind boolean;
  #L3ecaac.  v1:= 0I;
  #L3ecaae.  if v0 != 0 then goto L3ecab4;
  #L3ecab2.  return v1;
  #L3ecab4.  v7:= (`io.objectbox.relation.ToOne`) v7 @kind object;
  #L3ecab8.  v0:= v6.`io.objectbox.relation.ToOne.b` @type ^`io.objectbox.relation.RelationInfo` @kind object;
  #L3ecabc.  v2:= v7.`io.objectbox.relation.ToOne.b` @type ^`io.objectbox.relation.RelationInfo` @kind object;
  #L3ecac0.  if v0 != v2 then goto L3ecade;
  #L3ecac4.  call temp:= `getTargetId`(v6) @signature `Lio/objectbox/relation/ToOne;.getTargetId:()J` @kind virtual;
  #L3ecaca.  v2:= temp @kind wide;
  #L3ecacc.  call temp:= `getTargetId`(v7) @signature `Lio/objectbox/relation/ToOne;.getTargetId:()J` @kind virtual;
  #L3ecad2.  v4:= temp @kind wide;
  #L3ecad4.  v7:= lcmp(v2, v4);
  #L3ecad8.  if v7 != 0 then goto L3ecade;
  #L3ecadc.  v1:= 1I;
  #L3ecade.  return v1;
}
procedure `java.lang.Object` `getCachedTarget`(`io.objectbox.relation.ToOne` v1 @kind this) @signature `Lio/objectbox/relation/ToOne;.getCachedTarget:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ecbf0.  v0:= v1.`io.objectbox.relation.ToOne.h` @type ^`java.lang.Object` @kind object;
  #L3ecbf4.  return v0 @kind object;
}
procedure `java.lang.Object` `getTarget`(`io.objectbox.relation.ToOne` v2 @kind this) @signature `Lio/objectbox/relation/ToOne;.getTarget:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ecc08.  call temp:= `getTargetId`(v2) @signature `Lio/objectbox/relation/ToOne;.getTargetId:()J` @kind virtual;
  #L3ecc0e.  v0:= temp @kind wide;
  #L3ecc10.  call temp:= `getTarget`(v2, v0) @signature `Lio/objectbox/relation/ToOne;.getTarget:(J)Ljava/lang/Object;` @kind virtual;
  #L3ecc16.  v0:= temp @kind object;
  #L3ecc18.  return v0 @kind object;
}
procedure `java.lang.Object` `getTarget`(`io.objectbox.relation.ToOne` v3 @kind this, `long` v4 ) @signature `Lio/objectbox/relation/ToOne;.getTarget:(J)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ecc2c.  @monitorenter v3
  #L3ecc2e.  v0:= v3.`io.objectbox.relation.ToOne.j` @type ^`long` @kind wide;
  #L3ecc32.  v2:= lcmp(v0, v4);
  #L3ecc36.  if v2 != 0 then goto L3ecc42;
  #L3ecc3a.  v4:= v3.`io.objectbox.relation.ToOne.h` @type ^`java.lang.Object` @kind object;
  #L3ecc3e.  @monitorexit v3
  #L3ecc40.  return v4 @kind object;
  #L3ecc42.  @monitorexit v3
  #L3ecc44.  v0:= 0I;
  #L3ecc46.  call `c`(v3, v0) @signature `Lio/objectbox/relation/ToOne;.c:(Ljava/lang/Object;)V` @kind direct;
  #L3ecc4c.  v0:= v3.`io.objectbox.relation.ToOne.f` @type ^`io.objectbox.Box` @kind object;
  #L3ecc50.  call temp:= `get`(v0, v4) @signature `Lio/objectbox/Box;.get:(J)Ljava/lang/Object;` @kind virtual;
  #L3ecc56.  v0:= temp @kind object;
  #L3ecc58.  call `f`(v3, v0, v4) @signature `Lio/objectbox/relation/ToOne;.f:(Ljava/lang/Object;J)V` @kind direct;
  #L3ecc5e.  return v0 @kind object;
  #L3ecc60.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ecc62.  @monitorexit v3
  #L3ecc64.  throw v4;
  catch `java.lang.Throwable` @[L3ecc2e..L3ecc44] goto L3ecc60;
  catch `java.lang.Throwable` @[L3ecc62..L3ecc64] goto L3ecc60;
}
procedure `long` `getTargetId`(`io.objectbox.relation.ToOne` v4 @kind this) @signature `Lio/objectbox/relation/ToOne;.getTargetId:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3eccd8.  v0:= v4.`io.objectbox.relation.ToOne.c` @type ^`boolean` @kind boolean;
  #L3eccdc.  if v0 == 0 then goto L3ecce6;
  #L3ecce0.  v0:= v4.`io.objectbox.relation.ToOne.i` @type ^`long` @kind wide;
  #L3ecce4.  return v0 @kind wide;
  #L3ecce6.  call temp:= `d`(v4) @signature `Lio/objectbox/relation/ToOne;.d:()Ljava/lang/reflect/Field;` @kind direct;
  #L3eccec.  v0:= temp @kind object;
  #L3eccee.  v1:= v4.`io.objectbox.relation.ToOne.a` @type ^`java.lang.Object` @kind object;
  #L3eccf2.  call temp:= `get`(v0, v1) @signature `Ljava/lang/reflect/Field;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3eccf8.  v1:= temp @kind object;
  #L3eccfa.  v1:= (`java.lang.Long`) v1 @kind object;
  #L3eccfe.  if v1 == 0 then goto L3ecd0c;
  #L3ecd02.  call temp:= `longValue`(v1) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L3ecd08.  v0:= temp @kind wide;
  #L3ecd0a.  goto L3ecd10;
  #L3ecd0c.  v0:= 0L;
  #L3ecd10.  return v0 @kind wide;
  #L3ecd12.  v1:= new `java.lang.RuntimeException`;
  #L3ecd16.  v2:= new `java.lang.StringBuilder`;
  #L3ecd1a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ecd20.  v3:= "Could not access field " @kind object;
  #L3ecd24.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ecd2a.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ecd30.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ecd36.  v0:= temp @kind object;
  #L3ecd38.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ecd3e.  throw v1;
  catch `java.lang.IllegalAccessException` @[L3eccee..L3ecd0a] goto L3ecd12;
}
procedure `int` `hashCode`(`io.objectbox.relation.ToOne` v4 @kind this) @signature `Lio/objectbox/relation/ToOne;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ecbc8.  call temp:= `getTargetId`(v4) @signature `Lio/objectbox/relation/ToOne;.getTargetId:()J` @kind virtual;
  #L3ecbce.  v0:= temp @kind wide;
  #L3ecbd0.  v2:= 32I;
  #L3ecbd4.  v2:= v0 ^>> v2 @kind long;
  #L3ecbd8.  v0:= v0 ^~ v2 @kind long;
  #L3ecbda.  v1:= (`int`) v0 @kind l2i;
  #L3ecbdc.  return v1;
}
procedure `void` `internalPutTarget`(`io.objectbox.relation.ToOne` v2 @kind this, `io.objectbox.Cursor` v3 @kind object) @signature `Lio/objectbox/relation/ToOne;.internalPutTarget:(Lio/objectbox/Cursor;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ecf0c.  v0:= 0I;
  #L3ecf0e.  v2.`io.objectbox.relation.ToOne.k` @type ^`boolean` := v0 @kind boolean;
  #L3ecf12.  v0:= v2.`io.objectbox.relation.ToOne.h` @type ^`java.lang.Object` @kind object;
  #L3ecf16.  call temp:= `put`(v3, v0) @signature `Lio/objectbox/Cursor;.put:(Ljava/lang/Object;)J` @kind virtual;
  #L3ecf1c.  v0:= temp @kind wide;
  #L3ecf1e.  call `setTargetId`(v2, v0) @signature `Lio/objectbox/relation/ToOne;.setTargetId:(J)V` @kind virtual;
  #L3ecf24.  v3:= v2.`io.objectbox.relation.ToOne.h` @type ^`java.lang.Object` @kind object;
  #L3ecf28.  call `f`(v2, v3, v0) @signature `Lio/objectbox/relation/ToOne;.f:(Ljava/lang/Object;J)V` @kind direct;
  #L3ecf2e.  return @kind void;
}
procedure `boolean` `internalRequiresPutTarget`(`io.objectbox.relation.ToOne` v5 @kind this) @signature `Lio/objectbox/relation/ToOne;.internalRequiresPutTarget:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3ecaf0.  v0:= v5.`io.objectbox.relation.ToOne.k` @type ^`boolean` @kind boolean;
  #L3ecaf4.  if v0 == 0 then goto L3ecb18;
  #L3ecaf8.  v0:= v5.`io.objectbox.relation.ToOne.h` @type ^`java.lang.Object` @kind object;
  #L3ecafc.  if v0 == 0 then goto L3ecb18;
  #L3ecb00.  call temp:= `getTargetId`(v5) @signature `Lio/objectbox/relation/ToOne;.getTargetId:()J` @kind virtual;
  #L3ecb06.  v0:= temp @kind wide;
  #L3ecb08.  v2:= 0L;
  #L3ecb0c.  v4:= lcmp(v0, v2);
  #L3ecb10.  if v4 != 0 then goto L3ecb18;
  #L3ecb14.  v0:= 1I;
  #L3ecb16.  goto L3ecb1a;
  #L3ecb18.  v0:= 0I;
  #L3ecb1a.  return v0;
}
procedure `boolean` `isNull`(`io.objectbox.relation.ToOne` v5 @kind this) @signature `Lio/objectbox/relation/ToOne;.isNull:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3ecb2c.  call temp:= `getTargetId`(v5) @signature `Lio/objectbox/relation/ToOne;.getTargetId:()J` @kind virtual;
  #L3ecb32.  v0:= temp @kind wide;
  #L3ecb34.  v2:= 0L;
  #L3ecb38.  v4:= lcmp(v0, v2);
  #L3ecb3c.  if v4 != 0 then goto L3ecb4c;
  #L3ecb40.  v0:= v5.`io.objectbox.relation.ToOne.h` @type ^`java.lang.Object` @kind object;
  #L3ecb44.  if v0 != 0 then goto L3ecb4c;
  #L3ecb48.  v0:= 1I;
  #L3ecb4a.  goto L3ecb4e;
  #L3ecb4c.  v0:= 0I;
  #L3ecb4e.  return v0;
}
procedure `boolean` `isResolved`(`io.objectbox.relation.ToOne` v5 @kind this) @signature `Lio/objectbox/relation/ToOne;.isResolved:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3ecb60.  v0:= v5.`io.objectbox.relation.ToOne.j` @type ^`long` @kind wide;
  #L3ecb64.  call temp:= `getTargetId`(v5) @signature `Lio/objectbox/relation/ToOne;.getTargetId:()J` @kind virtual;
  #L3ecb6a.  v2:= temp @kind wide;
  #L3ecb6c.  v4:= lcmp(v0, v2);
  #L3ecb70.  if v4 != 0 then goto L3ecb78;
  #L3ecb74.  v0:= 1I;
  #L3ecb76.  goto L3ecb7a;
  #L3ecb78.  v0:= 0I;
  #L3ecb7a.  return v0;
}
procedure `boolean` `isResolvedAndNotNull`(`io.objectbox.relation.ToOne` v5 @kind this) @signature `Lio/objectbox/relation/ToOne;.isResolvedAndNotNull:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3ecb8c.  v0:= v5.`io.objectbox.relation.ToOne.j` @type ^`long` @kind wide;
  #L3ecb90.  v2:= 0L;
  #L3ecb94.  v4:= lcmp(v0, v2);
  #L3ecb98.  if v4 == 0 then goto L3ecbb4;
  #L3ecb9c.  v0:= v5.`io.objectbox.relation.ToOne.j` @type ^`long` @kind wide;
  #L3ecba0.  call temp:= `getTargetId`(v5) @signature `Lio/objectbox/relation/ToOne;.getTargetId:()J` @kind virtual;
  #L3ecba6.  v2:= temp @kind wide;
  #L3ecba8.  v4:= lcmp(v0, v2);
  #L3ecbac.  if v4 != 0 then goto L3ecbb4;
  #L3ecbb0.  v0:= 1I;
  #L3ecbb2.  goto L3ecbb6;
  #L3ecbb4.  v0:= 0I;
  #L3ecbb6.  return v0;
}
procedure `void` `setAndPutTarget`(`io.objectbox.relation.ToOne` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/objectbox/relation/ToOne;.setAndPutTarget:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3ecf74.  call `c`(v5, v6) @signature `Lio/objectbox/relation/ToOne;.c:(Ljava/lang/Object;)V` @kind direct;
  #L3ecf7a.  v0:= 0L;
  #L3ecf7e.  if v6 == 0 then goto L3ecfba;
  #L3ecf82.  v2:= v5.`io.objectbox.relation.ToOne.f` @type ^`io.objectbox.Box` @kind object;
  #L3ecf86.  call temp:= `getId`(v2, v6) @signature `Lio/objectbox/Box;.getId:(Ljava/lang/Object;)J` @kind virtual;
  #L3ecf8c.  v2:= temp @kind wide;
  #L3ecf8e.  v4:= lcmp(v2, v0);
  #L3ecf92.  if v4 != 0 then goto L3ecf9e;
  #L3ecf96.  call `setAndPutTargetAlways`(v5, v6) @signature `Lio/objectbox/relation/ToOne;.setAndPutTargetAlways:(Ljava/lang/Object;)V` @kind virtual;
  #L3ecf9c.  goto L3ecfd4;
  #L3ecf9e.  call `setTargetId`(v5, v2) @signature `Lio/objectbox/relation/ToOne;.setTargetId:(J)V` @kind virtual;
  #L3ecfa4.  call `f`(v5, v6, v2) @signature `Lio/objectbox/relation/ToOne;.f:(Ljava/lang/Object;J)V` @kind direct;
  #L3ecfaa.  v6:= v5.`io.objectbox.relation.ToOne.e` @type ^`io.objectbox.Box` @kind object;
  #L3ecfae.  v0:= v5.`io.objectbox.relation.ToOne.a` @type ^`java.lang.Object` @kind object;
  #L3ecfb2.  call temp:= `put`(v6, v0) @signature `Lio/objectbox/Box;.put:(Ljava/lang/Object;)J` @kind virtual;
  #L3ecfb8.  goto L3ecfd4;
  #L3ecfba.  call `setTargetId`(v5, v0) @signature `Lio/objectbox/relation/ToOne;.setTargetId:(J)V` @kind virtual;
  #L3ecfc0.  call `b`(v5) @signature `Lio/objectbox/relation/ToOne;.b:()V` @kind direct;
  #L3ecfc6.  v6:= v5.`io.objectbox.relation.ToOne.e` @type ^`io.objectbox.Box` @kind object;
  #L3ecfca.  v0:= v5.`io.objectbox.relation.ToOne.a` @type ^`java.lang.Object` @kind object;
  #L3ecfce.  call temp:= `put`(v6, v0) @signature `Lio/objectbox/Box;.put:(Ljava/lang/Object;)J` @kind virtual;
  #L3ecfd4.  return @kind void;
}
procedure `void` `setAndPutTargetAlways`(`io.objectbox.relation.ToOne` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/objectbox/relation/ToOne;.setAndPutTargetAlways:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ecfe8.  call `c`(v2, v3) @signature `Lio/objectbox/relation/ToOne;.c:(Ljava/lang/Object;)V` @kind direct;
  #L3ecfee.  if v3 == 0 then goto L3ed008;
  #L3ecff2.  v0:= v2.`io.objectbox.relation.ToOne.d` @type ^`io.objectbox.BoxStore` @kind object;
  #L3ecff6.  v1:= new `q0.b`;
  #L3ecffa.  call `<init>`(v1, v2, v3) @signature `Lq0/b;.<init>:(Lio/objectbox/relation/ToOne;Ljava/lang/Object;)V` @kind direct;
  #L3ed000.  call `runInTx`(v0, v1) @signature `Lio/objectbox/BoxStore;.runInTx:(Ljava/lang/Runnable;)V` @kind virtual;
  #L3ed006.  goto L3ed026;
  #L3ed008.  v0:= 0L;
  #L3ed00c.  call `setTargetId`(v2, v0) @signature `Lio/objectbox/relation/ToOne;.setTargetId:(J)V` @kind virtual;
  #L3ed012.  call `b`(v2) @signature `Lio/objectbox/relation/ToOne;.b:()V` @kind direct;
  #L3ed018.  v3:= v2.`io.objectbox.relation.ToOne.e` @type ^`io.objectbox.Box` @kind object;
  #L3ed01c.  v0:= v2.`io.objectbox.relation.ToOne.a` @type ^`java.lang.Object` @kind object;
  #L3ed020.  call temp:= `put`(v3, v0) @signature `Lio/objectbox/Box;.put:(Ljava/lang/Object;)J` @kind virtual;
  #L3ed026.  return @kind void;
}
procedure `void` `setTarget`(`io.objectbox.relation.ToOne` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/objectbox/relation/ToOne;.setTarget:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3ed0bc.  v0:= 0L;
  #L3ed0c0.  if v6 == 0 then goto L3ed0fc;
  #L3ed0c4.  v2:= v5.`io.objectbox.relation.ToOne.b` @type ^`io.objectbox.relation.RelationInfo` @kind object;
  #L3ed0c8.  v2:= v2.`io.objectbox.relation.RelationInfo.targetInfo` @type ^`io.objectbox.EntityInfo` @kind object;
  #L3ed0cc.  call temp:= `getIdGetter`(v2) @signature `Lio/objectbox/EntityInfo;.getIdGetter:()Lio/objectbox/internal/IdGetter;` @kind interface;
  #L3ed0d2.  v2:= temp @kind object;
  #L3ed0d4.  call temp:= `getId`(v2, v6) @signature `Lio/objectbox/internal/IdGetter;.getId:(Ljava/lang/Object;)J` @kind interface;
  #L3ed0da.  v2:= temp @kind wide;
  #L3ed0dc.  v4:= lcmp(v2, v0);
  #L3ed0e0.  if v4 != 0 then goto L3ed0e8;
  #L3ed0e4.  v0:= 1I;
  #L3ed0e6.  goto L3ed0ea;
  #L3ed0e8.  v0:= 0I;
  #L3ed0ea.  v5.`io.objectbox.relation.ToOne.k` @type ^`boolean` := v0 @kind boolean;
  #L3ed0ee.  call `setTargetId`(v5, v2) @signature `Lio/objectbox/relation/ToOne;.setTargetId:(J)V` @kind virtual;
  #L3ed0f4.  call `f`(v5, v6, v2) @signature `Lio/objectbox/relation/ToOne;.f:(Ljava/lang/Object;J)V` @kind direct;
  #L3ed0fa.  goto L3ed108;
  #L3ed0fc.  call `setTargetId`(v5, v0) @signature `Lio/objectbox/relation/ToOne;.setTargetId:(J)V` @kind virtual;
  #L3ed102.  call `b`(v5) @signature `Lio/objectbox/relation/ToOne;.b:()V` @kind direct;
  #L3ed108.  return @kind void;
}
procedure `void` `setTargetId`(`io.objectbox.relation.ToOne` v3 @kind this, `long` v4 ) @signature `Lio/objectbox/relation/ToOne;.setTargetId:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ed11c.  v0:= v3.`io.objectbox.relation.ToOne.c` @type ^`boolean` @kind boolean;
  #L3ed120.  if v0 == 0 then goto L3ed12a;
  #L3ed124.  v3.`io.objectbox.relation.ToOne.i` @type ^`long` := v4 @kind wide;
  #L3ed128.  goto L3ed144;
  #L3ed12a.  call temp:= `d`(v3) @signature `Lio/objectbox/relation/ToOne;.d:()Ljava/lang/reflect/Field;` @kind direct;
  #L3ed130.  v0:= temp @kind object;
  #L3ed132.  v1:= v3.`io.objectbox.relation.ToOne.a` @type ^`java.lang.Object` @kind object;
  #L3ed136.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L3ed13c.  v2:= temp @kind object;
  #L3ed13e.  call `set`(v0, v1, v2) @signature `Ljava/lang/reflect/Field;.set:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L3ed144.  v0:= 0L;
  #L3ed148.  v2:= lcmp(v4, v0);
  #L3ed14c.  if v2 == 0 then goto L3ed156;
  #L3ed150.  v4:= 0I;
  #L3ed152.  v3.`io.objectbox.relation.ToOne.k` @type ^`boolean` := v4 @kind boolean;
  #L3ed156.  return @kind void;
  #L3ed158.  v4:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L3ed15a.  v5:= new `java.lang.RuntimeException`;
  #L3ed15e.  v0:= "Could not update to-one ID in entity" @kind object;
  #L3ed162.  call `<init>`(v5, v0, v4) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L3ed168.  throw v5;
  catch `java.lang.IllegalAccessException` @[L3ed12a..L3ed144] goto L3ed158;
}
