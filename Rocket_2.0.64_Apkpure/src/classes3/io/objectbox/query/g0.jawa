record `io.objectbox.query.g0` @kind class @AccessFlag  extends `io.objectbox.reactive.DataPublisher` @kind interface {
  `io.objectbox.query.Query` `io.objectbox.query.g0.a` @AccessFlag PRIVATE_FINAL;
  `io.objectbox.Box` `io.objectbox.query.g0.b` @AccessFlag PRIVATE_FINAL;
  `java.util.Set` `io.objectbox.query.g0.c` @AccessFlag PRIVATE_FINAL;
  `io.objectbox.reactive.DataObserver` `io.objectbox.query.g0.d` @AccessFlag PRIVATE;
  `io.objectbox.reactive.DataSubscription` `io.objectbox.query.g0.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`io.objectbox.query.g0` v1 @kind this, `io.objectbox.query.Query` v2 @kind object, `io.objectbox.Box` v3 @kind object) @signature `Lio/objectbox/query/g0;.<init>:(Lio/objectbox/query/Query;Lio/objectbox/Box;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3e9a38.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e9a3e.  v0:= new `java.util.concurrent.CopyOnWriteArraySet`;
  #L3e9a42.  call `<init>`(v0) @signature `Ljava/util/concurrent/CopyOnWriteArraySet;.<init>:()V` @kind direct;
  #L3e9a48.  v1.`io.objectbox.query.g0.c` @type ^`java.util.Set` := v0 @kind object;
  #L3e9a4c.  v1.`io.objectbox.query.g0.a` @type ^`io.objectbox.query.Query` := v2 @kind object;
  #L3e9a50.  v1.`io.objectbox.query.g0.b` @type ^`io.objectbox.Box` := v3 @kind object;
  #L3e9a54.  return @kind void;
}
procedure `void` `a`(`io.objectbox.query.g0` v0 @kind object, `io.objectbox.reactive.DataObserver` v1 @kind object) @signature `Lio/objectbox/query/g0;.a:(Lio/objectbox/query/g0;Lio/objectbox/reactive/DataObserver;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L3e99f0.  call `e`(v0, v1) @signature `Lio/objectbox/query/g0;.e:(Lio/objectbox/reactive/DataObserver;)V` @kind direct;
  #L3e99f6.  return @kind void;
}
procedure `void` `b`(`io.objectbox.query.g0` v0 @kind object) @signature `Lio/objectbox/query/g0;.b:(Lio/objectbox/query/g0;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L3e9a08.  call `d`(v0) @signature `Lio/objectbox/query/g0;.d:()V` @kind direct;
  #L3e9a0e.  return @kind void;
}
procedure `void` `c`(`io.objectbox.query.g0` v0 @kind object, `java.lang.Class` v1 @kind object) @signature `Lio/objectbox/query/g0;.c:(Lio/objectbox/query/g0;Ljava/lang/Class;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L3e9a20.  call `f`(v0, v1) @signature `Lio/objectbox/query/g0;.f:(Ljava/lang/Class;)V` @kind direct;
  #L3e9a26.  return @kind void;
}
procedure `void` `d`(`io.objectbox.query.g0` v3 @kind this) @signature `Lio/objectbox/query/g0;.d:()V` @AccessFlag PRIVATE_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;

  #L3e9a68.  v0:= v3.`io.objectbox.query.g0.a` @type ^`io.objectbox.query.Query` @kind object;
  #L3e9a6c.  call temp:= `find`(v0) @signature `Lio/objectbox/query/Query;.find:()Ljava/util/List;` @kind virtual;
  #L3e9a72.  v0:= temp @kind object;
  #L3e9a74.  v1:= v3.`io.objectbox.query.g0.c` @type ^`java.util.Set` @kind object;
  #L3e9a78.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3e9a7e.  v1:= temp @kind object;
  #L3e9a80.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3e9a86.  v2:= temp;
  #L3e9a88.  if v2 == 0 then goto L3e9aa0;
  #L3e9a8c.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3e9a92.  v2:= temp @kind object;
  #L3e9a94.  v2:= (`io.objectbox.reactive.DataObserver`) v2 @kind object;
  #L3e9a98.  call `onData`(v2, v0) @signature `Lio/objectbox/reactive/DataObserver;.onData:(Ljava/lang/Object;)V` @kind interface;
  #L3e9a9e.  goto L3e9a80;
  #L3e9aa0.  return @kind void;
}
procedure `void` `e`(`io.objectbox.query.g0` v1 @kind this, `io.objectbox.reactive.DataObserver` v2 @kind object) @signature `Lio/objectbox/query/g0;.e:(Lio/objectbox/reactive/DataObserver;)V` @AccessFlag PRIVATE_SYNTHETIC {
    temp;
    v0;

  #L3e9ab4.  v0:= v1.`io.objectbox.query.g0.a` @type ^`io.objectbox.query.Query` @kind object;
  #L3e9ab8.  call temp:= `find`(v0) @signature `Lio/objectbox/query/Query;.find:()Ljava/util/List;` @kind virtual;
  #L3e9abe.  v0:= temp @kind object;
  #L3e9ac0.  call `onData`(v2, v0) @signature `Lio/objectbox/reactive/DataObserver;.onData:(Ljava/lang/Object;)V` @kind interface;
  #L3e9ac6.  return @kind void;
}
procedure `void` `f`(`io.objectbox.query.g0` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lio/objectbox/query/g0;.f:(Ljava/lang/Class;)V` @AccessFlag PRIVATE_SYNTHETIC {
    temp;

  #L3e9ad8.  call `g`(v0) @signature `Lio/objectbox/query/g0;.g:()V` @kind virtual;
  #L3e9ade.  return @kind void;
}
procedure `void` `g`(`io.objectbox.query.g0` v2 @kind this) @signature `Lio/objectbox/query/g0;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3e9af0.  v0:= v2.`io.objectbox.query.g0.b` @type ^`io.objectbox.Box` @kind object;
  #L3e9af4.  call temp:= `getStore`(v0) @signature `Lio/objectbox/Box;.getStore:()Lio/objectbox/BoxStore;` @kind virtual;
  #L3e9afa.  v0:= temp @kind object;
  #L3e9afc.  v1:= new `io.objectbox.query.e0`;
  #L3e9b00.  call `<init>`(v1, v2) @signature `Lio/objectbox/query/e0;.<init>:(Lio/objectbox/query/g0;)V` @kind direct;
  #L3e9b06.  call temp:= `internalScheduleThread`(v0, v1) @signature `Lio/objectbox/BoxStore;.internalScheduleThread:(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;` @kind virtual;
  #L3e9b0c.  return @kind void;
}
procedure `void` `publishSingle`(`io.objectbox.query.g0` v1 @kind this, `io.objectbox.reactive.DataObserver` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lio/objectbox/query/g0;.publishSingle:(Lio/objectbox/reactive/DataObserver;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e9b20.  v3:= v1.`io.objectbox.query.g0.b` @type ^`io.objectbox.Box` @kind object;
  #L3e9b24.  call temp:= `getStore`(v3) @signature `Lio/objectbox/Box;.getStore:()Lio/objectbox/BoxStore;` @kind virtual;
  #L3e9b2a.  v3:= temp @kind object;
  #L3e9b2c.  v0:= new `io.objectbox.query.f0`;
  #L3e9b30.  call `<init>`(v0, v1, v2) @signature `Lio/objectbox/query/f0;.<init>:(Lio/objectbox/query/g0;Lio/objectbox/reactive/DataObserver;)V` @kind direct;
  #L3e9b36.  call temp:= `internalScheduleThread`(v3, v0) @signature `Lio/objectbox/BoxStore;.internalScheduleThread:(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;` @kind virtual;
  #L3e9b3c.  return @kind void;
}
procedure `void` `subscribe`(`io.objectbox.query.g0` v1 @kind this, `io.objectbox.reactive.DataObserver` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lio/objectbox/query/g0;.subscribe:(Lio/objectbox/reactive/DataObserver;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e9b50.  @monitorenter v1
  #L3e9b52.  v3:= v1.`io.objectbox.query.g0.b` @type ^`io.objectbox.Box` @kind object;
  #L3e9b56.  call temp:= `getStore`(v3) @signature `Lio/objectbox/Box;.getStore:()Lio/objectbox/BoxStore;` @kind virtual;
  #L3e9b5c.  v3:= temp @kind object;
  #L3e9b5e.  v0:= v1.`io.objectbox.query.g0.d` @type ^`io.objectbox.reactive.DataObserver` @kind object;
  #L3e9b62.  if v0 != 0 then goto L3e9b74;
  #L3e9b66.  v0:= new `io.objectbox.query.d0`;
  #L3e9b6a.  call `<init>`(v0, v1) @signature `Lio/objectbox/query/d0;.<init>:(Lio/objectbox/query/g0;)V` @kind direct;
  #L3e9b70.  v1.`io.objectbox.query.g0.d` @type ^`io.objectbox.reactive.DataObserver` := v0 @kind object;
  #L3e9b74.  v0:= v1.`io.objectbox.query.g0.c` @type ^`java.util.Set` @kind object;
  #L3e9b78.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Set;.isEmpty:()Z` @kind interface;
  #L3e9b7e.  v0:= temp;
  #L3e9b80.  if v0 == 0 then goto L3e9bd2;
  #L3e9b84.  v0:= v1.`io.objectbox.query.g0.e` @type ^`io.objectbox.reactive.DataSubscription` @kind object;
  #L3e9b88.  if v0 != 0 then goto L3e9bc2;
  #L3e9b8c.  v0:= v1.`io.objectbox.query.g0.b` @type ^`io.objectbox.Box` @kind object;
  #L3e9b90.  call temp:= `getEntityClass`(v0) @signature `Lio/objectbox/Box;.getEntityClass:()Ljava/lang/Class;` @kind virtual;
  #L3e9b96.  v0:= temp @kind object;
  #L3e9b98.  call temp:= `subscribe`(v3, v0) @signature `Lio/objectbox/BoxStore;.subscribe:(Ljava/lang/Class;)Lio/objectbox/reactive/SubscriptionBuilder;` @kind virtual;
  #L3e9b9e.  v3:= temp @kind object;
  #L3e9ba0.  call temp:= `weak`(v3) @signature `Lio/objectbox/reactive/SubscriptionBuilder;.weak:()Lio/objectbox/reactive/SubscriptionBuilder;` @kind virtual;
  #L3e9ba6.  v3:= temp @kind object;
  #L3e9ba8.  call temp:= `onlyChanges`(v3) @signature `Lio/objectbox/reactive/SubscriptionBuilder;.onlyChanges:()Lio/objectbox/reactive/SubscriptionBuilder;` @kind virtual;
  #L3e9bae.  v3:= temp @kind object;
  #L3e9bb0.  v0:= v1.`io.objectbox.query.g0.d` @type ^`io.objectbox.reactive.DataObserver` @kind object;
  #L3e9bb4.  call temp:= `observer`(v3, v0) @signature `Lio/objectbox/reactive/SubscriptionBuilder;.observer:(Lio/objectbox/reactive/DataObserver;)Lio/objectbox/reactive/DataSubscription;` @kind virtual;
  #L3e9bba.  v3:= temp @kind object;
  #L3e9bbc.  v1.`io.objectbox.query.g0.e` @type ^`io.objectbox.reactive.DataSubscription` := v3 @kind object;
  #L3e9bc0.  goto L3e9bd2;
  #L3e9bc2.  v2:= new `java.lang.IllegalStateException`;
  #L3e9bc6.  v3:= "Existing subscription found" @kind object;
  #L3e9bca.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e9bd0.  throw v2;
  #L3e9bd2.  v3:= v1.`io.objectbox.query.g0.c` @type ^`java.util.Set` @kind object;
  #L3e9bd6.  call temp:= `add`(v3, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3e9bdc.  @monitorexit v1
  #L3e9bde.  return @kind void;
  #L3e9be0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3e9be2.  @monitorexit v1
  #L3e9be4.  throw v2;
  catch `java.lang.Throwable` @[L3e9b52..L3e9bdc] goto L3e9be0;
}
procedure `void` `unsubscribe`(`io.objectbox.query.g0` v0 @kind this, `io.objectbox.reactive.DataObserver` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/objectbox/query/g0;.unsubscribe:(Lio/objectbox/reactive/DataObserver;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L3e9c04.  @monitorenter v0
  #L3e9c06.  v2:= v0.`io.objectbox.query.g0.c` @type ^`java.util.Set` @kind object;
  #L3e9c0a.  call `removeObserverFromCopyOnWriteSet`(v2, v1) @signature `Lio/objectbox/reactive/DataPublisherUtils;.removeObserverFromCopyOnWriteSet:(Ljava/util/Set;Lio/objectbox/reactive/DataObserver;)V` @kind static;
  #L3e9c10.  v1:= v0.`io.objectbox.query.g0.c` @type ^`java.util.Set` @kind object;
  #L3e9c14.  call temp:= `isEmpty`(v1) @signature `Ljava/util/Set;.isEmpty:()Z` @kind interface;
  #L3e9c1a.  v1:= temp;
  #L3e9c1c.  if v1 == 0 then goto L3e9c30;
  #L3e9c20.  v1:= v0.`io.objectbox.query.g0.e` @type ^`io.objectbox.reactive.DataSubscription` @kind object;
  #L3e9c24.  call `cancel`(v1) @signature `Lio/objectbox/reactive/DataSubscription;.cancel:()V` @kind interface;
  #L3e9c2a.  v1:= 0I;
  #L3e9c2c.  v0.`io.objectbox.query.g0.e` @type ^`io.objectbox.reactive.DataSubscription` := v1 @kind object;
  #L3e9c30.  @monitorexit v0
  #L3e9c32.  return @kind void;
  #L3e9c34.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3e9c36.  @monitorexit v0
  #L3e9c38.  throw v1;
  catch `java.lang.Throwable` @[L3e9c06..L3e9c30] goto L3e9c34;
}
