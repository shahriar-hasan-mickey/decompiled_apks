record `io.reactivex.subscribers.DisposableSubscriber` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subscribers.DisposableSubscriber.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.subscribers.DisposableSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4f98f4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4f98fa.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f98fe.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f9904.  v1.`io.reactivex.subscribers.DisposableSubscriber.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4f9908.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.subscribers.DisposableSubscriber` v0 @kind this) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.cancel:()V` @AccessFlag PROTECTED_FINAL {
    temp;

  #L4f991c.  call `dispose`(v0) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.dispose:()V` @kind virtual;
  #L4f9922.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.subscribers.DisposableSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4f9934.  v0:= v1.`io.reactivex.subscribers.DisposableSubscriber.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f9938.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4f993e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.subscribers.DisposableSubscriber` v2 @kind this) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4f98c8.  v0:= v2.`io.reactivex.subscribers.DisposableSubscriber.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f98cc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f98d2.  v0:= temp @kind object;
  #L4f98d4.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4f98d8.  if v0 != v1 then goto L4f98e0;
  #L4f98dc.  v0:= 1I;
  #L4f98de.  goto L4f98e2;
  #L4f98e0.  v0:= 0I;
  #L4f98e2.  return v0;
}
procedure `void` `onStart`(`io.reactivex.subscribers.DisposableSubscriber` v3 @kind this) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.onStart:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L4f9950.  v0:= v3.`io.reactivex.subscribers.DisposableSubscriber.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f9954.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f995a.  v0:= temp @kind object;
  #L4f995c.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4f9960.  v1:= 9223372036854775807L;
  #L4f996a.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4f9970.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subscribers.DisposableSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4f9984.  v0:= v2.`io.reactivex.subscribers.DisposableSubscriber.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f9988.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4f998e.  v1:= temp @kind object;
  #L4f9990.  call temp:= `setOnce`(v0, v3, v1) @signature `Lio/reactivex/internal/util/EndConsumerHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;Ljava/lang/Class;)Z` @kind static;
  #L4f9996.  v3:= temp;
  #L4f9998.  if v3 == 0 then goto L4f99a2;
  #L4f999c.  call `onStart`(v2) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.onStart:()V` @kind virtual;
  #L4f99a2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.subscribers.DisposableSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.request:(J)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L4f99b4.  v0:= v1.`io.reactivex.subscribers.DisposableSubscriber.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f99b8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f99be.  v0:= temp @kind object;
  #L4f99c0.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4f99c4.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4f99ca.  return @kind void;
}
