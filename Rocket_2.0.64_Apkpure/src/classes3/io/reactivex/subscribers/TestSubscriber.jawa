record `io.reactivex.subscribers.TestSubscriber` @kind class @AccessFlag PUBLIC extends `io.reactivex.observers.BaseTestConsumer` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.subscribers.TestSubscriber.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `io.reactivex.subscribers.TestSubscriber.b` @AccessFlag PRIVATE_VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subscribers.TestSubscriber.c` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.subscribers.TestSubscriber.d` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.internal.fuseable.QueueSubscription` `io.reactivex.subscribers.TestSubscriber.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`io.reactivex.subscribers.TestSubscriber` v3 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L4fa5cc.  v0:= `@@io.reactivex.subscribers.TestSubscriber$a.a` @type ^`io.reactivex.subscribers.TestSubscriber$a` @kind object;
  #L4fa5d0.  v1:= 9223372036854775807L;
  #L4fa5da.  call `<init>`(v3, v0, v1) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @kind direct;
  #L4fa5e0.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subscribers.TestSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4fa5f4.  v0:= `@@io.reactivex.subscribers.TestSubscriber$a.a` @type ^`io.reactivex.subscribers.TestSubscriber$a` @kind object;
  #L4fa5f8.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @kind direct;
  #L4fa5fe.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subscribers.TestSubscriber` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4fa610.  v0:= 9223372036854775807L;
  #L4fa61a.  call `<init>`(v2, v3, v0) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @kind direct;
  #L4fa620.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subscribers.TestSubscriber` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object, `long` v5 ) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L4fa634.  call `<init>`(v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.<init>:()V` @kind direct;
  #L4fa63a.  v0:= 0L;
  #L4fa63e.  v2:= lcmp(v5, v0);
  #L4fa642.  if v2 < 0 then goto L4fa668;
  #L4fa646.  v3.`io.reactivex.subscribers.TestSubscriber.a` @type ^`org.reactivestreams.Subscriber` := v4 @kind object;
  #L4fa64a.  v4:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4fa64e.  call `<init>`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4fa654.  v3.`io.reactivex.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v4 @kind object;
  #L4fa658.  v4:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4fa65c.  call `<init>`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:(J)V` @kind direct;
  #L4fa662.  v3.`io.reactivex.subscribers.TestSubscriber.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v4 @kind object;
  #L4fa666.  return @kind void;
  #L4fa668.  v4:= new `java.lang.IllegalArgumentException`;
  #L4fa66c.  v5:= "Negative initial request not allowed" @kind object;
  #L4fa670.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4fa676.  throw v4;
}
procedure `io.reactivex.subscribers.TestSubscriber` `create`() @signature `Lio/reactivex/subscribers/TestSubscriber;.create:()Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4fa560.  v0:= new `io.reactivex.subscribers.TestSubscriber`;
  #L4fa564.  call `<init>`(v0) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:()V` @kind direct;
  #L4fa56a.  return v0 @kind object;
}
procedure `io.reactivex.subscribers.TestSubscriber` `create`(`long` v1 ) @signature `Lio/reactivex/subscribers/TestSubscriber;.create:(J)Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4fa57c.  v0:= new `io.reactivex.subscribers.TestSubscriber`;
  #L4fa580.  call `<init>`(v0, v1) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(J)V` @kind direct;
  #L4fa586.  return v0 @kind object;
}
procedure `io.reactivex.subscribers.TestSubscriber` `create`(`org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/subscribers/TestSubscriber;.create:(Lorg/reactivestreams/Subscriber;)Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4fa598.  v0:= new `io.reactivex.subscribers.TestSubscriber`;
  #L4fa59c.  call `<init>`(v0, v1) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4fa5a2.  return v0 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNotSubscribed`(`io.reactivex.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.assertNotSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L4fa478.  call temp:= `assertNotSubscribed`(v1) @signature `Lio/reactivex/subscribers/TestSubscriber;.assertNotSubscribed:()Lio/reactivex/subscribers/TestSubscriber;` @kind virtual;
  #L4fa47e.  v0:= temp @kind object;
  #L4fa480.  return v0 @kind object;
}
procedure `io.reactivex.subscribers.TestSubscriber` `assertNotSubscribed`(`io.reactivex.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.assertNotSubscribed:()Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4fa4b0.  v0:= v1.`io.reactivex.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fa4b4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4fa4ba.  v0:= temp @kind object;
  #L4fa4bc.  if v0 != 0 then goto L4fa4e0;
  #L4fa4c0.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4fa4c4.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L4fa4ca.  v0:= temp;
  #L4fa4cc.  if v0 == 0 then goto L4fa4d2;
  #L4fa4d0.  return v1 @kind object;
  #L4fa4d2.  v0:= "Not subscribed but errors found" @kind object;
  #L4fa4d6.  call temp:= `fail`(v1, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4fa4dc.  v0:= temp @kind object;
  #L4fa4de.  throw v0;
  #L4fa4e0.  v0:= "Subscribed!" @kind object;
  #L4fa4e4.  call temp:= `fail`(v1, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4fa4ea.  v0:= temp @kind object;
  #L4fa4ec.  throw v0;
}
procedure `io.reactivex.subscribers.TestSubscriber` `assertOf`(`io.reactivex.subscribers.TestSubscriber` v0 @kind this, `io.reactivex.functions.Consumer` v1 @kind object) @signature `Lio/reactivex/subscribers/TestSubscriber;.assertOf:(Lio/reactivex/functions/Consumer;)Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4fa500.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4fa506.  return v0 @kind object;
  #L4fa508.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4fa50a.  call temp:= `wrapOrThrow`(v1) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4fa510.  v1:= temp @kind object;
  #L4fa512.  throw v1;
  catch `java.lang.Throwable` @[L4fa500..L4fa506] goto L4fa508;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertSubscribed`(`io.reactivex.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L4fa494.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/subscribers/TestSubscriber;.assertSubscribed:()Lio/reactivex/subscribers/TestSubscriber;` @kind virtual;
  #L4fa49a.  v0:= temp @kind object;
  #L4fa49c.  return v0 @kind object;
}
procedure `io.reactivex.subscribers.TestSubscriber` `assertSubscribed`(`io.reactivex.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.assertSubscribed:()Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4fa530.  v0:= v1.`io.reactivex.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fa534.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4fa53a.  v0:= temp @kind object;
  #L4fa53c.  if v0 == 0 then goto L4fa542;
  #L4fa540.  return v1 @kind object;
  #L4fa542.  v0:= "Not subscribed!" @kind object;
  #L4fa546.  call temp:= `fail`(v1, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4fa54c.  v0:= temp @kind object;
  #L4fa54e.  throw v0;
}
procedure `void` `cancel`(`io.reactivex.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4fa688.  v0:= v1.`io.reactivex.subscribers.TestSubscriber.b` @type ^`boolean` @kind boolean;
  #L4fa68c.  if v0 != 0 then goto L4fa6a0;
  #L4fa690.  v0:= 1I;
  #L4fa692.  v1.`io.reactivex.subscribers.TestSubscriber.b` @type ^`boolean` := v0 @kind boolean;
  #L4fa696.  v0:= v1.`io.reactivex.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fa69a.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4fa6a0.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.subscribers.TestSubscriber` v0 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4fa6b4.  call `cancel`(v0) @signature `Lio/reactivex/subscribers/TestSubscriber;.cancel:()V` @kind virtual;
  #L4fa6ba.  return @kind void;
}
procedure `boolean` `hasSubscription`(`io.reactivex.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.hasSubscription:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4fa420.  v0:= v1.`io.reactivex.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fa424.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4fa42a.  v0:= temp @kind object;
  #L4fa42c.  if v0 == 0 then goto L4fa434;
  #L4fa430.  v0:= 1I;
  #L4fa432.  goto L4fa436;
  #L4fa434.  v0:= 0I;
  #L4fa436.  return v0;
}
procedure `boolean` `isCancelled`(`io.reactivex.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.isCancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4fa448.  v0:= v1.`io.reactivex.subscribers.TestSubscriber.b` @type ^`boolean` @kind boolean;
  #L4fa44c.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4fa460.  v0:= v1.`io.reactivex.subscribers.TestSubscriber.b` @type ^`boolean` @kind boolean;
  #L4fa464.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.subscribers.TestSubscriber` v4 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4fa6cc.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L4fa6d0.  if v0 != 0 then goto L4fa702;
  #L4fa6d4.  v0:= 1I;
  #L4fa6d6.  v4.`io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L4fa6da.  v0:= v4.`io.reactivex.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fa6de.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4fa6e4.  v0:= temp @kind object;
  #L4fa6e6.  if v0 != 0 then goto L4fa702;
  #L4fa6ea.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4fa6ee.  v1:= new `java.lang.IllegalStateException`;
  #L4fa6f2.  v2:= "onSubscribe not called in proper order" @kind object;
  #L4fa6f6.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4fa6fc.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4fa702.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4fa708.  v0:= temp @kind object;
  #L4fa70a.  v4.`io.reactivex.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L4fa70e.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L4fa712.  v2:= 1L;
  #L4fa716.  v0:= v0 + v2 @kind long;
  #L4fa718.  v4.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` := v0 @kind wide;
  #L4fa71c.  v0:= v4.`io.reactivex.subscribers.TestSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4fa720.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4fa726.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4fa72a.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4fa730.  return @kind void;
  #L4fa732.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4fa734.  v1:= v4.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4fa738.  call `countDown`(v1) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4fa73e.  throw v0;
  catch `java.lang.Throwable` @[L4fa702..L4fa726] goto L4fa732;
}
procedure `void` `onError`(`io.reactivex.subscribers.TestSubscriber` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/subscribers/TestSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4fa75c.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L4fa760.  if v0 != 0 then goto L4fa792;
  #L4fa764.  v0:= 1I;
  #L4fa766.  v3.`io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L4fa76a.  v0:= v3.`io.reactivex.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fa76e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4fa774.  v0:= temp @kind object;
  #L4fa776.  if v0 != 0 then goto L4fa792;
  #L4fa77a.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4fa77e.  v1:= new `java.lang.NullPointerException`;
  #L4fa782.  v2:= "onSubscribe not called in proper order" @kind object;
  #L4fa786.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4fa78c.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4fa792.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4fa798.  v0:= temp @kind object;
  #L4fa79a.  v3.`io.reactivex.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L4fa79e.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4fa7a2.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4fa7a8.  if v4 != 0 then goto L4fa7c4;
  #L4fa7ac.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4fa7b0.  v1:= new `java.lang.IllegalStateException`;
  #L4fa7b4.  v2:= "onError received a null Throwable" @kind object;
  #L4fa7b8.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4fa7be.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4fa7c4.  v0:= v3.`io.reactivex.subscribers.TestSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4fa7c8.  call `onError`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4fa7ce.  v4:= v3.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4fa7d2.  call `countDown`(v4) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4fa7d8.  return @kind void;
  #L4fa7da.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4fa7dc.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4fa7e0.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4fa7e6.  throw v4;
  catch `java.lang.Throwable` @[L4fa792..L4fa7ce] goto L4fa7da;
}
procedure `void` `onNext`(`io.reactivex.subscribers.TestSubscriber` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/subscribers/TestSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4fa804.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L4fa808.  if v0 != 0 then goto L4fa83a;
  #L4fa80c.  v0:= 1I;
  #L4fa80e.  v3.`io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L4fa812.  v0:= v3.`io.reactivex.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fa816.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4fa81c.  v0:= temp @kind object;
  #L4fa81e.  if v0 != 0 then goto L4fa83a;
  #L4fa822.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4fa826.  v1:= new `java.lang.IllegalStateException`;
  #L4fa82a.  v2:= "onSubscribe not called in proper order" @kind object;
  #L4fa82e.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4fa834.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4fa83a.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4fa840.  v0:= temp @kind object;
  #L4fa842.  v3.`io.reactivex.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L4fa846.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.establishedFusionMode` @type ^`int`;
  #L4fa84a.  v1:= 2I;
  #L4fa84c.  if v0 != v1 then goto L4fa87a;
  #L4fa850.  v4:= v3.`io.reactivex.subscribers.TestSubscriber.e` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L4fa854.  call temp:= `poll`(v4) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4fa85a.  v4:= temp @kind object;
  #L4fa85c.  if v4 == 0 then goto L4fa878;
  #L4fa860.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L4fa864.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4fa86a.  goto L4fa850;
  #L4fa86c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4fa86e.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4fa872.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4fa878.  return @kind void;
  #L4fa87a.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L4fa87e.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4fa884.  if v4 != 0 then goto L4fa8a0;
  #L4fa888.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4fa88c.  v1:= new `java.lang.NullPointerException`;
  #L4fa890.  v2:= "onNext received a null value" @kind object;
  #L4fa894.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4fa89a.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4fa8a0.  v0:= v3.`io.reactivex.subscribers.TestSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4fa8a4.  call `onNext`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4fa8aa.  return @kind void;
  catch `java.lang.Throwable` @[L4fa850..L4fa86a] goto L4fa86c;
}
procedure `void` `onStart`(`io.reactivex.subscribers.TestSubscriber` v0 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.onStart:()V` @AccessFlag PROTECTED {
    temp;

  #L4fa8c8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subscribers.TestSubscriber` v5 @kind this, `org.reactivestreams.Subscription` v6 @kind object) @signature `Lio/reactivex/subscribers/TestSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4fa8dc.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4fa8e2.  v0:= temp @kind object;
  #L4fa8e4.  v5.`io.reactivex.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L4fa8e8.  if v6 != 0 then goto L4fa906;
  #L4fa8ec.  v6:= v5.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4fa8f0.  v0:= new `java.lang.NullPointerException`;
  #L4fa8f4.  v1:= "onSubscribe received a null Subscription" @kind object;
  #L4fa8f8.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4fa8fe.  call temp:= `add`(v6, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4fa904.  return @kind void;
  #L4fa906.  v0:= v5.`io.reactivex.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fa90a.  v1:= 0I;
  #L4fa90c.  call temp:= `compareAndSet`(v0, v1, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4fa912.  v0:= temp;
  #L4fa914.  if v0 != 0 then goto L4fa96a;
  #L4fa918.  call `cancel`(v6) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4fa91e.  v0:= v5.`io.reactivex.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fa922.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4fa928.  v0:= temp @kind object;
  #L4fa92a.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4fa92e.  if v0 == v1 then goto L4fa968;
  #L4fa932.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4fa936.  v1:= new `java.lang.IllegalStateException`;
  #L4fa93a.  v2:= new `java.lang.StringBuilder`;
  #L4fa93e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4fa944.  v3:= "onSubscribe received multiple subscriptions: " @kind object;
  #L4fa948.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fa94e.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fa954.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4fa95a.  v6:= temp @kind object;
  #L4fa95c.  call `<init>`(v1, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4fa962.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4fa968.  return @kind void;
  #L4fa96a.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.initialFusionMode` @type ^`int`;
  #L4fa96e.  if v0 == 0 then goto L4fa9e0;
  #L4fa972.  v1:= instanceof @variable v6 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L4fa976.  if v1 == 0 then goto L4fa9e0;
  #L4fa97a.  v1:= v6 @kind object;
  #L4fa97c.  v1:= (`io.reactivex.internal.fuseable.QueueSubscription`) v1 @kind object;
  #L4fa980.  v5.`io.reactivex.subscribers.TestSubscriber.e` @type ^`io.reactivex.internal.fuseable.QueueSubscription` := v1 @kind object;
  #L4fa984.  call temp:= `requestFusion`(v1, v0) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4fa98a.  v0:= temp;
  #L4fa98c.  v5.`io.reactivex.observers.BaseTestConsumer.establishedFusionMode` @type ^`int` := v0;
  #L4fa990.  v1:= 1I;
  #L4fa992.  if v0 != v1 then goto L4fa9e0;
  #L4fa996.  v5.`io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` := v1 @kind boolean;
  #L4fa99a.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4fa9a0.  v6:= temp @kind object;
  #L4fa9a2.  v5.`io.reactivex.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v6 @kind object;
  #L4fa9a6.  v6:= v5.`io.reactivex.subscribers.TestSubscriber.e` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L4fa9aa.  call temp:= `poll`(v6) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4fa9b0.  v6:= temp @kind object;
  #L4fa9b2.  if v6 == 0 then goto L4fa9c2;
  #L4fa9b6.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L4fa9ba.  call temp:= `add`(v0, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4fa9c0.  goto L4fa9a6;
  #L4fa9c2.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L4fa9c6.  v2:= 1L;
  #L4fa9ca.  v0:= v0 + v2 @kind long;
  #L4fa9cc.  v5.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` := v0 @kind wide;
  #L4fa9d0.  goto L4fa9de;
  #L4fa9d2.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4fa9d4.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4fa9d8.  call temp:= `add`(v0, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4fa9de.  return @kind void;
  #L4fa9e0.  v0:= v5.`io.reactivex.subscribers.TestSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4fa9e4.  call `onSubscribe`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4fa9ea.  v0:= v5.`io.reactivex.subscribers.TestSubscriber.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4fa9ee.  v1:= 0L;
  #L4fa9f2.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4fa9f8.  v3:= temp @kind wide;
  #L4fa9fa.  v0:= lcmp(v3, v1);
  #L4fa9fe.  if v0 == 0 then goto L4faa08;
  #L4faa02.  call `request`(v6, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4faa08.  call `onStart`(v5) @signature `Lio/reactivex/subscribers/TestSubscriber;.onStart:()V` @kind virtual;
  #L4faa0e.  return @kind void;
  catch `java.lang.Throwable` @[L4fa9a6..L4fa9d0] goto L4fa9d2;
}
procedure `void` `request`(`io.reactivex.subscribers.TestSubscriber` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/subscribers/TestSubscriber;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4faa2c.  v0:= v2.`io.reactivex.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4faa30.  v1:= v2.`io.reactivex.subscribers.TestSubscriber.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4faa34.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L4faa3a.  return @kind void;
}
procedure `io.reactivex.subscribers.TestSubscriber` `requestMore`(`io.reactivex.subscribers.TestSubscriber` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/subscribers/TestSubscriber;.requestMore:(J)Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4fa5b4.  call `request`(v0, v1) @signature `Lio/reactivex/subscribers/TestSubscriber;.request:(J)V` @kind virtual;
  #L4fa5ba.  return v0 @kind object;
}
