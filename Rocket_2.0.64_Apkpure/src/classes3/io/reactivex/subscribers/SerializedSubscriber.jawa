record `io.reactivex.subscribers.SerializedSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.subscribers.SerializedSubscriber.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.subscribers.SerializedSubscriber.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.subscribers.SerializedSubscriber.c` @AccessFlag ;
  `boolean` `io.reactivex.subscribers.SerializedSubscriber.d` @AccessFlag ;
  `io.reactivex.internal.util.AppendOnlyLinkedArrayList` `io.reactivex.subscribers.SerializedSubscriber.e` @AccessFlag ;
  `boolean` `io.reactivex.subscribers.SerializedSubscriber.f` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.subscribers.SerializedSubscriber` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4fa04c.  v0:= 0I;
  #L4fa04e.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Z)V` @kind direct;
  #L4fa054.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subscribers.SerializedSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `boolean` v2 ) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4fa068.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4fa06e.  v0.`io.reactivex.subscribers.SerializedSubscriber.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4fa072.  v0.`io.reactivex.subscribers.SerializedSubscriber.b` @type ^`boolean` := v2 @kind boolean;
  #L4fa076.  return @kind void;
}
procedure `void` `a`(`io.reactivex.subscribers.SerializedSubscriber` v2 @kind this) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4fa0a4.  @monitorenter v2
  #L4fa0a6.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L4fa0aa.  if v0 != 0 then goto L4fa0b8;
  #L4fa0ae.  v0:= 0I;
  #L4fa0b0.  v2.`io.reactivex.subscribers.SerializedSubscriber.d` @type ^`boolean` := v0 @kind boolean;
  #L4fa0b4.  @monitorexit v2
  #L4fa0b6.  return @kind void;
  #L4fa0b8.  v1:= 0I;
  #L4fa0ba.  v2.`io.reactivex.subscribers.SerializedSubscriber.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v1 @kind object;
  #L4fa0be.  @monitorexit v2
  #L4fa0c0.  v1:= v2.`io.reactivex.subscribers.SerializedSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4fa0c4.  call temp:= `accept`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.accept:(Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L4fa0ca.  v0:= temp;
  #L4fa0cc.  if v0 == 0 then goto L4fa0a4;
  #L4fa0d0.  return @kind void;
  #L4fa0d2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4fa0d4.  @monitorexit v2
  #L4fa0d6.  throw v0;
  catch `java.lang.Throwable` @[L4fa0a6..L4fa0c0] goto L4fa0d2;
  catch `java.lang.Throwable` @[L4fa0d4..L4fa0d6] goto L4fa0d2;
}
procedure `void` `cancel`(`io.reactivex.subscribers.SerializedSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fa088.  v0:= v1.`io.reactivex.subscribers.SerializedSubscriber.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4fa08c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4fa092.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.subscribers.SerializedSubscriber` v2 @kind this) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4fa0fc.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.f` @type ^`boolean` @kind boolean;
  #L4fa100.  if v0 == 0 then goto L4fa106;
  #L4fa104.  return @kind void;
  #L4fa106.  @monitorenter v2
  #L4fa108.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.f` @type ^`boolean` @kind boolean;
  #L4fa10c.  if v0 == 0 then goto L4fa114;
  #L4fa110.  @monitorexit v2
  #L4fa112.  return @kind void;
  #L4fa114.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.d` @type ^`boolean` @kind boolean;
  #L4fa118.  if v0 == 0 then goto L4fa146;
  #L4fa11c.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L4fa120.  if v0 != 0 then goto L4fa134;
  #L4fa124.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L4fa128.  v1:= 4I;
  #L4fa12a.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L4fa130.  v2.`io.reactivex.subscribers.SerializedSubscriber.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L4fa134.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L4fa13a.  v1:= temp @kind object;
  #L4fa13c.  call `add`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L4fa142.  @monitorexit v2
  #L4fa144.  return @kind void;
  #L4fa146.  v0:= 1I;
  #L4fa148.  v2.`io.reactivex.subscribers.SerializedSubscriber.f` @type ^`boolean` := v0 @kind boolean;
  #L4fa14c.  v2.`io.reactivex.subscribers.SerializedSubscriber.d` @type ^`boolean` := v0 @kind boolean;
  #L4fa150.  @monitorexit v2
  #L4fa152.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4fa156.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4fa15c.  return @kind void;
  #L4fa15e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4fa160.  @monitorexit v2
  #L4fa162.  throw v0;
  catch `java.lang.Throwable` @[L4fa108..L4fa152] goto L4fa15e;
  catch `java.lang.Throwable` @[L4fa160..L4fa162] goto L4fa15e;
}
procedure `void` `onError`(`io.reactivex.subscribers.SerializedSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4fa188.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.f` @type ^`boolean` @kind boolean;
  #L4fa18c.  if v0 == 0 then goto L4fa198;
  #L4fa190.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4fa196.  return @kind void;
  #L4fa198.  @monitorenter v2
  #L4fa19a.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.f` @type ^`boolean` @kind boolean;
  #L4fa19e.  v1:= 1I;
  #L4fa1a0.  if v0 == 0 then goto L4fa1a6;
  #L4fa1a4.  goto L4fa1f6;
  #L4fa1a6.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.d` @type ^`boolean` @kind boolean;
  #L4fa1aa.  if v0 == 0 then goto L4fa1ec;
  #L4fa1ae.  v2.`io.reactivex.subscribers.SerializedSubscriber.f` @type ^`boolean` := v1 @kind boolean;
  #L4fa1b2.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L4fa1b6.  if v0 != 0 then goto L4fa1ca;
  #L4fa1ba.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L4fa1be.  v1:= 4I;
  #L4fa1c0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L4fa1c6.  v2.`io.reactivex.subscribers.SerializedSubscriber.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L4fa1ca.  call temp:= `error`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L4fa1d0.  v3:= temp @kind object;
  #L4fa1d2.  v1:= v2.`io.reactivex.subscribers.SerializedSubscriber.b` @type ^`boolean` @kind boolean;
  #L4fa1d6.  if v1 == 0 then goto L4fa1e2;
  #L4fa1da.  call `add`(v0, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L4fa1e0.  goto L4fa1e8;
  #L4fa1e2.  call `setFirst`(v0, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.setFirst:(Ljava/lang/Object;)V` @kind virtual;
  #L4fa1e8.  @monitorexit v2
  #L4fa1ea.  return @kind void;
  #L4fa1ec.  v2.`io.reactivex.subscribers.SerializedSubscriber.f` @type ^`boolean` := v1 @kind boolean;
  #L4fa1f0.  v2.`io.reactivex.subscribers.SerializedSubscriber.d` @type ^`boolean` := v1 @kind boolean;
  #L4fa1f4.  v1:= 0I;
  #L4fa1f6.  @monitorexit v2
  #L4fa1f8.  if v1 == 0 then goto L4fa204;
  #L4fa1fc.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4fa202.  return @kind void;
  #L4fa204.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4fa208.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4fa20e.  return @kind void;
  #L4fa210.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4fa212.  @monitorexit v2
  #L4fa214.  throw v3;
  catch `java.lang.Throwable` @[L4fa19a..L4fa1f8] goto L4fa210;
  catch `java.lang.Throwable` @[L4fa212..L4fa214] goto L4fa210;
}
procedure `void` `onNext`(`io.reactivex.subscribers.SerializedSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4fa23c.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.f` @type ^`boolean` @kind boolean;
  #L4fa240.  if v0 == 0 then goto L4fa246;
  #L4fa244.  return @kind void;
  #L4fa246.  if v3 != 0 then goto L4fa26a;
  #L4fa24a.  v3:= v2.`io.reactivex.subscribers.SerializedSubscriber.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4fa24e.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4fa254.  v3:= new `java.lang.NullPointerException`;
  #L4fa258.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L4fa25c.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4fa262.  call `onError`(v2, v3) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4fa268.  return @kind void;
  #L4fa26a.  @monitorenter v2
  #L4fa26c.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.f` @type ^`boolean` @kind boolean;
  #L4fa270.  if v0 == 0 then goto L4fa278;
  #L4fa274.  @monitorexit v2
  #L4fa276.  return @kind void;
  #L4fa278.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.d` @type ^`boolean` @kind boolean;
  #L4fa27c.  if v0 == 0 then goto L4fa2aa;
  #L4fa280.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L4fa284.  if v0 != 0 then goto L4fa298;
  #L4fa288.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L4fa28c.  v1:= 4I;
  #L4fa28e.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L4fa294.  v2.`io.reactivex.subscribers.SerializedSubscriber.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L4fa298.  call temp:= `next`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4fa29e.  v3:= temp @kind object;
  #L4fa2a0.  call `add`(v0, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L4fa2a6.  @monitorexit v2
  #L4fa2a8.  return @kind void;
  #L4fa2aa.  v0:= 1I;
  #L4fa2ac.  v2.`io.reactivex.subscribers.SerializedSubscriber.d` @type ^`boolean` := v0 @kind boolean;
  #L4fa2b0.  @monitorexit v2
  #L4fa2b2.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4fa2b6.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4fa2bc.  call `a`(v2) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.a:()V` @kind virtual;
  #L4fa2c2.  return @kind void;
  #L4fa2c4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4fa2c6.  @monitorexit v2
  #L4fa2c8.  throw v3;
  catch `java.lang.Throwable` @[L4fa26c..L4fa2b2] goto L4fa2c4;
  catch `java.lang.Throwable` @[L4fa2c6..L4fa2c8] goto L4fa2c4;
}
procedure `void` `onSubscribe`(`io.reactivex.subscribers.SerializedSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fa2f0.  v0:= v1.`io.reactivex.subscribers.SerializedSubscriber.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4fa2f4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4fa2fa.  v0:= temp;
  #L4fa2fc.  if v0 == 0 then goto L4fa30e;
  #L4fa300.  v1.`io.reactivex.subscribers.SerializedSubscriber.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4fa304.  v2:= v1.`io.reactivex.subscribers.SerializedSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4fa308.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4fa30e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.subscribers.SerializedSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fa320.  v0:= v1.`io.reactivex.subscribers.SerializedSubscriber.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4fa324.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4fa32a.  return @kind void;
}
