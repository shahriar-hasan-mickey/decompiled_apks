record `io.reactivex.exceptions.CompositeException` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.RuntimeException` @kind class {
  `java.util.List` `io.reactivex.exceptions.CompositeException.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `io.reactivex.exceptions.CompositeException.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.Throwable` `io.reactivex.exceptions.CompositeException.c` @AccessFlag PRIVATE;
}
global `long` `@@io.reactivex.exceptions.CompositeException.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.exceptions.CompositeException` v4 @kind this, `java.lang.Iterable` v5 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:(Ljava/lang/Iterable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4013f4.  call `<init>`(v4) @signature `Ljava/lang/RuntimeException;.<init>:()V` @kind direct;
  #L4013fa.  v0:= new `java.util.LinkedHashSet`;
  #L4013fe.  call `<init>`(v0) @signature `Ljava/util/LinkedHashSet;.<init>:()V` @kind direct;
  #L401404.  v1:= new `java.util.ArrayList`;
  #L401408.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L40140e.  if v5 == 0 then goto L401470;
  #L401412.  call temp:= `iterator`(v5) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L401418.  v5:= temp @kind object;
  #L40141a.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L401420.  v2:= temp;
  #L401422.  if v2 == 0 then goto L401484;
  #L401426.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40142c.  v2:= temp @kind object;
  #L40142e.  v2:= (`java.lang.Throwable`) v2 @kind object;
  #L401432.  v3:= instanceof @variable v2 @type ^`io.reactivex.exceptions.CompositeException` @kind boolean;
  #L401436.  if v3 == 0 then goto L40144e;
  #L40143a.  v2:= (`io.reactivex.exceptions.CompositeException`) v2 @kind object;
  #L40143e.  call temp:= `getExceptions`(v2) @signature `Lio/reactivex/exceptions/CompositeException;.getExceptions:()Ljava/util/List;` @kind virtual;
  #L401444.  v2:= temp @kind object;
  #L401446.  call temp:= `addAll`(v0, v2) @signature `Ljava/util/Set;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L40144c.  goto L40141a;
  #L40144e.  if v2 == 0 then goto L40145a;
  #L401452.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L401458.  goto L40141a;
  #L40145a.  v2:= new `java.lang.NullPointerException`;
  #L40145e.  v3:= "Throwable was null!" @kind object;
  #L401462.  call `<init>`(v2, v3) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L401468.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L40146e.  goto L40141a;
  #L401470.  v5:= new `java.lang.NullPointerException`;
  #L401474.  v2:= "errors was null" @kind object;
  #L401478.  call `<init>`(v5, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40147e.  call temp:= `add`(v0, v5) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L401484.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Set;.isEmpty:()Z` @kind interface;
  #L40148a.  v5:= temp;
  #L40148c.  if v5 != 0 then goto L4014d2;
  #L401490.  call temp:= `addAll`(v1, v0) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L401496.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L40149c.  v5:= temp @kind object;
  #L40149e.  v4.`io.reactivex.exceptions.CompositeException.a` @type ^`java.util.List` := v5 @kind object;
  #L4014a2.  v0:= new `java.lang.StringBuilder`;
  #L4014a6.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4014ac.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4014b2.  v5:= temp;
  #L4014b4.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4014ba.  v5:= " exceptions occurred. " @kind object;
  #L4014be.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4014c4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4014ca.  v5:= temp @kind object;
  #L4014cc.  v4.`io.reactivex.exceptions.CompositeException.b` @type ^`java.lang.String` := v5 @kind object;
  #L4014d0.  return @kind void;
  #L4014d2.  v5:= new `java.lang.IllegalArgumentException`;
  #L4014d6.  v0:= "errors is empty" @kind object;
  #L4014da.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4014e0.  throw v5;
}
procedure `void` `<init>`(`io.reactivex.exceptions.CompositeException` v1 @kind this, `java.lang.Throwable`[] v2 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4014f4.  if v2 != 0 then goto L401510;
  #L4014f8.  v2:= new `java.lang.NullPointerException`;
  #L4014fc.  v0:= "exceptions was null" @kind object;
  #L401500.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L401506.  call temp:= `singletonList`(v2) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L40150c.  v2:= temp @kind object;
  #L40150e.  goto L401518;
  #L401510.  call temp:= `asList`(v2) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L401516.  v2:= temp @kind object;
  #L401518.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L40151e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.exceptions.CompositeException` v5 @kind this, `java.lang.StringBuilder` v6 @kind object, `java.lang.Throwable` v7 @kind object, `java.lang.String` v8 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.a:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L401530.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L401536.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40153c.  v8:= 10I;
  #L401540.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L401546.  call temp:= `getStackTrace`(v7) @signature `Ljava/lang/Throwable;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L40154c.  v0:= temp @kind object;
  #L40154e.  v1:= length @variable v0;
  #L401550.  v2:= 0I;
  #L401552.  if v2 >= v1 then goto L401576;
  #L401556.  v3:= v0[v2] @kind object;
  #L40155a.  v4:= "\t\tat " @kind object;
  #L40155e.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L401564.  call temp:= `append`(v6, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40156a.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L401570.  v2:= v2 + 1;
  #L401574.  goto L401552;
  #L401576.  call temp:= `getCause`(v7) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L40157c.  v8:= temp @kind object;
  #L40157e.  if v8 == 0 then goto L40159e;
  #L401582.  v8:= "\tCaused by: " @kind object;
  #L401586.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40158c.  call temp:= `getCause`(v7) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L401592.  v7:= temp @kind object;
  #L401594.  v8:= "" @kind object;
  #L401598.  call `a`(v5, v6, v7, v8) @signature `Lio/reactivex/exceptions/CompositeException;.a:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @kind direct;
  #L40159e.  return @kind void;
}
procedure `java.util.List` `b`(`io.reactivex.exceptions.CompositeException` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.b:(Ljava/lang/Throwable;)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4013a8.  v0:= new `java.util.ArrayList`;
  #L4013ac.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4013b2.  call temp:= `getCause`(v3) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L4013b8.  v1:= temp @kind object;
  #L4013ba.  if v1 == 0 then goto L4013e0;
  #L4013be.  if v1 != v3 then goto L4013c4;
  #L4013c2.  goto L4013e0;
  #L4013c4.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4013ca.  call temp:= `getCause`(v1) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L4013d0.  v3:= temp @kind object;
  #L4013d2.  if v3 == 0 then goto L4013e0;
  #L4013d6.  if v3 != v1 then goto L4013dc;
  #L4013da.  goto L4013e0;
  #L4013dc.  v1:= v3 @kind object;
  #L4013de.  goto L4013c4;
  #L4013e0.  return v0 @kind object;
}
procedure `java.lang.Throwable` `c`(`io.reactivex.exceptions.CompositeException` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.c:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L401350.  call temp:= `getCause`(v3) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L401356.  v0:= temp @kind object;
  #L401358.  if v0 == 0 then goto L40137e;
  #L40135c.  v1:= v2.`io.reactivex.exceptions.CompositeException.c` @type ^`java.lang.Throwable` @kind object;
  #L401360.  if v1 != v0 then goto L401366;
  #L401364.  goto L40137e;
  #L401366.  call temp:= `getCause`(v0) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L40136c.  v3:= temp @kind object;
  #L40136e.  if v3 == 0 then goto L40137c;
  #L401372.  if v3 != v0 then goto L401378;
  #L401376.  goto L40137c;
  #L401378.  v0:= v3 @kind object;
  #L40137a.  goto L401366;
  #L40137c.  return v0 @kind object;
  #L40137e.  return v3 @kind object;
}
procedure `void` `d`(`io.reactivex.exceptions.CompositeException` v7 @kind this, `io.reactivex.exceptions.CompositeException$b` v8 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.d:(Lio/reactivex/exceptions/CompositeException$b;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4015cc.  v0:= new `java.lang.StringBuilder`;
  #L4015d0.  v1:= 128I;
  #L4015d4.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L4015da.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4015e0.  v1:= 10I;
  #L4015e4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4015ea.  call temp:= `getStackTrace`(v7) @signature `Ljava/lang/RuntimeException;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L4015f0.  v2:= temp @kind object;
  #L4015f2.  v3:= length @variable v2;
  #L4015f4.  v4:= 0I;
  #L4015f6.  if v4 >= v3 then goto L40161a;
  #L4015fa.  v5:= v2[v4] @kind object;
  #L4015fe.  v6:= "\tat " @kind object;
  #L401602.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L401608.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40160e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L401614.  v4:= v4 + 1;
  #L401618.  goto L4015f6;
  #L40161a.  v1:= v7.`io.reactivex.exceptions.CompositeException.a` @type ^`java.util.List` @kind object;
  #L40161e.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L401624.  v1:= temp @kind object;
  #L401626.  v2:= 1I;
  #L401628.  v3:= 1I;
  #L40162a.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L401630.  v4:= temp;
  #L401632.  if v4 == 0 then goto L40166a;
  #L401636.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40163c.  v4:= temp @kind object;
  #L40163e.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L401642.  v5:= "  ComposedException " @kind object;
  #L401646.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40164c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L401652.  v5:= " :\n" @kind object;
  #L401656.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40165c.  v5:= "\t" @kind object;
  #L401660.  call `a`(v7, v0, v4, v5) @signature `Lio/reactivex/exceptions/CompositeException;.a:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @kind direct;
  #L401666.  v3:= v3 + v2 @kind int;
  #L401668.  goto L40162a;
  #L40166a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L401670.  v0:= temp @kind object;
  #L401672.  call `a`(v8, v0) @signature `Lio/reactivex/exceptions/CompositeException$b;.a:(Ljava/lang/Object;)V` @kind virtual;
  #L401678.  return @kind void;
}
procedure `java.lang.Throwable` `getCause`(`io.reactivex.exceptions.CompositeException` v8 @kind this) @signature `Lio/reactivex/exceptions/CompositeException;.getCause:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L401258.  @monitorenter v8
  #L40125a.  v0:= v8.`io.reactivex.exceptions.CompositeException.c` @type ^`java.lang.Throwable` @kind object;
  #L40125e.  if v0 != 0 then goto L401310;
  #L401262.  v0:= new `io.reactivex.exceptions.CompositeException$a`;
  #L401266.  call `<init>`(v0) @signature `Lio/reactivex/exceptions/CompositeException$a;.<init>:()V` @kind direct;
  #L40126c.  v1:= new `java.util.HashSet`;
  #L401270.  call `<init>`(v1) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L401276.  v2:= v8.`io.reactivex.exceptions.CompositeException.a` @type ^`java.util.List` @kind object;
  #L40127a.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L401280.  v2:= temp @kind object;
  #L401282.  v3:= v0 @kind object;
  #L401284.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40128a.  v4:= temp;
  #L40128c.  if v4 == 0 then goto L40130c;
  #L401290.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L401296.  v4:= temp @kind object;
  #L401298.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L40129c.  call temp:= `contains`(v1, v4) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L4012a2.  v5:= temp;
  #L4012a4.  if v5 == 0 then goto L4012aa;
  #L4012a8.  goto L401284;
  #L4012aa.  call temp:= `add`(v1, v4) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4012b0.  call temp:= `b`(v8, v4) @signature `Lio/reactivex/exceptions/CompositeException;.b:(Ljava/lang/Throwable;)Ljava/util/List;` @kind direct;
  #L4012b6.  v5:= temp @kind object;
  #L4012b8.  call temp:= `iterator`(v5) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4012be.  v5:= temp @kind object;
  #L4012c0.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4012c6.  v6:= temp;
  #L4012c8.  if v6 == 0 then goto L4012fc;
  #L4012cc.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4012d2.  v6:= temp @kind object;
  #L4012d4.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L4012d8.  call temp:= `contains`(v1, v6) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L4012de.  v7:= temp;
  #L4012e0.  if v7 == 0 then goto L4012f4;
  #L4012e4.  v4:= new `java.lang.RuntimeException`;
  #L4012e8.  v6:= "Duplicate found in causal chain so cropping to prevent loop ..." @kind object;
  #L4012ec.  call `<init>`(v4, v6) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4012f2.  goto L4012c0;
  #L4012f4.  call temp:= `add`(v1, v6) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4012fa.  goto L4012c0;
  #L4012fc.  call temp:= `initCause`(v3, v4) @signature `Ljava/lang/Throwable;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L401302.  call temp:= `c`(v8, v3) @signature `Lio/reactivex/exceptions/CompositeException;.c:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind direct;
  #L401308.  v3:= temp @kind object;
  #L40130a.  goto L401284;
  #L40130c.  v8.`io.reactivex.exceptions.CompositeException.c` @type ^`java.lang.Throwable` := v0 @kind object;
  #L401310.  v0:= v8.`io.reactivex.exceptions.CompositeException.c` @type ^`java.lang.Throwable` @kind object;
  #L401314.  @monitorexit v8
  #L401316.  return v0 @kind object;
  #L401318.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40131a.  @monitorexit v8
  #L40131c.  throw v0;
  catch `java.lang.Throwable` @[L40125a..L4012fa] goto L401318;
  catch `java.lang.Throwable` @[L4012fc..L401302] goto L401302;
  catch `java.lang.Throwable` @[L401302..L401314] goto L401318;
}
procedure `java.util.List` `getExceptions`(`io.reactivex.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/exceptions/CompositeException;.getExceptions:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L401390.  v0:= v1.`io.reactivex.exceptions.CompositeException.a` @type ^`java.util.List` @kind object;
  #L401394.  return v0 @kind object;
}
procedure `java.lang.String` `getMessage`(`io.reactivex.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/exceptions/CompositeException;.getMessage:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L401240.  v0:= v1.`io.reactivex.exceptions.CompositeException.b` @type ^`java.lang.String` @kind object;
  #L401244.  return v0 @kind object;
}
procedure `void` `printStackTrace`(`io.reactivex.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/exceptions/CompositeException;.printStackTrace:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4015b0.  v0:= `@@java.lang.System.err` @type ^`java.io.PrintStream` @kind object;
  #L4015b4.  call `printStackTrace`(v1, v0) @signature `Lio/reactivex/exceptions/CompositeException;.printStackTrace:(Ljava/io/PrintStream;)V` @kind virtual;
  #L4015ba.  return @kind void;
}
procedure `void` `printStackTrace`(`io.reactivex.exceptions.CompositeException` v1 @kind this, `java.io.PrintStream` v2 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.printStackTrace:(Ljava/io/PrintStream;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40168c.  v0:= new `io.reactivex.exceptions.CompositeException$c`;
  #L401690.  call `<init>`(v0, v2) @signature `Lio/reactivex/exceptions/CompositeException$c;.<init>:(Ljava/io/PrintStream;)V` @kind direct;
  #L401696.  call `d`(v1, v0) @signature `Lio/reactivex/exceptions/CompositeException;.d:(Lio/reactivex/exceptions/CompositeException$b;)V` @kind direct;
  #L40169c.  return @kind void;
}
procedure `void` `printStackTrace`(`io.reactivex.exceptions.CompositeException` v1 @kind this, `java.io.PrintWriter` v2 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.printStackTrace:(Ljava/io/PrintWriter;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4016b0.  v0:= new `io.reactivex.exceptions.CompositeException$d`;
  #L4016b4.  call `<init>`(v0, v2) @signature `Lio/reactivex/exceptions/CompositeException$d;.<init>:(Ljava/io/PrintWriter;)V` @kind direct;
  #L4016ba.  call `d`(v1, v0) @signature `Lio/reactivex/exceptions/CompositeException;.d:(Lio/reactivex/exceptions/CompositeException$b;)V` @kind direct;
  #L4016c0.  return @kind void;
}
procedure `int` `size`(`io.reactivex.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/exceptions/CompositeException;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L401220.  v0:= v1.`io.reactivex.exceptions.CompositeException.a` @type ^`java.util.List` @kind object;
  #L401224.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L40122a.  v0:= temp;
  #L40122c.  return v0;
}
