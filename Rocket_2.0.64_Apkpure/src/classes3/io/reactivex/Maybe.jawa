record `io.reactivex.Maybe` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.MaybeSource` @kind interface {
}
procedure `void` `<init>`(`io.reactivex.Maybe` v0 @kind this) @signature `Lio/reactivex/Maybe;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f8094.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f809a.  return @kind void;
}
procedure `io.reactivex.Maybe` `amb`(`java.lang.Iterable` v2 @kind object) @signature `Lio/reactivex/Maybe;.amb:(Ljava/lang/Iterable;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f67d8.  v0:= "sources is null" @kind object;
  #L3f67dc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f67e2.  v0:= new `io.reactivex.internal.operators.maybe.MaybeAmb`;
  #L3f67e6.  v1:= 0I;
  #L3f67e8.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb;.<init>:([Lio/reactivex/MaybeSource;Ljava/lang/Iterable;)V` @kind direct;
  #L3f67ee.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f67f4.  v2:= temp @kind object;
  #L3f67f6.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `ambArray`(`io.reactivex.MaybeSource`[] v2 @kind object) @signature `Lio/reactivex/Maybe;.ambArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f6808.  v0:= length @variable v2;
  #L3f680a.  if v0 != 0 then goto L3f6818;
  #L3f680e.  call temp:= `empty`() @signature `Lio/reactivex/Maybe;.empty:()Lio/reactivex/Maybe;` @kind static;
  #L3f6814.  v2:= temp @kind object;
  #L3f6816.  return v2 @kind object;
  #L3f6818.  v0:= length @variable v2;
  #L3f681a.  v1:= 1I;
  #L3f681c.  if v0 != v1 then goto L3f6830;
  #L3f6820.  v0:= 0I;
  #L3f6822.  v2:= v2[v0] @kind object;
  #L3f6826.  call temp:= `wrap`(v2) @signature `Lio/reactivex/Maybe;.wrap:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L3f682c.  v2:= temp @kind object;
  #L3f682e.  return v2 @kind object;
  #L3f6830.  v0:= new `io.reactivex.internal.operators.maybe.MaybeAmb`;
  #L3f6834.  v1:= 0I;
  #L3f6836.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb;.<init>:([Lio/reactivex/MaybeSource;Ljava/lang/Iterable;)V` @kind direct;
  #L3f683c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f6842.  v2:= temp @kind object;
  #L3f6844.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/Maybe;.concat:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f5fe8.  v0:= "source1 is null" @kind object;
  #L3f5fec.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f5ff2.  v0:= "source2 is null" @kind object;
  #L3f5ff6.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f5ffc.  v0:= 2I;
  #L3f5ffe.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3f6002.  v1:= 0I;
  #L3f6004.  v0[v1]:= v2 @kind object;
  #L3f6008.  v2:= 1I;
  #L3f600a.  v0[v2]:= v3 @kind object;
  #L3f600e.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Maybe;.concatArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L3f6014.  v2:= temp @kind object;
  #L3f6016.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object) @signature `Lio/reactivex/Maybe;.concat:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f6028.  v0:= "source1 is null" @kind object;
  #L3f602c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6032.  v0:= "source2 is null" @kind object;
  #L3f6036.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f603c.  v0:= "source3 is null" @kind object;
  #L3f6040.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6046.  v0:= 3I;
  #L3f6048.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3f604c.  v1:= 0I;
  #L3f604e.  v0[v1]:= v2 @kind object;
  #L3f6052.  v2:= 1I;
  #L3f6054.  v0[v2]:= v3 @kind object;
  #L3f6058.  v2:= 2I;
  #L3f605a.  v0[v2]:= v4 @kind object;
  #L3f605e.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Maybe;.concatArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L3f6064.  v2:= temp @kind object;
  #L3f6066.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.MaybeSource` v5 @kind object) @signature `Lio/reactivex/Maybe;.concat:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f6078.  v0:= "source1 is null" @kind object;
  #L3f607c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6082.  v0:= "source2 is null" @kind object;
  #L3f6086.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f608c.  v0:= "source3 is null" @kind object;
  #L3f6090.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6096.  v0:= "source4 is null" @kind object;
  #L3f609a.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f60a0.  v0:= 4I;
  #L3f60a2.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3f60a6.  v1:= 0I;
  #L3f60a8.  v0[v1]:= v2 @kind object;
  #L3f60ac.  v2:= 1I;
  #L3f60ae.  v0[v2]:= v3 @kind object;
  #L3f60b2.  v2:= 2I;
  #L3f60b4.  v0[v2]:= v4 @kind object;
  #L3f60b8.  v2:= 3I;
  #L3f60ba.  v0[v2]:= v5 @kind object;
  #L3f60be.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Maybe;.concatArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L3f60c4.  v2:= temp @kind object;
  #L3f60c6.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`java.lang.Iterable` v1 @kind object) @signature `Lio/reactivex/Maybe;.concat:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f60d8.  v0:= "sources is null" @kind object;
  #L3f60dc.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f60e2.  v0:= new `io.reactivex.internal.operators.maybe.MaybeConcatIterable`;
  #L3f60e6.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L3f60ec.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f60f2.  v1:= temp @kind object;
  #L3f60f4.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Maybe;.concat:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f6108.  v0:= 2I;
  #L3f610a.  call temp:= `concat`(v1, v0) @signature `Lio/reactivex/Maybe;.concat:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @kind static;
  #L3f6110.  v1:= temp @kind object;
  #L3f6112.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`org.reactivestreams.Publisher` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Maybe;.concat:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f6124.  v0:= "sources is null" @kind object;
  #L3f6128.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f612e.  v0:= "prefetch" @kind object;
  #L3f6132.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f6138.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatMapPublisher`;
  #L3f613c.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L3f6142.  v1:= temp @kind object;
  #L3f6144.  v2:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3f6148.  call `<init>`(v0, v3, v1, v4, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapPublisher;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L3f614e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f6154.  v3:= temp @kind object;
  #L3f6156.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `concatArray`(`io.reactivex.MaybeSource`[] v2 @kind object) @signature `Lio/reactivex/Maybe;.concatArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f6168.  v0:= "sources is null" @kind object;
  #L3f616c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6172.  v0:= length @variable v2;
  #L3f6174.  if v0 != 0 then goto L3f6182;
  #L3f6178.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3f617e.  v2:= temp @kind object;
  #L3f6180.  return v2 @kind object;
  #L3f6182.  v0:= length @variable v2;
  #L3f6184.  v1:= 1I;
  #L3f6186.  if v0 != v1 then goto L3f61a4;
  #L3f618a.  v0:= new `io.reactivex.internal.operators.maybe.MaybeToFlowable`;
  #L3f618e.  v1:= 0I;
  #L3f6190.  v2:= v2[v1] @kind object;
  #L3f6194.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeToFlowable;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3f619a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f61a0.  v2:= temp @kind object;
  #L3f61a2.  return v2 @kind object;
  #L3f61a4.  v0:= new `io.reactivex.internal.operators.maybe.MaybeConcatArray`;
  #L3f61a8.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray;.<init>:([Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3f61ae.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f61b4.  v2:= temp @kind object;
  #L3f61b6.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatArrayDelayError`(`io.reactivex.MaybeSource`[] v2 @kind object) @signature `Lio/reactivex/Maybe;.concatArrayDelayError:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f61c8.  v0:= length @variable v2;
  #L3f61ca.  if v0 != 0 then goto L3f61d8;
  #L3f61ce.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3f61d4.  v2:= temp @kind object;
  #L3f61d6.  return v2 @kind object;
  #L3f61d8.  v0:= length @variable v2;
  #L3f61da.  v1:= 1I;
  #L3f61dc.  if v0 != v1 then goto L3f61fa;
  #L3f61e0.  v0:= new `io.reactivex.internal.operators.maybe.MaybeToFlowable`;
  #L3f61e4.  v1:= 0I;
  #L3f61e6.  v2:= v2[v1] @kind object;
  #L3f61ea.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeToFlowable;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3f61f0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f61f6.  v2:= temp @kind object;
  #L3f61f8.  return v2 @kind object;
  #L3f61fa.  v0:= new `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError`;
  #L3f61fe.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError;.<init>:([Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3f6204.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f620a.  v2:= temp @kind object;
  #L3f620c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatArrayEager`(`io.reactivex.MaybeSource`[] v1 @kind object) @signature `Lio/reactivex/Maybe;.concatArrayEager:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f6220.  call temp:= `fromArray`(v1) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3f6226.  v1:= temp @kind object;
  #L3f6228.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L3f622e.  v0:= temp @kind object;
  #L3f6230.  call temp:= `concatMapEager`(v1, v0) @signature `Lio/reactivex/Flowable;.concatMapEager:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f6236.  v1:= temp @kind object;
  #L3f6238.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concatDelayError`(`java.lang.Iterable` v1 @kind object) @signature `Lio/reactivex/Maybe;.concatDelayError:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f624c.  v0:= "sources is null" @kind object;
  #L3f6250.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6256.  call temp:= `fromIterable`(v1) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L3f625c.  v1:= temp @kind object;
  #L3f625e.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L3f6264.  v0:= temp @kind object;
  #L3f6266.  call temp:= `concatMapDelayError`(v1, v0) @signature `Lio/reactivex/Flowable;.concatMapDelayError:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f626c.  v1:= temp @kind object;
  #L3f626e.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concatDelayError`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Maybe;.concatDelayError:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f6280.  call temp:= `fromPublisher`(v1) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f6286.  v1:= temp @kind object;
  #L3f6288.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L3f628e.  v0:= temp @kind object;
  #L3f6290.  call temp:= `concatMapDelayError`(v1, v0) @signature `Lio/reactivex/Flowable;.concatMapDelayError:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f6296.  v1:= temp @kind object;
  #L3f6298.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concatEager`(`java.lang.Iterable` v1 @kind object) @signature `Lio/reactivex/Maybe;.concatEager:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f62ac.  call temp:= `fromIterable`(v1) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L3f62b2.  v1:= temp @kind object;
  #L3f62b4.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L3f62ba.  v0:= temp @kind object;
  #L3f62bc.  call temp:= `concatMapEager`(v1, v0) @signature `Lio/reactivex/Flowable;.concatMapEager:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f62c2.  v1:= temp @kind object;
  #L3f62c4.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concatEager`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Maybe;.concatEager:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f62d8.  call temp:= `fromPublisher`(v1) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f62de.  v1:= temp @kind object;
  #L3f62e0.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L3f62e6.  v0:= temp @kind object;
  #L3f62e8.  call temp:= `concatMapEager`(v1, v0) @signature `Lio/reactivex/Flowable;.concatMapEager:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f62ee.  v1:= temp @kind object;
  #L3f62f0.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `create`(`io.reactivex.MaybeOnSubscribe` v1 @kind object) @signature `Lio/reactivex/Maybe;.create:(Lio/reactivex/MaybeOnSubscribe;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f6944.  v0:= "onSubscribe is null" @kind object;
  #L3f6948.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f694e.  v0:= new `io.reactivex.internal.operators.maybe.MaybeCreate`;
  #L3f6952.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate;.<init>:(Lio/reactivex/MaybeOnSubscribe;)V` @kind direct;
  #L3f6958.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f695e.  v1:= temp @kind object;
  #L3f6960.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `defer`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/Maybe;.defer:(Ljava/util/concurrent/Callable;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f69a0.  v0:= "maybeSupplier is null" @kind object;
  #L3f69a4.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f69aa.  v0:= new `io.reactivex.internal.operators.maybe.MaybeDefer`;
  #L3f69ae.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeDefer;.<init>:(Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3f69b4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f69ba.  v1:= temp @kind object;
  #L3f69bc.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `empty`() @signature `Lio/reactivex/Maybe;.empty:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f6d7c.  v0:= `@@io.reactivex.internal.operators.maybe.MaybeEmpty.INSTANCE` @type ^`io.reactivex.internal.operators.maybe.MaybeEmpty` @kind object;
  #L3f6d80.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f6d86.  v0:= temp @kind object;
  #L3f6d88.  return v0 @kind object;
}
procedure `io.reactivex.Maybe` `error`(`java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/Maybe;.error:(Ljava/lang/Throwable;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f6d9c.  v0:= "exception is null" @kind object;
  #L3f6da0.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6da6.  v0:= new `io.reactivex.internal.operators.maybe.MaybeError`;
  #L3f6daa.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeError;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3f6db0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f6db6.  v1:= temp @kind object;
  #L3f6db8.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `error`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/Maybe;.error:(Ljava/util/concurrent/Callable;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f6dcc.  v0:= "errorSupplier is null" @kind object;
  #L3f6dd0.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6dd6.  v0:= new `io.reactivex.internal.operators.maybe.MaybeErrorCallable`;
  #L3f6dda.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeErrorCallable;.<init>:(Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3f6de0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f6de6.  v1:= temp @kind object;
  #L3f6de8.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `fromAction`(`io.reactivex.functions.Action` v1 @kind object) @signature `Lio/reactivex/Maybe;.fromAction:(Lio/reactivex/functions/Action;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f6f08.  v0:= "run is null" @kind object;
  #L3f6f0c.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6f12.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFromAction`;
  #L3f6f16.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromAction;.<init>:(Lio/reactivex/functions/Action;)V` @kind direct;
  #L3f6f1c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f6f22.  v1:= temp @kind object;
  #L3f6f24.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `fromCallable`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/Maybe;.fromCallable:(Ljava/util/concurrent/Callable;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f6f38.  v0:= "callable is null" @kind object;
  #L3f6f3c.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6f42.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFromCallable`;
  #L3f6f46.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromCallable;.<init>:(Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3f6f4c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f6f52.  v1:= temp @kind object;
  #L3f6f54.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `fromCompletable`(`io.reactivex.CompletableSource` v1 @kind object) @signature `Lio/reactivex/Maybe;.fromCompletable:(Lio/reactivex/CompletableSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f6f68.  v0:= "completableSource is null" @kind object;
  #L3f6f6c.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6f72.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFromCompletable`;
  #L3f6f76.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromCompletable;.<init>:(Lio/reactivex/CompletableSource;)V` @kind direct;
  #L3f6f7c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f6f82.  v1:= temp @kind object;
  #L3f6f84.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `fromFuture`(`java.util.concurrent.Future` v4 @kind object) @signature `Lio/reactivex/Maybe;.fromFuture:(Ljava/util/concurrent/Future;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f6f98.  v0:= "future is null" @kind object;
  #L3f6f9c.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6fa2.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFromFuture`;
  #L3f6fa6.  v1:= 0L;
  #L3f6faa.  v3:= 0I;
  #L3f6fac.  call `<init>`(v0, v4, v1, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromFuture;.<init>:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L3f6fb2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f6fb8.  v4:= temp @kind object;
  #L3f6fba.  return v4 @kind object;
}
procedure `io.reactivex.Maybe` `fromFuture`(`java.util.concurrent.Future` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Maybe;.fromFuture:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f6fcc.  v0:= "future is null" @kind object;
  #L3f6fd0.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6fd6.  v0:= "unit is null" @kind object;
  #L3f6fda.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6fe0.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFromFuture`;
  #L3f6fe4.  call `<init>`(v0, v1, v2, v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromFuture;.<init>:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L3f6fea.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f6ff0.  v1:= temp @kind object;
  #L3f6ff2.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `fromRunnable`(`java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/Maybe;.fromRunnable:(Ljava/lang/Runnable;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f7004.  v0:= "run is null" @kind object;
  #L3f7008.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f700e.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFromRunnable`;
  #L3f7012.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromRunnable;.<init>:(Ljava/lang/Runnable;)V` @kind direct;
  #L3f7018.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f701e.  v1:= temp @kind object;
  #L3f7020.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `fromSingle`(`io.reactivex.SingleSource` v1 @kind object) @signature `Lio/reactivex/Maybe;.fromSingle:(Lio/reactivex/SingleSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f7034.  v0:= "singleSource is null" @kind object;
  #L3f7038.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f703e.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFromSingle`;
  #L3f7042.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromSingle;.<init>:(Lio/reactivex/SingleSource;)V` @kind direct;
  #L3f7048.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f704e.  v1:= temp @kind object;
  #L3f7050.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `just`(`java.lang.Object` v1 @kind object) @signature `Lio/reactivex/Maybe;.just:(Ljava/lang/Object;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f7088.  v0:= "item is null" @kind object;
  #L3f708c.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7092.  v0:= new `io.reactivex.internal.operators.maybe.MaybeJust`;
  #L3f7096.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeJust;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3f709c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f70a2.  v1:= temp @kind object;
  #L3f70a4.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/Maybe;.merge:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f637c.  v0:= "source1 is null" @kind object;
  #L3f6380.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6386.  v0:= "source2 is null" @kind object;
  #L3f638a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6390.  v0:= 2I;
  #L3f6392.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3f6396.  v1:= 0I;
  #L3f6398.  v0[v1]:= v2 @kind object;
  #L3f639c.  v2:= 1I;
  #L3f639e.  v0[v2]:= v3 @kind object;
  #L3f63a2.  call temp:= `mergeArray`(v0) @signature `Lio/reactivex/Maybe;.mergeArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L3f63a8.  v2:= temp @kind object;
  #L3f63aa.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object) @signature `Lio/reactivex/Maybe;.merge:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f63bc.  v0:= "source1 is null" @kind object;
  #L3f63c0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f63c6.  v0:= "source2 is null" @kind object;
  #L3f63ca.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f63d0.  v0:= "source3 is null" @kind object;
  #L3f63d4.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f63da.  v0:= 3I;
  #L3f63dc.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3f63e0.  v1:= 0I;
  #L3f63e2.  v0[v1]:= v2 @kind object;
  #L3f63e6.  v2:= 1I;
  #L3f63e8.  v0[v2]:= v3 @kind object;
  #L3f63ec.  v2:= 2I;
  #L3f63ee.  v0[v2]:= v4 @kind object;
  #L3f63f2.  call temp:= `mergeArray`(v0) @signature `Lio/reactivex/Maybe;.mergeArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L3f63f8.  v2:= temp @kind object;
  #L3f63fa.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.MaybeSource` v5 @kind object) @signature `Lio/reactivex/Maybe;.merge:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f640c.  v0:= "source1 is null" @kind object;
  #L3f6410.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6416.  v0:= "source2 is null" @kind object;
  #L3f641a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6420.  v0:= "source3 is null" @kind object;
  #L3f6424.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f642a.  v0:= "source4 is null" @kind object;
  #L3f642e.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6434.  v0:= 4I;
  #L3f6436.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3f643a.  v1:= 0I;
  #L3f643c.  v0[v1]:= v2 @kind object;
  #L3f6440.  v2:= 1I;
  #L3f6442.  v0[v2]:= v3 @kind object;
  #L3f6446.  v2:= 2I;
  #L3f6448.  v0[v2]:= v4 @kind object;
  #L3f644c.  v2:= 3I;
  #L3f644e.  v0[v2]:= v5 @kind object;
  #L3f6452.  call temp:= `mergeArray`(v0) @signature `Lio/reactivex/Maybe;.mergeArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L3f6458.  v2:= temp @kind object;
  #L3f645a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`java.lang.Iterable` v0 @kind object) @signature `Lio/reactivex/Maybe;.merge:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3f646c.  call temp:= `fromIterable`(v0) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L3f6472.  v0:= temp @kind object;
  #L3f6474.  call temp:= `merge`(v0) @signature `Lio/reactivex/Maybe;.merge:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f647a.  v0:= temp @kind object;
  #L3f647c.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Maybe;.merge:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f6490.  v0:= 2147483647I;
  #L3f6496.  call temp:= `merge`(v1, v0) @signature `Lio/reactivex/Maybe;.merge:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @kind static;
  #L3f649c.  v1:= temp @kind object;
  #L3f649e.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`org.reactivestreams.Publisher` v7 @kind object, `int` v8 ) @signature `Lio/reactivex/Maybe;.merge:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f64b0.  v0:= "source is null" @kind object;
  #L3f64b4.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f64ba.  v0:= "maxConcurrency" @kind object;
  #L3f64be.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f64c4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapPublisher`;
  #L3f64c8.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L3f64ce.  v3:= temp @kind object;
  #L3f64d0.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f64d6.  v6:= temp;
  #L3f64d8.  v4:= 0I;
  #L3f64da.  v1:= v0 @kind object;
  #L3f64dc.  v2:= v7 @kind object;
  #L3f64de.  v5:= v8;
  #L3f64e0.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapPublisher;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;ZII)V` @kind direct;
  #L3f64e6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f64ec.  v7:= temp @kind object;
  #L3f64ee.  return v7 @kind object;
}
procedure `io.reactivex.Maybe` `merge`(`io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/Maybe;.merge:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f7118.  v0:= "source is null" @kind object;
  #L3f711c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7122.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatten`;
  #L3f7126.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f712c.  v1:= temp @kind object;
  #L3f712e.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatten;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3f7134.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f713a.  v2:= temp @kind object;
  #L3f713c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeArray`(`io.reactivex.MaybeSource`[] v2 @kind object) @signature `Lio/reactivex/Maybe;.mergeArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f6500.  v0:= "sources is null" @kind object;
  #L3f6504.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f650a.  v0:= length @variable v2;
  #L3f650c.  if v0 != 0 then goto L3f651a;
  #L3f6510.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3f6516.  v2:= temp @kind object;
  #L3f6518.  return v2 @kind object;
  #L3f651a.  v0:= length @variable v2;
  #L3f651c.  v1:= 1I;
  #L3f651e.  if v0 != v1 then goto L3f653c;
  #L3f6522.  v0:= new `io.reactivex.internal.operators.maybe.MaybeToFlowable`;
  #L3f6526.  v1:= 0I;
  #L3f6528.  v2:= v2[v1] @kind object;
  #L3f652c.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeToFlowable;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3f6532.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f6538.  v2:= temp @kind object;
  #L3f653a.  return v2 @kind object;
  #L3f653c.  v0:= new `io.reactivex.internal.operators.maybe.MaybeMergeArray`;
  #L3f6540.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray;.<init>:([Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3f6546.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f654c.  v2:= temp @kind object;
  #L3f654e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeArrayDelayError`(`io.reactivex.MaybeSource`[] v3 @kind object) @signature `Lio/reactivex/Maybe;.mergeArrayDelayError:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f6560.  v0:= length @variable v3;
  #L3f6562.  if v0 != 0 then goto L3f6570;
  #L3f6566.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3f656c.  v3:= temp @kind object;
  #L3f656e.  return v3 @kind object;
  #L3f6570.  call temp:= `fromArray`(v3) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3f6576.  v0:= temp @kind object;
  #L3f6578.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L3f657e.  v1:= temp @kind object;
  #L3f6580.  v2:= 1I;
  #L3f6582.  v3:= length @variable v3;
  #L3f6584.  call temp:= `flatMap`(v0, v1, v2, v3) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f658a.  v3:= temp @kind object;
  #L3f658c.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/Maybe;.mergeDelayError:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f65a0.  v0:= "source1 is null" @kind object;
  #L3f65a4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f65aa.  v0:= "source2 is null" @kind object;
  #L3f65ae.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f65b4.  v0:= 2I;
  #L3f65b6.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3f65ba.  v1:= 0I;
  #L3f65bc.  v0[v1]:= v2 @kind object;
  #L3f65c0.  v2:= 1I;
  #L3f65c2.  v0[v2]:= v3 @kind object;
  #L3f65c6.  call temp:= `mergeArrayDelayError`(v0) @signature `Lio/reactivex/Maybe;.mergeArrayDelayError:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L3f65cc.  v2:= temp @kind object;
  #L3f65ce.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object) @signature `Lio/reactivex/Maybe;.mergeDelayError:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f65e0.  v0:= "source1 is null" @kind object;
  #L3f65e4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f65ea.  v0:= "source2 is null" @kind object;
  #L3f65ee.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f65f4.  v0:= "source3 is null" @kind object;
  #L3f65f8.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f65fe.  v0:= 3I;
  #L3f6600.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3f6604.  v1:= 0I;
  #L3f6606.  v0[v1]:= v2 @kind object;
  #L3f660a.  v2:= 1I;
  #L3f660c.  v0[v2]:= v3 @kind object;
  #L3f6610.  v2:= 2I;
  #L3f6612.  v0[v2]:= v4 @kind object;
  #L3f6616.  call temp:= `mergeArrayDelayError`(v0) @signature `Lio/reactivex/Maybe;.mergeArrayDelayError:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L3f661c.  v2:= temp @kind object;
  #L3f661e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.MaybeSource` v5 @kind object) @signature `Lio/reactivex/Maybe;.mergeDelayError:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f6630.  v0:= "source1 is null" @kind object;
  #L3f6634.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f663a.  v0:= "source2 is null" @kind object;
  #L3f663e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6644.  v0:= "source3 is null" @kind object;
  #L3f6648.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f664e.  v0:= "source4 is null" @kind object;
  #L3f6652.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6658.  v0:= 4I;
  #L3f665a.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3f665e.  v1:= 0I;
  #L3f6660.  v0[v1]:= v2 @kind object;
  #L3f6664.  v2:= 1I;
  #L3f6666.  v0[v2]:= v3 @kind object;
  #L3f666a.  v2:= 2I;
  #L3f666c.  v0[v2]:= v4 @kind object;
  #L3f6670.  v2:= 3I;
  #L3f6672.  v0[v2]:= v5 @kind object;
  #L3f6676.  call temp:= `mergeArrayDelayError`(v0) @signature `Lio/reactivex/Maybe;.mergeArrayDelayError:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L3f667c.  v2:= temp @kind object;
  #L3f667e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`java.lang.Iterable` v2 @kind object) @signature `Lio/reactivex/Maybe;.mergeDelayError:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f6690.  call temp:= `fromIterable`(v2) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L3f6696.  v2:= temp @kind object;
  #L3f6698.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L3f669e.  v0:= temp @kind object;
  #L3f66a0.  v1:= 1I;
  #L3f66a2.  call temp:= `flatMap`(v2, v0, v1) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L3f66a8.  v2:= temp @kind object;
  #L3f66aa.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Maybe;.mergeDelayError:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f66bc.  call temp:= `fromPublisher`(v2) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f66c2.  v2:= temp @kind object;
  #L3f66c4.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L3f66ca.  v0:= temp @kind object;
  #L3f66cc.  v1:= 1I;
  #L3f66ce.  call temp:= `flatMap`(v2, v0, v1) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L3f66d4.  v2:= temp @kind object;
  #L3f66d6.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `never`() @signature `Lio/reactivex/Maybe;.never:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f7150.  v0:= `@@io.reactivex.internal.operators.maybe.MaybeNever.INSTANCE` @type ^`io.reactivex.internal.operators.maybe.MaybeNever` @kind object;
  #L3f7154.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f715a.  v0:= temp @kind object;
  #L3f715c.  return v0 @kind object;
}
procedure `io.reactivex.Single` `sequenceEqual`(`io.reactivex.MaybeSource` v1 @kind object, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/Maybe;.sequenceEqual:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f7e24.  call temp:= `equalsPredicate`() @signature `Lio/reactivex/internal/functions/ObjectHelper;.equalsPredicate:()Lio/reactivex/functions/BiPredicate;` @kind static;
  #L3f7e2a.  v0:= temp @kind object;
  #L3f7e2c.  call temp:= `sequenceEqual`(v1, v2, v0) @signature `Lio/reactivex/Maybe;.sequenceEqual:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/BiPredicate;)Lio/reactivex/Single;` @kind static;
  #L3f7e32.  v1:= temp @kind object;
  #L3f7e34.  return v1 @kind object;
}
procedure `io.reactivex.Single` `sequenceEqual`(`io.reactivex.MaybeSource` v1 @kind object, `io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/Maybe;.sequenceEqual:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/BiPredicate;)Lio/reactivex/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f7e48.  v0:= "source1 is null" @kind object;
  #L3f7e4c.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7e52.  v0:= "source2 is null" @kind object;
  #L3f7e56.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7e5c.  v0:= "isEqual is null" @kind object;
  #L3f7e60.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7e66.  v0:= new `io.reactivex.internal.operators.maybe.MaybeEqualSingle`;
  #L3f7e6a.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/BiPredicate;)V` @kind direct;
  #L3f7e70.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3f7e76.  v1:= temp @kind object;
  #L3f7e78.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `timer`(`long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/Maybe;.timer:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f76a4.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f76aa.  v0:= temp @kind object;
  #L3f76ac.  call temp:= `timer`(v1, v3, v0) @signature `Lio/reactivex/Maybe;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @kind static;
  #L3f76b2.  v1:= temp @kind object;
  #L3f76b4.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `timer`(`long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object) @signature `Lio/reactivex/Maybe;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f76c8.  v0:= "unit is null" @kind object;
  #L3f76cc.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f76d2.  v0:= "scheduler is null" @kind object;
  #L3f76d6.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f76dc.  v0:= new `io.reactivex.internal.operators.maybe.MaybeTimer`;
  #L3f76e0.  v1:= 0L;
  #L3f76e4.  call temp:= `max`(v1, v3) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L3f76ea.  v3:= temp @kind wide;
  #L3f76ec.  call `<init>`(v0, v3, v5, v6) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimer;.<init>:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L3f76f2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f76f8.  v3:= temp @kind object;
  #L3f76fa.  return v3 @kind object;
}
procedure `io.reactivex.Maybe` `unsafeCreate`(`io.reactivex.MaybeSource` v1 @kind object) @signature `Lio/reactivex/Maybe;.unsafeCreate:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f770c.  v0:= instanceof @variable v1 @type ^`io.reactivex.Maybe` @kind boolean;
  #L3f7710.  if v0 != 0 then goto L3f7732;
  #L3f7714.  v0:= "onSubscribe is null" @kind object;
  #L3f7718.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f771e.  v0:= new `io.reactivex.internal.operators.maybe.MaybeUnsafeCreate`;
  #L3f7722.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeUnsafeCreate;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3f7728.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f772e.  v1:= temp @kind object;
  #L3f7730.  return v1 @kind object;
  #L3f7732.  v1:= new `java.lang.IllegalArgumentException`;
  #L3f7736.  v0:= "unsafeCreate(Maybe) should be upgraded" @kind object;
  #L3f773a.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f7740.  throw v1;
}
procedure `io.reactivex.Maybe` `using`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Maybe;.using:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Consumer;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f7784.  v0:= 1I;
  #L3f7786.  call temp:= `using`(v1, v2, v3, v0) @signature `Lio/reactivex/Maybe;.using:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Consumer;Z)Lio/reactivex/Maybe;` @kind static;
  #L3f778c.  v1:= temp @kind object;
  #L3f778e.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `using`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/Maybe;.using:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Consumer;Z)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f77a0.  v0:= "resourceSupplier is null" @kind object;
  #L3f77a4.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f77aa.  v0:= "sourceSupplier is null" @kind object;
  #L3f77ae.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f77b4.  v0:= "disposer is null" @kind object;
  #L3f77b8.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f77be.  v0:= new `io.reactivex.internal.operators.maybe.MaybeUsing`;
  #L3f77c2.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing;.<init>:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Consumer;Z)V` @kind direct;
  #L3f77c8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f77ce.  v1:= temp @kind object;
  #L3f77d0.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `wrap`(`io.reactivex.MaybeSource` v1 @kind object) @signature `Lio/reactivex/Maybe;.wrap:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f77e4.  v0:= instanceof @variable v1 @type ^`io.reactivex.Maybe` @kind boolean;
  #L3f77e8.  if v0 == 0 then goto L3f77fa;
  #L3f77ec.  v1:= (`io.reactivex.Maybe`) v1 @kind object;
  #L3f77f0.  call temp:= `onAssembly`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f77f6.  v1:= temp @kind object;
  #L3f77f8.  return v1 @kind object;
  #L3f77fa.  v0:= "onSubscribe is null" @kind object;
  #L3f77fe.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7804.  v0:= new `io.reactivex.internal.operators.maybe.MaybeUnsafeCreate`;
  #L3f7808.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeUnsafeCreate;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3f780e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f7814.  v1:= temp @kind object;
  #L3f7816.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `zip`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.MaybeSource` v5 @kind object, `io.reactivex.MaybeSource` v6 @kind object, `io.reactivex.MaybeSource` v7 @kind object, `io.reactivex.MaybeSource` v8 @kind object, `io.reactivex.MaybeSource` v9 @kind object, `io.reactivex.MaybeSource` v10 @kind object, `io.reactivex.functions.Function9` v11 @kind object) @signature `Lio/reactivex/Maybe;.zip:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function9;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f7828.  v0:= "source1 is null" @kind object;
  #L3f782c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7832.  v0:= "source2 is null" @kind object;
  #L3f7836.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f783c.  v0:= "source3 is null" @kind object;
  #L3f7840.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7846.  v0:= "source4 is null" @kind object;
  #L3f784a.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7850.  v0:= "source5 is null" @kind object;
  #L3f7854.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f785a.  v0:= "source6 is null" @kind object;
  #L3f785e.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7864.  v0:= "source7 is null" @kind object;
  #L3f7868.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f786e.  v0:= "source8 is null" @kind object;
  #L3f7872.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7878.  v0:= "source9 is null" @kind object;
  #L3f787c.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7882.  call temp:= `toFunction`(v11) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function9;)Lio/reactivex/functions/Function;` @kind static;
  #L3f7888.  v11:= temp @kind object;
  #L3f788a.  v0:= 9I;
  #L3f788e.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3f7892.  v1:= 0I;
  #L3f7894.  v0[v1]:= v2 @kind object;
  #L3f7898.  v2:= 1I;
  #L3f789a.  v0[v2]:= v3 @kind object;
  #L3f789e.  v2:= 2I;
  #L3f78a0.  v0[v2]:= v4 @kind object;
  #L3f78a4.  v2:= 3I;
  #L3f78a6.  v0[v2]:= v5 @kind object;
  #L3f78aa.  v2:= 4I;
  #L3f78ac.  v0[v2]:= v6 @kind object;
  #L3f78b0.  v2:= 5I;
  #L3f78b2.  v0[v2]:= v7 @kind object;
  #L3f78b6.  v2:= 6I;
  #L3f78b8.  v0[v2]:= v8 @kind object;
  #L3f78bc.  v2:= 7I;
  #L3f78be.  v0[v2]:= v9 @kind object;
  #L3f78c2.  v2:= 8I;
  #L3f78c6.  v0[v2]:= v10 @kind object;
  #L3f78ca.  call temp:= `zipArray`(v11, v0) @signature `Lio/reactivex/Maybe;.zipArray:(Lio/reactivex/functions/Function;[Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L3f78d0.  v2:= temp @kind object;
  #L3f78d2.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `zip`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.MaybeSource` v5 @kind object, `io.reactivex.MaybeSource` v6 @kind object, `io.reactivex.MaybeSource` v7 @kind object, `io.reactivex.MaybeSource` v8 @kind object, `io.reactivex.MaybeSource` v9 @kind object, `io.reactivex.functions.Function8` v10 @kind object) @signature `Lio/reactivex/Maybe;.zip:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function8;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f78e4.  v0:= "source1 is null" @kind object;
  #L3f78e8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f78ee.  v0:= "source2 is null" @kind object;
  #L3f78f2.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f78f8.  v0:= "source3 is null" @kind object;
  #L3f78fc.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7902.  v0:= "source4 is null" @kind object;
  #L3f7906.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f790c.  v0:= "source5 is null" @kind object;
  #L3f7910.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7916.  v0:= "source6 is null" @kind object;
  #L3f791a.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7920.  v0:= "source7 is null" @kind object;
  #L3f7924.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f792a.  v0:= "source8 is null" @kind object;
  #L3f792e.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7934.  call temp:= `toFunction`(v10) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function8;)Lio/reactivex/functions/Function;` @kind static;
  #L3f793a.  v10:= temp @kind object;
  #L3f793c.  v0:= 8I;
  #L3f7940.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3f7944.  v1:= 0I;
  #L3f7946.  v0[v1]:= v2 @kind object;
  #L3f794a.  v2:= 1I;
  #L3f794c.  v0[v2]:= v3 @kind object;
  #L3f7950.  v2:= 2I;
  #L3f7952.  v0[v2]:= v4 @kind object;
  #L3f7956.  v2:= 3I;
  #L3f7958.  v0[v2]:= v5 @kind object;
  #L3f795c.  v2:= 4I;
  #L3f795e.  v0[v2]:= v6 @kind object;
  #L3f7962.  v2:= 5I;
  #L3f7964.  v0[v2]:= v7 @kind object;
  #L3f7968.  v2:= 6I;
  #L3f796a.  v0[v2]:= v8 @kind object;
  #L3f796e.  v2:= 7I;
  #L3f7970.  v0[v2]:= v9 @kind object;
  #L3f7974.  call temp:= `zipArray`(v10, v0) @signature `Lio/reactivex/Maybe;.zipArray:(Lio/reactivex/functions/Function;[Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L3f797a.  v2:= temp @kind object;
  #L3f797c.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `zip`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.MaybeSource` v5 @kind object, `io.reactivex.MaybeSource` v6 @kind object, `io.reactivex.MaybeSource` v7 @kind object, `io.reactivex.MaybeSource` v8 @kind object, `io.reactivex.functions.Function7` v9 @kind object) @signature `Lio/reactivex/Maybe;.zip:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function7;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f7990.  v0:= "source1 is null" @kind object;
  #L3f7994.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f799a.  v0:= "source2 is null" @kind object;
  #L3f799e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f79a4.  v0:= "source3 is null" @kind object;
  #L3f79a8.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f79ae.  v0:= "source4 is null" @kind object;
  #L3f79b2.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f79b8.  v0:= "source5 is null" @kind object;
  #L3f79bc.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f79c2.  v0:= "source6 is null" @kind object;
  #L3f79c6.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f79cc.  v0:= "source7 is null" @kind object;
  #L3f79d0.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f79d6.  call temp:= `toFunction`(v9) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function7;)Lio/reactivex/functions/Function;` @kind static;
  #L3f79dc.  v9:= temp @kind object;
  #L3f79de.  v0:= 7I;
  #L3f79e0.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3f79e4.  v1:= 0I;
  #L3f79e6.  v0[v1]:= v2 @kind object;
  #L3f79ea.  v2:= 1I;
  #L3f79ec.  v0[v2]:= v3 @kind object;
  #L3f79f0.  v2:= 2I;
  #L3f79f2.  v0[v2]:= v4 @kind object;
  #L3f79f6.  v2:= 3I;
  #L3f79f8.  v0[v2]:= v5 @kind object;
  #L3f79fc.  v2:= 4I;
  #L3f79fe.  v0[v2]:= v6 @kind object;
  #L3f7a02.  v2:= 5I;
  #L3f7a04.  v0[v2]:= v7 @kind object;
  #L3f7a08.  v2:= 6I;
  #L3f7a0a.  v0[v2]:= v8 @kind object;
  #L3f7a0e.  call temp:= `zipArray`(v9, v0) @signature `Lio/reactivex/Maybe;.zipArray:(Lio/reactivex/functions/Function;[Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L3f7a14.  v2:= temp @kind object;
  #L3f7a16.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `zip`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.MaybeSource` v5 @kind object, `io.reactivex.MaybeSource` v6 @kind object, `io.reactivex.MaybeSource` v7 @kind object, `io.reactivex.functions.Function6` v8 @kind object) @signature `Lio/reactivex/Maybe;.zip:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function6;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f7a28.  v0:= "source1 is null" @kind object;
  #L3f7a2c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7a32.  v0:= "source2 is null" @kind object;
  #L3f7a36.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7a3c.  v0:= "source3 is null" @kind object;
  #L3f7a40.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7a46.  v0:= "source4 is null" @kind object;
  #L3f7a4a.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7a50.  v0:= "source5 is null" @kind object;
  #L3f7a54.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7a5a.  v0:= "source6 is null" @kind object;
  #L3f7a5e.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7a64.  call temp:= `toFunction`(v8) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function6;)Lio/reactivex/functions/Function;` @kind static;
  #L3f7a6a.  v8:= temp @kind object;
  #L3f7a6c.  v0:= 6I;
  #L3f7a6e.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3f7a72.  v1:= 0I;
  #L3f7a74.  v0[v1]:= v2 @kind object;
  #L3f7a78.  v2:= 1I;
  #L3f7a7a.  v0[v2]:= v3 @kind object;
  #L3f7a7e.  v2:= 2I;
  #L3f7a80.  v0[v2]:= v4 @kind object;
  #L3f7a84.  v2:= 3I;
  #L3f7a86.  v0[v2]:= v5 @kind object;
  #L3f7a8a.  v2:= 4I;
  #L3f7a8c.  v0[v2]:= v6 @kind object;
  #L3f7a90.  v2:= 5I;
  #L3f7a92.  v0[v2]:= v7 @kind object;
  #L3f7a96.  call temp:= `zipArray`(v8, v0) @signature `Lio/reactivex/Maybe;.zipArray:(Lio/reactivex/functions/Function;[Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L3f7a9c.  v2:= temp @kind object;
  #L3f7a9e.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `zip`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.MaybeSource` v5 @kind object, `io.reactivex.MaybeSource` v6 @kind object, `io.reactivex.functions.Function5` v7 @kind object) @signature `Lio/reactivex/Maybe;.zip:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function5;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f7ab0.  v0:= "source1 is null" @kind object;
  #L3f7ab4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7aba.  v0:= "source2 is null" @kind object;
  #L3f7abe.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7ac4.  v0:= "source3 is null" @kind object;
  #L3f7ac8.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7ace.  v0:= "source4 is null" @kind object;
  #L3f7ad2.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7ad8.  v0:= "source5 is null" @kind object;
  #L3f7adc.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7ae2.  call temp:= `toFunction`(v7) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function5;)Lio/reactivex/functions/Function;` @kind static;
  #L3f7ae8.  v7:= temp @kind object;
  #L3f7aea.  v0:= 5I;
  #L3f7aec.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3f7af0.  v1:= 0I;
  #L3f7af2.  v0[v1]:= v2 @kind object;
  #L3f7af6.  v2:= 1I;
  #L3f7af8.  v0[v2]:= v3 @kind object;
  #L3f7afc.  v2:= 2I;
  #L3f7afe.  v0[v2]:= v4 @kind object;
  #L3f7b02.  v2:= 3I;
  #L3f7b04.  v0[v2]:= v5 @kind object;
  #L3f7b08.  v2:= 4I;
  #L3f7b0a.  v0[v2]:= v6 @kind object;
  #L3f7b0e.  call temp:= `zipArray`(v7, v0) @signature `Lio/reactivex/Maybe;.zipArray:(Lio/reactivex/functions/Function;[Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L3f7b14.  v2:= temp @kind object;
  #L3f7b16.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `zip`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.MaybeSource` v5 @kind object, `io.reactivex.functions.Function4` v6 @kind object) @signature `Lio/reactivex/Maybe;.zip:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function4;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f7b28.  v0:= "source1 is null" @kind object;
  #L3f7b2c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7b32.  v0:= "source2 is null" @kind object;
  #L3f7b36.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7b3c.  v0:= "source3 is null" @kind object;
  #L3f7b40.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7b46.  v0:= "source4 is null" @kind object;
  #L3f7b4a.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7b50.  call temp:= `toFunction`(v6) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function4;)Lio/reactivex/functions/Function;` @kind static;
  #L3f7b56.  v6:= temp @kind object;
  #L3f7b58.  v0:= 4I;
  #L3f7b5a.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3f7b5e.  v1:= 0I;
  #L3f7b60.  v0[v1]:= v2 @kind object;
  #L3f7b64.  v2:= 1I;
  #L3f7b66.  v0[v2]:= v3 @kind object;
  #L3f7b6a.  v2:= 2I;
  #L3f7b6c.  v0[v2]:= v4 @kind object;
  #L3f7b70.  v2:= 3I;
  #L3f7b72.  v0[v2]:= v5 @kind object;
  #L3f7b76.  call temp:= `zipArray`(v6, v0) @signature `Lio/reactivex/Maybe;.zipArray:(Lio/reactivex/functions/Function;[Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L3f7b7c.  v2:= temp @kind object;
  #L3f7b7e.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `zip`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.functions.Function3` v5 @kind object) @signature `Lio/reactivex/Maybe;.zip:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function3;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f7b90.  v0:= "source1 is null" @kind object;
  #L3f7b94.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7b9a.  v0:= "source2 is null" @kind object;
  #L3f7b9e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7ba4.  v0:= "source3 is null" @kind object;
  #L3f7ba8.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7bae.  call temp:= `toFunction`(v5) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function3;)Lio/reactivex/functions/Function;` @kind static;
  #L3f7bb4.  v5:= temp @kind object;
  #L3f7bb6.  v0:= 3I;
  #L3f7bb8.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3f7bbc.  v1:= 0I;
  #L3f7bbe.  v0[v1]:= v2 @kind object;
  #L3f7bc2.  v2:= 1I;
  #L3f7bc4.  v0[v2]:= v3 @kind object;
  #L3f7bc8.  v2:= 2I;
  #L3f7bca.  v0[v2]:= v4 @kind object;
  #L3f7bce.  call temp:= `zipArray`(v5, v0) @signature `Lio/reactivex/Maybe;.zipArray:(Lio/reactivex/functions/Function;[Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L3f7bd4.  v2:= temp @kind object;
  #L3f7bd6.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `zip`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.functions.BiFunction` v4 @kind object) @signature `Lio/reactivex/Maybe;.zip:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f7be8.  v0:= "source1 is null" @kind object;
  #L3f7bec.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7bf2.  v0:= "source2 is null" @kind object;
  #L3f7bf6.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7bfc.  call temp:= `toFunction`(v4) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/BiFunction;)Lio/reactivex/functions/Function;` @kind static;
  #L3f7c02.  v4:= temp @kind object;
  #L3f7c04.  v0:= 2I;
  #L3f7c06.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3f7c0a.  v1:= 0I;
  #L3f7c0c.  v0[v1]:= v2 @kind object;
  #L3f7c10.  v2:= 1I;
  #L3f7c12.  v0[v2]:= v3 @kind object;
  #L3f7c16.  call temp:= `zipArray`(v4, v0) @signature `Lio/reactivex/Maybe;.zipArray:(Lio/reactivex/functions/Function;[Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L3f7c1c.  v2:= temp @kind object;
  #L3f7c1e.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `zip`(`java.lang.Iterable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.zip:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f7c30.  v0:= "zipper is null" @kind object;
  #L3f7c34.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7c3a.  v0:= "sources is null" @kind object;
  #L3f7c3e.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7c44.  v0:= new `io.reactivex.internal.operators.maybe.MaybeZipIterable`;
  #L3f7c48.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipIterable;.<init>:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3f7c4e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f7c54.  v1:= temp @kind object;
  #L3f7c56.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `zipArray`(`io.reactivex.functions.Function` v1 @kind object, `io.reactivex.MaybeSource`[] v2 @kind object) @signature `Lio/reactivex/Maybe;.zipArray:(Lio/reactivex/functions/Function;[Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f7c68.  v0:= "sources is null" @kind object;
  #L3f7c6c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7c72.  v0:= length @variable v2;
  #L3f7c74.  if v0 != 0 then goto L3f7c82;
  #L3f7c78.  call temp:= `empty`() @signature `Lio/reactivex/Maybe;.empty:()Lio/reactivex/Maybe;` @kind static;
  #L3f7c7e.  v1:= temp @kind object;
  #L3f7c80.  return v1 @kind object;
  #L3f7c82.  v0:= "zipper is null" @kind object;
  #L3f7c86.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7c8c.  v0:= new `io.reactivex.internal.operators.maybe.MaybeZipArray`;
  #L3f7c90.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray;.<init>:([Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3f7c96.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f7c9c.  v1:= temp @kind object;
  #L3f7c9e.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `ambWith`(`io.reactivex.Maybe` v2 @kind this, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/Maybe;.ambWith:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f6858.  v0:= "other is null" @kind object;
  #L3f685c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6862.  v0:= 2I;
  #L3f6864.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L3f6868.  v1:= 0I;
  #L3f686a.  v0[v1]:= v2 @kind object;
  #L3f686e.  v1:= 1I;
  #L3f6870.  v0[v1]:= v3 @kind object;
  #L3f6874.  call temp:= `ambArray`(v0) @signature `Lio/reactivex/Maybe;.ambArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L3f687a.  v3:= temp @kind object;
  #L3f687c.  return v3 @kind object;
}
procedure `java.lang.Object` `blockingGet`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.blockingGet:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f7fec.  v0:= new `io.reactivex.internal.observers.BlockingMultiObserver`;
  #L3f7ff0.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.<init>:()V` @kind direct;
  #L3f7ff6.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind virtual;
  #L3f7ffc.  call temp:= `blockingGet`(v0) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.blockingGet:()Ljava/lang/Object;` @kind virtual;
  #L3f8002.  v0:= temp @kind object;
  #L3f8004.  return v0 @kind object;
}
procedure `java.lang.Object` `blockingGet`(`io.reactivex.Maybe` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Maybe;.blockingGet:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f8018.  v0:= "defaultValue is null" @kind object;
  #L3f801c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f8022.  v0:= new `io.reactivex.internal.observers.BlockingMultiObserver`;
  #L3f8026.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.<init>:()V` @kind direct;
  #L3f802c.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind virtual;
  #L3f8032.  call temp:= `blockingGet`(v0, v2) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.blockingGet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f8038.  v2:= temp @kind object;
  #L3f803a.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `cache`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.cache:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f6890.  v0:= new `io.reactivex.internal.operators.maybe.MaybeCache`;
  #L3f6894.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3f689a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f68a0.  v0:= temp @kind object;
  #L3f68a2.  return v0 @kind object;
}
procedure `io.reactivex.Maybe` `cast`(`io.reactivex.Maybe` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lio/reactivex/Maybe;.cast:(Ljava/lang/Class;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f68b4.  v0:= "clazz is null" @kind object;
  #L3f68b8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f68be.  call temp:= `castFunction`(v2) @signature `Lio/reactivex/internal/functions/Functions;.castFunction:(Ljava/lang/Class;)Lio/reactivex/functions/Function;` @kind static;
  #L3f68c4.  v2:= temp @kind object;
  #L3f68c6.  call temp:= `map`(v1, v2) @signature `Lio/reactivex/Maybe;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @kind virtual;
  #L3f68cc.  v2:= temp @kind object;
  #L3f68ce.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `compose`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.MaybeTransformer` v2 @kind object) @signature `Lio/reactivex/Maybe;.compose:(Lio/reactivex/MaybeTransformer;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f68e0.  v0:= "transformer is null" @kind object;
  #L3f68e4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f68ea.  v2:= temp @kind object;
  #L3f68ec.  v2:= (`io.reactivex.MaybeTransformer`) v2 @kind object;
  #L3f68f0.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/MaybeTransformer;.apply:(Lio/reactivex/Maybe;)Lio/reactivex/MaybeSource;` @kind interface;
  #L3f68f6.  v2:= temp @kind object;
  #L3f68f8.  call temp:= `wrap`(v2) @signature `Lio/reactivex/Maybe;.wrap:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L3f68fe.  v2:= temp @kind object;
  #L3f6900.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `concatMap`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.concatMap:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f6914.  v0:= "mapper is null" @kind object;
  #L3f6918.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f691e.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatten`;
  #L3f6922.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatten;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3f6928.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f692e.  v2:= temp @kind object;
  #L3f6930.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatWith`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/Maybe;.concatWith:(Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f6304.  v0:= "other is null" @kind object;
  #L3f6308.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f630e.  call temp:= `concat`(v1, v2) @signature `Lio/reactivex/Maybe;.concat:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L3f6314.  v2:= temp @kind object;
  #L3f6316.  return v2 @kind object;
}
procedure `io.reactivex.Single` `contains`(`io.reactivex.Maybe` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Maybe;.contains:(Ljava/lang/Object;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f7d7c.  v0:= "item is null" @kind object;
  #L3f7d80.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7d86.  v0:= new `io.reactivex.internal.operators.maybe.MaybeContains`;
  #L3f7d8a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeContains;.<init>:(Lio/reactivex/MaybeSource;Ljava/lang/Object;)V` @kind direct;
  #L3f7d90.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3f7d96.  v2:= temp @kind object;
  #L3f7d98.  return v2 @kind object;
}
procedure `io.reactivex.Single` `count`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.count:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f7dac.  v0:= new `io.reactivex.internal.operators.maybe.MaybeCount`;
  #L3f7db0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeCount;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3f7db6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3f7dbc.  v0:= temp @kind object;
  #L3f7dbe.  return v0 @kind object;
}
procedure `io.reactivex.Maybe` `defaultIfEmpty`(`io.reactivex.Maybe` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Maybe;.defaultIfEmpty:(Ljava/lang/Object;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f6974.  v0:= "item is null" @kind object;
  #L3f6978.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f697e.  call temp:= `just`(v2) @signature `Lio/reactivex/Maybe;.just:(Ljava/lang/Object;)Lio/reactivex/Maybe;` @kind static;
  #L3f6984.  v2:= temp @kind object;
  #L3f6986.  call temp:= `switchIfEmpty`(v1, v2) @signature `Lio/reactivex/Maybe;.switchIfEmpty:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind virtual;
  #L3f698c.  v2:= temp @kind object;
  #L3f698e.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `delay`(`io.reactivex.Maybe` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Maybe;.delay:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f69d0.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f69d6.  v0:= temp @kind object;
  #L3f69d8.  call temp:= `delay`(v1, v2, v4, v0) @signature `Lio/reactivex/Maybe;.delay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @kind virtual;
  #L3f69de.  v2:= temp @kind object;
  #L3f69e0.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `delay`(`io.reactivex.Maybe` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object) @signature `Lio/reactivex/Maybe;.delay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f69f4.  v0:= "unit is null" @kind object;
  #L3f69f8.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f69fe.  v0:= "scheduler is null" @kind object;
  #L3f6a02.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6a08.  v0:= new `io.reactivex.internal.operators.maybe.MaybeDelay`;
  #L3f6a0c.  v1:= 0L;
  #L3f6a10.  call temp:= `max`(v1, v8) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L3f6a16.  v3:= temp @kind wide;
  #L3f6a18.  v1:= v0 @kind object;
  #L3f6a1a.  v2:= v7 @kind object;
  #L3f6a1c.  v5:= v10 @kind object;
  #L3f6a1e.  v6:= v11 @kind object;
  #L3f6a20.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelay;.<init>:(Lio/reactivex/MaybeSource;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L3f6a26.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f6a2c.  v8:= temp @kind object;
  #L3f6a2e.  return v8 @kind object;
}
procedure `io.reactivex.Maybe` `delay`(`io.reactivex.Maybe` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Maybe;.delay:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f6a40.  v0:= "delayIndicator is null" @kind object;
  #L3f6a44.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6a4a.  v0:= new `io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher`;
  #L3f6a4e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher;.<init>:(Lio/reactivex/MaybeSource;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3f6a54.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f6a5a.  v2:= temp @kind object;
  #L3f6a5c.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `delaySubscription`(`io.reactivex.Maybe` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Maybe;.delaySubscription:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f6a70.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f6a76.  v0:= temp @kind object;
  #L3f6a78.  call temp:= `delaySubscription`(v1, v2, v4, v0) @signature `Lio/reactivex/Maybe;.delaySubscription:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @kind virtual;
  #L3f6a7e.  v2:= temp @kind object;
  #L3f6a80.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `delaySubscription`(`io.reactivex.Maybe` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `io.reactivex.Scheduler` v4 @kind object) @signature `Lio/reactivex/Maybe;.delaySubscription:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3f6a94.  call temp:= `timer`(v1, v3, v4) @signature `Lio/reactivex/Flowable;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind static;
  #L3f6a9a.  v1:= temp @kind object;
  #L3f6a9c.  call temp:= `delaySubscription`(v0, v1) @signature `Lio/reactivex/Maybe;.delaySubscription:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Maybe;` @kind virtual;
  #L3f6aa2.  v1:= temp @kind object;
  #L3f6aa4.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `delaySubscription`(`io.reactivex.Maybe` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Maybe;.delaySubscription:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f6ab8.  v0:= "subscriptionIndicator is null" @kind object;
  #L3f6abc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6ac2.  v0:= new `io.reactivex.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher`;
  #L3f6ac6.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelaySubscriptionOtherPublisher;.<init>:(Lio/reactivex/MaybeSource;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3f6acc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f6ad2.  v2:= temp @kind object;
  #L3f6ad4.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `doAfterSuccess`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object) @signature `Lio/reactivex/Maybe;.doAfterSuccess:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f6ae8.  v0:= "doAfterSuccess is null" @kind object;
  #L3f6aec.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6af2.  v0:= new `io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess`;
  #L3f6af6.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoAfterSuccess;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Consumer;)V` @kind direct;
  #L3f6afc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f6b02.  v2:= temp @kind object;
  #L3f6b04.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `doAfterTerminate`(`io.reactivex.Maybe` v9 @kind this, `io.reactivex.functions.Action` v10 @kind object) @signature `Lio/reactivex/Maybe;.doAfterTerminate:(Lio/reactivex/functions/Action;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f6b18.  v8:= new `io.reactivex.internal.operators.maybe.MaybePeek`;
  #L3f6b1c.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3f6b22.  v2:= temp @kind object;
  #L3f6b24.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3f6b2a.  v3:= temp @kind object;
  #L3f6b2c.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3f6b32.  v4:= temp @kind object;
  #L3f6b34.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f6b38.  v0:= "onAfterTerminate is null" @kind object;
  #L3f6b3c.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6b42.  v10:= temp @kind object;
  #L3f6b44.  v6:= v10 @kind object;
  #L3f6b46.  v6:= (`io.reactivex.functions.Action`) v6 @kind object;
  #L3f6b4a.  v0:= v8 @kind object;
  #L3f6b4c.  v1:= v9 @kind object;
  #L3f6b4e.  v5:= v7 @kind object;
  #L3f6b50.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/internal/operators/maybe/MaybePeek;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)V` @kind direct;
  #L3f6b56.  call temp:= `onAssembly`(v8) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f6b5c.  v10:= temp @kind object;
  #L3f6b5e.  return v10 @kind object;
}
procedure `io.reactivex.Maybe` `doFinally`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Action` v2 @kind object) @signature `Lio/reactivex/Maybe;.doFinally:(Lio/reactivex/functions/Action;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f6b70.  v0:= "onFinally is null" @kind object;
  #L3f6b74.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6b7a.  v0:= new `io.reactivex.internal.operators.maybe.MaybeDoFinally`;
  #L3f6b7e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoFinally;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Action;)V` @kind direct;
  #L3f6b84.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f6b8a.  v2:= temp @kind object;
  #L3f6b8c.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `doOnComplete`(`io.reactivex.Maybe` v9 @kind this, `io.reactivex.functions.Action` v10 @kind object) @signature `Lio/reactivex/Maybe;.doOnComplete:(Lio/reactivex/functions/Action;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f6ba0.  v8:= new `io.reactivex.internal.operators.maybe.MaybePeek`;
  #L3f6ba4.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3f6baa.  v2:= temp @kind object;
  #L3f6bac.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3f6bb2.  v3:= temp @kind object;
  #L3f6bb4.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3f6bba.  v4:= temp @kind object;
  #L3f6bbc.  v0:= "onComplete is null" @kind object;
  #L3f6bc0.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6bc6.  v10:= temp @kind object;
  #L3f6bc8.  v5:= v10 @kind object;
  #L3f6bca.  v5:= (`io.reactivex.functions.Action`) v5 @kind object;
  #L3f6bce.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f6bd2.  v0:= v8 @kind object;
  #L3f6bd4.  v1:= v9 @kind object;
  #L3f6bd6.  v6:= v7 @kind object;
  #L3f6bd8.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/internal/operators/maybe/MaybePeek;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)V` @kind direct;
  #L3f6bde.  call temp:= `onAssembly`(v8) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f6be4.  v10:= temp @kind object;
  #L3f6be6.  return v10 @kind object;
}
procedure `io.reactivex.Maybe` `doOnDispose`(`io.reactivex.Maybe` v9 @kind this, `io.reactivex.functions.Action` v10 @kind object) @signature `Lio/reactivex/Maybe;.doOnDispose:(Lio/reactivex/functions/Action;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f6bf8.  v8:= new `io.reactivex.internal.operators.maybe.MaybePeek`;
  #L3f6bfc.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3f6c02.  v2:= temp @kind object;
  #L3f6c04.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3f6c0a.  v3:= temp @kind object;
  #L3f6c0c.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3f6c12.  v4:= temp @kind object;
  #L3f6c14.  v6:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f6c18.  v0:= "onDispose is null" @kind object;
  #L3f6c1c.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6c22.  v10:= temp @kind object;
  #L3f6c24.  v7:= v10 @kind object;
  #L3f6c26.  v7:= (`io.reactivex.functions.Action`) v7 @kind object;
  #L3f6c2a.  v0:= v8 @kind object;
  #L3f6c2c.  v1:= v9 @kind object;
  #L3f6c2e.  v5:= v6 @kind object;
  #L3f6c30.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/internal/operators/maybe/MaybePeek;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)V` @kind direct;
  #L3f6c36.  call temp:= `onAssembly`(v8) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f6c3c.  v10:= temp @kind object;
  #L3f6c3e.  return v10 @kind object;
}
procedure `io.reactivex.Maybe` `doOnError`(`io.reactivex.Maybe` v9 @kind this, `io.reactivex.functions.Consumer` v10 @kind object) @signature `Lio/reactivex/Maybe;.doOnError:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f6c50.  v8:= new `io.reactivex.internal.operators.maybe.MaybePeek`;
  #L3f6c54.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3f6c5a.  v2:= temp @kind object;
  #L3f6c5c.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3f6c62.  v3:= temp @kind object;
  #L3f6c64.  v0:= "onError is null" @kind object;
  #L3f6c68.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6c6e.  v10:= temp @kind object;
  #L3f6c70.  v4:= v10 @kind object;
  #L3f6c72.  v4:= (`io.reactivex.functions.Consumer`) v4 @kind object;
  #L3f6c76.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f6c7a.  v0:= v8 @kind object;
  #L3f6c7c.  v1:= v9 @kind object;
  #L3f6c7e.  v5:= v7 @kind object;
  #L3f6c80.  v6:= v7 @kind object;
  #L3f6c82.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/internal/operators/maybe/MaybePeek;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)V` @kind direct;
  #L3f6c88.  call temp:= `onAssembly`(v8) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f6c8e.  v10:= temp @kind object;
  #L3f6c90.  return v10 @kind object;
}
procedure `io.reactivex.Maybe` `doOnEvent`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.BiConsumer` v2 @kind object) @signature `Lio/reactivex/Maybe;.doOnEvent:(Lio/reactivex/functions/BiConsumer;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f6ca4.  v0:= "onEvent is null" @kind object;
  #L3f6ca8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6cae.  v0:= new `io.reactivex.internal.operators.maybe.MaybeDoOnEvent`;
  #L3f6cb2.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoOnEvent;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/BiConsumer;)V` @kind direct;
  #L3f6cb8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f6cbe.  v2:= temp @kind object;
  #L3f6cc0.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `doOnSubscribe`(`io.reactivex.Maybe` v9 @kind this, `io.reactivex.functions.Consumer` v10 @kind object) @signature `Lio/reactivex/Maybe;.doOnSubscribe:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f6cd4.  v8:= new `io.reactivex.internal.operators.maybe.MaybePeek`;
  #L3f6cd8.  v0:= "onSubscribe is null" @kind object;
  #L3f6cdc.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6ce2.  v10:= temp @kind object;
  #L3f6ce4.  v2:= v10 @kind object;
  #L3f6ce6.  v2:= (`io.reactivex.functions.Consumer`) v2 @kind object;
  #L3f6cea.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3f6cf0.  v3:= temp @kind object;
  #L3f6cf2.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3f6cf8.  v4:= temp @kind object;
  #L3f6cfa.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f6cfe.  v0:= v8 @kind object;
  #L3f6d00.  v1:= v9 @kind object;
  #L3f6d02.  v5:= v7 @kind object;
  #L3f6d04.  v6:= v7 @kind object;
  #L3f6d06.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/internal/operators/maybe/MaybePeek;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)V` @kind direct;
  #L3f6d0c.  call temp:= `onAssembly`(v8) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f6d12.  v10:= temp @kind object;
  #L3f6d14.  return v10 @kind object;
}
procedure `io.reactivex.Maybe` `doOnSuccess`(`io.reactivex.Maybe` v9 @kind this, `io.reactivex.functions.Consumer` v10 @kind object) @signature `Lio/reactivex/Maybe;.doOnSuccess:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f6d28.  v8:= new `io.reactivex.internal.operators.maybe.MaybePeek`;
  #L3f6d2c.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3f6d32.  v2:= temp @kind object;
  #L3f6d34.  v0:= "onSubscribe is null" @kind object;
  #L3f6d38.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6d3e.  v10:= temp @kind object;
  #L3f6d40.  v3:= v10 @kind object;
  #L3f6d42.  v3:= (`io.reactivex.functions.Consumer`) v3 @kind object;
  #L3f6d46.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3f6d4c.  v4:= temp @kind object;
  #L3f6d4e.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f6d52.  v0:= v8 @kind object;
  #L3f6d54.  v1:= v9 @kind object;
  #L3f6d56.  v5:= v7 @kind object;
  #L3f6d58.  v6:= v7 @kind object;
  #L3f6d5a.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/internal/operators/maybe/MaybePeek;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)V` @kind direct;
  #L3f6d60.  call temp:= `onAssembly`(v8) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f6d66.  v10:= temp @kind object;
  #L3f6d68.  return v10 @kind object;
}
procedure `io.reactivex.Maybe` `filter`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/Maybe;.filter:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f6dfc.  v0:= "predicate is null" @kind object;
  #L3f6e00.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6e06.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFilter`;
  #L3f6e0a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFilter;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L3f6e10.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f6e16.  v2:= temp @kind object;
  #L3f6e18.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `flatMap`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.flatMap:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f6e2c.  v0:= "mapper is null" @kind object;
  #L3f6e30.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6e36.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatten`;
  #L3f6e3a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatten;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3f6e40.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f6e46.  v2:= temp @kind object;
  #L3f6e48.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `flatMap`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/Maybe;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f6e5c.  v0:= "mapper is null" @kind object;
  #L3f6e60.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6e66.  v0:= "resultSelector is null" @kind object;
  #L3f6e6a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6e70.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapBiSelector`;
  #L3f6e74.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapBiSelector;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L3f6e7a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f6e80.  v2:= temp @kind object;
  #L3f6e82.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `flatMap`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/Maybe;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f6e94.  v0:= "onSuccessMapper is null" @kind object;
  #L3f6e98.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6e9e.  v0:= "onErrorMapper is null" @kind object;
  #L3f6ea2.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6ea8.  v0:= "onCompleteSupplier is null" @kind object;
  #L3f6eac.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6eb2.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification`;
  #L3f6eb6.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3f6ebc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f6ec2.  v2:= temp @kind object;
  #L3f6ec4.  return v2 @kind object;
}
procedure `io.reactivex.Completable` `flatMapCompletable`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.flatMapCompletable:(Lio/reactivex/functions/Function;)Lio/reactivex/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5f94.  v0:= "mapper is null" @kind object;
  #L3f5f98.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f5f9e.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable`;
  #L3f5fa2.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapCompletable;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3f5fa8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Completable;)Lio/reactivex/Completable;` @kind static;
  #L3f5fae.  v2:= temp @kind object;
  #L3f5fb0.  return v2 @kind object;
}
procedure `io.reactivex.Observable` `flatMapObservable`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.flatMapObservable:(Lio/reactivex/functions/Function;)Lio/reactivex/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f7cec.  call temp:= `toObservable`(v1) @signature `Lio/reactivex/Maybe;.toObservable:()Lio/reactivex/Observable;` @kind virtual;
  #L3f7cf2.  v0:= temp @kind object;
  #L3f7cf4.  call temp:= `flatMap`(v0, v2) @signature `Lio/reactivex/Observable;.flatMap:(Lio/reactivex/functions/Function;)Lio/reactivex/Observable;` @kind virtual;
  #L3f7cfa.  v2:= temp @kind object;
  #L3f7cfc.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flatMapPublisher`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.flatMapPublisher:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f6328.  call temp:= `toFlowable`(v1) @signature `Lio/reactivex/Maybe;.toFlowable:()Lio/reactivex/Flowable;` @kind virtual;
  #L3f632e.  v0:= temp @kind object;
  #L3f6330.  call temp:= `flatMap`(v0, v2) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f6336.  v2:= temp @kind object;
  #L3f6338.  return v2 @kind object;
}
procedure `io.reactivex.Single` `flatMapSingle`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.flatMapSingle:(Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f7dd0.  v0:= "mapper is null" @kind object;
  #L3f7dd4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7dda.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapSingle`;
  #L3f7dde.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3f7de4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3f7dea.  v2:= temp @kind object;
  #L3f7dec.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `flatMapSingleElement`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.flatMapSingleElement:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f6ed8.  v0:= "mapper is null" @kind object;
  #L3f6edc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6ee2.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement`;
  #L3f6ee6.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3f6eec.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f6ef2.  v2:= temp @kind object;
  #L3f6ef4.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flattenAsFlowable`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.flattenAsFlowable:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f634c.  v0:= "mapper is null" @kind object;
  #L3f6350.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f6356.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable`;
  #L3f635a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3f6360.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f6366.  v2:= temp @kind object;
  #L3f6368.  return v2 @kind object;
}
procedure `io.reactivex.Observable` `flattenAsObservable`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.flattenAsObservable:(Lio/reactivex/functions/Function;)Lio/reactivex/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f7d10.  v0:= "mapper is null" @kind object;
  #L3f7d14.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7d1a.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable`;
  #L3f7d1e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3f7d24.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Observable;)Lio/reactivex/Observable;` @kind static;
  #L3f7d2a.  v2:= temp @kind object;
  #L3f7d2c.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `hide`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.hide:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f7064.  v0:= new `io.reactivex.internal.operators.maybe.MaybeHide`;
  #L3f7068.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeHide;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3f706e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f7074.  v0:= temp @kind object;
  #L3f7076.  return v0 @kind object;
}
procedure `io.reactivex.Completable` `ignoreElement`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.ignoreElement:()Lio/reactivex/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5fc4.  v0:= new `io.reactivex.internal.operators.maybe.MaybeIgnoreElementCompletable`;
  #L3f5fc8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeIgnoreElementCompletable;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3f5fce.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Completable;)Lio/reactivex/Completable;` @kind static;
  #L3f5fd4.  v0:= temp @kind object;
  #L3f5fd6.  return v0 @kind object;
}
procedure `io.reactivex.Single` `isEmpty`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.isEmpty:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f7e00.  v0:= new `io.reactivex.internal.operators.maybe.MaybeIsEmptySingle`;
  #L3f7e04.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeIsEmptySingle;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3f7e0a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3f7e10.  v0:= temp @kind object;
  #L3f7e12.  return v0 @kind object;
}
procedure `io.reactivex.Maybe` `lift`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.MaybeOperator` v2 @kind object) @signature `Lio/reactivex/Maybe;.lift:(Lio/reactivex/MaybeOperator;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f70b8.  v0:= "onLift is null" @kind object;
  #L3f70bc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f70c2.  v0:= new `io.reactivex.internal.operators.maybe.MaybeLift`;
  #L3f70c6.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeLift;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeOperator;)V` @kind direct;
  #L3f70cc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f70d2.  v2:= temp @kind object;
  #L3f70d4.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `map`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f70e8.  v0:= "mapper is null" @kind object;
  #L3f70ec.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f70f2.  v0:= new `io.reactivex.internal.operators.maybe.MaybeMap`;
  #L3f70f6.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeMap;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3f70fc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f7102.  v2:= temp @kind object;
  #L3f7104.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeWith`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/Maybe;.mergeWith:(Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f66e8.  v0:= "other is null" @kind object;
  #L3f66ec.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f66f2.  call temp:= `merge`(v1, v2) @signature `Lio/reactivex/Maybe;.merge:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L3f66f8.  v2:= temp @kind object;
  #L3f66fa.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `observeOn`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/Maybe;.observeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f7170.  v0:= "scheduler is null" @kind object;
  #L3f7174.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f717a.  v0:= new `io.reactivex.internal.operators.maybe.MaybeObserveOn`;
  #L3f717e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/Scheduler;)V` @kind direct;
  #L3f7184.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f718a.  v2:= temp @kind object;
  #L3f718c.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `ofType`(`io.reactivex.Maybe` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lio/reactivex/Maybe;.ofType:(Ljava/lang/Class;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f71a0.  v0:= "clazz is null" @kind object;
  #L3f71a4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f71aa.  call temp:= `isInstanceOf`(v2) @signature `Lio/reactivex/internal/functions/Functions;.isInstanceOf:(Ljava/lang/Class;)Lio/reactivex/functions/Predicate;` @kind static;
  #L3f71b0.  v0:= temp @kind object;
  #L3f71b2.  call temp:= `filter`(v1, v0) @signature `Lio/reactivex/Maybe;.filter:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @kind virtual;
  #L3f71b8.  v0:= temp @kind object;
  #L3f71ba.  call temp:= `cast`(v0, v2) @signature `Lio/reactivex/Maybe;.cast:(Ljava/lang/Class;)Lio/reactivex/Maybe;` @kind virtual;
  #L3f71c0.  v2:= temp @kind object;
  #L3f71c2.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `onErrorComplete`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.onErrorComplete:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f71d4.  call temp:= `alwaysTrue`() @signature `Lio/reactivex/internal/functions/Functions;.alwaysTrue:()Lio/reactivex/functions/Predicate;` @kind static;
  #L3f71da.  v0:= temp @kind object;
  #L3f71dc.  call temp:= `onErrorComplete`(v1, v0) @signature `Lio/reactivex/Maybe;.onErrorComplete:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @kind virtual;
  #L3f71e2.  v0:= temp @kind object;
  #L3f71e4.  return v0 @kind object;
}
procedure `io.reactivex.Maybe` `onErrorComplete`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/Maybe;.onErrorComplete:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f71f8.  v0:= "predicate is null" @kind object;
  #L3f71fc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7202.  v0:= new `io.reactivex.internal.operators.maybe.MaybeOnErrorComplete`;
  #L3f7206.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorComplete;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L3f720c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f7212.  v2:= temp @kind object;
  #L3f7214.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `onErrorResumeNext`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/Maybe;.onErrorResumeNext:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f7228.  v0:= "next is null" @kind object;
  #L3f722c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7232.  call temp:= `justFunction`(v2) @signature `Lio/reactivex/internal/functions/Functions;.justFunction:(Ljava/lang/Object;)Lio/reactivex/functions/Function;` @kind static;
  #L3f7238.  v2:= temp @kind object;
  #L3f723a.  call temp:= `onErrorResumeNext`(v1, v2) @signature `Lio/reactivex/Maybe;.onErrorResumeNext:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @kind virtual;
  #L3f7240.  v2:= temp @kind object;
  #L3f7242.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `onErrorResumeNext`(`io.reactivex.Maybe` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Maybe;.onErrorResumeNext:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f7254.  v0:= "resumeFunction is null" @kind object;
  #L3f7258.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f725e.  v0:= new `io.reactivex.internal.operators.maybe.MaybeOnErrorNext`;
  #L3f7262.  v1:= 1I;
  #L3f7264.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L3f726a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f7270.  v3:= temp @kind object;
  #L3f7272.  return v3 @kind object;
}
procedure `io.reactivex.Maybe` `onErrorReturn`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.onErrorReturn:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f7284.  v0:= "valueSupplier is null" @kind object;
  #L3f7288.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f728e.  v0:= new `io.reactivex.internal.operators.maybe.MaybeOnErrorReturn`;
  #L3f7292.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorReturn;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3f7298.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f729e.  v2:= temp @kind object;
  #L3f72a0.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `onErrorReturnItem`(`io.reactivex.Maybe` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Maybe;.onErrorReturnItem:(Ljava/lang/Object;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f72b4.  v0:= "item is null" @kind object;
  #L3f72b8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f72be.  call temp:= `justFunction`(v2) @signature `Lio/reactivex/internal/functions/Functions;.justFunction:(Ljava/lang/Object;)Lio/reactivex/functions/Function;` @kind static;
  #L3f72c4.  v2:= temp @kind object;
  #L3f72c6.  call temp:= `onErrorReturn`(v1, v2) @signature `Lio/reactivex/Maybe;.onErrorReturn:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @kind virtual;
  #L3f72cc.  v2:= temp @kind object;
  #L3f72ce.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `onExceptionResumeNext`(`io.reactivex.Maybe` v2 @kind this, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/Maybe;.onExceptionResumeNext:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f72e0.  v0:= "next is null" @kind object;
  #L3f72e4.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f72ea.  v0:= new `io.reactivex.internal.operators.maybe.MaybeOnErrorNext`;
  #L3f72ee.  call temp:= `justFunction`(v3) @signature `Lio/reactivex/internal/functions/Functions;.justFunction:(Ljava/lang/Object;)Lio/reactivex/functions/Function;` @kind static;
  #L3f72f4.  v3:= temp @kind object;
  #L3f72f6.  v1:= 0I;
  #L3f72f8.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L3f72fe.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f7304.  v3:= temp @kind object;
  #L3f7306.  return v3 @kind object;
}
procedure `io.reactivex.Maybe` `onTerminateDetach`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.onTerminateDetach:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f7318.  v0:= new `io.reactivex.internal.operators.maybe.MaybeDetach`;
  #L3f731c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeDetach;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3f7322.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f7328.  v0:= temp @kind object;
  #L3f732a.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `repeat`(`io.reactivex.Maybe` v2 @kind this) @signature `Lio/reactivex/Maybe;.repeat:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f670c.  v0:= 9223372036854775807L;
  #L3f6716.  call temp:= `repeat`(v2, v0) @signature `Lio/reactivex/Maybe;.repeat:(J)Lio/reactivex/Flowable;` @kind virtual;
  #L3f671c.  v0:= temp @kind object;
  #L3f671e.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `repeat`(`io.reactivex.Maybe` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/Maybe;.repeat:(J)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f6730.  call temp:= `toFlowable`(v1) @signature `Lio/reactivex/Maybe;.toFlowable:()Lio/reactivex/Flowable;` @kind virtual;
  #L3f6736.  v0:= temp @kind object;
  #L3f6738.  call temp:= `repeat`(v0, v2) @signature `Lio/reactivex/Flowable;.repeat:(J)Lio/reactivex/Flowable;` @kind virtual;
  #L3f673e.  v2:= temp @kind object;
  #L3f6740.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `repeatUntil`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.BooleanSupplier` v2 @kind object) @signature `Lio/reactivex/Maybe;.repeatUntil:(Lio/reactivex/functions/BooleanSupplier;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f6754.  call temp:= `toFlowable`(v1) @signature `Lio/reactivex/Maybe;.toFlowable:()Lio/reactivex/Flowable;` @kind virtual;
  #L3f675a.  v0:= temp @kind object;
  #L3f675c.  call temp:= `repeatUntil`(v0, v2) @signature `Lio/reactivex/Flowable;.repeatUntil:(Lio/reactivex/functions/BooleanSupplier;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f6762.  v2:= temp @kind object;
  #L3f6764.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `repeatWhen`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.repeatWhen:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f6778.  call temp:= `toFlowable`(v1) @signature `Lio/reactivex/Maybe;.toFlowable:()Lio/reactivex/Flowable;` @kind virtual;
  #L3f677e.  v0:= temp @kind object;
  #L3f6780.  call temp:= `repeatWhen`(v0, v2) @signature `Lio/reactivex/Flowable;.repeatWhen:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f6786.  v2:= temp @kind object;
  #L3f6788.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `retry`(`io.reactivex.Maybe` v3 @kind this) @signature `Lio/reactivex/Maybe;.retry:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3f733c.  call temp:= `alwaysTrue`() @signature `Lio/reactivex/internal/functions/Functions;.alwaysTrue:()Lio/reactivex/functions/Predicate;` @kind static;
  #L3f7342.  v0:= temp @kind object;
  #L3f7344.  v1:= 9223372036854775807L;
  #L3f734e.  call temp:= `retry`(v3, v1, v0) @signature `Lio/reactivex/Maybe;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @kind virtual;
  #L3f7354.  v0:= temp @kind object;
  #L3f7356.  return v0 @kind object;
}
procedure `io.reactivex.Maybe` `retry`(`io.reactivex.Maybe` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/Maybe;.retry:(J)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f73b8.  call temp:= `alwaysTrue`() @signature `Lio/reactivex/internal/functions/Functions;.alwaysTrue:()Lio/reactivex/functions/Predicate;` @kind static;
  #L3f73be.  v0:= temp @kind object;
  #L3f73c0.  call temp:= `retry`(v1, v2, v0) @signature `Lio/reactivex/Maybe;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @kind virtual;
  #L3f73c6.  v2:= temp @kind object;
  #L3f73c8.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `retry`(`io.reactivex.Maybe` v1 @kind this, `long` v2 , `io.reactivex.functions.Predicate` v4 @kind object) @signature `Lio/reactivex/Maybe;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f73dc.  call temp:= `toFlowable`(v1) @signature `Lio/reactivex/Maybe;.toFlowable:()Lio/reactivex/Flowable;` @kind virtual;
  #L3f73e2.  v0:= temp @kind object;
  #L3f73e4.  call temp:= `retry`(v0, v2, v4) @signature `Lio/reactivex/Flowable;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f73ea.  v2:= temp @kind object;
  #L3f73ec.  call temp:= `singleElement`(v2) @signature `Lio/reactivex/Flowable;.singleElement:()Lio/reactivex/Maybe;` @kind virtual;
  #L3f73f2.  v2:= temp @kind object;
  #L3f73f4.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `retry`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.BiPredicate` v2 @kind object) @signature `Lio/reactivex/Maybe;.retry:(Lio/reactivex/functions/BiPredicate;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f7368.  call temp:= `toFlowable`(v1) @signature `Lio/reactivex/Maybe;.toFlowable:()Lio/reactivex/Flowable;` @kind virtual;
  #L3f736e.  v0:= temp @kind object;
  #L3f7370.  call temp:= `retry`(v0, v2) @signature `Lio/reactivex/Flowable;.retry:(Lio/reactivex/functions/BiPredicate;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f7376.  v2:= temp @kind object;
  #L3f7378.  call temp:= `singleElement`(v2) @signature `Lio/reactivex/Flowable;.singleElement:()Lio/reactivex/Maybe;` @kind virtual;
  #L3f737e.  v2:= temp @kind object;
  #L3f7380.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `retry`(`io.reactivex.Maybe` v2 @kind this, `io.reactivex.functions.Predicate` v3 @kind object) @signature `Lio/reactivex/Maybe;.retry:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f7394.  v0:= 9223372036854775807L;
  #L3f739e.  call temp:= `retry`(v2, v0, v3) @signature `Lio/reactivex/Maybe;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @kind virtual;
  #L3f73a4.  v3:= temp @kind object;
  #L3f73a6.  return v3 @kind object;
}
procedure `io.reactivex.Maybe` `retryUntil`(`io.reactivex.Maybe` v2 @kind this, `io.reactivex.functions.BooleanSupplier` v3 @kind object) @signature `Lio/reactivex/Maybe;.retryUntil:(Lio/reactivex/functions/BooleanSupplier;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f7408.  v0:= "stop is null" @kind object;
  #L3f740c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7412.  call temp:= `predicateReverseFor`(v3) @signature `Lio/reactivex/internal/functions/Functions;.predicateReverseFor:(Lio/reactivex/functions/BooleanSupplier;)Lio/reactivex/functions/Predicate;` @kind static;
  #L3f7418.  v3:= temp @kind object;
  #L3f741a.  v0:= 9223372036854775807L;
  #L3f7424.  call temp:= `retry`(v2, v0, v3) @signature `Lio/reactivex/Maybe;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @kind virtual;
  #L3f742a.  v3:= temp @kind object;
  #L3f742c.  return v3 @kind object;
}
procedure `io.reactivex.Maybe` `retryWhen`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.retryWhen:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f7440.  call temp:= `toFlowable`(v1) @signature `Lio/reactivex/Maybe;.toFlowable:()Lio/reactivex/Flowable;` @kind virtual;
  #L3f7446.  v0:= temp @kind object;
  #L3f7448.  call temp:= `retryWhen`(v0, v2) @signature `Lio/reactivex/Flowable;.retryWhen:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f744e.  v2:= temp @kind object;
  #L3f7450.  call temp:= `singleElement`(v2) @signature `Lio/reactivex/Flowable;.singleElement:()Lio/reactivex/Maybe;` @kind virtual;
  #L3f7456.  v2:= temp @kind object;
  #L3f7458.  return v2 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `subscribe`(`io.reactivex.Maybe` v3 @kind this) @signature `Lio/reactivex/Maybe;.subscribe:()Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3f7ee4.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3f7eea.  v0:= temp @kind object;
  #L3f7eec.  v1:= `@@io.reactivex.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3f7ef0.  v2:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f7ef4.  call temp:= `subscribe`(v3, v0, v1, v2) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3f7efa.  v0:= temp @kind object;
  #L3f7efc.  return v0 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `subscribe`(`io.reactivex.Maybe` v2 @kind this, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f7f10.  v0:= `@@io.reactivex.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3f7f14.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f7f18.  call temp:= `subscribe`(v2, v3, v0, v1) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3f7f1e.  v3:= temp @kind object;
  #L3f7f20.  return v3 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `subscribe`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f7f34.  v0:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f7f38.  call temp:= `subscribe`(v1, v2, v3, v0) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3f7f3e.  v2:= temp @kind object;
  #L3f7f40.  return v2 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `subscribe`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `io.reactivex.functions.Action` v4 @kind object) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f7f54.  v0:= "onSuccess is null" @kind object;
  #L3f7f58.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7f5e.  v0:= "onError is null" @kind object;
  #L3f7f62.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7f68.  v0:= "onComplete is null" @kind object;
  #L3f7f6c.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7f72.  v0:= new `io.reactivex.internal.operators.maybe.MaybeCallbackObserver`;
  #L3f7f76.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeCallbackObserver;.<init>:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L3f7f7c.  call temp:= `subscribeWith`(v1, v0) @signature `Lio/reactivex/Maybe;.subscribeWith:(Lio/reactivex/MaybeObserver;)Lio/reactivex/MaybeObserver;` @kind virtual;
  #L3f7f82.  v2:= temp @kind object;
  #L3f7f84.  v2:= (`io.reactivex.disposables.Disposable`) v2 @kind object;
  #L3f7f88.  return v2 @kind object;
}
procedure `void` `subscribe`(`io.reactivex.Maybe` v2 @kind this, `io.reactivex.MaybeObserver` v3 @kind object) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f80ac.  v0:= "observer is null" @kind object;
  #L3f80b0.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f80b6.  call temp:= `onSubscribe`(v2, v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onSubscribe:(Lio/reactivex/Maybe;Lio/reactivex/MaybeObserver;)Lio/reactivex/MaybeObserver;` @kind static;
  #L3f80bc.  v3:= temp @kind object;
  #L3f80be.  v0:= "observer returned by the RxJavaPlugins hook is null" @kind object;
  #L3f80c2.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f80c8.  call `subscribeActual`(v2, v3) @signature `Lio/reactivex/Maybe;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @kind virtual;
  #L3f80ce.  return @kind void;
  #L3f80d0.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f80d2.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f80d8.  v0:= new `java.lang.NullPointerException`;
  #L3f80dc.  v1:= "subscribeActual failed" @kind object;
  #L3f80e0.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f80e6.  call temp:= `initCause`(v0, v3) @signature `Ljava/lang/NullPointerException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L3f80ec.  throw v0;
  #L3f80ee.  v3:= Exception @type ^`java.lang.NullPointerException` @kind object;
  #L3f80f0.  throw v3;
  catch `java.lang.NullPointerException` @[L3f80c8..L3f80ce] goto L3f80ee;
  catch `java.lang.Throwable` @[L3f80c8..L3f80ce] goto L3f80d0;
}
procedure `void` `subscribeActual`(`io.reactivex.MaybeObserver` v0 @kind object) @signature `Lio/reactivex/Maybe;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `io.reactivex.Maybe` `subscribeOn`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/Maybe;.subscribeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f746c.  v0:= "scheduler is null" @kind object;
  #L3f7470.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7476.  v0:= new `io.reactivex.internal.operators.maybe.MaybeSubscribeOn`;
  #L3f747a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeSubscribeOn;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/Scheduler;)V` @kind direct;
  #L3f7480.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f7486.  v2:= temp @kind object;
  #L3f7488.  return v2 @kind object;
}
procedure `io.reactivex.MaybeObserver` `subscribeWith`(`io.reactivex.Maybe` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/Maybe;.subscribeWith:(Lio/reactivex/MaybeObserver;)Lio/reactivex/MaybeObserver;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3f7cd4.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind virtual;
  #L3f7cda.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `switchIfEmpty`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/Maybe;.switchIfEmpty:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f749c.  v0:= "other is null" @kind object;
  #L3f74a0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f74a6.  v0:= new `io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty`;
  #L3f74aa.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeSwitchIfEmpty;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3f74b0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f74b6.  v2:= temp @kind object;
  #L3f74b8.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `takeUntil`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/Maybe;.takeUntil:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f74cc.  v0:= "other is null" @kind object;
  #L3f74d0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f74d6.  v0:= new `io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe`;
  #L3f74da.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilMaybe;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3f74e0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f74e6.  v2:= temp @kind object;
  #L3f74e8.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `takeUntil`(`io.reactivex.Maybe` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Maybe;.takeUntil:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f74fc.  v0:= "other is null" @kind object;
  #L3f7500.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7506.  v0:= new `io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher`;
  #L3f750a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher;.<init>:(Lio/reactivex/MaybeSource;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3f7510.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f7516.  v2:= temp @kind object;
  #L3f7518.  return v2 @kind object;
}
procedure `io.reactivex.observers.TestObserver` `test`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.test:()Lio/reactivex/observers/TestObserver;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f7f9c.  v0:= new `io.reactivex.observers.TestObserver`;
  #L3f7fa0.  call `<init>`(v0) @signature `Lio/reactivex/observers/TestObserver;.<init>:()V` @kind direct;
  #L3f7fa6.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind virtual;
  #L3f7fac.  return v0 @kind object;
}
procedure `io.reactivex.observers.TestObserver` `test`(`io.reactivex.Maybe` v1 @kind this, `boolean` v2 ) @signature `Lio/reactivex/Maybe;.test:(Z)Lio/reactivex/observers/TestObserver;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f7fc0.  v0:= new `io.reactivex.observers.TestObserver`;
  #L3f7fc4.  call `<init>`(v0) @signature `Lio/reactivex/observers/TestObserver;.<init>:()V` @kind direct;
  #L3f7fca.  if v2 == 0 then goto L3f7fd4;
  #L3f7fce.  call `cancel`(v0) @signature `Lio/reactivex/observers/TestObserver;.cancel:()V` @kind virtual;
  #L3f7fd4.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind virtual;
  #L3f7fda.  return v0 @kind object;
}
procedure `io.reactivex.Maybe` `timeout`(`io.reactivex.Maybe` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Maybe;.timeout:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f7594.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f759a.  v0:= temp @kind object;
  #L3f759c.  call temp:= `timeout`(v1, v2, v4, v0) @signature `Lio/reactivex/Maybe;.timeout:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @kind virtual;
  #L3f75a2.  v2:= temp @kind object;
  #L3f75a4.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `timeout`(`io.reactivex.Maybe` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.MaybeSource` v11 @kind object) @signature `Lio/reactivex/Maybe;.timeout:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f75b8.  v0:= "other is null" @kind object;
  #L3f75bc.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f75c2.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f75c8.  v5:= temp @kind object;
  #L3f75ca.  v1:= v7 @kind object;
  #L3f75cc.  v2:= v8 @kind wide;
  #L3f75ce.  v4:= v10 @kind object;
  #L3f75d0.  v6:= v11 @kind object;
  #L3f75d2.  call temp:= `timeout`(v1, v2, v4, v5, v6) @signature `Lio/reactivex/Maybe;.timeout:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind virtual;
  #L3f75d8.  v8:= temp @kind object;
  #L3f75da.  return v8 @kind object;
}
procedure `io.reactivex.Maybe` `timeout`(`io.reactivex.Maybe` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `io.reactivex.Scheduler` v4 @kind object) @signature `Lio/reactivex/Maybe;.timeout:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3f75ec.  call temp:= `timer`(v1, v3, v4) @signature `Lio/reactivex/Maybe;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @kind static;
  #L3f75f2.  v1:= temp @kind object;
  #L3f75f4.  call temp:= `timeout`(v0, v1) @signature `Lio/reactivex/Maybe;.timeout:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind virtual;
  #L3f75fa.  v1:= temp @kind object;
  #L3f75fc.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `timeout`(`io.reactivex.Maybe` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object, `io.reactivex.MaybeSource` v6 @kind object) @signature `Lio/reactivex/Maybe;.timeout:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f7610.  v0:= "fallback is null" @kind object;
  #L3f7614.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f761a.  call temp:= `timer`(v2, v4, v5) @signature `Lio/reactivex/Maybe;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @kind static;
  #L3f7620.  v2:= temp @kind object;
  #L3f7622.  call temp:= `timeout`(v1, v2, v6) @signature `Lio/reactivex/Maybe;.timeout:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind virtual;
  #L3f7628.  v2:= temp @kind object;
  #L3f762a.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `timeout`(`io.reactivex.Maybe` v2 @kind this, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/Maybe;.timeout:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f752c.  v0:= "timeoutIndicator is null" @kind object;
  #L3f7530.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7536.  v0:= new `io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe`;
  #L3f753a.  v1:= 0I;
  #L3f753c.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3f7542.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f7548.  v3:= temp @kind object;
  #L3f754a.  return v3 @kind object;
}
procedure `io.reactivex.Maybe` `timeout`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/Maybe;.timeout:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f755c.  v0:= "timeoutIndicator is null" @kind object;
  #L3f7560.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7566.  v0:= "fallback is null" @kind object;
  #L3f756a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7570.  v0:= new `io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe`;
  #L3f7574.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3f757a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f7580.  v2:= temp @kind object;
  #L3f7582.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `timeout`(`io.reactivex.Maybe` v2 @kind this, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/Maybe;.timeout:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f763c.  v0:= "timeoutIndicator is null" @kind object;
  #L3f7640.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7646.  v0:= new `io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher`;
  #L3f764a.  v1:= 0I;
  #L3f764c.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher;.<init>:(Lio/reactivex/MaybeSource;Lorg/reactivestreams/Publisher;Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3f7652.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f7658.  v3:= temp @kind object;
  #L3f765a.  return v3 @kind object;
}
procedure `io.reactivex.Maybe` `timeout`(`io.reactivex.Maybe` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/Maybe;.timeout:(Lorg/reactivestreams/Publisher;Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f766c.  v0:= "timeoutIndicator is null" @kind object;
  #L3f7670.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7676.  v0:= "fallback is null" @kind object;
  #L3f767a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7680.  v0:= new `io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher`;
  #L3f7684.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher;.<init>:(Lio/reactivex/MaybeSource;Lorg/reactivestreams/Publisher;Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3f768a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f7690.  v2:= temp @kind object;
  #L3f7692.  return v2 @kind object;
}
procedure `java.lang.Object` `to`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.to:(Lio/reactivex/functions/Function;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f804c.  v0:= "convert is null" @kind object;
  #L3f8050.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f8056.  v2:= temp @kind object;
  #L3f8058.  v2:= (`io.reactivex.functions.Function`) v2 @kind object;
  #L3f805c.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f8062.  v2:= temp @kind object;
  #L3f8064.  return v2 @kind object;
  #L3f8066.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f8068.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f806e.  call temp:= `wrapOrThrow`(v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L3f8074.  v2:= temp @kind object;
  #L3f8076.  throw v2;
  catch `java.lang.Throwable` @[L3f804c..L3f8064] goto L3f8066;
}
procedure `io.reactivex.Flowable` `toFlowable`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.toFlowable:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f679c.  v0:= instanceof @variable v1 @type ^`io.reactivex.internal.fuseable.FuseToFlowable` @kind boolean;
  #L3f67a0.  if v0 == 0 then goto L3f67b4;
  #L3f67a4.  v0:= v1 @kind object;
  #L3f67a6.  v0:= (`io.reactivex.internal.fuseable.FuseToFlowable`) v0 @kind object;
  #L3f67aa.  call temp:= `fuseToFlowable`(v0) @signature `Lio/reactivex/internal/fuseable/FuseToFlowable;.fuseToFlowable:()Lio/reactivex/Flowable;` @kind interface;
  #L3f67b0.  v0:= temp @kind object;
  #L3f67b2.  return v0 @kind object;
  #L3f67b4.  v0:= new `io.reactivex.internal.operators.maybe.MaybeToFlowable`;
  #L3f67b8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeToFlowable;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3f67be.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f67c4.  v0:= temp @kind object;
  #L3f67c6.  return v0 @kind object;
}
procedure `io.reactivex.Observable` `toObservable`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.toObservable:()Lio/reactivex/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f7d40.  v0:= instanceof @variable v1 @type ^`io.reactivex.internal.fuseable.FuseToObservable` @kind boolean;
  #L3f7d44.  if v0 == 0 then goto L3f7d58;
  #L3f7d48.  v0:= v1 @kind object;
  #L3f7d4a.  v0:= (`io.reactivex.internal.fuseable.FuseToObservable`) v0 @kind object;
  #L3f7d4e.  call temp:= `fuseToObservable`(v0) @signature `Lio/reactivex/internal/fuseable/FuseToObservable;.fuseToObservable:()Lio/reactivex/Observable;` @kind interface;
  #L3f7d54.  v0:= temp @kind object;
  #L3f7d56.  return v0 @kind object;
  #L3f7d58.  v0:= new `io.reactivex.internal.operators.maybe.MaybeToObservable`;
  #L3f7d5c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeToObservable;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3f7d62.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Observable;)Lio/reactivex/Observable;` @kind static;
  #L3f7d68.  v0:= temp @kind object;
  #L3f7d6a.  return v0 @kind object;
}
procedure `io.reactivex.Single` `toSingle`(`io.reactivex.Maybe` v2 @kind this) @signature `Lio/reactivex/Maybe;.toSingle:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f7e8c.  v0:= new `io.reactivex.internal.operators.maybe.MaybeToSingle`;
  #L3f7e90.  v1:= 0I;
  #L3f7e92.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeToSingle;.<init>:(Lio/reactivex/MaybeSource;Ljava/lang/Object;)V` @kind direct;
  #L3f7e98.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3f7e9e.  v0:= temp @kind object;
  #L3f7ea0.  return v0 @kind object;
}
procedure `io.reactivex.Single` `toSingle`(`io.reactivex.Maybe` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Maybe;.toSingle:(Ljava/lang/Object;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f7eb4.  v0:= "defaultValue is null" @kind object;
  #L3f7eb8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7ebe.  v0:= new `io.reactivex.internal.operators.maybe.MaybeToSingle`;
  #L3f7ec2.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeToSingle;.<init>:(Lio/reactivex/MaybeSource;Ljava/lang/Object;)V` @kind direct;
  #L3f7ec8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3f7ece.  v2:= temp @kind object;
  #L3f7ed0.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `unsubscribeOn`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/Maybe;.unsubscribeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f7754.  v0:= "scheduler is null" @kind object;
  #L3f7758.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f775e.  v0:= new `io.reactivex.internal.operators.maybe.MaybeUnsubscribeOn`;
  #L3f7762.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeUnsubscribeOn;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/Scheduler;)V` @kind direct;
  #L3f7768.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f776e.  v2:= temp @kind object;
  #L3f7770.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `zipWith`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/Maybe;.zipWith:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f7cb0.  v0:= "other is null" @kind object;
  #L3f7cb4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7cba.  call temp:= `zip`(v1, v2, v3) @signature `Lio/reactivex/Maybe;.zip:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Maybe;` @kind static;
  #L3f7cc0.  v2:= temp @kind object;
  #L3f7cc2.  return v2 @kind object;
}
