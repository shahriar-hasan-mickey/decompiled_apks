record `io.reactivex.internal.functions.ObjectHelper` @kind class @AccessFlag PUBLIC_FINAL {
}
global `io.reactivex.functions.BiPredicate` `@@io.reactivex.internal.functions.ObjectHelper.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/functions/ObjectHelper;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L403d04.  v0:= new `io.reactivex.internal.functions.ObjectHelper$a`;
  #L403d08.  call `<init>`(v0) @signature `Lio/reactivex/internal/functions/ObjectHelper$a;.<init>:()V` @kind direct;
  #L403d0e.  `@@io.reactivex.internal.functions.ObjectHelper.a` @type ^`io.reactivex.functions.BiPredicate` := v0 @kind object;
  #L403d12.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.functions.ObjectHelper` v2 @kind this) @signature `Lio/reactivex/internal/functions/ObjectHelper;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L403d24.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L403d2a.  v0:= new `java.lang.IllegalStateException`;
  #L403d2e.  v1:= "No instances!" @kind object;
  #L403d32.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L403d38.  throw v0;
}
procedure `int` `compare`(`int` v0 , `int` v1 ) @signature `Lio/reactivex/internal/functions/ObjectHelper;.compare:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L403bc4.  if v0 >= v1 then goto L403bcc;
  #L403bc8.  v0:= -1I;
  #L403bca.  goto L403bd6;
  #L403bcc.  if v0 <= v1 then goto L403bd4;
  #L403bd0.  v0:= 1I;
  #L403bd2.  goto L403bd6;
  #L403bd4.  v0:= 0I;
  #L403bd6.  return v0;
}
procedure `int` `compare`(`long` v1 , `long` v3 ) @signature `Lio/reactivex/internal/functions/ObjectHelper;.compare:(JJ)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L403be8.  v0:= lcmp(v1, v3);
  #L403bec.  if v0 >= 0 then goto L403bf4;
  #L403bf0.  v1:= -1I;
  #L403bf2.  goto L403bfe;
  #L403bf4.  if v0 <= 0 then goto L403bfc;
  #L403bf8.  v1:= 1I;
  #L403bfa.  goto L403bfe;
  #L403bfc.  v1:= 0I;
  #L403bfe.  return v1;
}
procedure `boolean` `equals`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/functions/ObjectHelper;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L403b94.  if v0 == v1 then goto L403bae;
  #L403b98.  if v0 == 0 then goto L403baa;
  #L403b9c.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L403ba2.  v0:= temp;
  #L403ba4.  if v0 == 0 then goto L403baa;
  #L403ba8.  goto L403bae;
  #L403baa.  v0:= 0I;
  #L403bac.  goto L403bb0;
  #L403bae.  v0:= 1I;
  #L403bb0.  return v0;
}
procedure `io.reactivex.functions.BiPredicate` `equalsPredicate`() @signature `Lio/reactivex/internal/functions/ObjectHelper;.equalsPredicate:()Lio/reactivex/functions/BiPredicate;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L403c80.  v0:= `@@io.reactivex.internal.functions.ObjectHelper.a` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L403c84.  return v0 @kind object;
}
procedure `int` `hashCode`(`java.lang.Object` v0 @kind object) @signature `Lio/reactivex/internal/functions/ObjectHelper;.hashCode:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L403c10.  if v0 == 0 then goto L403c1e;
  #L403c14.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L403c1a.  v0:= temp;
  #L403c1c.  goto L403c20;
  #L403c1e.  v0:= 0I;
  #L403c20.  return v0;
}
procedure `java.lang.Object` `requireNonNull`(`java.lang.Object` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L403c98.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L403c9e.  return v0 @kind object;
}
procedure `int` `verifyPositive`(`int` v2 , `java.lang.String` v3 @kind object) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L403c34.  if v2 <= 0 then goto L403c3a;
  #L403c38.  return v2;
  #L403c3a.  v0:= new `java.lang.IllegalArgumentException`;
  #L403c3e.  v1:= new `java.lang.StringBuilder`;
  #L403c42.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L403c48.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L403c4e.  v3:= " > 0 required but it was " @kind object;
  #L403c52.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L403c58.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L403c5e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L403c64.  v2:= temp @kind object;
  #L403c66.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L403c6c.  throw v0;
}
procedure `long` `verifyPositive`(`long` v3 , `java.lang.String` v5 @kind object) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L403cb0.  v0:= 0L;
  #L403cb4.  v2:= lcmp(v3, v0);
  #L403cb8.  if v2 <= 0 then goto L403cbe;
  #L403cbc.  return v3 @kind wide;
  #L403cbe.  v0:= new `java.lang.IllegalArgumentException`;
  #L403cc2.  v1:= new `java.lang.StringBuilder`;
  #L403cc6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L403ccc.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L403cd2.  v5:= " > 0 required but it was " @kind object;
  #L403cd6.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L403cdc.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L403ce2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L403ce8.  v3:= temp @kind object;
  #L403cea.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L403cf0.  throw v0;
}
