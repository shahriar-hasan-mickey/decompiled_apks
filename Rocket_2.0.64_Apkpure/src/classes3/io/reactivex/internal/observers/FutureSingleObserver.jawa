record `io.reactivex.internal.observers.FutureSingleObserver` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.CountDownLatch` @kind class, `io.reactivex.SingleObserver` @kind interface, `java.util.concurrent.Future` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.lang.Object` `io.reactivex.internal.observers.FutureSingleObserver.a` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.internal.observers.FutureSingleObserver.b` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.observers.FutureSingleObserver.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.observers.FutureSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L405530.  v0:= 1I;
  #L405532.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L405538.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L40553c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L405542.  v1.`io.reactivex.internal.observers.FutureSingleObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L405546.  return @kind void;
}
procedure `boolean` `cancel`(`io.reactivex.internal.observers.FutureSingleObserver` v2 @kind this, `boolean` v3 ) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.cancel:(Z)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L405388.  v3:= v2.`io.reactivex.internal.observers.FutureSingleObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40538c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L405392.  v3:= temp @kind object;
  #L405394.  v3:= (`io.reactivex.disposables.Disposable`) v3 @kind object;
  #L405398.  if v3 == v2 then goto L4053ca;
  #L40539c.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4053a0.  if v3 != v0 then goto L4053a6;
  #L4053a4.  goto L4053ca;
  #L4053a6.  v1:= v2.`io.reactivex.internal.observers.FutureSingleObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4053aa.  call temp:= `compareAndSet`(v1, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4053b0.  v0:= temp;
  #L4053b2.  if v0 == 0 then goto L405388;
  #L4053b6.  if v3 == 0 then goto L4053c0;
  #L4053ba.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4053c0.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4053c6.  v3:= 1I;
  #L4053c8.  return v3;
  #L4053ca.  v3:= 0I;
  #L4053cc.  return v3;
}
procedure `void` `dispose`(`io.reactivex.internal.observers.FutureSingleObserver` v0 @kind this) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L405558.  return @kind void;
}
procedure `java.lang.Object` `get`(`io.reactivex.internal.observers.FutureSingleObserver` v5 @kind this) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L405454.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L40545a.  v0:= temp @kind wide;
  #L40545c.  v2:= 0L;
  #L405460.  v4:= lcmp(v0, v2);
  #L405464.  if v4 == 0 then goto L405474;
  #L405468.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L40546e.  call `await`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.await:()V` @kind virtual;
  #L405474.  call temp:= `isCancelled`(v5) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.isCancelled:()Z` @kind virtual;
  #L40547a.  v0:= temp;
  #L40547c.  if v0 != 0 then goto L40549a;
  #L405480.  v0:= v5.`io.reactivex.internal.observers.FutureSingleObserver.b` @type ^`java.lang.Throwable` @kind object;
  #L405484.  if v0 != 0 then goto L40548e;
  #L405488.  v0:= v5.`io.reactivex.internal.observers.FutureSingleObserver.a` @type ^`java.lang.Object` @kind object;
  #L40548c.  return v0 @kind object;
  #L40548e.  v1:= new `java.util.concurrent.ExecutionException`;
  #L405492.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/ExecutionException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L405498.  throw v1;
  #L40549a.  v0:= new `java.util.concurrent.CancellationException`;
  #L40549e.  call `<init>`(v0) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L4054a4.  throw v0;
}
procedure `java.lang.Object` `get`(`io.reactivex.internal.observers.FutureSingleObserver` v5 @kind this, `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.get:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4054b8.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L4054be.  v0:= temp @kind wide;
  #L4054c0.  v2:= 0L;
  #L4054c4.  v4:= lcmp(v0, v2);
  #L4054c8.  if v4 == 0 then goto L4054ec;
  #L4054cc.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L4054d2.  call temp:= `await`(v5, v6, v8) @signature `Ljava/util/concurrent/CountDownLatch;.await:(JLjava/util/concurrent/TimeUnit;)Z` @kind virtual;
  #L4054d8.  v6:= temp;
  #L4054da.  if v6 == 0 then goto L4054e0;
  #L4054de.  goto L4054ec;
  #L4054e0.  v6:= new `java.util.concurrent.TimeoutException`;
  #L4054e4.  call `<init>`(v6) @signature `Ljava/util/concurrent/TimeoutException;.<init>:()V` @kind direct;
  #L4054ea.  throw v6;
  #L4054ec.  call temp:= `isCancelled`(v5) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.isCancelled:()Z` @kind virtual;
  #L4054f2.  v6:= temp;
  #L4054f4.  if v6 != 0 then goto L405512;
  #L4054f8.  v6:= v5.`io.reactivex.internal.observers.FutureSingleObserver.b` @type ^`java.lang.Throwable` @kind object;
  #L4054fc.  if v6 != 0 then goto L405506;
  #L405500.  v6:= v5.`io.reactivex.internal.observers.FutureSingleObserver.a` @type ^`java.lang.Object` @kind object;
  #L405504.  return v6 @kind object;
  #L405506.  v7:= new `java.util.concurrent.ExecutionException`;
  #L40550a.  call `<init>`(v7, v6) @signature `Ljava/util/concurrent/ExecutionException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L405510.  throw v7;
  #L405512.  v6:= new `java.util.concurrent.CancellationException`;
  #L405516.  call `<init>`(v6) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L40551c.  throw v6;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.observers.FutureSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4053e0.  v0:= v1.`io.reactivex.internal.observers.FutureSingleObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4053e4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4053ea.  v0:= temp @kind object;
  #L4053ec.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L4053f0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4053f6.  v0:= temp;
  #L4053f8.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.observers.FutureSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40540c.  call temp:= `isDone`(v1) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.isDone:()Z` @kind virtual;
  #L405412.  v0:= temp;
  #L405414.  return v0;
}
procedure `boolean` `isDone`(`io.reactivex.internal.observers.FutureSingleObserver` v5 @kind this) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.isDone:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L405428.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L40542e.  v0:= temp @kind wide;
  #L405430.  v2:= 0L;
  #L405434.  v4:= lcmp(v0, v2);
  #L405438.  if v4 != 0 then goto L405440;
  #L40543c.  v0:= 1I;
  #L40543e.  goto L405442;
  #L405440.  v0:= 0I;
  #L405442.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.observers.FutureSingleObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40556c.  v0:= v2.`io.reactivex.internal.observers.FutureSingleObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L405570.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L405576.  v0:= temp @kind object;
  #L405578.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L40557c.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L405580.  if v0 != v1 then goto L40558c;
  #L405584.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40558a.  return @kind void;
  #L40558c.  v2.`io.reactivex.internal.observers.FutureSingleObserver.b` @type ^`java.lang.Throwable` := v3 @kind object;
  #L405590.  v1:= v2.`io.reactivex.internal.observers.FutureSingleObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L405594.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L40559a.  v0:= temp;
  #L40559c.  if v0 == 0 then goto L40556c;
  #L4055a0.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4055a6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.observers.FutureSingleObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4055b8.  v0:= v1.`io.reactivex.internal.observers.FutureSingleObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4055bc.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4055c2.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.observers.FutureSingleObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4055d4.  v0:= v2.`io.reactivex.internal.observers.FutureSingleObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4055d8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4055de.  v0:= temp @kind object;
  #L4055e0.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L4055e4.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4055e8.  if v0 != v1 then goto L4055ee;
  #L4055ec.  return @kind void;
  #L4055ee.  v2.`io.reactivex.internal.observers.FutureSingleObserver.a` @type ^`java.lang.Object` := v3 @kind object;
  #L4055f2.  v3:= v2.`io.reactivex.internal.observers.FutureSingleObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4055f6.  call temp:= `compareAndSet`(v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4055fc.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L405602.  return @kind void;
}
