record `io.reactivex.internal.observers.LambdaObserver` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.functions.Consumer` `io.reactivex.internal.observers.LambdaObserver.a` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.observers.LambdaObserver.b` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.observers.LambdaObserver.c` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.observers.LambdaObserver.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.observers.LambdaObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.observers.LambdaObserver` v0 @kind this, `io.reactivex.functions.Consumer` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Action` v3 @kind object, `io.reactivex.functions.Consumer` v4 @kind object) @signature `Lio/reactivex/internal/observers/LambdaObserver;.<init>:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4057d8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4057de.  v0.`io.reactivex.internal.observers.LambdaObserver.a` @type ^`io.reactivex.functions.Consumer` := v1 @kind object;
  #L4057e2.  v0.`io.reactivex.internal.observers.LambdaObserver.b` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L4057e6.  v0.`io.reactivex.internal.observers.LambdaObserver.c` @type ^`io.reactivex.functions.Action` := v3 @kind object;
  #L4057ea.  v0.`io.reactivex.internal.observers.LambdaObserver.d` @type ^`io.reactivex.functions.Consumer` := v4 @kind object;
  #L4057ee.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.observers.LambdaObserver` v0 @kind this) @signature `Lio/reactivex/internal/observers/LambdaObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L405800.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L405806.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.observers.LambdaObserver` v2 @kind this) @signature `Lio/reactivex/internal/observers/LambdaObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4057b0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4057b6.  v0:= temp @kind object;
  #L4057b8.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4057bc.  if v0 != v1 then goto L4057c4;
  #L4057c0.  v0:= 1I;
  #L4057c2.  goto L4057c6;
  #L4057c4.  v0:= 0I;
  #L4057c6.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.observers.LambdaObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/LambdaObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L405818.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/observers/LambdaObserver;.isDisposed:()Z` @kind virtual;
  #L40581e.  v0:= temp;
  #L405820.  if v0 != 0 then goto L405848;
  #L405824.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L405828.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L40582e.  v0:= v1.`io.reactivex.internal.observers.LambdaObserver.c` @type ^`io.reactivex.functions.Action` @kind object;
  #L405832.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L405838.  goto L405848;
  #L40583a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40583c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L405842.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L405848.  return @kind void;
  catch `java.lang.Throwable` @[L40582e..L405838] goto L40583a;
}
procedure `void` `onError`(`io.reactivex.internal.observers.LambdaObserver` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/observers/LambdaObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L405868.  call temp:= `isDisposed`(v4) @signature `Lio/reactivex/internal/observers/LambdaObserver;.isDisposed:()Z` @kind virtual;
  #L40586e.  v0:= temp;
  #L405870.  if v0 != 0 then goto L4058b4;
  #L405874.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L405878.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L40587e.  v0:= v4.`io.reactivex.internal.observers.LambdaObserver.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L405882.  call `accept`(v0, v5) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L405888.  goto L4058b4;
  #L40588a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40588c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L405892.  v1:= new `io.reactivex.exceptions.CompositeException`;
  #L405896.  v2:= 2I;
  #L405898.  v2:= new `java.lang.Throwable`[v2];
  #L40589c.  v3:= 0I;
  #L40589e.  v2[v3]:= v5 @kind object;
  #L4058a2.  v5:= 1I;
  #L4058a4.  v2[v5]:= v0 @kind object;
  #L4058a8.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4058ae.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4058b4.  return @kind void;
  catch `java.lang.Throwable` @[L40587e..L405888] goto L40588a;
}
procedure `void` `onNext`(`io.reactivex.internal.observers.LambdaObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/observers/LambdaObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4058d4.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/observers/LambdaObserver;.isDisposed:()Z` @kind virtual;
  #L4058da.  v0:= temp;
  #L4058dc.  if v0 != 0 then goto L40590c;
  #L4058e0.  v0:= v1.`io.reactivex.internal.observers.LambdaObserver.a` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4058e4.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4058ea.  goto L40590c;
  #L4058ec.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4058ee.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4058f4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4058fa.  v0:= temp @kind object;
  #L4058fc.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L405900.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L405906.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/observers/LambdaObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40590c.  return @kind void;
  catch `java.lang.Throwable` @[L4058e0..L4058ea] goto L4058ec;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.observers.LambdaObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/observers/LambdaObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40592c.  call temp:= `setOnce`(v1, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L405932.  v0:= temp;
  #L405934.  if v0 == 0 then goto L405958;
  #L405938.  v0:= v1.`io.reactivex.internal.observers.LambdaObserver.d` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L40593c.  call `accept`(v0, v1) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L405942.  goto L405958;
  #L405944.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L405946.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40594c.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L405952.  call `onError`(v1, v0) @signature `Lio/reactivex/internal/observers/LambdaObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L405958.  return @kind void;
  catch `java.lang.Throwable` @[L405938..L405942] goto L405944;
}
