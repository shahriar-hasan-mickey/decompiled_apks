record `io.reactivex.internal.observers.QueueDrainObserver` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.internal.observers.b` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.internal.util.ObservableQueueDrain` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.observers.QueueDrainObserver.actual` @AccessFlag PROTECTED_FINAL;
  `boolean` `io.reactivex.internal.observers.QueueDrainObserver.cancelled` @AccessFlag PROTECTED_VOLATILE;
  `boolean` `io.reactivex.internal.observers.QueueDrainObserver.done` @AccessFlag PROTECTED_VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.observers.QueueDrainObserver.error` @AccessFlag PROTECTED;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.observers.QueueDrainObserver.queue` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.observers.QueueDrainObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.internal.fuseable.SimplePlainQueue` v2 @kind object) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L405a44.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/b;.<init>:()V` @kind direct;
  #L405a4a.  v0.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L405a4e.  v0.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v2 @kind object;
  #L405a52.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.observers.QueueDrainObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.accept:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L405a64.  return @kind void;
}
procedure `boolean` `cancelled`(`io.reactivex.internal.observers.QueueDrainObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.cancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L405978.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L40597c.  return v0;
}
procedure `boolean` `done`(`io.reactivex.internal.observers.QueueDrainObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.done:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L405990.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` @kind boolean;
  #L405994.  return v0;
}
procedure `boolean` `enter`(`io.reactivex.internal.observers.QueueDrainObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4059a8.  v0:= v1.`io.reactivex.internal.observers.c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4059ac.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4059b2.  v0:= temp;
  #L4059b4.  if v0 != 0 then goto L4059bc;
  #L4059b8.  v0:= 1I;
  #L4059ba.  goto L4059be;
  #L4059bc.  v0:= 0I;
  #L4059be.  return v0;
}
procedure `java.lang.Throwable` `error`(`io.reactivex.internal.observers.QueueDrainObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.error:()Ljava/lang/Throwable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L405a2c.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L405a30.  return v0 @kind object;
}
procedure `boolean` `fastEnter`(`io.reactivex.internal.observers.QueueDrainObserver` v3 @kind this) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastEnter:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4059d0.  v0:= v3.`io.reactivex.internal.observers.c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4059d4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4059da.  v0:= temp;
  #L4059dc.  v1:= 1I;
  #L4059de.  v2:= 0I;
  #L4059e0.  if v0 != 0 then goto L4059f6;
  #L4059e4.  v0:= v3.`io.reactivex.internal.observers.c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4059e8.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4059ee.  v0:= temp;
  #L4059f0.  if v0 == 0 then goto L4059f6;
  #L4059f4.  goto L4059f8;
  #L4059f6.  v1:= 0I;
  #L4059f8.  return v1;
}
procedure `void` `fastPathEmit`(`io.reactivex.internal.observers.QueueDrainObserver` v5 @kind this, `java.lang.Object` v6 @kind object, `boolean` v7 , `io.reactivex.disposables.Disposable` v8 @kind object) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastPathEmit:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L405a78.  v0:= v5.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L405a7c.  v1:= v5.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L405a80.  v2:= v5.`io.reactivex.internal.observers.c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L405a84.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L405a8a.  v2:= temp;
  #L405a8c.  if v2 != 0 then goto L405aba;
  #L405a90.  v2:= v5.`io.reactivex.internal.observers.c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L405a94.  v3:= 0I;
  #L405a96.  v4:= 1I;
  #L405a98.  call temp:= `compareAndSet`(v2, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L405a9e.  v2:= temp;
  #L405aa0.  if v2 == 0 then goto L405aba;
  #L405aa4.  call `accept`(v5, v0, v6) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.accept:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @kind virtual;
  #L405aaa.  v6:= -1I;
  #L405aac.  call temp:= `leave`(v5, v6) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L405ab2.  v6:= temp;
  #L405ab4.  if v6 != 0 then goto L405ace;
  #L405ab8.  return @kind void;
  #L405aba.  call temp:= `offer`(v1, v6) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L405ac0.  call temp:= `enter`(v5) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L405ac6.  v6:= temp;
  #L405ac8.  if v6 != 0 then goto L405ace;
  #L405acc.  return @kind void;
  #L405ace.  call `drainLoop`(v1, v0, v7, v8, v5) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lio/reactivex/Observer;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain;)V` @kind static;
  #L405ad4.  return @kind void;
}
procedure `void` `fastPathOrderedEmit`(`io.reactivex.internal.observers.QueueDrainObserver` v5 @kind this, `java.lang.Object` v6 @kind object, `boolean` v7 , `io.reactivex.disposables.Disposable` v8 @kind object) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastPathOrderedEmit:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L405ae8.  v0:= v5.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L405aec.  v1:= v5.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L405af0.  v2:= v5.`io.reactivex.internal.observers.c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L405af4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L405afa.  v2:= temp;
  #L405afc.  if v2 != 0 then goto L405b3e;
  #L405b00.  v2:= v5.`io.reactivex.internal.observers.c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L405b04.  v3:= 0I;
  #L405b06.  v4:= 1I;
  #L405b08.  call temp:= `compareAndSet`(v2, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L405b0e.  v2:= temp;
  #L405b10.  if v2 == 0 then goto L405b3e;
  #L405b14.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L405b1a.  v2:= temp;
  #L405b1c.  if v2 == 0 then goto L405b36;
  #L405b20.  call `accept`(v5, v0, v6) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.accept:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @kind virtual;
  #L405b26.  v6:= -1I;
  #L405b28.  call temp:= `leave`(v5, v6) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L405b2e.  v6:= temp;
  #L405b30.  if v6 != 0 then goto L405b52;
  #L405b34.  return @kind void;
  #L405b36.  call temp:= `offer`(v1, v6) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L405b3c.  goto L405b52;
  #L405b3e.  call temp:= `offer`(v1, v6) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L405b44.  call temp:= `enter`(v5) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L405b4a.  v6:= temp;
  #L405b4c.  if v6 != 0 then goto L405b52;
  #L405b50.  return @kind void;
  #L405b52.  call `drainLoop`(v1, v0, v7, v8, v5) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lio/reactivex/Observer;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain;)V` @kind static;
  #L405b58.  return @kind void;
}
procedure `int` `leave`(`io.reactivex.internal.observers.QueueDrainObserver` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.leave:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L405a0c.  v0:= v1.`io.reactivex.internal.observers.c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L405a10.  call temp:= `addAndGet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L405a16.  v2:= temp;
  #L405a18.  return v2;
}
