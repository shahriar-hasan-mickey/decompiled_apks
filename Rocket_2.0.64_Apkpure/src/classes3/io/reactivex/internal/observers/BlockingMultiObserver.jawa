record `io.reactivex.internal.observers.BlockingMultiObserver` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.CountDownLatch` @kind class, `io.reactivex.SingleObserver` @kind interface, `io.reactivex.CompletableObserver` @kind interface, `io.reactivex.MaybeObserver` @kind interface {
  `java.lang.Object` `io.reactivex.internal.observers.BlockingMultiObserver.a` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.internal.observers.BlockingMultiObserver.b` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.observers.BlockingMultiObserver.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.observers.BlockingMultiObserver.d` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.internal.observers.BlockingMultiObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L404510.  v0:= 1I;
  #L404512.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L404518.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.observers.BlockingMultiObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L40452c.  v0:= 1I;
  #L40452e.  v1.`io.reactivex.internal.observers.BlockingMultiObserver.d` @type ^`boolean` := v0 @kind boolean;
  #L404532.  v0:= v1.`io.reactivex.internal.observers.BlockingMultiObserver.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L404536.  if v0 == 0 then goto L404540;
  #L40453a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L404540.  return @kind void;
}
procedure `boolean` `blockingAwait`(`io.reactivex.internal.observers.BlockingMultiObserver` v5 @kind this, `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.blockingAwait:(JLjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4042e8.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L4042ee.  v0:= temp @kind wide;
  #L4042f0.  v2:= 0L;
  #L4042f4.  v4:= lcmp(v0, v2);
  #L4042f8.  if v4 == 0 then goto L40432a;
  #L4042fc.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L404302.  call temp:= `await`(v5, v6, v8) @signature `Ljava/util/concurrent/CountDownLatch;.await:(JLjava/util/concurrent/TimeUnit;)Z` @kind virtual;
  #L404308.  v6:= temp;
  #L40430a.  if v6 != 0 then goto L40432a;
  #L40430e.  call `a`(v5) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.a:()V` @kind virtual;
  #L404314.  v6:= 0I;
  #L404316.  return v6;
  #L404318.  v6:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L40431a.  call `a`(v5) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.a:()V` @kind virtual;
  #L404320.  call temp:= `wrapOrThrow`(v6) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L404326.  v6:= temp @kind object;
  #L404328.  throw v6;
  #L40432a.  v6:= v5.`io.reactivex.internal.observers.BlockingMultiObserver.b` @type ^`java.lang.Throwable` @kind object;
  #L40432e.  if v6 != 0 then goto L404336;
  #L404332.  v6:= 1I;
  #L404334.  return v6;
  #L404336.  call temp:= `wrapOrThrow`(v6) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L40433c.  v6:= temp @kind object;
  #L40433e.  throw v6;
  catch `java.lang.InterruptedException` @[L4042fc..L404314] goto L404318;
}
procedure `java.lang.Object` `blockingGet`(`io.reactivex.internal.observers.BlockingMultiObserver` v5 @kind this) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.blockingGet:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L404360.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L404366.  v0:= temp @kind wide;
  #L404368.  v2:= 0L;
  #L40436c.  v4:= lcmp(v0, v2);
  #L404370.  if v4 == 0 then goto L404394;
  #L404374.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L40437a.  call `await`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.await:()V` @kind virtual;
  #L404380.  goto L404394;
  #L404382.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L404384.  call `a`(v5) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.a:()V` @kind virtual;
  #L40438a.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L404390.  v0:= temp @kind object;
  #L404392.  throw v0;
  #L404394.  v0:= v5.`io.reactivex.internal.observers.BlockingMultiObserver.b` @type ^`java.lang.Throwable` @kind object;
  #L404398.  if v0 != 0 then goto L4043a2;
  #L40439c.  v0:= v5.`io.reactivex.internal.observers.BlockingMultiObserver.a` @type ^`java.lang.Object` @kind object;
  #L4043a0.  return v0 @kind object;
  #L4043a2.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4043a8.  v0:= temp @kind object;
  #L4043aa.  throw v0;
  catch `java.lang.InterruptedException` @[L404374..L404380] goto L404382;
}
procedure `java.lang.Object` `blockingGet`(`io.reactivex.internal.observers.BlockingMultiObserver` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.blockingGet:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4043cc.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L4043d2.  v0:= temp @kind wide;
  #L4043d4.  v2:= 0L;
  #L4043d8.  v4:= lcmp(v0, v2);
  #L4043dc.  if v4 == 0 then goto L404400;
  #L4043e0.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L4043e6.  call `await`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.await:()V` @kind virtual;
  #L4043ec.  goto L404400;
  #L4043ee.  v6:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L4043f0.  call `a`(v5) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.a:()V` @kind virtual;
  #L4043f6.  call temp:= `wrapOrThrow`(v6) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4043fc.  v6:= temp @kind object;
  #L4043fe.  throw v6;
  #L404400.  v0:= v5.`io.reactivex.internal.observers.BlockingMultiObserver.b` @type ^`java.lang.Throwable` @kind object;
  #L404404.  if v0 != 0 then goto L404414;
  #L404408.  v0:= v5.`io.reactivex.internal.observers.BlockingMultiObserver.a` @type ^`java.lang.Object` @kind object;
  #L40440c.  if v0 == 0 then goto L404412;
  #L404410.  v6:= v0 @kind object;
  #L404412.  return v6 @kind object;
  #L404414.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L40441a.  v6:= temp @kind object;
  #L40441c.  throw v6;
  catch `java.lang.InterruptedException` @[L4043e0..L4043ec] goto L4043ee;
}
procedure `java.lang.Throwable` `blockingGetError`(`io.reactivex.internal.observers.BlockingMultiObserver` v5 @kind this) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.blockingGetError:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L404440.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L404446.  v0:= temp @kind wide;
  #L404448.  v2:= 0L;
  #L40444c.  v4:= lcmp(v0, v2);
  #L404450.  if v4 == 0 then goto L40446c;
  #L404454.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L40445a.  call `await`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.await:()V` @kind virtual;
  #L404460.  goto L40446c;
  #L404462.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L404464.  call `a`(v5) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.a:()V` @kind virtual;
  #L40446a.  return v0 @kind object;
  #L40446c.  v0:= v5.`io.reactivex.internal.observers.BlockingMultiObserver.b` @type ^`java.lang.Throwable` @kind object;
  #L404470.  return v0 @kind object;
  catch `java.lang.InterruptedException` @[L404454..L404460] goto L404462;
}
procedure `java.lang.Throwable` `blockingGetError`(`io.reactivex.internal.observers.BlockingMultiObserver` v5 @kind this, `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.blockingGetError:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L404494.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L40449a.  v0:= temp @kind wide;
  #L40449c.  v2:= 0L;
  #L4044a0.  v4:= lcmp(v0, v2);
  #L4044a4.  if v4 == 0 then goto L4044e8;
  #L4044a8.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L4044ae.  call temp:= `await`(v5, v6, v8) @signature `Ljava/util/concurrent/CountDownLatch;.await:(JLjava/util/concurrent/TimeUnit;)Z` @kind virtual;
  #L4044b4.  v6:= temp;
  #L4044b6.  if v6 == 0 then goto L4044bc;
  #L4044ba.  goto L4044e8;
  #L4044bc.  call `a`(v5) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.a:()V` @kind virtual;
  #L4044c2.  v6:= new `java.util.concurrent.TimeoutException`;
  #L4044c6.  call `<init>`(v6) @signature `Ljava/util/concurrent/TimeoutException;.<init>:()V` @kind direct;
  #L4044cc.  call temp:= `wrapOrThrow`(v6) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4044d2.  v6:= temp @kind object;
  #L4044d4.  throw v6;
  #L4044d6.  v6:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L4044d8.  call `a`(v5) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.a:()V` @kind virtual;
  #L4044de.  call temp:= `wrapOrThrow`(v6) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4044e4.  v6:= temp @kind object;
  #L4044e6.  throw v6;
  #L4044e8.  v6:= v5.`io.reactivex.internal.observers.BlockingMultiObserver.b` @type ^`java.lang.Throwable` @kind object;
  #L4044ec.  return v6 @kind object;
  catch `java.lang.InterruptedException` @[L4044a8..L4044d6] goto L4044d6;
}
procedure `void` `onComplete`(`io.reactivex.internal.observers.BlockingMultiObserver` v0 @kind this) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L404554.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L40455a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.observers.BlockingMultiObserver` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L40456c.  v0.`io.reactivex.internal.observers.BlockingMultiObserver.b` @type ^`java.lang.Throwable` := v1 @kind object;
  #L404570.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L404576.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.observers.BlockingMultiObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L404588.  v1.`io.reactivex.internal.observers.BlockingMultiObserver.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L40458c.  v0:= v1.`io.reactivex.internal.observers.BlockingMultiObserver.d` @type ^`boolean` @kind boolean;
  #L404590.  if v0 == 0 then goto L40459a;
  #L404594.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L40459a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.observers.BlockingMultiObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4045ac.  v0.`io.reactivex.internal.observers.BlockingMultiObserver.a` @type ^`java.lang.Object` := v1 @kind object;
  #L4045b0.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4045b6.  return @kind void;
}
