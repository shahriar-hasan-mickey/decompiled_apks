record `io.reactivex.internal.observers.DeferredScalarDisposable` @kind class @AccessFlag PUBLIC extends `io.reactivex.internal.observers.BasicIntQueueDisposable` @kind class {
  `io.reactivex.Observer` `io.reactivex.internal.observers.DeferredScalarDisposable.actual` @AccessFlag PROTECTED_FINAL;
  `java.lang.Object` `io.reactivex.internal.observers.DeferredScalarDisposable.value` @AccessFlag PROTECTED;
}
global `long` `@@io.reactivex.internal.observers.DeferredScalarDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.observers.DeferredScalarDisposable` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L404a30.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L404a36.  v0.`io.reactivex.internal.observers.DeferredScalarDisposable.actual` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L404a3a.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.observers.DeferredScalarDisposable` v1 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L404a4c.  v0:= 32I;
  #L404a50.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L404a56.  v0:= 0I;
  #L404a58.  v1.`io.reactivex.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` := v0 @kind object;
  #L404a5c.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.observers.DeferredScalarDisposable` v1 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.complete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L404a70.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L404a76.  v0:= temp;
  #L404a78.  v0:= v0 ^& 54;
  #L404a7c.  if v0 == 0 then goto L404a82;
  #L404a80.  return @kind void;
  #L404a82.  v0:= 2I;
  #L404a84.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L404a8a.  v0:= v1.`io.reactivex.internal.observers.DeferredScalarDisposable.actual` @type ^`io.reactivex.Observer` @kind object;
  #L404a8e.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L404a94.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.observers.DeferredScalarDisposable` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.complete:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L404aa8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L404aae.  v0:= temp;
  #L404ab0.  v1:= v0 ^& 54;
  #L404ab4.  if v1 == 0 then goto L404aba;
  #L404ab8.  return @kind void;
  #L404aba.  v1:= 8I;
  #L404abe.  if v0 != v1 then goto L404ad2;
  #L404ac2.  v2.`io.reactivex.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` := v3 @kind object;
  #L404ac6.  v0:= 16I;
  #L404aca.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L404ad0.  goto L404ada;
  #L404ad2.  v0:= 2I;
  #L404ad4.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L404ada.  v0:= v2.`io.reactivex.internal.observers.DeferredScalarDisposable.actual` @type ^`io.reactivex.Observer` @kind object;
  #L404ade.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L404ae4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L404aea.  v3:= temp;
  #L404aec.  v1:= 4I;
  #L404aee.  if v3 == v1 then goto L404af8;
  #L404af2.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L404af8.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.observers.DeferredScalarDisposable` v1 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L404b0c.  v0:= 4I;
  #L404b0e.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L404b14.  v0:= 0I;
  #L404b16.  v1.`io.reactivex.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` := v0 @kind object;
  #L404b1a.  return @kind void;
}
procedure `void` `error`(`io.reactivex.internal.observers.DeferredScalarDisposable` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.error:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L404b2c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L404b32.  v0:= temp;
  #L404b34.  v0:= v0 ^& 54;
  #L404b38.  if v0 == 0 then goto L404b44;
  #L404b3c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L404b42.  return @kind void;
  #L404b44.  v0:= 2I;
  #L404b46.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L404b4c.  v0:= v1.`io.reactivex.internal.observers.DeferredScalarDisposable.actual` @type ^`io.reactivex.Observer` @kind object;
  #L404b50.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L404b56.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.observers.DeferredScalarDisposable` v2 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L404958.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L40495e.  v0:= temp;
  #L404960.  v1:= 4I;
  #L404962.  if v0 != v1 then goto L40496a;
  #L404966.  v0:= 1I;
  #L404968.  goto L40496c;
  #L40496a.  v0:= 0I;
  #L40496c.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.observers.DeferredScalarDisposable` v2 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L404980.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L404986.  v0:= temp;
  #L404988.  v1:= 16I;
  #L40498c.  if v0 == v1 then goto L404994;
  #L404990.  v0:= 1I;
  #L404992.  goto L404996;
  #L404994.  v0:= 0I;
  #L404996.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.observers.DeferredScalarDisposable` v3 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4049f8.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4049fe.  v0:= temp;
  #L404a00.  v1:= 0I;
  #L404a02.  v2:= 16I;
  #L404a06.  if v0 != v2 then goto L404a1e;
  #L404a0a.  v0:= v3.`io.reactivex.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` @kind object;
  #L404a0e.  v3.`io.reactivex.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` := v1 @kind object;
  #L404a12.  v1:= 32I;
  #L404a16.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L404a1c.  return v0 @kind object;
  #L404a1e.  return v1 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.observers.DeferredScalarDisposable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4049d0.  v0:= 2I;
  #L4049d2.  v2:= v2 ^& v0 @kind int;
  #L4049d4.  if v2 == 0 then goto L4049e4;
  #L4049d8.  v2:= 8I;
  #L4049dc.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4049e2.  return v0;
  #L4049e4.  v2:= 0I;
  #L4049e6.  return v2;
}
procedure `boolean` `tryDispose`(`io.reactivex.internal.observers.DeferredScalarDisposable` v2 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.tryDispose:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4049a8.  v0:= 4I;
  #L4049aa.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L4049b0.  v1:= temp;
  #L4049b2.  if v1 == v0 then goto L4049ba;
  #L4049b6.  v0:= 1I;
  #L4049b8.  goto L4049bc;
  #L4049ba.  v0:= 0I;
  #L4049bc.  return v0;
}
