record `io.reactivex.internal.observers.BiConsumerSingleObserver` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.SingleObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.functions.BiConsumer` `io.reactivex.internal.observers.BiConsumerSingleObserver.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.observers.BiConsumerSingleObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.observers.BiConsumerSingleObserver` v0 @kind this, `io.reactivex.functions.BiConsumer` v1 @kind object) @signature `Lio/reactivex/internal/observers/BiConsumerSingleObserver;.<init>:(Lio/reactivex/functions/BiConsumer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L404034.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L40403a.  v0.`io.reactivex.internal.observers.BiConsumerSingleObserver.a` @type ^`io.reactivex.functions.BiConsumer` := v1 @kind object;
  #L40403e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.observers.BiConsumerSingleObserver` v0 @kind this) @signature `Lio/reactivex/internal/observers/BiConsumerSingleObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L404050.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L404056.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.observers.BiConsumerSingleObserver` v2 @kind this) @signature `Lio/reactivex/internal/observers/BiConsumerSingleObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40400c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L404012.  v0:= temp @kind object;
  #L404014.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L404018.  if v0 != v1 then goto L404020;
  #L40401c.  v0:= 1I;
  #L40401e.  goto L404022;
  #L404020.  v0:= 0I;
  #L404022.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.observers.BiConsumerSingleObserver` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/observers/BiConsumerSingleObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L404068.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L40406c.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L404072.  v0:= v4.`io.reactivex.internal.observers.BiConsumerSingleObserver.a` @type ^`io.reactivex.functions.BiConsumer` @kind object;
  #L404076.  v1:= 0I;
  #L404078.  call `accept`(v0, v1, v5) @signature `Lio/reactivex/functions/BiConsumer;.accept:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L40407e.  goto L4040aa;
  #L404080.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L404082.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L404088.  v1:= new `io.reactivex.exceptions.CompositeException`;
  #L40408c.  v2:= 2I;
  #L40408e.  v2:= new `java.lang.Throwable`[v2];
  #L404092.  v3:= 0I;
  #L404094.  v2[v3]:= v5 @kind object;
  #L404098.  v5:= 1I;
  #L40409a.  v2[v5]:= v0 @kind object;
  #L40409e.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4040a4.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4040aa.  return @kind void;
  catch `java.lang.Throwable` @[L404068..L40407e] goto L404080;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.observers.BiConsumerSingleObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/observers/BiConsumerSingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4040c8.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4040ce.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.observers.BiConsumerSingleObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/observers/BiConsumerSingleObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4040e0.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4040e4.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4040ea.  v0:= v2.`io.reactivex.internal.observers.BiConsumerSingleObserver.a` @type ^`io.reactivex.functions.BiConsumer` @kind object;
  #L4040ee.  v1:= 0I;
  #L4040f0.  call `accept`(v0, v3, v1) @signature `Lio/reactivex/functions/BiConsumer;.accept:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L4040f6.  goto L404106;
  #L4040f8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4040fa.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L404100.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L404106.  return @kind void;
  catch `java.lang.Throwable` @[L4040e0..L4040f6] goto L4040f8;
}
