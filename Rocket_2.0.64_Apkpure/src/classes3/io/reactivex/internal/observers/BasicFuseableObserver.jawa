record `io.reactivex.internal.observers.BasicFuseableObserver` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.Observer` @kind interface, `io.reactivex.internal.fuseable.QueueDisposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.observers.BasicFuseableObserver.actual` @AccessFlag PROTECTED_FINAL;
  `boolean` `io.reactivex.internal.observers.BasicFuseableObserver.done` @AccessFlag PROTECTED;
  `io.reactivex.internal.fuseable.QueueDisposable` `io.reactivex.internal.observers.BasicFuseableObserver.qs` @AccessFlag PROTECTED;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.observers.BasicFuseableObserver.s` @AccessFlag PROTECTED;
  `int` `io.reactivex.internal.observers.BasicFuseableObserver.sourceMode` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`io.reactivex.internal.observers.BasicFuseableObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L403e18.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L403e1e.  v0.`io.reactivex.internal.observers.BasicFuseableObserver.actual` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L403e22.  return @kind void;
}
procedure `void` `afterDownstream`(`io.reactivex.internal.observers.BasicFuseableObserver` v0 @kind this) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.afterDownstream:()V` @AccessFlag PROTECTED {
    temp;

  #L403e34.  return @kind void;
}
procedure `boolean` `beforeDownstream`(`io.reactivex.internal.observers.BasicFuseableObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.beforeDownstream:()Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L403d4c.  v0:= 1I;
  #L403d4e.  return v0;
}
procedure `void` `clear`(`io.reactivex.internal.observers.BasicFuseableObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L403e48.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.qs` @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind object;
  #L403e4c.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L403e52.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.observers.BasicFuseableObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L403e64.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.s` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L403e68.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L403e6e.  return @kind void;
}
procedure `void` `fail`(`io.reactivex.internal.observers.BasicFuseableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.fail:(Ljava/lang/Throwable;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L403e80.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L403e86.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.s` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L403e8a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L403e90.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L403e96.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.observers.BasicFuseableObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L403d60.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.s` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L403d64.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L403d6a.  v0:= temp;
  #L403d6c.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.observers.BasicFuseableObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L403d80.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.qs` @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind object;
  #L403d84.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L403d8a.  v0:= temp;
  #L403d8c.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.internal.observers.BasicFuseableObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L403da0.  v2:= new `java.lang.UnsupportedOperationException`;
  #L403da4.  v0:= "Should not be called!" @kind object;
  #L403da8.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L403dae.  throw v2;
}
procedure `boolean` `offer`(`io.reactivex.internal.observers.BasicFuseableObserver` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L403dc0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L403dc4.  v2:= "Should not be called!" @kind object;
  #L403dc8.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L403dce.  throw v1;
}
procedure `void` `onComplete`(`io.reactivex.internal.observers.BasicFuseableObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L403ea8.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.done` @type ^`boolean` @kind boolean;
  #L403eac.  if v0 == 0 then goto L403eb2;
  #L403eb0.  return @kind void;
  #L403eb2.  v0:= 1I;
  #L403eb4.  v1.`io.reactivex.internal.observers.BasicFuseableObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L403eb8.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L403ebc.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L403ec2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.observers.BasicFuseableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L403ed4.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.done` @type ^`boolean` @kind boolean;
  #L403ed8.  if v0 == 0 then goto L403ee4;
  #L403edc.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L403ee2.  return @kind void;
  #L403ee4.  v0:= 1I;
  #L403ee6.  v1.`io.reactivex.internal.observers.BasicFuseableObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L403eea.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L403eee.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L403ef4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.observers.BasicFuseableObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L403f08.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.s` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L403f0c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L403f12.  v0:= temp;
  #L403f14.  if v0 == 0 then goto L403f48;
  #L403f18.  v1.`io.reactivex.internal.observers.BasicFuseableObserver.s` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L403f1c.  v0:= instanceof @variable v2 @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind boolean;
  #L403f20.  if v0 == 0 then goto L403f2c;
  #L403f24.  v2:= (`io.reactivex.internal.fuseable.QueueDisposable`) v2 @kind object;
  #L403f28.  v1.`io.reactivex.internal.observers.BasicFuseableObserver.qs` @type ^`io.reactivex.internal.fuseable.QueueDisposable` := v2 @kind object;
  #L403f2c.  call temp:= `beforeDownstream`(v1) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.beforeDownstream:()Z` @kind virtual;
  #L403f32.  v2:= temp;
  #L403f34.  if v2 == 0 then goto L403f48;
  #L403f38.  v2:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L403f3c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L403f42.  call `afterDownstream`(v1) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.afterDownstream:()V` @kind virtual;
  #L403f48.  return @kind void;
}
procedure `int` `transitiveBoundaryFusion`(`io.reactivex.internal.observers.BasicFuseableObserver` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.transitiveBoundaryFusion:(I)I` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L403de0.  v0:= v2.`io.reactivex.internal.observers.BasicFuseableObserver.qs` @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind object;
  #L403de4.  if v0 == 0 then goto L403e02;
  #L403de8.  v1:= v3 ^& 4;
  #L403dec.  if v1 != 0 then goto L403e02;
  #L403df0.  call temp:= `requestFusion`(v0, v3) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L403df6.  v3:= temp;
  #L403df8.  if v3 == 0 then goto L403e00;
  #L403dfc.  v2.`io.reactivex.internal.observers.BasicFuseableObserver.sourceMode` @type ^`int` := v3;
  #L403e00.  return v3;
  #L403e02.  v3:= 0I;
  #L403e04.  return v3;
}
