record `io.reactivex.internal.subscribers.FullArbiterSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.FlowableSubscriber` @kind interface {
  `io.reactivex.internal.subscriptions.FullArbiter` `io.reactivex.internal.subscribers.FullArbiterSubscriber.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.subscribers.FullArbiterSubscriber.b` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.subscribers.FullArbiterSubscriber` v0 @kind this, `io.reactivex.internal.subscriptions.FullArbiter` v1 @kind object) @signature `Lio/reactivex/internal/subscribers/FullArbiterSubscriber;.<init>:(Lio/reactivex/internal/subscriptions/FullArbiter;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L456ae4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L456aea.  v0.`io.reactivex.internal.subscribers.FullArbiterSubscriber.a` @type ^`io.reactivex.internal.subscriptions.FullArbiter` := v1 @kind object;
  #L456aee.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.subscribers.FullArbiterSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/FullArbiterSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L456b00.  v0:= v2.`io.reactivex.internal.subscribers.FullArbiterSubscriber.a` @type ^`io.reactivex.internal.subscriptions.FullArbiter` @kind object;
  #L456b04.  v1:= v2.`io.reactivex.internal.subscribers.FullArbiterSubscriber.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L456b08.  call `onComplete`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.onComplete:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L456b0e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.subscribers.FullArbiterSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/subscribers/FullArbiterSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L456b20.  v0:= v2.`io.reactivex.internal.subscribers.FullArbiterSubscriber.a` @type ^`io.reactivex.internal.subscriptions.FullArbiter` @kind object;
  #L456b24.  v1:= v2.`io.reactivex.internal.subscribers.FullArbiterSubscriber.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L456b28.  call `onError`(v0, v3, v1) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.onError:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L456b2e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.subscribers.FullArbiterSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/subscribers/FullArbiterSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L456b40.  v0:= v2.`io.reactivex.internal.subscribers.FullArbiterSubscriber.a` @type ^`io.reactivex.internal.subscriptions.FullArbiter` @kind object;
  #L456b44.  v1:= v2.`io.reactivex.internal.subscribers.FullArbiterSubscriber.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L456b48.  call temp:= `onNext`(v0, v3, v1) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.onNext:(Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z` @kind virtual;
  #L456b4e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.subscribers.FullArbiterSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/FullArbiterSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L456b60.  v0:= v1.`io.reactivex.internal.subscribers.FullArbiterSubscriber.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L456b64.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L456b6a.  v0:= temp;
  #L456b6c.  if v0 == 0 then goto L456b7e;
  #L456b70.  v1.`io.reactivex.internal.subscribers.FullArbiterSubscriber.b` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L456b74.  v0:= v1.`io.reactivex.internal.subscribers.FullArbiterSubscriber.a` @type ^`io.reactivex.internal.subscriptions.FullArbiter` @kind object;
  #L456b78.  call temp:= `setSubscription`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)Z` @kind virtual;
  #L456b7e.  return @kind void;
}
