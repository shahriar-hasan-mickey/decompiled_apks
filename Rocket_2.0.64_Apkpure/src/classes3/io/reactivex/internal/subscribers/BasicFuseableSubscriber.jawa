record `io.reactivex.internal.subscribers.BasicFuseableSubscriber` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.internal.fuseable.QueueSubscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.subscribers.BasicFuseableSubscriber.actual` @AccessFlag PROTECTED_FINAL;
  `boolean` `io.reactivex.internal.subscribers.BasicFuseableSubscriber.done` @AccessFlag PROTECTED;
  `io.reactivex.internal.fuseable.QueueSubscription` `io.reactivex.internal.subscribers.BasicFuseableSubscriber.qs` @AccessFlag PROTECTED;
  `org.reactivestreams.Subscription` `io.reactivex.internal.subscribers.BasicFuseableSubscriber.s` @AccessFlag PROTECTED;
  `int` `io.reactivex.internal.subscribers.BasicFuseableSubscriber.sourceMode` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`io.reactivex.internal.subscribers.BasicFuseableSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4563f8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4563fe.  v0.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.actual` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L456402.  return @kind void;
}
procedure `void` `afterDownstream`(`io.reactivex.internal.subscribers.BasicFuseableSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.afterDownstream:()V` @AccessFlag PROTECTED {
    temp;

  #L456414.  return @kind void;
}
procedure `boolean` `beforeDownstream`(`io.reactivex.internal.subscribers.BasicFuseableSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.beforeDownstream:()Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L45634c.  v0:= 1I;
  #L45634e.  return v0;
}
procedure `void` `cancel`(`io.reactivex.internal.subscribers.BasicFuseableSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L456428.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.s` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45642c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L456432.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.subscribers.BasicFuseableSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L456444.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L456448.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45644e.  return @kind void;
}
procedure `void` `fail`(`io.reactivex.internal.subscribers.BasicFuseableSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.fail:(Ljava/lang/Throwable;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L456460.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L456466.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.s` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45646a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L456470.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L456476.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.subscribers.BasicFuseableSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L456360.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L456364.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L45636a.  v0:= temp;
  #L45636c.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.internal.subscribers.BasicFuseableSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L456380.  v2:= new `java.lang.UnsupportedOperationException`;
  #L456384.  v0:= "Should not be called!" @kind object;
  #L456388.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45638e.  throw v2;
}
procedure `boolean` `offer`(`io.reactivex.internal.subscribers.BasicFuseableSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4563a0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L4563a4.  v2:= "Should not be called!" @kind object;
  #L4563a8.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4563ae.  throw v1;
}
procedure `void` `onComplete`(`io.reactivex.internal.subscribers.BasicFuseableSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L456488.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` @kind boolean;
  #L45648c.  if v0 == 0 then goto L456492;
  #L456490.  return @kind void;
  #L456492.  v0:= 1I;
  #L456494.  v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L456498.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45649c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4564a2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.subscribers.BasicFuseableSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4564b4.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` @kind boolean;
  #L4564b8.  if v0 == 0 then goto L4564c4;
  #L4564bc.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4564c2.  return @kind void;
  #L4564c4.  v0:= 1I;
  #L4564c6.  v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4564ca.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4564ce.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4564d4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.subscribers.BasicFuseableSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4564e8.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.s` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4564ec.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4564f2.  v0:= temp;
  #L4564f4.  if v0 == 0 then goto L456528;
  #L4564f8.  v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.s` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4564fc.  v0:= instanceof @variable v2 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L456500.  if v0 == 0 then goto L45650c;
  #L456504.  v2:= (`io.reactivex.internal.fuseable.QueueSubscription`) v2 @kind object;
  #L456508.  v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` := v2 @kind object;
  #L45650c.  call temp:= `beforeDownstream`(v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.beforeDownstream:()Z` @kind virtual;
  #L456512.  v2:= temp;
  #L456514.  if v2 == 0 then goto L456528;
  #L456518.  v2:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45651c.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L456522.  call `afterDownstream`(v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.afterDownstream:()V` @kind virtual;
  #L456528.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.subscribers.BasicFuseableSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45653c.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.s` @type ^`org.reactivestreams.Subscription` @kind object;
  #L456540.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L456546.  return @kind void;
}
procedure `int` `transitiveBoundaryFusion`(`io.reactivex.internal.subscribers.BasicFuseableSubscriber` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.transitiveBoundaryFusion:(I)I` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L4563c0.  v0:= v2.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L4563c4.  if v0 == 0 then goto L4563e2;
  #L4563c8.  v1:= v3 ^& 4;
  #L4563cc.  if v1 != 0 then goto L4563e2;
  #L4563d0.  call temp:= `requestFusion`(v0, v3) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4563d6.  v3:= temp;
  #L4563d8.  if v3 == 0 then goto L4563e0;
  #L4563dc.  v2.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.sourceMode` @type ^`int` := v3;
  #L4563e0.  return v3;
  #L4563e2.  v3:= 0I;
  #L4563e4.  return v3;
}
