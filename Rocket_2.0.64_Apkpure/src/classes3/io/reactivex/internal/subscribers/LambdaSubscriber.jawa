record `io.reactivex.internal.subscribers.LambdaSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.functions.Consumer` `io.reactivex.internal.subscribers.LambdaSubscriber.a` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.subscribers.LambdaSubscriber.b` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.subscribers.LambdaSubscriber.c` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.subscribers.LambdaSubscriber.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.subscribers.LambdaSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscribers.LambdaSubscriber` v0 @kind this, `io.reactivex.functions.Consumer` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Action` v3 @kind object, `io.reactivex.functions.Consumer` v4 @kind object) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.<init>:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4570ec.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4570f2.  v0.`io.reactivex.internal.subscribers.LambdaSubscriber.a` @type ^`io.reactivex.functions.Consumer` := v1 @kind object;
  #L4570f6.  v0.`io.reactivex.internal.subscribers.LambdaSubscriber.b` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L4570fa.  v0.`io.reactivex.internal.subscribers.LambdaSubscriber.c` @type ^`io.reactivex.functions.Action` := v3 @kind object;
  #L4570fe.  v0.`io.reactivex.internal.subscribers.LambdaSubscriber.d` @type ^`io.reactivex.functions.Consumer` := v4 @kind object;
  #L457102.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscribers.LambdaSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L457114.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L45711a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.subscribers.LambdaSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L45712c.  call `cancel`(v0) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.cancel:()V` @kind virtual;
  #L457132.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.subscribers.LambdaSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4570c4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4570ca.  v0:= temp @kind object;
  #L4570cc.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4570d0.  if v0 != v1 then goto L4570d8;
  #L4570d4.  v0:= 1I;
  #L4570d6.  goto L4570da;
  #L4570d8.  v0:= 0I;
  #L4570da.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.subscribers.LambdaSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L457144.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45714a.  v0:= temp @kind object;
  #L45714c.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L457150.  if v0 == v1 then goto L457174;
  #L457154.  call `lazySet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L45715a.  v0:= v2.`io.reactivex.internal.subscribers.LambdaSubscriber.c` @type ^`io.reactivex.functions.Action` @kind object;
  #L45715e.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L457164.  goto L457174;
  #L457166.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L457168.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45716e.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L457174.  return @kind void;
  catch `java.lang.Throwable` @[L45715a..L457164] goto L457166;
}
procedure `void` `onError`(`io.reactivex.internal.subscribers.LambdaSubscriber` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L457194.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45719a.  v0:= temp @kind object;
  #L45719c.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4571a0.  if v0 == v1 then goto L4571e2;
  #L4571a4.  call `lazySet`(v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4571aa.  v0:= v4.`io.reactivex.internal.subscribers.LambdaSubscriber.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4571ae.  call `accept`(v0, v5) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4571b4.  goto L4571e8;
  #L4571b6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4571b8.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4571be.  v1:= new `io.reactivex.exceptions.CompositeException`;
  #L4571c2.  v2:= 2I;
  #L4571c4.  v2:= new `java.lang.Throwable`[v2];
  #L4571c8.  v3:= 0I;
  #L4571ca.  v2[v3]:= v5 @kind object;
  #L4571ce.  v5:= 1I;
  #L4571d0.  v2[v5]:= v0 @kind object;
  #L4571d4.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4571da.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4571e0.  goto L4571e8;
  #L4571e2.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4571e8.  return @kind void;
  catch `java.lang.Throwable` @[L4571aa..L4571b4] goto L4571b6;
}
procedure `void` `onNext`(`io.reactivex.internal.subscribers.LambdaSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L457208.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.isDisposed:()Z` @kind virtual;
  #L45720e.  v0:= temp;
  #L457210.  if v0 != 0 then goto L457240;
  #L457214.  v0:= v1.`io.reactivex.internal.subscribers.LambdaSubscriber.a` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L457218.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L45721e.  goto L457240;
  #L457220.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L457222.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L457228.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45722e.  v0:= temp @kind object;
  #L457230.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L457234.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L45723a.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L457240.  return @kind void;
  catch `java.lang.Throwable` @[L457214..L45721e] goto L457220;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.subscribers.LambdaSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L457260.  call temp:= `setOnce`(v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L457266.  v0:= temp;
  #L457268.  if v0 == 0 then goto L45728c;
  #L45726c.  v0:= v1.`io.reactivex.internal.subscribers.LambdaSubscriber.d` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L457270.  call `accept`(v0, v1) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L457276.  goto L45728c;
  #L457278.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45727a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L457280.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L457286.  call `onError`(v1, v0) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L45728c.  return @kind void;
  catch `java.lang.Throwable` @[L45726c..L457276] goto L457278;
}
procedure `void` `request`(`io.reactivex.internal.subscribers.LambdaSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4572ac.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4572b2.  v0:= temp @kind object;
  #L4572b4.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4572b8.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4572be.  return @kind void;
}
