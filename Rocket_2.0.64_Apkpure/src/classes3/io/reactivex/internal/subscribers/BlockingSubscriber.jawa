record `io.reactivex.internal.subscribers.BlockingSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `java.util.Queue` `io.reactivex.internal.subscribers.BlockingSubscriber.a` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.internal.subscribers.BlockingSubscriber.TERMINATED` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@io.reactivex.internal.subscribers.BlockingSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L45674c.  v0:= new `java.lang.Object`;
  #L456750.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L456756.  `@@io.reactivex.internal.subscribers.BlockingSubscriber.TERMINATED` @type ^`java.lang.Object` := v0 @kind object;
  #L45675a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.subscribers.BlockingSubscriber` v0 @kind this, `java.util.Queue` v1 @kind object) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.<init>:(Ljava/util/Queue;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L45676c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L456772.  v0.`io.reactivex.internal.subscribers.BlockingSubscriber.a` @type ^`java.util.Queue` := v1 @kind object;
  #L456776.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscribers.BlockingSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L456788.  call temp:= `cancel`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L45678e.  v0:= temp;
  #L456790.  if v0 == 0 then goto L4567a2;
  #L456794.  v0:= v2.`io.reactivex.internal.subscribers.BlockingSubscriber.a` @type ^`java.util.Queue` @kind object;
  #L456798.  v1:= `@@io.reactivex.internal.subscribers.BlockingSubscriber.TERMINATED` @type ^`java.lang.Object` @kind object;
  #L45679c.  call temp:= `offer`(v0, v1) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4567a2.  return @kind void;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.subscribers.BlockingSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L456724.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45672a.  v0:= temp @kind object;
  #L45672c.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L456730.  if v0 != v1 then goto L456738;
  #L456734.  v0:= 1I;
  #L456736.  goto L45673a;
  #L456738.  v0:= 0I;
  #L45673a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.subscribers.BlockingSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4567b4.  v0:= v2.`io.reactivex.internal.subscribers.BlockingSubscriber.a` @type ^`java.util.Queue` @kind object;
  #L4567b8.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L4567be.  v1:= temp @kind object;
  #L4567c0.  call temp:= `offer`(v0, v1) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4567c6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.subscribers.BlockingSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4567d8.  v0:= v1.`io.reactivex.internal.subscribers.BlockingSubscriber.a` @type ^`java.util.Queue` @kind object;
  #L4567dc.  call temp:= `error`(v2) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L4567e2.  v2:= temp @kind object;
  #L4567e4.  call temp:= `offer`(v0, v2) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4567ea.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.subscribers.BlockingSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4567fc.  v0:= v1.`io.reactivex.internal.subscribers.BlockingSubscriber.a` @type ^`java.util.Queue` @kind object;
  #L456800.  call temp:= `next`(v2) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L456806.  v2:= temp @kind object;
  #L456808.  call temp:= `offer`(v0, v2) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L45680e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.subscribers.BlockingSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L456820.  call temp:= `setOnce`(v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L456826.  v2:= temp;
  #L456828.  if v2 == 0 then goto L45683e;
  #L45682c.  v2:= v1.`io.reactivex.internal.subscribers.BlockingSubscriber.a` @type ^`java.util.Queue` @kind object;
  #L456830.  call temp:= `subscription`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.subscription:(Lorg/reactivestreams/Subscription;)Ljava/lang/Object;` @kind static;
  #L456836.  v0:= temp @kind object;
  #L456838.  call temp:= `offer`(v2, v0) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L45683e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.subscribers.BlockingSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L456850.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L456856.  v0:= temp @kind object;
  #L456858.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L45685c.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L456862.  return @kind void;
}
