record `io.reactivex.internal.subscribers.StrictSubscriber` @kind class @AccessFlag PUBLIC extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.subscribers.StrictSubscriber.a` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.subscribers.StrictSubscriber.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.subscribers.StrictSubscriber.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.subscribers.StrictSubscriber.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.subscribers.StrictSubscriber.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.subscribers.StrictSubscriber.f` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.subscribers.StrictSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscribers.StrictSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L457810.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L457816.  v0.`io.reactivex.internal.subscribers.StrictSubscriber.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L45781a.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L45781e.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L457824.  v0.`io.reactivex.internal.subscribers.StrictSubscriber.b` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L457828.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L45782c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L457832.  v0.`io.reactivex.internal.subscribers.StrictSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L457836.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L45783a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L457840.  v0.`io.reactivex.internal.subscribers.StrictSubscriber.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L457844.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L457848.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L45784e.  v0.`io.reactivex.internal.subscribers.StrictSubscriber.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L457852.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscribers.StrictSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L457864.  v0:= v1.`io.reactivex.internal.subscribers.StrictSubscriber.f` @type ^`boolean` @kind boolean;
  #L457868.  if v0 != 0 then goto L457876;
  #L45786c.  v0:= v1.`io.reactivex.internal.subscribers.StrictSubscriber.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L457870.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L457876.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.subscribers.StrictSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L457888.  v0:= 1I;
  #L45788a.  v2.`io.reactivex.internal.subscribers.StrictSubscriber.f` @type ^`boolean` := v0 @kind boolean;
  #L45788e.  v0:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L457892.  v1:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L457896.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L45789c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.subscribers.StrictSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4578b0.  v0:= 1I;
  #L4578b2.  v2.`io.reactivex.internal.subscribers.StrictSubscriber.f` @type ^`boolean` := v0 @kind boolean;
  #L4578b6.  v0:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4578ba.  v1:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4578be.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L4578c4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.subscribers.StrictSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4578d8.  v0:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4578dc.  v1:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4578e0.  call `onNext`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onNext:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L4578e6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.subscribers.StrictSubscriber` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4578f8.  v0:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4578fc.  v1:= 0I;
  #L4578fe.  v2:= 1I;
  #L457900.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L457906.  v0:= temp;
  #L457908.  if v0 == 0 then goto L457926;
  #L45790c.  v0:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L457910.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L457916.  v0:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45791a.  v1:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L45791e.  call temp:= `deferredSetOnce`(v0, v1, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L457924.  goto L457946;
  #L457926.  call `cancel`(v4) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L45792c.  call `cancel`(v3) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.cancel:()V` @kind virtual;
  #L457932.  v4:= new `java.lang.IllegalStateException`;
  #L457936.  v0:= "ยง2.12 violated: onSubscribe must be called at most once" @kind object;
  #L45793a.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L457940.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L457946.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.subscribers.StrictSubscriber` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L457958.  v0:= 0L;
  #L45795c.  v2:= lcmp(v4, v0);
  #L457960.  if v2 > 0 then goto L45799e;
  #L457964.  call `cancel`(v3) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.cancel:()V` @kind virtual;
  #L45796a.  v0:= new `java.lang.IllegalArgumentException`;
  #L45796e.  v1:= new `java.lang.StringBuilder`;
  #L457972.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L457978.  v2:= "ยง3.9 violated: positive request amount required but it was " @kind object;
  #L45797c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L457982.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L457988.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45798e.  v4:= temp @kind object;
  #L457990.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L457996.  call `onError`(v3, v0) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L45799c.  goto L4579ac;
  #L45799e.  v0:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4579a2.  v1:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4579a6.  call `deferredRequest`(v0, v1, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L4579ac.  return @kind void;
}
