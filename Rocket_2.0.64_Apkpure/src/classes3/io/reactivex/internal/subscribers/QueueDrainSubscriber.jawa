record `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.internal.subscribers.d` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.internal.util.QueueDrain` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @AccessFlag PROTECTED_FINAL;
  `boolean` `io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @AccessFlag PROTECTED_VOLATILE;
  `boolean` `io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @AccessFlag PROTECTED_VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.subscribers.QueueDrainSubscriber.error` @AccessFlag PROTECTED;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.internal.fuseable.SimplePlainQueue` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L457488.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscribers/d;.<init>:()V` @kind direct;
  #L45748e.  v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L457492.  v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v2 @kind object;
  #L457496.  return @kind void;
}
procedure `boolean` `accept`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L457368.  v1:= 0I;
  #L45736a.  return v1;
}
procedure `boolean` `cancelled`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.cancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45737c.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L457380.  return v0;
}
procedure `boolean` `done`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.done:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L457394.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` @kind boolean;
  #L457398.  return v0;
}
procedure `boolean` `enter`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4573ac.  v0:= v1.`io.reactivex.internal.subscribers.e.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4573b0.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4573b6.  v0:= temp;
  #L4573b8.  if v0 != 0 then goto L4573c0;
  #L4573bc.  v0:= 1I;
  #L4573be.  goto L4573c2;
  #L4573c0.  v0:= 0I;
  #L4573c2.  return v0;
}
procedure `java.lang.Throwable` `error`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.error:()Ljava/lang/Throwable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L457430.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L457434.  return v0 @kind object;
}
procedure `boolean` `fastEnter`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastEnter:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4573d4.  v0:= v3.`io.reactivex.internal.subscribers.e.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4573d8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4573de.  v0:= temp;
  #L4573e0.  v1:= 1I;
  #L4573e2.  v2:= 0I;
  #L4573e4.  if v0 != 0 then goto L4573fa;
  #L4573e8.  v0:= v3.`io.reactivex.internal.subscribers.e.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4573ec.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4573f2.  v0:= temp;
  #L4573f4.  if v0 == 0 then goto L4573fa;
  #L4573f8.  goto L4573fc;
  #L4573fa.  v1:= 0I;
  #L4573fc.  return v1;
}
procedure `void` `fastPathEmitMax`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v7 @kind this, `java.lang.Object` v8 @kind object, `boolean` v9 , `io.reactivex.disposables.Disposable` v10 @kind object) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastPathEmitMax:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4574a8.  v0:= v7.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4574ac.  v1:= v7.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4574b0.  v2:= v7.`io.reactivex.internal.subscribers.e.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4574b4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4574ba.  v2:= temp;
  #L4574bc.  if v2 != 0 then goto L457540;
  #L4574c0.  v2:= v7.`io.reactivex.internal.subscribers.e.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4574c4.  v3:= 0I;
  #L4574c6.  v4:= 1I;
  #L4574c8.  call temp:= `compareAndSet`(v2, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4574ce.  v2:= temp;
  #L4574d0.  if v2 == 0 then goto L457540;
  #L4574d4.  v2:= v7.`io.reactivex.internal.subscribers.c.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4574d8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4574de.  v2:= temp @kind wide;
  #L4574e0.  v4:= 0L;
  #L4574e4.  v6:= lcmp(v2, v4);
  #L4574e8.  if v6 == 0 then goto L457524;
  #L4574ec.  call temp:= `accept`(v7, v0, v8) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @kind virtual;
  #L4574f2.  v8:= temp;
  #L4574f4.  if v8 == 0 then goto L457514;
  #L4574f8.  v4:= 9223372036854775807L;
  #L457502.  v8:= lcmp(v2, v4);
  #L457506.  if v8 == 0 then goto L457514;
  #L45750a.  v2:= 1L;
  #L45750e.  call temp:= `produced`(v7, v2) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L457514.  v8:= -1I;
  #L457516.  call temp:= `leave`(v7, v8) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L45751c.  v8:= temp;
  #L45751e.  if v8 != 0 then goto L457554;
  #L457522.  return @kind void;
  #L457524.  call `dispose`(v10) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45752a.  v8:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L45752e.  v9:= "Could not emit buffer due to lack of requests" @kind object;
  #L457532.  call `<init>`(v8, v9) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L457538.  call `onError`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45753e.  return @kind void;
  #L457540.  call temp:= `offer`(v1, v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L457546.  call temp:= `enter`(v7) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L45754c.  v8:= temp;
  #L45754e.  if v8 != 0 then goto L457554;
  #L457552.  return @kind void;
  #L457554.  call `drainMaxLoop`(v1, v0, v9, v10, v7) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/QueueDrain;)V` @kind static;
  #L45755a.  return @kind void;
}
procedure `void` `fastPathOrderedEmitMax`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v8 @kind this, `java.lang.Object` v9 @kind object, `boolean` v10 , `io.reactivex.disposables.Disposable` v11 @kind object) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastPathOrderedEmitMax:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L45756c.  v0:= v8.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L457570.  v1:= v8.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L457574.  v2:= v8.`io.reactivex.internal.subscribers.e.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L457578.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L45757e.  v2:= temp;
  #L457580.  if v2 != 0 then goto L45761c;
  #L457584.  v2:= v8.`io.reactivex.internal.subscribers.e.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L457588.  v3:= 0I;
  #L45758a.  v4:= 1I;
  #L45758c.  call temp:= `compareAndSet`(v2, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L457592.  v2:= temp;
  #L457594.  if v2 == 0 then goto L45761c;
  #L457598.  v2:= v8.`io.reactivex.internal.subscribers.c.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L45759c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4575a2.  v2:= temp @kind wide;
  #L4575a4.  v5:= 0L;
  #L4575a8.  v7:= lcmp(v2, v5);
  #L4575ac.  if v7 == 0 then goto L4575fc;
  #L4575b0.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4575b6.  v4:= temp;
  #L4575b8.  if v4 == 0 then goto L4575f4;
  #L4575bc.  call temp:= `accept`(v8, v0, v9) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @kind virtual;
  #L4575c2.  v9:= temp;
  #L4575c4.  if v9 == 0 then goto L4575e4;
  #L4575c8.  v4:= 9223372036854775807L;
  #L4575d2.  v9:= lcmp(v2, v4);
  #L4575d6.  if v9 == 0 then goto L4575e4;
  #L4575da.  v2:= 1L;
  #L4575de.  call temp:= `produced`(v8, v2) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L4575e4.  v9:= -1I;
  #L4575e6.  call temp:= `leave`(v8, v9) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L4575ec.  v9:= temp;
  #L4575ee.  if v9 != 0 then goto L457630;
  #L4575f2.  return @kind void;
  #L4575f4.  call temp:= `offer`(v1, v9) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4575fa.  goto L457630;
  #L4575fc.  v8.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v4 @kind boolean;
  #L457600.  call `dispose`(v11) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L457606.  v9:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L45760a.  v10:= "Could not emit buffer due to lack of requests" @kind object;
  #L45760e.  call `<init>`(v9, v10) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L457614.  call `onError`(v0, v9) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45761a.  return @kind void;
  #L45761c.  call temp:= `offer`(v1, v9) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L457622.  call temp:= `enter`(v8) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L457628.  v9:= temp;
  #L45762a.  if v9 != 0 then goto L457630;
  #L45762e.  return @kind void;
  #L457630.  call `drainMaxLoop`(v1, v0, v10, v11, v8) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/QueueDrain;)V` @kind static;
  #L457636.  return @kind void;
}
procedure `int` `leave`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L457410.  v0:= v1.`io.reactivex.internal.subscribers.e.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L457414.  call temp:= `addAndGet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L45741a.  v2:= temp;
  #L45741c.  return v2;
}
procedure `long` `produced`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L457448.  v0:= v1.`io.reactivex.internal.subscribers.c.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L45744c.  v2:= -v2 @kind long;
  #L45744e.  call temp:= `addAndGet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L457454.  v2:= temp @kind wide;
  #L457456.  return v2 @kind wide;
}
procedure `long` `requested`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L457468.  v0:= v2.`io.reactivex.internal.subscribers.c.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L45746c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L457472.  v0:= temp @kind wide;
  #L457474.  return v0 @kind wide;
}
procedure `void` `requested`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L457648.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L45764e.  v0:= temp;
  #L457650.  if v0 == 0 then goto L45765e;
  #L457654.  v0:= v1.`io.reactivex.internal.subscribers.c.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L457658.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L45765e.  return @kind void;
}
