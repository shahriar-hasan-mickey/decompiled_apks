record `io.reactivex.internal.subscribers.ForEachWhileSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.functions.Predicate` `io.reactivex.internal.subscribers.ForEachWhileSubscriber.a` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.subscribers.ForEachWhileSubscriber.b` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.subscribers.ForEachWhileSubscriber.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.subscribers.ForEachWhileSubscriber.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.subscribers.ForEachWhileSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscribers.ForEachWhileSubscriber` v0 @kind this, `io.reactivex.functions.Predicate` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Action` v3 @kind object) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.<init>:(Lio/reactivex/functions/Predicate;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L45696c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L456972.  v0.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.a` @type ^`io.reactivex.functions.Predicate` := v1 @kind object;
  #L456976.  v0.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.b` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L45697a.  v0.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.c` @type ^`io.reactivex.functions.Action` := v3 @kind object;
  #L45697e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.subscribers.ForEachWhileSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L456990.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L456996.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.subscribers.ForEachWhileSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L456944.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45694a.  v0:= temp @kind object;
  #L45694c.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L456950.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.isCancelled:(Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L456956.  v0:= temp;
  #L456958.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.subscribers.ForEachWhileSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4569a8.  v0:= v1.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.d` @type ^`boolean` @kind boolean;
  #L4569ac.  if v0 == 0 then goto L4569b2;
  #L4569b0.  return @kind void;
  #L4569b2.  v0:= 1I;
  #L4569b4.  v1.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.d` @type ^`boolean` := v0 @kind boolean;
  #L4569b8.  v0:= v1.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.c` @type ^`io.reactivex.functions.Action` @kind object;
  #L4569bc.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L4569c2.  goto L4569d2;
  #L4569c4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4569c6.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4569cc.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4569d2.  return @kind void;
  catch `java.lang.Throwable` @[L4569b8..L4569c2] goto L4569c4;
}
procedure `void` `onError`(`io.reactivex.internal.subscribers.ForEachWhileSubscriber` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4569f0.  v0:= v5.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.d` @type ^`boolean` @kind boolean;
  #L4569f4.  if v0 == 0 then goto L456a00;
  #L4569f8.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4569fe.  return @kind void;
  #L456a00.  v0:= 1I;
  #L456a02.  v5.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.d` @type ^`boolean` := v0 @kind boolean;
  #L456a06.  v1:= v5.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L456a0a.  call `accept`(v1, v6) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L456a10.  goto L456a3a;
  #L456a12.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L456a14.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L456a1a.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L456a1e.  v3:= 2I;
  #L456a20.  v3:= new `java.lang.Throwable`[v3];
  #L456a24.  v4:= 0I;
  #L456a26.  v3[v4]:= v6 @kind object;
  #L456a2a.  v3[v0]:= v1 @kind object;
  #L456a2e.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L456a34.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L456a3a.  return @kind void;
  catch `java.lang.Throwable` @[L456a06..L456a10] goto L456a12;
}
procedure `void` `onNext`(`io.reactivex.internal.subscribers.ForEachWhileSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L456a58.  v0:= v1.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.d` @type ^`boolean` @kind boolean;
  #L456a5c.  if v0 == 0 then goto L456a62;
  #L456a60.  return @kind void;
  #L456a62.  v0:= v1.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.a` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L456a66.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L456a6c.  v2:= temp;
  #L456a6e.  if v2 != 0 then goto L456a7e;
  #L456a72.  call `dispose`(v1) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.dispose:()V` @kind virtual;
  #L456a78.  call `onComplete`(v1) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.onComplete:()V` @kind virtual;
  #L456a7e.  return @kind void;
  #L456a80.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L456a82.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L456a88.  call `dispose`(v1) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.dispose:()V` @kind virtual;
  #L456a8e.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L456a94.  return @kind void;
  catch `java.lang.Throwable` @[L456a62..L456a6e] goto L456a80;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.subscribers.ForEachWhileSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L456ab4.  call temp:= `setOnce`(v2, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L456aba.  v0:= temp;
  #L456abc.  if v0 == 0 then goto L456ad0;
  #L456ac0.  v0:= 9223372036854775807L;
  #L456aca.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L456ad0.  return @kind void;
}
