record `io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.actual` @AccessFlag PROTECTED_FINAL;
  `long` `io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.produced` @AccessFlag PROTECTED;
  `org.reactivestreams.Subscription` `io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.s` @AccessFlag PROTECTED;
  `java.lang.Object` `io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.value` @AccessFlag PROTECTED;
}
global `long` `@@io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L457670.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L457676.  v0.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.actual` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L45767a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45768c.  v0:= v1.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.s` @type ^`org.reactivestreams.Subscription` @kind object;
  #L457690.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L457696.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.complete:(Ljava/lang/Object;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4576a8.  v0:= v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.produced` @type ^`long` @kind wide;
  #L4576ac.  v2:= 0L;
  #L4576b0.  v4:= lcmp(v0, v2);
  #L4576b4.  if v4 == 0 then goto L4576be;
  #L4576b8.  call temp:= `produced`(v9, v0) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4576be.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4576c4.  v0:= temp @kind wide;
  #L4576c6.  v4:= -9223372036854775808L;
  #L4576ca.  v6:= v0 ^& v4 @kind long;
  #L4576ce.  v8:= lcmp(v6, v2);
  #L4576d2.  if v8 == 0 then goto L4576de;
  #L4576d6.  call `onDrop`(v9, v10) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.onDrop:(Ljava/lang/Object;)V` @kind virtual;
  #L4576dc.  return @kind void;
  #L4576de.  v6:= 9223372036854775807L;
  #L4576e8.  v0:= v0 ^& v6 @kind long;
  #L4576ea.  v6:= lcmp(v0, v2);
  #L4576ee.  if v6 == 0 then goto L457718;
  #L4576f2.  v0:= -4.9E-324D;
  #L4576fc.  call `lazySet`(v9, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L457702.  v0:= v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L457706.  call `onNext`(v0, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L45770c.  v10:= v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L457710.  call `onComplete`(v10) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L457716.  return @kind void;
  #L457718.  v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.value` @type ^`java.lang.Object` := v10 @kind object;
  #L45771c.  call temp:= `compareAndSet`(v9, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L457722.  v0:= temp;
  #L457724.  if v0 == 0 then goto L45772a;
  #L457728.  return @kind void;
  #L45772a.  v0:= 0I;
  #L45772c.  v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.value` @type ^`java.lang.Object` := v0 @kind object;
  #L457730.  goto L4576be;
}
procedure `void` `onDrop`(`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.onDrop:(Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;

  #L457744.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L457758.  v0:= v1.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.s` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45775c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L457762.  v0:= temp;
  #L457764.  if v0 == 0 then goto L457776;
  #L457768.  v1.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.s` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L45776c.  v2:= v1.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L457770.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L457776.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` v9 @kind this, `long` v10 ) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L457788.  call temp:= `validate`(v10) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L45778e.  v0:= temp;
  #L457790.  if v0 == 0 then goto L4577fe;
  #L457794.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L45779a.  v0:= temp @kind wide;
  #L45779c.  v2:= -9223372036854775808L;
  #L4577a0.  v4:= v0 ^& v2 @kind long;
  #L4577a4.  v6:= 0L;
  #L4577a8.  v8:= lcmp(v4, v6);
  #L4577ac.  if v8 == 0 then goto L4577e0;
  #L4577b0.  v10:= -4.9E-324D;
  #L4577ba.  call temp:= `compareAndSet`(v9, v2, v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4577c0.  v10:= temp;
  #L4577c2.  if v10 == 0 then goto L4577fe;
  #L4577c6.  v10:= v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4577ca.  v11:= v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L4577ce.  call `onNext`(v10, v11) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4577d4.  v10:= v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4577d8.  call `onComplete`(v10) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4577de.  goto L4577fe;
  #L4577e0.  call temp:= `addCap`(v0, v10) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L4577e6.  v2:= temp @kind wide;
  #L4577e8.  call temp:= `compareAndSet`(v9, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4577ee.  v0:= temp;
  #L4577f0.  if v0 == 0 then goto L457794;
  #L4577f4.  v0:= v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.s` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4577f8.  call `request`(v0, v10) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4577fe.  return @kind void;
}
