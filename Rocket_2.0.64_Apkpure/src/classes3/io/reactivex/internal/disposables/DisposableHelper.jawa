record `io.reactivex.internal.disposables.DisposableHelper` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
}
global `io.reactivex.internal.disposables.DisposableHelper` `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `io.reactivex.internal.disposables.DisposableHelper`[] `@@io.reactivex.internal.disposables.DisposableHelper.a` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/disposables/DisposableHelper;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L401d00.  v0:= new `io.reactivex.internal.disposables.DisposableHelper`;
  #L401d04.  v1:= "DISPOSED" @kind object;
  #L401d08.  v2:= 0I;
  #L401d0a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L401d10.  `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` := v0 @kind object;
  #L401d14.  v1:= 1I;
  #L401d16.  v1:= new `io.reactivex.internal.disposables.DisposableHelper`[v1];
  #L401d1a.  v1[v2]:= v0 @kind object;
  #L401d1e.  `@@io.reactivex.internal.disposables.DisposableHelper.a` @type ^`io.reactivex.internal.disposables.DisposableHelper`[] := v1 @kind object;
  #L401d22.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.disposables.DisposableHelper` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L401d34.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L401d3a.  return @kind void;
}
procedure `boolean` `dispose`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L401ae0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L401ae6.  v0:= temp @kind object;
  #L401ae8.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L401aec.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L401af0.  if v0 == v1 then goto L401b12;
  #L401af4.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L401afa.  v2:= temp @kind object;
  #L401afc.  v2:= (`io.reactivex.disposables.Disposable`) v2 @kind object;
  #L401b00.  if v2 == v1 then goto L401b12;
  #L401b04.  if v2 == 0 then goto L401b0e;
  #L401b08.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L401b0e.  v2:= 1I;
  #L401b10.  return v2;
  #L401b12.  v2:= 0I;
  #L401b14.  return v2;
}
procedure `boolean` `isDisposed`(`io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L401b3c.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L401b40.  if v1 != v0 then goto L401b48;
  #L401b44.  v1:= 1I;
  #L401b46.  goto L401b4a;
  #L401b48.  v1:= 0I;
  #L401b4a.  return v1;
}
procedure `boolean` `replace`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L401b5c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L401b62.  v0:= temp @kind object;
  #L401b64.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L401b68.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L401b6c.  if v0 != v1 then goto L401b7e;
  #L401b70.  if v3 == 0 then goto L401b7a;
  #L401b74.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L401b7a.  v2:= 0I;
  #L401b7c.  return v2;
  #L401b7e.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L401b84.  v0:= temp;
  #L401b86.  if v0 == 0 then goto L401b5c;
  #L401b8a.  v2:= 1I;
  #L401b8c.  return v2;
}
procedure `void` `reportDisposableSet`() @signature `Lio/reactivex/internal/disposables/DisposableHelper;.reportDisposableSet:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L401d60.  v0:= new `io.reactivex.exceptions.ProtocolViolationException`;
  #L401d64.  v1:= "Disposable already set!" @kind object;
  #L401d68.  call `<init>`(v0, v1) @signature `Lio/reactivex/exceptions/ProtocolViolationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L401d6e.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L401d74.  return @kind void;
}
procedure `boolean` `set`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L401ba0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L401ba6.  v0:= temp @kind object;
  #L401ba8.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L401bac.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L401bb0.  if v0 != v1 then goto L401bc2;
  #L401bb4.  if v3 == 0 then goto L401bbe;
  #L401bb8.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L401bbe.  v2:= 0I;
  #L401bc0.  return v2;
  #L401bc2.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L401bc8.  v1:= temp;
  #L401bca.  if v1 == 0 then goto L401ba0;
  #L401bce.  if v0 == 0 then goto L401bd8;
  #L401bd2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L401bd8.  v2:= 1I;
  #L401bda.  return v2;
}
procedure `boolean` `setOnce`(`java.util.concurrent.atomic.AtomicReference` v1 @kind object, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L401bec.  v0:= "d is null" @kind object;
  #L401bf0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L401bf6.  v0:= 0I;
  #L401bf8.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L401bfe.  v0:= temp;
  #L401c00.  if v0 != 0 then goto L401c24;
  #L401c04.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L401c0a.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L401c10.  v1:= temp @kind object;
  #L401c12.  v2:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L401c16.  if v1 == v2 then goto L401c20;
  #L401c1a.  call `reportDisposableSet`() @signature `Lio/reactivex/internal/disposables/DisposableHelper;.reportDisposableSet:()V` @kind static;
  #L401c20.  v1:= 0I;
  #L401c22.  return v1;
  #L401c24.  v1:= 1I;
  #L401c26.  return v1;
}
procedure `boolean` `trySet`(`java.util.concurrent.atomic.AtomicReference` v1 @kind object, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.trySet:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L401c38.  v0:= 0I;
  #L401c3a.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L401c40.  v0:= temp;
  #L401c42.  if v0 != 0 then goto L401c60;
  #L401c46.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L401c4c.  v1:= temp @kind object;
  #L401c4e.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L401c52.  if v1 != v0 then goto L401c5c;
  #L401c56.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L401c5c.  v1:= 0I;
  #L401c5e.  return v1;
  #L401c60.  v1:= 1I;
  #L401c62.  return v1;
}
procedure `boolean` `validate`(`io.reactivex.disposables.Disposable` v1 @kind object, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L401c74.  v0:= 0I;
  #L401c76.  if v2 != 0 then goto L401c90;
  #L401c7a.  v1:= new `java.lang.NullPointerException`;
  #L401c7e.  v2:= "next is null" @kind object;
  #L401c82.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L401c88.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L401c8e.  return v0;
  #L401c90.  if v1 == 0 then goto L401ca2;
  #L401c94.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L401c9a.  call `reportDisposableSet`() @signature `Lio/reactivex/internal/disposables/DisposableHelper;.reportDisposableSet:()V` @kind static;
  #L401ca0.  return v0;
  #L401ca2.  v1:= 1I;
  #L401ca4.  return v1;
}
procedure `io.reactivex.internal.disposables.DisposableHelper` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.valueOf:(Ljava/lang/String;)Lio/reactivex/internal/disposables/DisposableHelper;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L401cb8.  v0:= constclass @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L401cbc.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L401cc2.  v1:= temp @kind object;
  #L401cc4.  v1:= (`io.reactivex.internal.disposables.DisposableHelper`) v1 @kind object;
  #L401cc8.  return v1 @kind object;
}
procedure `io.reactivex.internal.disposables.DisposableHelper`[] `values`() @signature `Lio/reactivex/internal/disposables/DisposableHelper;.values:()[Lio/reactivex/internal/disposables/DisposableHelper;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L401cdc.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.a` @type ^`io.reactivex.internal.disposables.DisposableHelper`[] @kind object;
  #L401ce0.  call temp:= `clone`(v0) @signature `[Lio/reactivex/internal/disposables/DisposableHelper;.clone:()Ljava/lang/Object;` @kind virtual;
  #L401ce6.  v0:= temp @kind object;
  #L401ce8.  v0:= (`io.reactivex.internal.disposables.DisposableHelper`[]) v0 @kind object;
  #L401cec.  return v0 @kind object;
}
procedure `void` `dispose`(`io.reactivex.internal.disposables.DisposableHelper` v0 @kind this) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L401d4c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.disposables.DisposableHelper` v1 @kind this) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L401b28.  v0:= 1I;
  #L401b2a.  return v0;
}
