record `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class @AccessFlag PUBLIC extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.subscriptions.DeferredScalarSubscription.actual` @AccessFlag PROTECTED_FINAL;
  `java.lang.Object` `io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @AccessFlag PROTECTED;
}
global `long` `@@io.reactivex.internal.subscriptions.DeferredScalarSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L457fd4.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L457fda.  v0.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.actual` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L457fde.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L457ff0.  v0:= 4I;
  #L457ff2.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L457ff8.  v0:= 0I;
  #L457ffa.  v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v0 @kind object;
  #L457ffe.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L458010.  v0:= 32I;
  #L458014.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L45801a.  v0:= 0I;
  #L45801c.  v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v0 @kind object;
  #L458020.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L458034.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L45803a.  v0:= temp;
  #L45803c.  v1:= 8I;
  #L458040.  v2:= 4I;
  #L458042.  if v0 != v1 then goto L458072;
  #L458046.  v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v4 @kind object;
  #L45804a.  v0:= 16I;
  #L45804e.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L458054.  v0:= v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L458058.  call `onNext`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L45805e.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L458064.  v4:= temp;
  #L458066.  if v4 == v2 then goto L458070;
  #L45806a.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L458070.  return @kind void;
  #L458072.  v1:= v0 ^& -3;
  #L458076.  if v1 == 0 then goto L45807c;
  #L45807a.  return @kind void;
  #L45807c.  v1:= 2I;
  #L45807e.  if v0 != v1 then goto L4580a8;
  #L458082.  v0:= 3I;
  #L458084.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L45808a.  v0:= v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45808e.  call `onNext`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L458094.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L45809a.  v4:= temp;
  #L45809c.  if v4 == v2 then goto L4580a6;
  #L4580a0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4580a6.  return @kind void;
  #L4580a8.  v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v4 @kind object;
  #L4580ac.  v0:= 0I;
  #L4580ae.  v1:= 1I;
  #L4580b0.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4580b6.  v0:= temp;
  #L4580b8.  if v0 == 0 then goto L4580be;
  #L4580bc.  return @kind void;
  #L4580be.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4580c4.  v0:= temp;
  #L4580c6.  if v0 != v2 then goto L45803c;
  #L4580ca.  v4:= 0I;
  #L4580cc.  v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v4 @kind object;
  #L4580d0.  return @kind void;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v2 @kind this) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.isCancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L457efc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L457f02.  v0:= temp;
  #L457f04.  v1:= 4I;
  #L457f06.  if v0 != v1 then goto L457f0e;
  #L457f0a.  v0:= 1I;
  #L457f0c.  goto L457f10;
  #L457f0e.  v0:= 0I;
  #L457f10.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v2 @kind this) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L457f24.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L457f2a.  v0:= temp;
  #L457f2c.  v1:= 16I;
  #L457f30.  if v0 == v1 then goto L457f38;
  #L457f34.  v0:= 1I;
  #L457f36.  goto L457f3a;
  #L457f38.  v0:= 0I;
  #L457f3a.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v3 @kind this) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L457f9c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L457fa2.  v0:= temp;
  #L457fa4.  v1:= 0I;
  #L457fa6.  v2:= 16I;
  #L457faa.  if v0 != v2 then goto L457fc2;
  #L457fae.  v0:= 32I;
  #L457fb2.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L457fb8.  v0:= v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L457fbc.  v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v1 @kind object;
  #L457fc0.  return v0 @kind object;
  #L457fc2.  return v1 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4580e4.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4580ea.  v2:= temp;
  #L4580ec.  if v2 == 0 then goto L458154;
  #L4580f0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4580f6.  v2:= temp;
  #L4580f8.  v3:= v2 ^& -2;
  #L4580fc.  if v3 == 0 then goto L458102;
  #L458100.  return @kind void;
  #L458102.  v3:= 1I;
  #L458104.  if v2 != v3 then goto L458144;
  #L458108.  v2:= 3I;
  #L45810a.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L458110.  v2:= temp;
  #L458112.  if v2 == 0 then goto L458142;
  #L458116.  v2:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L45811a.  if v2 == 0 then goto L458142;
  #L45811e.  v3:= 0I;
  #L458120.  v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v3 @kind object;
  #L458124.  v3:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L458128.  call `onNext`(v3, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L45812e.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L458134.  v2:= temp;
  #L458136.  v0:= 4I;
  #L458138.  if v2 == v0 then goto L458142;
  #L45813c.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L458142.  return @kind void;
  #L458144.  v2:= 0I;
  #L458146.  v3:= 2I;
  #L458148.  call temp:= `compareAndSet`(v1, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L45814e.  v2:= temp;
  #L458150.  if v2 == 0 then goto L4580f0;
  #L458154.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L457f74.  v0:= 2I;
  #L457f76.  v2:= v2 ^& v0 @kind int;
  #L457f78.  if v2 == 0 then goto L457f88;
  #L457f7c.  v2:= 8I;
  #L457f80.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L457f86.  return v0;
  #L457f88.  v2:= 0I;
  #L457f8a.  return v2;
}
procedure `boolean` `tryCancel`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v2 @kind this) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.tryCancel:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L457f4c.  v0:= 4I;
  #L457f4e.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L457f54.  v1:= temp;
  #L457f56.  if v1 == v0 then goto L457f5e;
  #L457f5a.  v0:= 1I;
  #L457f5c.  goto L457f60;
  #L457f5e.  v0:= 0I;
  #L457f60.  return v0;
}
