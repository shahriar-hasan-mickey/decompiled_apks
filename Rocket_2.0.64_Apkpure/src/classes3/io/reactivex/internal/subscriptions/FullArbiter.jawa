record `io.reactivex.internal.subscriptions.FullArbiter` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.subscriptions.d` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.subscriptions.FullArbiter.c` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.subscriptions.FullArbiter.d` @AccessFlag FINAL;
  `long` `io.reactivex.internal.subscriptions.FullArbiter.e` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.subscriptions.FullArbiter.f` @AccessFlag VOLATILE;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.subscriptions.FullArbiter.g` @AccessFlag ;
  `boolean` `io.reactivex.internal.subscriptions.FullArbiter.h` @AccessFlag VOLATILE;
}
global `org.reactivestreams.Subscription` `@@io.reactivex.internal.subscriptions.FullArbiter.i` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.internal.subscriptions.FullArbiter.j` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L45847c.  v0:= new `io.reactivex.internal.subscriptions.FullArbiter$a`;
  #L458480.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/FullArbiter$a;.<init>:()V` @kind direct;
  #L458486.  `@@io.reactivex.internal.subscriptions.FullArbiter.i` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L45848a.  v0:= new `java.lang.Object`;
  #L45848e.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L458494.  `@@io.reactivex.internal.subscriptions.FullArbiter.j` @type ^`java.lang.Object` := v0 @kind object;
  #L458498.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.subscriptions.FullArbiter` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.disposables.Disposable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/disposables/Disposable;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4584ac.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/d;.<init>:()V` @kind direct;
  #L4584b2.  v0.`io.reactivex.internal.subscriptions.FullArbiter.c` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4584b6.  v0.`io.reactivex.internal.subscriptions.FullArbiter.g` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L4584ba.  v1:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L4584be.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4584c4.  v0.`io.reactivex.internal.subscriptions.FullArbiter.d` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v1 @kind object;
  #L4584c8.  v1:= `@@io.reactivex.internal.subscriptions.FullArbiter.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4584cc.  v0.`io.reactivex.internal.subscriptions.FullArbiter.f` @type ^`org.reactivestreams.Subscription` := v1 @kind object;
  #L4584d0.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.subscriptions.FullArbiter` v2 @kind this) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L45850c.  v0:= v2.`io.reactivex.internal.subscriptions.FullArbiter.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L458510.  v1:= 0I;
  #L458512.  v2.`io.reactivex.internal.subscriptions.FullArbiter.g` @type ^`io.reactivex.disposables.Disposable` := v1 @kind object;
  #L458516.  if v0 == 0 then goto L458520;
  #L45851a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L458520.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.subscriptions.FullArbiter` v11 @kind this) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L458534.  v0:= v11.`io.reactivex.internal.subscriptions.e.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L458538.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L45853e.  v0:= temp;
  #L458540.  if v0 == 0 then goto L458546;
  #L458544.  return @kind void;
  #L458546.  v0:= v11.`io.reactivex.internal.subscriptions.FullArbiter.d` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L45854a.  v1:= v11.`io.reactivex.internal.subscriptions.FullArbiter.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45854e.  v2:= 1I;
  #L458550.  v3:= 1I;
  #L458552.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L458558.  v4:= temp @kind object;
  #L45855a.  if v4 != 0 then goto L458572;
  #L45855e.  v4:= v11.`io.reactivex.internal.subscriptions.e.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L458562.  v3:= -v3 @kind int;
  #L458564.  call temp:= `addAndGet`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L45856a.  v3:= temp;
  #L45856c.  if v3 != 0 then goto L458552;
  #L458570.  return @kind void;
  #L458572.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L458578.  v5:= temp @kind object;
  #L45857a.  v6:= `@@io.reactivex.internal.subscriptions.FullArbiter.j` @type ^`java.lang.Object` @kind object;
  #L45857e.  v7:= 0L;
  #L458582.  if v4 != v6 then goto L4585b6;
  #L458586.  v4:= v11.`io.reactivex.internal.subscriptions.a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L45858a.  call temp:= `getAndSet`(v4, v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L458590.  v4:= temp @kind wide;
  #L458592.  v6:= lcmp(v4, v7);
  #L458596.  if v6 == 0 then goto L458552;
  #L45859a.  v6:= v11.`io.reactivex.internal.subscriptions.FullArbiter.e` @type ^`long` @kind wide;
  #L45859e.  call temp:= `addCap`(v6, v4) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L4585a4.  v6:= temp @kind wide;
  #L4585a6.  v11.`io.reactivex.internal.subscriptions.FullArbiter.e` @type ^`long` := v6 @kind wide;
  #L4585aa.  v6:= v11.`io.reactivex.internal.subscriptions.FullArbiter.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4585ae.  call `request`(v6, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4585b4.  goto L458552;
  #L4585b6.  v6:= v11.`io.reactivex.internal.subscriptions.FullArbiter.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4585ba.  if v4 != v6 then goto L458552;
  #L4585be.  call temp:= `isSubscription`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.isSubscription:(Ljava/lang/Object;)Z` @kind static;
  #L4585c4.  v4:= temp;
  #L4585c6.  if v4 == 0 then goto L4585fa;
  #L4585ca.  call temp:= `getSubscription`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.getSubscription:(Ljava/lang/Object;)Lorg/reactivestreams/Subscription;` @kind static;
  #L4585d0.  v4:= temp @kind object;
  #L4585d2.  v5:= v11.`io.reactivex.internal.subscriptions.FullArbiter.h` @type ^`boolean` @kind boolean;
  #L4585d6.  if v5 != 0 then goto L4585f2;
  #L4585da.  v11.`io.reactivex.internal.subscriptions.FullArbiter.f` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L4585de.  v5:= v11.`io.reactivex.internal.subscriptions.FullArbiter.e` @type ^`long` @kind wide;
  #L4585e2.  v9:= lcmp(v5, v7);
  #L4585e6.  if v9 == 0 then goto L458552;
  #L4585ea.  call `request`(v4, v5) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4585f0.  goto L458552;
  #L4585f2.  call `cancel`(v4) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4585f8.  goto L458552;
  #L4585fa.  call temp:= `isError`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L458600.  v4:= temp;
  #L458602.  if v4 == 0 then goto L458636;
  #L458606.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L45860c.  call `a`(v11) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.a:()V` @kind virtual;
  #L458612.  call temp:= `getError`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L458618.  v4:= temp @kind object;
  #L45861a.  v5:= v11.`io.reactivex.internal.subscriptions.FullArbiter.h` @type ^`boolean` @kind boolean;
  #L45861e.  if v5 != 0 then goto L45862e;
  #L458622.  v11.`io.reactivex.internal.subscriptions.FullArbiter.h` @type ^`boolean` := v2 @kind boolean;
  #L458626.  call `onError`(v1, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45862c.  goto L458552;
  #L45862e.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L458634.  goto L458552;
  #L458636.  call temp:= `isComplete`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L45863c.  v4:= temp;
  #L45863e.  if v4 == 0 then goto L458664;
  #L458642.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L458648.  call `a`(v11) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.a:()V` @kind virtual;
  #L45864e.  v4:= v11.`io.reactivex.internal.subscriptions.FullArbiter.h` @type ^`boolean` @kind boolean;
  #L458652.  if v4 != 0 then goto L458552;
  #L458656.  v11.`io.reactivex.internal.subscriptions.FullArbiter.h` @type ^`boolean` := v2 @kind boolean;
  #L45865a.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L458660.  goto L458552;
  #L458664.  v9:= v11.`io.reactivex.internal.subscriptions.FullArbiter.e` @type ^`long` @kind wide;
  #L458668.  v4:= lcmp(v9, v7);
  #L45866c.  if v4 == 0 then goto L458552;
  #L458670.  call temp:= `getValue`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L458676.  v4:= temp @kind object;
  #L458678.  call `onNext`(v1, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L45867e.  v4:= 1L;
  #L458682.  v9:= v9 - v4 @kind long;
  #L458684.  v11.`io.reactivex.internal.subscriptions.FullArbiter.e` @type ^`long` := v9 @kind wide;
  #L458688.  goto L458552;
}
procedure `void` `cancel`(`io.reactivex.internal.subscriptions.FullArbiter` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4584e4.  v0:= v1.`io.reactivex.internal.subscriptions.FullArbiter.h` @type ^`boolean` @kind boolean;
  #L4584e8.  if v0 != 0 then goto L4584f8;
  #L4584ec.  v0:= 1I;
  #L4584ee.  v1.`io.reactivex.internal.subscriptions.FullArbiter.h` @type ^`boolean` := v0 @kind boolean;
  #L4584f2.  call `a`(v1) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.a:()V` @kind virtual;
  #L4584f8.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.subscriptions.FullArbiter` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.onComplete:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45869c.  v0:= v2.`io.reactivex.internal.subscriptions.FullArbiter.d` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4586a0.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L4586a6.  v1:= temp @kind object;
  #L4586a8.  call temp:= `offer`(v0, v3, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4586ae.  call `b`(v2) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.b:()V` @kind virtual;
  #L4586b4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.subscriptions.FullArbiter` v1 @kind this, `java.lang.Throwable` v2 @kind object, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.onError:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4586c8.  v0:= v1.`io.reactivex.internal.subscriptions.FullArbiter.h` @type ^`boolean` @kind boolean;
  #L4586cc.  if v0 == 0 then goto L4586d8;
  #L4586d0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4586d6.  return @kind void;
  #L4586d8.  v0:= v1.`io.reactivex.internal.subscriptions.FullArbiter.d` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4586dc.  call temp:= `error`(v2) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L4586e2.  v2:= temp @kind object;
  #L4586e4.  call temp:= `offer`(v0, v3, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4586ea.  call `b`(v1) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.b:()V` @kind virtual;
  #L4586f0.  return @kind void;
}
procedure `boolean` `onNext`(`io.reactivex.internal.subscriptions.FullArbiter` v1 @kind this, `java.lang.Object` v2 @kind object, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.onNext:(Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4583f4.  v0:= v1.`io.reactivex.internal.subscriptions.FullArbiter.h` @type ^`boolean` @kind boolean;
  #L4583f8.  if v0 == 0 then goto L458400;
  #L4583fc.  v2:= 0I;
  #L4583fe.  return v2;
  #L458400.  v0:= v1.`io.reactivex.internal.subscriptions.FullArbiter.d` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L458404.  call temp:= `next`(v2) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L45840a.  v2:= temp @kind object;
  #L45840c.  call temp:= `offer`(v0, v3, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L458412.  call `b`(v1) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.b:()V` @kind virtual;
  #L458418.  v2:= 1I;
  #L45841a.  return v2;
}
procedure `void` `request`(`io.reactivex.internal.subscriptions.FullArbiter` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458704.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L45870a.  v0:= temp;
  #L45870c.  if v0 == 0 then goto L45872e;
  #L458710.  v0:= v1.`io.reactivex.internal.subscriptions.a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L458714.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L45871a.  v2:= v1.`io.reactivex.internal.subscriptions.FullArbiter.d` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L45871e.  v3:= `@@io.reactivex.internal.subscriptions.FullArbiter.j` @type ^`java.lang.Object` @kind object;
  #L458722.  call temp:= `offer`(v2, v3, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L458728.  call `b`(v1) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.b:()V` @kind virtual;
  #L45872e.  return @kind void;
}
procedure `boolean` `setSubscription`(`io.reactivex.internal.subscriptions.FullArbiter` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45842c.  v0:= v2.`io.reactivex.internal.subscriptions.FullArbiter.h` @type ^`boolean` @kind boolean;
  #L458430.  if v0 == 0 then goto L458442;
  #L458434.  if v3 == 0 then goto L45843e;
  #L458438.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L45843e.  v3:= 0I;
  #L458440.  return v3;
  #L458442.  v0:= "s is null" @kind object;
  #L458446.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45844c.  v0:= v2.`io.reactivex.internal.subscriptions.FullArbiter.d` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L458450.  v1:= v2.`io.reactivex.internal.subscriptions.FullArbiter.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L458454.  call temp:= `subscription`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.subscription:(Lorg/reactivestreams/Subscription;)Ljava/lang/Object;` @kind static;
  #L45845a.  v3:= temp @kind object;
  #L45845c.  call temp:= `offer`(v0, v1, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L458462.  call `b`(v2) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.b:()V` @kind virtual;
  #L458468.  v3:= 1I;
  #L45846a.  return v3;
}
