record `io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind class @AccessFlag PUBLIC extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscription` `io.reactivex.internal.subscriptions.SubscriptionArbiter.a` @AccessFlag ;
  `long` `io.reactivex.internal.subscriptions.SubscriptionArbiter.b` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.subscriptions.SubscriptionArbiter.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.subscriptions.SubscriptionArbiter.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.subscriptions.SubscriptionArbiter.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.subscriptions.SubscriptionArbiter.f` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.subscriptions.SubscriptionArbiter.unbounded` @AccessFlag PROTECTED;
}
global `long` `@@io.reactivex.internal.subscriptions.SubscriptionArbiter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscriptions.SubscriptionArbiter` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4588f0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4588f6.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4588fa.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L458900.  v1.`io.reactivex.internal.subscriptions.SubscriptionArbiter.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L458904.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L458908.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L45890e.  v1.`io.reactivex.internal.subscriptions.SubscriptionArbiter.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L458912.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L458916.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L45891c.  v1.`io.reactivex.internal.subscriptions.SubscriptionArbiter.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L458920.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.subscriptions.SubscriptionArbiter` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.a:()V` @AccessFlag FINAL {
    temp;
    v0;

  #L45895c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L458962.  v0:= temp;
  #L458964.  if v0 == 0 then goto L45896a;
  #L458968.  return @kind void;
  #L45896a.  call `b`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.b:()V` @kind virtual;
  #L458970.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.subscriptions.SubscriptionArbiter` v19 @kind this) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.b:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L458984.  v0:= v19 @kind object;
  #L458988.  v1:= 0I;
  #L45898a.  v2:= 0L;
  #L45898e.  v4:= 1I;
  #L458990.  v7:= v1 @kind object;
  #L458992.  v5:= v2 @kind wide;
  #L458994.  v8:= v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L458998.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45899e.  v8:= temp @kind object;
  #L4589a0.  v8:= (`org.reactivestreams.Subscription`) v8 @kind object;
  #L4589a4.  if v8 == 0 then goto L4589b8;
  #L4589a8.  v8:= v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4589ac.  call temp:= `getAndSet`(v8, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4589b2.  v8:= temp @kind object;
  #L4589b4.  v8:= (`org.reactivestreams.Subscription`) v8 @kind object;
  #L4589b8.  v9:= v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4589bc.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4589c2.  v9:= temp @kind wide;
  #L4589c4.  v11:= lcmp(v9, v2);
  #L4589c8.  if v11 == 0 then goto L4589d8;
  #L4589cc.  v9:= v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4589d0.  call temp:= `getAndSet`(v9, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4589d6.  v9:= temp @kind wide;
  #L4589d8.  v11:= v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4589dc.  call temp:= `get`(v11) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4589e2.  v11:= temp @kind wide;
  #L4589e4.  v13:= lcmp(v11, v2);
  #L4589e8.  if v13 == 0 then goto L4589f8;
  #L4589ec.  v11:= v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4589f0.  call temp:= `getAndSet`(v11, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4589f6.  v11:= temp @kind wide;
  #L4589f8.  v13:= v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.a` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4589fc.  v14:= v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.f` @type ^`boolean` @kind boolean;
  #L458a00.  if v14 == 0 then goto L458a1e;
  #L458a04.  if v13 == 0 then goto L458a12;
  #L458a08.  call `cancel`(v13) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L458a0e.  v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.a` @type ^`org.reactivestreams.Subscription` := v1 @kind object;
  #L458a12.  if v8 == 0 then goto L458a96;
  #L458a16.  call `cancel`(v8) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L458a1c.  goto L458a96;
  #L458a1e.  v14:= v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.b` @type ^`long` @kind wide;
  #L458a22.  v16:= 9223372036854775807L;
  #L458a2c.  v18:= lcmp(v14, v16);
  #L458a30.  if v18 == 0 then goto L458a5a;
  #L458a34.  call temp:= `addCap`(v14, v9) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L458a3a.  v14:= temp @kind wide;
  #L458a3c.  v18:= lcmp(v14, v16);
  #L458a40.  if v18 == 0 then goto L458a56;
  #L458a44.  v14:= v14 - v11 @kind long;
  #L458a46.  v11:= lcmp(v14, v2);
  #L458a4a.  if v11 >= 0 then goto L458a56;
  #L458a4e.  call `reportMoreProduced`(v14) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.reportMoreProduced:(J)V` @kind static;
  #L458a54.  v14:= v2 @kind wide;
  #L458a56.  v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.b` @type ^`long` := v14 @kind wide;
  #L458a5a.  if v8 == 0 then goto L458a80;
  #L458a5e.  if v13 == 0 then goto L458a68;
  #L458a62.  call `cancel`(v13) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L458a68.  v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.a` @type ^`org.reactivestreams.Subscription` := v8 @kind object;
  #L458a6c.  v9:= lcmp(v14, v2);
  #L458a70.  if v9 == 0 then goto L458a96;
  #L458a74.  call temp:= `addCap`(v5, v14) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L458a7a.  v5:= temp @kind wide;
  #L458a7c.  v7:= v8 @kind object;
  #L458a7e.  goto L458a96;
  #L458a80.  if v13 == 0 then goto L458a96;
  #L458a84.  v8:= lcmp(v9, v2);
  #L458a88.  if v8 == 0 then goto L458a96;
  #L458a8c.  call temp:= `addCap`(v5, v9) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L458a92.  v5:= temp @kind wide;
  #L458a94.  v7:= v13 @kind object;
  #L458a96.  v4:= -v4 @kind int;
  #L458a98.  call temp:= `addAndGet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L458a9e.  v4:= temp;
  #L458aa0.  if v4 != 0 then goto L458994;
  #L458aa4.  v1:= lcmp(v5, v2);
  #L458aa8.  if v1 == 0 then goto L458ab2;
  #L458aac.  call `request`(v7, v5) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L458ab2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscriptions.SubscriptionArbiter` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458934.  v0:= v1.`io.reactivex.internal.subscriptions.SubscriptionArbiter.f` @type ^`boolean` @kind boolean;
  #L458938.  if v0 != 0 then goto L458948;
  #L45893c.  v0:= 1I;
  #L45893e.  v1.`io.reactivex.internal.subscriptions.SubscriptionArbiter.f` @type ^`boolean` := v0 @kind boolean;
  #L458942.  call `a`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.a:()V` @kind virtual;
  #L458948.  return @kind void;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.subscriptions.SubscriptionArbiter` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.isCancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4588c0.  v0:= v1.`io.reactivex.internal.subscriptions.SubscriptionArbiter.f` @type ^`boolean` @kind boolean;
  #L4588c4.  return v0;
}
procedure `boolean` `isUnbounded`(`io.reactivex.internal.subscriptions.SubscriptionArbiter` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.isUnbounded:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4588d8.  v0:= v1.`io.reactivex.internal.subscriptions.SubscriptionArbiter.unbounded` @type ^`boolean` @kind boolean;
  #L4588dc.  return v0;
}
procedure `void` `produced`(`io.reactivex.internal.subscriptions.SubscriptionArbiter` v5 @kind this, `long` v6 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L458ac4.  v0:= v5.`io.reactivex.internal.subscriptions.SubscriptionArbiter.unbounded` @type ^`boolean` @kind boolean;
  #L458ac8.  if v0 == 0 then goto L458ace;
  #L458acc.  return @kind void;
  #L458ace.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L458ad4.  v0:= temp;
  #L458ad6.  if v0 != 0 then goto L458b30;
  #L458ada.  v0:= 0I;
  #L458adc.  v1:= 1I;
  #L458ade.  call temp:= `compareAndSet`(v5, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L458ae4.  v0:= temp;
  #L458ae6.  if v0 == 0 then goto L458b30;
  #L458aea.  v0:= v5.`io.reactivex.internal.subscriptions.SubscriptionArbiter.b` @type ^`long` @kind wide;
  #L458aee.  v2:= 9223372036854775807L;
  #L458af8.  v4:= lcmp(v0, v2);
  #L458afc.  if v4 == 0 then goto L458b1a;
  #L458b00.  v0:= v0 - v6 @kind long;
  #L458b02.  v6:= 0L;
  #L458b06.  v2:= lcmp(v0, v6);
  #L458b0a.  if v2 >= 0 then goto L458b16;
  #L458b0e.  call `reportMoreProduced`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.reportMoreProduced:(J)V` @kind static;
  #L458b14.  v0:= v6 @kind wide;
  #L458b16.  v5.`io.reactivex.internal.subscriptions.SubscriptionArbiter.b` @type ^`long` := v0 @kind wide;
  #L458b1a.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L458b20.  v6:= temp;
  #L458b22.  if v6 != 0 then goto L458b28;
  #L458b26.  return @kind void;
  #L458b28.  call `b`(v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.b:()V` @kind virtual;
  #L458b2e.  return @kind void;
  #L458b30.  v0:= v5.`io.reactivex.internal.subscriptions.SubscriptionArbiter.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L458b34.  call temp:= `add`(v0, v6) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L458b3a.  call `a`(v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.a:()V` @kind virtual;
  #L458b40.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.subscriptions.SubscriptionArbiter` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L458b54.  call temp:= `validate`(v7) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L458b5a.  v0:= temp;
  #L458b5c.  if v0 == 0 then goto L458be6;
  #L458b60.  v0:= v6.`io.reactivex.internal.subscriptions.SubscriptionArbiter.unbounded` @type ^`boolean` @kind boolean;
  #L458b64.  if v0 == 0 then goto L458b6a;
  #L458b68.  return @kind void;
  #L458b6a.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L458b70.  v0:= temp;
  #L458b72.  if v0 != 0 then goto L458bd6;
  #L458b76.  v0:= 0I;
  #L458b78.  v1:= 1I;
  #L458b7a.  call temp:= `compareAndSet`(v6, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L458b80.  v0:= temp;
  #L458b82.  if v0 == 0 then goto L458bd6;
  #L458b86.  v2:= v6.`io.reactivex.internal.subscriptions.SubscriptionArbiter.b` @type ^`long` @kind wide;
  #L458b8a.  v4:= 9223372036854775807L;
  #L458b94.  v0:= lcmp(v2, v4);
  #L458b98.  if v0 == 0 then goto L458bb4;
  #L458b9c.  call temp:= `addCap`(v2, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L458ba2.  v2:= temp @kind wide;
  #L458ba4.  v6.`io.reactivex.internal.subscriptions.SubscriptionArbiter.b` @type ^`long` := v2 @kind wide;
  #L458ba8.  v0:= lcmp(v2, v4);
  #L458bac.  if v0 != 0 then goto L458bb4;
  #L458bb0.  v6.`io.reactivex.internal.subscriptions.SubscriptionArbiter.unbounded` @type ^`boolean` := v1 @kind boolean;
  #L458bb4.  v0:= v6.`io.reactivex.internal.subscriptions.SubscriptionArbiter.a` @type ^`org.reactivestreams.Subscription` @kind object;
  #L458bb8.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L458bbe.  v1:= temp;
  #L458bc0.  if v1 == 0 then goto L458bca;
  #L458bc4.  call `b`(v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.b:()V` @kind virtual;
  #L458bca.  if v0 == 0 then goto L458bd4;
  #L458bce.  call `request`(v0, v7) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L458bd4.  return @kind void;
  #L458bd6.  v0:= v6.`io.reactivex.internal.subscriptions.SubscriptionArbiter.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L458bda.  call temp:= `add`(v0, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L458be0.  call `a`(v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.a:()V` @kind virtual;
  #L458be6.  return @kind void;
}
procedure `void` `setSubscription`(`io.reactivex.internal.subscriptions.SubscriptionArbiter` v5 @kind this, `org.reactivestreams.Subscription` v6 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L458bf8.  v0:= v5.`io.reactivex.internal.subscriptions.SubscriptionArbiter.f` @type ^`boolean` @kind boolean;
  #L458bfc.  if v0 == 0 then goto L458c08;
  #L458c00.  call `cancel`(v6) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L458c06.  return @kind void;
  #L458c08.  v0:= "s is null" @kind object;
  #L458c0c.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L458c12.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L458c18.  v0:= temp;
  #L458c1a.  if v0 != 0 then goto L458c6a;
  #L458c1e.  v0:= 0I;
  #L458c20.  v1:= 1I;
  #L458c22.  call temp:= `compareAndSet`(v5, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L458c28.  v0:= temp;
  #L458c2a.  if v0 == 0 then goto L458c6a;
  #L458c2e.  v0:= v5.`io.reactivex.internal.subscriptions.SubscriptionArbiter.a` @type ^`org.reactivestreams.Subscription` @kind object;
  #L458c32.  if v0 == 0 then goto L458c3c;
  #L458c36.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L458c3c.  v5.`io.reactivex.internal.subscriptions.SubscriptionArbiter.a` @type ^`org.reactivestreams.Subscription` := v6 @kind object;
  #L458c40.  v0:= v5.`io.reactivex.internal.subscriptions.SubscriptionArbiter.b` @type ^`long` @kind wide;
  #L458c44.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L458c4a.  v2:= temp;
  #L458c4c.  if v2 == 0 then goto L458c56;
  #L458c50.  call `b`(v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.b:()V` @kind virtual;
  #L458c56.  v2:= 0L;
  #L458c5a.  v4:= lcmp(v0, v2);
  #L458c5e.  if v4 == 0 then goto L458c68;
  #L458c62.  call `request`(v6, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L458c68.  return @kind void;
  #L458c6a.  v0:= v5.`io.reactivex.internal.subscriptions.SubscriptionArbiter.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L458c6e.  call temp:= `getAndSet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L458c74.  v6:= temp @kind object;
  #L458c76.  v6:= (`org.reactivestreams.Subscription`) v6 @kind object;
  #L458c7a.  if v6 == 0 then goto L458c84;
  #L458c7e.  call `cancel`(v6) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L458c84.  call `a`(v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.a:()V` @kind virtual;
  #L458c8a.  return @kind void;
}
