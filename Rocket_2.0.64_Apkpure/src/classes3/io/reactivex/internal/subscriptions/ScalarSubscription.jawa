record `io.reactivex.internal.subscriptions.ScalarSubscription` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.internal.fuseable.QueueSubscription` @kind interface {
  `java.lang.Object` `io.reactivex.internal.subscriptions.ScalarSubscription.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.subscriptions.ScalarSubscription.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.subscriptions.ScalarSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscriptions.ScalarSubscription` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L458814.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L45881a.  v0.`io.reactivex.internal.subscriptions.ScalarSubscription.b` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L45881e.  v0.`io.reactivex.internal.subscriptions.ScalarSubscription.a` @type ^`java.lang.Object` := v2 @kind object;
  #L458822.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458834.  v0:= 2I;
  #L458836.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L45883c.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458850.  v0:= 1I;
  #L458852.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L458858.  return @kind void;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.subscriptions.ScalarSubscription` v2 @kind this) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L458740.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L458746.  v0:= temp;
  #L458748.  v1:= 2I;
  #L45874a.  if v0 != v1 then goto L458752;
  #L45874e.  v0:= 1I;
  #L458750.  goto L458754;
  #L458752.  v0:= 0I;
  #L458754.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458768.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L45876e.  v0:= temp;
  #L458770.  if v0 == 0 then goto L458778;
  #L458774.  v0:= 1I;
  #L458776.  goto L45877a;
  #L458778.  v0:= 0I;
  #L45877a.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45878c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L458790.  v0:= "Should not be called!" @kind object;
  #L458794.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45879a.  throw v2;
}
procedure `boolean` `offer`(`io.reactivex.internal.subscriptions.ScalarSubscription` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L4587ac.  v1:= new `java.lang.UnsupportedOperationException`;
  #L4587b0.  v2:= "Should not be called!" @kind object;
  #L4587b4.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4587ba.  throw v1;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4587e4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4587ea.  v0:= temp;
  #L4587ec.  if v0 != 0 then goto L4587fe;
  #L4587f0.  v0:= 1I;
  #L4587f2.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4587f8.  v0:= v1.`io.reactivex.internal.subscriptions.ScalarSubscription.a` @type ^`java.lang.Object` @kind object;
  #L4587fc.  return v0 @kind object;
  #L4587fe.  v0:= 0I;
  #L458800.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45886c.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L458872.  v2:= temp;
  #L458874.  if v2 != 0 then goto L45887a;
  #L458878.  return @kind void;
  #L45887a.  v2:= 0I;
  #L45887c.  v3:= 1I;
  #L45887e.  call temp:= `compareAndSet`(v1, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L458884.  v2:= temp;
  #L458886.  if v2 == 0 then goto L4588ac;
  #L45888a.  v2:= v1.`io.reactivex.internal.subscriptions.ScalarSubscription.b` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45888e.  v3:= v1.`io.reactivex.internal.subscriptions.ScalarSubscription.a` @type ^`java.lang.Object` @kind object;
  #L458892.  call `onNext`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L458898.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L45889e.  v3:= temp;
  #L4588a0.  v0:= 2I;
  #L4588a2.  if v3 == v0 then goto L4588ac;
  #L4588a6.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4588ac.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.subscriptions.ScalarSubscription` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L4587cc.  v1:= v1 ^& 1;
  #L4587d0.  return v1;
}
