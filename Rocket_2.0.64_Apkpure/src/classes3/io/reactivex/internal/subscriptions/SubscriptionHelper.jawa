record `io.reactivex.internal.subscriptions.SubscriptionHelper` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class, `org.reactivestreams.Subscription` @kind interface {
}
global `io.reactivex.internal.subscriptions.SubscriptionHelper` `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `io.reactivex.internal.subscriptions.SubscriptionHelper`[] `@@io.reactivex.internal.subscriptions.SubscriptionHelper.a` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L458f04.  v0:= new `io.reactivex.internal.subscriptions.SubscriptionHelper`;
  #L458f08.  v1:= "CANCELLED" @kind object;
  #L458f0c.  v2:= 0I;
  #L458f0e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L458f14.  `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` := v0 @kind object;
  #L458f18.  v1:= 1I;
  #L458f1a.  v1:= new `io.reactivex.internal.subscriptions.SubscriptionHelper`[v1];
  #L458f1e.  v1[v2]:= v0 @kind object;
  #L458f22.  `@@io.reactivex.internal.subscriptions.SubscriptionHelper.a` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper`[] := v1 @kind object;
  #L458f26.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.subscriptions.SubscriptionHelper` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L458f38.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L458f3e.  return @kind void;
}
procedure `boolean` `cancel`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L458c9c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L458ca2.  v0:= temp @kind object;
  #L458ca4.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L458ca8.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L458cac.  if v0 == v1 then goto L458cce;
  #L458cb0.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L458cb6.  v2:= temp @kind object;
  #L458cb8.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L458cbc.  if v2 == v1 then goto L458cce;
  #L458cc0.  if v2 == 0 then goto L458cca;
  #L458cc4.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L458cca.  v2:= 1I;
  #L458ccc.  return v2;
  #L458cce.  v2:= 0I;
  #L458cd0.  return v2;
}
procedure `void` `deferredRequest`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object, `java.util.concurrent.atomic.AtomicLong` v3 @kind object, `long` v4 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L458f64.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L458f6a.  v0:= temp @kind object;
  #L458f6c.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L458f70.  if v0 == 0 then goto L458f7c;
  #L458f74.  call `request`(v0, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L458f7a.  goto L458fb8;
  #L458f7c.  call temp:= `validate`(v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L458f82.  v0:= temp;
  #L458f84.  if v0 == 0 then goto L458fb8;
  #L458f88.  call temp:= `add`(v3, v4) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L458f8e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L458f94.  v2:= temp @kind object;
  #L458f96.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L458f9a.  if v2 == 0 then goto L458fb8;
  #L458f9e.  v4:= 0L;
  #L458fa2.  call temp:= `getAndSet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L458fa8.  v0:= temp @kind wide;
  #L458faa.  v3:= lcmp(v0, v4);
  #L458fae.  if v3 == 0 then goto L458fb8;
  #L458fb2.  call `request`(v2, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L458fb8.  return @kind void;
}
procedure `boolean` `deferredSetOnce`(`java.util.concurrent.atomic.AtomicReference` v3 @kind object, `java.util.concurrent.atomic.AtomicLong` v4 @kind object, `org.reactivestreams.Subscription` v5 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L458ce4.  call temp:= `setOnce`(v3, v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L458cea.  v3:= temp;
  #L458cec.  if v3 == 0 then goto L458d0e;
  #L458cf0.  v0:= 0L;
  #L458cf4.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L458cfa.  v3:= temp @kind wide;
  #L458cfc.  v2:= lcmp(v3, v0);
  #L458d00.  if v2 == 0 then goto L458d0a;
  #L458d04.  call `request`(v5, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L458d0a.  v3:= 1I;
  #L458d0c.  return v3;
  #L458d0e.  v3:= 0I;
  #L458d10.  return v3;
}
procedure `boolean` `isCancelled`(`org.reactivestreams.Subscription` v1 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.isCancelled:(Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L458d24.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L458d28.  if v1 != v0 then goto L458d30;
  #L458d2c.  v1:= 1I;
  #L458d2e.  goto L458d32;
  #L458d30.  v1:= 0I;
  #L458d32.  return v1;
}
procedure `boolean` `replace`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L458d44.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L458d4a.  v0:= temp @kind object;
  #L458d4c.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L458d50.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L458d54.  if v0 != v1 then goto L458d66;
  #L458d58.  if v3 == 0 then goto L458d62;
  #L458d5c.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L458d62.  v2:= 0I;
  #L458d64.  return v2;
  #L458d66.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L458d6c.  v0:= temp;
  #L458d6e.  if v0 == 0 then goto L458d44;
  #L458d72.  v2:= 1I;
  #L458d74.  return v2;
}
procedure `void` `reportMoreProduced`(`long` v3 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.reportMoreProduced:(J)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L458fcc.  v0:= new `io.reactivex.exceptions.ProtocolViolationException`;
  #L458fd0.  v1:= new `java.lang.StringBuilder`;
  #L458fd4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L458fda.  v2:= "More produced than requested: " @kind object;
  #L458fde.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L458fe4.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L458fea.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L458ff0.  v3:= temp @kind object;
  #L458ff2.  call `<init>`(v0, v3) @signature `Lio/reactivex/exceptions/ProtocolViolationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L458ff8.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L458ffe.  return @kind void;
}
procedure `void` `reportSubscriptionSet`() @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.reportSubscriptionSet:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L459010.  v0:= new `io.reactivex.exceptions.ProtocolViolationException`;
  #L459014.  v1:= "Subscription already set!" @kind object;
  #L459018.  call `<init>`(v0, v1) @signature `Lio/reactivex/exceptions/ProtocolViolationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45901e.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L459024.  return @kind void;
}
procedure `boolean` `set`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L458d88.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L458d8e.  v0:= temp @kind object;
  #L458d90.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L458d94.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L458d98.  if v0 != v1 then goto L458daa;
  #L458d9c.  if v3 == 0 then goto L458da6;
  #L458da0.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L458da6.  v2:= 0I;
  #L458da8.  return v2;
  #L458daa.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L458db0.  v1:= temp;
  #L458db2.  if v1 == 0 then goto L458d88;
  #L458db6.  if v0 == 0 then goto L458dc0;
  #L458dba.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L458dc0.  v2:= 1I;
  #L458dc2.  return v2;
}
procedure `boolean` `setOnce`(`java.util.concurrent.atomic.AtomicReference` v1 @kind object, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L458dd4.  v0:= "d is null" @kind object;
  #L458dd8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L458dde.  v0:= 0I;
  #L458de0.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L458de6.  v0:= temp;
  #L458de8.  if v0 != 0 then goto L458e0c;
  #L458dec.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L458df2.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L458df8.  v1:= temp @kind object;
  #L458dfa.  v2:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L458dfe.  if v1 == v2 then goto L458e08;
  #L458e02.  call `reportSubscriptionSet`() @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.reportSubscriptionSet:()V` @kind static;
  #L458e08.  v1:= 0I;
  #L458e0a.  return v1;
  #L458e0c.  v1:= 1I;
  #L458e0e.  return v1;
}
procedure `boolean` `validate`(`long` v3 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L458e20.  v0:= 0L;
  #L458e24.  v2:= lcmp(v3, v0);
  #L458e28.  if v2 > 0 then goto L458e62;
  #L458e2c.  v0:= new `java.lang.IllegalArgumentException`;
  #L458e30.  v1:= new `java.lang.StringBuilder`;
  #L458e34.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L458e3a.  v2:= "n > 0 required but it was " @kind object;
  #L458e3e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L458e44.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L458e4a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L458e50.  v3:= temp @kind object;
  #L458e52.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L458e58.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L458e5e.  v3:= 0I;
  #L458e60.  return v3;
  #L458e62.  v3:= 1I;
  #L458e64.  return v3;
}
procedure `boolean` `validate`(`org.reactivestreams.Subscription` v1 @kind object, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L458e78.  v0:= 0I;
  #L458e7a.  if v2 != 0 then goto L458e94;
  #L458e7e.  v1:= new `java.lang.NullPointerException`;
  #L458e82.  v2:= "next is null" @kind object;
  #L458e86.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L458e8c.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L458e92.  return v0;
  #L458e94.  if v1 == 0 then goto L458ea6;
  #L458e98.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L458e9e.  call `reportSubscriptionSet`() @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.reportSubscriptionSet:()V` @kind static;
  #L458ea4.  return v0;
  #L458ea6.  v1:= 1I;
  #L458ea8.  return v1;
}
procedure `io.reactivex.internal.subscriptions.SubscriptionHelper` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.valueOf:(Ljava/lang/String;)Lio/reactivex/internal/subscriptions/SubscriptionHelper;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L458ebc.  v0:= constclass @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L458ec0.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L458ec6.  v1:= temp @kind object;
  #L458ec8.  v1:= (`io.reactivex.internal.subscriptions.SubscriptionHelper`) v1 @kind object;
  #L458ecc.  return v1 @kind object;
}
procedure `io.reactivex.internal.subscriptions.SubscriptionHelper`[] `values`() @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.values:()[Lio/reactivex/internal/subscriptions/SubscriptionHelper;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L458ee0.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.a` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper`[] @kind object;
  #L458ee4.  call temp:= `clone`(v0) @signature `[Lio/reactivex/internal/subscriptions/SubscriptionHelper;.clone:()Ljava/lang/Object;` @kind virtual;
  #L458eea.  v0:= temp @kind object;
  #L458eec.  v0:= (`io.reactivex.internal.subscriptions.SubscriptionHelper`[]) v0 @kind object;
  #L458ef0.  return v0 @kind object;
}
procedure `void` `cancel`(`io.reactivex.internal.subscriptions.SubscriptionHelper` v0 @kind this) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L458f50.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.subscriptions.SubscriptionHelper` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L459038.  return @kind void;
}
