record `io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.lang.Runnable` `io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$a.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$a` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$a;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L453f9c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L453fa2.  v0.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$a.a` @type ^`java.lang.Runnable` := v1 @kind object;
  #L453fa6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$a` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L453fb8.  v0:= 1I;
  #L453fba.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.lazySet:(Z)V` @kind virtual;
  #L453fc0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$a` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L453f80.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L453f86.  v0:= temp;
  #L453f88.  return v0;
}
procedure `void` `run`(`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$a` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L453fd4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L453fda.  v0:= temp;
  #L453fdc.  if v0 == 0 then goto L453fe2;
  #L453fe0.  return @kind void;
  #L453fe2.  v0:= 1I;
  #L453fe4.  v1:= v2.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$a.a` @type ^`java.lang.Runnable` @kind object;
  #L453fe8.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L453fee.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.lazySet:(Z)V` @kind virtual;
  #L453ff4.  return @kind void;
  #L453ff6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L453ff8.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.lazySet:(Z)V` @kind virtual;
  #L453ffe.  throw v1;
  catch `java.lang.Throwable` @[L453fe4..L453fee] goto L453ff6;
}
