record `io.reactivex.internal.schedulers.IoScheduler` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Scheduler` @kind class {
  `java.util.concurrent.ThreadFactory` `io.reactivex.internal.schedulers.IoScheduler.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.schedulers.IoScheduler.c` @AccessFlag FINAL;
}
global `io.reactivex.internal.schedulers.RxThreadFactory` `@@io.reactivex.internal.schedulers.IoScheduler.d` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.schedulers.RxThreadFactory` `@@io.reactivex.internal.schedulers.IoScheduler.e` @AccessFlag STATIC_FINAL;
global `java.util.concurrent.TimeUnit` `@@io.reactivex.internal.schedulers.IoScheduler.f` @AccessFlag PRIVATE_STATIC_FINAL;
global `io.reactivex.internal.schedulers.IoScheduler$c` `@@io.reactivex.internal.schedulers.IoScheduler.g` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.schedulers.IoScheduler$a` `@@io.reactivex.internal.schedulers.IoScheduler.h` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/IoScheduler;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4549c4.  v0:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4549c8.  `@@io.reactivex.internal.schedulers.IoScheduler.f` @type ^`java.util.concurrent.TimeUnit` := v0 @kind object;
  #L4549cc.  v0:= new `io.reactivex.internal.schedulers.IoScheduler$c`;
  #L4549d0.  v1:= new `io.reactivex.internal.schedulers.RxThreadFactory`;
  #L4549d4.  v2:= "RxCachedThreadSchedulerShutdown" @kind object;
  #L4549d8.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4549de.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/IoScheduler$c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L4549e4.  `@@io.reactivex.internal.schedulers.IoScheduler.g` @type ^`io.reactivex.internal.schedulers.IoScheduler$c` := v0 @kind object;
  #L4549e8.  call `dispose`(v0) @signature `Lio/reactivex/internal/schedulers/NewThreadWorker;.dispose:()V` @kind virtual;
  #L4549ee.  v0:= "rx2.io-priority" @kind object;
  #L4549f2.  v1:= 5I;
  #L4549f4.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L4549fa.  v0:= temp @kind object;
  #L4549fc.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L454a02.  v0:= temp;
  #L454a04.  v1:= 10I;
  #L454a08.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L454a0e.  v0:= temp;
  #L454a10.  v1:= 1I;
  #L454a12.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L454a18.  v0:= temp;
  #L454a1a.  v1:= new `io.reactivex.internal.schedulers.RxThreadFactory`;
  #L454a1e.  v2:= "RxCachedThreadScheduler" @kind object;
  #L454a22.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L454a28.  `@@io.reactivex.internal.schedulers.IoScheduler.d` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` := v1 @kind object;
  #L454a2c.  v2:= new `io.reactivex.internal.schedulers.RxThreadFactory`;
  #L454a30.  v3:= "RxCachedWorkerPoolEvictor" @kind object;
  #L454a34.  call `<init>`(v2, v3, v0) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L454a3a.  `@@io.reactivex.internal.schedulers.IoScheduler.e` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` := v2 @kind object;
  #L454a3e.  v0:= new `io.reactivex.internal.schedulers.IoScheduler$a`;
  #L454a42.  v2:= 0L;
  #L454a46.  v4:= 0I;
  #L454a48.  call `<init>`(v0, v2, v4, v1) @signature `Lio/reactivex/internal/schedulers/IoScheduler$a;.<init>:(JLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L454a4e.  `@@io.reactivex.internal.schedulers.IoScheduler.h` @type ^`io.reactivex.internal.schedulers.IoScheduler$a` := v0 @kind object;
  #L454a52.  call `e`(v0) @signature `Lio/reactivex/internal/schedulers/IoScheduler$a;.e:()V` @kind virtual;
  #L454a58.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.IoScheduler` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/IoScheduler;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L454a6c.  v0:= `@@io.reactivex.internal.schedulers.IoScheduler.d` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` @kind object;
  #L454a70.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/schedulers/IoScheduler;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L454a76.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.IoScheduler` v1 @kind this, `java.util.concurrent.ThreadFactory` v2 @kind object) @signature `Lio/reactivex/internal/schedulers/IoScheduler;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L454a88.  call `<init>`(v1) @signature `Lio/reactivex/Scheduler;.<init>:()V` @kind direct;
  #L454a8e.  v1.`io.reactivex.internal.schedulers.IoScheduler.b` @type ^`java.util.concurrent.ThreadFactory` := v2 @kind object;
  #L454a92.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L454a96.  v0:= `@@io.reactivex.internal.schedulers.IoScheduler.h` @type ^`io.reactivex.internal.schedulers.IoScheduler$a` @kind object;
  #L454a9a.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L454aa0.  v1.`io.reactivex.internal.schedulers.IoScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L454aa4.  call `start`(v1) @signature `Lio/reactivex/internal/schedulers/IoScheduler;.start:()V` @kind virtual;
  #L454aaa.  return @kind void;
}
procedure `io.reactivex.Scheduler$Worker` `createWorker`(`io.reactivex.internal.schedulers.IoScheduler` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/IoScheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L454998.  v0:= new `io.reactivex.internal.schedulers.IoScheduler$b`;
  #L45499c.  v1:= v2.`io.reactivex.internal.schedulers.IoScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4549a0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4549a6.  v1:= temp @kind object;
  #L4549a8.  v1:= (`io.reactivex.internal.schedulers.IoScheduler$a`) v1 @kind object;
  #L4549ac.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/IoScheduler$b;.<init>:(Lio/reactivex/internal/schedulers/IoScheduler$a;)V` @kind direct;
  #L4549b2.  return v0 @kind object;
}
procedure `void` `shutdown`(`io.reactivex.internal.schedulers.IoScheduler` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/IoScheduler;.shutdown:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L454abc.  v0:= v3.`io.reactivex.internal.schedulers.IoScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L454ac0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L454ac6.  v0:= temp @kind object;
  #L454ac8.  v0:= (`io.reactivex.internal.schedulers.IoScheduler$a`) v0 @kind object;
  #L454acc.  v1:= `@@io.reactivex.internal.schedulers.IoScheduler.h` @type ^`io.reactivex.internal.schedulers.IoScheduler$a` @kind object;
  #L454ad0.  if v0 != v1 then goto L454ad6;
  #L454ad4.  return @kind void;
  #L454ad6.  v2:= v3.`io.reactivex.internal.schedulers.IoScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L454ada.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L454ae0.  v1:= temp;
  #L454ae2.  if v1 == 0 then goto L454abc;
  #L454ae6.  call `e`(v0) @signature `Lio/reactivex/internal/schedulers/IoScheduler$a;.e:()V` @kind virtual;
  #L454aec.  return @kind void;
}
procedure `int` `size`(`io.reactivex.internal.schedulers.IoScheduler` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/IoScheduler;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L454968.  v0:= v1.`io.reactivex.internal.schedulers.IoScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45496c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L454972.  v0:= temp @kind object;
  #L454974.  v0:= (`io.reactivex.internal.schedulers.IoScheduler$a`) v0 @kind object;
  #L454978.  v0:= v0.`io.reactivex.internal.schedulers.IoScheduler$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L45497c.  call temp:= `size`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.size:()I` @kind virtual;
  #L454982.  v0:= temp;
  #L454984.  return v0;
}
procedure `void` `start`(`io.reactivex.internal.schedulers.IoScheduler` v5 @kind this) @signature `Lio/reactivex/internal/schedulers/IoScheduler;.start:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L454b00.  v0:= new `io.reactivex.internal.schedulers.IoScheduler$a`;
  #L454b04.  v1:= `@@io.reactivex.internal.schedulers.IoScheduler.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L454b08.  v2:= v5.`io.reactivex.internal.schedulers.IoScheduler.b` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L454b0c.  v3:= 60L;
  #L454b10.  call `<init>`(v0, v3, v1, v2) @signature `Lio/reactivex/internal/schedulers/IoScheduler$a;.<init>:(JLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L454b16.  v1:= v5.`io.reactivex.internal.schedulers.IoScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L454b1a.  v2:= `@@io.reactivex.internal.schedulers.IoScheduler.h` @type ^`io.reactivex.internal.schedulers.IoScheduler$a` @kind object;
  #L454b1e.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L454b24.  v1:= temp;
  #L454b26.  if v1 != 0 then goto L454b30;
  #L454b2a.  call `e`(v0) @signature `Lio/reactivex/internal/schedulers/IoScheduler$a;.e:()V` @kind virtual;
  #L454b30.  return @kind void;
}
