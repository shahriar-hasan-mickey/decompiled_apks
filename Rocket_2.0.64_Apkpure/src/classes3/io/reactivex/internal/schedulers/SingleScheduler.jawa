record `io.reactivex.internal.schedulers.SingleScheduler` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Scheduler` @kind class {
  `java.util.concurrent.ThreadFactory` `io.reactivex.internal.schedulers.SingleScheduler.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.schedulers.SingleScheduler.c` @AccessFlag FINAL;
}
global `io.reactivex.internal.schedulers.RxThreadFactory` `@@io.reactivex.internal.schedulers.SingleScheduler.d` @AccessFlag STATIC_FINAL;
global `java.util.concurrent.ScheduledExecutorService` `@@io.reactivex.internal.schedulers.SingleScheduler.e` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L455c0c.  v0:= 0I;
  #L455c0e.  call temp:= `newScheduledThreadPool`(v0) @signature `Ljava/util/concurrent/Executors;.newScheduledThreadPool:(I)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L455c14.  v0:= temp @kind object;
  #L455c16.  `@@io.reactivex.internal.schedulers.SingleScheduler.e` @type ^`java.util.concurrent.ScheduledExecutorService` := v0 @kind object;
  #L455c1a.  call `shutdown`(v0) @signature `Ljava/util/concurrent/ScheduledExecutorService;.shutdown:()V` @kind interface;
  #L455c20.  v0:= "rx2.single-priority" @kind object;
  #L455c24.  v1:= 5I;
  #L455c26.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L455c2c.  v0:= temp @kind object;
  #L455c2e.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L455c34.  v0:= temp;
  #L455c36.  v1:= 10I;
  #L455c3a.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L455c40.  v0:= temp;
  #L455c42.  v1:= 1I;
  #L455c44.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L455c4a.  v0:= temp;
  #L455c4c.  v2:= new `io.reactivex.internal.schedulers.RxThreadFactory`;
  #L455c50.  v3:= "RxSingleScheduler" @kind object;
  #L455c54.  call `<init>`(v2, v3, v0, v1) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;IZ)V` @kind direct;
  #L455c5a.  `@@io.reactivex.internal.schedulers.SingleScheduler.d` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` := v2 @kind object;
  #L455c5e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.SingleScheduler` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L455c70.  v0:= `@@io.reactivex.internal.schedulers.SingleScheduler.d` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` @kind object;
  #L455c74.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L455c7a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.SingleScheduler` v1 @kind this, `java.util.concurrent.ThreadFactory` v2 @kind object) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L455c8c.  call `<init>`(v1) @signature `Lio/reactivex/Scheduler;.<init>:()V` @kind direct;
  #L455c92.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L455c96.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L455c9c.  v1.`io.reactivex.internal.schedulers.SingleScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L455ca0.  v1.`io.reactivex.internal.schedulers.SingleScheduler.b` @type ^`java.util.concurrent.ThreadFactory` := v2 @kind object;
  #L455ca4.  call temp:= `a`(v2) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.a:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L455caa.  v2:= temp @kind object;
  #L455cac.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L455cb2.  return @kind void;
}
procedure `java.util.concurrent.ScheduledExecutorService` `a`(`java.util.concurrent.ThreadFactory` v0 @kind object) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.a:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @AccessFlag STATIC {
    temp;

  #L455bf0.  call temp:= `create`(v0) @signature `Lio/reactivex/internal/schedulers/SchedulerPoolFactory;.create:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L455bf6.  v0:= temp @kind object;
  #L455bf8.  return v0 @kind object;
}
procedure `io.reactivex.Scheduler$Worker` `createWorker`(`io.reactivex.internal.schedulers.SingleScheduler` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L455ad0.  v0:= new `io.reactivex.internal.schedulers.SingleScheduler$a`;
  #L455ad4.  v1:= v2.`io.reactivex.internal.schedulers.SingleScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L455ad8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L455ade.  v1:= temp @kind object;
  #L455ae0.  v1:= (`java.util.concurrent.ScheduledExecutorService`) v1 @kind object;
  #L455ae4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/SingleScheduler$a;.<init>:(Ljava/util/concurrent/ScheduledExecutorService;)V` @kind direct;
  #L455aea.  return v0 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `scheduleDirect`(`io.reactivex.internal.schedulers.SingleScheduler` v3 @kind this, `java.lang.Runnable` v4 @kind object, `long` v5 , `java.util.concurrent.TimeUnit` v7 @kind object) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L455afc.  v0:= new `io.reactivex.internal.schedulers.ScheduledDirectTask`;
  #L455b00.  call temp:= `onSchedule`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onSchedule:(Ljava/lang/Runnable;)Ljava/lang/Runnable;` @kind static;
  #L455b06.  v4:= temp @kind object;
  #L455b08.  call `<init>`(v0, v4) @signature `Lio/reactivex/internal/schedulers/ScheduledDirectTask;.<init>:(Ljava/lang/Runnable;)V` @kind direct;
  #L455b0e.  v1:= 0L;
  #L455b12.  v4:= lcmp(v5, v1);
  #L455b16.  if v4 > 0 then goto L455b34;
  #L455b1a.  v4:= v3.`io.reactivex.internal.schedulers.SingleScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L455b1e.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L455b24.  v4:= temp @kind object;
  #L455b26.  v4:= (`java.util.concurrent.ScheduledExecutorService`) v4 @kind object;
  #L455b2a.  call temp:= `submit`(v4, v0) @signature `Ljava/util/concurrent/ScheduledExecutorService;.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;` @kind interface;
  #L455b30.  v4:= temp @kind object;
  #L455b32.  goto L455b4c;
  #L455b34.  v4:= v3.`io.reactivex.internal.schedulers.SingleScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L455b38.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L455b3e.  v4:= temp @kind object;
  #L455b40.  v4:= (`java.util.concurrent.ScheduledExecutorService`) v4 @kind object;
  #L455b44.  call temp:= `schedule`(v4, v0, v5, v7) @signature `Ljava/util/concurrent/ScheduledExecutorService;.schedule:(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;` @kind interface;
  #L455b4a.  v4:= temp @kind object;
  #L455b4c.  call `setFuture`(v0, v4) @signature `Lio/reactivex/internal/schedulers/a;.setFuture:(Ljava/util/concurrent/Future;)V` @kind virtual;
  #L455b52.  return v0 @kind object;
  #L455b54.  v4:= Exception @type ^`java.util.concurrent.RejectedExecutionException` @kind object;
  #L455b56.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L455b5c.  v4:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L455b60.  return v4 @kind object;
  catch `java.util.concurrent.RejectedExecutionException` @[L455b1a..L455b52] goto L455b54;
}
procedure `io.reactivex.disposables.Disposable` `schedulePeriodicallyDirect`(`io.reactivex.internal.schedulers.SingleScheduler` v8 @kind this, `java.lang.Runnable` v9 @kind object, `long` v10 , `long` v12 , `java.util.concurrent.TimeUnit` v14 @kind object) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L455b84.  v7:= new `io.reactivex.internal.schedulers.ScheduledDirectPeriodicTask`;
  #L455b88.  call temp:= `onSchedule`(v9) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onSchedule:(Ljava/lang/Runnable;)Ljava/lang/Runnable;` @kind static;
  #L455b8e.  v9:= temp @kind object;
  #L455b90.  call `<init>`(v7, v9) @signature `Lio/reactivex/internal/schedulers/ScheduledDirectPeriodicTask;.<init>:(Ljava/lang/Runnable;)V` @kind direct;
  #L455b96.  v9:= v8.`io.reactivex.internal.schedulers.SingleScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L455b9a.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L455ba0.  v9:= temp @kind object;
  #L455ba2.  v0:= v9 @kind object;
  #L455ba4.  v0:= (`java.util.concurrent.ScheduledExecutorService`) v0 @kind object;
  #L455ba8.  v1:= v7 @kind object;
  #L455baa.  v2:= v10 @kind wide;
  #L455bac.  v4:= v12 @kind wide;
  #L455bae.  v6:= v14 @kind object;
  #L455bb0.  call temp:= `scheduleAtFixedRate`(v0, v1, v2, v4, v6) @signature `Ljava/util/concurrent/ScheduledExecutorService;.scheduleAtFixedRate:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;` @kind interface;
  #L455bb6.  v9:= temp @kind object;
  #L455bb8.  call `setFuture`(v7, v9) @signature `Lio/reactivex/internal/schedulers/a;.setFuture:(Ljava/util/concurrent/Future;)V` @kind virtual;
  #L455bbe.  return v7 @kind object;
  #L455bc0.  v9:= Exception @type ^`java.util.concurrent.RejectedExecutionException` @kind object;
  #L455bc2.  call `onError`(v9) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L455bc8.  v9:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L455bcc.  return v9 @kind object;
  catch `java.util.concurrent.RejectedExecutionException` @[L455b96..L455bbe] goto L455bc0;
}
procedure `void` `shutdown`(`io.reactivex.internal.schedulers.SingleScheduler` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.shutdown:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L455cc4.  v0:= v2.`io.reactivex.internal.schedulers.SingleScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L455cc8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L455cce.  v0:= temp @kind object;
  #L455cd0.  v0:= (`java.util.concurrent.ScheduledExecutorService`) v0 @kind object;
  #L455cd4.  v1:= `@@io.reactivex.internal.schedulers.SingleScheduler.e` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L455cd8.  if v0 == v1 then goto L455cf6;
  #L455cdc.  v0:= v2.`io.reactivex.internal.schedulers.SingleScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L455ce0.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L455ce6.  v0:= temp @kind object;
  #L455ce8.  v0:= (`java.util.concurrent.ScheduledExecutorService`) v0 @kind object;
  #L455cec.  if v0 == v1 then goto L455cf6;
  #L455cf0.  call temp:= `shutdownNow`(v0) @signature `Ljava/util/concurrent/ScheduledExecutorService;.shutdownNow:()Ljava/util/List;` @kind interface;
  #L455cf6.  return @kind void;
}
procedure `void` `start`(`io.reactivex.internal.schedulers.SingleScheduler` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.start:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L455d08.  v0:= 0I;
  #L455d0a.  v1:= v3.`io.reactivex.internal.schedulers.SingleScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L455d0e.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L455d14.  v1:= temp @kind object;
  #L455d16.  v1:= (`java.util.concurrent.ScheduledExecutorService`) v1 @kind object;
  #L455d1a.  v2:= `@@io.reactivex.internal.schedulers.SingleScheduler.e` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L455d1e.  if v1 == v2 then goto L455d2e;
  #L455d22.  if v0 == 0 then goto L455d2c;
  #L455d26.  call `shutdown`(v0) @signature `Ljava/util/concurrent/ScheduledExecutorService;.shutdown:()V` @kind interface;
  #L455d2c.  return @kind void;
  #L455d2e.  if v0 != 0 then goto L455d3e;
  #L455d32.  v0:= v3.`io.reactivex.internal.schedulers.SingleScheduler.b` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L455d36.  call temp:= `a`(v0) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.a:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L455d3c.  v0:= temp @kind object;
  #L455d3e.  v2:= v3.`io.reactivex.internal.schedulers.SingleScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L455d42.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L455d48.  v1:= temp;
  #L455d4a.  if v1 == 0 then goto L455d0a;
  #L455d4e.  return @kind void;
}
