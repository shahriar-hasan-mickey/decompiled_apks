record `io.reactivex.internal.schedulers.ComputationScheduler$b` @kind class @AccessFlag FINAL {
  `int` `io.reactivex.internal.schedulers.ComputationScheduler$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.schedulers.ComputationScheduler$c`[] `io.reactivex.internal.schedulers.ComputationScheduler$b.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.schedulers.ComputationScheduler$b.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.ComputationScheduler$b` v3 @kind this, `int` v4 , `java.util.concurrent.ThreadFactory` v5 @kind object) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$b;.<init>:(ILjava/util/concurrent/ThreadFactory;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L453ac4.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L453aca.  v3.`io.reactivex.internal.schedulers.ComputationScheduler$b.a` @type ^`int` := v4;
  #L453ace.  v0:= new `io.reactivex.internal.schedulers.ComputationScheduler$c`[v4];
  #L453ad2.  v3.`io.reactivex.internal.schedulers.ComputationScheduler$b.b` @type ^`io.reactivex.internal.schedulers.ComputationScheduler$c`[] := v0 @kind object;
  #L453ad6.  v0:= 0I;
  #L453ad8.  if v0 >= v4 then goto L453af4;
  #L453adc.  v1:= v3.`io.reactivex.internal.schedulers.ComputationScheduler$b.b` @type ^`io.reactivex.internal.schedulers.ComputationScheduler$c`[] @kind object;
  #L453ae0.  v2:= new `io.reactivex.internal.schedulers.ComputationScheduler$c`;
  #L453ae4.  call `<init>`(v2, v5) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L453aea.  v1[v0]:= v2 @kind object;
  #L453aee.  v0:= v0 + 1;
  #L453af2.  goto L453ad8;
  #L453af4.  return @kind void;
}
procedure `io.reactivex.internal.schedulers.ComputationScheduler$c` `a`(`io.reactivex.internal.schedulers.ComputationScheduler$b` v6 @kind this) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$b;.a:()Lio/reactivex/internal/schedulers/ComputationScheduler$c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L453a88.  v0:= v6.`io.reactivex.internal.schedulers.ComputationScheduler$b.a` @type ^`int`;
  #L453a8c.  if v0 != 0 then goto L453a96;
  #L453a90.  v0:= `@@io.reactivex.internal.schedulers.ComputationScheduler.g` @type ^`io.reactivex.internal.schedulers.ComputationScheduler$c` @kind object;
  #L453a94.  return v0 @kind object;
  #L453a96.  v1:= v6.`io.reactivex.internal.schedulers.ComputationScheduler$b.b` @type ^`io.reactivex.internal.schedulers.ComputationScheduler$c`[] @kind object;
  #L453a9a.  v2:= v6.`io.reactivex.internal.schedulers.ComputationScheduler$b.c` @type ^`long` @kind wide;
  #L453a9e.  v4:= 1L;
  #L453aa2.  v4:= v4 + v2 @kind long;
  #L453aa4.  v6.`io.reactivex.internal.schedulers.ComputationScheduler$b.c` @type ^`long` := v4 @kind wide;
  #L453aa8.  v4:= (`long`) v0 @kind i2l;
  #L453aaa.  v2:= v2 %% v4 @kind long;
  #L453aac.  v0:= (`int`) v2 @kind l2i;
  #L453aae.  v0:= v1[v0] @kind object;
  #L453ab2.  return v0 @kind object;
}
procedure `void` `b`(`io.reactivex.internal.schedulers.ComputationScheduler$b` v4 @kind this) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$b;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L453b08.  v0:= v4.`io.reactivex.internal.schedulers.ComputationScheduler$b.b` @type ^`io.reactivex.internal.schedulers.ComputationScheduler$c`[] @kind object;
  #L453b0c.  v1:= length @variable v0;
  #L453b0e.  v2:= 0I;
  #L453b10.  if v2 >= v1 then goto L453b24;
  #L453b14.  v3:= v0[v2] @kind object;
  #L453b18.  call `dispose`(v3) @signature `Lio/reactivex/internal/schedulers/NewThreadWorker;.dispose:()V` @kind virtual;
  #L453b1e.  v2:= v2 + 1;
  #L453b22.  goto L453b10;
  #L453b24.  return @kind void;
}
