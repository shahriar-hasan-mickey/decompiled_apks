record `io.reactivex.internal.schedulers.SchedulerWhen$f` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.SchedulerWhen$f` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$f;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4557c4.  v0:= `@@io.reactivex.internal.schedulers.SchedulerWhen.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4557c8.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4557ce.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.schedulers.SchedulerWhen$f` v2 @kind this, `io.reactivex.Scheduler$Worker` v3 @kind object, `io.reactivex.CompletableObserver` v4 @kind object) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$f;.a:(Lio/reactivex/Scheduler$Worker;Lio/reactivex/CompletableObserver;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4557e0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4557e6.  v0:= temp @kind object;
  #L4557e8.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L4557ec.  v1:= `@@io.reactivex.internal.schedulers.SchedulerWhen.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4557f0.  if v0 != v1 then goto L4557f6;
  #L4557f4.  return @kind void;
  #L4557f6.  v1:= `@@io.reactivex.internal.schedulers.SchedulerWhen.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4557fa.  if v0 == v1 then goto L455800;
  #L4557fe.  return @kind void;
  #L455800.  call temp:= `b`(v2, v3, v4) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$f;.b:(Lio/reactivex/Scheduler$Worker;Lio/reactivex/CompletableObserver;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L455806.  v3:= temp @kind object;
  #L455808.  call temp:= `compareAndSet`(v2, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45580e.  v4:= temp;
  #L455810.  if v4 != 0 then goto L45581a;
  #L455814.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45581a.  return @kind void;
}
procedure `io.reactivex.disposables.Disposable` `b`(`io.reactivex.Scheduler$Worker` v0 @kind object, `io.reactivex.CompletableObserver` v1 @kind object) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$f;.b:(Lio/reactivex/Scheduler$Worker;Lio/reactivex/CompletableObserver;)Lio/reactivex/disposables/Disposable;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.SchedulerWhen$f` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$f;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45582c.  v0:= `@@io.reactivex.internal.schedulers.SchedulerWhen.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L455830.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L455836.  v1:= temp @kind object;
  #L455838.  v1:= (`io.reactivex.disposables.Disposable`) v1 @kind object;
  #L45583c.  v2:= `@@io.reactivex.internal.schedulers.SchedulerWhen.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L455840.  if v1 != v2 then goto L455846;
  #L455844.  return @kind void;
  #L455846.  call temp:= `compareAndSet`(v3, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45584c.  v2:= temp;
  #L45584e.  if v2 == 0 then goto L455830;
  #L455852.  v0:= `@@io.reactivex.internal.schedulers.SchedulerWhen.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L455856.  if v1 == v0 then goto L455860;
  #L45585a.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L455860.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.SchedulerWhen$f` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$f;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45579c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4557a2.  v0:= temp @kind object;
  #L4557a4.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L4557a8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4557ae.  v0:= temp;
  #L4557b0.  return v0;
}
