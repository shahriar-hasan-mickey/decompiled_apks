record `io.reactivex.internal.schedulers.RxThreadFactory` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `java.util.concurrent.ThreadFactory` @kind interface {
  `java.lang.String` `io.reactivex.internal.schedulers.RxThreadFactory.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.schedulers.RxThreadFactory.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.schedulers.RxThreadFactory.c` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.schedulers.RxThreadFactory.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.schedulers.RxThreadFactory` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L454ef4.  v0:= 5I;
  #L454ef6.  v1:= 0I;
  #L454ef8.  call `<init>`(v2, v3, v0, v1) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;IZ)V` @kind direct;
  #L454efe.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.RxThreadFactory` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L454f10.  v0:= 0I;
  #L454f12.  call `<init>`(v1, v2, v3, v0) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;IZ)V` @kind direct;
  #L454f18.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.RxThreadFactory` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L454f2c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L454f32.  v0.`io.reactivex.internal.schedulers.RxThreadFactory.a` @type ^`java.lang.String` := v1 @kind object;
  #L454f36.  v0.`io.reactivex.internal.schedulers.RxThreadFactory.b` @type ^`int` := v2;
  #L454f3a.  v0.`io.reactivex.internal.schedulers.RxThreadFactory.c` @type ^`boolean` := v3 @kind boolean;
  #L454f3e.  return @kind void;
}
procedure `java.lang.Thread` `newThread`(`io.reactivex.internal.schedulers.RxThreadFactory` v3 @kind this, `java.lang.Runnable` v4 @kind object) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L454e84.  v0:= new `java.lang.StringBuilder`;
  #L454e88.  v1:= v3.`io.reactivex.internal.schedulers.RxThreadFactory.a` @type ^`java.lang.String` @kind object;
  #L454e8c.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L454e92.  v1:= 45I;
  #L454e96.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L454e9c.  call temp:= `incrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.incrementAndGet:()J` @kind virtual;
  #L454ea2.  v1:= temp @kind wide;
  #L454ea4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L454eaa.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L454eb0.  v0:= temp @kind object;
  #L454eb2.  v1:= v3.`io.reactivex.internal.schedulers.RxThreadFactory.c` @type ^`boolean` @kind boolean;
  #L454eb6.  if v1 == 0 then goto L454ec6;
  #L454eba.  v1:= new `io.reactivex.internal.schedulers.RxThreadFactory$a`;
  #L454ebe.  call `<init>`(v1, v4, v0) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory$a;.<init>:(Ljava/lang/Runnable;Ljava/lang/String;)V` @kind direct;
  #L454ec4.  goto L454ed0;
  #L454ec6.  v1:= new `java.lang.Thread`;
  #L454eca.  call `<init>`(v1, v4, v0) @signature `Ljava/lang/Thread;.<init>:(Ljava/lang/Runnable;Ljava/lang/String;)V` @kind direct;
  #L454ed0.  v4:= v3.`io.reactivex.internal.schedulers.RxThreadFactory.b` @type ^`int`;
  #L454ed4.  call `setPriority`(v1, v4) @signature `Ljava/lang/Thread;.setPriority:(I)V` @kind virtual;
  #L454eda.  v4:= 1I;
  #L454edc.  call `setDaemon`(v1, v4) @signature `Ljava/lang/Thread;.setDaemon:(Z)V` @kind virtual;
  #L454ee2.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`io.reactivex.internal.schedulers.RxThreadFactory` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L454e40.  v0:= new `java.lang.StringBuilder`;
  #L454e44.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L454e4a.  v1:= "RxThreadFactory[" @kind object;
  #L454e4e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L454e54.  v1:= v2.`io.reactivex.internal.schedulers.RxThreadFactory.a` @type ^`java.lang.String` @kind object;
  #L454e58.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L454e5e.  v1:= "]" @kind object;
  #L454e62.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L454e68.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L454e6e.  v0:= temp @kind object;
  #L454e70.  return v0 @kind object;
}
