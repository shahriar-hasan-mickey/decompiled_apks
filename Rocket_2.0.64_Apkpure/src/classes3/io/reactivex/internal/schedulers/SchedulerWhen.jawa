record `io.reactivex.internal.schedulers.SchedulerWhen` @kind class @AccessFlag PUBLIC extends `io.reactivex.Scheduler` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Scheduler` `io.reactivex.internal.schedulers.SchedulerWhen.b` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.processors.FlowableProcessor` `io.reactivex.internal.schedulers.SchedulerWhen.c` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.schedulers.SchedulerWhen.d` @AccessFlag PRIVATE;
}
global `io.reactivex.disposables.Disposable` `@@io.reactivex.internal.schedulers.SchedulerWhen.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.disposables.Disposable` `@@io.reactivex.internal.schedulers.SchedulerWhen.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/SchedulerWhen;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L455928.  v0:= new `io.reactivex.internal.schedulers.SchedulerWhen$g`;
  #L45592c.  call `<init>`(v0) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$g;.<init>:()V` @kind direct;
  #L455932.  `@@io.reactivex.internal.schedulers.SchedulerWhen.e` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L455936.  call temp:= `disposed`() @signature `Lio/reactivex/disposables/Disposables;.disposed:()Lio/reactivex/disposables/Disposable;` @kind static;
  #L45593c.  v0:= temp @kind object;
  #L45593e.  `@@io.reactivex.internal.schedulers.SchedulerWhen.f` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L455942.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.SchedulerWhen` v0 @kind this, `io.reactivex.functions.Function` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen;.<init>:(Lio/reactivex/functions/Function;Lio/reactivex/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L455954.  call `<init>`(v0) @signature `Lio/reactivex/Scheduler;.<init>:()V` @kind direct;
  #L45595a.  v0.`io.reactivex.internal.schedulers.SchedulerWhen.b` @type ^`io.reactivex.Scheduler` := v2 @kind object;
  #L45595e.  call temp:= `create`() @signature `Lio/reactivex/processors/UnicastProcessor;.create:()Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L455964.  v2:= temp @kind object;
  #L455966.  call temp:= `toSerialized`(v2) @signature `Lio/reactivex/processors/FlowableProcessor;.toSerialized:()Lio/reactivex/processors/FlowableProcessor;` @kind virtual;
  #L45596c.  v2:= temp @kind object;
  #L45596e.  v0.`io.reactivex.internal.schedulers.SchedulerWhen.c` @type ^`io.reactivex.processors.FlowableProcessor` := v2 @kind object;
  #L455972.  call temp:= `apply`(v1, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L455978.  v1:= temp @kind object;
  #L45597a.  v1:= (`io.reactivex.Completable`) v1 @kind object;
  #L45597e.  call temp:= `subscribe`(v1) @signature `Lio/reactivex/Completable;.subscribe:()Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L455984.  v1:= temp @kind object;
  #L455986.  v0.`io.reactivex.internal.schedulers.SchedulerWhen.d` @type ^`io.reactivex.disposables.Disposable` := v1 @kind object;
  #L45598a.  goto L455994;
  #L45598c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45598e.  call temp:= `propagate`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L455994.  return @kind void;
  catch `java.lang.Throwable` @[L455972..L45598a] goto L45598c;
}
procedure `io.reactivex.Scheduler$Worker` `createWorker`(`io.reactivex.internal.schedulers.SchedulerWhen` v4 @kind this) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen;.createWorker:()Lio/reactivex/Scheduler$Worker;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4558d4.  v0:= v4.`io.reactivex.internal.schedulers.SchedulerWhen.b` @type ^`io.reactivex.Scheduler` @kind object;
  #L4558d8.  call temp:= `createWorker`(v0) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L4558de.  v0:= temp @kind object;
  #L4558e0.  call temp:= `create`() @signature `Lio/reactivex/processors/UnicastProcessor;.create:()Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L4558e6.  v1:= temp @kind object;
  #L4558e8.  call temp:= `toSerialized`(v1) @signature `Lio/reactivex/processors/FlowableProcessor;.toSerialized:()Lio/reactivex/processors/FlowableProcessor;` @kind virtual;
  #L4558ee.  v1:= temp @kind object;
  #L4558f0.  v2:= new `io.reactivex.internal.schedulers.SchedulerWhen$a`;
  #L4558f4.  call `<init>`(v2, v0) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$a;.<init>:(Lio/reactivex/Scheduler$Worker;)V` @kind direct;
  #L4558fa.  call temp:= `map`(v1, v2) @signature `Lio/reactivex/Flowable;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L455900.  v2:= temp @kind object;
  #L455902.  v3:= new `io.reactivex.internal.schedulers.SchedulerWhen$e`;
  #L455906.  call `<init>`(v3, v1, v0) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$e;.<init>:(Lio/reactivex/processors/FlowableProcessor;Lio/reactivex/Scheduler$Worker;)V` @kind direct;
  #L45590c.  v0:= v4.`io.reactivex.internal.schedulers.SchedulerWhen.c` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L455910.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L455916.  return v3 @kind object;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.SchedulerWhen` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4559b4.  v0:= v1.`io.reactivex.internal.schedulers.SchedulerWhen.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4559b8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4559be.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.SchedulerWhen` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4558b4.  v0:= v1.`io.reactivex.internal.schedulers.SchedulerWhen.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4558b8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4558be.  v0:= temp;
  #L4558c0.  return v0;
}
