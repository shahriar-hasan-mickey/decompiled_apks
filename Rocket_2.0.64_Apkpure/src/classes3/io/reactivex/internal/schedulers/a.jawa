record `io.reactivex.internal.schedulers.a` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `java.lang.Runnable` `io.reactivex.internal.schedulers.a.runnable` @AccessFlag PROTECTED_FINAL;
  `java.lang.Thread` `io.reactivex.internal.schedulers.a.runner` @AccessFlag PROTECTED;
}
global `java.util.concurrent.FutureTask` `@@io.reactivex.internal.schedulers.a.DISPOSED` @AccessFlag PROTECTED_STATIC_FINAL;
global `java.util.concurrent.FutureTask` `@@io.reactivex.internal.schedulers.a.FINISHED` @AccessFlag PROTECTED_STATIC_FINAL;
global `long` `@@io.reactivex.internal.schedulers.a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L453874.  v0:= new `java.util.concurrent.FutureTask`;
  #L453878.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_RUNNABLE` @type ^`java.lang.Runnable` @kind object;
  #L45387c.  v2:= 0I;
  #L45387e.  call `<init>`(v0, v1, v2) @signature `Ljava/util/concurrent/FutureTask;.<init>:(Ljava/lang/Runnable;Ljava/lang/Object;)V` @kind direct;
  #L453884.  `@@io.reactivex.internal.schedulers.a.FINISHED` @type ^`java.util.concurrent.FutureTask` := v0 @kind object;
  #L453888.  v0:= new `java.util.concurrent.FutureTask`;
  #L45388c.  call `<init>`(v0, v1, v2) @signature `Ljava/util/concurrent/FutureTask;.<init>:(Ljava/lang/Runnable;Ljava/lang/Object;)V` @kind direct;
  #L453892.  `@@io.reactivex.internal.schedulers.a.DISPOSED` @type ^`java.util.concurrent.FutureTask` := v0 @kind object;
  #L453896.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.a` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/internal/schedulers/a;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4538a8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4538ae.  v0.`io.reactivex.internal.schedulers.a.runnable` @type ^`java.lang.Runnable` := v1 @kind object;
  #L4538b2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.a` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/a;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4538c4.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4538ca.  v0:= temp @kind object;
  #L4538cc.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L4538d0.  v1:= `@@io.reactivex.internal.schedulers.a.FINISHED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L4538d4.  if v0 == v1 then goto L45390c;
  #L4538d8.  v1:= `@@io.reactivex.internal.schedulers.a.DISPOSED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L4538dc.  if v0 == v1 then goto L45390c;
  #L4538e0.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4538e6.  v1:= temp;
  #L4538e8.  if v1 == 0 then goto L45390c;
  #L4538ec.  if v0 == 0 then goto L45390c;
  #L4538f0.  v1:= v3.`io.reactivex.internal.schedulers.a.runner` @type ^`java.lang.Thread` @kind object;
  #L4538f4.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4538fa.  v2:= temp @kind object;
  #L4538fc.  if v1 == v2 then goto L453904;
  #L453900.  v1:= 1I;
  #L453902.  goto L453906;
  #L453904.  v1:= 0I;
  #L453906.  call temp:= `cancel`(v0, v1) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L45390c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.a` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/a;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L45383c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L453842.  v0:= temp @kind object;
  #L453844.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L453848.  v1:= `@@io.reactivex.internal.schedulers.a.FINISHED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L45384c.  if v0 == v1 then goto L45385e;
  #L453850.  v1:= `@@io.reactivex.internal.schedulers.a.DISPOSED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L453854.  if v0 != v1 then goto L45385a;
  #L453858.  goto L45385e;
  #L45385a.  v0:= 0I;
  #L45385c.  goto L453860;
  #L45385e.  v0:= 1I;
  #L453860.  return v0;
}
procedure `void` `setFuture`(`io.reactivex.internal.schedulers.a` v2 @kind this, `java.util.concurrent.Future` v3 @kind object) @signature `Lio/reactivex/internal/schedulers/a;.setFuture:(Ljava/util/concurrent/Future;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L453920.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L453926.  v0:= temp @kind object;
  #L453928.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L45392c.  v1:= `@@io.reactivex.internal.schedulers.a.FINISHED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L453930.  if v0 != v1 then goto L453936;
  #L453934.  goto L453968;
  #L453936.  v1:= `@@io.reactivex.internal.schedulers.a.DISPOSED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L45393a.  if v0 != v1 then goto L45395c;
  #L45393e.  v0:= v2.`io.reactivex.internal.schedulers.a.runner` @type ^`java.lang.Thread` @kind object;
  #L453942.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L453948.  v1:= temp @kind object;
  #L45394a.  if v0 == v1 then goto L453952;
  #L45394e.  v0:= 1I;
  #L453950.  goto L453954;
  #L453952.  v0:= 0I;
  #L453954.  call temp:= `cancel`(v3, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L45395a.  goto L453968;
  #L45395c.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L453962.  v0:= temp;
  #L453964.  if v0 == 0 then goto L453920;
  #L453968.  return @kind void;
}
