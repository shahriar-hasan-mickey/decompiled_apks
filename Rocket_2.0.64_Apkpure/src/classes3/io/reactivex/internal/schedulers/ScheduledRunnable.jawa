record `io.reactivex.internal.schedulers.ScheduledRunnable` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReferenceArray` @kind class, `java.lang.Runnable` @kind interface, `java.util.concurrent.Callable` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.lang.Runnable` `io.reactivex.internal.schedulers.ScheduledRunnable.a` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.internal.schedulers.ScheduledRunnable.b` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.internal.schedulers.ScheduledRunnable.c` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.schedulers.ScheduledRunnable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4550a4.  v0:= new `java.lang.Object`;
  #L4550a8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4550ae.  `@@io.reactivex.internal.schedulers.ScheduledRunnable.b` @type ^`java.lang.Object` := v0 @kind object;
  #L4550b2.  v0:= new `java.lang.Object`;
  #L4550b6.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4550bc.  `@@io.reactivex.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` := v0 @kind object;
  #L4550c0.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.ScheduledRunnable` v1 @kind this, `java.lang.Runnable` v2 @kind object, `io.reactivex.internal.disposables.DisposableContainer` v3 @kind object) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.<init>:(Ljava/lang/Runnable;Lio/reactivex/internal/disposables/DisposableContainer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4550d4.  v0:= 3I;
  #L4550d6.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L4550dc.  v1.`io.reactivex.internal.schedulers.ScheduledRunnable.a` @type ^`java.lang.Runnable` := v2 @kind object;
  #L4550e0.  v2:= 0I;
  #L4550e2.  call `lazySet`(v1, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L4550e8.  return @kind void;
}
procedure `java.lang.Object` `call`(`io.reactivex.internal.schedulers.ScheduledRunnable` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L455088.  call `run`(v1) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.run:()V` @kind virtual;
  #L45508e.  v0:= 0I;
  #L455090.  return v0 @kind object;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.ScheduledRunnable` v5 @kind this) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4550fc.  v0:= 1I;
  #L4550fe.  call temp:= `get`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L455104.  v1:= temp @kind object;
  #L455106.  v2:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` @kind object;
  #L45510a.  v3:= 0I;
  #L45510c.  if v1 == v2 then goto L45514e;
  #L455110.  v2:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.b` @type ^`java.lang.Object` @kind object;
  #L455114.  if v1 != v2 then goto L45511a;
  #L455118.  goto L45514e;
  #L45511a.  call temp:= `compareAndSet`(v5, v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L455120.  v2:= temp;
  #L455122.  if v2 == 0 then goto L4550fc;
  #L455126.  if v1 == 0 then goto L45514e;
  #L45512a.  v1:= (`java.util.concurrent.Future`) v1 @kind object;
  #L45512e.  v2:= 2I;
  #L455130.  call temp:= `get`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L455136.  v2:= temp @kind object;
  #L455138.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L45513e.  v4:= temp @kind object;
  #L455140.  if v2 == v4 then goto L455146;
  #L455144.  goto L455148;
  #L455146.  v0:= 0I;
  #L455148.  call temp:= `cancel`(v1, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L45514e.  call temp:= `get`(v5, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L455154.  v0:= temp @kind object;
  #L455156.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` @kind object;
  #L45515a.  if v0 == v1 then goto L455182;
  #L45515e.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.b` @type ^`java.lang.Object` @kind object;
  #L455162.  if v0 == v1 then goto L455182;
  #L455166.  if v0 != 0 then goto L45516c;
  #L45516a.  goto L455182;
  #L45516c.  call temp:= `compareAndSet`(v5, v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L455172.  v1:= temp;
  #L455174.  if v1 == 0 then goto L45514e;
  #L455178.  v0:= (`io.reactivex.internal.disposables.DisposableContainer`) v0 @kind object;
  #L45517c.  call temp:= `delete`(v0, v5) @signature `Lio/reactivex/internal/disposables/DisposableContainer;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind interface;
  #L455182.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.ScheduledRunnable` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L455058.  v0:= 1I;
  #L45505a.  call temp:= `get`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L455060.  v1:= temp @kind object;
  #L455062.  v2:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.b` @type ^`java.lang.Object` @kind object;
  #L455066.  if v1 == v2 then goto L455076;
  #L45506a.  v2:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` @kind object;
  #L45506e.  if v1 != v2 then goto L455074;
  #L455072.  goto L455076;
  #L455074.  v0:= 0I;
  #L455076.  return v0;
}
procedure `void` `run`(`io.reactivex.internal.schedulers.ScheduledRunnable` v5 @kind this) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L455194.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L45519a.  v0:= temp @kind object;
  #L45519c.  v1:= 2I;
  #L45519e.  call `lazySet`(v5, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L4551a4.  v0:= 0I;
  #L4551a6.  v2:= 1I;
  #L4551a8.  v3:= 0I;
  #L4551aa.  v4:= v5.`io.reactivex.internal.schedulers.ScheduledRunnable.a` @type ^`java.lang.Runnable` @kind object;
  #L4551ae.  call `run`(v4) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L4551b4.  goto L4551be;
  #L4551b6.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4551b8.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4551be.  call `lazySet`(v5, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L4551c4.  call temp:= `get`(v5, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4551ca.  v0:= temp @kind object;
  #L4551cc.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.b` @type ^`java.lang.Object` @kind object;
  #L4551d0.  if v0 == v1 then goto L4551f2;
  #L4551d4.  if v0 == 0 then goto L4551f2;
  #L4551d8.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` @kind object;
  #L4551dc.  call temp:= `compareAndSet`(v5, v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4551e2.  v1:= temp;
  #L4551e4.  if v1 == 0 then goto L4551f2;
  #L4551e8.  v0:= (`io.reactivex.internal.disposables.DisposableContainer`) v0 @kind object;
  #L4551ec.  call temp:= `delete`(v0, v5) @signature `Lio/reactivex/internal/disposables/DisposableContainer;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind interface;
  #L4551f2.  call temp:= `get`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4551f8.  v0:= temp @kind object;
  #L4551fa.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.b` @type ^`java.lang.Object` @kind object;
  #L4551fe.  if v0 == v1 then goto L455212;
  #L455202.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` @kind object;
  #L455206.  call temp:= `compareAndSet`(v5, v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45520c.  v0:= temp;
  #L45520e.  if v0 == 0 then goto L4551f2;
  #L455212.  return @kind void;
  #L455214.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L455216.  call `lazySet`(v5, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L45521c.  call temp:= `get`(v5, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L455222.  v0:= temp @kind object;
  #L455224.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.b` @type ^`java.lang.Object` @kind object;
  #L455228.  if v0 == v1 then goto L45524a;
  #L45522c.  if v0 == 0 then goto L45524a;
  #L455230.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` @kind object;
  #L455234.  call temp:= `compareAndSet`(v5, v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45523a.  v1:= temp;
  #L45523c.  if v1 == 0 then goto L45524a;
  #L455240.  v0:= (`io.reactivex.internal.disposables.DisposableContainer`) v0 @kind object;
  #L455244.  call temp:= `delete`(v0, v5) @signature `Lio/reactivex/internal/disposables/DisposableContainer;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind interface;
  #L45524a.  call temp:= `get`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L455250.  v0:= temp @kind object;
  #L455252.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.b` @type ^`java.lang.Object` @kind object;
  #L455256.  if v0 == v1 then goto L45526c;
  #L45525a.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` @kind object;
  #L45525e.  call temp:= `compareAndSet`(v5, v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L455264.  v0:= temp;
  #L455266.  if v0 != 0 then goto L45526c;
  #L45526a.  goto L45524a;
  #L45526c.  throw v4;
  catch `java.lang.Throwable` @[L4551aa..L4551b4] goto L4551b6;
  catch `java.lang.Throwable` @[L4551b8..L4551be] goto L455214;
}
procedure `void` `setFuture`(`io.reactivex.internal.schedulers.ScheduledRunnable` v3 @kind this, `java.util.concurrent.Future` v4 @kind object) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.setFuture:(Ljava/util/concurrent/Future;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L455298.  v0:= 1I;
  #L45529a.  call temp:= `get`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4552a0.  v1:= temp @kind object;
  #L4552a2.  v2:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` @kind object;
  #L4552a6.  if v1 != v2 then goto L4552ac;
  #L4552aa.  return @kind void;
  #L4552ac.  v2:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.b` @type ^`java.lang.Object` @kind object;
  #L4552b0.  if v1 != v2 then goto L4552d6;
  #L4552b4.  v1:= 2I;
  #L4552b6.  call temp:= `get`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4552bc.  v1:= temp @kind object;
  #L4552be.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4552c4.  v2:= temp @kind object;
  #L4552c6.  if v1 == v2 then goto L4552cc;
  #L4552ca.  goto L4552ce;
  #L4552cc.  v0:= 0I;
  #L4552ce.  call temp:= `cancel`(v4, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L4552d4.  return @kind void;
  #L4552d6.  call temp:= `compareAndSet`(v3, v0, v1, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4552dc.  v0:= temp;
  #L4552de.  if v0 == 0 then goto L455298;
  #L4552e2.  return @kind void;
}
