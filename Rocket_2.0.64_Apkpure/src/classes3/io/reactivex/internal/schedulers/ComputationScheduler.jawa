record `io.reactivex.internal.schedulers.ComputationScheduler` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Scheduler` @kind class {
  `java.util.concurrent.ThreadFactory` `io.reactivex.internal.schedulers.ComputationScheduler.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.schedulers.ComputationScheduler.c` @AccessFlag FINAL;
}
global `io.reactivex.internal.schedulers.ComputationScheduler$b` `@@io.reactivex.internal.schedulers.ComputationScheduler.d` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.schedulers.RxThreadFactory` `@@io.reactivex.internal.schedulers.ComputationScheduler.e` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.schedulers.ComputationScheduler.f` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.schedulers.ComputationScheduler$c` `@@io.reactivex.internal.schedulers.ComputationScheduler.g` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/ComputationScheduler;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L453c14.  call temp:= `getRuntime`() @signature `Ljava/lang/Runtime;.getRuntime:()Ljava/lang/Runtime;` @kind static;
  #L453c1a.  v0:= temp @kind object;
  #L453c1c.  call temp:= `availableProcessors`(v0) @signature `Ljava/lang/Runtime;.availableProcessors:()I` @kind virtual;
  #L453c22.  v0:= temp;
  #L453c24.  v1:= "rx2.computation-threads" @kind object;
  #L453c28.  v2:= 0I;
  #L453c2a.  call temp:= `getInteger`(v1, v2) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L453c30.  v1:= temp @kind object;
  #L453c32.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L453c38.  v1:= temp;
  #L453c3a.  call temp:= `a`(v0, v1) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler;.a:(II)I` @kind static;
  #L453c40.  v0:= temp;
  #L453c42.  `@@io.reactivex.internal.schedulers.ComputationScheduler.f` @type ^`int` := v0;
  #L453c46.  v0:= new `io.reactivex.internal.schedulers.ComputationScheduler$c`;
  #L453c4a.  v1:= new `io.reactivex.internal.schedulers.RxThreadFactory`;
  #L453c4e.  v3:= "RxComputationShutdown" @kind object;
  #L453c52.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L453c58.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L453c5e.  `@@io.reactivex.internal.schedulers.ComputationScheduler.g` @type ^`io.reactivex.internal.schedulers.ComputationScheduler$c` := v0 @kind object;
  #L453c62.  call `dispose`(v0) @signature `Lio/reactivex/internal/schedulers/NewThreadWorker;.dispose:()V` @kind virtual;
  #L453c68.  v0:= "rx2.computation-priority" @kind object;
  #L453c6c.  v1:= 5I;
  #L453c6e.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L453c74.  v0:= temp @kind object;
  #L453c76.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L453c7c.  v0:= temp;
  #L453c7e.  v1:= 10I;
  #L453c82.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L453c88.  v0:= temp;
  #L453c8a.  v1:= 1I;
  #L453c8c.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L453c92.  v0:= temp;
  #L453c94.  v3:= new `io.reactivex.internal.schedulers.RxThreadFactory`;
  #L453c98.  v4:= "RxComputationThreadPool" @kind object;
  #L453c9c.  call `<init>`(v3, v4, v0, v1) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;IZ)V` @kind direct;
  #L453ca2.  `@@io.reactivex.internal.schedulers.ComputationScheduler.e` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` := v3 @kind object;
  #L453ca6.  v0:= new `io.reactivex.internal.schedulers.ComputationScheduler$b`;
  #L453caa.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$b;.<init>:(ILjava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L453cb0.  `@@io.reactivex.internal.schedulers.ComputationScheduler.d` @type ^`io.reactivex.internal.schedulers.ComputationScheduler$b` := v0 @kind object;
  #L453cb4.  call `b`(v0) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$b;.b:()V` @kind virtual;
  #L453cba.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.ComputationScheduler` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L453ccc.  v0:= `@@io.reactivex.internal.schedulers.ComputationScheduler.e` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` @kind object;
  #L453cd0.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L453cd6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.ComputationScheduler` v1 @kind this, `java.util.concurrent.ThreadFactory` v2 @kind object) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L453ce8.  call `<init>`(v1) @signature `Lio/reactivex/Scheduler;.<init>:()V` @kind direct;
  #L453cee.  v1.`io.reactivex.internal.schedulers.ComputationScheduler.b` @type ^`java.util.concurrent.ThreadFactory` := v2 @kind object;
  #L453cf2.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L453cf6.  v0:= `@@io.reactivex.internal.schedulers.ComputationScheduler.d` @type ^`io.reactivex.internal.schedulers.ComputationScheduler$b` @kind object;
  #L453cfa.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L453d00.  v1.`io.reactivex.internal.schedulers.ComputationScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L453d04.  call `start`(v1) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler;.start:()V` @kind virtual;
  #L453d0a.  return @kind void;
}
procedure `int` `a`(`int` v0 , `int` v1 ) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler;.a:(II)I` @AccessFlag STATIC {
    temp;

  #L453b50.  if v1 <= 0 then goto L453b5c;
  #L453b54.  if v1 <= v0 then goto L453b5a;
  #L453b58.  goto L453b5c;
  #L453b5a.  v0:= v1;
  #L453b5c.  return v0;
}
procedure `io.reactivex.Scheduler$Worker` `createWorker`(`io.reactivex.internal.schedulers.ComputationScheduler` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L453b70.  v0:= new `io.reactivex.internal.schedulers.ComputationScheduler$a`;
  #L453b74.  v1:= v2.`io.reactivex.internal.schedulers.ComputationScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453b78.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L453b7e.  v1:= temp @kind object;
  #L453b80.  v1:= (`io.reactivex.internal.schedulers.ComputationScheduler$b`) v1 @kind object;
  #L453b84.  call temp:= `a`(v1) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$b;.a:()Lio/reactivex/internal/schedulers/ComputationScheduler$c;` @kind virtual;
  #L453b8a.  v1:= temp @kind object;
  #L453b8c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$a;.<init>:(Lio/reactivex/internal/schedulers/ComputationScheduler$c;)V` @kind direct;
  #L453b92.  return v0 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `scheduleDirect`(`io.reactivex.internal.schedulers.ComputationScheduler` v1 @kind this, `java.lang.Runnable` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler;.scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L453ba4.  v0:= v1.`io.reactivex.internal.schedulers.ComputationScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453ba8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L453bae.  v0:= temp @kind object;
  #L453bb0.  v0:= (`io.reactivex.internal.schedulers.ComputationScheduler$b`) v0 @kind object;
  #L453bb4.  call temp:= `a`(v0) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$b;.a:()Lio/reactivex/internal/schedulers/ComputationScheduler$c;` @kind virtual;
  #L453bba.  v0:= temp @kind object;
  #L453bbc.  call temp:= `scheduleDirect`(v0, v2, v3, v5) @signature `Lio/reactivex/internal/schedulers/NewThreadWorker;.scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L453bc2.  v2:= temp @kind object;
  #L453bc4.  return v2 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `schedulePeriodicallyDirect`(`io.reactivex.internal.schedulers.ComputationScheduler` v8 @kind this, `java.lang.Runnable` v9 @kind object, `long` v10 , `long` v12 , `java.util.concurrent.TimeUnit` v14 @kind object) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L453bd8.  v0:= v8.`io.reactivex.internal.schedulers.ComputationScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453bdc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L453be2.  v0:= temp @kind object;
  #L453be4.  v0:= (`io.reactivex.internal.schedulers.ComputationScheduler$b`) v0 @kind object;
  #L453be8.  call temp:= `a`(v0) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$b;.a:()Lio/reactivex/internal/schedulers/ComputationScheduler$c;` @kind virtual;
  #L453bee.  v1:= temp @kind object;
  #L453bf0.  v2:= v9 @kind object;
  #L453bf2.  v3:= v10 @kind wide;
  #L453bf4.  v5:= v12 @kind wide;
  #L453bf6.  v7:= v14 @kind object;
  #L453bf8.  call temp:= `schedulePeriodicallyDirect`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/internal/schedulers/NewThreadWorker;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L453bfe.  v9:= temp @kind object;
  #L453c00.  return v9 @kind object;
}
procedure `void` `shutdown`(`io.reactivex.internal.schedulers.ComputationScheduler` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler;.shutdown:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L453d1c.  v0:= v3.`io.reactivex.internal.schedulers.ComputationScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453d20.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L453d26.  v0:= temp @kind object;
  #L453d28.  v0:= (`io.reactivex.internal.schedulers.ComputationScheduler$b`) v0 @kind object;
  #L453d2c.  v1:= `@@io.reactivex.internal.schedulers.ComputationScheduler.d` @type ^`io.reactivex.internal.schedulers.ComputationScheduler$b` @kind object;
  #L453d30.  if v0 != v1 then goto L453d36;
  #L453d34.  return @kind void;
  #L453d36.  v2:= v3.`io.reactivex.internal.schedulers.ComputationScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453d3a.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L453d40.  v1:= temp;
  #L453d42.  if v1 == 0 then goto L453d1c;
  #L453d46.  call `b`(v0) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$b;.b:()V` @kind virtual;
  #L453d4c.  return @kind void;
}
procedure `void` `start`(`io.reactivex.internal.schedulers.ComputationScheduler` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler;.start:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L453d60.  v0:= new `io.reactivex.internal.schedulers.ComputationScheduler$b`;
  #L453d64.  v1:= `@@io.reactivex.internal.schedulers.ComputationScheduler.f` @type ^`int`;
  #L453d68.  v2:= v3.`io.reactivex.internal.schedulers.ComputationScheduler.b` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L453d6c.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$b;.<init>:(ILjava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L453d72.  v1:= v3.`io.reactivex.internal.schedulers.ComputationScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453d76.  v2:= `@@io.reactivex.internal.schedulers.ComputationScheduler.d` @type ^`io.reactivex.internal.schedulers.ComputationScheduler$b` @kind object;
  #L453d7a.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L453d80.  v1:= temp;
  #L453d82.  if v1 != 0 then goto L453d8c;
  #L453d86.  call `b`(v0) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$b;.b:()V` @kind virtual;
  #L453d8c.  return @kind void;
}
