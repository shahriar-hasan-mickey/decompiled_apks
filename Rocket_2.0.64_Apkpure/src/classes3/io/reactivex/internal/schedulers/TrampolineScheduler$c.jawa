record `io.reactivex.internal.schedulers.TrampolineScheduler$c` @kind class @AccessFlag FINAL extends `io.reactivex.Scheduler$Worker` @kind class {
  `java.util.concurrent.PriorityBlockingQueue` `io.reactivex.internal.schedulers.TrampolineScheduler$c.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.schedulers.TrampolineScheduler$c.b` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.schedulers.TrampolineScheduler$c.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.schedulers.TrampolineScheduler$c.d` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.TrampolineScheduler$c` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/TrampolineScheduler$c;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L456010.  call `<init>`(v1) @signature `Lio/reactivex/Scheduler$Worker;.<init>:()V` @kind direct;
  #L456016.  v0:= new `java.util.concurrent.PriorityBlockingQueue`;
  #L45601a.  call `<init>`(v0) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.<init>:()V` @kind direct;
  #L456020.  v1.`io.reactivex.internal.schedulers.TrampolineScheduler$c.a` @type ^`java.util.concurrent.PriorityBlockingQueue` := v0 @kind object;
  #L456024.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L456028.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L45602e.  v1.`io.reactivex.internal.schedulers.TrampolineScheduler$c.b` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L456032.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L456036.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L45603c.  v1.`io.reactivex.internal.schedulers.TrampolineScheduler$c.c` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L456040.  return @kind void;
}
procedure `io.reactivex.disposables.Disposable` `a`(`io.reactivex.internal.schedulers.TrampolineScheduler$c` v1 @kind this, `java.lang.Runnable` v2 @kind object, `long` v3 ) @signature `Lio/reactivex/internal/schedulers/TrampolineScheduler$c;.a:(Ljava/lang/Runnable;J)Lio/reactivex/disposables/Disposable;` @AccessFlag  {
    temp;
    v0;

  #L455f00.  v0:= v1.`io.reactivex.internal.schedulers.TrampolineScheduler$c.d` @type ^`boolean` @kind boolean;
  #L455f04.  if v0 == 0 then goto L455f0e;
  #L455f08.  v2:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L455f0c.  return v2 @kind object;
  #L455f0e.  v0:= new `io.reactivex.internal.schedulers.TrampolineScheduler$b`;
  #L455f12.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L455f18.  v3:= temp @kind object;
  #L455f1a.  v4:= v1.`io.reactivex.internal.schedulers.TrampolineScheduler$c.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L455f1e.  call temp:= `incrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L455f24.  v4:= temp;
  #L455f26.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/internal/schedulers/TrampolineScheduler$b;.<init>:(Ljava/lang/Runnable;Ljava/lang/Long;I)V` @kind direct;
  #L455f2c.  v2:= v1.`io.reactivex.internal.schedulers.TrampolineScheduler$c.a` @type ^`java.util.concurrent.PriorityBlockingQueue` @kind object;
  #L455f30.  call temp:= `add`(v2, v0) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L455f36.  v2:= v1.`io.reactivex.internal.schedulers.TrampolineScheduler$c.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L455f3a.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L455f40.  v2:= temp;
  #L455f42.  if v2 != 0 then goto L455f88;
  #L455f46.  v2:= 1I;
  #L455f48.  v3:= v1.`io.reactivex.internal.schedulers.TrampolineScheduler$c.a` @type ^`java.util.concurrent.PriorityBlockingQueue` @kind object;
  #L455f4c.  call temp:= `poll`(v3) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L455f52.  v3:= temp @kind object;
  #L455f54.  v3:= (`io.reactivex.internal.schedulers.TrampolineScheduler$b`) v3 @kind object;
  #L455f58.  if v3 != 0 then goto L455f74;
  #L455f5c.  v3:= v1.`io.reactivex.internal.schedulers.TrampolineScheduler$c.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L455f60.  v2:= -v2 @kind int;
  #L455f62.  call temp:= `addAndGet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L455f68.  v2:= temp;
  #L455f6a.  if v2 != 0 then goto L455f48;
  #L455f6e.  v2:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L455f72.  return v2 @kind object;
  #L455f74.  v4:= v3.`io.reactivex.internal.schedulers.TrampolineScheduler$b.d` @type ^`boolean` @kind boolean;
  #L455f78.  if v4 != 0 then goto L455f48;
  #L455f7c.  v3:= v3.`io.reactivex.internal.schedulers.TrampolineScheduler$b.a` @type ^`java.lang.Runnable` @kind object;
  #L455f80.  call `run`(v3) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L455f86.  goto L455f48;
  #L455f88.  v2:= new `io.reactivex.internal.schedulers.TrampolineScheduler$c$a`;
  #L455f8c.  call `<init>`(v2, v1, v0) @signature `Lio/reactivex/internal/schedulers/TrampolineScheduler$c$a;.<init>:(Lio/reactivex/internal/schedulers/TrampolineScheduler$c;Lio/reactivex/internal/schedulers/TrampolineScheduler$b;)V` @kind direct;
  #L455f92.  call temp:= `fromRunnable`(v2) @signature `Lio/reactivex/disposables/Disposables;.fromRunnable:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind static;
  #L455f98.  v2:= temp @kind object;
  #L455f9a.  return v2 @kind object;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.TrampolineScheduler$c` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/TrampolineScheduler$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L456054.  v0:= 1I;
  #L456056.  v1.`io.reactivex.internal.schedulers.TrampolineScheduler$c.d` @type ^`boolean` := v0 @kind boolean;
  #L45605a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.TrampolineScheduler$c` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/TrampolineScheduler$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L455ee8.  v0:= v1.`io.reactivex.internal.schedulers.TrampolineScheduler$c.d` @type ^`boolean` @kind boolean;
  #L455eec.  return v0;
}
procedure `io.reactivex.disposables.Disposable` `schedule`(`io.reactivex.internal.schedulers.TrampolineScheduler$c` v2 @kind this, `java.lang.Runnable` v3 @kind object) @signature `Lio/reactivex/internal/schedulers/TrampolineScheduler$c;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L455fac.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L455fb0.  call temp:= `now`(v2, v0) @signature `Lio/reactivex/Scheduler$Worker;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L455fb6.  v0:= temp @kind wide;
  #L455fb8.  call temp:= `a`(v2, v3, v0) @signature `Lio/reactivex/internal/schedulers/TrampolineScheduler$c;.a:(Ljava/lang/Runnable;J)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L455fbe.  v3:= temp @kind object;
  #L455fc0.  return v3 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `schedule`(`io.reactivex.internal.schedulers.TrampolineScheduler$c` v2 @kind this, `java.lang.Runnable` v3 @kind object, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object) @signature `Lio/reactivex/internal/schedulers/TrampolineScheduler$c;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L455fd4.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L455fd8.  call temp:= `now`(v2, v0) @signature `Lio/reactivex/Scheduler$Worker;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L455fde.  v0:= temp @kind wide;
  #L455fe0.  call temp:= `toMillis`(v6, v4) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L455fe6.  v4:= temp @kind wide;
  #L455fe8.  v0:= v0 + v4 @kind long;
  #L455fea.  v4:= new `io.reactivex.internal.schedulers.TrampolineScheduler$a`;
  #L455fee.  call `<init>`(v4, v3, v2, v0) @signature `Lio/reactivex/internal/schedulers/TrampolineScheduler$a;.<init>:(Ljava/lang/Runnable;Lio/reactivex/internal/schedulers/TrampolineScheduler$c;J)V` @kind direct;
  #L455ff4.  call temp:= `a`(v2, v4, v0) @signature `Lio/reactivex/internal/schedulers/TrampolineScheduler$c;.a:(Ljava/lang/Runnable;J)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L455ffa.  v3:= temp @kind object;
  #L455ffc.  return v3 @kind object;
}
