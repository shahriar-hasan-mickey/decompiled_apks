record `io.reactivex.internal.operators.parallel.ParallelRunOn$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.parallel.ParallelRunOn$a` @kind class {
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.parallel.ParallelRunOn$b.k` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelRunOn$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelRunOn$b` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `int` v2 , `io.reactivex.internal.queue.SpscArrayQueue` v3 @kind object, `io.reactivex.Scheduler$Worker` v4 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$b;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;ILio/reactivex/internal/queue/SpscArrayQueue;Lio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44dd94.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$a;.<init>:(ILio/reactivex/internal/queue/SpscArrayQueue;Lio/reactivex/Scheduler$Worker;)V` @kind direct;
  #L44dd9a.  v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$b.k` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L44dd9e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelRunOn$b` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44ddb0.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44ddb4.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44ddba.  v0:= temp;
  #L44ddbc.  if v0 == 0 then goto L44ddda;
  #L44ddc0.  v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.e` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L44ddc4.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$b.k` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L44ddc8.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44ddce.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.a` @type ^`int`;
  #L44ddd2.  v0:= (`long`) v0 @kind i2l;
  #L44ddd4.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44ddda.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.parallel.ParallelRunOn$b` v18 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L44ddec.  v0:= v18 @kind object;
  #L44ddf0.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.j` @type ^`int`;
  #L44ddf4.  v2:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.c` @type ^`io.reactivex.internal.queue.SpscArrayQueue` @kind object;
  #L44ddf8.  v3:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$b.k` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L44ddfc.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.b` @type ^`int`;
  #L44de00.  v5:= 1I;
  #L44de02.  v6:= 1I;
  #L44de04.  v7:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44de08.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L44de0e.  v7:= temp @kind wide;
  #L44de10.  v9:= 0L;
  #L44de14.  v11:= v9 @kind wide;
  #L44de16.  v13:= lcmp(v11, v7);
  #L44de1a.  if v13 == 0 then goto L44deba;
  #L44de1e.  v14:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.i` @type ^`boolean` @kind boolean;
  #L44de22.  if v14 == 0 then goto L44de2e;
  #L44de26.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L44de2c.  return @kind void;
  #L44de2e.  v14:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.f` @type ^`boolean` @kind boolean;
  #L44de32.  if v14 == 0 then goto L44de56;
  #L44de36.  v15:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.g` @type ^`java.lang.Throwable` @kind object;
  #L44de3a.  if v15 == 0 then goto L44de56;
  #L44de3e.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L44de44.  call `onError`(v3, v15) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44de4a.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L44de4e.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44de54.  return @kind void;
  #L44de56.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L44de5c.  v15:= temp @kind object;
  #L44de5e.  v16:= 0I;
  #L44de62.  if v15 != 0 then goto L44de6c;
  #L44de66.  v17:= 1I;
  #L44de6a.  goto L44de70;
  #L44de6c.  v17:= 0I;
  #L44de70.  if v14 == 0 then goto L44de8a;
  #L44de74.  if v17 == 0 then goto L44de8a;
  #L44de78.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44de7e.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L44de82.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44de88.  return @kind void;
  #L44de8a.  if v17 == 0 then goto L44de90;
  #L44de8e.  goto L44deba;
  #L44de90.  call temp:= `tryOnNext`(v3, v15) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L44de96.  v13:= temp;
  #L44de98.  if v13 == 0 then goto L44dea2;
  #L44de9c.  v13:= 1L;
  #L44dea0.  v11:= v11 + v13 @kind long;
  #L44dea2.  v1:= v1 + 1;
  #L44dea6.  if v1 != v4 then goto L44de16;
  #L44deaa.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44deae.  v14:= (`long`) v1 @kind i2l;
  #L44deb0.  call `request`(v13, v14) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44deb6.  v1:= 0I;
  #L44deb8.  goto L44de16;
  #L44deba.  if v13 != 0 then goto L44df14;
  #L44debe.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.i` @type ^`boolean` @kind boolean;
  #L44dec2.  if v13 == 0 then goto L44dece;
  #L44dec6.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L44decc.  return @kind void;
  #L44dece.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.f` @type ^`boolean` @kind boolean;
  #L44ded2.  if v13 == 0 then goto L44df14;
  #L44ded6.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.g` @type ^`java.lang.Throwable` @kind object;
  #L44deda.  if v13 == 0 then goto L44def6;
  #L44dede.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L44dee4.  call `onError`(v3, v13) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44deea.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L44deee.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44def4.  return @kind void;
  #L44def6.  call temp:= `isEmpty`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.isEmpty:()Z` @kind virtual;
  #L44defc.  v13:= temp;
  #L44defe.  if v13 == 0 then goto L44df14;
  #L44df02.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44df08.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L44df0c.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44df12.  return @kind void;
  #L44df14.  v13:= lcmp(v11, v9);
  #L44df18.  if v13 == 0 then goto L44df3a;
  #L44df1c.  v9:= 9223372036854775807L;
  #L44df26.  v13:= lcmp(v7, v9);
  #L44df2a.  if v13 == 0 then goto L44df3a;
  #L44df2e.  v7:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44df32.  v8:= -v11 @kind long;
  #L44df34.  call temp:= `addAndGet`(v7, v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L44df3a.  call temp:= `get`(v18) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L44df40.  v7:= temp;
  #L44df42.  if v7 != v6 then goto L44df5a;
  #L44df46.  v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.j` @type ^`int` := v1;
  #L44df4a.  v6:= -v6 @kind int;
  #L44df4c.  call temp:= `addAndGet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L44df52.  v6:= temp;
  #L44df54.  if v6 != 0 then goto L44de04;
  #L44df58.  return @kind void;
  #L44df5a.  v6:= v7;
  #L44df5c.  goto L44de04;
}
