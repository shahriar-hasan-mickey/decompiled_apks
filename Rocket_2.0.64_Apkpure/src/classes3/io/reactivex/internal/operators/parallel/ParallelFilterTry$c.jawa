record `io.reactivex.internal.operators.parallel.ParallelFilterTry$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.parallel.ParallelFilterTry$b` @kind class {
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.parallel.ParallelFilterTry$c.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelFilterTry$c` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$c;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Predicate;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44b2d0.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$b;.<init>:(Lio/reactivex/functions/Predicate;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L44b2d6.  v0.`io.reactivex.internal.operators.parallel.ParallelFilterTry$c.e` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L44b2da.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelFilterTry$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44b2ec.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$b.d` @type ^`boolean` @kind boolean;
  #L44b2f0.  if v0 != 0 then goto L44b304;
  #L44b2f4.  v0:= 1I;
  #L44b2f6.  v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$b.d` @type ^`boolean` := v0 @kind boolean;
  #L44b2fa.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$c.e` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L44b2fe.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44b304.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelFilterTry$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44b318.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$b.d` @type ^`boolean` @kind boolean;
  #L44b31c.  if v0 == 0 then goto L44b328;
  #L44b320.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44b326.  return @kind void;
  #L44b328.  v0:= 1I;
  #L44b32a.  v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$b.d` @type ^`boolean` := v0 @kind boolean;
  #L44b32e.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$c.e` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L44b332.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44b338.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelFilterTry$c` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44b34c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$b.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44b350.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44b356.  v0:= temp;
  #L44b358.  if v0 == 0 then goto L44b36a;
  #L44b35c.  v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$b.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L44b360.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$c.e` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L44b364.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44b36a.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.parallel.ParallelFilterTry$c` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$c;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L44b1d8.  v0:= v9.`io.reactivex.internal.operators.parallel.ParallelFilterTry$b.d` @type ^`boolean` @kind boolean;
  #L44b1dc.  v1:= 0I;
  #L44b1de.  if v0 != 0 then goto L44b2a4;
  #L44b1e2.  v2:= 0L;
  #L44b1e6.  v0:= 1I;
  #L44b1e8.  v4:= v9.`io.reactivex.internal.operators.parallel.ParallelFilterTry$b.a` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L44b1ec.  call temp:= `test`(v4, v10) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L44b1f2.  v2:= temp;
  #L44b1f4.  if v2 == 0 then goto L44b20a;
  #L44b1f8.  v2:= v9.`io.reactivex.internal.operators.parallel.ParallelFilterTry$c.e` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L44b1fc.  call temp:= `tryOnNext`(v2, v10) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L44b202.  v10:= temp;
  #L44b204.  if v10 == 0 then goto L44b20a;
  #L44b208.  v1:= 1I;
  #L44b20a.  return v1;
  #L44b20c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44b20e.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44b214.  v5:= 2I;
  #L44b216.  v6:= v9.`io.reactivex.internal.operators.parallel.ParallelFilterTry$b.b` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L44b21a.  v7:= 1L;
  #L44b21e.  v2:= v2 + v7 @kind long;
  #L44b220.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L44b226.  v7:= temp @kind object;
  #L44b228.  call temp:= `apply`(v6, v7, v4) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L44b22e.  v6:= temp @kind object;
  #L44b230.  v7:= "The errorHandler returned a null item" @kind object;
  #L44b234.  call temp:= `requireNonNull`(v6, v7) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44b23a.  v6:= temp @kind object;
  #L44b23c.  v6:= (`io.reactivex.parallel.ParallelFailureHandling`) v6 @kind object;
  #L44b240.  v7:= `@@io.reactivex.internal.operators.parallel.ParallelFilterTry$a.a` @type ^`int`[] @kind object;
  #L44b244.  call temp:= `ordinal`(v6) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L44b24a.  v6:= temp;
  #L44b24c.  v6:= v7[v6];
  #L44b250.  if v6 == v0 then goto L44b1e6;
  #L44b254.  if v6 == v5 then goto L44b278;
  #L44b258.  v10:= 3I;
  #L44b25a.  if v6 == v10 then goto L44b26c;
  #L44b25e.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$b;.cancel:()V` @kind virtual;
  #L44b264.  call `onError`(v9, v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44b26a.  return v1;
  #L44b26c.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$b;.cancel:()V` @kind virtual;
  #L44b272.  call `onComplete`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$c;.onComplete:()V` @kind virtual;
  #L44b278.  return v1;
  #L44b27a.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44b27c.  call `throwIfFatal`(v10) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44b282.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$b;.cancel:()V` @kind virtual;
  #L44b288.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L44b28c.  v3:= new `java.lang.Throwable`[v5];
  #L44b290.  v3[v1]:= v4 @kind object;
  #L44b294.  v3[v0]:= v10 @kind object;
  #L44b298.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L44b29e.  call `onError`(v9, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44b2a4.  return v1;
  catch `java.lang.Throwable` @[L44b1e8..L44b1f4] goto L44b20c;
  catch `java.lang.Throwable` @[L44b216..L44b240] goto L44b27a;
}
