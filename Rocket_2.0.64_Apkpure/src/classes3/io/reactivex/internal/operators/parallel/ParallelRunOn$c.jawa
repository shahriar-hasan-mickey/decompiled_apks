record `io.reactivex.internal.operators.parallel.ParallelRunOn$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.parallel.ParallelRunOn$a` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.parallel.ParallelRunOn$c.k` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelRunOn$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelRunOn$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `io.reactivex.internal.queue.SpscArrayQueue` v3 @kind object, `io.reactivex.Scheduler$Worker` v4 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$c;.<init>:(Lorg/reactivestreams/Subscriber;ILio/reactivex/internal/queue/SpscArrayQueue;Lio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44df70.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$a;.<init>:(ILio/reactivex/internal/queue/SpscArrayQueue;Lio/reactivex/Scheduler$Worker;)V` @kind direct;
  #L44df76.  v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$c.k` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L44df7a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelRunOn$c` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44df8c.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44df90.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44df96.  v0:= temp;
  #L44df98.  if v0 == 0 then goto L44dfb6;
  #L44df9c.  v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.e` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L44dfa0.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$c.k` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44dfa4.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44dfaa.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.a` @type ^`int`;
  #L44dfae.  v0:= (`long`) v0 @kind i2l;
  #L44dfb0.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44dfb6.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.parallel.ParallelRunOn$c` v18 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L44dfc8.  v0:= v18 @kind object;
  #L44dfcc.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.j` @type ^`int`;
  #L44dfd0.  v2:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.c` @type ^`io.reactivex.internal.queue.SpscArrayQueue` @kind object;
  #L44dfd4.  v3:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$c.k` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44dfd8.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.b` @type ^`int`;
  #L44dfdc.  v5:= 1I;
  #L44dfde.  v6:= 1I;
  #L44dfe0.  v7:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44dfe4.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L44dfea.  v7:= temp @kind wide;
  #L44dfec.  v9:= 0L;
  #L44dff0.  v11:= v9 @kind wide;
  #L44dff2.  v13:= lcmp(v11, v7);
  #L44dff6.  if v13 == 0 then goto L44e090;
  #L44dffa.  v14:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.i` @type ^`boolean` @kind boolean;
  #L44dffe.  if v14 == 0 then goto L44e00a;
  #L44e002.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L44e008.  return @kind void;
  #L44e00a.  v14:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.f` @type ^`boolean` @kind boolean;
  #L44e00e.  if v14 == 0 then goto L44e032;
  #L44e012.  v15:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.g` @type ^`java.lang.Throwable` @kind object;
  #L44e016.  if v15 == 0 then goto L44e032;
  #L44e01a.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L44e020.  call `onError`(v3, v15) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44e026.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L44e02a.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44e030.  return @kind void;
  #L44e032.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L44e038.  v15:= temp @kind object;
  #L44e03a.  v16:= 0I;
  #L44e03e.  if v15 != 0 then goto L44e048;
  #L44e042.  v17:= 1I;
  #L44e046.  goto L44e04c;
  #L44e048.  v17:= 0I;
  #L44e04c.  if v14 == 0 then goto L44e066;
  #L44e050.  if v17 == 0 then goto L44e066;
  #L44e054.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44e05a.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L44e05e.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44e064.  return @kind void;
  #L44e066.  if v17 == 0 then goto L44e06c;
  #L44e06a.  goto L44e090;
  #L44e06c.  call `onNext`(v3, v15) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44e072.  v13:= 1L;
  #L44e076.  v11:= v11 + v13 @kind long;
  #L44e078.  v1:= v1 + 1;
  #L44e07c.  if v1 != v4 then goto L44dff2;
  #L44e080.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44e084.  v14:= (`long`) v1 @kind i2l;
  #L44e086.  call `request`(v13, v14) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44e08c.  v1:= 0I;
  #L44e08e.  goto L44dff2;
  #L44e090.  if v13 != 0 then goto L44e0ea;
  #L44e094.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.i` @type ^`boolean` @kind boolean;
  #L44e098.  if v13 == 0 then goto L44e0a4;
  #L44e09c.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L44e0a2.  return @kind void;
  #L44e0a4.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.f` @type ^`boolean` @kind boolean;
  #L44e0a8.  if v13 == 0 then goto L44e0ea;
  #L44e0ac.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.g` @type ^`java.lang.Throwable` @kind object;
  #L44e0b0.  if v13 == 0 then goto L44e0cc;
  #L44e0b4.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L44e0ba.  call `onError`(v3, v13) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44e0c0.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L44e0c4.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44e0ca.  return @kind void;
  #L44e0cc.  call temp:= `isEmpty`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.isEmpty:()Z` @kind virtual;
  #L44e0d2.  v13:= temp;
  #L44e0d4.  if v13 == 0 then goto L44e0ea;
  #L44e0d8.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44e0de.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L44e0e2.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44e0e8.  return @kind void;
  #L44e0ea.  v13:= lcmp(v11, v9);
  #L44e0ee.  if v13 == 0 then goto L44e110;
  #L44e0f2.  v9:= 9223372036854775807L;
  #L44e0fc.  v13:= lcmp(v7, v9);
  #L44e100.  if v13 == 0 then goto L44e110;
  #L44e104.  v7:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44e108.  v8:= -v11 @kind long;
  #L44e10a.  call temp:= `addAndGet`(v7, v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L44e110.  call temp:= `get`(v18) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L44e116.  v7:= temp;
  #L44e118.  if v7 != v6 then goto L44e130;
  #L44e11c.  v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.j` @type ^`int` := v1;
  #L44e120.  v6:= -v6 @kind int;
  #L44e122.  call temp:= `addAndGet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L44e128.  v6:= temp;
  #L44e12a.  if v6 != 0 then goto L44dfe0;
  #L44e12e.  return @kind void;
  #L44e130.  v6:= v7;
  #L44e132.  goto L44dfe0;
}
