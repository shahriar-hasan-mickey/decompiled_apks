record `io.reactivex.internal.operators.parallel.ParallelFilterTry$b` @kind class @AccessFlag ABSTRACT extends `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.parallel.ParallelFilterTry$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.parallel.ParallelFilterTry$b.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.parallel.ParallelFilterTry$b.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelFilterTry$b.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelFilterTry$b` v0 @kind this, `io.reactivex.functions.Predicate` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$b;.<init>:(Lio/reactivex/functions/Predicate;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44b14c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44b152.  v0.`io.reactivex.internal.operators.parallel.ParallelFilterTry$b.a` @type ^`io.reactivex.functions.Predicate` := v1 @kind object;
  #L44b156.  v0.`io.reactivex.internal.operators.parallel.ParallelFilterTry$b.b` @type ^`io.reactivex.functions.BiFunction` := v2 @kind object;
  #L44b15a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelFilterTry$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$b;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44b16c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$b.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44b170.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44b176.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelFilterTry$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L44b188.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L44b18e.  v3:= temp;
  #L44b190.  if v3 != 0 then goto L44b1aa;
  #L44b194.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelFilterTry$b.d` @type ^`boolean` @kind boolean;
  #L44b198.  if v3 != 0 then goto L44b1aa;
  #L44b19c.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelFilterTry$b.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44b1a0.  v0:= 1L;
  #L44b1a4.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44b1aa.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelFilterTry$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$b;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44b1bc.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$b.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44b1c0.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44b1c6.  return @kind void;
}
