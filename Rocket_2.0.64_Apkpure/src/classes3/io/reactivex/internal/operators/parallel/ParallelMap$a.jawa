record `io.reactivex.internal.operators.parallel.ParallelMap$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.parallel.ParallelMap$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.parallel.ParallelMap$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.parallel.ParallelMap$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelMap$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelMap$a` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$a;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44c8d8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44c8de.  v0.`io.reactivex.internal.operators.parallel.ParallelMap$a.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L44c8e2.  v0.`io.reactivex.internal.operators.parallel.ParallelMap$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L44c8e6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelMap$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44c8f8.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44c8fc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44c902.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelMap$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44c914.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$a.d` @type ^`boolean` @kind boolean;
  #L44c918.  if v0 == 0 then goto L44c91e;
  #L44c91c.  return @kind void;
  #L44c91e.  v0:= 1I;
  #L44c920.  v1.`io.reactivex.internal.operators.parallel.ParallelMap$a.d` @type ^`boolean` := v0 @kind boolean;
  #L44c924.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$a.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L44c928.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44c92e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelMap$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44c940.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$a.d` @type ^`boolean` @kind boolean;
  #L44c944.  if v0 == 0 then goto L44c950;
  #L44c948.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44c94e.  return @kind void;
  #L44c950.  v0:= 1I;
  #L44c952.  v1.`io.reactivex.internal.operators.parallel.ParallelMap$a.d` @type ^`boolean` := v0 @kind boolean;
  #L44c956.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$a.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L44c95a.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44c960.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelMap$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44c974.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$a.d` @type ^`boolean` @kind boolean;
  #L44c978.  if v0 == 0 then goto L44c97e;
  #L44c97c.  return @kind void;
  #L44c97e.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L44c982.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L44c988.  v2:= temp @kind object;
  #L44c98a.  v0:= "The mapper returned a null value" @kind object;
  #L44c98e.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44c994.  v2:= temp @kind object;
  #L44c996.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$a.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L44c99a.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44c9a0.  return @kind void;
  #L44c9a2.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44c9a4.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44c9aa.  call `cancel`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$a;.cancel:()V` @kind virtual;
  #L44c9b0.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44c9b6.  return @kind void;
  catch `java.lang.Throwable` @[L44c97e..L44c996] goto L44c9a2;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelMap$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44c9d4.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44c9d8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44c9de.  v0:= temp;
  #L44c9e0.  if v0 == 0 then goto L44c9f2;
  #L44c9e4.  v1.`io.reactivex.internal.operators.parallel.ParallelMap$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L44c9e8.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$a.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L44c9ec.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44c9f2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelMap$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44ca04.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44ca08.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44ca0e.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.parallel.ParallelMap$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$a;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44c874.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelMap$a.d` @type ^`boolean` @kind boolean;
  #L44c878.  v1:= 0I;
  #L44c87a.  if v0 == 0 then goto L44c880;
  #L44c87e.  return v1;
  #L44c880.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelMap$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L44c884.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L44c88a.  v3:= temp @kind object;
  #L44c88c.  v0:= "The mapper returned a null value" @kind object;
  #L44c890.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44c896.  v3:= temp @kind object;
  #L44c898.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelMap$a.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L44c89c.  call temp:= `tryOnNext`(v0, v3) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L44c8a2.  v3:= temp;
  #L44c8a4.  return v3;
  #L44c8a6.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44c8a8.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44c8ae.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$a;.cancel:()V` @kind virtual;
  #L44c8b4.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44c8ba.  return v1;
  catch `java.lang.Throwable` @[L44c880..L44c898] goto L44c8a6;
}
