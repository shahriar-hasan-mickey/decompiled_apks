record `io.reactivex.internal.operators.parallel.ParallelMapTry` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.parallel.ParallelFlowable` @kind class {
  `io.reactivex.parallel.ParallelFlowable` `io.reactivex.internal.operators.parallel.ParallelMapTry.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.parallel.ParallelMapTry.b` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.parallel.ParallelMapTry.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelMapTry` v0 @kind this, `io.reactivex.parallel.ParallelFlowable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L44d048.  call `<init>`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L44d04e.  v0.`io.reactivex.internal.operators.parallel.ParallelMapTry.a` @type ^`io.reactivex.parallel.ParallelFlowable` := v1 @kind object;
  #L44d052.  v0.`io.reactivex.internal.operators.parallel.ParallelMapTry.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L44d056.  v0.`io.reactivex.internal.operators.parallel.ParallelMapTry.c` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L44d05a.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.internal.operators.parallel.ParallelMapTry` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44d028.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry.a` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L44d02c.  call temp:= `parallelism`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L44d032.  v0:= temp;
  #L44d034.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.parallel.ParallelMapTry` v7 @kind this, `org.reactivestreams.Subscriber`[] v8 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L44d06c.  call temp:= `validate`(v7, v8) @signature `Lio/reactivex/parallel/ParallelFlowable;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L44d072.  v0:= temp;
  #L44d074.  if v0 != 0 then goto L44d07a;
  #L44d078.  return @kind void;
  #L44d07a.  v0:= length @variable v8;
  #L44d07c.  v1:= new `org.reactivestreams.Subscriber`[v0];
  #L44d080.  v2:= 0I;
  #L44d082.  if v2 >= v0 then goto L44d0ca;
  #L44d086.  v3:= v8[v2] @kind object;
  #L44d08a.  v4:= instanceof @variable v3 @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L44d08e.  if v4 == 0 then goto L44d0ae;
  #L44d092.  v4:= new `io.reactivex.internal.operators.parallel.ParallelMapTry$b`;
  #L44d096.  v3:= (`io.reactivex.internal.fuseable.ConditionalSubscriber`) v3 @kind object;
  #L44d09a.  v5:= v7.`io.reactivex.internal.operators.parallel.ParallelMapTry.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L44d09e.  v6:= v7.`io.reactivex.internal.operators.parallel.ParallelMapTry.c` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L44d0a2.  call `<init>`(v4, v3, v5, v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L44d0a8.  v1[v2]:= v4 @kind object;
  #L44d0ac.  goto L44d0c4;
  #L44d0ae.  v4:= new `io.reactivex.internal.operators.parallel.ParallelMapTry$c`;
  #L44d0b2.  v5:= v7.`io.reactivex.internal.operators.parallel.ParallelMapTry.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L44d0b6.  v6:= v7.`io.reactivex.internal.operators.parallel.ParallelMapTry.c` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L44d0ba.  call `<init>`(v4, v3, v5, v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L44d0c0.  v1[v2]:= v4 @kind object;
  #L44d0c4.  v2:= v2 + 1;
  #L44d0c8.  goto L44d082;
  #L44d0ca.  v8:= v7.`io.reactivex.internal.operators.parallel.ParallelMapTry.a` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L44d0ce.  call `subscribe`(v8, v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L44d0d4.  return @kind void;
}
