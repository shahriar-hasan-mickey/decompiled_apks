record `io.reactivex.internal.operators.parallel.ParallelReduceFull$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class {
  `java.lang.Object` `io.reactivex.internal.operators.parallel.ParallelReduceFull$c.a` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.parallel.ParallelReduceFull$c.b` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.parallel.ParallelReduceFull$c.c` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelReduceFull$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelReduceFull$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$c;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L44da84.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L44da8a.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L44da8e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L44da94.  v1.`io.reactivex.internal.operators.parallel.ParallelReduceFull$c.c` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L44da98.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.parallel.ParallelReduceFull$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$c;.a:()Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L44da24.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$c.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L44da28.  call temp:= `incrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L44da2e.  v0:= temp;
  #L44da30.  v1:= 2I;
  #L44da32.  if v0 != v1 then goto L44da3a;
  #L44da36.  v0:= 1I;
  #L44da38.  goto L44da3c;
  #L44da3a.  v0:= 0I;
  #L44da3c.  return v0;
}
procedure `int` `b`(`io.reactivex.internal.operators.parallel.ParallelReduceFull$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$c;.b:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L44da50.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L44da56.  v0:= temp;
  #L44da58.  v1:= 2I;
  #L44da5a.  if v0 < v1 then goto L44da62;
  #L44da5e.  v0:= -1I;
  #L44da60.  return v0;
  #L44da62.  v1:= v0 + 1;
  #L44da66.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L44da6c.  v1:= temp;
  #L44da6e.  if v1 == 0 then goto L44da50;
  #L44da72.  return v0;
}
