record `io.reactivex.internal.operators.parallel.ParallelJoin$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.parallel.ParallelJoin$c` @kind class {
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelJoin$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelJoin$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$b;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44c470.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @kind direct;
  #L44c476.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.parallel.ParallelJoin$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$b;.c:()V` @AccessFlag  {
    temp;
    v0;

  #L44c488.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44c48e.  v0:= temp;
  #L44c490.  if v0 == 0 then goto L44c496;
  #L44c494.  return @kind void;
  #L44c496.  call `g`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$b;.g:()V` @kind virtual;
  #L44c49c.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.parallel.ParallelJoin$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$b;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44c660.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L44c664.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L44c66a.  call `c`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$b;.c:()V` @kind virtual;
  #L44c670.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.parallel.ParallelJoin$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$b;.e:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44c684.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44c688.  v1:= 0I;
  #L44c68a.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44c690.  v0:= temp;
  #L44c692.  if v0 == 0 then goto L44c6a4;
  #L44c696.  call `a`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.a:()V` @kind virtual;
  #L44c69c.  call `c`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$b;.c:()V` @kind virtual;
  #L44c6a2.  goto L44c6ba;
  #L44c6a4.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44c6a8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c6ae.  v0:= temp @kind object;
  #L44c6b0.  if v3 == v0 then goto L44c6ba;
  #L44c6b4.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44c6ba.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.parallel.ParallelJoin$b` v6 @kind this, `io.reactivex.internal.operators.parallel.ParallelJoin$a` v7 @kind object, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$b;.f:(Lio/reactivex/internal/operators/parallel/ParallelJoin$a;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L44c6cc.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L44c6d2.  v0:= temp;
  #L44c6d4.  v1:= "Queue full?!" @kind object;
  #L44c6d8.  if v0 != 0 then goto L44c79a;
  #L44c6dc.  v0:= 0I;
  #L44c6de.  v2:= 1I;
  #L44c6e0.  call temp:= `compareAndSet`(v6, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L44c6e6.  v0:= temp;
  #L44c6e8.  if v0 == 0 then goto L44c79a;
  #L44c6ec.  v0:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44c6f0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L44c6f6.  v2:= temp @kind wide;
  #L44c6f8.  v4:= 0L;
  #L44c6fc.  v0:= lcmp(v2, v4);
  #L44c700.  if v0 == 0 then goto L44c742;
  #L44c704.  v0:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44c708.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44c70e.  v8:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44c712.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L44c718.  v0:= temp @kind wide;
  #L44c71a.  v2:= 9223372036854775807L;
  #L44c724.  v8:= lcmp(v0, v2);
  #L44c728.  if v8 == 0 then goto L44c736;
  #L44c72c.  v8:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44c730.  call temp:= `decrementAndGet`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L44c736.  v0:= 1L;
  #L44c73a.  call `c`(v7, v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.c:(J)V` @kind virtual;
  #L44c740.  goto L44c78c;
  #L44c742.  call temp:= `b`(v7) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.b:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L44c748.  v7:= temp @kind object;
  #L44c74a.  call temp:= `offer`(v7, v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L44c750.  v7:= temp;
  #L44c752.  if v7 != 0 then goto L44c78c;
  #L44c756.  call `a`(v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.a:()V` @kind virtual;
  #L44c75c.  v7:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L44c760.  call `<init>`(v7, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44c766.  v8:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44c76a.  v0:= 0I;
  #L44c76c.  call temp:= `compareAndSet`(v8, v0, v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44c772.  v8:= temp;
  #L44c774.  if v8 == 0 then goto L44c784;
  #L44c778.  v8:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44c77c.  call `onError`(v8, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44c782.  goto L44c78a;
  #L44c784.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44c78a.  return @kind void;
  #L44c78c.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L44c792.  v7:= temp;
  #L44c794.  if v7 != 0 then goto L44c7d4;
  #L44c798.  return @kind void;
  #L44c79a.  call temp:= `b`(v7) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.b:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L44c7a0.  v7:= temp @kind object;
  #L44c7a2.  call temp:= `offer`(v7, v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L44c7a8.  v7:= temp;
  #L44c7aa.  if v7 != 0 then goto L44c7c6;
  #L44c7ae.  call `a`(v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.a:()V` @kind virtual;
  #L44c7b4.  v7:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L44c7b8.  call `<init>`(v7, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44c7be.  call `e`(v6, v7) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$b;.e:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44c7c4.  return @kind void;
  #L44c7c6.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44c7cc.  v7:= temp;
  #L44c7ce.  if v7 == 0 then goto L44c7d4;
  #L44c7d2.  return @kind void;
  #L44c7d4.  call `g`(v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$b;.g:()V` @kind virtual;
  #L44c7da.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.parallel.ParallelJoin$b` v18 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$b;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L44c4b0.  v0:= v18 @kind object;
  #L44c4b4.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.b` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$a`[] @kind object;
  #L44c4b8.  v2:= length @variable v1;
  #L44c4ba.  v3:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44c4be.  v5:= 1I;
  #L44c4c0.  v6:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44c4c4.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L44c4ca.  v6:= temp @kind wide;
  #L44c4cc.  v8:= 0L;
  #L44c4d0.  v10:= v8 @kind wide;
  #L44c4d2.  v13:= lcmp(v10, v6);
  #L44c4d6.  if v13 == 0 then goto L44c57e;
  #L44c4da.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.e` @type ^`boolean` @kind boolean;
  #L44c4de.  if v13 == 0 then goto L44c4ea;
  #L44c4e2.  call `b`(v18) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.b:()V` @kind virtual;
  #L44c4e8.  return @kind void;
  #L44c4ea.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44c4ee.  call temp:= `get`(v13) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c4f4.  v13:= temp @kind object;
  #L44c4f6.  v13:= (`java.lang.Throwable`) v13 @kind object;
  #L44c4fa.  if v13 == 0 then goto L44c50c;
  #L44c4fe.  call `b`(v18) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.b:()V` @kind virtual;
  #L44c504.  call `onError`(v3, v13) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44c50a.  return @kind void;
  #L44c50c.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L44c510.  call temp:= `get`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L44c516.  v13:= temp;
  #L44c518.  if v13 != 0 then goto L44c520;
  #L44c51c.  v13:= 1I;
  #L44c51e.  goto L44c522;
  #L44c520.  v13:= 0I;
  #L44c522.  v14:= 0I;
  #L44c524.  v15:= 1I;
  #L44c526.  v4:= length @variable v1;
  #L44c528.  if v14 >= v4 then goto L44c56a;
  #L44c52c.  v4:= v1[v14] @kind object;
  #L44c530.  v12:= v4.`io.reactivex.internal.operators.parallel.ParallelJoin$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L44c534.  if v12 == 0 then goto L44c564;
  #L44c538.  call temp:= `poll`(v12) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L44c53e.  v12:= temp @kind object;
  #L44c540.  if v12 == 0 then goto L44c564;
  #L44c544.  call `onNext`(v3, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44c54a.  call `d`(v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.d:()V` @kind virtual;
  #L44c550.  v16:= 1L;
  #L44c554.  v10:= v10 + v16 @kind long;
  #L44c558.  v4:= lcmp(v10, v6);
  #L44c55c.  if v4 != 0 then goto L44c562;
  #L44c560.  goto L44c57e;
  #L44c562.  v15:= 0I;
  #L44c564.  v14:= v14 + 1;
  #L44c568.  goto L44c526;
  #L44c56a.  if v13 == 0 then goto L44c57a;
  #L44c56e.  if v15 == 0 then goto L44c57a;
  #L44c572.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44c578.  return @kind void;
  #L44c57a.  if v15 == 0 then goto L44c4d2;
  #L44c57e.  v4:= lcmp(v10, v6);
  #L44c582.  if v4 != 0 then goto L44c608;
  #L44c586.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.e` @type ^`boolean` @kind boolean;
  #L44c58a.  if v4 == 0 then goto L44c596;
  #L44c58e.  call `b`(v18) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.b:()V` @kind virtual;
  #L44c594.  return @kind void;
  #L44c596.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44c59a.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c5a0.  v4:= temp @kind object;
  #L44c5a2.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L44c5a6.  if v4 == 0 then goto L44c5b8;
  #L44c5aa.  call `b`(v18) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.b:()V` @kind virtual;
  #L44c5b0.  call `onError`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44c5b6.  return @kind void;
  #L44c5b8.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L44c5bc.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L44c5c2.  v4:= temp;
  #L44c5c4.  if v4 != 0 then goto L44c5cc;
  #L44c5c8.  v4:= 1I;
  #L44c5ca.  goto L44c5ce;
  #L44c5cc.  v4:= 0I;
  #L44c5ce.  v12:= 0I;
  #L44c5d0.  if v12 >= v2 then goto L44c5f6;
  #L44c5d4.  v13:= v1[v12] @kind object;
  #L44c5d8.  v13:= v13.`io.reactivex.internal.operators.parallel.ParallelJoin$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L44c5dc.  if v13 == 0 then goto L44c5f0;
  #L44c5e0.  call temp:= `isEmpty`(v13) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L44c5e6.  v13:= temp;
  #L44c5e8.  if v13 != 0 then goto L44c5f0;
  #L44c5ec.  v12:= 0I;
  #L44c5ee.  goto L44c5f8;
  #L44c5f0.  v12:= v12 + 1;
  #L44c5f4.  goto L44c5d0;
  #L44c5f6.  v12:= 1I;
  #L44c5f8.  if v4 == 0 then goto L44c608;
  #L44c5fc.  if v12 == 0 then goto L44c608;
  #L44c600.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44c606.  return @kind void;
  #L44c608.  v4:= lcmp(v10, v8);
  #L44c60c.  if v4 == 0 then goto L44c62e;
  #L44c610.  v8:= 9223372036854775807L;
  #L44c61a.  v4:= lcmp(v6, v8);
  #L44c61e.  if v4 == 0 then goto L44c62e;
  #L44c622.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44c626.  v6:= -v10 @kind long;
  #L44c628.  call temp:= `addAndGet`(v4, v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L44c62e.  call temp:= `get`(v18) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L44c634.  v4:= temp;
  #L44c636.  if v4 != v5 then goto L44c64a;
  #L44c63a.  v4:= -v5 @kind int;
  #L44c63c.  call temp:= `addAndGet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L44c642.  v4:= temp;
  #L44c644.  if v4 != 0 then goto L44c64a;
  #L44c648.  return @kind void;
  #L44c64a.  v5:= v4;
  #L44c64c.  goto L44c4c0;
}
