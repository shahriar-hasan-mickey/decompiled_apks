record `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber`[] `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLongArray` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.b` @AccessFlag FINAL;
  `long`[] `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.e` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.f` @AccessFlag ;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.g` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.h` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.i` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.j` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.k` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.l` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.m` @AccessFlag ;
  `int` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.n` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` v3 @kind this, `org.reactivestreams.Subscriber`[] v4 @kind object, `int` v5 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.<init>:([Lorg/reactivestreams/Subscriber;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L44b898.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L44b89e.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L44b8a2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L44b8a8.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.l` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L44b8ac.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.a` @type ^`org.reactivestreams.Subscriber`[] := v4 @kind object;
  #L44b8b0.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.d` @type ^`int` := v5;
  #L44b8b4.  v0:= v5 ^> 2;
  #L44b8b8.  v5:= v5 - v0 @kind int;
  #L44b8ba.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.e` @type ^`int` := v5;
  #L44b8be.  v4:= length @variable v4;
  #L44b8c0.  v5:= new `java.util.concurrent.atomic.AtomicLongArray`;
  #L44b8c4.  v0:= v4 + v4 @kind int;
  #L44b8c8.  v1:= v0 + 1;
  #L44b8cc.  call `<init>`(v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.<init>:(I)V` @kind direct;
  #L44b8d2.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.b` @type ^`java.util.concurrent.atomic.AtomicLongArray` := v5 @kind object;
  #L44b8d6.  v1:= (`long`) v4 @kind i2l;
  #L44b8d8.  call `lazySet`(v5, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.lazySet:(IJ)V` @kind virtual;
  #L44b8de.  v4:= new `long`[v4];
  #L44b8e2.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.c` @type ^`long`[] := v4 @kind object;
  #L44b8e6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` v4 @kind this, `int` v5 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.a:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44b8f8.  v0:= v4.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.b` @type ^`java.util.concurrent.atomic.AtomicLongArray` @kind object;
  #L44b8fc.  call temp:= `decrementAndGet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.decrementAndGet:(I)J` @kind virtual;
  #L44b902.  v0:= temp @kind wide;
  #L44b904.  v2:= 0L;
  #L44b908.  v5:= lcmp(v0, v2);
  #L44b90c.  if v5 != 0 then goto L44b936;
  #L44b910.  v5:= 1I;
  #L44b912.  v4.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.k` @type ^`boolean` := v5 @kind boolean;
  #L44b916.  v5:= v4.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44b91a.  call `cancel`(v5) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44b920.  call temp:= `getAndIncrement`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44b926.  v5:= temp;
  #L44b928.  if v5 != 0 then goto L44b936;
  #L44b92c.  v5:= v4.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L44b930.  call `clear`(v5) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L44b936.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L44b948.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44b94e.  v0:= temp;
  #L44b950.  if v0 == 0 then goto L44b956;
  #L44b954.  return @kind void;
  #L44b956.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.n` @type ^`int`;
  #L44b95a.  v1:= 1I;
  #L44b95c.  if v0 != v1 then goto L44b968;
  #L44b960.  call `d`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.d:()V` @kind virtual;
  #L44b966.  goto L44b96e;
  #L44b968.  call `c`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.c:()V` @kind virtual;
  #L44b96e.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` v19 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L44b980.  v1:= v19 @kind object;
  #L44b984.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L44b988.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.a` @type ^`org.reactivestreams.Subscriber`[] @kind object;
  #L44b98c.  v3:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.b` @type ^`java.util.concurrent.atomic.AtomicLongArray` @kind object;
  #L44b990.  v4:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.c` @type ^`long`[] @kind object;
  #L44b994.  v5:= length @variable v4;
  #L44b996.  v6:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.j` @type ^`int`;
  #L44b99a.  v7:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.m` @type ^`int`;
  #L44b99e.  v8:= 1I;
  #L44b9a0.  v9:= 1I;
  #L44b9a2.  v10:= 0I;
  #L44b9a4.  v11:= 0I;
  #L44b9a6.  v12:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.k` @type ^`boolean` @kind boolean;
  #L44b9aa.  if v12 == 0 then goto L44b9b6;
  #L44b9ae.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L44b9b4.  return @kind void;
  #L44b9b6.  v12:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.i` @type ^`boolean` @kind boolean;
  #L44b9ba.  if v12 == 0 then goto L44b9e4;
  #L44b9be.  v13:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.h` @type ^`java.lang.Throwable` @kind object;
  #L44b9c2.  if v13 == 0 then goto L44b9e4;
  #L44b9c6.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L44b9cc.  v0:= length @variable v2;
  #L44b9ce.  if v10 >= v0 then goto L44b9e2;
  #L44b9d2.  v3:= v2[v10] @kind object;
  #L44b9d6.  call `onError`(v3, v13) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44b9dc.  v10:= v10 + 1;
  #L44b9e0.  goto L44b9ce;
  #L44b9e2.  return @kind void;
  #L44b9e4.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L44b9ea.  v13:= temp;
  #L44b9ec.  if v12 == 0 then goto L44ba0c;
  #L44b9f0.  if v13 == 0 then goto L44ba0c;
  #L44b9f4.  v0:= length @variable v2;
  #L44b9f6.  if v10 >= v0 then goto L44ba0a;
  #L44b9fa.  v3:= v2[v10] @kind object;
  #L44b9fe.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44ba04.  v10:= v10 + 1;
  #L44ba08.  goto L44b9f6;
  #L44ba0a.  return @kind void;
  #L44ba0c.  if v13 == 0 then goto L44ba12;
  #L44ba10.  goto L44baba;
  #L44ba12.  call temp:= `get`(v3, v6) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.get:(I)J` @kind virtual;
  #L44ba18.  v12:= temp @kind wide;
  #L44ba1a.  v14:= v4[v6] @kind wide;
  #L44ba1e.  v16:= lcmp(v12, v14);
  #L44ba22.  if v16 == 0 then goto L44baaa;
  #L44ba26.  v12:= v5 + v6 @kind int;
  #L44ba2a.  call temp:= `get`(v3, v12) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.get:(I)J` @kind virtual;
  #L44ba30.  v12:= temp @kind wide;
  #L44ba32.  v16:= 0L;
  #L44ba36.  v18:= lcmp(v12, v16);
  #L44ba3a.  if v18 != 0 then goto L44baaa;
  #L44ba3e.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L44ba44.  v11:= temp @kind object;
  #L44ba46.  if v11 != 0 then goto L44ba4c;
  #L44ba4a.  goto L44baba;
  #L44ba4c.  v12:= v2[v6] @kind object;
  #L44ba50.  call `onNext`(v12, v11) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44ba56.  v11:= 1L;
  #L44ba5a.  v14:= v14 + v11 @kind long;
  #L44ba5c.  v4[v6]:= v14 @kind wide;
  #L44ba60.  v7:= v7 + 1;
  #L44ba64.  v11:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.e` @type ^`int`;
  #L44ba68.  if v7 != v11 then goto L44ba7a;
  #L44ba6c.  v11:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44ba70.  v12:= (`long`) v7 @kind i2l;
  #L44ba72.  call `request`(v11, v12) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44ba78.  v7:= 0I;
  #L44ba7a.  v11:= 0I;
  #L44ba7c.  goto L44baac;
  #L44ba7e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44ba80.  v3:= v0 @kind object;
  #L44ba82.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44ba88.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44ba8c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44ba92.  v0:= length @variable v2;
  #L44ba94.  if v10 >= v0 then goto L44baa8;
  #L44ba98.  v4:= v2[v10] @kind object;
  #L44ba9c.  call `onError`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44baa2.  v10:= v10 + 1;
  #L44baa6.  goto L44ba94;
  #L44baa8.  return @kind void;
  #L44baaa.  v11:= v11 + v8 @kind int;
  #L44baac.  v6:= v6 + 1;
  #L44bab0.  if v6 != v5 then goto L44bab6;
  #L44bab4.  v6:= 0I;
  #L44bab6.  if v11 != v5 then goto L44b9a6;
  #L44baba.  call temp:= `get`(v19) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L44bac0.  v10:= temp;
  #L44bac2.  if v10 != v9 then goto L44bade;
  #L44bac6.  v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.j` @type ^`int` := v6;
  #L44baca.  v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.m` @type ^`int` := v7;
  #L44bace.  v9:= -v9 @kind int;
  #L44bad0.  call temp:= `addAndGet`(v1, v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L44bad6.  v9:= temp;
  #L44bad8.  if v9 != 0 then goto L44b9a2;
  #L44badc.  return @kind void;
  #L44bade.  v9:= v10;
  #L44bae0.  goto L44b9a2;
  catch `java.lang.Throwable` @[L44ba3e..L44ba46] goto L44ba7e;
}
procedure `void` `d`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` v18 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L44bb00.  v1:= v18 @kind object;
  #L44bb04.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L44bb08.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.a` @type ^`org.reactivestreams.Subscriber`[] @kind object;
  #L44bb0c.  v3:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.b` @type ^`java.util.concurrent.atomic.AtomicLongArray` @kind object;
  #L44bb10.  v4:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.c` @type ^`long`[] @kind object;
  #L44bb14.  v5:= length @variable v4;
  #L44bb16.  v6:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.j` @type ^`int`;
  #L44bb1a.  v7:= 1I;
  #L44bb1c.  v8:= 1I;
  #L44bb1e.  v9:= 0I;
  #L44bb20.  v10:= 0I;
  #L44bb22.  v11:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.k` @type ^`boolean` @kind boolean;
  #L44bb26.  if v11 == 0 then goto L44bb32;
  #L44bb2a.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L44bb30.  return @kind void;
  #L44bb32.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L44bb38.  v11:= temp;
  #L44bb3a.  if v11 == 0 then goto L44bb56;
  #L44bb3e.  v0:= length @variable v2;
  #L44bb40.  if v9 >= v0 then goto L44bb54;
  #L44bb44.  v3:= v2[v9] @kind object;
  #L44bb48.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44bb4e.  v9:= v9 + 1;
  #L44bb52.  goto L44bb40;
  #L44bb54.  return @kind void;
  #L44bb56.  call temp:= `get`(v3, v6) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.get:(I)J` @kind virtual;
  #L44bb5c.  v11:= temp @kind wide;
  #L44bb5e.  v13:= v4[v6] @kind wide;
  #L44bb62.  v15:= lcmp(v11, v13);
  #L44bb66.  if v15 == 0 then goto L44bbea;
  #L44bb6a.  v11:= v5 + v6 @kind int;
  #L44bb6e.  call temp:= `get`(v3, v11) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.get:(I)J` @kind virtual;
  #L44bb74.  v11:= temp @kind wide;
  #L44bb76.  v15:= 0L;
  #L44bb7a.  v17:= lcmp(v11, v15);
  #L44bb7e.  if v17 != 0 then goto L44bbea;
  #L44bb82.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L44bb88.  v10:= temp @kind object;
  #L44bb8a.  if v10 != 0 then goto L44bba6;
  #L44bb8e.  v0:= length @variable v2;
  #L44bb90.  if v9 >= v0 then goto L44bba4;
  #L44bb94.  v3:= v2[v9] @kind object;
  #L44bb98.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44bb9e.  v9:= v9 + 1;
  #L44bba2.  goto L44bb90;
  #L44bba4.  return @kind void;
  #L44bba6.  v11:= v2[v6] @kind object;
  #L44bbaa.  call `onNext`(v11, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44bbb0.  v10:= 1L;
  #L44bbb4.  v13:= v13 + v10 @kind long;
  #L44bbb6.  v4[v6]:= v13 @kind wide;
  #L44bbba.  v10:= 0I;
  #L44bbbc.  goto L44bbec;
  #L44bbbe.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44bbc0.  v3:= v0 @kind object;
  #L44bbc2.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44bbc8.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44bbcc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44bbd2.  v0:= length @variable v2;
  #L44bbd4.  if v9 >= v0 then goto L44bbe8;
  #L44bbd8.  v4:= v2[v9] @kind object;
  #L44bbdc.  call `onError`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44bbe2.  v9:= v9 + 1;
  #L44bbe6.  goto L44bbd4;
  #L44bbe8.  return @kind void;
  #L44bbea.  v10:= v10 + v7 @kind int;
  #L44bbec.  v6:= v6 + 1;
  #L44bbf0.  if v6 != v5 then goto L44bbf6;
  #L44bbf4.  v6:= 0I;
  #L44bbf6.  if v10 != v5 then goto L44bb22;
  #L44bbfa.  call temp:= `get`(v18) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L44bc00.  v9:= temp;
  #L44bc02.  if v9 != v8 then goto L44bc1a;
  #L44bc06.  v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.j` @type ^`int` := v6;
  #L44bc0a.  v8:= -v8 @kind int;
  #L44bc0c.  call temp:= `addAndGet`(v1, v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L44bc12.  v8:= temp;
  #L44bc14.  if v8 != 0 then goto L44bb1e;
  #L44bc18.  return @kind void;
  #L44bc1a.  v8:= v9;
  #L44bc1c.  goto L44bb1e;
  catch `java.lang.Throwable` @[L44bb82..L44bb8a] goto L44bbbe;
}
procedure `void` `e`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` v6 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L44bd74.  v0:= v6.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.a` @type ^`org.reactivestreams.Subscriber`[] @kind object;
  #L44bd78.  v1:= length @variable v0;
  #L44bd7a.  v2:= 0I;
  #L44bd7c.  if v2 >= v1 then goto L44bdb0;
  #L44bd80.  v3:= v6.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.k` @type ^`boolean` @kind boolean;
  #L44bd84.  if v3 == 0 then goto L44bd8a;
  #L44bd88.  return @kind void;
  #L44bd8a.  v3:= v6.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L44bd8e.  v4:= v2 + 1;
  #L44bd92.  call `lazySet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L44bd98.  v3:= v0[v2] @kind object;
  #L44bd9c.  v5:= new `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a$a`;
  #L44bda0.  call `<init>`(v5, v6, v2, v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a$a;.<init>:(Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;II)V` @kind direct;
  #L44bda6.  call `onSubscribe`(v3, v5) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44bdac.  v2:= v4;
  #L44bdae.  goto L44bd7c;
  #L44bdb0.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44bc3c.  v0:= 1I;
  #L44bc3e.  v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.i` @type ^`boolean` := v0 @kind boolean;
  #L44bc42.  call `b`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.b:()V` @kind virtual;
  #L44bc48.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L44bc5c.  v0.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.h` @type ^`java.lang.Throwable` := v1 @kind object;
  #L44bc60.  v1:= 1I;
  #L44bc62.  v0.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.i` @type ^`boolean` := v1 @kind boolean;
  #L44bc66.  call `b`(v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.b:()V` @kind virtual;
  #L44bc6c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44bc80.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.n` @type ^`int`;
  #L44bc84.  if v0 != 0 then goto L44bcb8;
  #L44bc88.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L44bc8c.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L44bc92.  v2:= temp;
  #L44bc94.  if v2 != 0 then goto L44bcb8;
  #L44bc98.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44bc9c.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44bca2.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L44bca6.  v0:= "Queue is full?" @kind object;
  #L44bcaa.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44bcb0.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44bcb6.  return @kind void;
  #L44bcb8.  call `b`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.b:()V` @kind virtual;
  #L44bcbe.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44bcd0.  v0:= v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44bcd4.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44bcda.  v0:= temp;
  #L44bcdc.  if v0 == 0 then goto L44bd62;
  #L44bce0.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.f` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L44bce4.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L44bce8.  if v0 == 0 then goto L44bd3e;
  #L44bcec.  v0:= v4 @kind object;
  #L44bcee.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L44bcf2.  v1:= 3I;
  #L44bcf4.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L44bcfa.  v1:= temp;
  #L44bcfc.  v2:= 1I;
  #L44bcfe.  if v1 != v2 then goto L44bd1c;
  #L44bd02.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.n` @type ^`int` := v1;
  #L44bd06.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L44bd0a.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.i` @type ^`boolean` := v2 @kind boolean;
  #L44bd0e.  call `e`(v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.e:()V` @kind virtual;
  #L44bd14.  call `b`(v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.b:()V` @kind virtual;
  #L44bd1a.  return @kind void;
  #L44bd1c.  v2:= 2I;
  #L44bd1e.  if v1 != v2 then goto L44bd3e;
  #L44bd22.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.n` @type ^`int` := v1;
  #L44bd26.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L44bd2a.  call `e`(v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.e:()V` @kind virtual;
  #L44bd30.  v0:= v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.d` @type ^`int`;
  #L44bd34.  v0:= (`long`) v0 @kind i2l;
  #L44bd36.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44bd3c.  return @kind void;
  #L44bd3e.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L44bd42.  v1:= v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.d` @type ^`int`;
  #L44bd46.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L44bd4c.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L44bd50.  call `e`(v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.e:()V` @kind virtual;
  #L44bd56.  v0:= v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.d` @type ^`int`;
  #L44bd5a.  v0:= (`long`) v0 @kind i2l;
  #L44bd5c.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44bd62.  return @kind void;
}
