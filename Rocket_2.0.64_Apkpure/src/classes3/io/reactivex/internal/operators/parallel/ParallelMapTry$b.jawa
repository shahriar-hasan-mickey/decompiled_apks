record `io.reactivex.internal.operators.parallel.ParallelMapTry$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.parallel.ParallelMapTry$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.parallel.ParallelMapTry$b.b` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.parallel.ParallelMapTry$b.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.parallel.ParallelMapTry$b.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelMapTry$b.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelMapTry$b` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44ccf0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44ccf6.  v0.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L44ccfa.  v0.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L44ccfe.  v0.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.c` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L44cd02.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelMapTry$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44cd14.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44cd18.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44cd1e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelMapTry$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44cd30.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.e` @type ^`boolean` @kind boolean;
  #L44cd34.  if v0 == 0 then goto L44cd3a;
  #L44cd38.  return @kind void;
  #L44cd3a.  v0:= 1I;
  #L44cd3c.  v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.e` @type ^`boolean` := v0 @kind boolean;
  #L44cd40.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L44cd44.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44cd4a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelMapTry$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44cd5c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.e` @type ^`boolean` @kind boolean;
  #L44cd60.  if v0 == 0 then goto L44cd6c;
  #L44cd64.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44cd6a.  return @kind void;
  #L44cd6c.  v0:= 1I;
  #L44cd6e.  v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.e` @type ^`boolean` := v0 @kind boolean;
  #L44cd72.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L44cd76.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44cd7c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelMapTry$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44cd90.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L44cd96.  v3:= temp;
  #L44cd98.  if v3 != 0 then goto L44cdb2;
  #L44cd9c.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.e` @type ^`boolean` @kind boolean;
  #L44cda0.  if v3 != 0 then goto L44cdb2;
  #L44cda4.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44cda8.  v0:= 1L;
  #L44cdac.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44cdb2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelMapTry$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44cdc4.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44cdc8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44cdce.  v0:= temp;
  #L44cdd0.  if v0 == 0 then goto L44cde2;
  #L44cdd4.  v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.d` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L44cdd8.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L44cddc.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44cde2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelMapTry$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44cdf4.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44cdf8.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44cdfe.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.parallel.ParallelMapTry$b` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L44cbf4.  v0:= v9.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.e` @type ^`boolean` @kind boolean;
  #L44cbf8.  v1:= 0I;
  #L44cbfa.  if v0 == 0 then goto L44cc00;
  #L44cbfe.  return v1;
  #L44cc00.  v2:= 0L;
  #L44cc04.  v0:= v9.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L44cc08.  call temp:= `apply`(v0, v10) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L44cc0e.  v0:= temp @kind object;
  #L44cc10.  v4:= "The mapper returned a null value" @kind object;
  #L44cc14.  call temp:= `requireNonNull`(v0, v4) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44cc1a.  v10:= temp @kind object;
  #L44cc1c.  v0:= v9.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L44cc20.  call temp:= `tryOnNext`(v0, v10) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L44cc26.  v10:= temp;
  #L44cc28.  return v10;
  #L44cc2a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44cc2c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44cc32.  v4:= 1I;
  #L44cc34.  v5:= 2I;
  #L44cc36.  v6:= v9.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.c` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L44cc3a.  v7:= 1L;
  #L44cc3e.  v2:= v2 + v7 @kind long;
  #L44cc40.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L44cc46.  v7:= temp @kind object;
  #L44cc48.  call temp:= `apply`(v6, v7, v0) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L44cc4e.  v6:= temp @kind object;
  #L44cc50.  v7:= "The errorHandler returned a null item" @kind object;
  #L44cc54.  call temp:= `requireNonNull`(v6, v7) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44cc5a.  v6:= temp @kind object;
  #L44cc5c.  v6:= (`io.reactivex.parallel.ParallelFailureHandling`) v6 @kind object;
  #L44cc60.  v7:= `@@io.reactivex.internal.operators.parallel.ParallelMapTry$a.a` @type ^`int`[] @kind object;
  #L44cc64.  call temp:= `ordinal`(v6) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L44cc6a.  v6:= temp;
  #L44cc6c.  v6:= v7[v6];
  #L44cc70.  if v6 == v4 then goto L44cc04;
  #L44cc74.  if v6 == v5 then goto L44cc98;
  #L44cc78.  v10:= 3I;
  #L44cc7a.  if v6 == v10 then goto L44cc8c;
  #L44cc7e.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.cancel:()V` @kind virtual;
  #L44cc84.  call `onError`(v9, v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44cc8a.  return v1;
  #L44cc8c.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.cancel:()V` @kind virtual;
  #L44cc92.  call `onComplete`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.onComplete:()V` @kind virtual;
  #L44cc98.  return v1;
  #L44cc9a.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44cc9c.  call `throwIfFatal`(v10) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44cca2.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.cancel:()V` @kind virtual;
  #L44cca8.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L44ccac.  v3:= new `java.lang.Throwable`[v5];
  #L44ccb0.  v3[v1]:= v0 @kind object;
  #L44ccb4.  v3[v4]:= v10 @kind object;
  #L44ccb8.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L44ccbe.  call `onError`(v9, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44ccc4.  return v1;
  catch `java.lang.Throwable` @[L44cc04..L44cc1c] goto L44cc2a;
  catch `java.lang.Throwable` @[L44cc36..L44cc60] goto L44cc9a;
}
