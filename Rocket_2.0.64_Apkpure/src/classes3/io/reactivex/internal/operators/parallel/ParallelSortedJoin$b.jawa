record `io.reactivex.internal.operators.parallel.ParallelSortedJoin$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.parallel.ParallelSortedJoin$a`[] `io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.b` @AccessFlag FINAL;
  `java.util.List`[] `io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.c` @AccessFlag FINAL;
  `int`[] `io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.d` @AccessFlag FINAL;
  `java.util.Comparator` `io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.g` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.i` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `int` v3 , `java.util.Comparator` v4 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;.<init>:(Lorg/reactivestreams/Subscriber;ILjava/util/Comparator;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L44e2e4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L44e2ea.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L44e2ee.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L44e2f4.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L44e2f8.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L44e2fc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L44e302.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.h` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L44e306.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L44e30a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L44e310.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L44e314.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L44e318.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.e` @type ^`java.util.Comparator` := v4 @kind object;
  #L44e31c.  v2:= new `io.reactivex.internal.operators.parallel.ParallelSortedJoin$a`[v3];
  #L44e320.  v4:= 0I;
  #L44e322.  if v4 >= v3 then goto L44e33a;
  #L44e326.  v0:= new `io.reactivex.internal.operators.parallel.ParallelSortedJoin$a`;
  #L44e32a.  call `<init>`(v0, v1, v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$a;.<init>:(Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;I)V` @kind direct;
  #L44e330.  v2[v4]:= v0 @kind object;
  #L44e334.  v4:= v4 + 1;
  #L44e338.  goto L44e322;
  #L44e33a.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.b` @type ^`io.reactivex.internal.operators.parallel.ParallelSortedJoin$a`[] := v2 @kind object;
  #L44e33e.  v2:= new `java.util.List`[v3];
  #L44e342.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.c` @type ^`java.util.List`[] := v2 @kind object;
  #L44e346.  v2:= new `int`[v3];
  #L44e34a.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.d` @type ^`int`[] := v2 @kind object;
  #L44e34e.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.h` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L44e352.  call `lazySet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L44e358.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44e3ac.  v0:= v4.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.b` @type ^`io.reactivex.internal.operators.parallel.ParallelSortedJoin$a`[] @kind object;
  #L44e3b0.  v1:= length @variable v0;
  #L44e3b2.  v2:= 0I;
  #L44e3b4.  if v2 >= v1 then goto L44e3c8;
  #L44e3b8.  v3:= v0[v2] @kind object;
  #L44e3bc.  call `a`(v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$a;.a:()V` @kind virtual;
  #L44e3c2.  v2:= v2 + 1;
  #L44e3c6.  goto L44e3b4;
  #L44e3c8.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b` v16 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L44e3dc.  v1:= v16 @kind object;
  #L44e3e0.  call temp:= `getAndIncrement`(v16) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44e3e6.  v0:= temp;
  #L44e3e8.  if v0 == 0 then goto L44e3ee;
  #L44e3ec.  return @kind void;
  #L44e3ee.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44e3f2.  v3:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.c` @type ^`java.util.List`[] @kind object;
  #L44e3f6.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.d` @type ^`int`[] @kind object;
  #L44e3fa.  v4:= length @variable v0;
  #L44e3fc.  v6:= 1I;
  #L44e3fe.  v7:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44e402.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L44e408.  v7:= temp @kind wide;
  #L44e40a.  v11:= 0L;
  #L44e40e.  v14:= 0I;
  #L44e410.  v15:= lcmp(v11, v7);
  #L44e414.  if v15 == 0 then goto L44e520;
  #L44e418.  v15:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.g` @type ^`boolean` @kind boolean;
  #L44e41c.  if v15 == 0 then goto L44e428;
  #L44e420.  call `fill`(v3, v14) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L44e426.  return @kind void;
  #L44e428.  v15:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44e42c.  call temp:= `get`(v15) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e432.  v15:= temp @kind object;
  #L44e434.  v15:= (`java.lang.Throwable`) v15 @kind object;
  #L44e438.  if v15 == 0 then goto L44e450;
  #L44e43c.  call `a`(v16) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;.a:()V` @kind virtual;
  #L44e442.  call `fill`(v3, v14) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L44e448.  call `onError`(v2, v15) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44e44e.  return @kind void;
  #L44e450.  v15:= -1I;
  #L44e452.  v9:= v14 @kind object;
  #L44e454.  v13:= 0I;
  #L44e456.  if v13 >= v4 then goto L44e4f0;
  #L44e45a.  v10:= v3[v13] @kind object;
  #L44e45e.  v5:= v0[v13];
  #L44e462.  call temp:= `size`(v10) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L44e468.  v14:= temp;
  #L44e46a.  if v14 == v5 then goto L44e4e8;
  #L44e46e.  if v9 != 0 then goto L44e47e;
  #L44e472.  call temp:= `get`(v10, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L44e478.  v9:= temp @kind object;
  #L44e47a.  v15:= v13;
  #L44e47c.  goto L44e4e8;
  #L44e47e.  call temp:= `get`(v10, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L44e484.  v5:= temp @kind object;
  #L44e486.  v10:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.e` @type ^`java.util.Comparator` @kind object;
  #L44e48a.  call temp:= `compare`(v10, v9, v5) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L44e490.  v10:= temp;
  #L44e492.  if v10 <= 0 then goto L44e49a;
  #L44e496.  v10:= 1I;
  #L44e498.  goto L44e49c;
  #L44e49a.  v10:= 0I;
  #L44e49c.  if v10 == 0 then goto L44e4e8;
  #L44e4a0.  v9:= v5 @kind object;
  #L44e4a2.  goto L44e47a;
  #L44e4a4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44e4a6.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44e4ac.  call `a`(v16) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;.a:()V` @kind virtual;
  #L44e4b2.  v4:= 0I;
  #L44e4b4.  call `fill`(v3, v4) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L44e4ba.  v3:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44e4be.  call temp:= `compareAndSet`(v3, v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44e4c4.  v3:= temp;
  #L44e4c6.  if v3 != 0 then goto L44e4d0;
  #L44e4ca.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44e4d0.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44e4d4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e4da.  v0:= temp @kind object;
  #L44e4dc.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L44e4e0.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44e4e6.  return @kind void;
  #L44e4e8.  v13:= v13 + 1;
  #L44e4ec.  v14:= 0I;
  #L44e4ee.  goto L44e456;
  #L44e4f0.  if v9 != 0 then goto L44e504;
  #L44e4f4.  v5:= 0I;
  #L44e4f6.  call `fill`(v3, v5) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L44e4fc.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44e502.  return @kind void;
  #L44e504.  call `onNext`(v2, v9) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44e50a.  v5:= v0[v15];
  #L44e50e.  v9:= 1I;
  #L44e510.  v5:= v5 + v9 @kind int;
  #L44e512.  v0[v15]:= v5;
  #L44e516.  v13:= 1L;
  #L44e51a.  v11:= v11 + v13 @kind long;
  #L44e51c.  goto L44e40e;
  #L44e520.  v9:= 1I;
  #L44e522.  if v15 != 0 then goto L44e59c;
  #L44e526.  v5:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.g` @type ^`boolean` @kind boolean;
  #L44e52a.  if v5 == 0 then goto L44e538;
  #L44e52e.  v5:= 0I;
  #L44e530.  call `fill`(v3, v5) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L44e536.  return @kind void;
  #L44e538.  v5:= 0I;
  #L44e53a.  v10:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44e53e.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e544.  v10:= temp @kind object;
  #L44e546.  v10:= (`java.lang.Throwable`) v10 @kind object;
  #L44e54a.  if v10 == 0 then goto L44e562;
  #L44e54e.  call `a`(v16) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;.a:()V` @kind virtual;
  #L44e554.  call `fill`(v3, v5) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L44e55a.  call `onError`(v2, v10) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44e560.  return @kind void;
  #L44e562.  v5:= 0I;
  #L44e564.  if v5 >= v4 then goto L44e586;
  #L44e568.  v10:= v0[v5];
  #L44e56c.  v13:= v3[v5] @kind object;
  #L44e570.  call temp:= `size`(v13) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L44e576.  v13:= temp;
  #L44e578.  if v10 == v13 then goto L44e580;
  #L44e57c.  v13:= 0I;
  #L44e57e.  goto L44e588;
  #L44e580.  v5:= v5 + 1;
  #L44e584.  goto L44e564;
  #L44e586.  v13:= 1I;
  #L44e588.  if v13 == 0 then goto L44e59c;
  #L44e58c.  v5:= 0I;
  #L44e58e.  call `fill`(v3, v5) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L44e594.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44e59a.  return @kind void;
  #L44e59c.  v13:= 0L;
  #L44e5a0.  v5:= lcmp(v11, v13);
  #L44e5a4.  if v5 == 0 then goto L44e5c6;
  #L44e5a8.  v13:= 9223372036854775807L;
  #L44e5b2.  v5:= lcmp(v7, v13);
  #L44e5b6.  if v5 == 0 then goto L44e5c6;
  #L44e5ba.  v5:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44e5be.  v7:= -v11 @kind long;
  #L44e5c0.  call temp:= `addAndGet`(v5, v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L44e5c6.  call temp:= `get`(v16) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L44e5cc.  v5:= temp;
  #L44e5ce.  if v5 != v6 then goto L44e5e2;
  #L44e5d2.  v5:= -v6 @kind int;
  #L44e5d4.  call temp:= `addAndGet`(v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L44e5da.  v5:= temp;
  #L44e5dc.  if v5 != 0 then goto L44e5e2;
  #L44e5e0.  return @kind void;
  #L44e5e2.  v6:= v5;
  #L44e5e4.  goto L44e3fe;
  catch `java.lang.Throwable` @[L44e486..L44e492] goto L44e4a4;
}
procedure `void` `c`(`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;.c:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L44e604.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44e608.  v1:= 0I;
  #L44e60a.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44e610.  v0:= temp;
  #L44e612.  if v0 == 0 then goto L44e61e;
  #L44e616.  call `b`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;.b:()V` @kind virtual;
  #L44e61c.  goto L44e634;
  #L44e61e.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44e622.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e628.  v0:= temp @kind object;
  #L44e62a.  if v3 == v0 then goto L44e634;
  #L44e62e.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44e634.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44e36c.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.g` @type ^`boolean` @kind boolean;
  #L44e370.  if v0 != 0 then goto L44e398;
  #L44e374.  v0:= 1I;
  #L44e376.  v2.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.g` @type ^`boolean` := v0 @kind boolean;
  #L44e37a.  call `a`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;.a:()V` @kind virtual;
  #L44e380.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44e386.  v0:= temp;
  #L44e388.  if v0 != 0 then goto L44e398;
  #L44e38c.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.c` @type ^`java.util.List`[] @kind object;
  #L44e390.  v1:= 0I;
  #L44e392.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L44e398.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b` v1 @kind this, `java.util.List` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;.d:(Ljava/util/List;I)V` @AccessFlag  {
    temp;
    v0;

  #L44e648.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.c` @type ^`java.util.List`[] @kind object;
  #L44e64c.  v0[v3]:= v2 @kind object;
  #L44e650.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.h` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L44e654.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L44e65a.  v2:= temp;
  #L44e65c.  if v2 != 0 then goto L44e666;
  #L44e660.  call `b`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;.b:()V` @kind virtual;
  #L44e666.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44e678.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L44e67e.  v0:= temp;
  #L44e680.  if v0 == 0 then goto L44e6a4;
  #L44e684.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44e688.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L44e68e.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.h` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L44e692.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L44e698.  v2:= temp;
  #L44e69a.  if v2 != 0 then goto L44e6a4;
  #L44e69e.  call `b`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;.b:()V` @kind virtual;
  #L44e6a4.  return @kind void;
}
