record `io.reactivex.internal.operators.parallel.ParallelJoin$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `io.reactivex.internal.operators.parallel.ParallelJoin$c` `io.reactivex.internal.operators.parallel.ParallelJoin$a.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelJoin$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelJoin$a.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.parallel.ParallelJoin$a.d` @AccessFlag ;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.parallel.ParallelJoin$a.e` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelJoin$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelJoin$a` v0 @kind this, `io.reactivex.internal.operators.parallel.ParallelJoin$c` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.<init>:(Lio/reactivex/internal/operators/parallel/ParallelJoin$c;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44be80.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L44be86.  v0.`io.reactivex.internal.operators.parallel.ParallelJoin$a.a` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$c` := v1 @kind object;
  #L44be8a.  v0.`io.reactivex.internal.operators.parallel.ParallelJoin$a.b` @type ^`int` := v2;
  #L44be8e.  v1:= v2 ^> 2;
  #L44be92.  v2:= v2 - v1 @kind int;
  #L44be94.  v0.`io.reactivex.internal.operators.parallel.ParallelJoin$a.c` @type ^`int` := v2;
  #L44be98.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.parallel.ParallelJoin$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44be38.  call temp:= `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44be3e.  v0:= temp;
  #L44be40.  return v0;
}
procedure `io.reactivex.internal.fuseable.SimplePlainQueue` `b`(`io.reactivex.internal.operators.parallel.ParallelJoin$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.b:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L44be54.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelJoin$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L44be58.  if v0 != 0 then goto L44be6e;
  #L44be5c.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L44be60.  v1:= v2.`io.reactivex.internal.operators.parallel.ParallelJoin$a.b` @type ^`int`;
  #L44be64.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L44be6a.  v2.`io.reactivex.internal.operators.parallel.ParallelJoin$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L44be6e.  return v0 @kind object;
}
procedure `void` `c`(`io.reactivex.internal.operators.parallel.ParallelJoin$a` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.c:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44bf2c.  v0:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin$a.d` @type ^`long` @kind wide;
  #L44bf30.  v0:= v0 + v4 @kind long;
  #L44bf32.  v4:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin$a.c` @type ^`int`;
  #L44bf36.  v4:= (`long`) v4 @kind i2l;
  #L44bf38.  v2:= lcmp(v0, v4);
  #L44bf3c.  if v2 < 0 then goto L44bf5c;
  #L44bf40.  v4:= 0L;
  #L44bf44.  v3.`io.reactivex.internal.operators.parallel.ParallelJoin$a.d` @type ^`long` := v4 @kind wide;
  #L44bf48.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44bf4e.  v4:= temp @kind object;
  #L44bf50.  v4:= (`org.reactivestreams.Subscription`) v4 @kind object;
  #L44bf54.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44bf5a.  goto L44bf60;
  #L44bf5c.  v3.`io.reactivex.internal.operators.parallel.ParallelJoin$a.d` @type ^`long` := v0 @kind wide;
  #L44bf60.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.parallel.ParallelJoin$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44bf74.  v0:= v5.`io.reactivex.internal.operators.parallel.ParallelJoin$a.d` @type ^`long` @kind wide;
  #L44bf78.  v2:= 1L;
  #L44bf7c.  v0:= v0 + v2 @kind long;
  #L44bf7e.  v2:= v5.`io.reactivex.internal.operators.parallel.ParallelJoin$a.c` @type ^`int`;
  #L44bf82.  v2:= (`long`) v2 @kind i2l;
  #L44bf84.  v4:= lcmp(v0, v2);
  #L44bf88.  if v4 != 0 then goto L44bfa8;
  #L44bf8c.  v2:= 0L;
  #L44bf90.  v5.`io.reactivex.internal.operators.parallel.ParallelJoin$a.d` @type ^`long` := v2 @kind wide;
  #L44bf94.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44bf9a.  v2:= temp @kind object;
  #L44bf9c.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L44bfa0.  call `request`(v2, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44bfa6.  goto L44bfac;
  #L44bfa8.  v5.`io.reactivex.internal.operators.parallel.ParallelJoin$a.d` @type ^`long` := v0 @kind wide;
  #L44bfac.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelJoin$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44beac.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$a.a` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$c` @kind object;
  #L44beb0.  call `d`(v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.d:()V` @kind virtual;
  #L44beb6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44bec8.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$a.a` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$c` @kind object;
  #L44becc.  call `e`(v0, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.e:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44bed2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelJoin$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44bee4.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$a.a` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$c` @kind object;
  #L44bee8.  call `f`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.f:(Lio/reactivex/internal/operators/parallel/ParallelJoin$a;Ljava/lang/Object;)V` @kind virtual;
  #L44beee.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelJoin$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44bf00.  call temp:= `setOnce`(v2, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44bf06.  v0:= temp;
  #L44bf08.  if v0 == 0 then goto L44bf18;
  #L44bf0c.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelJoin$a.b` @type ^`int`;
  #L44bf10.  v0:= (`long`) v0 @kind i2l;
  #L44bf12.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44bf18.  return @kind void;
}
