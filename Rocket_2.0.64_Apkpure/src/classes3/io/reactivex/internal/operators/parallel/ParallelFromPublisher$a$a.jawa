record `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a$a` @kind class @AccessFlag FINAL extends `org.reactivestreams.Subscription` @kind interface {
  `int` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a$a.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a$a.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a$a` v0 @kind this, `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a$a;.<init>:(Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44b7a8.  v0.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a$a.c` @type ^`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` := v1 @kind object;
  #L44b7ac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44b7b2.  v0.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a$a.a` @type ^`int` := v2;
  #L44b7b6.  v0.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a$a.b` @type ^`int` := v3;
  #L44b7ba.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a$a` v7 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L44b7cc.  v0:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a$a.c` @type ^`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` @kind object;
  #L44b7d0.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.b` @type ^`java.util.concurrent.atomic.AtomicLongArray` @kind object;
  #L44b7d4.  v0:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a$a.b` @type ^`int`;
  #L44b7d8.  v2:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a$a.a` @type ^`int`;
  #L44b7dc.  v2:= v2 + v0 @kind int;
  #L44b7de.  v3:= 0L;
  #L44b7e2.  v5:= 1L;
  #L44b7e6.  call temp:= `compareAndSet`(v1, v2, v3, v5) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.compareAndSet:(IJJ)Z` @kind virtual;
  #L44b7ec.  v0:= temp;
  #L44b7ee.  if v0 == 0 then goto L44b802;
  #L44b7f2.  v0:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a$a.c` @type ^`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` @kind object;
  #L44b7f6.  v1:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a$a.b` @type ^`int`;
  #L44b7fa.  v1:= v1 + v1 @kind int;
  #L44b7fc.  call `a`(v0, v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.a:(I)V` @kind virtual;
  #L44b802.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a$a` v7 @kind this, `long` v8 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L44b814.  call temp:= `validate`(v8) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L44b81a.  v0:= temp;
  #L44b81c.  if v0 == 0 then goto L44b884;
  #L44b820.  v0:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a$a.c` @type ^`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` @kind object;
  #L44b824.  v0:= v0.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.b` @type ^`java.util.concurrent.atomic.AtomicLongArray` @kind object;
  #L44b828.  v1:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a$a.a` @type ^`int`;
  #L44b82c.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.get:(I)J` @kind virtual;
  #L44b832.  v3:= temp @kind wide;
  #L44b834.  v1:= 9223372036854775807L;
  #L44b83e.  v5:= lcmp(v3, v1);
  #L44b842.  if v5 != 0 then goto L44b848;
  #L44b846.  return @kind void;
  #L44b848.  call temp:= `addCap`(v3, v8) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L44b84e.  v5:= temp @kind wide;
  #L44b850.  v2:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a$a.a` @type ^`int`;
  #L44b854.  v1:= v0 @kind object;
  #L44b856.  call temp:= `compareAndSet`(v1, v2, v3, v5) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.compareAndSet:(IJJ)Z` @kind virtual;
  #L44b85c.  v1:= temp;
  #L44b85e.  if v1 == 0 then goto L44b828;
  #L44b862.  v8:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a$a.c` @type ^`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` @kind object;
  #L44b866.  v8:= v8.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L44b86a.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L44b870.  v8:= temp;
  #L44b872.  v9:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a$a.b` @type ^`int`;
  #L44b876.  if v8 != v9 then goto L44b884;
  #L44b87a.  v8:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a$a.c` @type ^`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` @kind object;
  #L44b87e.  call `b`(v8) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.b:()V` @kind virtual;
  #L44b884.  return @kind void;
}
