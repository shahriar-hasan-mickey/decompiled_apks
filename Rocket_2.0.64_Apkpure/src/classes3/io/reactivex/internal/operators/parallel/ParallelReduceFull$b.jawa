record `io.reactivex.internal.operators.parallel.ParallelReduceFull$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class {
  `io.reactivex.internal.operators.parallel.ParallelReduceFull$a`[] `io.reactivex.internal.operators.parallel.ParallelReduceFull$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.parallel.ParallelReduceFull$b.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.parallel.ParallelReduceFull$b.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.parallel.ParallelReduceFull$b.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.parallel.ParallelReduceFull$b.e` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelReduceFull$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelReduceFull$b` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object, `int` v4 , `io.reactivex.functions.BiFunction` v5 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$b;.<init>:(Lorg/reactivestreams/Subscriber;ILio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L44d88c.  call `<init>`(v2, v3) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L44d892.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L44d896.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L44d89c.  v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L44d8a0.  v3:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L44d8a4.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L44d8aa.  v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.d` @type ^`java.util.concurrent.atomic.AtomicInteger` := v3 @kind object;
  #L44d8ae.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L44d8b2.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L44d8b8.  v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L44d8bc.  v3:= new `io.reactivex.internal.operators.parallel.ParallelReduceFull$a`[v4];
  #L44d8c0.  v0:= 0I;
  #L44d8c2.  if v0 >= v4 then goto L44d8da;
  #L44d8c6.  v1:= new `io.reactivex.internal.operators.parallel.ParallelReduceFull$a`;
  #L44d8ca.  call `<init>`(v1, v2, v5) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$a;.<init>:(Lio/reactivex/internal/operators/parallel/ParallelReduceFull$b;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L44d8d0.  v3[v0]:= v1 @kind object;
  #L44d8d4.  v0:= v0 + 1;
  #L44d8d8.  goto L44d8c2;
  #L44d8da.  v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.a` @type ^`io.reactivex.internal.operators.parallel.ParallelReduceFull$a`[] := v3 @kind object;
  #L44d8de.  v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.b` @type ^`io.reactivex.functions.BiFunction` := v5 @kind object;
  #L44d8e2.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L44d8e6.  call `lazySet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L44d8ec.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.parallel.ParallelReduceFull$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$b;.a:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L44d9d8.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44d9dc.  v1:= 0I;
  #L44d9de.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44d9e4.  v0:= temp;
  #L44d9e6.  if v0 == 0 then goto L44d9fc;
  #L44d9ea.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$b;.cancel:()V` @kind virtual;
  #L44d9f0.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44d9f4.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44d9fa.  goto L44da12;
  #L44d9fc.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44da00.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44da06.  v0:= temp @kind object;
  #L44da08.  if v3 == v0 then goto L44da12;
  #L44da0c.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44da12.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelReduceFull$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44d900.  v0:= v4.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.a` @type ^`io.reactivex.internal.operators.parallel.ParallelReduceFull$a`[] @kind object;
  #L44d904.  v1:= length @variable v0;
  #L44d906.  v2:= 0I;
  #L44d908.  if v2 >= v1 then goto L44d91c;
  #L44d90c.  v3:= v0[v2] @kind object;
  #L44d910.  call `a`(v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$a;.a:()V` @kind virtual;
  #L44d916.  v2:= v2 + 1;
  #L44d91a.  goto L44d908;
  #L44d91c.  return @kind void;
}
procedure `io.reactivex.internal.operators.parallel.ParallelReduceFull$c` `e`(`io.reactivex.internal.operators.parallel.ParallelReduceFull$b` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$b;.e:(Ljava/lang/Object;)Lio/reactivex/internal/operators/parallel/ParallelReduceFull$c;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L44d808.  v0:= v3.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44d80c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44d812.  v0:= temp @kind object;
  #L44d814.  v0:= (`io.reactivex.internal.operators.parallel.ParallelReduceFull$c`) v0 @kind object;
  #L44d818.  v1:= 0I;
  #L44d81a.  if v0 != 0 then goto L44d83a;
  #L44d81e.  v0:= new `io.reactivex.internal.operators.parallel.ParallelReduceFull$c`;
  #L44d822.  call `<init>`(v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$c;.<init>:()V` @kind direct;
  #L44d828.  v2:= v3.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44d82c.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44d832.  v2:= temp;
  #L44d834.  if v2 != 0 then goto L44d83a;
  #L44d838.  goto L44d808;
  #L44d83a.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$c;.b:()I` @kind virtual;
  #L44d840.  v2:= temp;
  #L44d842.  if v2 >= 0 then goto L44d852;
  #L44d846.  v2:= v3.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44d84a.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44d850.  goto L44d808;
  #L44d852.  if v2 != 0 then goto L44d85c;
  #L44d856.  v0.`io.reactivex.internal.operators.parallel.ParallelReduceFull$c.a` @type ^`java.lang.Object` := v4 @kind object;
  #L44d85a.  goto L44d860;
  #L44d85c.  v0.`io.reactivex.internal.operators.parallel.ParallelReduceFull$c.b` @type ^`java.lang.Object` := v4 @kind object;
  #L44d860.  call temp:= `a`(v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$c;.a:()Z` @kind virtual;
  #L44d866.  v4:= temp;
  #L44d868.  if v4 == 0 then goto L44d878;
  #L44d86c.  v4:= v3.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44d870.  call temp:= `compareAndSet`(v4, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44d876.  return v0 @kind object;
  #L44d878.  return v1 @kind object;
}
procedure `void` `f`(`io.reactivex.internal.operators.parallel.ParallelReduceFull$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$b;.f:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L44d930.  if v3 == 0 then goto L44d972;
  #L44d934.  call temp:= `e`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$b;.e:(Ljava/lang/Object;)Lio/reactivex/internal/operators/parallel/ParallelReduceFull$c;` @kind virtual;
  #L44d93a.  v3:= temp @kind object;
  #L44d93c.  if v3 == 0 then goto L44d972;
  #L44d940.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.b` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L44d944.  v1:= v3.`io.reactivex.internal.operators.parallel.ParallelReduceFull$c.a` @type ^`java.lang.Object` @kind object;
  #L44d948.  v3:= v3.`io.reactivex.internal.operators.parallel.ParallelReduceFull$c.b` @type ^`java.lang.Object` @kind object;
  #L44d94c.  call temp:= `apply`(v0, v1, v3) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L44d952.  v3:= temp @kind object;
  #L44d954.  v0:= "The reducer returned a null value" @kind object;
  #L44d958.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44d95e.  v3:= temp @kind object;
  #L44d960.  goto L44d934;
  #L44d962.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44d964.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44d96a.  call `a`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$b;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44d970.  return @kind void;
  #L44d972.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L44d976.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L44d97c.  v3:= temp;
  #L44d97e.  if v3 != 0 then goto L44d9b8;
  #L44d982.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44d986.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44d98c.  v3:= temp @kind object;
  #L44d98e.  v3:= (`io.reactivex.internal.operators.parallel.ParallelReduceFull$c`) v3 @kind object;
  #L44d992.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44d996.  v1:= 0I;
  #L44d998.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L44d99e.  if v3 == 0 then goto L44d9ae;
  #L44d9a2.  v3:= v3.`io.reactivex.internal.operators.parallel.ParallelReduceFull$c.a` @type ^`java.lang.Object` @kind object;
  #L44d9a6.  call `complete`(v2, v3) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L44d9ac.  goto L44d9b8;
  #L44d9ae.  v3:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44d9b2.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44d9b8.  return @kind void;
  catch `java.lang.Throwable` @[L44d940..L44d960] goto L44d962;
}
