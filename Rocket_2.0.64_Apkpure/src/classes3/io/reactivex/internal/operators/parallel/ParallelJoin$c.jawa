record `io.reactivex.internal.operators.parallel.ParallelJoin$c` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.parallel.ParallelJoin$c.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.parallel.ParallelJoin$a`[] `io.reactivex.internal.operators.parallel.ParallelJoin$c.b` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.parallel.ParallelJoin$c.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.parallel.ParallelJoin$c.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelJoin$c.e` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.parallel.ParallelJoin$c.f` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelJoin$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelJoin$c` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L44bfc0.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L44bfc6.  v0:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L44bfca.  call `<init>`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L44bfd0.  v2.`io.reactivex.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.internal.util.AtomicThrowable` := v0 @kind object;
  #L44bfd4.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L44bfd8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L44bfde.  v2.`io.reactivex.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L44bfe2.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L44bfe6.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L44bfec.  v2.`io.reactivex.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L44bff0.  v2.`io.reactivex.internal.operators.parallel.ParallelJoin$c.a` @type ^`org.reactivestreams.Subscriber` := v3 @kind object;
  #L44bff4.  v3:= new `io.reactivex.internal.operators.parallel.ParallelJoin$a`[v4];
  #L44bff8.  v0:= 0I;
  #L44bffa.  if v0 >= v4 then goto L44c012;
  #L44bffe.  v1:= new `io.reactivex.internal.operators.parallel.ParallelJoin$a`;
  #L44c002.  call `<init>`(v1, v2, v5) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.<init>:(Lio/reactivex/internal/operators/parallel/ParallelJoin$c;I)V` @kind direct;
  #L44c008.  v3[v0]:= v1 @kind object;
  #L44c00c.  v0:= v0 + 1;
  #L44c010.  goto L44bffa;
  #L44c012.  v2.`io.reactivex.internal.operators.parallel.ParallelJoin$c.b` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$a`[] := v3 @kind object;
  #L44c016.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L44c01a.  call `lazySet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L44c020.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.parallel.ParallelJoin$c` v3 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L44c06c.  v0:= 0I;
  #L44c06e.  v1:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin$c.b` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$a`[] @kind object;
  #L44c072.  v2:= length @variable v1;
  #L44c074.  if v0 >= v2 then goto L44c088;
  #L44c078.  v1:= v1[v0] @kind object;
  #L44c07c.  call temp:= `a`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.a:()Z` @kind virtual;
  #L44c082.  v0:= v0 + 1;
  #L44c086.  goto L44c06e;
  #L44c088.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.parallel.ParallelJoin$c` v3 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L44c09c.  v0:= 0I;
  #L44c09e.  v1:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin$c.b` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$a`[] @kind object;
  #L44c0a2.  v2:= length @variable v1;
  #L44c0a4.  if v0 >= v2 then goto L44c0b8;
  #L44c0a8.  v1:= v1[v0] @kind object;
  #L44c0ac.  v2:= 0I;
  #L44c0ae.  v1.`io.reactivex.internal.operators.parallel.ParallelJoin$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v2 @kind object;
  #L44c0b2.  v0:= v0 + 1;
  #L44c0b6.  goto L44c09e;
  #L44c0b8.  return @kind void;
}
procedure `void` `c`() @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.c:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelJoin$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44c034.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$c.e` @type ^`boolean` @kind boolean;
  #L44c038.  if v0 != 0 then goto L44c05a;
  #L44c03c.  v0:= 1I;
  #L44c03e.  v1.`io.reactivex.internal.operators.parallel.ParallelJoin$c.e` @type ^`boolean` := v0 @kind boolean;
  #L44c042.  call `a`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.a:()V` @kind virtual;
  #L44c048.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44c04e.  v0:= temp;
  #L44c050.  if v0 != 0 then goto L44c05a;
  #L44c054.  call `b`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.b:()V` @kind virtual;
  #L44c05a.  return @kind void;
}
procedure `void` `d`() @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.d:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `e`(`java.lang.Throwable` v0 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.e:(Ljava/lang/Throwable;)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `f`(`io.reactivex.internal.operators.parallel.ParallelJoin$a` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.f:(Lio/reactivex/internal/operators/parallel/ParallelJoin$a;Ljava/lang/Object;)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelJoin$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44c0cc.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L44c0d2.  v0:= temp;
  #L44c0d4.  if v0 == 0 then goto L44c0e8;
  #L44c0d8.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44c0dc.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L44c0e2.  call `c`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.c:()V` @kind virtual;
  #L44c0e8.  return @kind void;
}
