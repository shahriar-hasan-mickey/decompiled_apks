record `io.reactivex.internal.operators.parallel.ParallelConcatMap` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.parallel.ParallelFlowable` @kind class {
  `io.reactivex.parallel.ParallelFlowable` `io.reactivex.internal.operators.parallel.ParallelConcatMap.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.parallel.ParallelConcatMap.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelConcatMap.c` @AccessFlag FINAL;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.parallel.ParallelConcatMap.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelConcatMap` v0 @kind this, `io.reactivex.parallel.ParallelFlowable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `io.reactivex.internal.util.ErrorMode` v4 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelConcatMap;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L44a82c.  call `<init>`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L44a832.  v0.`io.reactivex.internal.operators.parallel.ParallelConcatMap.a` @type ^`io.reactivex.parallel.ParallelFlowable` := v1 @kind object;
  #L44a836.  v1:= "mapper" @kind object;
  #L44a83a.  call temp:= `requireNonNull`(v2, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44a840.  v1:= temp @kind object;
  #L44a842.  v1:= (`io.reactivex.functions.Function`) v1 @kind object;
  #L44a846.  v0.`io.reactivex.internal.operators.parallel.ParallelConcatMap.b` @type ^`io.reactivex.functions.Function` := v1 @kind object;
  #L44a84a.  v0.`io.reactivex.internal.operators.parallel.ParallelConcatMap.c` @type ^`int` := v3;
  #L44a84e.  v1:= "errorMode" @kind object;
  #L44a852.  call temp:= `requireNonNull`(v4, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44a858.  v1:= temp @kind object;
  #L44a85a.  v1:= (`io.reactivex.internal.util.ErrorMode`) v1 @kind object;
  #L44a85e.  v0.`io.reactivex.internal.operators.parallel.ParallelConcatMap.d` @type ^`io.reactivex.internal.util.ErrorMode` := v1 @kind object;
  #L44a862.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.internal.operators.parallel.ParallelConcatMap` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelConcatMap;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44a80c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelConcatMap.a` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L44a810.  call temp:= `parallelism`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L44a816.  v0:= temp;
  #L44a818.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.parallel.ParallelConcatMap` v7 @kind this, `org.reactivestreams.Subscriber`[] v8 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelConcatMap;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L44a874.  call temp:= `validate`(v7, v8) @signature `Lio/reactivex/parallel/ParallelFlowable;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L44a87a.  v0:= temp;
  #L44a87c.  if v0 != 0 then goto L44a882;
  #L44a880.  return @kind void;
  #L44a882.  v0:= length @variable v8;
  #L44a884.  v1:= new `org.reactivestreams.Subscriber`[v0];
  #L44a888.  v2:= 0I;
  #L44a88a.  if v2 >= v0 then goto L44a8b0;
  #L44a88e.  v3:= v8[v2] @kind object;
  #L44a892.  v4:= v7.`io.reactivex.internal.operators.parallel.ParallelConcatMap.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L44a896.  v5:= v7.`io.reactivex.internal.operators.parallel.ParallelConcatMap.c` @type ^`int`;
  #L44a89a.  v6:= v7.`io.reactivex.internal.operators.parallel.ParallelConcatMap.d` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L44a89e.  call temp:= `subscribe`(v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap;.subscribe:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)Lorg/reactivestreams/Subscriber;` @kind static;
  #L44a8a4.  v3:= temp @kind object;
  #L44a8a6.  v1[v2]:= v3 @kind object;
  #L44a8aa.  v2:= v2 + 1;
  #L44a8ae.  goto L44a88a;
  #L44a8b0.  v8:= v7.`io.reactivex.internal.operators.parallel.ParallelConcatMap.a` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L44a8b4.  call `subscribe`(v8, v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L44a8ba.  return @kind void;
}
