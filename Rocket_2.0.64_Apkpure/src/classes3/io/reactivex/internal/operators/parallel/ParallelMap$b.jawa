record `io.reactivex.internal.operators.parallel.ParallelMap$b` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.parallel.ParallelMap$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.parallel.ParallelMap$b.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.parallel.ParallelMap$b.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelMap$b.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelMap$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44ca20.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44ca26.  v0.`io.reactivex.internal.operators.parallel.ParallelMap$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L44ca2a.  v0.`io.reactivex.internal.operators.parallel.ParallelMap$b.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L44ca2e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelMap$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44ca40.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$b.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44ca44.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44ca4a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelMap$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44ca5c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$b.d` @type ^`boolean` @kind boolean;
  #L44ca60.  if v0 == 0 then goto L44ca66;
  #L44ca64.  return @kind void;
  #L44ca66.  v0:= 1I;
  #L44ca68.  v1.`io.reactivex.internal.operators.parallel.ParallelMap$b.d` @type ^`boolean` := v0 @kind boolean;
  #L44ca6c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44ca70.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44ca76.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelMap$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44ca88.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$b.d` @type ^`boolean` @kind boolean;
  #L44ca8c.  if v0 == 0 then goto L44ca98;
  #L44ca90.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44ca96.  return @kind void;
  #L44ca98.  v0:= 1I;
  #L44ca9a.  v1.`io.reactivex.internal.operators.parallel.ParallelMap$b.d` @type ^`boolean` := v0 @kind boolean;
  #L44ca9e.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44caa2.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44caa8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelMap$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44cabc.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$b.d` @type ^`boolean` @kind boolean;
  #L44cac0.  if v0 == 0 then goto L44cac6;
  #L44cac4.  return @kind void;
  #L44cac6.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$b.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L44caca.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L44cad0.  v2:= temp @kind object;
  #L44cad2.  v0:= "The mapper returned a null value" @kind object;
  #L44cad6.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44cadc.  v2:= temp @kind object;
  #L44cade.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44cae2.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44cae8.  return @kind void;
  #L44caea.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44caec.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44caf2.  call `cancel`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$b;.cancel:()V` @kind virtual;
  #L44caf8.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44cafe.  return @kind void;
  catch `java.lang.Throwable` @[L44cac6..L44cade] goto L44caea;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelMap$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44cb1c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$b.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44cb20.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44cb26.  v0:= temp;
  #L44cb28.  if v0 == 0 then goto L44cb3a;
  #L44cb2c.  v1.`io.reactivex.internal.operators.parallel.ParallelMap$b.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L44cb30.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44cb34.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44cb3a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelMap$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44cb4c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$b.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44cb50.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44cb56.  return @kind void;
}
