record `io.reactivex.internal.operators.parallel.ParallelMapTry$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.parallel.ParallelMapTry$c.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.parallel.ParallelMapTry$c.b` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.parallel.ParallelMapTry$c.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.parallel.ParallelMapTry$c.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelMapTry$c.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelMapTry$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44cf08.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44cf0e.  v0.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L44cf12.  v0.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L44cf16.  v0.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.c` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L44cf1a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelMapTry$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44cf2c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44cf30.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44cf36.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelMapTry$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44cf48.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.e` @type ^`boolean` @kind boolean;
  #L44cf4c.  if v0 == 0 then goto L44cf52;
  #L44cf50.  return @kind void;
  #L44cf52.  v0:= 1I;
  #L44cf54.  v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.e` @type ^`boolean` := v0 @kind boolean;
  #L44cf58.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44cf5c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44cf62.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelMapTry$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44cf74.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.e` @type ^`boolean` @kind boolean;
  #L44cf78.  if v0 == 0 then goto L44cf84;
  #L44cf7c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44cf82.  return @kind void;
  #L44cf84.  v0:= 1I;
  #L44cf86.  v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.e` @type ^`boolean` := v0 @kind boolean;
  #L44cf8a.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44cf8e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44cf94.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelMapTry$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44cfa8.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L44cfae.  v3:= temp;
  #L44cfb0.  if v3 != 0 then goto L44cfca;
  #L44cfb4.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.e` @type ^`boolean` @kind boolean;
  #L44cfb8.  if v3 != 0 then goto L44cfca;
  #L44cfbc.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44cfc0.  v0:= 1L;
  #L44cfc4.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44cfca.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelMapTry$c` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44cfdc.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44cfe0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44cfe6.  v0:= temp;
  #L44cfe8.  if v0 == 0 then goto L44cffa;
  #L44cfec.  v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.d` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L44cff0.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44cff4.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44cffa.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelMapTry$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44d00c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44d010.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44d016.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.parallel.ParallelMapTry$c` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L44ce10.  v0:= v9.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.e` @type ^`boolean` @kind boolean;
  #L44ce14.  v1:= 0I;
  #L44ce16.  if v0 == 0 then goto L44ce1c;
  #L44ce1a.  return v1;
  #L44ce1c.  v2:= 0L;
  #L44ce20.  v0:= 1I;
  #L44ce22.  v4:= v9.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L44ce26.  call temp:= `apply`(v4, v10) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L44ce2c.  v4:= temp @kind object;
  #L44ce2e.  v5:= "The mapper returned a null value" @kind object;
  #L44ce32.  call temp:= `requireNonNull`(v4, v5) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44ce38.  v10:= temp @kind object;
  #L44ce3a.  v1:= v9.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44ce3e.  call `onNext`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44ce44.  return v0;
  #L44ce46.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44ce48.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44ce4e.  v5:= 2I;
  #L44ce50.  v6:= v9.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.c` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L44ce54.  v7:= 1L;
  #L44ce58.  v2:= v2 + v7 @kind long;
  #L44ce5a.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L44ce60.  v7:= temp @kind object;
  #L44ce62.  call temp:= `apply`(v6, v7, v4) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L44ce68.  v6:= temp @kind object;
  #L44ce6a.  v7:= "The errorHandler returned a null item" @kind object;
  #L44ce6e.  call temp:= `requireNonNull`(v6, v7) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44ce74.  v6:= temp @kind object;
  #L44ce76.  v6:= (`io.reactivex.parallel.ParallelFailureHandling`) v6 @kind object;
  #L44ce7a.  v7:= `@@io.reactivex.internal.operators.parallel.ParallelMapTry$a.a` @type ^`int`[] @kind object;
  #L44ce7e.  call temp:= `ordinal`(v6) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L44ce84.  v6:= temp;
  #L44ce86.  v6:= v7[v6];
  #L44ce8a.  if v6 == v0 then goto L44ce20;
  #L44ce8e.  if v6 == v5 then goto L44ceb2;
  #L44ce92.  v10:= 3I;
  #L44ce94.  if v6 == v10 then goto L44cea6;
  #L44ce98.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.cancel:()V` @kind virtual;
  #L44ce9e.  call `onError`(v9, v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44cea4.  return v1;
  #L44cea6.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.cancel:()V` @kind virtual;
  #L44ceac.  call `onComplete`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.onComplete:()V` @kind virtual;
  #L44ceb2.  return v1;
  #L44ceb4.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44ceb6.  call `throwIfFatal`(v10) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44cebc.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.cancel:()V` @kind virtual;
  #L44cec2.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L44cec6.  v3:= new `java.lang.Throwable`[v5];
  #L44ceca.  v3[v1]:= v4 @kind object;
  #L44cece.  v3[v0]:= v10 @kind object;
  #L44ced2.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L44ced8.  call `onError`(v9, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44cede.  return v1;
  catch `java.lang.Throwable` @[L44ce22..L44ce3a] goto L44ce46;
  catch `java.lang.Throwable` @[L44ce50..L44ce7a] goto L44ceb4;
}
