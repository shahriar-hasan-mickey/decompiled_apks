record `io.reactivex.internal.operators.parallel.ParallelRunOn` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.parallel.ParallelFlowable` @kind class {
  `io.reactivex.parallel.ParallelFlowable` `io.reactivex.internal.operators.parallel.ParallelRunOn.a` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.parallel.ParallelRunOn.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelRunOn.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelRunOn` v0 @kind this, `io.reactivex.parallel.ParallelFlowable` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/Scheduler;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L44e168.  call `<init>`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L44e16e.  v0.`io.reactivex.internal.operators.parallel.ParallelRunOn.a` @type ^`io.reactivex.parallel.ParallelFlowable` := v1 @kind object;
  #L44e172.  v0.`io.reactivex.internal.operators.parallel.ParallelRunOn.b` @type ^`io.reactivex.Scheduler` := v2 @kind object;
  #L44e176.  v0.`io.reactivex.internal.operators.parallel.ParallelRunOn.c` @type ^`int` := v3;
  #L44e17a.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.internal.operators.parallel.ParallelRunOn` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44e148.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn.a` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L44e14c.  call temp:= `parallelism`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L44e152.  v0:= temp;
  #L44e154.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.parallel.ParallelRunOn` v8 @kind this, `org.reactivestreams.Subscriber`[] v9 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L44e18c.  call temp:= `validate`(v8, v9) @signature `Lio/reactivex/parallel/ParallelFlowable;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L44e192.  v0:= temp;
  #L44e194.  if v0 != 0 then goto L44e19a;
  #L44e198.  return @kind void;
  #L44e19a.  v0:= length @variable v9;
  #L44e19c.  v1:= new `org.reactivestreams.Subscriber`[v0];
  #L44e1a0.  v2:= v8.`io.reactivex.internal.operators.parallel.ParallelRunOn.c` @type ^`int`;
  #L44e1a4.  v3:= 0I;
  #L44e1a6.  if v3 >= v0 then goto L44e1f4;
  #L44e1aa.  v4:= v9[v3] @kind object;
  #L44e1ae.  v5:= v8.`io.reactivex.internal.operators.parallel.ParallelRunOn.b` @type ^`io.reactivex.Scheduler` @kind object;
  #L44e1b2.  call temp:= `createWorker`(v5) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L44e1b8.  v5:= temp @kind object;
  #L44e1ba.  v6:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L44e1be.  call `<init>`(v6, v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L44e1c4.  v7:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L44e1c8.  if v7 == 0 then goto L44e1e0;
  #L44e1cc.  v7:= new `io.reactivex.internal.operators.parallel.ParallelRunOn$b`;
  #L44e1d0.  v4:= (`io.reactivex.internal.fuseable.ConditionalSubscriber`) v4 @kind object;
  #L44e1d4.  call `<init>`(v7, v4, v2, v6, v5) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$b;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;ILio/reactivex/internal/queue/SpscArrayQueue;Lio/reactivex/Scheduler$Worker;)V` @kind direct;
  #L44e1da.  v1[v3]:= v7 @kind object;
  #L44e1de.  goto L44e1ee;
  #L44e1e0.  v7:= new `io.reactivex.internal.operators.parallel.ParallelRunOn$c`;
  #L44e1e4.  call `<init>`(v7, v4, v2, v6, v5) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$c;.<init>:(Lorg/reactivestreams/Subscriber;ILio/reactivex/internal/queue/SpscArrayQueue;Lio/reactivex/Scheduler$Worker;)V` @kind direct;
  #L44e1ea.  v1[v3]:= v7 @kind object;
  #L44e1ee.  v3:= v3 + 1;
  #L44e1f2.  goto L44e1a6;
  #L44e1f4.  v9:= v8.`io.reactivex.internal.operators.parallel.ParallelRunOn.a` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L44e1f8.  call `subscribe`(v9, v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L44e1fe.  return @kind void;
}
