record `io.reactivex.internal.operators.parallel.ParallelPeek$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.parallel.ParallelPeek$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.parallel.ParallelPeek` `io.reactivex.internal.operators.parallel.ParallelPeek$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.parallel.ParallelPeek$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelPeek$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelPeek$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.internal.operators.parallel.ParallelPeek` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/operators/parallel/ParallelPeek;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44d19c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44d1a2.  v0.`io.reactivex.internal.operators.parallel.ParallelPeek$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L44d1a6.  v0.`io.reactivex.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` := v2 @kind object;
  #L44d1aa.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelPeek$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44d1bc.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` @kind object;
  #L44d1c0.  v0:= v0.`io.reactivex.internal.operators.parallel.ParallelPeek.i` @type ^`io.reactivex.functions.Action` @kind object;
  #L44d1c4.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L44d1ca.  goto L44d1da;
  #L44d1cc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44d1ce.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44d1d4.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44d1da.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelPeek$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44d1de.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44d1e4.  return @kind void;
  catch `java.lang.Throwable` @[L44d1bc..L44d1ca] goto L44d1cc;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelPeek$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44d204.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelPeek$a.d` @type ^`boolean` @kind boolean;
  #L44d208.  if v0 != 0 then goto L44d25c;
  #L44d20c.  v0:= 1I;
  #L44d20e.  v2.`io.reactivex.internal.operators.parallel.ParallelPeek$a.d` @type ^`boolean` := v0 @kind boolean;
  #L44d212.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` @kind object;
  #L44d216.  v0:= v0.`io.reactivex.internal.operators.parallel.ParallelPeek.e` @type ^`io.reactivex.functions.Action` @kind object;
  #L44d21a.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L44d220.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelPeek$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44d224.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44d22a.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` @kind object;
  #L44d22e.  v0:= v0.`io.reactivex.internal.operators.parallel.ParallelPeek.f` @type ^`io.reactivex.functions.Action` @kind object;
  #L44d232.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L44d238.  goto L44d25c;
  #L44d23a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44d23c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44d242.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44d248.  goto L44d25c;
  #L44d24a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44d24c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44d252.  v1:= v2.`io.reactivex.internal.operators.parallel.ParallelPeek$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44d256.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44d25c.  return @kind void;
  catch `java.lang.Throwable` @[L44d212..L44d220] goto L44d24a;
  catch `java.lang.Throwable` @[L44d22a..L44d238] goto L44d23a;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelPeek$a` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44d288.  v0:= v5.`io.reactivex.internal.operators.parallel.ParallelPeek$a.d` @type ^`boolean` @kind boolean;
  #L44d28c.  if v0 == 0 then goto L44d298;
  #L44d290.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44d296.  return @kind void;
  #L44d298.  v0:= 1I;
  #L44d29a.  v5.`io.reactivex.internal.operators.parallel.ParallelPeek$a.d` @type ^`boolean` := v0 @kind boolean;
  #L44d29e.  v1:= v5.`io.reactivex.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` @kind object;
  #L44d2a2.  v1:= v1.`io.reactivex.internal.operators.parallel.ParallelPeek.d` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L44d2a6.  call `accept`(v1, v6) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L44d2ac.  goto L44d2d2;
  #L44d2ae.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44d2b0.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44d2b6.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L44d2ba.  v3:= 2I;
  #L44d2bc.  v3:= new `java.lang.Throwable`[v3];
  #L44d2c0.  v4:= 0I;
  #L44d2c2.  v3[v4]:= v6 @kind object;
  #L44d2c6.  v3[v0]:= v1 @kind object;
  #L44d2ca.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L44d2d0.  v6:= v2 @kind object;
  #L44d2d2.  v0:= v5.`io.reactivex.internal.operators.parallel.ParallelPeek$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44d2d6.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44d2dc.  v6:= v5.`io.reactivex.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` @kind object;
  #L44d2e0.  v6:= v6.`io.reactivex.internal.operators.parallel.ParallelPeek.f` @type ^`io.reactivex.functions.Action` @kind object;
  #L44d2e4.  call `run`(v6) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L44d2ea.  goto L44d2fa;
  #L44d2ec.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44d2ee.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44d2f4.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44d2fa.  return @kind void;
  catch `java.lang.Throwable` @[L44d29e..L44d2ac] goto L44d2ae;
  catch `java.lang.Throwable` @[L44d2dc..L44d2ea] goto L44d2ec;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelPeek$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44d324.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelPeek$a.d` @type ^`boolean` @kind boolean;
  #L44d328.  if v0 != 0 then goto L44d372;
  #L44d32c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` @kind object;
  #L44d330.  v0:= v0.`io.reactivex.internal.operators.parallel.ParallelPeek.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L44d334.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L44d33a.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelPeek$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44d33e.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44d344.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` @kind object;
  #L44d348.  v0:= v0.`io.reactivex.internal.operators.parallel.ParallelPeek.c` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L44d34c.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L44d352.  goto L44d372;
  #L44d354.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44d356.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44d35c.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44d362.  goto L44d372;
  #L44d364.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44d366.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44d36c.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44d372.  return @kind void;
  catch `java.lang.Throwable` @[L44d32c..L44d33a] goto L44d364;
  catch `java.lang.Throwable` @[L44d344..L44d352] goto L44d354;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelPeek$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44d39c.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelPeek$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44d3a0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44d3a6.  v0:= temp;
  #L44d3a8.  if v0 == 0 then goto L44d3ec;
  #L44d3ac.  v2.`io.reactivex.internal.operators.parallel.ParallelPeek$a.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L44d3b0.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` @kind object;
  #L44d3b4.  v0:= v0.`io.reactivex.internal.operators.parallel.ParallelPeek.g` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L44d3b8.  call `accept`(v0, v3) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L44d3be.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelPeek$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44d3c2.  call `onSubscribe`(v3, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44d3c8.  goto L44d3ec;
  #L44d3ca.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44d3cc.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44d3d2.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44d3d8.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelPeek$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44d3dc.  v1:= `@@io.reactivex.internal.subscriptions.EmptySubscription.INSTANCE` @type ^`io.reactivex.internal.subscriptions.EmptySubscription` @kind object;
  #L44d3e0.  call `onSubscribe`(v3, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44d3e6.  call `onError`(v2, v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44d3ec.  return @kind void;
  catch `java.lang.Throwable` @[L44d3b0..L44d3be] goto L44d3ca;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelPeek$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44d40c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` @kind object;
  #L44d410.  v0:= v0.`io.reactivex.internal.operators.parallel.ParallelPeek.h` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L44d414.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/LongConsumer;.accept:(J)V` @kind interface;
  #L44d41a.  goto L44d42a;
  #L44d41c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44d41e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44d424.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44d42a.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelPeek$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44d42e.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44d434.  return @kind void;
  catch `java.lang.Throwable` @[L44d40c..L44d41a] goto L44d41c;
}
