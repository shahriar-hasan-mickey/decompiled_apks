record `io.reactivex.internal.operators.parallel.ParallelReduce` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.parallel.ParallelFlowable` @kind class {
  `io.reactivex.parallel.ParallelFlowable` `io.reactivex.internal.operators.parallel.ParallelReduce.a` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.parallel.ParallelReduce.b` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.parallel.ParallelReduce.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelReduce` v0 @kind this, `io.reactivex.parallel.ParallelFlowable` v1 @kind object, `java.util.concurrent.Callable` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduce;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L44db2c.  call `<init>`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L44db32.  v0.`io.reactivex.internal.operators.parallel.ParallelReduce.a` @type ^`io.reactivex.parallel.ParallelFlowable` := v1 @kind object;
  #L44db36.  v0.`io.reactivex.internal.operators.parallel.ParallelReduce.b` @type ^`java.util.concurrent.Callable` := v2 @kind object;
  #L44db3a.  v0.`io.reactivex.internal.operators.parallel.ParallelReduce.c` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L44db3e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.parallel.ParallelReduce` v3 @kind this, `org.reactivestreams.Subscriber`[] v4 @kind object, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduce;.a:([Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L44db50.  v0:= length @variable v4;
  #L44db52.  v1:= 0I;
  #L44db54.  if v1 >= v0 then goto L44db68;
  #L44db58.  v2:= v4[v1] @kind object;
  #L44db5c.  call `error`(v5, v2) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L44db62.  v1:= v1 + 1;
  #L44db66.  goto L44db54;
  #L44db68.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.internal.operators.parallel.ParallelReduce` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduce;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44db0c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelReduce.a` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L44db10.  call temp:= `parallelism`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L44db16.  v0:= temp;
  #L44db18.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.parallel.ParallelReduce` v7 @kind this, `org.reactivestreams.Subscriber`[] v8 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduce;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L44db7c.  call temp:= `validate`(v7, v8) @signature `Lio/reactivex/parallel/ParallelFlowable;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L44db82.  v0:= temp;
  #L44db84.  if v0 != 0 then goto L44db8a;
  #L44db88.  return @kind void;
  #L44db8a.  v0:= length @variable v8;
  #L44db8c.  v1:= new `org.reactivestreams.Subscriber`[v0];
  #L44db90.  v2:= 0I;
  #L44db92.  if v2 >= v0 then goto L44dbda;
  #L44db96.  v3:= v7.`io.reactivex.internal.operators.parallel.ParallelReduce.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L44db9a.  call temp:= `call`(v3) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L44dba0.  v3:= temp @kind object;
  #L44dba2.  v4:= "The initialSupplier returned a null value" @kind object;
  #L44dba6.  call temp:= `requireNonNull`(v3, v4) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44dbac.  v3:= temp @kind object;
  #L44dbae.  v4:= new `io.reactivex.internal.operators.parallel.ParallelReduce$a`;
  #L44dbb2.  v5:= v8[v2] @kind object;
  #L44dbb6.  v6:= v7.`io.reactivex.internal.operators.parallel.ParallelReduce.c` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L44dbba.  call `<init>`(v4, v5, v3, v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduce$a;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L44dbc0.  v1[v2]:= v4 @kind object;
  #L44dbc4.  v2:= v2 + 1;
  #L44dbc8.  goto L44db92;
  #L44dbca.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44dbcc.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44dbd2.  call `a`(v7, v8, v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduce;.a:([Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V` @kind virtual;
  #L44dbd8.  return @kind void;
  #L44dbda.  v8:= v7.`io.reactivex.internal.operators.parallel.ParallelReduce.a` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L44dbde.  call `subscribe`(v8, v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L44dbe4.  return @kind void;
  catch `java.lang.Throwable` @[L44db96..L44dbae] goto L44dbca;
}
