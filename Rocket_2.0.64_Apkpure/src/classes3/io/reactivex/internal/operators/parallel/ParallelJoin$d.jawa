record `io.reactivex.internal.operators.parallel.ParallelJoin$d` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.parallel.ParallelJoin$c` @kind class {
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelJoin$d.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelJoin$d` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$d;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44c0fc.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @kind direct;
  #L44c102.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.parallel.ParallelJoin$d` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$d;.c:()V` @AccessFlag  {
    temp;
    v0;

  #L44c114.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44c11a.  v0:= temp;
  #L44c11c.  if v0 == 0 then goto L44c122;
  #L44c120.  return @kind void;
  #L44c122.  call `g`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$d;.g:()V` @kind virtual;
  #L44c128.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.parallel.ParallelJoin$d` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$d;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L44c2f8.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L44c2fc.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L44c302.  call `c`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$d;.c:()V` @kind virtual;
  #L44c308.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.parallel.ParallelJoin$d` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$d;.e:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L44c31c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44c320.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L44c326.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L44c32a.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L44c330.  call `c`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$d;.c:()V` @kind virtual;
  #L44c336.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.parallel.ParallelJoin$d` v6 @kind this, `io.reactivex.internal.operators.parallel.ParallelJoin$a` v7 @kind object, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$d;.f:(Lio/reactivex/internal/operators/parallel/ParallelJoin$a;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L44c348.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L44c34e.  v0:= temp;
  #L44c350.  v1:= "Queue full?!" @kind object;
  #L44c354.  if v0 != 0 then goto L44c40c;
  #L44c358.  v0:= 0I;
  #L44c35a.  v2:= 1I;
  #L44c35c.  call temp:= `compareAndSet`(v6, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L44c362.  v0:= temp;
  #L44c364.  if v0 == 0 then goto L44c40c;
  #L44c368.  v0:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44c36c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L44c372.  v2:= temp @kind wide;
  #L44c374.  v4:= 0L;
  #L44c378.  v0:= lcmp(v2, v4);
  #L44c37c.  if v0 == 0 then goto L44c3be;
  #L44c380.  v0:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44c384.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44c38a.  v8:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44c38e.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L44c394.  v0:= temp @kind wide;
  #L44c396.  v2:= 9223372036854775807L;
  #L44c3a0.  v8:= lcmp(v0, v2);
  #L44c3a4.  if v8 == 0 then goto L44c3b2;
  #L44c3a8.  v8:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44c3ac.  call temp:= `decrementAndGet`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L44c3b2.  v0:= 1L;
  #L44c3b6.  call `c`(v7, v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.c:(J)V` @kind virtual;
  #L44c3bc.  goto L44c3fe;
  #L44c3be.  call temp:= `b`(v7) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.b:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L44c3c4.  v0:= temp @kind object;
  #L44c3c6.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L44c3cc.  v8:= temp;
  #L44c3ce.  if v8 != 0 then goto L44c3fe;
  #L44c3d2.  call temp:= `a`(v7) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.a:()Z` @kind virtual;
  #L44c3d8.  v7:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44c3dc.  v8:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L44c3e0.  call `<init>`(v8, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44c3e6.  call temp:= `addThrowable`(v7, v8) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L44c3ec.  v7:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L44c3f0.  call temp:= `decrementAndGet`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L44c3f6.  call `g`(v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$d;.g:()V` @kind virtual;
  #L44c3fc.  return @kind void;
  #L44c3fe.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L44c404.  v7:= temp;
  #L44c406.  if v7 != 0 then goto L44c458;
  #L44c40a.  return @kind void;
  #L44c40c.  call temp:= `b`(v7) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.b:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L44c412.  v0:= temp @kind object;
  #L44c414.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L44c41a.  v8:= temp;
  #L44c41c.  if v8 != 0 then goto L44c44a;
  #L44c420.  call temp:= `a`(v7) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.a:()Z` @kind virtual;
  #L44c426.  v7:= temp;
  #L44c428.  if v7 == 0 then goto L44c44a;
  #L44c42c.  v7:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44c430.  v8:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L44c434.  call `<init>`(v8, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44c43a.  call temp:= `addThrowable`(v7, v8) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L44c440.  v7:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L44c444.  call temp:= `decrementAndGet`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L44c44a.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44c450.  v7:= temp;
  #L44c452.  if v7 == 0 then goto L44c458;
  #L44c456.  return @kind void;
  #L44c458.  call `g`(v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$d;.g:()V` @kind virtual;
  #L44c45e.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.parallel.ParallelJoin$d` v18 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$d;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L44c13c.  v0:= v18 @kind object;
  #L44c140.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.b` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$a`[] @kind object;
  #L44c144.  v2:= length @variable v1;
  #L44c146.  v3:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44c14a.  v5:= 1I;
  #L44c14c.  v6:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44c150.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L44c156.  v6:= temp @kind wide;
  #L44c158.  v8:= 0L;
  #L44c15c.  v10:= v8 @kind wide;
  #L44c15e.  v13:= lcmp(v10, v6);
  #L44c162.  if v13 == 0 then goto L44c20e;
  #L44c166.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.e` @type ^`boolean` @kind boolean;
  #L44c16a.  if v13 == 0 then goto L44c176;
  #L44c16e.  call `b`(v18) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.b:()V` @kind virtual;
  #L44c174.  return @kind void;
  #L44c176.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L44c17a.  call temp:= `get`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L44c180.  v13:= temp;
  #L44c182.  if v13 != 0 then goto L44c18a;
  #L44c186.  v13:= 1I;
  #L44c188.  goto L44c18c;
  #L44c18a.  v13:= 0I;
  #L44c18c.  v14:= 0I;
  #L44c18e.  v15:= 1I;
  #L44c190.  if v14 >= v2 then goto L44c1d2;
  #L44c194.  v4:= v1[v14] @kind object;
  #L44c198.  v12:= v4.`io.reactivex.internal.operators.parallel.ParallelJoin$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L44c19c.  if v12 == 0 then goto L44c1cc;
  #L44c1a0.  call temp:= `poll`(v12) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L44c1a6.  v12:= temp @kind object;
  #L44c1a8.  if v12 == 0 then goto L44c1cc;
  #L44c1ac.  call `onNext`(v3, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44c1b2.  call `d`(v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.d:()V` @kind virtual;
  #L44c1b8.  v16:= 1L;
  #L44c1bc.  v10:= v10 + v16 @kind long;
  #L44c1c0.  v4:= lcmp(v10, v6);
  #L44c1c4.  if v4 != 0 then goto L44c1ca;
  #L44c1c8.  goto L44c20e;
  #L44c1ca.  v15:= 0I;
  #L44c1cc.  v14:= v14 + 1;
  #L44c1d0.  goto L44c190;
  #L44c1d2.  if v13 == 0 then goto L44c20a;
  #L44c1d6.  if v15 == 0 then goto L44c20a;
  #L44c1da.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44c1de.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c1e4.  v1:= temp @kind object;
  #L44c1e6.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L44c1ea.  if v1 == 0 then goto L44c202;
  #L44c1ee.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44c1f2.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L44c1f8.  v1:= temp @kind object;
  #L44c1fa.  call `onError`(v3, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44c200.  goto L44c208;
  #L44c202.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44c208.  return @kind void;
  #L44c20a.  if v15 == 0 then goto L44c15e;
  #L44c20e.  v4:= lcmp(v10, v6);
  #L44c212.  if v4 != 0 then goto L44c29e;
  #L44c216.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.e` @type ^`boolean` @kind boolean;
  #L44c21a.  if v4 == 0 then goto L44c226;
  #L44c21e.  call `b`(v18) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.b:()V` @kind virtual;
  #L44c224.  return @kind void;
  #L44c226.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L44c22a.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L44c230.  v4:= temp;
  #L44c232.  if v4 != 0 then goto L44c23a;
  #L44c236.  v4:= 1I;
  #L44c238.  goto L44c23c;
  #L44c23a.  v4:= 0I;
  #L44c23c.  v12:= 0I;
  #L44c23e.  if v12 >= v2 then goto L44c264;
  #L44c242.  v13:= v1[v12] @kind object;
  #L44c246.  v13:= v13.`io.reactivex.internal.operators.parallel.ParallelJoin$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L44c24a.  if v13 == 0 then goto L44c25e;
  #L44c24e.  call temp:= `isEmpty`(v13) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L44c254.  v13:= temp;
  #L44c256.  if v13 != 0 then goto L44c25e;
  #L44c25a.  v12:= 0I;
  #L44c25c.  goto L44c266;
  #L44c25e.  v12:= v12 + 1;
  #L44c262.  goto L44c23e;
  #L44c264.  v12:= 1I;
  #L44c266.  if v4 == 0 then goto L44c29e;
  #L44c26a.  if v12 == 0 then goto L44c29e;
  #L44c26e.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44c272.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c278.  v1:= temp @kind object;
  #L44c27a.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L44c27e.  if v1 == 0 then goto L44c296;
  #L44c282.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44c286.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L44c28c.  v1:= temp @kind object;
  #L44c28e.  call `onError`(v3, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44c294.  goto L44c29c;
  #L44c296.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44c29c.  return @kind void;
  #L44c29e.  v4:= lcmp(v10, v8);
  #L44c2a2.  if v4 == 0 then goto L44c2c4;
  #L44c2a6.  v8:= 9223372036854775807L;
  #L44c2b0.  v4:= lcmp(v6, v8);
  #L44c2b4.  if v4 == 0 then goto L44c2c4;
  #L44c2b8.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44c2bc.  v6:= -v10 @kind long;
  #L44c2be.  call temp:= `addAndGet`(v4, v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L44c2c4.  call temp:= `get`(v18) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L44c2ca.  v4:= temp;
  #L44c2cc.  if v4 != v5 then goto L44c2e0;
  #L44c2d0.  v4:= -v5 @kind int;
  #L44c2d2.  call temp:= `addAndGet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L44c2d8.  v4:= temp;
  #L44c2da.  if v4 != 0 then goto L44c2e0;
  #L44c2de.  return @kind void;
  #L44c2e0.  v5:= v4;
  #L44c2e2.  goto L44c14c;
}
