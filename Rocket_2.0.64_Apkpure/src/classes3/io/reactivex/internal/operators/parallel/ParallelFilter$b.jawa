record `io.reactivex.internal.operators.parallel.ParallelFilter$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.parallel.ParallelFilter$a` @kind class {
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.parallel.ParallelFilter$b.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelFilter$b` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$b;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44af0c.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$a;.<init>:(Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L44af12.  v0.`io.reactivex.internal.operators.parallel.ParallelFilter$b.d` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L44af16.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelFilter$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44af28.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` @kind boolean;
  #L44af2c.  if v0 != 0 then goto L44af40;
  #L44af30.  v0:= 1I;
  #L44af32.  v1.`io.reactivex.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` := v0 @kind boolean;
  #L44af36.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter$b.d` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L44af3a.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44af40.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelFilter$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44af54.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` @kind boolean;
  #L44af58.  if v0 == 0 then goto L44af64;
  #L44af5c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44af62.  return @kind void;
  #L44af64.  v0:= 1I;
  #L44af66.  v1.`io.reactivex.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` := v0 @kind boolean;
  #L44af6a.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter$b.d` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L44af6e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44af74.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelFilter$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44af88.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44af8c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44af92.  v0:= temp;
  #L44af94.  if v0 == 0 then goto L44afa6;
  #L44af98.  v1.`io.reactivex.internal.operators.parallel.ParallelFilter$a.b` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L44af9c.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter$b.d` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L44afa0.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44afa6.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.parallel.ParallelFilter$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$b;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44aeb0.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` @kind boolean;
  #L44aeb4.  v1:= 0I;
  #L44aeb6.  if v0 != 0 then goto L44aeec;
  #L44aeba.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelFilter$a.a` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L44aebe.  call temp:= `test`(v0, v3) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L44aec4.  v0:= temp;
  #L44aec6.  if v0 == 0 then goto L44aeec;
  #L44aeca.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelFilter$b.d` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L44aece.  call temp:= `tryOnNext`(v0, v3) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L44aed4.  v3:= temp;
  #L44aed6.  return v3;
  #L44aed8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44aeda.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44aee0.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$a;.cancel:()V` @kind virtual;
  #L44aee6.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44aeec.  return v1;
  catch `java.lang.Throwable` @[L44aeba..L44aec6] goto L44aed8;
}
