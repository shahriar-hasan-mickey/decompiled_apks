record `io.reactivex.internal.operators.parallel.ParallelFilter$a` @kind class @AccessFlag ABSTRACT extends `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.parallel.ParallelFilter$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.parallel.ParallelFilter$a.b` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelFilter$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelFilter$a` v0 @kind this, `io.reactivex.functions.Predicate` v1 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$a;.<init>:(Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44ae28.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44ae2e.  v0.`io.reactivex.internal.operators.parallel.ParallelFilter$a.a` @type ^`io.reactivex.functions.Predicate` := v1 @kind object;
  #L44ae32.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelFilter$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$a;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44ae44.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44ae48.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44ae4e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelFilter$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L44ae60.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L44ae66.  v3:= temp;
  #L44ae68.  if v3 != 0 then goto L44ae82;
  #L44ae6c.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` @kind boolean;
  #L44ae70.  if v3 != 0 then goto L44ae82;
  #L44ae74.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelFilter$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44ae78.  v0:= 1L;
  #L44ae7c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44ae82.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelFilter$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$a;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44ae94.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44ae98.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44ae9e.  return @kind void;
}
