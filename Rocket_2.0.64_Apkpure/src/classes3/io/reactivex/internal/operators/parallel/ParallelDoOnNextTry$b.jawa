record `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.b` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44aa44.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44aa4a.  v0.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L44aa4e.  v0.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.b` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L44aa52.  v0.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.c` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L44aa56.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44aa68.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44aa6c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44aa72.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44aa84.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.e` @type ^`boolean` @kind boolean;
  #L44aa88.  if v0 == 0 then goto L44aa8e;
  #L44aa8c.  return @kind void;
  #L44aa8e.  v0:= 1I;
  #L44aa90.  v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.e` @type ^`boolean` := v0 @kind boolean;
  #L44aa94.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L44aa98.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44aa9e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44aab0.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.e` @type ^`boolean` @kind boolean;
  #L44aab4.  if v0 == 0 then goto L44aac0;
  #L44aab8.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44aabe.  return @kind void;
  #L44aac0.  v0:= 1I;
  #L44aac2.  v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.e` @type ^`boolean` := v0 @kind boolean;
  #L44aac6.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L44aaca.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44aad0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44aae4.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L44aaea.  v3:= temp;
  #L44aaec.  if v3 != 0 then goto L44ab06;
  #L44aaf0.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.e` @type ^`boolean` @kind boolean;
  #L44aaf4.  if v3 != 0 then goto L44ab06;
  #L44aaf8.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44aafc.  v0:= 1L;
  #L44ab00.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44ab06.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44ab18.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44ab1c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44ab22.  v0:= temp;
  #L44ab24.  if v0 == 0 then goto L44ab36;
  #L44ab28.  v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.d` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L44ab2c.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L44ab30.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44ab36.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44ab48.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44ab4c.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44ab52.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L44a958.  v0:= v9.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.e` @type ^`boolean` @kind boolean;
  #L44a95c.  v1:= 0I;
  #L44a95e.  if v0 == 0 then goto L44a964;
  #L44a962.  return v1;
  #L44a964.  v2:= 0L;
  #L44a968.  v0:= v9.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L44a96c.  call `accept`(v0, v10) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L44a972.  v0:= v9.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L44a976.  call temp:= `tryOnNext`(v0, v10) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L44a97c.  v10:= temp;
  #L44a97e.  return v10;
  #L44a980.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44a982.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44a988.  v4:= 1I;
  #L44a98a.  v5:= 2I;
  #L44a98c.  v6:= v9.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.c` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L44a990.  v7:= 1L;
  #L44a994.  v2:= v2 + v7 @kind long;
  #L44a996.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L44a99c.  v7:= temp @kind object;
  #L44a99e.  call temp:= `apply`(v6, v7, v0) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L44a9a4.  v6:= temp @kind object;
  #L44a9a6.  v7:= "The errorHandler returned a null item" @kind object;
  #L44a9aa.  call temp:= `requireNonNull`(v6, v7) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44a9b0.  v6:= temp @kind object;
  #L44a9b2.  v6:= (`io.reactivex.parallel.ParallelFailureHandling`) v6 @kind object;
  #L44a9b6.  v7:= `@@io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$a.a` @type ^`int`[] @kind object;
  #L44a9ba.  call temp:= `ordinal`(v6) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L44a9c0.  v6:= temp;
  #L44a9c2.  v6:= v7[v6];
  #L44a9c6.  if v6 == v4 then goto L44a968;
  #L44a9ca.  if v6 == v5 then goto L44a9ee;
  #L44a9ce.  v10:= 3I;
  #L44a9d0.  if v6 == v10 then goto L44a9e2;
  #L44a9d4.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.cancel:()V` @kind virtual;
  #L44a9da.  call `onError`(v9, v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44a9e0.  return v1;
  #L44a9e2.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.cancel:()V` @kind virtual;
  #L44a9e8.  call `onComplete`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.onComplete:()V` @kind virtual;
  #L44a9ee.  return v1;
  #L44a9f0.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44a9f2.  call `throwIfFatal`(v10) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44a9f8.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.cancel:()V` @kind virtual;
  #L44a9fe.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L44aa02.  v3:= new `java.lang.Throwable`[v5];
  #L44aa06.  v3[v1]:= v0 @kind object;
  #L44aa0a.  v3[v4]:= v10 @kind object;
  #L44aa0e.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L44aa14.  call `onError`(v9, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44aa1a.  return v1;
  catch `java.lang.Throwable` @[L44a968..L44a972] goto L44a980;
  catch `java.lang.Throwable` @[L44a98c..L44a9b6] goto L44a9f0;
}
