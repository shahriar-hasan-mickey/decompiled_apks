record `io.reactivex.internal.operators.parallel.ParallelJoin` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Flowable` @kind class {
  `io.reactivex.parallel.ParallelFlowable` `io.reactivex.internal.operators.parallel.ParallelJoin.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelJoin.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelJoin.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelJoin` v0 @kind this, `io.reactivex.parallel.ParallelFlowable` v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin;.<init>:(Lio/reactivex/parallel/ParallelFlowable;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L44c7ec.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L44c7f2.  v0.`io.reactivex.internal.operators.parallel.ParallelJoin.b` @type ^`io.reactivex.parallel.ParallelFlowable` := v1 @kind object;
  #L44c7f6.  v0.`io.reactivex.internal.operators.parallel.ParallelJoin.c` @type ^`int` := v2;
  #L44c7fa.  v0.`io.reactivex.internal.operators.parallel.ParallelJoin.d` @type ^`boolean` := v3 @kind boolean;
  #L44c7fe.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.parallel.ParallelJoin` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L44c810.  v0:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin.d` @type ^`boolean` @kind boolean;
  #L44c814.  if v0 == 0 then goto L44c834;
  #L44c818.  v0:= new `io.reactivex.internal.operators.parallel.ParallelJoin$d`;
  #L44c81c.  v1:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin.b` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L44c820.  call temp:= `parallelism`(v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L44c826.  v1:= temp;
  #L44c828.  v2:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin.c` @type ^`int`;
  #L44c82c.  call `<init>`(v0, v4, v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$d;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @kind direct;
  #L44c832.  goto L44c84e;
  #L44c834.  v0:= new `io.reactivex.internal.operators.parallel.ParallelJoin$b`;
  #L44c838.  v1:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin.b` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L44c83c.  call temp:= `parallelism`(v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L44c842.  v1:= temp;
  #L44c844.  v2:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin.c` @type ^`int`;
  #L44c848.  call `<init>`(v0, v4, v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$b;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @kind direct;
  #L44c84e.  call `onSubscribe`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44c854.  v4:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin.b` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L44c858.  v0:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.b` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$a`[] @kind object;
  #L44c85c.  call `subscribe`(v4, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L44c862.  return @kind void;
}
