record `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.a` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.b` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44ac50.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44ac56.  v0.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L44ac5a.  v0.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.b` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L44ac5e.  v0.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.c` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L44ac62.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44ac74.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44ac78.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44ac7e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44ac90.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.e` @type ^`boolean` @kind boolean;
  #L44ac94.  if v0 == 0 then goto L44ac9a;
  #L44ac98.  return @kind void;
  #L44ac9a.  v0:= 1I;
  #L44ac9c.  v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.e` @type ^`boolean` := v0 @kind boolean;
  #L44aca0.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44aca4.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44acaa.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44acbc.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.e` @type ^`boolean` @kind boolean;
  #L44acc0.  if v0 == 0 then goto L44accc;
  #L44acc4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44acca.  return @kind void;
  #L44accc.  v0:= 1I;
  #L44acce.  v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.e` @type ^`boolean` := v0 @kind boolean;
  #L44acd2.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44acd6.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44acdc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44acf0.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L44acf6.  v3:= temp;
  #L44acf8.  if v3 != 0 then goto L44ad0a;
  #L44acfc.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44ad00.  v0:= 1L;
  #L44ad04.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44ad0a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44ad1c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44ad20.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44ad26.  v0:= temp;
  #L44ad28.  if v0 == 0 then goto L44ad3a;
  #L44ad2c.  v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.d` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L44ad30.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44ad34.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44ad3a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44ad4c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44ad50.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44ad56.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L44ab64.  v0:= v9.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.e` @type ^`boolean` @kind boolean;
  #L44ab68.  v1:= 0I;
  #L44ab6a.  if v0 == 0 then goto L44ab70;
  #L44ab6e.  return v1;
  #L44ab70.  v2:= 0L;
  #L44ab74.  v0:= 1I;
  #L44ab76.  v4:= v9.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L44ab7a.  call `accept`(v4, v10) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L44ab80.  v1:= v9.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44ab84.  call `onNext`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44ab8a.  return v0;
  #L44ab8c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44ab8e.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44ab94.  v5:= 2I;
  #L44ab96.  v6:= v9.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.c` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L44ab9a.  v7:= 1L;
  #L44ab9e.  v2:= v2 + v7 @kind long;
  #L44aba0.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L44aba6.  v7:= temp @kind object;
  #L44aba8.  call temp:= `apply`(v6, v7, v4) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L44abae.  v6:= temp @kind object;
  #L44abb0.  v7:= "The errorHandler returned a null item" @kind object;
  #L44abb4.  call temp:= `requireNonNull`(v6, v7) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44abba.  v6:= temp @kind object;
  #L44abbc.  v6:= (`io.reactivex.parallel.ParallelFailureHandling`) v6 @kind object;
  #L44abc0.  v7:= `@@io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$a.a` @type ^`int`[] @kind object;
  #L44abc4.  call temp:= `ordinal`(v6) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L44abca.  v6:= temp;
  #L44abcc.  v6:= v7[v6];
  #L44abd0.  if v6 == v0 then goto L44ab74;
  #L44abd4.  if v6 == v5 then goto L44abf8;
  #L44abd8.  v10:= 3I;
  #L44abda.  if v6 == v10 then goto L44abec;
  #L44abde.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.cancel:()V` @kind virtual;
  #L44abe4.  call `onError`(v9, v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44abea.  return v1;
  #L44abec.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.cancel:()V` @kind virtual;
  #L44abf2.  call `onComplete`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.onComplete:()V` @kind virtual;
  #L44abf8.  return v1;
  #L44abfa.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44abfc.  call `throwIfFatal`(v10) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44ac02.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.cancel:()V` @kind virtual;
  #L44ac08.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L44ac0c.  v3:= new `java.lang.Throwable`[v5];
  #L44ac10.  v3[v1]:= v4 @kind object;
  #L44ac14.  v3[v0]:= v10 @kind object;
  #L44ac18.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L44ac1e.  call `onError`(v9, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44ac24.  return v1;
  catch `java.lang.Throwable` @[L44ab76..L44ab80] goto L44ab8c;
  catch `java.lang.Throwable` @[L44ab96..L44abc0] goto L44abfa;
}
