record `io.reactivex.internal.operators.completable.CompletableConcat$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.completable.CompletableConcat$a.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.completable.CompletableConcat$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.completable.CompletableConcat$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.operators.completable.CompletableConcat$a$a` `io.reactivex.internal.operators.completable.CompletableConcat$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.completable.CompletableConcat$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.completable.CompletableConcat$a.f` @AccessFlag ;
  `int` `io.reactivex.internal.operators.completable.CompletableConcat$a.g` @AccessFlag ;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.completable.CompletableConcat$a.h` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.completable.CompletableConcat$a.i` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.completable.CompletableConcat$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.completable.CompletableConcat$a.k` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableConcat$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableConcat$a` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.<init>:(Lio/reactivex/CompletableObserver;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L406264.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L40626a.  v0.`io.reactivex.internal.operators.completable.CompletableConcat$a.a` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L40626e.  v0.`io.reactivex.internal.operators.completable.CompletableConcat$a.b` @type ^`int` := v2;
  #L406272.  v1:= new `io.reactivex.internal.operators.completable.CompletableConcat$a$a`;
  #L406276.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a$a;.<init>:(Lio/reactivex/internal/operators/completable/CompletableConcat$a;)V` @kind direct;
  #L40627c.  v0.`io.reactivex.internal.operators.completable.CompletableConcat$a.d` @type ^`io.reactivex.internal.operators.completable.CompletableConcat$a$a` := v1 @kind object;
  #L406280.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L406284.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L40628a.  v0.`io.reactivex.internal.operators.completable.CompletableConcat$a.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L40628e.  v1:= v2 ^> 2;
  #L406292.  v2:= v2 - v1 @kind int;
  #L406294.  v0.`io.reactivex.internal.operators.completable.CompletableConcat$a.c` @type ^`int` := v2;
  #L406298.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.completable.CompletableConcat$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4062d4.  call temp:= `getAndIncrement`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4062da.  v0:= temp;
  #L4062dc.  if v0 == 0 then goto L4062e2;
  #L4062e0.  return @kind void;
  #L4062e2.  call temp:= `isDisposed`(v5) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.isDisposed:()Z` @kind virtual;
  #L4062e8.  v0:= temp;
  #L4062ea.  if v0 == 0 then goto L4062f0;
  #L4062ee.  return @kind void;
  #L4062f0.  v0:= v5.`io.reactivex.internal.operators.completable.CompletableConcat$a.k` @type ^`boolean` @kind boolean;
  #L4062f4.  if v0 != 0 then goto L406368;
  #L4062f8.  v0:= v5.`io.reactivex.internal.operators.completable.CompletableConcat$a.j` @type ^`boolean` @kind boolean;
  #L4062fc.  v1:= v5.`io.reactivex.internal.operators.completable.CompletableConcat$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L406300.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L406306.  v1:= temp @kind object;
  #L406308.  v1:= (`io.reactivex.CompletableSource`) v1 @kind object;
  #L40630c.  v2:= 0I;
  #L40630e.  v3:= 1I;
  #L406310.  if v1 != 0 then goto L406318;
  #L406314.  v4:= 1I;
  #L406316.  goto L40631a;
  #L406318.  v4:= 0I;
  #L40631a.  if v0 == 0 then goto L40633e;
  #L40631e.  if v4 == 0 then goto L40633e;
  #L406322.  v0:= v5.`io.reactivex.internal.operators.completable.CompletableConcat$a.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L406326.  call temp:= `compareAndSet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L40632c.  v0:= temp;
  #L40632e.  if v0 == 0 then goto L40633c;
  #L406332.  v0:= v5.`io.reactivex.internal.operators.completable.CompletableConcat$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L406336.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L40633c.  return @kind void;
  #L40633e.  if v4 != 0 then goto L406368;
  #L406342.  v5.`io.reactivex.internal.operators.completable.CompletableConcat$a.k` @type ^`boolean` := v3 @kind boolean;
  #L406346.  v0:= v5.`io.reactivex.internal.operators.completable.CompletableConcat$a.d` @type ^`io.reactivex.internal.operators.completable.CompletableConcat$a$a` @kind object;
  #L40634a.  call `subscribe`(v1, v0) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L406350.  call `e`(v5) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.e:()V` @kind virtual;
  #L406356.  goto L406368;
  #L406358.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40635a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L406360.  call `c`(v5, v0) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.c:(Ljava/lang/Throwable;)V` @kind virtual;
  #L406366.  return @kind void;
  #L406368.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L40636e.  v0:= temp;
  #L406370.  if v0 != 0 then goto L4062e2;
  #L406374.  return @kind void;
  catch `java.lang.Throwable` @[L4062fc..L40630c] goto L406358;
}
procedure `void` `b`(`io.reactivex.internal.operators.completable.CompletableConcat$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L406394.  v0:= 0I;
  #L406396.  v1.`io.reactivex.internal.operators.completable.CompletableConcat$a.k` @type ^`boolean` := v0 @kind boolean;
  #L40639a.  call `a`(v1) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.a:()V` @kind virtual;
  #L4063a0.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.completable.CompletableConcat$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.c:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4063b4.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcat$a.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4063b8.  v1:= 0I;
  #L4063ba.  v2:= 1I;
  #L4063bc.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4063c2.  v0:= temp;
  #L4063c4.  if v0 == 0 then goto L4063de;
  #L4063c8.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcat$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4063cc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4063d2.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcat$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L4063d6.  call `onError`(v0, v4) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4063dc.  goto L4063e4;
  #L4063de.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4063e4.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.completable.CompletableConcat$a` v1 @kind this, `io.reactivex.CompletableSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.d:(Lio/reactivex/CompletableSource;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40645c.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableConcat$a.f` @type ^`int`;
  #L406460.  if v0 != 0 then goto L406486;
  #L406464.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableConcat$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L406468.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L40646e.  v2:= temp;
  #L406470.  if v2 != 0 then goto L406486;
  #L406474.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L406478.  call `<init>`(v2) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L40647e.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L406484.  return @kind void;
  #L406486.  call `a`(v1) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.a:()V` @kind virtual;
  #L40648c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.completable.CompletableConcat$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4062ac.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableConcat$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4062b0.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4062b6.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableConcat$a.d` @type ^`io.reactivex.internal.operators.completable.CompletableConcat$a$a` @kind object;
  #L4062ba.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4062c0.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.completable.CompletableConcat$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40659c.  v0:= v4.`io.reactivex.internal.operators.completable.CompletableConcat$a.f` @type ^`int`;
  #L4065a0.  v1:= 1I;
  #L4065a2.  if v0 == v1 then goto L4065cc;
  #L4065a6.  v0:= v4.`io.reactivex.internal.operators.completable.CompletableConcat$a.g` @type ^`int`;
  #L4065aa.  v0:= v0 + v1 @kind int;
  #L4065ac.  v1:= v4.`io.reactivex.internal.operators.completable.CompletableConcat$a.c` @type ^`int`;
  #L4065b0.  if v0 != v1 then goto L4065c8;
  #L4065b4.  v1:= 0I;
  #L4065b6.  v4.`io.reactivex.internal.operators.completable.CompletableConcat$a.g` @type ^`int` := v1;
  #L4065ba.  v1:= v4.`io.reactivex.internal.operators.completable.CompletableConcat$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4065be.  v2:= (`long`) v0 @kind i2l;
  #L4065c0.  call `request`(v1, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4065c6.  goto L4065cc;
  #L4065c8.  v4.`io.reactivex.internal.operators.completable.CompletableConcat$a.g` @type ^`int` := v0;
  #L4065cc.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.completable.CompletableConcat$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L406238.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableConcat$a.d` @type ^`io.reactivex.internal.operators.completable.CompletableConcat$a$a` @kind object;
  #L40623c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L406242.  v0:= temp @kind object;
  #L406244.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L406248.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L40624e.  v0:= temp;
  #L406250.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableConcat$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4063f8.  v0:= 1I;
  #L4063fa.  v1.`io.reactivex.internal.operators.completable.CompletableConcat$a.j` @type ^`boolean` := v0 @kind boolean;
  #L4063fe.  call `a`(v1) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.a:()V` @kind virtual;
  #L406404.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableConcat$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L406418.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcat$a.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L40641c.  v1:= 0I;
  #L40641e.  v2:= 1I;
  #L406420.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L406426.  v0:= temp;
  #L406428.  if v0 == 0 then goto L406442;
  #L40642c.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcat$a.d` @type ^`io.reactivex.internal.operators.completable.CompletableConcat$a$a` @kind object;
  #L406430.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L406436.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcat$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L40643a.  call `onError`(v0, v4) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L406440.  goto L406448;
  #L406442.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L406448.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.completable.CompletableConcat$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4064a0.  v1:= (`io.reactivex.CompletableSource`) v1 @kind object;
  #L4064a4.  call `d`(v0, v1) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.d:(Lio/reactivex/CompletableSource;)V` @kind virtual;
  #L4064aa.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableConcat$a` v6 @kind this, `org.reactivestreams.Subscription` v7 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4064bc.  v0:= v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4064c0.  call temp:= `validate`(v0, v7) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4064c6.  v0:= temp;
  #L4064c8.  if v0 == 0 then goto L40658a;
  #L4064cc.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.i` @type ^`org.reactivestreams.Subscription` := v7 @kind object;
  #L4064d0.  v0:= v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.b` @type ^`int`;
  #L4064d4.  v1:= 2147483647I;
  #L4064da.  if v0 != v1 then goto L4064ea;
  #L4064de.  v2:= 9223372036854775807L;
  #L4064e8.  goto L4064ec;
  #L4064ea.  v2:= (`long`) v0 @kind i2l;
  #L4064ec.  v0:= instanceof @variable v7 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L4064f0.  if v0 == 0 then goto L406548;
  #L4064f4.  v0:= v7 @kind object;
  #L4064f6.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L4064fa.  v4:= 3I;
  #L4064fc.  call temp:= `requestFusion`(v0, v4) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L406502.  v4:= temp;
  #L406504.  v5:= 1I;
  #L406506.  if v4 != v5 then goto L406528;
  #L40650a.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.f` @type ^`int` := v4;
  #L40650e.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L406512.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.j` @type ^`boolean` := v5 @kind boolean;
  #L406516.  v7:= v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L40651a.  call `onSubscribe`(v7, v6) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L406520.  call `a`(v6) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.a:()V` @kind virtual;
  #L406526.  return @kind void;
  #L406528.  v5:= 2I;
  #L40652a.  if v4 != v5 then goto L406548;
  #L40652e.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.f` @type ^`int` := v4;
  #L406532.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L406536.  v0:= v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L40653a.  call `onSubscribe`(v0, v6) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L406540.  call `request`(v7, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L406546.  return @kind void;
  #L406548.  v0:= v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.b` @type ^`int`;
  #L40654c.  if v0 != v1 then goto L406568;
  #L406550.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L406554.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L40655a.  v1:= temp;
  #L40655c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L406562.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L406566.  goto L40657a;
  #L406568.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L40656c.  v1:= v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.b` @type ^`int`;
  #L406570.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L406576.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L40657a.  v0:= v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L40657e.  call `onSubscribe`(v0, v6) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L406584.  call `request`(v7, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40658a.  return @kind void;
}
