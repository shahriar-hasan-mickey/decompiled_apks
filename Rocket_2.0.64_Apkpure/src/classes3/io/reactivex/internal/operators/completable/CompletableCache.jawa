record `io.reactivex.internal.operators.completable.CompletableCache` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Completable` @kind class, `io.reactivex.CompletableObserver` @kind interface {
  `io.reactivex.CompletableSource` `io.reactivex.internal.operators.completable.CompletableCache.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.completable.CompletableCache.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.completable.CompletableCache.c` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.completable.CompletableCache.d` @AccessFlag ;
}
global `io.reactivex.internal.operators.completable.CompletableCache$a`[] `@@io.reactivex.internal.operators.completable.CompletableCache.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.completable.CompletableCache$a`[] `@@io.reactivex.internal.operators.completable.CompletableCache.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L405fb4.  v0:= 0I;
  #L405fb6.  v1:= new `io.reactivex.internal.operators.completable.CompletableCache$a`[v0];
  #L405fba.  `@@io.reactivex.internal.operators.completable.CompletableCache.e` @type ^`io.reactivex.internal.operators.completable.CompletableCache$a`[] := v1 @kind object;
  #L405fbe.  v0:= new `io.reactivex.internal.operators.completable.CompletableCache$a`[v0];
  #L405fc2.  `@@io.reactivex.internal.operators.completable.CompletableCache.f` @type ^`io.reactivex.internal.operators.completable.CompletableCache$a`[] := v0 @kind object;
  #L405fc6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableCache` v1 @kind this, `io.reactivex.CompletableSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.<init>:(Lio/reactivex/CompletableSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L405fd8.  call `<init>`(v1) @signature `Lio/reactivex/Completable;.<init>:()V` @kind direct;
  #L405fde.  v1.`io.reactivex.internal.operators.completable.CompletableCache.a` @type ^`io.reactivex.CompletableSource` := v2 @kind object;
  #L405fe2.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L405fe6.  v0:= `@@io.reactivex.internal.operators.completable.CompletableCache.e` @type ^`io.reactivex.internal.operators.completable.CompletableCache$a`[] @kind object;
  #L405fea.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L405ff0.  v1.`io.reactivex.internal.operators.completable.CompletableCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L405ff4.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L405ff8.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L405ffe.  v1.`io.reactivex.internal.operators.completable.CompletableCache.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L406002.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.internal.operators.completable.CompletableCache` v4 @kind this, `io.reactivex.internal.operators.completable.CompletableCache$a` v5 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.e:(Lio/reactivex/internal/operators/completable/CompletableCache$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L405f60.  v0:= v4.`io.reactivex.internal.operators.completable.CompletableCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L405f64.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L405f6a.  v0:= temp @kind object;
  #L405f6c.  v0:= (`io.reactivex.internal.operators.completable.CompletableCache$a`[]) v0 @kind object;
  #L405f70.  v1:= `@@io.reactivex.internal.operators.completable.CompletableCache.f` @type ^`io.reactivex.internal.operators.completable.CompletableCache$a`[] @kind object;
  #L405f74.  v2:= 0I;
  #L405f76.  if v0 != v1 then goto L405f7c;
  #L405f7a.  return v2;
  #L405f7c.  v1:= length @variable v0;
  #L405f7e.  v3:= v1 + 1;
  #L405f82.  v3:= new `io.reactivex.internal.operators.completable.CompletableCache$a`[v3];
  #L405f86.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L405f8c.  v3[v1]:= v5 @kind object;
  #L405f90.  v1:= v4.`io.reactivex.internal.operators.completable.CompletableCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L405f94.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L405f9a.  v0:= temp;
  #L405f9c.  if v0 == 0 then goto L405f60;
  #L405fa0.  v5:= 1I;
  #L405fa2.  return v5;
}
procedure `void` `f`(`io.reactivex.internal.operators.completable.CompletableCache` v6 @kind this, `io.reactivex.internal.operators.completable.CompletableCache$a` v7 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.f:(Lio/reactivex/internal/operators/completable/CompletableCache$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4060cc.  v0:= v6.`io.reactivex.internal.operators.completable.CompletableCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4060d0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4060d6.  v0:= temp @kind object;
  #L4060d8.  v0:= (`io.reactivex.internal.operators.completable.CompletableCache$a`[]) v0 @kind object;
  #L4060dc.  v1:= length @variable v0;
  #L4060de.  if v1 != 0 then goto L4060e4;
  #L4060e2.  return @kind void;
  #L4060e4.  v2:= -1I;
  #L4060e6.  v3:= 0I;
  #L4060e8.  v4:= 0I;
  #L4060ea.  if v4 >= v1 then goto L406100;
  #L4060ee.  v5:= v0[v4] @kind object;
  #L4060f2.  if v5 != v7 then goto L4060fa;
  #L4060f6.  v2:= v4;
  #L4060f8.  goto L406100;
  #L4060fa.  v4:= v4 + 1;
  #L4060fe.  goto L4060ea;
  #L406100.  if v2 >= 0 then goto L406106;
  #L406104.  return @kind void;
  #L406106.  v4:= 1I;
  #L406108.  if v1 != v4 then goto L406112;
  #L40610c.  v1:= `@@io.reactivex.internal.operators.completable.CompletableCache.e` @type ^`io.reactivex.internal.operators.completable.CompletableCache$a`[] @kind object;
  #L406110.  goto L406130;
  #L406112.  v5:= v1 + -1;
  #L406116.  v5:= new `io.reactivex.internal.operators.completable.CompletableCache$a`[v5];
  #L40611a.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L406120.  v3:= v2 + 1;
  #L406124.  v1:= v1 - v2 @kind int;
  #L406126.  v1:= v1 - v4 @kind int;
  #L406128.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L40612e.  v1:= v5 @kind object;
  #L406130.  v2:= v6.`io.reactivex.internal.operators.completable.CompletableCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L406134.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L40613a.  v0:= temp;
  #L40613c.  if v0 == 0 then goto L4060cc;
  #L406140.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableCache` v5 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L406014.  v0:= v5.`io.reactivex.internal.operators.completable.CompletableCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L406018.  v1:= `@@io.reactivex.internal.operators.completable.CompletableCache.f` @type ^`io.reactivex.internal.operators.completable.CompletableCache$a`[] @kind object;
  #L40601c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L406022.  v0:= temp @kind object;
  #L406024.  v0:= (`io.reactivex.internal.operators.completable.CompletableCache$a`[]) v0 @kind object;
  #L406028.  v1:= length @variable v0;
  #L40602a.  v2:= 0I;
  #L40602c.  if v2 >= v1 then goto L406050;
  #L406030.  v3:= v0[v2] @kind object;
  #L406034.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L40603a.  v4:= temp;
  #L40603c.  if v4 != 0 then goto L40604a;
  #L406040.  v3:= v3.`io.reactivex.internal.operators.completable.CompletableCache$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L406044.  call `onComplete`(v3) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L40604a.  v2:= v2 + 1;
  #L40604e.  goto L40602c;
  #L406050.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableCache` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L406064.  v5.`io.reactivex.internal.operators.completable.CompletableCache.d` @type ^`java.lang.Throwable` := v6 @kind object;
  #L406068.  v0:= v5.`io.reactivex.internal.operators.completable.CompletableCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40606c.  v1:= `@@io.reactivex.internal.operators.completable.CompletableCache.f` @type ^`io.reactivex.internal.operators.completable.CompletableCache$a`[] @kind object;
  #L406070.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L406076.  v0:= temp @kind object;
  #L406078.  v0:= (`io.reactivex.internal.operators.completable.CompletableCache$a`[]) v0 @kind object;
  #L40607c.  v1:= length @variable v0;
  #L40607e.  v2:= 0I;
  #L406080.  if v2 >= v1 then goto L4060a4;
  #L406084.  v3:= v0[v2] @kind object;
  #L406088.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L40608e.  v4:= temp;
  #L406090.  if v4 != 0 then goto L40609e;
  #L406094.  v3:= v3.`io.reactivex.internal.operators.completable.CompletableCache$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L406098.  call `onError`(v3, v6) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40609e.  v2:= v2 + 1;
  #L4060a2.  goto L406080;
  #L4060a4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableCache` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4060b8.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.completable.CompletableCache` v2 @kind this, `io.reactivex.CompletableObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.subscribeActual:(Lio/reactivex/CompletableObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L406154.  v0:= new `io.reactivex.internal.operators.completable.CompletableCache$a`;
  #L406158.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/completable/CompletableCache$a;.<init>:(Lio/reactivex/internal/operators/completable/CompletableCache;Lio/reactivex/CompletableObserver;)V` @kind direct;
  #L40615e.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L406164.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.e:(Lio/reactivex/internal/operators/completable/CompletableCache$a;)Z` @kind virtual;
  #L40616a.  v1:= temp;
  #L40616c.  if v1 == 0 then goto L4061a2;
  #L406170.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/operators/completable/CompletableCache$a;.isDisposed:()Z` @kind virtual;
  #L406176.  v3:= temp;
  #L406178.  if v3 == 0 then goto L406182;
  #L40617c.  call `f`(v2, v0) @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.f:(Lio/reactivex/internal/operators/completable/CompletableCache$a;)V` @kind virtual;
  #L406182.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableCache.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L406186.  v0:= 0I;
  #L406188.  v1:= 1I;
  #L40618a.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L406190.  v3:= temp;
  #L406192.  if v3 == 0 then goto L4061b8;
  #L406196.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableCache.a` @type ^`io.reactivex.CompletableSource` @kind object;
  #L40619a.  call `subscribe`(v3, v2) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L4061a0.  goto L4061b8;
  #L4061a2.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableCache.d` @type ^`java.lang.Throwable` @kind object;
  #L4061a6.  if v0 == 0 then goto L4061b2;
  #L4061aa.  call `onError`(v3, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4061b0.  goto L4061b8;
  #L4061b2.  call `onComplete`(v3) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L4061b8.  return @kind void;
}
