record `io.reactivex.internal.operators.completable.CompletableNever` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Completable` @kind class {
}
global `io.reactivex.Completable` `@@io.reactivex.internal.operators.completable.CompletableNever.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/completable/CompletableNever;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4082c8.  v0:= new `io.reactivex.internal.operators.completable.CompletableNever`;
  #L4082cc.  call `<init>`(v0) @signature `Lio/reactivex/internal/operators/completable/CompletableNever;.<init>:()V` @kind direct;
  #L4082d2.  `@@io.reactivex.internal.operators.completable.CompletableNever.INSTANCE` @type ^`io.reactivex.Completable` := v0 @kind object;
  #L4082d6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableNever` v0 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableNever;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4082e8.  call `<init>`(v0) @signature `Lio/reactivex/Completable;.<init>:()V` @kind direct;
  #L4082ee.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.completable.CompletableNever` v1 @kind this, `io.reactivex.CompletableObserver` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableNever;.subscribeActual:(Lio/reactivex/CompletableObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L408300.  v0:= `@@io.reactivex.internal.disposables.EmptyDisposable.NEVER` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L408304.  call `onSubscribe`(v2, v0) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L40830a.  return @kind void;
}
