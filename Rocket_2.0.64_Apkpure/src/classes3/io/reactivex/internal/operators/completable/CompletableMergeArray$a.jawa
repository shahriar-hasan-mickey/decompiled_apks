record `io.reactivex.internal.operators.completable.CompletableMergeArray$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.CompletableObserver` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.completable.CompletableMergeArray$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.completable.CompletableMergeArray$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.completable.CompletableMergeArray$a.c` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableMergeArray$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableMergeArray$a` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object, `java.util.concurrent.atomic.AtomicBoolean` v2 @kind object, `io.reactivex.disposables.CompositeDisposable` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeArray$a;.<init>:(Lio/reactivex/CompletableObserver;Ljava/util/concurrent/atomic/AtomicBoolean;Lio/reactivex/disposables/CompositeDisposable;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L407c1c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L407c22.  v0.`io.reactivex.internal.operators.completable.CompletableMergeArray$a.a` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L407c26.  v0.`io.reactivex.internal.operators.completable.CompletableMergeArray$a.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L407c2a.  v0.`io.reactivex.internal.operators.completable.CompletableMergeArray$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` := v3 @kind object;
  #L407c2e.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L407c34.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableMergeArray$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeArray$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L407c48.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L407c4e.  v0:= temp;
  #L407c50.  if v0 != 0 then goto L407c72;
  #L407c54.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableMergeArray$a.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L407c58.  v1:= 0I;
  #L407c5a.  v2:= 1I;
  #L407c5c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L407c62.  v0:= temp;
  #L407c64.  if v0 == 0 then goto L407c72;
  #L407c68.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableMergeArray$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L407c6c.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L407c72.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableMergeArray$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeArray$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L407c84.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableMergeArray$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L407c88.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L407c8e.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableMergeArray$a.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L407c92.  v1:= 0I;
  #L407c94.  v2:= 1I;
  #L407c96.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L407c9c.  v0:= temp;
  #L407c9e.  if v0 == 0 then goto L407cae;
  #L407ca2.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableMergeArray$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L407ca6.  call `onError`(v0, v4) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L407cac.  goto L407cb4;
  #L407cae.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L407cb4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableMergeArray$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeArray$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L407cc8.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMergeArray$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L407ccc.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L407cd2.  return @kind void;
}
