record `io.reactivex.internal.operators.completable.CompletableTimer$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.completable.CompletableTimer$a.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableTimer$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableTimer$a` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableTimer$a;.<init>:(Lio/reactivex/CompletableObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L408db8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L408dbe.  v0.`io.reactivex.internal.operators.completable.CompletableTimer$a.a` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L408dc2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.completable.CompletableTimer$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableTimer$a;.a:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag  {
    temp;

  #L408e08.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L408e0e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.completable.CompletableTimer$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableTimer$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L408dd4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L408dda.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.completable.CompletableTimer$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableTimer$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L408d90.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L408d96.  v0:= temp @kind object;
  #L408d98.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L408d9c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L408da2.  v0:= temp;
  #L408da4.  return v0;
}
procedure `void` `run`(`io.reactivex.internal.operators.completable.CompletableTimer$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableTimer$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L408dec.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableTimer$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L408df0.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L408df6.  return @kind void;
}
