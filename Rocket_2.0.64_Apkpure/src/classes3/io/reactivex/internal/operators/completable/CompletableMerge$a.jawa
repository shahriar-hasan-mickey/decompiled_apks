record `io.reactivex.internal.operators.completable.CompletableMerge$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.completable.CompletableMerge$a.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.completable.CompletableMerge$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.completable.CompletableMerge$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.completable.CompletableMerge$a.d` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.completable.CompletableMerge$a.e` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.completable.CompletableMerge$a.f` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableMerge$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableMerge$a` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$a;.<init>:(Lio/reactivex/CompletableObserver;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4078d4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4078da.  v0.`io.reactivex.internal.operators.completable.CompletableMerge$a.a` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L4078de.  v0.`io.reactivex.internal.operators.completable.CompletableMerge$a.b` @type ^`int` := v2;
  #L4078e2.  v0.`io.reactivex.internal.operators.completable.CompletableMerge$a.c` @type ^`boolean` := v3 @kind boolean;
  #L4078e6.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L4078ea.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4078f0.  v0.`io.reactivex.internal.operators.completable.CompletableMerge$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L4078f4.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L4078f8.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4078fe.  v0.`io.reactivex.internal.operators.completable.CompletableMerge$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L407902.  v1:= 1I;
  #L407904.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L40790a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.completable.CompletableMerge$a` v2 @kind this, `io.reactivex.internal.operators.completable.CompletableMerge$a$a` v3 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$a;.a:(Lio/reactivex/internal/operators/completable/CompletableMerge$a$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L407944.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L407948.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L40794e.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L407954.  v3:= temp;
  #L407956.  if v3 != 0 then goto L407986;
  #L40795a.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40795e.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L407964.  v3:= temp @kind object;
  #L407966.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L40796a.  if v3 == 0 then goto L40797a;
  #L40796e.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L407972.  call `onError`(v0, v3) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L407978.  goto L4079a2;
  #L40797a.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L40797e.  call `onComplete`(v3) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L407984.  goto L4079a2;
  #L407986.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.b` @type ^`int`;
  #L40798a.  v0:= 2147483647I;
  #L407990.  if v3 == v0 then goto L4079a2;
  #L407994.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L407998.  v0:= 1L;
  #L40799c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4079a2.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.completable.CompletableMerge$a` v2 @kind this, `io.reactivex.internal.operators.completable.CompletableMerge$a$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$a;.b:(Lio/reactivex/internal/operators/completable/CompletableMerge$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4079b4.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4079b8.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4079be.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.c` @type ^`boolean` @kind boolean;
  #L4079c2.  if v3 != 0 then goto L407a18;
  #L4079c6.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4079ca.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4079d0.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4079d4.  call `dispose`(v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4079da.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4079de.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4079e4.  v3:= temp;
  #L4079e6.  if v3 == 0 then goto L407a10;
  #L4079ea.  v3:= 0I;
  #L4079ec.  call temp:= `getAndSet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L4079f2.  v3:= temp;
  #L4079f4.  if v3 <= 0 then goto L407a70;
  #L4079f8.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L4079fc.  v4:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L407a00.  call temp:= `terminate`(v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L407a06.  v4:= temp @kind object;
  #L407a08.  call `onError`(v3, v4) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L407a0e.  goto L407a70;
  #L407a10.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L407a16.  goto L407a70;
  #L407a18.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L407a1c.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L407a22.  v3:= temp;
  #L407a24.  if v3 == 0 then goto L407a6a;
  #L407a28.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L407a2e.  v3:= temp;
  #L407a30.  if v3 != 0 then goto L407a4c;
  #L407a34.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L407a38.  v4:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L407a3c.  call temp:= `terminate`(v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L407a42.  v4:= temp @kind object;
  #L407a44.  call `onError`(v3, v4) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L407a4a.  goto L407a70;
  #L407a4c.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.b` @type ^`int`;
  #L407a50.  v4:= 2147483647I;
  #L407a56.  if v3 == v4 then goto L407a70;
  #L407a5a.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L407a5e.  v0:= 1L;
  #L407a62.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L407a68.  goto L407a70;
  #L407a6a.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L407a70.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.completable.CompletableMerge$a` v2 @kind this, `io.reactivex.CompletableSource` v3 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$a;.c:(Lio/reactivex/CompletableSource;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L407b74.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L407b7a.  v0:= new `io.reactivex.internal.operators.completable.CompletableMerge$a$a`;
  #L407b7e.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$a$a;.<init>:(Lio/reactivex/internal/operators/completable/CompletableMerge$a;)V` @kind direct;
  #L407b84.  v1:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L407b88.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L407b8e.  call `subscribe`(v3, v0) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L407b94.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.completable.CompletableMerge$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40791c.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L407920.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L407926.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L40792a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L407930.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.completable.CompletableMerge$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4078b4.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4078b8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.isDisposed:()Z` @kind virtual;
  #L4078be.  v0:= temp;
  #L4078c0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableMerge$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L407a84.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L407a8a.  v0:= temp;
  #L407a8c.  if v0 != 0 then goto L407ac6;
  #L407a90.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L407a94.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L407a9a.  v0:= temp @kind object;
  #L407a9c.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L407aa0.  if v0 == 0 then goto L407abc;
  #L407aa4.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L407aa8.  v1:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L407aac.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L407ab2.  v1:= temp @kind object;
  #L407ab4.  call `onError`(v0, v1) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L407aba.  goto L407ac6;
  #L407abc.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L407ac0.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L407ac6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableMerge$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L407ad8.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$a.c` @type ^`boolean` @kind boolean;
  #L407adc.  if v0 != 0 then goto L407b28;
  #L407ae0.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L407ae4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L407aea.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L407aee.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L407af4.  v0:= temp;
  #L407af6.  if v0 == 0 then goto L407b20;
  #L407afa.  v2:= 0I;
  #L407afc.  call temp:= `getAndSet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L407b02.  v2:= temp;
  #L407b04.  if v2 <= 0 then goto L407b62;
  #L407b08.  v2:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L407b0c.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L407b10.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L407b16.  v0:= temp @kind object;
  #L407b18.  call `onError`(v2, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L407b1e.  goto L407b62;
  #L407b20.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L407b26.  goto L407b62;
  #L407b28.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L407b2c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L407b32.  v0:= temp;
  #L407b34.  if v0 == 0 then goto L407b5c;
  #L407b38.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L407b3e.  v2:= temp;
  #L407b40.  if v2 != 0 then goto L407b62;
  #L407b44.  v2:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L407b48.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L407b4c.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L407b52.  v0:= temp @kind object;
  #L407b54.  call `onError`(v2, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L407b5a.  goto L407b62;
  #L407b5c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L407b62.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.completable.CompletableMerge$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L407ba8.  v1:= (`io.reactivex.CompletableSource`) v1 @kind object;
  #L407bac.  call `c`(v0, v1) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$a;.c:(Lio/reactivex/CompletableSource;)V` @kind virtual;
  #L407bb2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableMerge$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L407bc4.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L407bc8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L407bce.  v0:= temp;
  #L407bd0.  if v0 == 0 then goto L407c0a;
  #L407bd4.  v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.f` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L407bd8.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L407bdc.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L407be2.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.b` @type ^`int`;
  #L407be6.  v1:= 2147483647I;
  #L407bec.  if v0 != v1 then goto L407c02;
  #L407bf0.  v0:= 9223372036854775807L;
  #L407bfa.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L407c00.  goto L407c0a;
  #L407c02.  v0:= (`long`) v0 @kind i2l;
  #L407c04.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L407c0a.  return @kind void;
}
