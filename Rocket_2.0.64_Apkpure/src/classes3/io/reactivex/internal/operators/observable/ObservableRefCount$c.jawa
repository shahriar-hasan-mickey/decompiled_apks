record `io.reactivex.internal.operators.observable.ObservableRefCount$c` @kind class @AccessFlag FINAL extends `java.lang.Runnable` @kind interface {
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.observable.ObservableRefCount$c.a` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.internal.operators.observable.ObservableRefCount` `io.reactivex.internal.operators.observable.ObservableRefCount$c.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRefCount$c` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableRefCount` v1 @kind object, `io.reactivex.disposables.CompositeDisposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$c;.<init>:(Lio/reactivex/internal/operators/observable/ObservableRefCount;Lio/reactivex/disposables/CompositeDisposable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44046c.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount$c.b` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` := v1 @kind object;
  #L440470.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L440476.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount$c.a` @type ^`io.reactivex.disposables.CompositeDisposable` := v2 @kind object;
  #L44047a.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableRefCount$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44048c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$c.b` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L440490.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableRefCount.d` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L440494.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantLock;.lock:()V` @kind virtual;
  #L44049a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$c.b` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L44049e.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableRefCount.b` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4404a2.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$c.a` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4404a6.  if v0 != v1 then goto L4404f8;
  #L4404aa.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$c.b` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L4404ae.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableRefCount.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4404b2.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4404b8.  v0:= temp;
  #L4404ba.  if v0 != 0 then goto L4404f8;
  #L4404be.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$c.b` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L4404c2.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableRefCount.a` @type ^`io.reactivex.observables.ConnectableObservable` @kind object;
  #L4404c6.  v1:= instanceof @variable v0 @type ^`io.reactivex.disposables.Disposable` @kind boolean;
  #L4404ca.  if v1 == 0 then goto L4404d8;
  #L4404ce.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L4404d2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4404d8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$c.b` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L4404dc.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableRefCount.b` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4404e0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4404e6.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$c.b` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L4404ea.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L4404ee.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4404f4.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount.b` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L4404f8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$c.b` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L4404fc.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableRefCount.d` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L440500.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantLock;.unlock:()V` @kind virtual;
  #L440506.  return @kind void;
  #L440508.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44050a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$c.b` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L44050e.  v1:= v1.`io.reactivex.internal.operators.observable.ObservableRefCount.d` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L440512.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantLock;.unlock:()V` @kind virtual;
  #L440518.  throw v0;
  catch `java.lang.Throwable` @[L44049a..L4404f8] goto L440508;
}
