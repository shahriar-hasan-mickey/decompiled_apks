record `io.reactivex.internal.operators.observable.ObservableReplay$m` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.observable.ObservableReplay$a` @kind class {
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableReplay$m.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableReplay$m.d` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableReplay$m.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableReplay$m.f` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableReplay$m.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableReplay$m` v0 @kind this, `int` v1 , `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$m;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4415e8.  call `<init>`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.<init>:()V` @kind direct;
  #L4415ee.  v0.`io.reactivex.internal.operators.observable.ObservableReplay$m.c` @type ^`io.reactivex.Scheduler` := v5 @kind object;
  #L4415f2.  v0.`io.reactivex.internal.operators.observable.ObservableReplay$m.f` @type ^`int` := v1;
  #L4415f6.  v0.`io.reactivex.internal.operators.observable.ObservableReplay$m.d` @type ^`long` := v2 @kind wide;
  #L4415fa.  v0.`io.reactivex.internal.operators.observable.ObservableReplay$m.e` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L4415fe.  return @kind void;
}
procedure `java.lang.Object` `e`(`io.reactivex.internal.operators.observable.ObservableReplay$m` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$m;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L441598.  v0:= new `io.reactivex.schedulers.Timed`;
  #L44159c.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableReplay$m.c` @type ^`io.reactivex.Scheduler` @kind object;
  #L4415a0.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableReplay$m.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4415a4.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4415aa.  v1:= temp @kind wide;
  #L4415ac.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableReplay$m.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4415b0.  call `<init>`(v0, v5, v1, v3) @signature `Lio/reactivex/schedulers/Timed;.<init>:(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L4415b6.  return v0 @kind object;
}
procedure `io.reactivex.internal.operators.observable.ObservableReplay$f` `f`(`io.reactivex.internal.operators.observable.ObservableReplay$m` v8 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$m;.f:()Lio/reactivex/internal/operators/observable/ObservableReplay$f;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4414fc.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableReplay$m.c` @type ^`io.reactivex.Scheduler` @kind object;
  #L441500.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableReplay$m.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L441504.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L44150a.  v0:= temp @kind wide;
  #L44150c.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableReplay$m.d` @type ^`long` @kind wide;
  #L441510.  v0:= v0 - v2 @kind long;
  #L441512.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L441518.  v2:= temp @kind object;
  #L44151a.  v2:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v2 @kind object;
  #L44151e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L441524.  v3:= temp @kind object;
  #L441526.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v3 @kind object;
  #L44152a.  v7:= v3 @kind object;
  #L44152c.  v3:= v2 @kind object;
  #L44152e.  v2:= v7 @kind object;
  #L441530.  if v2 != 0 then goto L441536;
  #L441534.  goto L441586;
  #L441536.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$f.a` @type ^`java.lang.Object` @kind object;
  #L44153a.  v4:= (`io.reactivex.schedulers.Timed`) v4 @kind object;
  #L44153e.  call temp:= `value`(v4) @signature `Lio/reactivex/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L441544.  v5:= temp @kind object;
  #L441546.  call temp:= `isComplete`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L44154c.  v5:= temp;
  #L44154e.  if v5 != 0 then goto L441586;
  #L441552.  call temp:= `value`(v4) @signature `Lio/reactivex/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L441558.  v5:= temp @kind object;
  #L44155a.  call temp:= `isError`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L441560.  v5:= temp;
  #L441562.  if v5 == 0 then goto L441568;
  #L441566.  goto L441586;
  #L441568.  call temp:= `time`(v4) @signature `Lio/reactivex/schedulers/Timed;.time:()J` @kind virtual;
  #L44156e.  v4:= temp @kind wide;
  #L441570.  v6:= lcmp(v4, v0);
  #L441574.  if v6 > 0 then goto L441586;
  #L441578.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44157e.  v3:= temp @kind object;
  #L441580.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v3 @kind object;
  #L441584.  goto L44152a;
  #L441586.  return v3 @kind object;
}
procedure `java.lang.Object` `g`(`io.reactivex.internal.operators.observable.ObservableReplay$m` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$m;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L4415c8.  v1:= (`io.reactivex.schedulers.Timed`) v1 @kind object;
  #L4415cc.  call temp:= `value`(v1) @signature `Lio/reactivex/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L4415d2.  v1:= temp @kind object;
  #L4415d4.  return v1 @kind object;
}
procedure `void` `j`(`io.reactivex.internal.operators.observable.ObservableReplay$m` v9 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$m;.j:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L441610.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableReplay$m.c` @type ^`io.reactivex.Scheduler` @kind object;
  #L441614.  v1:= v9.`io.reactivex.internal.operators.observable.ObservableReplay$m.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L441618.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L44161e.  v0:= temp @kind wide;
  #L441620.  v2:= v9.`io.reactivex.internal.operators.observable.ObservableReplay$m.d` @type ^`long` @kind wide;
  #L441624.  v0:= v0 - v2 @kind long;
  #L441626.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44162c.  v2:= temp @kind object;
  #L44162e.  v2:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v2 @kind object;
  #L441632.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L441638.  v3:= temp @kind object;
  #L44163a.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v3 @kind object;
  #L44163e.  v4:= 0I;
  #L441640.  v8:= v3 @kind object;
  #L441642.  v3:= v2 @kind object;
  #L441644.  v2:= v8 @kind object;
  #L441646.  if v2 == 0 then goto L4416a6;
  #L44164a.  v5:= v9.`io.reactivex.internal.operators.observable.ObservableReplay$a.b` @type ^`int`;
  #L44164e.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableReplay$m.f` @type ^`int`;
  #L441652.  if v5 <= v6 then goto L441670;
  #L441656.  v4:= v4 + 1;
  #L44165a.  v5:= v5 + -1;
  #L44165e.  v9.`io.reactivex.internal.operators.observable.ObservableReplay$a.b` @type ^`int` := v5;
  #L441662.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L441668.  v3:= temp @kind object;
  #L44166a.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v3 @kind object;
  #L44166e.  goto L441640;
  #L441670.  v5:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$f.a` @type ^`java.lang.Object` @kind object;
  #L441674.  v5:= (`io.reactivex.schedulers.Timed`) v5 @kind object;
  #L441678.  call temp:= `time`(v5) @signature `Lio/reactivex/schedulers/Timed;.time:()J` @kind virtual;
  #L44167e.  v5:= temp @kind wide;
  #L441680.  v7:= lcmp(v5, v0);
  #L441684.  if v7 > 0 then goto L4416a6;
  #L441688.  v4:= v4 + 1;
  #L44168c.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableReplay$a.b` @type ^`int`;
  #L441690.  v3:= v3 + -1;
  #L441694.  v9.`io.reactivex.internal.operators.observable.ObservableReplay$a.b` @type ^`int` := v3;
  #L441698.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44169e.  v3:= temp @kind object;
  #L4416a0.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v3 @kind object;
  #L4416a4.  goto L441640;
  #L4416a6.  if v4 == 0 then goto L4416b0;
  #L4416aa.  call `i`(v9, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.i:(Lio/reactivex/internal/operators/observable/ObservableReplay$f;)V` @kind virtual;
  #L4416b0.  return @kind void;
}
procedure `void` `k`(`io.reactivex.internal.operators.observable.ObservableReplay$m` v10 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$m;.k:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4416c4.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableReplay$m.c` @type ^`io.reactivex.Scheduler` @kind object;
  #L4416c8.  v1:= v10.`io.reactivex.internal.operators.observable.ObservableReplay$m.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4416cc.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4416d2.  v0:= temp @kind wide;
  #L4416d4.  v2:= v10.`io.reactivex.internal.operators.observable.ObservableReplay$m.d` @type ^`long` @kind wide;
  #L4416d8.  v0:= v0 - v2 @kind long;
  #L4416da.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4416e0.  v2:= temp @kind object;
  #L4416e2.  v2:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v2 @kind object;
  #L4416e6.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4416ec.  v3:= temp @kind object;
  #L4416ee.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v3 @kind object;
  #L4416f2.  v4:= 0I;
  #L4416f4.  v9:= v3 @kind object;
  #L4416f6.  v3:= v2 @kind object;
  #L4416f8.  v2:= v9 @kind object;
  #L4416fa.  if v2 == 0 then goto L44173c;
  #L4416fe.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableReplay$a.b` @type ^`int`;
  #L441702.  v6:= 1I;
  #L441704.  if v5 <= v6 then goto L44173c;
  #L441708.  v5:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$f.a` @type ^`java.lang.Object` @kind object;
  #L44170c.  v5:= (`io.reactivex.schedulers.Timed`) v5 @kind object;
  #L441710.  call temp:= `time`(v5) @signature `Lio/reactivex/schedulers/Timed;.time:()J` @kind virtual;
  #L441716.  v7:= temp @kind wide;
  #L441718.  v5:= lcmp(v7, v0);
  #L44171c.  if v5 > 0 then goto L44173c;
  #L441720.  v4:= v4 + 1;
  #L441724.  v3:= v10.`io.reactivex.internal.operators.observable.ObservableReplay$a.b` @type ^`int`;
  #L441728.  v3:= v3 - v6 @kind int;
  #L44172a.  v10.`io.reactivex.internal.operators.observable.ObservableReplay$a.b` @type ^`int` := v3;
  #L44172e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L441734.  v3:= temp @kind object;
  #L441736.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v3 @kind object;
  #L44173a.  goto L4416f4;
  #L44173c.  if v4 == 0 then goto L441746;
  #L441740.  call `i`(v10, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.i:(Lio/reactivex/internal/operators/observable/ObservableReplay$f;)V` @kind virtual;
  #L441746.  return @kind void;
}
