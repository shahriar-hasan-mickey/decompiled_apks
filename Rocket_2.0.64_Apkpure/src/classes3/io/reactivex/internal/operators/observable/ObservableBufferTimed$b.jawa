record `io.reactivex.internal.operators.observable.ObservableBufferTimed$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.QueueDrainObserver` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBufferTimed$b.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableBufferTimed$b.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableBufferTimed$b.d` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableBufferTimed$b.e` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableBufferTimed$b.f` @AccessFlag ;
  `java.util.Collection` `io.reactivex.internal.operators.observable.ObservableBufferTimed$b.g` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableBufferTimed$b.h` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$b` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `io.reactivex.Scheduler` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$b;.<init>:(Lio/reactivex/Observer;Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L43452c.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L434530.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L434536.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L43453c.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L434540.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L434546.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L43454a.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.b` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L43454e.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.c` @type ^`long` := v4 @kind wide;
  #L434552.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.d` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L434556.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.e` @type ^`io.reactivex.Scheduler` := v7 @kind object;
  #L43455a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$b` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$b;.a:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @AccessFlag PUBLIC {
    temp;

  #L434588.  v1:= v0.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L43458c.  call `onNext`(v1, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L434592.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$b` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$b;.accept:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L43456c.  v2:= (`java.util.Collection`) v2 @kind object;
  #L434570.  call `a`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$b;.a:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @kind virtual;
  #L434576.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4345a4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4345a8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4345ae.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4345b2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4345b8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L434500.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L434504.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43450a.  v0:= temp @kind object;
  #L43450c.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L434510.  if v0 != v1 then goto L434518;
  #L434514.  v0:= 1I;
  #L434516.  goto L43451a;
  #L434518.  v0:= 0I;
  #L43451a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$b` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4345cc.  @monitorenter v3
  #L4345ce.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.g` @type ^`java.util.Collection` @kind object;
  #L4345d2.  v1:= 0I;
  #L4345d4.  v3.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.g` @type ^`java.util.Collection` := v1 @kind object;
  #L4345d8.  @monitorexit v3
  #L4345da.  if v0 == 0 then goto L43460a;
  #L4345de.  v1:= v3.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4345e2.  call temp:= `offer`(v1, v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4345e8.  v0:= 1I;
  #L4345ea.  v3.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4345ee.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L4345f4.  v0:= temp;
  #L4345f6.  if v0 == 0 then goto L43460a;
  #L4345fa.  v0:= v3.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4345fe.  v1:= v3.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L434602.  v2:= 0I;
  #L434604.  call `drainLoop`(v0, v1, v2, v3, v3) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lio/reactivex/Observer;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain;)V` @kind static;
  #L43460a.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43460e.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L434614.  return @kind void;
  #L434616.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L434618.  @monitorexit v3
  #L43461a.  throw v0;
  catch `java.lang.Throwable` @[L4345ce..L4345da] goto L434616;
  catch `java.lang.Throwable` @[L434618..L43461a] goto L434616;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L434640.  @monitorenter v1
  #L434642.  v0:= 0I;
  #L434644.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.g` @type ^`java.util.Collection` := v0 @kind object;
  #L434648.  @monitorexit v1
  #L43464a.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L43464e.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L434654.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L434658.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43465e.  return @kind void;
  #L434660.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L434662.  @monitorexit v1
  #L434664.  throw v2;
  catch `java.lang.Throwable` @[L434644..L43464a] goto L434660;
  catch `java.lang.Throwable` @[L434662..L434664] goto L434660;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43468c.  @monitorenter v1
  #L43468e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.g` @type ^`java.util.Collection` @kind object;
  #L434692.  if v0 != 0 then goto L43469a;
  #L434696.  @monitorexit v1
  #L434698.  return @kind void;
  #L43469a.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4346a0.  @monitorexit v1
  #L4346a2.  return @kind void;
  #L4346a4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4346a6.  @monitorexit v1
  #L4346a8.  throw v2;
  catch `java.lang.Throwable` @[L43468e..L4346a8] goto L4346a4;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$b` v7 @kind this, `io.reactivex.disposables.Disposable` v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4346c8.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4346cc.  call temp:= `validate`(v0, v8) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4346d2.  v0:= temp;
  #L4346d4.  if v0 == 0 then goto L434758;
  #L4346d8.  v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.f` @type ^`io.reactivex.disposables.Disposable` := v8 @kind object;
  #L4346dc.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L4346e0.  call temp:= `call`(v8) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L4346e6.  v8:= temp @kind object;
  #L4346e8.  v0:= "The buffer supplied is null" @kind object;
  #L4346ec.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4346f2.  v8:= temp @kind object;
  #L4346f4.  v8:= (`java.util.Collection`) v8 @kind object;
  #L4346f8.  v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.g` @type ^`java.util.Collection` := v8 @kind object;
  #L4346fc.  v8:= v7.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L434700.  call `onSubscribe`(v8, v7) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L434706.  v8:= v7.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L43470a.  if v8 != 0 then goto L434758;
  #L43470e.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.e` @type ^`io.reactivex.Scheduler` @kind object;
  #L434712.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.c` @type ^`long` @kind wide;
  #L434716.  v6:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L43471a.  v1:= v7 @kind object;
  #L43471c.  v2:= v4 @kind wide;
  #L43471e.  call temp:= `schedulePeriodicallyDirect`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L434724.  v8:= temp @kind object;
  #L434726.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43472a.  v1:= 0I;
  #L43472c.  call temp:= `compareAndSet`(v0, v1, v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L434732.  v0:= temp;
  #L434734.  if v0 != 0 then goto L434758;
  #L434738.  call `dispose`(v8) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43473e.  goto L434758;
  #L434740.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L434742.  call `throwIfFatal`(v8) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L434748.  call `dispose`(v7) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$b;.dispose:()V` @kind virtual;
  #L43474e.  v0:= v7.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L434752.  call `error`(v8, v0) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L434758.  return @kind void;
  catch `java.lang.Throwable` @[L4346dc..L4346f8] goto L434740;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L434778.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L43477c.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L434782.  v0:= temp @kind object;
  #L434784.  v1:= "The bufferSupplier returned a null buffer" @kind object;
  #L434788.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43478e.  v0:= temp @kind object;
  #L434790.  v0:= (`java.util.Collection`) v0 @kind object;
  #L434794.  @monitorenter v2
  #L434796.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.g` @type ^`java.util.Collection` @kind object;
  #L43479a.  if v1 == 0 then goto L4347a2;
  #L43479e.  v2.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.g` @type ^`java.util.Collection` := v0 @kind object;
  #L4347a2.  @monitorexit v2
  #L4347a4.  if v1 != 0 then goto L4347b4;
  #L4347a8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4347ac.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4347b2.  return @kind void;
  #L4347b4.  v0:= 0I;
  #L4347b6.  call `fastPathEmit`(v2, v1, v0, v2) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastPathEmit:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L4347bc.  return @kind void;
  #L4347be.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4347c0.  @monitorexit v2
  #L4347c2.  throw v0;
  #L4347c4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4347c6.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4347cc.  v1:= v2.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L4347d0.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4347d6.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$b;.dispose:()V` @kind virtual;
  #L4347dc.  return @kind void;
  catch `java.lang.Throwable` @[L434778..L434794] goto L4347c4;
  catch `java.lang.Throwable` @[L434796..L4347a4] goto L4347be;
  catch `java.lang.Throwable` @[L4347c0..L4347c2] goto L4347be;
}
