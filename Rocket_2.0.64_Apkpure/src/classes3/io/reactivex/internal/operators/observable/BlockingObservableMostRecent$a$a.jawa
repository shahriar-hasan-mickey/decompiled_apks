record `io.reactivex.internal.operators.observable.BlockingObservableMostRecent$a$a` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface {
  `java.lang.Object` `io.reactivex.internal.operators.observable.BlockingObservableMostRecent$a$a.a` @AccessFlag PRIVATE;
  `io.reactivex.internal.operators.observable.BlockingObservableMostRecent$a` `io.reactivex.internal.operators.observable.BlockingObservableMostRecent$a$a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.BlockingObservableMostRecent$a$a` v0 @kind this, `io.reactivex.internal.operators.observable.BlockingObservableMostRecent$a` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableMostRecent$a$a;.<init>:(Lio/reactivex/internal/operators/observable/BlockingObservableMostRecent$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L431e60.  v0.`io.reactivex.internal.operators.observable.BlockingObservableMostRecent$a$a.b` @type ^`io.reactivex.internal.operators.observable.BlockingObservableMostRecent$a` := v1 @kind object;
  #L431e64.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L431e6a.  return @kind void;
}
procedure `boolean` `hasNext`(`io.reactivex.internal.operators.observable.BlockingObservableMostRecent$a$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableMostRecent$a$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431d9c.  v0:= v1.`io.reactivex.internal.operators.observable.BlockingObservableMostRecent$a$a.b` @type ^`io.reactivex.internal.operators.observable.BlockingObservableMostRecent$a` @kind object;
  #L431da0.  v0:= v0.`io.reactivex.internal.operators.observable.BlockingObservableMostRecent$a.b` @type ^`java.lang.Object` @kind object;
  #L431da4.  v1.`io.reactivex.internal.operators.observable.BlockingObservableMostRecent$a$a.a` @type ^`java.lang.Object` := v0 @kind object;
  #L431da8.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L431dae.  v0:= temp;
  #L431db0.  v0:= v0 ^~ 1;
  #L431db4.  return v0;
}
procedure `java.lang.Object` `next`(`io.reactivex.internal.operators.observable.BlockingObservableMostRecent$a$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableMostRecent$a$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L431dc8.  v0:= 0I;
  #L431dca.  v1:= v2.`io.reactivex.internal.operators.observable.BlockingObservableMostRecent$a$a.a` @type ^`java.lang.Object` @kind object;
  #L431dce.  if v1 != 0 then goto L431dde;
  #L431dd2.  v1:= v2.`io.reactivex.internal.operators.observable.BlockingObservableMostRecent$a$a.b` @type ^`io.reactivex.internal.operators.observable.BlockingObservableMostRecent$a` @kind object;
  #L431dd6.  v1:= v1.`io.reactivex.internal.operators.observable.BlockingObservableMostRecent$a.b` @type ^`java.lang.Object` @kind object;
  #L431dda.  v2.`io.reactivex.internal.operators.observable.BlockingObservableMostRecent$a$a.a` @type ^`java.lang.Object` := v1 @kind object;
  #L431dde.  v1:= v2.`io.reactivex.internal.operators.observable.BlockingObservableMostRecent$a$a.a` @type ^`java.lang.Object` @kind object;
  #L431de2.  call temp:= `isComplete`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L431de8.  v1:= temp;
  #L431dea.  if v1 != 0 then goto L431e26;
  #L431dee.  v1:= v2.`io.reactivex.internal.operators.observable.BlockingObservableMostRecent$a$a.a` @type ^`java.lang.Object` @kind object;
  #L431df2.  call temp:= `isError`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L431df8.  v1:= temp;
  #L431dfa.  if v1 != 0 then goto L431e10;
  #L431dfe.  v1:= v2.`io.reactivex.internal.operators.observable.BlockingObservableMostRecent$a$a.a` @type ^`java.lang.Object` @kind object;
  #L431e02.  call temp:= `getValue`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L431e08.  v1:= temp @kind object;
  #L431e0a.  v2.`io.reactivex.internal.operators.observable.BlockingObservableMostRecent$a$a.a` @type ^`java.lang.Object` := v0 @kind object;
  #L431e0e.  return v1 @kind object;
  #L431e10.  v1:= v2.`io.reactivex.internal.operators.observable.BlockingObservableMostRecent$a$a.a` @type ^`java.lang.Object` @kind object;
  #L431e14.  call temp:= `getError`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L431e1a.  v1:= temp @kind object;
  #L431e1c.  call temp:= `wrapOrThrow`(v1) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L431e22.  v1:= temp @kind object;
  #L431e24.  throw v1;
  #L431e26.  v1:= new `java.util.NoSuchElementException`;
  #L431e2a.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L431e30.  throw v1;
  #L431e32.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L431e34.  v2.`io.reactivex.internal.operators.observable.BlockingObservableMostRecent$a$a.a` @type ^`java.lang.Object` := v0 @kind object;
  #L431e38.  throw v1;
  catch `java.lang.Throwable` @[L431dca..L431e0a] goto L431e32;
  catch `java.lang.Throwable` @[L431e10..L431e32] goto L431e32;
}
procedure `void` `remove`(`io.reactivex.internal.operators.observable.BlockingObservableMostRecent$a$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableMostRecent$a$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L431e7c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L431e80.  v1:= "Read only iterator" @kind object;
  #L431e84.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L431e8a.  throw v0;
}
