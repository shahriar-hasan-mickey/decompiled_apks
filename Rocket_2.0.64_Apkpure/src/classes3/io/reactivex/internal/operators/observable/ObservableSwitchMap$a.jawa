record `io.reactivex.internal.operators.observable.ObservableSwitchMap$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableSwitchMap$b` `io.reactivex.internal.operators.observable.ObservableSwitchMap$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableSwitchMap$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.observable.ObservableSwitchMap$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSwitchMap$a.d` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSwitchMap$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$a` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableSwitchMap$b` v1 @kind object, `long` v2 , `int` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;JI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L444840.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L444846.  v0.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` := v1 @kind object;
  #L44484a.  v0.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.b` @type ^`long` := v2 @kind wide;
  #L44484e.  v1:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L444852.  call `<init>`(v1, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L444858.  v0.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v1 @kind object;
  #L44485c.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$a;.a:()V` @AccessFlag PUBLIC {
    temp;

  #L444870.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L444876.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L444888.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.b` @type ^`long` @kind wide;
  #L44488c.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` @kind object;
  #L444890.  v2:= v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.j` @type ^`long` @kind wide;
  #L444894.  v4:= lcmp(v0, v2);
  #L444898.  if v4 != 0 then goto L4448ac;
  #L44489c.  v0:= 1I;
  #L44489e.  v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4448a2.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` @kind object;
  #L4448a6.  call `b`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.b:()V` @kind virtual;
  #L4448ac.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4448c0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` @kind object;
  #L4448c4.  call `c`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.c:(Lio/reactivex/internal/operators/observable/ObservableSwitchMap$a;Ljava/lang/Throwable;)V` @kind virtual;
  #L4448ca.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4448dc.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.b` @type ^`long` @kind wide;
  #L4448e0.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` @kind object;
  #L4448e4.  v2:= v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.j` @type ^`long` @kind wide;
  #L4448e8.  v4:= lcmp(v0, v2);
  #L4448ec.  if v4 != 0 then goto L444904;
  #L4448f0.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4448f4.  call temp:= `offer`(v0, v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4448fa.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` @kind object;
  #L4448fe.  call `b`(v6) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.b:()V` @kind virtual;
  #L444904.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L444918.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L44491e.  return @kind void;
}
