record `io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntilPredicate$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4456e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4456ea.  v0.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4456ee.  v0.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.b` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L4456f2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntilPredicate$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L445704.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L445708.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44570e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntilPredicate$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4456c4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4456c8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4456ce.  v0:= temp;
  #L4456d0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntilPredicate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L445720.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.d` @type ^`boolean` @kind boolean;
  #L445724.  if v0 != 0 then goto L445738;
  #L445728.  v0:= 1I;
  #L44572a.  v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.d` @type ^`boolean` := v0 @kind boolean;
  #L44572e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L445732.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L445738.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntilPredicate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44574c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.d` @type ^`boolean` @kind boolean;
  #L445750.  if v0 != 0 then goto L445766;
  #L445754.  v0:= 1I;
  #L445756.  v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.d` @type ^`boolean` := v0 @kind boolean;
  #L44575a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L44575e.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L445764.  goto L44576c;
  #L445766.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44576c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntilPredicate$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L445780.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.d` @type ^`boolean` @kind boolean;
  #L445784.  if v0 != 0 then goto L4457d6;
  #L445788.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L44578c.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L445792.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.b` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L445796.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L44579c.  v2:= temp;
  #L44579e.  if v2 == 0 then goto L4457d6;
  #L4457a2.  v2:= 1I;
  #L4457a4.  v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.d` @type ^`boolean` := v2 @kind boolean;
  #L4457a8.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4457ac.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4457b2.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4457b6.  call `onComplete`(v2) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4457bc.  goto L4457d6;
  #L4457be.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4457c0.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4457c6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4457ca.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4457d0.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntilPredicate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4457d6.  return @kind void;
  catch `java.lang.Throwable` @[L445792..L44579e] goto L4457be;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntilPredicate$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4457f4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4457f8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4457fe.  v0:= temp;
  #L445800.  if v0 == 0 then goto L445812;
  #L445804.  v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L445808.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L44580c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L445812.  return @kind void;
}
