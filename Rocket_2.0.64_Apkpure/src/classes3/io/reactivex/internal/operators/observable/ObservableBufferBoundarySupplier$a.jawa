record `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a` @kind class @AccessFlag FINAL extends `io.reactivex.observers.DisposableObserver` @kind class {
  `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L433874.  call `<init>`(v0) @signature `Lio/reactivex/observers/DisposableObserver;.<init>:()V` @kind direct;
  #L43387a.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` := v1 @kind object;
  #L43387e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L433890.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a.c` @type ^`boolean` @kind boolean;
  #L433894.  if v0 == 0 then goto L43389a;
  #L433898.  return @kind void;
  #L43389a.  v0:= 1I;
  #L43389c.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4338a0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` @kind object;
  #L4338a4.  call `c`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.c:()V` @kind virtual;
  #L4338aa.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4338bc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a.c` @type ^`boolean` @kind boolean;
  #L4338c0.  if v0 == 0 then goto L4338cc;
  #L4338c4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4338ca.  return @kind void;
  #L4338cc.  v0:= 1I;
  #L4338ce.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4338d2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` @kind object;
  #L4338d6.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4338dc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4338f0.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a.c` @type ^`boolean` @kind boolean;
  #L4338f4.  if v1 == 0 then goto L4338fa;
  #L4338f8.  return @kind void;
  #L4338fa.  v1:= 1I;
  #L4338fc.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a.c` @type ^`boolean` := v1 @kind boolean;
  #L433900.  call `dispose`(v0) @signature `Lio/reactivex/observers/DisposableObserver;.dispose:()V` @kind virtual;
  #L433906.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` @kind object;
  #L43390a.  call `c`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.c:()V` @kind virtual;
  #L433910.  return @kind void;
}
