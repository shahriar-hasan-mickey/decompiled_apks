record `io.reactivex.internal.operators.observable.ObservableConcatMap$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableConcatMap$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableConcatMap$b.b` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableConcatMap$b.c` @AccessFlag FINAL;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableConcatMap$b.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMap$b.e` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.observable.ObservableConcatMap$b.f` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableConcatMap$b.g` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMap$b.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMap$b.i` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMap$b.j` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMap$b.k` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableConcatMap$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableConcatMap$b` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L436174.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L43617a.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L43617e.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.c` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L436182.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.e` @type ^`int` := v3;
  #L436186.  v2:= new `io.reactivex.internal.operators.observable.ObservableConcatMap$b$a`;
  #L43618a.  call `<init>`(v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;)V` @kind direct;
  #L436190.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.d` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L436194.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L436198.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L43619e.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L4361a2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableConcatMap$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4361f8.  call temp:= `getAndIncrement`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4361fe.  v0:= temp;
  #L436200.  if v0 == 0 then goto L436206;
  #L436204.  return @kind void;
  #L436206.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.i` @type ^`boolean` @kind boolean;
  #L43620a.  if v0 == 0 then goto L43621a;
  #L43620e.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.f` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L436212.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L436218.  return @kind void;
  #L43621a.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.h` @type ^`boolean` @kind boolean;
  #L43621e.  if v0 != 0 then goto L4362ca;
  #L436222.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.j` @type ^`boolean` @kind boolean;
  #L436226.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.f` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L43622a.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L436230.  v1:= temp @kind object;
  #L436232.  v2:= 1I;
  #L436234.  if v1 != 0 then goto L43623c;
  #L436238.  v3:= 1I;
  #L43623a.  goto L43623e;
  #L43623c.  v3:= 0I;
  #L43623e.  if v0 == 0 then goto L436252;
  #L436242.  if v3 == 0 then goto L436252;
  #L436246.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L43624a.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L436250.  return @kind void;
  #L436252.  if v3 != 0 then goto L4362ca;
  #L436256.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.c` @type ^`io.reactivex.functions.Function` @kind object;
  #L43625a.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L436260.  v0:= temp @kind object;
  #L436262.  v1:= "The mapper returned a null ObservableSource" @kind object;
  #L436266.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43626c.  v0:= temp @kind object;
  #L43626e.  v0:= (`io.reactivex.ObservableSource`) v0 @kind object;
  #L436272.  v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.h` @type ^`boolean` := v2 @kind boolean;
  #L436276.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.d` @type ^`io.reactivex.Observer` @kind object;
  #L43627a.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L436280.  goto L4362ca;
  #L436282.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L436284.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43628a.  call `dispose`(v4) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.dispose:()V` @kind virtual;
  #L436290.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.f` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L436294.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L43629a.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L43629e.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4362a4.  return @kind void;
  #L4362a6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4362a8.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4362ae.  call `dispose`(v4) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.dispose:()V` @kind virtual;
  #L4362b4.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.f` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L4362b8.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4362be.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L4362c2.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4362c8.  return @kind void;
  #L4362ca.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4362d0.  v0:= temp;
  #L4362d2.  if v0 != 0 then goto L436206;
  #L4362d6.  return @kind void;
  catch `java.lang.Throwable` @[L436226..L436232] goto L4362a6;
  catch `java.lang.Throwable` @[L436256..L436272] goto L436282;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableConcatMap$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L436300.  v0:= 0I;
  #L436302.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.h` @type ^`boolean` := v0 @kind boolean;
  #L436306.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.a:()V` @kind virtual;
  #L43630c.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableConcatMap$b` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.c:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag  {
    temp;
    v0;

  #L436320.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L436324.  call temp:= `update`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.update:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43632a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableConcatMap$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4361b4.  v0:= 1I;
  #L4361b6.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.i` @type ^`boolean` := v0 @kind boolean;
  #L4361ba.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L4361be.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4361c4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4361c8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4361ce.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4361d4.  v0:= temp;
  #L4361d6.  if v0 != 0 then goto L4361e4;
  #L4361da.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.f` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L4361de.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4361e4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableConcatMap$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43615c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.i` @type ^`boolean` @kind boolean;
  #L436160.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableConcatMap$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43633c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.j` @type ^`boolean` @kind boolean;
  #L436340.  if v0 == 0 then goto L436346;
  #L436344.  return @kind void;
  #L436346.  v0:= 1I;
  #L436348.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.j` @type ^`boolean` := v0 @kind boolean;
  #L43634c.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.a:()V` @kind virtual;
  #L436352.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableConcatMap$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436364.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.j` @type ^`boolean` @kind boolean;
  #L436368.  if v0 == 0 then goto L436374;
  #L43636c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L436372.  return @kind void;
  #L436374.  v0:= 1I;
  #L436376.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.j` @type ^`boolean` := v0 @kind boolean;
  #L43637a.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.dispose:()V` @kind virtual;
  #L436380.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L436384.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43638a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableConcatMap$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43639c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.j` @type ^`boolean` @kind boolean;
  #L4363a0.  if v0 == 0 then goto L4363a6;
  #L4363a4.  return @kind void;
  #L4363a6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.k` @type ^`int`;
  #L4363aa.  if v0 != 0 then goto L4363b8;
  #L4363ae.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.f` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L4363b2.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4363b8.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.a:()V` @kind virtual;
  #L4363be.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableConcatMap$b` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4363d0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4363d4.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4363da.  v0:= temp;
  #L4363dc.  if v0 == 0 then goto L436454;
  #L4363e0.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.g` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L4363e4.  v0:= instanceof @variable v3 @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind boolean;
  #L4363e8.  if v0 == 0 then goto L436438;
  #L4363ec.  v3:= (`io.reactivex.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L4363f0.  v0:= 3I;
  #L4363f2.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4363f8.  v0:= temp;
  #L4363fa.  v1:= 1I;
  #L4363fc.  if v0 != v1 then goto L43641e;
  #L436400.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.k` @type ^`int` := v0;
  #L436404.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.f` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L436408.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.j` @type ^`boolean` := v1 @kind boolean;
  #L43640c.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L436410.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L436416.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.a:()V` @kind virtual;
  #L43641c.  return @kind void;
  #L43641e.  v1:= 2I;
  #L436420.  if v0 != v1 then goto L436438;
  #L436424.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.k` @type ^`int` := v0;
  #L436428.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.f` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L43642c.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L436430.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L436436.  return @kind void;
  #L436438.  v3:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L43643c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.e` @type ^`int`;
  #L436440.  call `<init>`(v3, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L436446.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.f` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L43644a.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L43644e.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L436454.  return @kind void;
}
