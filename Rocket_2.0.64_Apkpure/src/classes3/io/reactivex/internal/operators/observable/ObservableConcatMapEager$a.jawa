record `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.internal.observers.InnerQueuedObserverSupport` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.e` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @AccessFlag FINAL;
  `java.util.ArrayDeque` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.g` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.h` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.i` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.j` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.k` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.l` @AccessFlag VOLATILE;
  `io.reactivex.internal.observers.InnerQueuedObserver` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.m` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.n` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `int` v4 , `io.reactivex.internal.util.ErrorMode` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;IILio/reactivex/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L436480.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L436486.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L43648a.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L43648e.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.c` @type ^`int` := v3;
  #L436492.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.d` @type ^`int` := v4;
  #L436496.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.e` @type ^`io.reactivex.internal.util.ErrorMode` := v5 @kind object;
  #L43649a.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L43649e.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4364a4.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L4364a8.  v1:= new `java.util.ArrayDeque`;
  #L4364ac.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L4364b2.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.g` @type ^`java.util.ArrayDeque` := v1 @kind object;
  #L4364b6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4364fc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.m` @type ^`io.reactivex.internal.observers.InnerQueuedObserver` @kind object;
  #L436500.  if v0 == 0 then goto L43650a;
  #L436504.  call `dispose`(v0) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.dispose:()V` @kind virtual;
  #L43650a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.g` @type ^`java.util.ArrayDeque` @kind object;
  #L43650e.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L436514.  v0:= temp @kind object;
  #L436516.  v0:= (`io.reactivex.internal.observers.InnerQueuedObserver`) v0 @kind object;
  #L43651a.  if v0 != 0 then goto L436520;
  #L43651e.  return @kind void;
  #L436520.  call `dispose`(v0) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.dispose:()V` @kind virtual;
  #L436526.  goto L43650a;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4364c8.  v0:= 1I;
  #L4364ca.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.l` @type ^`boolean` := v0 @kind boolean;
  #L4364ce.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4364d4.  v0:= temp;
  #L4364d6.  if v0 != 0 then goto L4364ea;
  #L4364da.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L4364de.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4364e4.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L4364ea.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a` v13 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L436538.  call temp:= `getAndIncrement`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43653e.  v0:= temp;
  #L436540.  if v0 == 0 then goto L436546;
  #L436544.  return @kind void;
  #L436546.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L43654a.  v1:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.g` @type ^`java.util.ArrayDeque` @kind object;
  #L43654e.  v2:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L436552.  v3:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.e` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L436556.  v4:= 1I;
  #L436558.  v5:= 1I;
  #L43655a.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.n` @type ^`int`;
  #L43655e.  v7:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.c` @type ^`int`;
  #L436562.  if v6 == v7 then goto L43663e;
  #L436566.  v7:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.l` @type ^`boolean` @kind boolean;
  #L43656a.  if v7 == 0 then goto L43657c;
  #L43656e.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L436574.  call `a`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L43657a.  return @kind void;
  #L43657c.  v7:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L436580.  if v3 != v7 then goto L4365b8;
  #L436584.  v7:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L436588.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43658e.  v7:= temp @kind object;
  #L436590.  v7:= (`java.lang.Throwable`) v7 @kind object;
  #L436594.  if v7 == 0 then goto L4365b8;
  #L436598.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L43659e.  call `a`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L4365a4.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4365a8.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4365ae.  v0:= temp @kind object;
  #L4365b0.  call `onError`(v2, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4365b6.  return @kind void;
  #L4365b8.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4365be.  v7:= temp @kind object;
  #L4365c0.  if v7 != 0 then goto L4365c6;
  #L4365c4.  goto L43663e;
  #L4365c6.  v8:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L4365ca.  call temp:= `apply`(v8, v7) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4365d0.  v7:= temp @kind object;
  #L4365d2.  v8:= "The mapper returned a null ObservableSource" @kind object;
  #L4365d6.  call temp:= `requireNonNull`(v7, v8) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4365dc.  v7:= temp @kind object;
  #L4365de.  v7:= (`io.reactivex.ObservableSource`) v7 @kind object;
  #L4365e2.  v8:= new `io.reactivex.internal.observers.InnerQueuedObserver`;
  #L4365e6.  v9:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.d` @type ^`int`;
  #L4365ea.  call `<init>`(v8, v13, v9) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.<init>:(Lio/reactivex/internal/observers/InnerQueuedObserverSupport;I)V` @kind direct;
  #L4365f0.  call temp:= `offer`(v1, v8) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4365f6.  call `subscribe`(v7, v8) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4365fc.  v6:= v6 + 1;
  #L436600.  goto L43655e;
  #L436602.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L436604.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43660a.  v3:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.i` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43660e.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L436614.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L43661a.  call `a`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L436620.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L436624.  call temp:= `addThrowable`(v0, v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L43662a.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43662e.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L436634.  v0:= temp @kind object;
  #L436636.  call `onError`(v2, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43663c.  return @kind void;
  #L43663e.  v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.n` @type ^`int` := v6;
  #L436642.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.l` @type ^`boolean` @kind boolean;
  #L436646.  if v6 == 0 then goto L436658;
  #L43664a.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L436650.  call `a`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L436656.  return @kind void;
  #L436658.  v6:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L43665c.  if v3 != v6 then goto L436694;
  #L436660.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L436664.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43666a.  v6:= temp @kind object;
  #L43666c.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L436670.  if v6 == 0 then goto L436694;
  #L436674.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L43667a.  call `a`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L436680.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L436684.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43668a.  v0:= temp @kind object;
  #L43668c.  call `onError`(v2, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L436692.  return @kind void;
  #L436694.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.m` @type ^`io.reactivex.internal.observers.InnerQueuedObserver` @kind object;
  #L436698.  v7:= 0I;
  #L43669a.  if v6 != 0 then goto L436742;
  #L43669e.  v6:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L4366a2.  if v3 != v6 then goto L4366da;
  #L4366a6.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4366aa.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4366b0.  v6:= temp @kind object;
  #L4366b2.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L4366b6.  if v6 == 0 then goto L4366da;
  #L4366ba.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4366c0.  call `a`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L4366c6.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4366ca.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4366d0.  v0:= temp @kind object;
  #L4366d2.  call `onError`(v2, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4366d8.  return @kind void;
  #L4366da.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.j` @type ^`boolean` @kind boolean;
  #L4366de.  call temp:= `poll`(v1) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4366e4.  v8:= temp @kind object;
  #L4366e6.  v8:= (`io.reactivex.internal.observers.InnerQueuedObserver`) v8 @kind object;
  #L4366ea.  if v8 != 0 then goto L4366f2;
  #L4366ee.  v9:= 1I;
  #L4366f0.  goto L4366f4;
  #L4366f2.  v9:= 0I;
  #L4366f4.  if v6 == 0 then goto L436738;
  #L4366f8.  if v9 == 0 then goto L436738;
  #L4366fc.  v1:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L436700.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L436706.  v1:= temp @kind object;
  #L436708.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L43670c.  if v1 == 0 then goto L436730;
  #L436710.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L436716.  call `a`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L43671c.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L436720.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L436726.  v0:= temp @kind object;
  #L436728.  call `onError`(v2, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43672e.  goto L436736;
  #L436730.  call `onComplete`(v2) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L436736.  return @kind void;
  #L436738.  if v9 != 0 then goto L436740;
  #L43673c.  v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.m` @type ^`io.reactivex.internal.observers.InnerQueuedObserver` := v8 @kind object;
  #L436740.  v6:= v8 @kind object;
  #L436742.  if v6 == 0 then goto L436808;
  #L436746.  call temp:= `queue`(v6) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.queue:()Lio/reactivex/internal/fuseable/SimpleQueue;` @kind virtual;
  #L43674c.  v8:= temp @kind object;
  #L43674e.  v9:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.l` @type ^`boolean` @kind boolean;
  #L436752.  if v9 == 0 then goto L436764;
  #L436756.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L43675c.  call `a`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L436762.  return @kind void;
  #L436764.  call temp:= `isDone`(v6) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.isDone:()Z` @kind virtual;
  #L43676a.  v9:= temp;
  #L43676c.  v10:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L436770.  if v3 != v10 then goto L4367a8;
  #L436774.  v10:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L436778.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43677e.  v10:= temp @kind object;
  #L436780.  v10:= (`java.lang.Throwable`) v10 @kind object;
  #L436784.  if v10 == 0 then goto L4367a8;
  #L436788.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L43678e.  call `a`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L436794.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L436798.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43679e.  v0:= temp @kind object;
  #L4367a0.  call `onError`(v2, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4367a6.  return @kind void;
  #L4367a8.  v10:= 0I;
  #L4367aa.  call temp:= `poll`(v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4367b0.  v11:= temp @kind object;
  #L4367b2.  if v11 != 0 then goto L4367ba;
  #L4367b6.  v12:= 1I;
  #L4367b8.  goto L4367bc;
  #L4367ba.  v12:= 0I;
  #L4367bc.  if v9 == 0 then goto L4367d6;
  #L4367c0.  if v12 == 0 then goto L4367d6;
  #L4367c4.  v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.m` @type ^`io.reactivex.internal.observers.InnerQueuedObserver` := v10 @kind object;
  #L4367c8.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.n` @type ^`int`;
  #L4367cc.  v6:= v6 - v4 @kind int;
  #L4367ce.  v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.n` @type ^`int` := v6;
  #L4367d2.  goto L43655a;
  #L4367d6.  if v12 == 0 then goto L4367dc;
  #L4367da.  goto L436808;
  #L4367dc.  call `onNext`(v2, v11) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4367e2.  goto L43674e;
  #L4367e4.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4367e6.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4367ec.  v7:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4367f0.  call temp:= `addThrowable`(v7, v6) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4367f6.  v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.m` @type ^`io.reactivex.internal.observers.InnerQueuedObserver` := v10 @kind object;
  #L4367fa.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.n` @type ^`int`;
  #L4367fe.  v6:= v6 - v4 @kind int;
  #L436800.  v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.n` @type ^`int` := v6;
  #L436804.  goto L43655a;
  #L436808.  v5:= -v5 @kind int;
  #L43680a.  call temp:= `addAndGet`(v13, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L436810.  v5:= temp;
  #L436812.  if v5 != 0 then goto L43655a;
  #L436816.  return @kind void;
  catch `java.lang.Throwable` @[L4365b8..L4365e2] goto L436602;
  catch `java.lang.Throwable` @[L4367aa..L4367b2] goto L4367e4;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a` v0 @kind this, `io.reactivex.internal.observers.InnerQueuedObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.innerComplete:(Lio/reactivex/internal/observers/InnerQueuedObserver;)V` @AccessFlag PUBLIC {
    temp;

  #L436840.  call `setDone`(v1) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.setDone:()V` @kind virtual;
  #L436846.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @kind virtual;
  #L43684c.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this, `io.reactivex.internal.observers.InnerQueuedObserver` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.innerError:(Lio/reactivex/internal/observers/InnerQueuedObserver;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436860.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L436864.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L43686a.  v0:= temp;
  #L43686c.  if v0 == 0 then goto L436894;
  #L436870.  v3:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.e` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L436874.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L436878.  if v3 != v0 then goto L436886;
  #L43687c.  v3:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.i` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L436880.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L436886.  call `setDone`(v2) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.setDone:()V` @kind virtual;
  #L43688c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @kind virtual;
  #L436892.  goto L43689a;
  #L436894.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43689a.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a` v0 @kind this, `io.reactivex.internal.observers.InnerQueuedObserver` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.innerNext:(Lio/reactivex/internal/observers/InnerQueuedObserver;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4368ac.  call temp:= `queue`(v1) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.queue:()Lio/reactivex/internal/fuseable/SimpleQueue;` @kind virtual;
  #L4368b2.  v1:= temp @kind object;
  #L4368b4.  call temp:= `offer`(v1, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4368ba.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @kind virtual;
  #L4368c0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436468.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.l` @type ^`boolean` @kind boolean;
  #L43646c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4368d4.  v0:= 1I;
  #L4368d6.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.j` @type ^`boolean` := v0 @kind boolean;
  #L4368da.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @kind virtual;
  #L4368e0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4368f4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4368f8.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4368fe.  v0:= temp;
  #L436900.  if v0 == 0 then goto L436912;
  #L436904.  v2:= 1I;
  #L436906.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.j` @type ^`boolean` := v2 @kind boolean;
  #L43690a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @kind virtual;
  #L436910.  goto L436918;
  #L436912.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L436918.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43692c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.k` @type ^`int`;
  #L436930.  if v0 != 0 then goto L43693e;
  #L436934.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L436938.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L43693e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @kind virtual;
  #L436944.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L436958.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.i` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43695c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L436962.  v0:= temp;
  #L436964.  if v0 == 0 then goto L4369da;
  #L436968.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.i` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L43696c.  v0:= instanceof @variable v3 @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind boolean;
  #L436970.  if v0 == 0 then goto L4369c0;
  #L436974.  v3:= (`io.reactivex.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L436978.  v0:= 3I;
  #L43697a.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L436980.  v0:= temp;
  #L436982.  v1:= 1I;
  #L436984.  if v0 != v1 then goto L4369a6;
  #L436988.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.k` @type ^`int` := v0;
  #L43698c.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L436990.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.j` @type ^`boolean` := v1 @kind boolean;
  #L436994.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L436998.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43699e.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @kind virtual;
  #L4369a4.  return @kind void;
  #L4369a6.  v1:= 2I;
  #L4369a8.  if v0 != v1 then goto L4369c0;
  #L4369ac.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.k` @type ^`int` := v0;
  #L4369b0.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4369b4.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4369b8.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4369be.  return @kind void;
  #L4369c0.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.d` @type ^`int`;
  #L4369c4.  call temp:= `createQueue`(v3) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.createQueue:(I)Lio/reactivex/internal/fuseable/SimpleQueue;` @kind static;
  #L4369ca.  v3:= temp @kind object;
  #L4369cc.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4369d0.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4369d4.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4369da.  return @kind void;
}
