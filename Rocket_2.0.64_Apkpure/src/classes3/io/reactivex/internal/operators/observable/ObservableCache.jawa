record `io.reactivex.internal.operators.observable.ObservableCache` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.a` @kind class {
  `io.reactivex.internal.operators.observable.ObservableCache$a` `io.reactivex.internal.operators.observable.ObservableCache.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableCache.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableCache` v0 @kind this, `io.reactivex.Observable` v1 @kind object, `io.reactivex.internal.operators.observable.ObservableCache$a` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.<init>:(Lio/reactivex/Observable;Lio/reactivex/internal/operators/observable/ObservableCache$a;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L435280.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/a;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L435286.  v0.`io.reactivex.internal.operators.observable.ObservableCache.a` @type ^`io.reactivex.internal.operators.observable.ObservableCache$a` := v2 @kind object;
  #L43528a.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L43528e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L435294.  v0.`io.reactivex.internal.operators.observable.ObservableCache.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L435298.  return @kind void;
}
procedure `io.reactivex.Observable` `from`(`io.reactivex.Observable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.from:(Lio/reactivex/Observable;)Lio/reactivex/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L435228.  v0:= 16I;
  #L43522c.  call temp:= `from`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.from:(Lio/reactivex/Observable;I)Lio/reactivex/Observable;` @kind static;
  #L435232.  v1:= temp @kind object;
  #L435234.  return v1 @kind object;
}
procedure `io.reactivex.Observable` `from`(`io.reactivex.Observable` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.from:(Lio/reactivex/Observable;I)Lio/reactivex/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L435248.  v0:= "capacityHint" @kind object;
  #L43524c.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L435252.  v0:= new `io.reactivex.internal.operators.observable.ObservableCache$a`;
  #L435256.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$a;.<init>:(Lio/reactivex/Observable;I)V` @kind direct;
  #L43525c.  v2:= new `io.reactivex.internal.operators.observable.ObservableCache`;
  #L435260.  call `<init>`(v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.<init>:(Lio/reactivex/Observable;Lio/reactivex/internal/operators/observable/ObservableCache$a;)V` @kind direct;
  #L435266.  call temp:= `onAssembly`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Observable;)Lio/reactivex/Observable;` @kind static;
  #L43526c.  v1:= temp @kind object;
  #L43526e.  return v1 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableCache` v3 @kind this, `io.reactivex.Observer` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L4352ac.  v0:= new `io.reactivex.internal.operators.observable.ObservableCache$b`;
  #L4352b0.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableCache.a` @type ^`io.reactivex.internal.operators.observable.ObservableCache$a` @kind object;
  #L4352b4.  call `<init>`(v0, v4, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$b;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/operators/observable/ObservableCache$a;)V` @kind direct;
  #L4352ba.  call `onSubscribe`(v4, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4352c0.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableCache.a` @type ^`io.reactivex.internal.operators.observable.ObservableCache$a` @kind object;
  #L4352c4.  call temp:= `a`(v4, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$a;.a:(Lio/reactivex/internal/operators/observable/ObservableCache$b;)Z` @kind virtual;
  #L4352ca.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableCache.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4352ce.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4352d4.  v4:= temp;
  #L4352d6.  if v4 != 0 then goto L4352f8;
  #L4352da.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableCache.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4352de.  v1:= 0I;
  #L4352e0.  v2:= 1I;
  #L4352e2.  call temp:= `compareAndSet`(v4, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4352e8.  v4:= temp;
  #L4352ea.  if v4 == 0 then goto L4352f8;
  #L4352ee.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableCache.a` @type ^`io.reactivex.internal.operators.observable.ObservableCache$a` @kind object;
  #L4352f2.  call `b`(v4) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$a;.b:()V` @kind virtual;
  #L4352f8.  call `a`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$b;.a:()V` @kind virtual;
  #L4352fe.  return @kind void;
}
