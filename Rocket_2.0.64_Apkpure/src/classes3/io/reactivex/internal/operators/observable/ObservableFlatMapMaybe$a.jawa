record `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.e` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.g` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.h` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.i` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43a3c0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L43a3c6.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L43a3ca.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.f` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L43a3ce.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.b` @type ^`boolean` := v3 @kind boolean;
  #L43a3d2.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L43a3d6.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L43a3dc.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L43a3e0.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L43a3e4.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L43a3ea.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L43a3ee.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L43a3f2.  v2:= 1I;
  #L43a3f4.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L43a3fa.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L43a3fe.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L43a402.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43a408.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L43a40c.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L43a420.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43a424.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43a42a.  v0:= temp @kind object;
  #L43a42c.  v0:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L43a430.  if v0 == 0 then goto L43a43a;
  #L43a434.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43a43a.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L43a478.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43a47e.  v0:= temp;
  #L43a480.  if v0 != 0 then goto L43a48a;
  #L43a484.  call `c`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.c:()V` @kind virtual;
  #L43a48a.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` v8 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L43a49c.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43a4a0.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43a4a4.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43a4a8.  v3:= 1I;
  #L43a4aa.  v4:= 1I;
  #L43a4ac.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.i` @type ^`boolean` @kind boolean;
  #L43a4b0.  if v5 == 0 then goto L43a4bc;
  #L43a4b4.  call `a`(v8) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.a:()V` @kind virtual;
  #L43a4ba.  return @kind void;
  #L43a4bc.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.b` @type ^`boolean` @kind boolean;
  #L43a4c0.  if v5 != 0 then goto L43a4f2;
  #L43a4c4.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43a4c8.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43a4ce.  v5:= temp @kind object;
  #L43a4d0.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L43a4d4.  if v5 == 0 then goto L43a4f2;
  #L43a4d8.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43a4dc.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43a4e2.  v1:= temp @kind object;
  #L43a4e4.  call `a`(v8) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.a:()V` @kind virtual;
  #L43a4ea.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43a4f0.  return @kind void;
  #L43a4f2.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L43a4f8.  v5:= temp;
  #L43a4fa.  v6:= 0I;
  #L43a4fc.  if v5 != 0 then goto L43a504;
  #L43a500.  v5:= 1I;
  #L43a502.  goto L43a506;
  #L43a504.  v5:= 0I;
  #L43a506.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43a50c.  v7:= temp @kind object;
  #L43a50e.  v7:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v7 @kind object;
  #L43a512.  if v7 == 0 then goto L43a520;
  #L43a516.  call temp:= `poll`(v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L43a51c.  v7:= temp @kind object;
  #L43a51e.  goto L43a522;
  #L43a520.  v7:= 0I;
  #L43a522.  if v7 != 0 then goto L43a528;
  #L43a526.  v6:= 1I;
  #L43a528.  if v5 == 0 then goto L43a550;
  #L43a52c.  if v6 == 0 then goto L43a550;
  #L43a530.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43a534.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43a53a.  v1:= temp @kind object;
  #L43a53c.  if v1 == 0 then goto L43a548;
  #L43a540.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43a546.  goto L43a54e;
  #L43a548.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43a54e.  return @kind void;
  #L43a550.  if v6 == 0 then goto L43a564;
  #L43a554.  v4:= -v4 @kind int;
  #L43a556.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L43a55c.  v4:= temp;
  #L43a55e.  if v4 != 0 then goto L43a4ac;
  #L43a562.  return @kind void;
  #L43a564.  call `onNext`(v0, v7) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43a56a.  goto L43a4ac;
}
procedure `io.reactivex.internal.queue.SpscLinkedArrayQueue` `d`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.d:()Lio/reactivex/internal/queue/SpscLinkedArrayQueue;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L43a374.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43a378.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43a37e.  v0:= temp @kind object;
  #L43a380.  v0:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L43a384.  if v0 == 0 then goto L43a38a;
  #L43a388.  return v0 @kind object;
  #L43a38a.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L43a38e.  call temp:= `bufferSize`() @signature `Lio/reactivex/Observable;.bufferSize:()I` @kind static;
  #L43a394.  v1:= temp;
  #L43a396.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L43a39c.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43a3a0.  v2:= 0I;
  #L43a3a2.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L43a3a8.  v1:= temp;
  #L43a3aa.  if v1 == 0 then goto L43a374;
  #L43a3ae.  return v0 @kind object;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a44c.  v0:= 1I;
  #L43a44e.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.i` @type ^`boolean` := v0 @kind boolean;
  #L43a452.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43a456.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43a45c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43a460.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L43a466.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` v2 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a$a` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.e:(Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L43a57c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43a580.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43a586.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L43a58c.  v3:= temp;
  #L43a58e.  if v3 != 0 then goto L43a616;
  #L43a592.  v3:= 0I;
  #L43a594.  v0:= 1I;
  #L43a596.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L43a59c.  v1:= temp;
  #L43a59e.  if v1 == 0 then goto L43a616;
  #L43a5a2.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43a5a6.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43a5ac.  v1:= temp;
  #L43a5ae.  if v1 != 0 then goto L43a5b4;
  #L43a5b2.  v3:= 1I;
  #L43a5b4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43a5b8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43a5be.  v0:= temp @kind object;
  #L43a5c0.  v0:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L43a5c4.  if v3 == 0 then goto L43a600;
  #L43a5c8.  if v0 == 0 then goto L43a5d8;
  #L43a5cc.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L43a5d2.  v3:= temp;
  #L43a5d4.  if v3 == 0 then goto L43a600;
  #L43a5d8.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43a5dc.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43a5e2.  v3:= temp @kind object;
  #L43a5e4.  if v3 == 0 then goto L43a5f4;
  #L43a5e8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43a5ec.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43a5f2.  goto L43a5fe;
  #L43a5f4.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43a5f8.  call `onComplete`(v3) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43a5fe.  return @kind void;
  #L43a600.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43a606.  v3:= temp;
  #L43a608.  if v3 != 0 then goto L43a60e;
  #L43a60c.  return @kind void;
  #L43a60e.  call `c`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.c:()V` @kind virtual;
  #L43a614.  goto L43a626;
  #L43a616.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43a61a.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43a620.  call `b`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.b:()V` @kind virtual;
  #L43a626.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a$a` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.f:(Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L43a638.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43a63c.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43a642.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43a646.  call temp:= `addThrowable`(v2, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L43a64c.  v2:= temp;
  #L43a64e.  if v2 == 0 then goto L43a680;
  #L43a652.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.b` @type ^`boolean` @kind boolean;
  #L43a656.  if v2 != 0 then goto L43a66e;
  #L43a65a.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43a65e.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43a664.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43a668.  call `dispose`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L43a66e.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43a672.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43a678.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.b:()V` @kind virtual;
  #L43a67e.  goto L43a686;
  #L43a680.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43a686.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` v2 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a$a` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.g:(Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a$a;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L43a698.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43a69c.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43a6a2.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L43a6a8.  v3:= temp;
  #L43a6aa.  if v3 != 0 then goto L43a734;
  #L43a6ae.  v3:= 0I;
  #L43a6b0.  v0:= 1I;
  #L43a6b2.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L43a6b8.  v1:= temp;
  #L43a6ba.  if v1 == 0 then goto L43a734;
  #L43a6be.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43a6c2.  call `onNext`(v1, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43a6c8.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43a6cc.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43a6d2.  v4:= temp;
  #L43a6d4.  if v4 != 0 then goto L43a6da;
  #L43a6d8.  v3:= 1I;
  #L43a6da.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43a6de.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43a6e4.  v4:= temp @kind object;
  #L43a6e6.  v4:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v4 @kind object;
  #L43a6ea.  if v3 == 0 then goto L43a726;
  #L43a6ee.  if v4 == 0 then goto L43a6fe;
  #L43a6f2.  call temp:= `isEmpty`(v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L43a6f8.  v3:= temp;
  #L43a6fa.  if v3 == 0 then goto L43a726;
  #L43a6fe.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43a702.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43a708.  v3:= temp @kind object;
  #L43a70a.  if v3 == 0 then goto L43a71a;
  #L43a70e.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43a712.  call `onError`(v4, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43a718.  goto L43a724;
  #L43a71a.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43a71e.  call `onComplete`(v3) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43a724.  return @kind void;
  #L43a726.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43a72c.  v3:= temp;
  #L43a72e.  if v3 != 0 then goto L43a75e;
  #L43a732.  return @kind void;
  #L43a734.  call temp:= `d`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.d:()Lio/reactivex/internal/queue/SpscLinkedArrayQueue;` @kind virtual;
  #L43a73a.  v3:= temp @kind object;
  #L43a73c.  @monitorenter v3
  #L43a73e.  call temp:= `offer`(v3, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L43a744.  @monitorexit v3
  #L43a746.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43a74a.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43a750.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43a756.  v3:= temp;
  #L43a758.  if v3 == 0 then goto L43a75e;
  #L43a75c.  return @kind void;
  #L43a75e.  call `c`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.c:()V` @kind virtual;
  #L43a764.  return @kind void;
  #L43a766.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43a768.  @monitorexit v3
  #L43a76a.  throw v4;
  catch `java.lang.Throwable` @[L43a73e..L43a746] goto L43a766;
  catch `java.lang.Throwable` @[L43a768..L43a76a] goto L43a766;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a35c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.i` @type ^`boolean` @kind boolean;
  #L43a360.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a790.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43a794.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43a79a.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.b:()V` @kind virtual;
  #L43a7a0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a7b4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43a7b8.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43a7be.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43a7c2.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L43a7c8.  v0:= temp;
  #L43a7ca.  if v0 == 0 then goto L43a7e8;
  #L43a7ce.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.b` @type ^`boolean` @kind boolean;
  #L43a7d2.  if v2 != 0 then goto L43a7e0;
  #L43a7d6.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43a7da.  call `dispose`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L43a7e0.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.b:()V` @kind virtual;
  #L43a7e6.  goto L43a7ee;
  #L43a7e8.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43a7ee.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43a800.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.f` @type ^`io.reactivex.functions.Function` @kind object;
  #L43a804.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43a80a.  v3:= temp @kind object;
  #L43a80c.  v0:= "The mapper returned a null MaybeSource" @kind object;
  #L43a810.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43a816.  v3:= temp @kind object;
  #L43a818.  v3:= (`io.reactivex.MaybeSource`) v3 @kind object;
  #L43a81c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43a820.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43a826.  v0:= new `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a$a`;
  #L43a82a.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;)V` @kind direct;
  #L43a830.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43a834.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43a83a.  v1:= temp;
  #L43a83c.  if v1 == 0 then goto L43a846;
  #L43a840.  call `subscribe`(v3, v0) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L43a846.  return @kind void;
  #L43a848.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43a84a.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43a850.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43a854.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43a85a.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43a860.  return @kind void;
  catch `java.lang.Throwable` @[L43a800..L43a81c] goto L43a848;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a880.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43a884.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43a88a.  v0:= temp;
  #L43a88c.  if v0 == 0 then goto L43a89e;
  #L43a890.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.h` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L43a894.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43a898.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43a89e.  return @kind void;
}
