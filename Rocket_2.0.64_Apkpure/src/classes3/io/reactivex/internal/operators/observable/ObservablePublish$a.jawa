record `io.reactivex.internal.operators.observable.ObservablePublish$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservablePublish$a.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservablePublish$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservablePublish$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$a;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43f30c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43f312.  v0.`io.reactivex.internal.operators.observable.ObservablePublish$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L43f316.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservablePublish$a` v1 @kind this, `io.reactivex.internal.operators.observable.ObservablePublish$b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$a;.a:(Lio/reactivex/internal/operators/observable/ObservablePublish$b;)V` @AccessFlag  {
    temp;
    v0;

  #L43f354.  v0:= 0I;
  #L43f356.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L43f35c.  v0:= temp;
  #L43f35e.  if v0 != 0 then goto L43f368;
  #L43f362.  call `b`(v2, v1) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.b:(Lio/reactivex/internal/operators/observable/ObservablePublish$a;)V` @kind virtual;
  #L43f368.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservablePublish$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f328.  call temp:= `getAndSet`(v1, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L43f32e.  v0:= temp @kind object;
  #L43f330.  if v0 == 0 then goto L43f342;
  #L43f334.  if v0 == v1 then goto L43f342;
  #L43f338.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$b`) v0 @kind object;
  #L43f33c.  call `b`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.b:(Lio/reactivex/internal/operators/observable/ObservablePublish$a;)V` @kind virtual;
  #L43f342.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservablePublish$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f2e8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43f2ee.  v0:= temp @kind object;
  #L43f2f0.  if v0 != v1 then goto L43f2f8;
  #L43f2f4.  v0:= 1I;
  #L43f2f6.  goto L43f2fa;
  #L43f2f8.  v0:= 0I;
  #L43f2fa.  return v0;
}
