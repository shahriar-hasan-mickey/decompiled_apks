record `io.reactivex.internal.operators.observable.ObservableBuffer$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableBuffer$a.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableBuffer$a.b` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBuffer$a.c` @AccessFlag FINAL;
  `java.util.Collection` `io.reactivex.internal.operators.observable.ObservableBuffer$a.d` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableBuffer$a.e` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableBuffer$a.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBuffer$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `int` v2 , `java.util.concurrent.Callable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$a;.<init>:(Lio/reactivex/Observer;ILjava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L433014.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43301a.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L43301e.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer$a.b` @type ^`int` := v2;
  #L433022.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer$a.c` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L433026.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.observable.ObservableBuffer$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$a;.a:()Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L432f7c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L432f80.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L432f86.  v0:= temp @kind object;
  #L432f88.  v1:= "Empty buffer supplied" @kind object;
  #L432f8c.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L432f92.  v0:= temp @kind object;
  #L432f94.  v0:= (`java.util.Collection`) v0 @kind object;
  #L432f98.  v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.d` @type ^`java.util.Collection` := v0 @kind object;
  #L432f9c.  v0:= 1I;
  #L432f9e.  return v0;
  #L432fa0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L432fa2.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L432fa8.  v1:= 0I;
  #L432faa.  v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.d` @type ^`java.util.Collection` := v1 @kind object;
  #L432fae.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L432fb2.  if v1 != 0 then goto L432fc2;
  #L432fb6.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L432fba.  call `error`(v0, v1) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L432fc0.  goto L432fd2;
  #L432fc2.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L432fc8.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L432fcc.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L432fd2.  v0:= 0I;
  #L432fd4.  return v0;
  catch `java.lang.Throwable` @[L432f7c..L432f98] goto L432fa0;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableBuffer$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L433038.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43303c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L433042.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableBuffer$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432ff4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L432ff8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L432ffe.  v0:= temp;
  #L433000.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBuffer$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L433054.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.d` @type ^`java.util.Collection` @kind object;
  #L433058.  v1:= 0I;
  #L43305a.  v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.d` @type ^`java.util.Collection` := v1 @kind object;
  #L43305e.  if v0 == 0 then goto L433078;
  #L433062.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L433068.  v1:= temp;
  #L43306a.  if v1 != 0 then goto L433078;
  #L43306e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L433072.  call `onNext`(v1, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L433078.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43307c.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L433082.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBuffer$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L433094.  v0:= 0I;
  #L433096.  v1.`io.reactivex.internal.operators.observable.ObservableBuffer$a.d` @type ^`java.util.Collection` := v0 @kind object;
  #L43309a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43309e.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4330a4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBuffer$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4330b8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.d` @type ^`java.util.Collection` @kind object;
  #L4330bc.  if v0 == 0 then goto L4330f0;
  #L4330c0.  call temp:= `add`(v0, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4330c6.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.e` @type ^`int`;
  #L4330ca.  v3:= v3 + 1;
  #L4330ce.  v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.e` @type ^`int` := v3;
  #L4330d2.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.b` @type ^`int`;
  #L4330d6.  if v3 < v1 then goto L4330f0;
  #L4330da.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4330de.  call `onNext`(v3, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4330e4.  v3:= 0I;
  #L4330e6.  v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.e` @type ^`int` := v3;
  #L4330ea.  call temp:= `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$a;.a:()Z` @kind virtual;
  #L4330f0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableBuffer$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L433104.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L433108.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43310e.  v0:= temp;
  #L433110.  if v0 == 0 then goto L433122;
  #L433114.  v1.`io.reactivex.internal.operators.observable.ObservableBuffer$a.f` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L433118.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43311c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L433122.  return @kind void;
}
