record `io.reactivex.internal.operators.observable.BlockingObservableNext$b` @kind class @AccessFlag FINAL extends `io.reactivex.observers.DisposableObserver` @kind class {
  `java.util.concurrent.BlockingQueue` `io.reactivex.internal.operators.observable.BlockingObservableNext$b.b` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.BlockingObservableNext$b.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.BlockingObservableNext$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$b;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L432160.  call `<init>`(v2) @signature `Lio/reactivex/observers/DisposableObserver;.<init>:()V` @kind direct;
  #L432166.  v0:= new `java.util.concurrent.ArrayBlockingQueue`;
  #L43216a.  v1:= 1I;
  #L43216c.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/ArrayBlockingQueue;.<init>:(I)V` @kind direct;
  #L432172.  v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$b.b` @type ^`java.util.concurrent.BlockingQueue` := v0 @kind object;
  #L432176.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L43217a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L432180.  v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$b.c` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L432184.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.BlockingObservableNext$b` v2 @kind this, `io.reactivex.Notification` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$b;.a:(Lio/reactivex/Notification;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4321c4.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$b.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4321c8.  v1:= 0I;
  #L4321ca.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L4321d0.  v0:= temp;
  #L4321d2.  v1:= 1I;
  #L4321d4.  if v0 == v1 then goto L4321e4;
  #L4321d8.  call temp:= `isOnNext`(v3) @signature `Lio/reactivex/Notification;.isOnNext:()Z` @kind virtual;
  #L4321de.  v0:= temp;
  #L4321e0.  if v0 != 0 then goto L432218;
  #L4321e4.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$b.b` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L4321e8.  call temp:= `offer`(v0, v3) @signature `Ljava/util/concurrent/BlockingQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4321ee.  v0:= temp;
  #L4321f0.  if v0 != 0 then goto L432218;
  #L4321f4.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$b.b` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L4321f8.  call temp:= `poll`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4321fe.  v0:= temp @kind object;
  #L432200.  v0:= (`io.reactivex.Notification`) v0 @kind object;
  #L432204.  if v0 == 0 then goto L4321e4;
  #L432208.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/Notification;.isOnNext:()Z` @kind virtual;
  #L43220e.  v1:= temp;
  #L432210.  if v1 != 0 then goto L4321e4;
  #L432214.  v3:= v0 @kind object;
  #L432216.  goto L4321e4;
  #L432218.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.BlockingObservableNext$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L432248.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$b.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43224c.  v1:= 1I;
  #L43224e.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L432254.  return @kind void;
}
procedure `io.reactivex.Notification` `c`(`io.reactivex.internal.operators.observable.BlockingObservableNext$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$b;.c:()Lio/reactivex/Notification;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432130.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$b;.b:()V` @kind virtual;
  #L432136.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L43213c.  v0:= v1.`io.reactivex.internal.operators.observable.BlockingObservableNext$b.b` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L432140.  call temp:= `take`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.take:()Ljava/lang/Object;` @kind interface;
  #L432146.  v0:= temp @kind object;
  #L432148.  v0:= (`io.reactivex.Notification`) v0 @kind object;
  #L43214c.  return v0 @kind object;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.BlockingObservableNext$b` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L432198.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.BlockingObservableNext$b` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4321ac.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4321b2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.BlockingObservableNext$b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L43222c.  v1:= (`io.reactivex.Notification`) v1 @kind object;
  #L432230.  call `a`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$b;.a:(Lio/reactivex/Notification;)V` @kind virtual;
  #L432236.  return @kind void;
}
