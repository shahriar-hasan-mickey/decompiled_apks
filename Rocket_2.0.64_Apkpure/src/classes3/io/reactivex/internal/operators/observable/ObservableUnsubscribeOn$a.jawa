record `io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a.a` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L446ed8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L446ede.  v0.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L446ee2.  v0.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a.b` @type ^`io.reactivex.Scheduler` := v2 @kind object;
  #L446ee6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L446ef8.  v0:= 0I;
  #L446efa.  v1:= 1I;
  #L446efc.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L446f02.  v0:= temp;
  #L446f04.  if v0 == 0 then goto L446f1c;
  #L446f08.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a.b` @type ^`io.reactivex.Scheduler` @kind object;
  #L446f0c.  v1:= new `io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a$a`;
  #L446f10.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$a$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$a;)V` @kind direct;
  #L446f16.  call temp:= `scheduleDirect`(v0, v1) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L446f1c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L446ebc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L446ec2.  v0:= temp;
  #L446ec4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L446f30.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L446f36.  v0:= temp;
  #L446f38.  if v0 != 0 then goto L446f46;
  #L446f3c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L446f40.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L446f46.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L446f58.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L446f5e.  v0:= temp;
  #L446f60.  if v0 == 0 then goto L446f6c;
  #L446f64.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L446f6a.  return @kind void;
  #L446f6c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L446f70.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L446f76.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L446f88.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L446f8e.  v0:= temp;
  #L446f90.  if v0 != 0 then goto L446f9e;
  #L446f94.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L446f98.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L446f9e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L446fb0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L446fb4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L446fba.  v0:= temp;
  #L446fbc.  if v0 == 0 then goto L446fce;
  #L446fc0.  v1.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L446fc4.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L446fc8.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L446fce.  return @kind void;
}
