record `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.a` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.c` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `io.reactivex.ObservableSource` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.<init>:(Lio/reactivex/Observer;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L442714.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L44271a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L44271e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L442724.  v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L442728.  v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.a` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L44272c.  v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.b` @type ^`io.reactivex.ObservableSource` := v3 @kind object;
  #L442730.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442744.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L442748.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44274e.  call `c`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.c:()V` @kind virtual;
  #L442754.  return @kind void;
}
procedure `void` `b`() @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.b:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `c`() @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.c:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L442790.  v0:= 0I;
  #L442792.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L442798.  v0:= temp @kind object;
  #L44279a.  if v0 == 0 then goto L4427a8;
  #L44279e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L4427a2.  call `onNext`(v1, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4427a8.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442768.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44276c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L442772.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L442776.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44277c.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.e:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4427bc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4427c0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4427c6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L4427ca.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4427d0.  return @kind void;
}
procedure `void` `f`() @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.f:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `g`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.g:(Lio/reactivex/disposables/Disposable;)Z` @AccessFlag  {
    temp;
    v0;

  #L4426f4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4426f8.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4426fe.  v2:= temp;
  #L442700.  return v2;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4426c8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4426cc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4426d2.  v0:= temp @kind object;
  #L4426d4.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4426d8.  if v0 != v1 then goto L4426e0;
  #L4426dc.  v0:= 1I;
  #L4426de.  goto L4426e2;
  #L4426e0.  v0:= 0I;
  #L4426e2.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4427e4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4427e8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4427ee.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.b:()V` @kind virtual;
  #L4427f4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442808.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44280c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L442812.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L442816.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44281c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L442830.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L442836.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442848.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L44284c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L442852.  v0:= temp;
  #L442854.  if v0 == 0 then goto L44288a;
  #L442858.  v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.d` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L44285c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L442860.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L442866.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44286a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L442870.  v2:= temp @kind object;
  #L442872.  if v2 != 0 then goto L44288a;
  #L442876.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.b` @type ^`io.reactivex.ObservableSource` @kind object;
  #L44287a.  v0:= new `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$d`;
  #L44287e.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$d;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;)V` @kind direct;
  #L442884.  call `subscribe`(v2, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L44288a.  return @kind void;
}
