record `io.reactivex.internal.operators.observable.ObservableSequenceEqual$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.ArrayCompositeDisposable` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.c` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.d` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.e` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableSequenceEqual$b`[] `io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.g` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.h` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.i` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `int` v2 , `io.reactivex.ObservableSource` v3 @kind object, `io.reactivex.ObservableSource` v4 @kind object, `io.reactivex.functions.BiPredicate` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$a;.<init>:(Lio/reactivex/Observer;ILio/reactivex/ObservableSource;Lio/reactivex/ObservableSource;Lio/reactivex/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4430f8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4430fe.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L443102.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.d` @type ^`io.reactivex.ObservableSource` := v3 @kind object;
  #L443106.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.e` @type ^`io.reactivex.ObservableSource` := v4 @kind object;
  #L44310a.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.b` @type ^`io.reactivex.functions.BiPredicate` := v5 @kind object;
  #L44310e.  v1:= 2I;
  #L443110.  v3:= new `io.reactivex.internal.operators.observable.ObservableSequenceEqual$b`[v1];
  #L443114.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.f` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqual$b`[] := v3 @kind object;
  #L443118.  v4:= new `io.reactivex.internal.operators.observable.ObservableSequenceEqual$b`;
  #L44311c.  v5:= 0I;
  #L44311e.  call `<init>`(v4, v0, v5, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$b;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$a;II)V` @kind direct;
  #L443124.  v3[v5]:= v4 @kind object;
  #L443128.  v4:= new `io.reactivex.internal.operators.observable.ObservableSequenceEqual$b`;
  #L44312c.  v5:= 1I;
  #L44312e.  call `<init>`(v4, v0, v5, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$b;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$a;II)V` @kind direct;
  #L443134.  v3[v5]:= v4 @kind object;
  #L443138.  v2:= new `io.reactivex.internal.disposables.ArrayCompositeDisposable`;
  #L44313c.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.<init>:(I)V` @kind direct;
  #L443142.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.c` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` := v2 @kind object;
  #L443146.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a` v1 @kind this, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v2 @kind object, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$a;.a:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @AccessFlag  {
    temp;
    v0;

  #L443158.  v0:= 1I;
  #L44315a.  v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.g` @type ^`boolean` := v0 @kind boolean;
  #L44315e.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L443164.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L44316a.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a` v12 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4431d4.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4431da.  v0:= temp;
  #L4431dc.  if v0 == 0 then goto L4431e2;
  #L4431e0.  return @kind void;
  #L4431e2.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.f` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqual$b`[] @kind object;
  #L4431e6.  v1:= 0I;
  #L4431e8.  v2:= v0[v1] @kind object;
  #L4431ec.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4431f0.  v4:= 1I;
  #L4431f2.  v0:= v0[v4] @kind object;
  #L4431f6.  v5:= v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4431fa.  v6:= 1I;
  #L4431fc.  v7:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.g` @type ^`boolean` @kind boolean;
  #L443200.  if v7 == 0 then goto L443212;
  #L443204.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L44320a.  call `clear`(v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L443210.  return @kind void;
  #L443212.  v7:= v2.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$b.d` @type ^`boolean` @kind boolean;
  #L443216.  if v7 == 0 then goto L443234;
  #L44321a.  v8:= v2.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$b.e` @type ^`java.lang.Throwable` @kind object;
  #L44321e.  if v8 == 0 then goto L443234;
  #L443222.  call `a`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$a;.a:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L443228.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L44322c.  call `onError`(v0, v8) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L443232.  return @kind void;
  #L443234.  v8:= v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$b.d` @type ^`boolean` @kind boolean;
  #L443238.  if v8 == 0 then goto L443256;
  #L44323c.  v9:= v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$b.e` @type ^`java.lang.Throwable` @kind object;
  #L443240.  if v9 == 0 then goto L443256;
  #L443244.  call `a`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$a;.a:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L44324a.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L44324e.  call `onError`(v0, v9) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L443254.  return @kind void;
  #L443256.  v9:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.h` @type ^`java.lang.Object` @kind object;
  #L44325a.  if v9 != 0 then goto L44326a;
  #L44325e.  call temp:= `poll`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L443264.  v9:= temp @kind object;
  #L443266.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.h` @type ^`java.lang.Object` := v9 @kind object;
  #L44326a.  v9:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.h` @type ^`java.lang.Object` @kind object;
  #L44326e.  if v9 != 0 then goto L443276;
  #L443272.  v9:= 1I;
  #L443274.  goto L443278;
  #L443276.  v9:= 0I;
  #L443278.  v10:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.i` @type ^`java.lang.Object` @kind object;
  #L44327c.  if v10 != 0 then goto L44328c;
  #L443280.  call temp:= `poll`(v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L443286.  v10:= temp @kind object;
  #L443288.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.i` @type ^`java.lang.Object` := v10 @kind object;
  #L44328c.  v10:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.i` @type ^`java.lang.Object` @kind object;
  #L443290.  if v10 != 0 then goto L443298;
  #L443294.  v11:= 1I;
  #L443296.  goto L44329a;
  #L443298.  v11:= 0I;
  #L44329a.  if v7 == 0 then goto L4432c4;
  #L44329e.  if v8 == 0 then goto L4432c4;
  #L4432a2.  if v9 == 0 then goto L4432c4;
  #L4432a6.  if v11 == 0 then goto L4432c4;
  #L4432aa.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4432ae.  v1:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L4432b2.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4432b8.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4432bc.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4432c2.  return @kind void;
  #L4432c4.  if v7 == 0 then goto L4432f0;
  #L4432c8.  if v8 == 0 then goto L4432f0;
  #L4432cc.  if v9 == v11 then goto L4432f0;
  #L4432d0.  call `a`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$a;.a:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4432d6.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4432da.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L4432de.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4432e4.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4432e8.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4432ee.  return @kind void;
  #L4432f0.  if v9 != 0 then goto L443352;
  #L4432f4.  if v11 != 0 then goto L443352;
  #L4432f8.  v7:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.b` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L4432fc.  v8:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.h` @type ^`java.lang.Object` @kind object;
  #L443300.  call temp:= `test`(v7, v8, v10) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L443306.  v7:= temp;
  #L443308.  if v7 != 0 then goto L44332c;
  #L44330c.  call `a`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$a;.a:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L443312.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L443316.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L44331a.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L443320.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L443324.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L44332a.  return @kind void;
  #L44332c.  v7:= 0I;
  #L44332e.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.h` @type ^`java.lang.Object` := v7 @kind object;
  #L443332.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.i` @type ^`java.lang.Object` := v7 @kind object;
  #L443336.  goto L443352;
  #L443338.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44333a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L443340.  call `a`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$a;.a:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L443346.  v1:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L44334a.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L443350.  return @kind void;
  #L443352.  if v9 != 0 then goto L44335a;
  #L443356.  if v11 == 0 then goto L4431fc;
  #L44335a.  v6:= -v6 @kind int;
  #L44335c.  call temp:= `addAndGet`(v12, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L443362.  v6:= temp;
  #L443364.  if v6 != 0 then goto L4431fc;
  #L443368.  return @kind void;
  catch `java.lang.Throwable` @[L4432f8..L443308] goto L443338;
}
procedure `boolean` `c`(`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$a;.c:(Lio/reactivex/disposables/Disposable;I)Z` @AccessFlag  {
    temp;
    v0;

  #L4430d8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.c` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L4430dc.  call temp:= `setResource`(v0, v3, v2) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.setResource:(ILio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4430e2.  v2:= temp;
  #L4430e4.  return v2;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$a;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L443388.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.f` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqual$b`[] @kind object;
  #L44338c.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.d` @type ^`io.reactivex.ObservableSource` @kind object;
  #L443390.  v2:= 0I;
  #L443392.  v2:= v0[v2] @kind object;
  #L443396.  call `subscribe`(v1, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L44339c.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.e` @type ^`io.reactivex.ObservableSource` @kind object;
  #L4433a0.  v2:= 1I;
  #L4433a2.  v0:= v0[v2] @kind object;
  #L4433a6.  call `subscribe`(v1, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4433ac.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44317c.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.g` @type ^`boolean` @kind boolean;
  #L443180.  if v0 != 0 then goto L4431c2;
  #L443184.  v0:= 1I;
  #L443186.  v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.g` @type ^`boolean` := v0 @kind boolean;
  #L44318a.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.c` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L44318e.  call `dispose`(v1) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.dispose:()V` @kind virtual;
  #L443194.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44319a.  v1:= temp;
  #L44319c.  if v1 != 0 then goto L4431c2;
  #L4431a0.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.f` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqual$b`[] @kind object;
  #L4431a4.  v2:= 0I;
  #L4431a6.  v2:= v1[v2] @kind object;
  #L4431aa.  v2:= v2.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4431ae.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4431b4.  v0:= v1[v0] @kind object;
  #L4431b8.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4431bc.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4431c2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4430c0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.g` @type ^`boolean` @kind boolean;
  #L4430c4.  return v0;
}
