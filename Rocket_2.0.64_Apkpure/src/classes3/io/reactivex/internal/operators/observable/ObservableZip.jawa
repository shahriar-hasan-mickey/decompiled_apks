record `io.reactivex.internal.operators.observable.ObservableZip` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Observable` @kind class {
  `io.reactivex.ObservableSource`[] `io.reactivex.internal.operators.observable.ObservableZip.a` @AccessFlag FINAL;
  `java.lang.Iterable` `io.reactivex.internal.operators.observable.ObservableZip.b` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableZip.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableZip.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableZip.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableZip` v0 @kind this, `io.reactivex.ObservableSource`[] v1 @kind object, `java.lang.Iterable` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 , `boolean` v5 ) @signature `Lio/reactivex/internal/operators/observable/ObservableZip;.<init>:([Lio/reactivex/ObservableSource;Ljava/lang/Iterable;Lio/reactivex/functions/Function;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L44a3f0.  call `<init>`(v0) @signature `Lio/reactivex/Observable;.<init>:()V` @kind direct;
  #L44a3f6.  v0.`io.reactivex.internal.operators.observable.ObservableZip.a` @type ^`io.reactivex.ObservableSource`[] := v1 @kind object;
  #L44a3fa.  v0.`io.reactivex.internal.operators.observable.ObservableZip.b` @type ^`java.lang.Iterable` := v2 @kind object;
  #L44a3fe.  v0.`io.reactivex.internal.operators.observable.ObservableZip.c` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L44a402.  v0.`io.reactivex.internal.operators.observable.ObservableZip.d` @type ^`int` := v4;
  #L44a406.  v0.`io.reactivex.internal.operators.observable.ObservableZip.e` @type ^`boolean` := v5 @kind boolean;
  #L44a40a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableZip` v6 @kind this, `io.reactivex.Observer` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableZip;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L44a41c.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableZip.a` @type ^`io.reactivex.ObservableSource`[] @kind object;
  #L44a420.  if v0 != 0 then goto L44a478;
  #L44a424.  v0:= 8I;
  #L44a428.  v0:= new `io.reactivex.Observable`[v0];
  #L44a42c.  v1:= v6.`io.reactivex.internal.operators.observable.ObservableZip.b` @type ^`java.lang.Iterable` @kind object;
  #L44a430.  call temp:= `iterator`(v1) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L44a436.  v1:= temp @kind object;
  #L44a438.  v2:= 0I;
  #L44a43a.  v3:= 0I;
  #L44a43c.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L44a442.  v4:= temp;
  #L44a444.  if v4 == 0 then goto L44a47a;
  #L44a448.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L44a44e.  v4:= temp @kind object;
  #L44a450.  v4:= (`io.reactivex.ObservableSource`) v4 @kind object;
  #L44a454.  v5:= length @variable v0;
  #L44a456.  if v3 != v5 then goto L44a46c;
  #L44a45a.  v5:= v3 ^> 2;
  #L44a45e.  v5:= v5 + v3 @kind int;
  #L44a460.  v5:= new `io.reactivex.ObservableSource`[v5];
  #L44a464.  call `arraycopy`(v0, v2, v5, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L44a46a.  v0:= v5 @kind object;
  #L44a46c.  v5:= v3 + 1;
  #L44a470.  v0[v3]:= v4 @kind object;
  #L44a474.  v3:= v5;
  #L44a476.  goto L44a43c;
  #L44a478.  v3:= length @variable v0;
  #L44a47a.  if v3 != 0 then goto L44a486;
  #L44a47e.  call `complete`(v7) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.complete:(Lio/reactivex/Observer;)V` @kind static;
  #L44a484.  return @kind void;
  #L44a486.  v1:= new `io.reactivex.internal.operators.observable.ObservableZip$a`;
  #L44a48a.  v2:= v6.`io.reactivex.internal.operators.observable.ObservableZip.c` @type ^`io.reactivex.functions.Function` @kind object;
  #L44a48e.  v4:= v6.`io.reactivex.internal.operators.observable.ObservableZip.e` @type ^`boolean` @kind boolean;
  #L44a492.  call `<init>`(v1, v7, v2, v3, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L44a498.  v7:= v6.`io.reactivex.internal.operators.observable.ObservableZip.d` @type ^`int`;
  #L44a49c.  call `f`(v1, v0, v7) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.f:([Lio/reactivex/ObservableSource;I)V` @kind virtual;
  #L44a4a2.  return @kind void;
}
