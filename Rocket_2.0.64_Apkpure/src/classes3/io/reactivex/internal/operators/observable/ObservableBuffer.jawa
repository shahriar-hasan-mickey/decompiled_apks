record `io.reactivex.internal.operators.observable.ObservableBuffer` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.a` @kind class {
  `int` `io.reactivex.internal.operators.observable.ObservableBuffer.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableBuffer.b` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBuffer.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBuffer` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `int` v2 , `int` v3 , `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer;.<init>:(Lio/reactivex/ObservableSource;IILjava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L434ddc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/a;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L434de2.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer.a` @type ^`int` := v2;
  #L434de6.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer.b` @type ^`int` := v3;
  #L434dea.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer.c` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L434dee.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableBuffer` v5 @kind this, `io.reactivex.Observer` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L434e00.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer.b` @type ^`int`;
  #L434e04.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer.a` @type ^`int`;
  #L434e08.  if v0 != v1 then goto L434e32;
  #L434e0c.  v0:= new `io.reactivex.internal.operators.observable.ObservableBuffer$a`;
  #L434e10.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L434e14.  call `<init>`(v0, v6, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$a;.<init>:(Lio/reactivex/Observer;ILjava/util/concurrent/Callable;)V` @kind direct;
  #L434e1a.  call temp:= `a`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$a;.a:()Z` @kind virtual;
  #L434e20.  v6:= temp;
  #L434e22.  if v6 == 0 then goto L434e52;
  #L434e26.  v6:= v5.`io.reactivex.internal.operators.observable.a.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L434e2a.  call `subscribe`(v6, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L434e30.  goto L434e52;
  #L434e32.  v0:= v5.`io.reactivex.internal.operators.observable.a.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L434e36.  v1:= new `io.reactivex.internal.operators.observable.ObservableBuffer$b`;
  #L434e3a.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer.a` @type ^`int`;
  #L434e3e.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer.b` @type ^`int`;
  #L434e42.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L434e46.  call `<init>`(v1, v6, v2, v3, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$b;.<init>:(Lio/reactivex/Observer;IILjava/util/concurrent/Callable;)V` @kind direct;
  #L434e4c.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L434e52.  return @kind void;
}
