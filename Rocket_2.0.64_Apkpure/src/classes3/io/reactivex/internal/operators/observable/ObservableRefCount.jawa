record `io.reactivex.internal.operators.observable.ObservableRefCount` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.a` @kind class {
  `io.reactivex.observables.ConnectableObservable` `io.reactivex.internal.operators.observable.ObservableRefCount.a` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.observable.ObservableRefCount.b` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableRefCount.c` @AccessFlag FINAL;
  `java.util.concurrent.locks.ReentrantLock` `io.reactivex.internal.operators.observable.ObservableRefCount.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRefCount` v1 @kind this, `io.reactivex.observables.ConnectableObservable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.<init>:(Lio/reactivex/observables/ConnectableObservable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L440578.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/a;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L44057e.  v0:= new `io.reactivex.disposables.CompositeDisposable`;
  #L440582.  call `<init>`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L440588.  v1.`io.reactivex.internal.operators.observable.ObservableRefCount.b` @type ^`io.reactivex.disposables.CompositeDisposable` := v0 @kind object;
  #L44058c.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L440590.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L440596.  v1.`io.reactivex.internal.operators.observable.ObservableRefCount.c` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L44059a.  v0:= new `java.util.concurrent.locks.ReentrantLock`;
  #L44059e.  call `<init>`(v0) @signature `Ljava/util/concurrent/locks/ReentrantLock;.<init>:()V` @kind direct;
  #L4405a4.  v1.`io.reactivex.internal.operators.observable.ObservableRefCount.d` @type ^`java.util.concurrent.locks.ReentrantLock` := v0 @kind object;
  #L4405a8.  v1.`io.reactivex.internal.operators.observable.ObservableRefCount.a` @type ^`io.reactivex.observables.ConnectableObservable` := v2 @kind object;
  #L4405ac.  return @kind void;
}
procedure `io.reactivex.disposables.Disposable` `d`(`io.reactivex.internal.operators.observable.ObservableRefCount` v1 @kind this, `io.reactivex.disposables.CompositeDisposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.d:(Lio/reactivex/disposables/CompositeDisposable;)Lio/reactivex/disposables/Disposable;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L440538.  v0:= new `io.reactivex.internal.operators.observable.ObservableRefCount$c`;
  #L44053c.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$c;.<init>:(Lio/reactivex/internal/operators/observable/ObservableRefCount;Lio/reactivex/disposables/CompositeDisposable;)V` @kind direct;
  #L440542.  call temp:= `fromRunnable`(v0) @signature `Lio/reactivex/disposables/Disposables;.fromRunnable:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind static;
  #L440548.  v2:= temp @kind object;
  #L44054a.  return v2 @kind object;
}
procedure `io.reactivex.functions.Consumer` `f`(`io.reactivex.internal.operators.observable.ObservableRefCount` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `java.util.concurrent.atomic.AtomicBoolean` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.f:(Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicBoolean;)Lio/reactivex/functions/Consumer;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L44055c.  v0:= new `io.reactivex.internal.operators.observable.ObservableRefCount$b`;
  #L440560.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$b;.<init>:(Lio/reactivex/internal/operators/observable/ObservableRefCount;Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicBoolean;)V` @kind direct;
  #L440566.  return v0 @kind object;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableRefCount` v2 @kind this, `io.reactivex.Observer` v3 @kind object, `io.reactivex.disposables.CompositeDisposable` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.e:(Lio/reactivex/Observer;Lio/reactivex/disposables/CompositeDisposable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4405c0.  call temp:= `d`(v2, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.d:(Lio/reactivex/disposables/CompositeDisposable;)Lio/reactivex/disposables/Disposable;` @kind direct;
  #L4405c6.  v0:= temp @kind object;
  #L4405c8.  v1:= new `io.reactivex.internal.operators.observable.ObservableRefCount$a`;
  #L4405cc.  call `<init>`(v1, v2, v3, v4, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableRefCount;Lio/reactivex/Observer;Lio/reactivex/disposables/CompositeDisposable;Lio/reactivex/disposables/Disposable;)V` @kind direct;
  #L4405d2.  call `onSubscribe`(v3, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4405d8.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount.a` @type ^`io.reactivex.observables.ConnectableObservable` @kind object;
  #L4405dc.  call `subscribe`(v3, v1) @signature `Lio/reactivex/Observable;.subscribe:(Lio/reactivex/Observer;)V` @kind virtual;
  #L4405e2.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableRefCount` v2 @kind this, `io.reactivex.Observer` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4405f4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount.d` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L4405f8.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantLock;.lock:()V` @kind virtual;
  #L4405fe.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L440602.  call temp:= `incrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L440608.  v0:= temp;
  #L44060a.  v1:= 1I;
  #L44060c.  if v0 != v1 then goto L44065e;
  #L440610.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L440614.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:(Z)V` @kind direct;
  #L44061a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount.a` @type ^`io.reactivex.observables.ConnectableObservable` @kind object;
  #L44061e.  call temp:= `f`(v2, v3, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.f:(Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicBoolean;)Lio/reactivex/functions/Consumer;` @kind direct;
  #L440624.  v3:= temp @kind object;
  #L440626.  call `connect`(v1, v3) @signature `Lio/reactivex/observables/ConnectableObservable;.connect:(Lio/reactivex/functions/Consumer;)V` @kind virtual;
  #L44062c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L440632.  v3:= temp;
  #L440634.  if v3 == 0 then goto L440672;
  #L440638.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount.d` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L44063c.  call `unlock`(v3) @signature `Ljava/util/concurrent/locks/ReentrantLock;.unlock:()V` @kind virtual;
  #L440642.  goto L440672;
  #L440644.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L440646.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L44064c.  v0:= temp;
  #L44064e.  if v0 == 0 then goto L44065c;
  #L440652.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount.d` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L440656.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantLock;.unlock:()V` @kind virtual;
  #L44065c.  throw v3;
  #L44065e.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount.b` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L440662.  call `e`(v2, v3, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.e:(Lio/reactivex/Observer;Lio/reactivex/disposables/CompositeDisposable;)V` @kind virtual;
  #L440668.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount.d` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L44066c.  call `unlock`(v3) @signature `Ljava/util/concurrent/locks/ReentrantLock;.unlock:()V` @kind virtual;
  #L440672.  return @kind void;
  #L440674.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L440676.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount.d` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L44067a.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantLock;.unlock:()V` @kind virtual;
  #L440680.  throw v3;
  catch `java.lang.Throwable` @[L44061a..L44062c] goto L440644;
  catch `java.lang.Throwable` @[L44065e..L440668] goto L440674;
}
