record `io.reactivex.internal.operators.observable.ObservableConcatMap$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableConcatMap$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableConcatMap$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMap$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableConcatMap$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableConcatMap$a$a` `io.reactivex.internal.operators.observable.ObservableConcatMap$a.e` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableConcatMap$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMap$a.g` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.observable.ObservableConcatMap$a.h` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableConcatMap$a.i` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMap$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMap$a.k` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMap$a.l` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMap$a.m` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableConcatMap$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableConcatMap$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L435d88.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L435d8e.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L435d92.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L435d96.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.c` @type ^`int` := v3;
  #L435d9a.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.g` @type ^`boolean` := v4 @kind boolean;
  #L435d9e.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L435da2.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L435da8.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L435dac.  v2:= new `io.reactivex.internal.operators.observable.ObservableConcatMap$a$a`;
  #L435db0.  call `<init>`(v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;)V` @kind direct;
  #L435db6.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.e` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$a$a` := v2 @kind object;
  #L435dba.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L435dbe.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L435dc4.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.f` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L435dc8.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableConcatMap$a` v7 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L435e08.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L435e0e.  v0:= temp;
  #L435e10.  if v0 == 0 then goto L435e16;
  #L435e14.  return @kind void;
  #L435e16.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L435e1a.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L435e1e.  v2:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L435e22.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.j` @type ^`boolean` @kind boolean;
  #L435e26.  if v3 != 0 then goto L435f62;
  #L435e2a.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.l` @type ^`boolean` @kind boolean;
  #L435e2e.  if v3 == 0 then goto L435e3a;
  #L435e32.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L435e38.  return @kind void;
  #L435e3a.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.g` @type ^`boolean` @kind boolean;
  #L435e3e.  if v3 != 0 then goto L435e68;
  #L435e42.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L435e48.  v3:= temp @kind object;
  #L435e4a.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L435e4e.  if v3 == 0 then goto L435e68;
  #L435e52.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L435e58.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L435e5e.  v1:= temp @kind object;
  #L435e60.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L435e66.  return @kind void;
  #L435e68.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.k` @type ^`boolean` @kind boolean;
  #L435e6c.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L435e72.  v4:= temp @kind object;
  #L435e74.  v5:= 1I;
  #L435e76.  if v4 != 0 then goto L435e7e;
  #L435e7a.  v6:= 1I;
  #L435e7c.  goto L435e80;
  #L435e7e.  v6:= 0I;
  #L435e80.  if v3 == 0 then goto L435ea4;
  #L435e84.  if v6 == 0 then goto L435ea4;
  #L435e88.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L435e8e.  v1:= temp @kind object;
  #L435e90.  if v1 == 0 then goto L435e9c;
  #L435e94.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L435e9a.  goto L435ea2;
  #L435e9c.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L435ea2.  return @kind void;
  #L435ea4.  if v6 != 0 then goto L435f62;
  #L435ea8.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L435eac.  call temp:= `apply`(v3, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L435eb2.  v3:= temp @kind object;
  #L435eb4.  v4:= "The mapper returned a null ObservableSource" @kind object;
  #L435eb8.  call temp:= `requireNonNull`(v3, v4) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L435ebe.  v3:= temp @kind object;
  #L435ec0.  v3:= (`io.reactivex.ObservableSource`) v3 @kind object;
  #L435ec4.  v4:= instanceof @variable v3 @type ^`java.util.concurrent.Callable` @kind boolean;
  #L435ec8.  if v4 == 0 then goto L435efc;
  #L435ecc.  v3:= (`java.util.concurrent.Callable`) v3 @kind object;
  #L435ed0.  call temp:= `call`(v3) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L435ed6.  v3:= temp @kind object;
  #L435ed8.  if v3 == 0 then goto L435e22;
  #L435edc.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.l` @type ^`boolean` @kind boolean;
  #L435ee0.  if v4 != 0 then goto L435e22;
  #L435ee4.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L435eea.  goto L435e22;
  #L435eec.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L435eee.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L435ef4.  call temp:= `addThrowable`(v2, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L435efa.  goto L435e22;
  #L435efc.  v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.j` @type ^`boolean` := v5 @kind boolean;
  #L435f00.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.e` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$a$a` @kind object;
  #L435f04.  call `subscribe`(v3, v4) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L435f0a.  goto L435f62;
  #L435f0c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L435f0e.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L435f14.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.i` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L435f18.  call `dispose`(v4) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L435f1e.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L435f24.  call temp:= `addThrowable`(v2, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L435f2a.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L435f30.  v1:= temp @kind object;
  #L435f32.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L435f38.  return @kind void;
  #L435f3a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L435f3c.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L435f42.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.i` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L435f46.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L435f4c.  call temp:= `addThrowable`(v2, v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L435f52.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L435f58.  v1:= temp @kind object;
  #L435f5a.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L435f60.  return @kind void;
  #L435f62.  call temp:= `decrementAndGet`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L435f68.  v3:= temp;
  #L435f6a.  if v3 != 0 then goto L435e22;
  #L435f6e.  return @kind void;
  catch `java.lang.Throwable` @[L435e6c..L435e74] goto L435f3a;
  catch `java.lang.Throwable` @[L435ea8..L435ec4] goto L435f0c;
  catch `java.lang.Throwable` @[L435ecc..L435ed8] goto L435eec;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableConcatMap$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435ddc.  v0:= 1I;
  #L435dde.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.l` @type ^`boolean` := v0 @kind boolean;
  #L435de2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.i` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L435de6.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L435dec.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.f` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L435df0.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L435df6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableConcatMap$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435d68.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.i` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L435d6c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L435d72.  v0:= temp;
  #L435d74.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableConcatMap$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435fa4.  v0:= 1I;
  #L435fa6.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.k` @type ^`boolean` := v0 @kind boolean;
  #L435faa.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;.a:()V` @kind virtual;
  #L435fb0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableConcatMap$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435fc4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L435fc8.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L435fce.  v0:= temp;
  #L435fd0.  if v0 == 0 then goto L435fe2;
  #L435fd4.  v2:= 1I;
  #L435fd6.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.k` @type ^`boolean` := v2 @kind boolean;
  #L435fda.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;.a:()V` @kind virtual;
  #L435fe0.  goto L435fe8;
  #L435fe2.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L435fe8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableConcatMap$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435ffc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.m` @type ^`int`;
  #L436000.  if v0 != 0 then goto L43600e;
  #L436004.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L436008.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L43600e.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;.a:()V` @kind virtual;
  #L436014.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableConcatMap$a` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L436028.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.i` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43602c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L436032.  v0:= temp;
  #L436034.  if v0 == 0 then goto L4360ac;
  #L436038.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.i` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L43603c.  v0:= instanceof @variable v3 @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind boolean;
  #L436040.  if v0 == 0 then goto L436090;
  #L436044.  v3:= (`io.reactivex.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L436048.  v0:= 3I;
  #L43604a.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L436050.  v0:= temp;
  #L436052.  v1:= 1I;
  #L436054.  if v0 != v1 then goto L436076;
  #L436058.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.m` @type ^`int` := v0;
  #L43605c.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L436060.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.k` @type ^`boolean` := v1 @kind boolean;
  #L436064.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L436068.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43606e.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;.a:()V` @kind virtual;
  #L436074.  return @kind void;
  #L436076.  v1:= 2I;
  #L436078.  if v0 != v1 then goto L436090;
  #L43607c.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.m` @type ^`int` := v0;
  #L436080.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L436084.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L436088.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43608e.  return @kind void;
  #L436090.  v3:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L436094.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.c` @type ^`int`;
  #L436098.  call `<init>`(v3, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L43609e.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4360a2.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4360a6.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4360ac.  return @kind void;
}
