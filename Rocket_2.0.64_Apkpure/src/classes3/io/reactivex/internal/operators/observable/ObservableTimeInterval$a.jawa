record `io.reactivex.internal.operators.observable.ObservableTimeInterval$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableTimeInterval$a.a` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableTimeInterval$a.b` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableTimeInterval$a.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableTimeInterval$a.d` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableTimeInterval$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTimeInterval$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.util.concurrent.TimeUnit` v2 @kind object, `io.reactivex.Scheduler` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeInterval$a;.<init>:(Lio/reactivex/Observer;Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L445cec.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L445cf2.  v0.`io.reactivex.internal.operators.observable.ObservableTimeInterval$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L445cf6.  v0.`io.reactivex.internal.operators.observable.ObservableTimeInterval$a.c` @type ^`io.reactivex.Scheduler` := v3 @kind object;
  #L445cfa.  v0.`io.reactivex.internal.operators.observable.ObservableTimeInterval$a.b` @type ^`java.util.concurrent.TimeUnit` := v2 @kind object;
  #L445cfe.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTimeInterval$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeInterval$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L445d10.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeInterval$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L445d14.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L445d1a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTimeInterval$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeInterval$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L445ccc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeInterval$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L445cd0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L445cd6.  v0:= temp;
  #L445cd8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTimeInterval$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeInterval$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L445d2c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeInterval$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L445d30.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L445d36.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTimeInterval$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeInterval$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L445d48.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeInterval$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L445d4c.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L445d52.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTimeInterval$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeInterval$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L445d64.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeInterval$a.c` @type ^`io.reactivex.Scheduler` @kind object;
  #L445d68.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableTimeInterval$a.b` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L445d6c.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L445d72.  v0:= temp @kind wide;
  #L445d74.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableTimeInterval$a.d` @type ^`long` @kind wide;
  #L445d78.  v5.`io.reactivex.internal.operators.observable.ObservableTimeInterval$a.d` @type ^`long` := v0 @kind wide;
  #L445d7c.  v0:= v0 - v2 @kind long;
  #L445d7e.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableTimeInterval$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L445d82.  v3:= new `io.reactivex.schedulers.Timed`;
  #L445d86.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableTimeInterval$a.b` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L445d8a.  call `<init>`(v3, v6, v0, v4) @signature `Lio/reactivex/schedulers/Timed;.<init>:(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L445d90.  call `onNext`(v2, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L445d96.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTimeInterval$a` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeInterval$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L445da8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTimeInterval$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L445dac.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L445db2.  v0:= temp;
  #L445db4.  if v0 == 0 then goto L445dda;
  #L445db8.  v2.`io.reactivex.internal.operators.observable.ObservableTimeInterval$a.e` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L445dbc.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableTimeInterval$a.c` @type ^`io.reactivex.Scheduler` @kind object;
  #L445dc0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTimeInterval$a.b` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L445dc4.  call temp:= `now`(v3, v0) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L445dca.  v0:= temp @kind wide;
  #L445dcc.  v2.`io.reactivex.internal.operators.observable.ObservableTimeInterval$a.d` @type ^`long` := v0 @kind wide;
  #L445dd0.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableTimeInterval$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L445dd4.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L445dda.  return @kind void;
}
