record `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c` @kind class {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a.f` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.ObservableSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44257c.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.<init>:(Lio/reactivex/Observer;Lio/reactivex/ObservableSource;)V` @kind direct;
  #L442582.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L442586.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L44258c.  v0.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a.e` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L442590.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4425a4.  v0:= 1I;
  #L4425a6.  v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a.f` @type ^`boolean` := v0 @kind boolean;
  #L4425aa.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4425ae.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4425b4.  v0:= temp;
  #L4425b6.  if v0 != 0 then goto L4425ca;
  #L4425ba.  call `d`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.d:()V` @kind virtual;
  #L4425c0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L4425c4.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4425ca.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$a;.c:()V` @AccessFlag  {
    temp;
    v0;

  #L4425dc.  v0:= 1I;
  #L4425de.  v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a.f` @type ^`boolean` := v0 @kind boolean;
  #L4425e2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4425e6.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4425ec.  v0:= temp;
  #L4425ee.  if v0 != 0 then goto L442602;
  #L4425f2.  call `d`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.d:()V` @kind virtual;
  #L4425f8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L4425fc.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L442602.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$a;.f:()V` @AccessFlag  {
    temp;
    v0;

  #L442614.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L442618.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44261e.  v0:= temp;
  #L442620.  if v0 != 0 then goto L44264e;
  #L442624.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a.f` @type ^`boolean` @kind boolean;
  #L442628.  call `d`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.d:()V` @kind virtual;
  #L44262e.  if v0 == 0 then goto L44263e;
  #L442632.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L442636.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L44263c.  return @kind void;
  #L44263e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L442642.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L442648.  v0:= temp;
  #L44264a.  if v0 != 0 then goto L442624;
  #L44264e.  return @kind void;
}
