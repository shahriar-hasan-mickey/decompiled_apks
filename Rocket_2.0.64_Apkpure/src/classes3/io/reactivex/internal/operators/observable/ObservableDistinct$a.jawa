record `io.reactivex.internal.operators.observable.ObservableDistinct$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicFuseableObserver` @kind class {
  `java.util.Collection` `io.reactivex.internal.operators.observable.ObservableDistinct$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableDistinct$a.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableDistinct$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `java.util.Collection` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinct$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Ljava/util/Collection;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43816c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L438172.  v0.`io.reactivex.internal.operators.observable.ObservableDistinct$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L438176.  v0.`io.reactivex.internal.operators.observable.ObservableDistinct$a.a` @type ^`java.util.Collection` := v3 @kind object;
  #L43817a.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableDistinct$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinct$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43818c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L438190.  call `clear`(v0) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L438196.  call `clear`(v1) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.clear:()V` @kind super;
  #L43819c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableDistinct$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinct$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4381b0.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.done` @type ^`boolean` @kind boolean;
  #L4381b4.  if v0 != 0 then goto L4381d2;
  #L4381b8.  v0:= 1I;
  #L4381ba.  v1.`io.reactivex.internal.observers.BasicFuseableObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4381be.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L4381c2.  call `clear`(v0) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L4381c8.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L4381cc.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4381d2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableDistinct$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinct$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4381e4.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.done` @type ^`boolean` @kind boolean;
  #L4381e8.  if v0 == 0 then goto L4381f4;
  #L4381ec.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4381f2.  goto L43820e;
  #L4381f4.  v0:= 1I;
  #L4381f6.  v1.`io.reactivex.internal.observers.BasicFuseableObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4381fa.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L4381fe.  call `clear`(v0) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L438204.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L438208.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43820e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableDistinct$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinct$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L438220.  v0:= v2.`io.reactivex.internal.observers.BasicFuseableObserver.done` @type ^`boolean` @kind boolean;
  #L438224.  if v0 == 0 then goto L43822a;
  #L438228.  return @kind void;
  #L43822a.  v0:= v2.`io.reactivex.internal.observers.BasicFuseableObserver.sourceMode` @type ^`int`;
  #L43822e.  if v0 != 0 then goto L438270;
  #L438232.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableDistinct$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L438236.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43823c.  v0:= temp @kind object;
  #L43823e.  v1:= "The keySelector returned a null key" @kind object;
  #L438242.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L438248.  v0:= temp @kind object;
  #L43824a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L43824e.  call temp:= `add`(v1, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L438254.  v0:= temp;
  #L438256.  if v0 == 0 then goto L43827c;
  #L43825a.  v0:= v2.`io.reactivex.internal.observers.BasicFuseableObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L43825e.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L438264.  goto L43827c;
  #L438266.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L438268.  call `fail`(v2, v3) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43826e.  return @kind void;
  #L438270.  v3:= v2.`io.reactivex.internal.observers.BasicFuseableObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L438274.  v0:= 0I;
  #L438276.  call `onNext`(v3, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43827c.  return @kind void;
  catch `java.lang.Throwable` @[L438232..L438256] goto L438266;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableDistinct$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinct$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L438120.  v0:= v4.`io.reactivex.internal.observers.BasicFuseableObserver.qs` @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind object;
  #L438124.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L43812a.  v0:= temp @kind object;
  #L43812c.  if v0 == 0 then goto L438158;
  #L438130.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L438134.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableDistinct$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L438138.  call temp:= `apply`(v2, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43813e.  v2:= temp @kind object;
  #L438140.  v3:= "The keySelector returned a null key" @kind object;
  #L438144.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43814a.  v2:= temp @kind object;
  #L43814c.  call temp:= `add`(v1, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L438152.  v1:= temp;
  #L438154.  if v1 == 0 then goto L438120;
  #L438158.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableDistinct$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinct$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L438104.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L43810a.  v1:= temp;
  #L43810c.  return v1;
}
