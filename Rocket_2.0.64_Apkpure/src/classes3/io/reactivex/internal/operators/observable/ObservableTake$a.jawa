record `io.reactivex.internal.operators.observable.ObservableTake$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableTake$a.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableTake$a.b` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableTake$a.c` @AccessFlag ;
  `long` `io.reactivex.internal.operators.observable.ObservableTake$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTake$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableTake$a;.<init>:(Lio/reactivex/Observer;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L444e48.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L444e4e.  v0.`io.reactivex.internal.operators.observable.ObservableTake$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L444e52.  v0.`io.reactivex.internal.operators.observable.ObservableTake$a.d` @type ^`long` := v2 @kind wide;
  #L444e56.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTake$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTake$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444e68.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTake$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L444e6c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L444e72.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTake$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTake$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444e28.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTake$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L444e2c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L444e32.  v0:= temp;
  #L444e34.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTake$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTake$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444e84.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTake$a.b` @type ^`boolean` @kind boolean;
  #L444e88.  if v0 != 0 then goto L444ea6;
  #L444e8c.  v0:= 1I;
  #L444e8e.  v1.`io.reactivex.internal.operators.observable.ObservableTake$a.b` @type ^`boolean` := v0 @kind boolean;
  #L444e92.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTake$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L444e96.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L444e9c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTake$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L444ea0.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L444ea6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTake$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTake$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444eb8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTake$a.b` @type ^`boolean` @kind boolean;
  #L444ebc.  if v0 == 0 then goto L444ec8;
  #L444ec0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L444ec6.  return @kind void;
  #L444ec8.  v0:= 1I;
  #L444eca.  v1.`io.reactivex.internal.operators.observable.ObservableTake$a.b` @type ^`boolean` := v0 @kind boolean;
  #L444ece.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTake$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L444ed2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L444ed8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTake$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L444edc.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L444ee2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTake$a` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTake$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L444ef4.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableTake$a.b` @type ^`boolean` @kind boolean;
  #L444ef8.  if v0 != 0 then goto L444f3a;
  #L444efc.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableTake$a.d` @type ^`long` @kind wide;
  #L444f00.  v2:= 1L;
  #L444f04.  v2:= v0 - v2 @kind long;
  #L444f08.  v7.`io.reactivex.internal.operators.observable.ObservableTake$a.d` @type ^`long` := v2 @kind wide;
  #L444f0c.  v4:= 0L;
  #L444f10.  v6:= lcmp(v0, v4);
  #L444f14.  if v6 <= 0 then goto L444f3a;
  #L444f18.  v0:= lcmp(v2, v4);
  #L444f1c.  if v0 != 0 then goto L444f24;
  #L444f20.  v0:= 1I;
  #L444f22.  goto L444f26;
  #L444f24.  v0:= 0I;
  #L444f26.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableTake$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L444f2a.  call `onNext`(v1, v8) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L444f30.  if v0 == 0 then goto L444f3a;
  #L444f34.  call `onComplete`(v7) @signature `Lio/reactivex/internal/operators/observable/ObservableTake$a;.onComplete:()V` @kind virtual;
  #L444f3a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTake$a` v5 @kind this, `io.reactivex.disposables.Disposable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTake$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L444f4c.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTake$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L444f50.  call temp:= `validate`(v0, v6) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L444f56.  v0:= temp;
  #L444f58.  if v0 == 0 then goto L444f92;
  #L444f5c.  v5.`io.reactivex.internal.operators.observable.ObservableTake$a.c` @type ^`io.reactivex.disposables.Disposable` := v6 @kind object;
  #L444f60.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTake$a.d` @type ^`long` @kind wide;
  #L444f64.  v2:= 0L;
  #L444f68.  v4:= lcmp(v0, v2);
  #L444f6c.  if v4 != 0 then goto L444f88;
  #L444f70.  v0:= 1I;
  #L444f72.  v5.`io.reactivex.internal.operators.observable.ObservableTake$a.b` @type ^`boolean` := v0 @kind boolean;
  #L444f76.  call `dispose`(v6) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L444f7c.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableTake$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L444f80.  call `complete`(v6) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.complete:(Lio/reactivex/Observer;)V` @kind static;
  #L444f86.  goto L444f92;
  #L444f88.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableTake$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L444f8c.  call `onSubscribe`(v6, v5) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L444f92.  return @kind void;
}
