record `io.reactivex.internal.operators.observable.ObservableReplay` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.observables.ConnectableObservable` @kind class, `io.reactivex.internal.fuseable.HasUpstreamObservableSource` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableReplay.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableReplay.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableReplay$b` `io.reactivex.internal.operators.observable.ObservableReplay.c` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableReplay.d` @AccessFlag FINAL;
}
global `io.reactivex.internal.operators.observable.ObservableReplay$b` `@@io.reactivex.internal.operators.observable.ObservableReplay.e` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L441a94.  v0:= new `io.reactivex.internal.operators.observable.ObservableReplay$o`;
  #L441a98.  call `<init>`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$o;.<init>:()V` @kind direct;
  #L441a9e.  `@@io.reactivex.internal.operators.observable.ObservableReplay.e` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$b` := v0 @kind object;
  #L441aa2.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableReplay` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.ObservableSource` v2 @kind object, `java.util.concurrent.atomic.AtomicReference` v3 @kind object, `io.reactivex.internal.operators.observable.ObservableReplay$b` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/ObservableSource;Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/internal/operators/observable/ObservableReplay$b;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L441ab4.  call `<init>`(v0) @signature `Lio/reactivex/observables/ConnectableObservable;.<init>:()V` @kind direct;
  #L441aba.  v0.`io.reactivex.internal.operators.observable.ObservableReplay.d` @type ^`io.reactivex.ObservableSource` := v1 @kind object;
  #L441abe.  v0.`io.reactivex.internal.operators.observable.ObservableReplay.a` @type ^`io.reactivex.ObservableSource` := v2 @kind object;
  #L441ac2.  v0.`io.reactivex.internal.operators.observable.ObservableReplay.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L441ac6.  v0.`io.reactivex.internal.operators.observable.ObservableReplay.c` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$b` := v4 @kind object;
  #L441aca.  return @kind void;
}
procedure `io.reactivex.observables.ConnectableObservable` `create`(`io.reactivex.ObservableSource` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.create:(Lio/reactivex/ObservableSource;I)Lio/reactivex/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L441980.  v0:= 2147483647I;
  #L441986.  if v2 != v0 then goto L441994;
  #L44198a.  call temp:= `createFrom`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.createFrom:(Lio/reactivex/ObservableSource;)Lio/reactivex/observables/ConnectableObservable;` @kind static;
  #L441990.  v1:= temp @kind object;
  #L441992.  return v1 @kind object;
  #L441994.  v0:= new `io.reactivex.internal.operators.observable.ObservableReplay$i`;
  #L441998.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$i;.<init>:(I)V` @kind direct;
  #L44199e.  call temp:= `d`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.d:(Lio/reactivex/ObservableSource;Lio/reactivex/internal/operators/observable/ObservableReplay$b;)Lio/reactivex/observables/ConnectableObservable;` @kind static;
  #L4419a4.  v1:= temp @kind object;
  #L4419a6.  return v1 @kind object;
}
procedure `io.reactivex.observables.ConnectableObservable` `create`(`io.reactivex.ObservableSource` v6 @kind object, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `io.reactivex.Scheduler` v10 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.create:(Lio/reactivex/ObservableSource;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4419f0.  v5:= 2147483647I;
  #L4419f6.  v0:= v6 @kind object;
  #L4419f8.  v1:= v7 @kind wide;
  #L4419fa.  v3:= v9 @kind object;
  #L4419fc.  v4:= v10 @kind object;
  #L4419fe.  call temp:= `create`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.create:(Lio/reactivex/ObservableSource;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/observables/ConnectableObservable;` @kind static;
  #L441a04.  v6:= temp @kind object;
  #L441a06.  return v6 @kind object;
}
procedure `io.reactivex.observables.ConnectableObservable` `create`(`io.reactivex.ObservableSource` v7 @kind object, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object, `int` v12 ) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.create:(Lio/reactivex/ObservableSource;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L441a18.  v6:= new `io.reactivex.internal.operators.observable.ObservableReplay$l`;
  #L441a1c.  v0:= v6 @kind object;
  #L441a1e.  v1:= v12;
  #L441a20.  v2:= v8 @kind wide;
  #L441a22.  v4:= v10 @kind object;
  #L441a24.  v5:= v11 @kind object;
  #L441a26.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$l;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L441a2c.  call temp:= `d`(v7, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.d:(Lio/reactivex/ObservableSource;Lio/reactivex/internal/operators/observable/ObservableReplay$b;)Lio/reactivex/observables/ConnectableObservable;` @kind static;
  #L441a32.  v7:= temp @kind object;
  #L441a34.  return v7 @kind object;
}
procedure `io.reactivex.observables.ConnectableObservable` `createFrom`(`io.reactivex.ObservableSource` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.createFrom:(Lio/reactivex/ObservableSource;)Lio/reactivex/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L441a48.  v0:= `@@io.reactivex.internal.operators.observable.ObservableReplay.e` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$b` @kind object;
  #L441a4c.  call temp:= `d`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.d:(Lio/reactivex/ObservableSource;Lio/reactivex/internal/operators/observable/ObservableReplay$b;)Lio/reactivex/observables/ConnectableObservable;` @kind static;
  #L441a52.  v1:= temp @kind object;
  #L441a54.  return v1 @kind object;
}
procedure `io.reactivex.observables.ConnectableObservable` `d`(`io.reactivex.ObservableSource` v3 @kind object, `io.reactivex.internal.operators.observable.ObservableReplay$b` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.d:(Lio/reactivex/ObservableSource;Lio/reactivex/internal/operators/observable/ObservableReplay$b;)Lio/reactivex/observables/ConnectableObservable;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4419b8.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4419bc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4419c2.  v1:= new `io.reactivex.internal.operators.observable.ObservableReplay$k`;
  #L4419c6.  call `<init>`(v1, v0, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$k;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/internal/operators/observable/ObservableReplay$b;)V` @kind direct;
  #L4419cc.  v2:= new `io.reactivex.internal.operators.observable.ObservableReplay`;
  #L4419d0.  call `<init>`(v2, v1, v3, v0, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/ObservableSource;Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/internal/operators/observable/ObservableReplay$b;)V` @kind direct;
  #L4419d6.  call temp:= `onAssembly`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/observables/ConnectableObservable;)Lio/reactivex/observables/ConnectableObservable;` @kind static;
  #L4419dc.  v3:= temp @kind object;
  #L4419de.  return v3 @kind object;
}
procedure `io.reactivex.Observable` `multicastSelector`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.multicastSelector:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L441944.  v0:= new `io.reactivex.internal.operators.observable.ObservableReplay$e`;
  #L441948.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$e;.<init>:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L44194e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Observable;)Lio/reactivex/Observable;` @kind static;
  #L441954.  v1:= temp @kind object;
  #L441956.  return v1 @kind object;
}
procedure `io.reactivex.observables.ConnectableObservable` `observeOn`(`io.reactivex.observables.ConnectableObservable` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.observeOn:(Lio/reactivex/observables/ConnectableObservable;Lio/reactivex/Scheduler;)Lio/reactivex/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L441a68.  call temp:= `observeOn`(v1, v2) @signature `Lio/reactivex/Observable;.observeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Observable;` @kind virtual;
  #L441a6e.  v2:= temp @kind object;
  #L441a70.  v0:= new `io.reactivex.internal.operators.observable.ObservableReplay$g`;
  #L441a74.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$g;.<init>:(Lio/reactivex/observables/ConnectableObservable;Lio/reactivex/Observable;)V` @kind direct;
  #L441a7a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/observables/ConnectableObservable;)Lio/reactivex/observables/ConnectableObservable;` @kind static;
  #L441a80.  v1:= temp @kind object;
  #L441a82.  return v1 @kind object;
}
procedure `void` `connect`(`io.reactivex.internal.operators.observable.ObservableReplay` v4 @kind this, `io.reactivex.functions.Consumer` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.connect:(Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L441adc.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableReplay.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L441ae0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L441ae6.  v0:= temp @kind object;
  #L441ae8.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$j`) v0 @kind object;
  #L441aec.  if v0 == 0 then goto L441afc;
  #L441af0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.isDisposed:()Z` @kind virtual;
  #L441af6.  v1:= temp;
  #L441af8.  if v1 == 0 then goto L441b26;
  #L441afc.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableReplay.c` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$b` @kind object;
  #L441b00.  call temp:= `call`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$b;.call:()Lio/reactivex/internal/operators/observable/ObservableReplay$h;` @kind interface;
  #L441b06.  v1:= temp @kind object;
  #L441b08.  v2:= new `io.reactivex.internal.operators.observable.ObservableReplay$j`;
  #L441b0c.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.<init>:(Lio/reactivex/internal/operators/observable/ObservableReplay$h;)V` @kind direct;
  #L441b12.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableReplay.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L441b16.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L441b1c.  v0:= temp;
  #L441b1e.  if v0 != 0 then goto L441b24;
  #L441b22.  goto L441adc;
  #L441b24.  v0:= v2 @kind object;
  #L441b26.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$j.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L441b2a.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L441b30.  v1:= temp;
  #L441b32.  v2:= 1I;
  #L441b34.  v3:= 0I;
  #L441b36.  if v1 != 0 then goto L441b4e;
  #L441b3a.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$j.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L441b3e.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L441b44.  v1:= temp;
  #L441b46.  if v1 == 0 then goto L441b4e;
  #L441b4a.  v1:= 1I;
  #L441b4c.  goto L441b50;
  #L441b4e.  v1:= 0I;
  #L441b50.  call `accept`(v5, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L441b56.  if v1 == 0 then goto L441b64;
  #L441b5a.  v5:= v4.`io.reactivex.internal.operators.observable.ObservableReplay.a` @type ^`io.reactivex.ObservableSource` @kind object;
  #L441b5e.  call `subscribe`(v5, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L441b64.  return @kind void;
  #L441b66.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L441b68.  if v1 == 0 then goto L441b76;
  #L441b6c.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$j.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L441b70.  call temp:= `compareAndSet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L441b76.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L441b7c.  call temp:= `wrapOrThrow`(v5) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L441b82.  v5:= temp @kind object;
  #L441b84.  throw v5;
  catch `java.lang.Throwable` @[L441b50..L441b56] goto L441b66;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableReplay` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L441ba4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReplay.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L441ba8.  v1:= 0I;
  #L441baa.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L441bb0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableReplay` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L441908.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44190c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L441912.  v0:= temp @kind object;
  #L441914.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L441918.  if v0 == 0 then goto L44192e;
  #L44191c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L441922.  v0:= temp;
  #L441924.  if v0 == 0 then goto L44192a;
  #L441928.  goto L44192e;
  #L44192a.  v0:= 0I;
  #L44192c.  goto L441930;
  #L44192e.  v0:= 1I;
  #L441930.  return v0;
}
procedure `io.reactivex.ObservableSource` `source`(`io.reactivex.internal.operators.observable.ObservableReplay` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.source:()Lio/reactivex/ObservableSource;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L441968.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay.a` @type ^`io.reactivex.ObservableSource` @kind object;
  #L44196c.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableReplay` v1 @kind this, `io.reactivex.Observer` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L441bc4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay.d` @type ^`io.reactivex.ObservableSource` @kind object;
  #L441bc8.  call `subscribe`(v0, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L441bce.  return @kind void;
}
