record `io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.QueueDrainObserver` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.b` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.c` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.d` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.e` @AccessFlag ;
  `java.util.Collection` `io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `io.reactivex.ObservableSource` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$b;.<init>:(Lio/reactivex/Observer;Ljava/util/concurrent/Callable;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L433e00.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L433e04.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L433e0a.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L433e10.  v1.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.b` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L433e14.  v1.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.c` @type ^`io.reactivex.ObservableSource` := v4 @kind object;
  #L433e18.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$b;.a:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @AccessFlag PUBLIC {
    temp;

  #L433e48.  v1:= v0.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L433e4c.  call `onNext`(v1, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L433e52.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$b;.accept:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L433e2c.  v2:= (`java.util.Collection`) v2 @kind object;
  #L433e30.  call `a`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$b;.a:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @kind virtual;
  #L433e36.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L433eb0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L433eb4.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L433eba.  v0:= temp @kind object;
  #L433ebc.  v1:= "The buffer supplied is null" @kind object;
  #L433ec0.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L433ec6.  v0:= temp @kind object;
  #L433ec8.  v0:= (`java.util.Collection`) v0 @kind object;
  #L433ecc.  @monitorenter v2
  #L433ece.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.f` @type ^`java.util.Collection` @kind object;
  #L433ed2.  if v1 != 0 then goto L433eda;
  #L433ed6.  @monitorexit v2
  #L433ed8.  return @kind void;
  #L433eda.  v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.f` @type ^`java.util.Collection` := v0 @kind object;
  #L433ede.  @monitorexit v2
  #L433ee0.  v0:= 0I;
  #L433ee2.  call `fastPathEmit`(v2, v1, v0, v2) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastPathEmit:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L433ee8.  return @kind void;
  #L433eea.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L433eec.  @monitorexit v2
  #L433eee.  throw v0;
  #L433ef0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L433ef2.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L433ef8.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$b;.dispose:()V` @kind virtual;
  #L433efe.  v1:= v2.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L433f02.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L433f08.  return @kind void;
  catch `java.lang.Throwable` @[L433eb0..L433ecc] goto L433ef0;
  catch `java.lang.Throwable` @[L433ece..L433ee0] goto L433eea;
  catch `java.lang.Throwable` @[L433eec..L433eee] goto L433eea;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L433e64.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L433e68.  if v0 != 0 then goto L433e9c;
  #L433e6c.  v0:= 1I;
  #L433e6e.  v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L433e72.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L433e76.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L433e7c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L433e80.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L433e86.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L433e8c.  v0:= temp;
  #L433e8e.  if v0 == 0 then goto L433e9c;
  #L433e92.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L433e96.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L433e9c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L433de8.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L433dec.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L433f3c.  @monitorenter v3
  #L433f3e.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.f` @type ^`java.util.Collection` @kind object;
  #L433f42.  if v0 != 0 then goto L433f4a;
  #L433f46.  @monitorexit v3
  #L433f48.  return @kind void;
  #L433f4a.  v1:= 0I;
  #L433f4c.  v3.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.f` @type ^`java.util.Collection` := v1 @kind object;
  #L433f50.  @monitorexit v3
  #L433f52.  v1:= v3.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L433f56.  call temp:= `offer`(v1, v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L433f5c.  v0:= 1I;
  #L433f5e.  v3.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L433f62.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L433f68.  v0:= temp;
  #L433f6a.  if v0 == 0 then goto L433f7e;
  #L433f6e.  v0:= v3.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L433f72.  v1:= v3.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L433f76.  v2:= 0I;
  #L433f78.  call `drainLoop`(v0, v1, v2, v3, v3) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lio/reactivex/Observer;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain;)V` @kind static;
  #L433f7e.  return @kind void;
  #L433f80.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L433f82.  @monitorexit v3
  #L433f84.  throw v0;
  catch `java.lang.Throwable` @[L433f3e..L433f52] goto L433f80;
  catch `java.lang.Throwable` @[L433f82..L433f84] goto L433f80;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L433fac.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$b;.dispose:()V` @kind virtual;
  #L433fb2.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L433fb6.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L433fbc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L433fd0.  @monitorenter v1
  #L433fd2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.f` @type ^`java.util.Collection` @kind object;
  #L433fd6.  if v0 != 0 then goto L433fde;
  #L433fda.  @monitorexit v1
  #L433fdc.  return @kind void;
  #L433fde.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L433fe4.  @monitorexit v1
  #L433fe6.  return @kind void;
  #L433fe8.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L433fea.  @monitorexit v1
  #L433fec.  throw v2;
  catch `java.lang.Throwable` @[L433fd2..L433fec] goto L433fe8;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43400c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L434010.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L434016.  v0:= temp;
  #L434018.  if v0 == 0 then goto L43408a;
  #L43401c.  v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.d` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L434020.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L434024.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L43402a.  v0:= temp @kind object;
  #L43402c.  v1:= "The buffer supplied is null" @kind object;
  #L434030.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L434036.  v0:= temp @kind object;
  #L434038.  v0:= (`java.util.Collection`) v0 @kind object;
  #L43403c.  v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.f` @type ^`java.util.Collection` := v0 @kind object;
  #L434040.  v3:= new `io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$a`;
  #L434044.  call `<init>`(v3, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$b;)V` @kind direct;
  #L43404a.  v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.e` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L43404e.  v0:= v2.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L434052.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L434058.  v0:= v2.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L43405c.  if v0 != 0 then goto L43408a;
  #L434060.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.c` @type ^`io.reactivex.ObservableSource` @kind object;
  #L434064.  call `subscribe`(v0, v3) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L43406a.  goto L43408a;
  #L43406c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43406e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L434074.  v1:= 1I;
  #L434076.  v2.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L43407a.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L434080.  v3:= v2.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L434084.  call `error`(v0, v3) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L43408a.  return @kind void;
  catch `java.lang.Throwable` @[L434020..L43403c] goto L43406c;
}
