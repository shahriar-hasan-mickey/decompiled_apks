record `io.reactivex.internal.operators.observable.ObservableRepeatWhen$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.c` @AccessFlag FINAL;
  `io.reactivex.subjects.Subject` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableRepeatWhen$a$a` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.f` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.g` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.h` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.subjects.Subject` v2 @kind object, `io.reactivex.ObservableSource` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/subjects/Subject;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4409dc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4409e2.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4409e6.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.d` @type ^`io.reactivex.subjects.Subject` := v2 @kind object;
  #L4409ea.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.g` @type ^`io.reactivex.ObservableSource` := v3 @kind object;
  #L4409ee.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4409f2.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4409f8.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4409fc.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L440a00.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L440a06.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.c` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L440a0a.  v1:= new `io.reactivex.internal.operators.observable.ObservableRepeatWhen$a$a`;
  #L440a0e.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a;)V` @kind direct;
  #L440a14.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.e` @type ^`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a$a` := v1 @kind object;
  #L440a18.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L440a1c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L440a22.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L440a26.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L440a60.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L440a64.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L440a6a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L440a6e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L440a72.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L440a78.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L440a8c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L440a90.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L440a96.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L440a9a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L440a9e.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lio/reactivex/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L440aa4.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a;.c:()V` @AccessFlag  {
    temp;

  #L440ab8.  call `d`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a;.d:()V` @kind virtual;
  #L440abe.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L440b64.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L440b68.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L440b6e.  v0:= temp;
  #L440b70.  if v0 != 0 then goto L440baa;
  #L440b74.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a;.isDisposed:()Z` @kind virtual;
  #L440b7a.  v0:= temp;
  #L440b7c.  if v0 == 0 then goto L440b82;
  #L440b80.  return @kind void;
  #L440b82.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.h` @type ^`boolean` @kind boolean;
  #L440b86.  if v0 != 0 then goto L440b9a;
  #L440b8a.  v0:= 1I;
  #L440b8c.  v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.h` @type ^`boolean` := v0 @kind boolean;
  #L440b90.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.g` @type ^`io.reactivex.ObservableSource` @kind object;
  #L440b94.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L440b9a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L440b9e.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L440ba4.  v0:= temp;
  #L440ba6.  if v0 != 0 then goto L440b74;
  #L440baa.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L440a38.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L440a3c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L440a42.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.e` @type ^`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a$a` @kind object;
  #L440a46.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L440a4c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4409b0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4409b4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4409ba.  v0:= temp @kind object;
  #L4409bc.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L4409c0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4409c6.  v0:= temp;
  #L4409c8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L440ad0.  v0:= 0I;
  #L440ad2.  v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.h` @type ^`boolean` := v0 @kind boolean;
  #L440ad6.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.d` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L440ada.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L440ae0.  v0:= temp @kind object;
  #L440ae2.  call `onNext`(v1, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L440ae8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L440afc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.e` @type ^`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a$a` @kind object;
  #L440b00.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L440b06.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L440b0a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L440b0e.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lio/reactivex/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L440b14.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L440b28.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L440b2c.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L440b30.  call `onNext`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onNext:(Lio/reactivex/Observer;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L440b36.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L440b48.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L440b4c.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L440b52.  return @kind void;
}
