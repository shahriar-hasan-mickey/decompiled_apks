record `io.reactivex.internal.operators.observable.ObservableInterval$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableInterval$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableInterval$a.b` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableInterval$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableInterval$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableInterval$a;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43d8e8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43d8ee.  v0.`io.reactivex.internal.operators.observable.ObservableInterval$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L43d8f2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableInterval$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableInterval$a;.a:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L43d960.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43d966.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableInterval$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableInterval$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L43d904.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43d90a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableInterval$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableInterval$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43d8c0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43d8c6.  v0:= temp @kind object;
  #L43d8c8.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43d8cc.  if v0 != v1 then goto L43d8d4;
  #L43d8d0.  v0:= 1I;
  #L43d8d2.  goto L43d8d6;
  #L43d8d4.  v0:= 0I;
  #L43d8d6.  return v0;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableInterval$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableInterval$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43d91c.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43d922.  v0:= temp @kind object;
  #L43d924.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43d928.  if v0 == v1 then goto L43d94c;
  #L43d92c.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableInterval$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43d930.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableInterval$a.b` @type ^`long` @kind wide;
  #L43d934.  v3:= 1L;
  #L43d938.  v3:= v3 + v1 @kind long;
  #L43d93a.  v5.`io.reactivex.internal.operators.observable.ObservableInterval$a.b` @type ^`long` := v3 @kind wide;
  #L43d93e.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L43d944.  v1:= temp @kind object;
  #L43d946.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43d94c.  return @kind void;
}
