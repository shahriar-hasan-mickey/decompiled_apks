record `io.reactivex.internal.operators.observable.ObservableAllSingle` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class, `io.reactivex.internal.fuseable.FuseToObservable` @kind interface {
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableAllSingle.a` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.observable.ObservableAllSingle.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableAllSingle` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAllSingle;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/functions/Predicate;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4325b4.  call `<init>`(v0) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L4325ba.  v0.`io.reactivex.internal.operators.observable.ObservableAllSingle.a` @type ^`io.reactivex.ObservableSource` := v1 @kind object;
  #L4325be.  v0.`io.reactivex.internal.operators.observable.ObservableAllSingle.b` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L4325c2.  return @kind void;
}
procedure `io.reactivex.Observable` `fuseToObservable`(`io.reactivex.internal.operators.observable.ObservableAllSingle` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableAllSingle;.fuseToObservable:()Lio/reactivex/Observable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L432588.  v0:= new `io.reactivex.internal.operators.observable.ObservableAll`;
  #L43258c.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableAllSingle.a` @type ^`io.reactivex.ObservableSource` @kind object;
  #L432590.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableAllSingle.b` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L432594.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableAll;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L43259a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Observable;)Lio/reactivex/Observable;` @kind static;
  #L4325a0.  v0:= temp @kind object;
  #L4325a2.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableAllSingle` v3 @kind this, `io.reactivex.SingleObserver` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAllSingle;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L4325d4.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableAllSingle.a` @type ^`io.reactivex.ObservableSource` @kind object;
  #L4325d8.  v1:= new `io.reactivex.internal.operators.observable.ObservableAllSingle$a`;
  #L4325dc.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableAllSingle.b` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L4325e0.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableAllSingle$a;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L4325e6.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4325ec.  return @kind void;
}
