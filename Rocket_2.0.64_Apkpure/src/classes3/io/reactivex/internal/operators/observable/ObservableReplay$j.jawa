record `io.reactivex.internal.operators.observable.ObservableReplay$j` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableReplay$h` `io.reactivex.internal.operators.observable.ObservableReplay$j.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableReplay$j.b` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableReplay$j.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableReplay$j.d` @AccessFlag FINAL;
}
global `io.reactivex.internal.operators.observable.ObservableReplay$d`[] `@@io.reactivex.internal.operators.observable.ObservableReplay$j.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.observable.ObservableReplay$d`[] `@@io.reactivex.internal.operators.observable.ObservableReplay$j.f` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableReplay$j.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L441150.  v0:= 0I;
  #L441152.  v1:= new `io.reactivex.internal.operators.observable.ObservableReplay$d`[v0];
  #L441156.  `@@io.reactivex.internal.operators.observable.ObservableReplay$j.e` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$d`[] := v1 @kind object;
  #L44115a.  v0:= new `io.reactivex.internal.operators.observable.ObservableReplay$d`[v0];
  #L44115e.  `@@io.reactivex.internal.operators.observable.ObservableReplay$j.f` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$d`[] := v0 @kind object;
  #L441162.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableReplay$j` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableReplay$h` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.<init>:(Lio/reactivex/internal/operators/observable/ObservableReplay$h;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L441174.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L44117a.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$j.a` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$h` := v2 @kind object;
  #L44117e.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L441182.  v0:= `@@io.reactivex.internal.operators.observable.ObservableReplay$j.e` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$d`[] @kind object;
  #L441186.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L44118c.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L441190.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L441194.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L44119a.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$j.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L44119e.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.observable.ObservableReplay$j` v4 @kind this, `io.reactivex.internal.operators.observable.ObservableReplay$d` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.a:(Lio/reactivex/internal/operators/observable/ObservableReplay$d;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4410d0.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4410d4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4410da.  v0:= temp @kind object;
  #L4410dc.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$d`[]) v0 @kind object;
  #L4410e0.  v1:= `@@io.reactivex.internal.operators.observable.ObservableReplay$j.f` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$d`[] @kind object;
  #L4410e4.  v2:= 0I;
  #L4410e6.  if v0 != v1 then goto L4410ec;
  #L4410ea.  return v2;
  #L4410ec.  v1:= length @variable v0;
  #L4410ee.  v3:= v1 + 1;
  #L4410f2.  v3:= new `io.reactivex.internal.operators.observable.ObservableReplay$d`[v3];
  #L4410f6.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4410fc.  v3[v1]:= v5 @kind object;
  #L441100.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L441104.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44110a.  v0:= temp;
  #L44110c.  if v0 == 0 then goto L4410d0;
  #L441110.  v5:= 1I;
  #L441112.  return v5;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableReplay$j` v6 @kind this, `io.reactivex.internal.operators.observable.ObservableReplay$d` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.b:(Lio/reactivex/internal/operators/observable/ObservableReplay$d;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L441290.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L441294.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44129a.  v0:= temp @kind object;
  #L44129c.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$d`[]) v0 @kind object;
  #L4412a0.  v1:= length @variable v0;
  #L4412a2.  if v1 != 0 then goto L4412a8;
  #L4412a6.  return @kind void;
  #L4412a8.  v2:= -1I;
  #L4412aa.  v3:= 0I;
  #L4412ac.  v4:= 0I;
  #L4412ae.  if v4 >= v1 then goto L4412cc;
  #L4412b2.  v5:= v0[v4] @kind object;
  #L4412b6.  call temp:= `equals`(v5, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4412bc.  v5:= temp;
  #L4412be.  if v5 == 0 then goto L4412c6;
  #L4412c2.  v2:= v4;
  #L4412c4.  goto L4412cc;
  #L4412c6.  v4:= v4 + 1;
  #L4412ca.  goto L4412ae;
  #L4412cc.  if v2 >= 0 then goto L4412d2;
  #L4412d0.  return @kind void;
  #L4412d2.  v4:= 1I;
  #L4412d4.  if v1 != v4 then goto L4412de;
  #L4412d8.  v1:= `@@io.reactivex.internal.operators.observable.ObservableReplay$j.e` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$d`[] @kind object;
  #L4412dc.  goto L4412fc;
  #L4412de.  v5:= v1 + -1;
  #L4412e2.  v5:= new `io.reactivex.internal.operators.observable.ObservableReplay$d`[v5];
  #L4412e6.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4412ec.  v3:= v2 + 1;
  #L4412f0.  v1:= v1 - v2 @kind int;
  #L4412f2.  v1:= v1 - v4 @kind int;
  #L4412f4.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4412fa.  v1:= v5 @kind object;
  #L4412fc.  v2:= v6.`io.reactivex.internal.operators.observable.ObservableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L441300.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L441306.  v0:= temp;
  #L441308.  if v0 == 0 then goto L441290;
  #L44130c.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableReplay$j` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L441320.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L441324.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44132a.  v0:= temp @kind object;
  #L44132c.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$d`[]) v0 @kind object;
  #L441330.  v1:= length @variable v0;
  #L441332.  v2:= 0I;
  #L441334.  if v2 >= v1 then goto L44134c;
  #L441338.  v3:= v0[v2] @kind object;
  #L44133c.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableReplay$j.a` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$h` @kind object;
  #L441340.  call `c`(v4, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$h;.c:(Lio/reactivex/internal/operators/observable/ObservableReplay$d;)V` @kind interface;
  #L441346.  v2:= v2 + 1;
  #L44134a.  goto L441334;
  #L44134c.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableReplay$j` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L441360.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L441364.  v1:= `@@io.reactivex.internal.operators.observable.ObservableReplay$j.f` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$d`[] @kind object;
  #L441368.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L44136e.  v0:= temp @kind object;
  #L441370.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$d`[]) v0 @kind object;
  #L441374.  v1:= length @variable v0;
  #L441376.  v2:= 0I;
  #L441378.  if v2 >= v1 then goto L441390;
  #L44137c.  v3:= v0[v2] @kind object;
  #L441380.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableReplay$j.a` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$h` @kind object;
  #L441384.  call `c`(v4, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$h;.c:(Lio/reactivex/internal/operators/observable/ObservableReplay$d;)V` @kind interface;
  #L44138a.  v2:= v2 + 1;
  #L44138e.  goto L441378;
  #L441390.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableReplay$j` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4411b0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4411b4.  v1:= `@@io.reactivex.internal.operators.observable.ObservableReplay$j.f` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$d`[] @kind object;
  #L4411b8.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4411be.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4411c4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableReplay$j` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L441124.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L441128.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44112e.  v0:= temp @kind object;
  #L441130.  v1:= `@@io.reactivex.internal.operators.observable.ObservableReplay$j.f` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$d`[] @kind object;
  #L441134.  if v0 != v1 then goto L44113c;
  #L441138.  v0:= 1I;
  #L44113a.  goto L44113e;
  #L44113c.  v0:= 0I;
  #L44113e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableReplay$j` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4411d8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$j.b` @type ^`boolean` @kind boolean;
  #L4411dc.  if v0 != 0 then goto L4411f6;
  #L4411e0.  v0:= 1I;
  #L4411e2.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$j.b` @type ^`boolean` := v0 @kind boolean;
  #L4411e6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$j.a` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$h` @kind object;
  #L4411ea.  call `complete`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$h;.complete:()V` @kind interface;
  #L4411f0.  call `d`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.d:()V` @kind virtual;
  #L4411f6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableReplay$j` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L441208.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$j.b` @type ^`boolean` @kind boolean;
  #L44120c.  if v0 != 0 then goto L441228;
  #L441210.  v0:= 1I;
  #L441212.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$j.b` @type ^`boolean` := v0 @kind boolean;
  #L441216.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$j.a` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$h` @kind object;
  #L44121a.  call `a`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$h;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L441220.  call `d`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.d:()V` @kind virtual;
  #L441226.  goto L44122e;
  #L441228.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44122e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableReplay$j` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L441240.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$j.b` @type ^`boolean` @kind boolean;
  #L441244.  if v0 != 0 then goto L441258;
  #L441248.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$j.a` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$h` @kind object;
  #L44124c.  call `b`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$h;.b:(Ljava/lang/Object;)V` @kind interface;
  #L441252.  call `c`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.c:()V` @kind virtual;
  #L441258.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableReplay$j` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L44126c.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L441272.  v1:= temp;
  #L441274.  if v1 == 0 then goto L44127e;
  #L441278.  call `c`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.c:()V` @kind virtual;
  #L44127e.  return @kind void;
}
