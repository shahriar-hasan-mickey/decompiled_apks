record `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.QueueDrainObserver` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.b` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.c` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.d` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.e` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.f` @AccessFlag ;
  `java.util.List` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.g` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.h` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `io.reactivex.ObservableSource` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object, `java.util.concurrent.Callable` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/ObservableSource;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L433334.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L433338.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L43333e.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L433344.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L433348.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L43334e.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.h` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L433352.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.b` @type ^`io.reactivex.ObservableSource` := v3 @kind object;
  #L433356.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.c` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L43335a.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.d` @type ^`java.util.concurrent.Callable` := v5 @kind object;
  #L43335e.  v2:= new `java.util.LinkedList`;
  #L433362.  call `<init>`(v2) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L433368.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.g` @type ^`java.util.List` := v2 @kind object;
  #L43336c.  v2:= new `io.reactivex.disposables.CompositeDisposable`;
  #L433370.  call `<init>`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L433376.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` := v2 @kind object;
  #L43337a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.a:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @AccessFlag PUBLIC {
    temp;

  #L4333a8.  call `onNext`(v1, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4333ae.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.accept:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L43338c.  v2:= (`java.util.Collection`) v2 @kind object;
  #L433390.  call `a`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.a:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @kind virtual;
  #L433396.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` v1 @kind this, `java.util.Collection` v2 @kind object, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.b:(Ljava/util/Collection;Lio/reactivex/disposables/Disposable;)V` @AccessFlag  {
    temp;
    v0;

  #L4333c0.  @monitorenter v1
  #L4333c2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.g` @type ^`java.util.List` @kind object;
  #L4333c6.  call temp:= `remove`(v0, v2) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L4333cc.  v0:= temp;
  #L4333ce.  @monitorexit v1
  #L4333d0.  if v0 == 0 then goto L4333dc;
  #L4333d4.  v0:= 0I;
  #L4333d6.  call `fastPathOrderedEmit`(v1, v2, v0, v1) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastPathOrderedEmit:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L4333dc.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4333e0.  call temp:= `remove`(v2, v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.remove:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4333e6.  v2:= temp;
  #L4333e8.  if v2 == 0 then goto L433402;
  #L4333ec.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.h` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4333f0.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4333f6.  v2:= temp;
  #L4333f8.  if v2 != 0 then goto L433402;
  #L4333fc.  call `c`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.c:()V` @kind virtual;
  #L433402.  return @kind void;
  #L433404.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L433406.  @monitorexit v1
  #L433408.  throw v2;
  catch `java.lang.Throwable` @[L4333c2..L4333d0] goto L433404;
  catch `java.lang.Throwable` @[L433406..L433408] goto L433404;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L433430.  @monitorenter v3
  #L433432.  v0:= new `java.util.ArrayList`;
  #L433436.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.g` @type ^`java.util.List` @kind object;
  #L43343a.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L433440.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.g` @type ^`java.util.List` @kind object;
  #L433444.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L43344a.  @monitorexit v3
  #L43344c.  v1:= v3.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L433450.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L433456.  v0:= temp @kind object;
  #L433458.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43345e.  v2:= temp;
  #L433460.  if v2 == 0 then goto L433478;
  #L433464.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43346a.  v2:= temp @kind object;
  #L43346c.  v2:= (`java.util.Collection`) v2 @kind object;
  #L433470.  call temp:= `offer`(v1, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L433476.  goto L433458;
  #L433478.  v0:= 1I;
  #L43347a.  v3.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L43347e.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L433484.  v0:= temp;
  #L433486.  if v0 == 0 then goto L433496;
  #L43348a.  v0:= v3.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L43348e.  v2:= 0I;
  #L433490.  call `drainLoop`(v1, v0, v2, v3, v3) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lio/reactivex/Observer;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain;)V` @kind static;
  #L433496.  return @kind void;
  #L433498.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43349a.  @monitorexit v3
  #L43349c.  throw v0;
  catch `java.lang.Throwable` @[L433432..L43344c] goto L433498;
  catch `java.lang.Throwable` @[L43349a..L43349c] goto L433498;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.d:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L433618.  v0:= v2.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L43361c.  if v0 == 0 then goto L433622;
  #L433620.  return @kind void;
  #L433622.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.d` @type ^`java.util.concurrent.Callable` @kind object;
  #L433626.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L43362c.  v0:= temp @kind object;
  #L43362e.  v1:= "The buffer supplied is null" @kind object;
  #L433632.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L433638.  v0:= temp @kind object;
  #L43363a.  v0:= (`java.util.Collection`) v0 @kind object;
  #L43363e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.c` @type ^`io.reactivex.functions.Function` @kind object;
  #L433642.  call temp:= `apply`(v1, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L433648.  v3:= temp @kind object;
  #L43364a.  v1:= "The buffer closing Observable is null" @kind object;
  #L43364e.  call temp:= `requireNonNull`(v3, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L433654.  v3:= temp @kind object;
  #L433656.  v3:= (`io.reactivex.ObservableSource`) v3 @kind object;
  #L43365a.  v1:= v2.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L43365e.  if v1 == 0 then goto L433664;
  #L433662.  return @kind void;
  #L433664.  @monitorenter v2
  #L433666.  v1:= v2.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L43366a.  if v1 == 0 then goto L433672;
  #L43366e.  @monitorexit v2
  #L433670.  return @kind void;
  #L433672.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.g` @type ^`java.util.List` @kind object;
  #L433676.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L43367c.  @monitorexit v2
  #L43367e.  v1:= new `io.reactivex.internal.operators.observable.ObservableBufferBoundary$b`;
  #L433682.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$b;.<init>:(Ljava/util/Collection;Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;)V` @kind direct;
  #L433688.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43368c.  call temp:= `add`(v0, v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L433692.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.h` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L433696.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43369c.  call `subscribe`(v3, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4336a2.  return @kind void;
  #L4336a4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4336a6.  @monitorexit v2
  #L4336a8.  throw v3;
  #L4336aa.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4336ac.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4336b2.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4336b8.  return @kind void;
  #L4336ba.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4336bc.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4336c2.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4336c8.  return @kind void;
  catch `java.lang.Throwable` @[L433622..L43363e] goto L4336ba;
  catch `java.lang.Throwable` @[L43363e..L43365a] goto L4336aa;
  catch `java.lang.Throwable` @[L433666..L43367e] goto L4336a4;
  catch `java.lang.Throwable` @[L4336a6..L4336a8] goto L4336a4;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4334c4.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4334c8.  if v0 != 0 then goto L4334dc;
  #L4334cc.  v0:= 1I;
  #L4334ce.  v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L4334d2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4334d6.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4334dc.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.e:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag  {
    temp;
    v0;

  #L433704.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L433708.  call temp:= `remove`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.remove:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43370e.  v2:= temp;
  #L433710.  if v2 == 0 then goto L43372a;
  #L433714.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.h` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L433718.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43371e.  v2:= temp;
  #L433720.  if v2 != 0 then goto L43372a;
  #L433724.  call `c`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.c:()V` @kind virtual;
  #L43372a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43331c.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L433320.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4334f0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.h` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4334f4.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4334fa.  v0:= temp;
  #L4334fc.  if v0 != 0 then goto L433506;
  #L433500.  call `c`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.c:()V` @kind virtual;
  #L433506.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L433518.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.dispose:()V` @kind virtual;
  #L43351e.  v0:= 1I;
  #L433520.  v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L433524.  @monitorenter v1
  #L433526.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.g` @type ^`java.util.List` @kind object;
  #L43352a.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L433530.  @monitorexit v1
  #L433532.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L433536.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43353c.  return @kind void;
  #L43353e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L433540.  @monitorexit v1
  #L433542.  throw v2;
  catch `java.lang.Throwable` @[L433526..L433532] goto L43353e;
  catch `java.lang.Throwable` @[L433540..L433542] goto L43353e;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L433568.  @monitorenter v2
  #L43356a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.g` @type ^`java.util.List` @kind object;
  #L43356e.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L433574.  v0:= temp @kind object;
  #L433576.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43357c.  v1:= temp;
  #L43357e.  if v1 == 0 then goto L433596;
  #L433582.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L433588.  v1:= temp @kind object;
  #L43358a.  v1:= (`java.util.Collection`) v1 @kind object;
  #L43358e.  call temp:= `add`(v1, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L433594.  goto L433576;
  #L433596.  @monitorexit v2
  #L433598.  return @kind void;
  #L43359a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43359c.  @monitorexit v2
  #L43359e.  throw v3;
  catch `java.lang.Throwable` @[L43356a..L43359e] goto L43359a;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4335bc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4335c0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4335c6.  v0:= temp;
  #L4335c8.  if v0 == 0 then goto L433604;
  #L4335cc.  v2.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.f` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L4335d0.  v3:= new `io.reactivex.internal.operators.observable.ObservableBufferBoundary$c`;
  #L4335d4.  call `<init>`(v3, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$c;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;)V` @kind direct;
  #L4335da.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4335de.  call temp:= `add`(v0, v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4335e4.  v0:= v2.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L4335e8.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4335ee.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.h` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4335f2.  v1:= 1I;
  #L4335f4.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4335fa.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.b` @type ^`io.reactivex.ObservableSource` @kind object;
  #L4335fe.  call `subscribe`(v0, v3) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L433604.  return @kind void;
}
