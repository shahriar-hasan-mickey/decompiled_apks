record `io.reactivex.internal.operators.observable.ObservableDebounce$a$a` @kind class @AccessFlag FINAL extends `io.reactivex.observers.DisposableObserver` @kind class {
  `io.reactivex.internal.operators.observable.ObservableDebounce$a` `io.reactivex.internal.operators.observable.ObservableDebounce$a$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableDebounce$a$a.c` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableDebounce$a$a.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableDebounce$a$a.e` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableDebounce$a$a.f` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableDebounce$a$a` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableDebounce$a` v2 @kind object, `long` v3 , `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDebounce$a$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableDebounce$a;JLjava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L437278.  call `<init>`(v1) @signature `Lio/reactivex/observers/DisposableObserver;.<init>:()V` @kind direct;
  #L43727e.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L437282.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L437288.  v1.`io.reactivex.internal.operators.observable.ObservableDebounce$a$a.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L43728c.  v1.`io.reactivex.internal.operators.observable.ObservableDebounce$a$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableDebounce$a` := v2 @kind object;
  #L437290.  v1.`io.reactivex.internal.operators.observable.ObservableDebounce$a$a.c` @type ^`long` := v3 @kind wide;
  #L437294.  v1.`io.reactivex.internal.operators.observable.ObservableDebounce$a$a.d` @type ^`java.lang.Object` := v5 @kind object;
  #L437298.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableDebounce$a$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDebounce$a$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4372ac.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableDebounce$a$a.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4372b0.  v1:= 0I;
  #L4372b2.  v2:= 1I;
  #L4372b4.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4372ba.  v0:= temp;
  #L4372bc.  if v0 == 0 then goto L4372d2;
  #L4372c0.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableDebounce$a$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableDebounce$a` @kind object;
  #L4372c4.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableDebounce$a$a.c` @type ^`long` @kind wide;
  #L4372c8.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableDebounce$a$a.d` @type ^`java.lang.Object` @kind object;
  #L4372cc.  call `a`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableDebounce$a;.a:(JLjava/lang/Object;)V` @kind virtual;
  #L4372d2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableDebounce$a$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDebounce$a$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4372e4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDebounce$a$a.e` @type ^`boolean` @kind boolean;
  #L4372e8.  if v0 == 0 then goto L4372ee;
  #L4372ec.  return @kind void;
  #L4372ee.  v0:= 1I;
  #L4372f0.  v1.`io.reactivex.internal.operators.observable.ObservableDebounce$a$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4372f4.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableDebounce$a$a;.a:()V` @kind virtual;
  #L4372fa.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableDebounce$a$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDebounce$a$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43730c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDebounce$a$a.e` @type ^`boolean` @kind boolean;
  #L437310.  if v0 == 0 then goto L43731c;
  #L437314.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43731a.  return @kind void;
  #L43731c.  v0:= 1I;
  #L43731e.  v1.`io.reactivex.internal.operators.observable.ObservableDebounce$a$a.e` @type ^`boolean` := v0 @kind boolean;
  #L437322.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDebounce$a$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableDebounce$a` @kind object;
  #L437326.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableDebounce$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43732c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableDebounce$a$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDebounce$a$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L437340.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableDebounce$a$a.e` @type ^`boolean` @kind boolean;
  #L437344.  if v1 == 0 then goto L43734a;
  #L437348.  return @kind void;
  #L43734a.  v1:= 1I;
  #L43734c.  v0.`io.reactivex.internal.operators.observable.ObservableDebounce$a$a.e` @type ^`boolean` := v1 @kind boolean;
  #L437350.  call `dispose`(v0) @signature `Lio/reactivex/observers/DisposableObserver;.dispose:()V` @kind virtual;
  #L437356.  call `a`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableDebounce$a$a;.a:()V` @kind virtual;
  #L43735c.  return @kind void;
}
