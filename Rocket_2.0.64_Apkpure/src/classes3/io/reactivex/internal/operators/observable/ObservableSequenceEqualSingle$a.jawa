record `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.ArrayCompositeDisposable` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.c` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.d` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.e` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b`[] `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.g` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.h` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.i` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `int` v2 , `io.reactivex.ObservableSource` v3 @kind object, `io.reactivex.ObservableSource` v4 @kind object, `io.reactivex.functions.BiPredicate` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;.<init>:(Lio/reactivex/SingleObserver;ILio/reactivex/ObservableSource;Lio/reactivex/ObservableSource;Lio/reactivex/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4434bc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4434c2.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L4434c6.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.d` @type ^`io.reactivex.ObservableSource` := v3 @kind object;
  #L4434ca.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.e` @type ^`io.reactivex.ObservableSource` := v4 @kind object;
  #L4434ce.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.b` @type ^`io.reactivex.functions.BiPredicate` := v5 @kind object;
  #L4434d2.  v1:= 2I;
  #L4434d4.  v3:= new `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b`[v1];
  #L4434d8.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.f` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b`[] := v3 @kind object;
  #L4434dc.  v4:= new `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b`;
  #L4434e0.  v5:= 0I;
  #L4434e2.  call `<init>`(v4, v0, v5, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$b;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;II)V` @kind direct;
  #L4434e8.  v3[v5]:= v4 @kind object;
  #L4434ec.  v4:= new `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b`;
  #L4434f0.  v5:= 1I;
  #L4434f2.  call `<init>`(v4, v0, v5, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$b;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;II)V` @kind direct;
  #L4434f8.  v3[v5]:= v4 @kind object;
  #L4434fc.  v2:= new `io.reactivex.internal.disposables.ArrayCompositeDisposable`;
  #L443500.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.<init>:(I)V` @kind direct;
  #L443506.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` := v2 @kind object;
  #L44350a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a` v1 @kind this, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v2 @kind object, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;.a:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @AccessFlag  {
    temp;
    v0;

  #L44351c.  v0:= 1I;
  #L44351e.  v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.g` @type ^`boolean` := v0 @kind boolean;
  #L443522.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L443528.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L44352e.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a` v12 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L443598.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44359e.  v0:= temp;
  #L4435a0.  if v0 == 0 then goto L4435a6;
  #L4435a4.  return @kind void;
  #L4435a6.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.f` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b`[] @kind object;
  #L4435aa.  v1:= 0I;
  #L4435ac.  v2:= v0[v1] @kind object;
  #L4435b0.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4435b4.  v4:= 1I;
  #L4435b6.  v0:= v0[v4] @kind object;
  #L4435ba.  v5:= v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4435be.  v6:= 1I;
  #L4435c0.  v7:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.g` @type ^`boolean` @kind boolean;
  #L4435c4.  if v7 == 0 then goto L4435d6;
  #L4435c8.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4435ce.  call `clear`(v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4435d4.  return @kind void;
  #L4435d6.  v7:= v2.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.d` @type ^`boolean` @kind boolean;
  #L4435da.  if v7 == 0 then goto L4435f8;
  #L4435de.  v8:= v2.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.e` @type ^`java.lang.Throwable` @kind object;
  #L4435e2.  if v8 == 0 then goto L4435f8;
  #L4435e6.  call `a`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;.a:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4435ec.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4435f0.  call `onError`(v0, v8) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4435f6.  return @kind void;
  #L4435f8.  v8:= v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.d` @type ^`boolean` @kind boolean;
  #L4435fc.  if v8 == 0 then goto L44361a;
  #L443600.  v9:= v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.e` @type ^`java.lang.Throwable` @kind object;
  #L443604.  if v9 == 0 then goto L44361a;
  #L443608.  call `a`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;.a:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L44360e.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L443612.  call `onError`(v0, v9) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L443618.  return @kind void;
  #L44361a.  v9:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.h` @type ^`java.lang.Object` @kind object;
  #L44361e.  if v9 != 0 then goto L44362e;
  #L443622.  call temp:= `poll`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L443628.  v9:= temp @kind object;
  #L44362a.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.h` @type ^`java.lang.Object` := v9 @kind object;
  #L44362e.  v9:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.h` @type ^`java.lang.Object` @kind object;
  #L443632.  if v9 != 0 then goto L44363a;
  #L443636.  v9:= 1I;
  #L443638.  goto L44363c;
  #L44363a.  v9:= 0I;
  #L44363c.  v10:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.i` @type ^`java.lang.Object` @kind object;
  #L443640.  if v10 != 0 then goto L443650;
  #L443644.  call temp:= `poll`(v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L44364a.  v10:= temp @kind object;
  #L44364c.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.i` @type ^`java.lang.Object` := v10 @kind object;
  #L443650.  v10:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.i` @type ^`java.lang.Object` @kind object;
  #L443654.  if v10 != 0 then goto L44365c;
  #L443658.  v11:= 1I;
  #L44365a.  goto L44365e;
  #L44365c.  v11:= 0I;
  #L44365e.  if v7 == 0 then goto L44367e;
  #L443662.  if v8 == 0 then goto L44367e;
  #L443666.  if v9 == 0 then goto L44367e;
  #L44366a.  if v11 == 0 then goto L44367e;
  #L44366e.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L443672.  v1:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L443676.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L44367c.  return @kind void;
  #L44367e.  if v7 == 0 then goto L4436a0;
  #L443682.  if v8 == 0 then goto L4436a0;
  #L443686.  if v9 == v11 then goto L4436a0;
  #L44368a.  call `a`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;.a:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L443690.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L443694.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L443698.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L44369e.  return @kind void;
  #L4436a0.  if v9 != 0 then goto L4436f8;
  #L4436a4.  if v11 != 0 then goto L4436f8;
  #L4436a8.  v7:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.b` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L4436ac.  v8:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.h` @type ^`java.lang.Object` @kind object;
  #L4436b0.  call temp:= `test`(v7, v8, v10) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L4436b6.  v7:= temp;
  #L4436b8.  if v7 != 0 then goto L4436d2;
  #L4436bc.  call `a`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;.a:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4436c2.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4436c6.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L4436ca.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4436d0.  return @kind void;
  #L4436d2.  v7:= 0I;
  #L4436d4.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.h` @type ^`java.lang.Object` := v7 @kind object;
  #L4436d8.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.i` @type ^`java.lang.Object` := v7 @kind object;
  #L4436dc.  goto L4436f8;
  #L4436de.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4436e0.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4436e6.  call `a`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;.a:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4436ec.  v1:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4436f0.  call `onError`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4436f6.  return @kind void;
  #L4436f8.  if v9 != 0 then goto L443700;
  #L4436fc.  if v11 == 0 then goto L4435c0;
  #L443700.  v6:= -v6 @kind int;
  #L443702.  call temp:= `addAndGet`(v12, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L443708.  v6:= temp;
  #L44370a.  if v6 != 0 then goto L4435c0;
  #L44370e.  return @kind void;
  catch `java.lang.Throwable` @[L4436a8..L4436b8] goto L4436de;
}
procedure `boolean` `c`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;.c:(Lio/reactivex/disposables/Disposable;I)Z` @AccessFlag  {
    temp;
    v0;

  #L44349c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L4434a0.  call temp:= `setResource`(v0, v3, v2) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.setResource:(ILio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4434a6.  v2:= temp;
  #L4434a8.  return v2;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L44372c.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.f` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b`[] @kind object;
  #L443730.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.d` @type ^`io.reactivex.ObservableSource` @kind object;
  #L443734.  v2:= 0I;
  #L443736.  v2:= v0[v2] @kind object;
  #L44373a.  call `subscribe`(v1, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L443740.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.e` @type ^`io.reactivex.ObservableSource` @kind object;
  #L443744.  v2:= 1I;
  #L443746.  v0:= v0[v2] @kind object;
  #L44374a.  call `subscribe`(v1, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L443750.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L443540.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.g` @type ^`boolean` @kind boolean;
  #L443544.  if v0 != 0 then goto L443586;
  #L443548.  v0:= 1I;
  #L44354a.  v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.g` @type ^`boolean` := v0 @kind boolean;
  #L44354e.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L443552.  call `dispose`(v1) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.dispose:()V` @kind virtual;
  #L443558.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44355e.  v1:= temp;
  #L443560.  if v1 != 0 then goto L443586;
  #L443564.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.f` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b`[] @kind object;
  #L443568.  v2:= 0I;
  #L44356a.  v2:= v1[v2] @kind object;
  #L44356e.  v2:= v2.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L443572.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L443578.  v0:= v1[v0] @kind object;
  #L44357c.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L443580.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L443586.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443484.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.g` @type ^`boolean` @kind boolean;
  #L443488.  return v0;
}
