record `io.reactivex.internal.operators.observable.ObservableBufferBoundary$c` @kind class @AccessFlag FINAL extends `io.reactivex.observers.DisposableObserver` @kind class {
  `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$c.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$c.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$c` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$c;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4337d0.  call `<init>`(v0) @signature `Lio/reactivex/observers/DisposableObserver;.<init>:()V` @kind direct;
  #L4337d6.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$c.b` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` := v1 @kind object;
  #L4337da.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4337ec.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$c.c` @type ^`boolean` @kind boolean;
  #L4337f0.  if v0 == 0 then goto L4337f6;
  #L4337f4.  return @kind void;
  #L4337f6.  v0:= 1I;
  #L4337f8.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$c.c` @type ^`boolean` := v0 @kind boolean;
  #L4337fc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$c.b` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` @kind object;
  #L433800.  call `e`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.e:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L433806.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L433818.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$c.c` @type ^`boolean` @kind boolean;
  #L43381c.  if v0 == 0 then goto L433828;
  #L433820.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L433826.  return @kind void;
  #L433828.  v0:= 1I;
  #L43382a.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$c.c` @type ^`boolean` := v0 @kind boolean;
  #L43382e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$c.b` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` @kind object;
  #L433832.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L433838.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43384c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$c.c` @type ^`boolean` @kind boolean;
  #L433850.  if v0 == 0 then goto L433856;
  #L433854.  return @kind void;
  #L433856.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$c.b` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` @kind object;
  #L43385a.  call `d`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.d:(Ljava/lang/Object;)V` @kind virtual;
  #L433860.  return @kind void;
}
