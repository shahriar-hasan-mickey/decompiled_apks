record `io.reactivex.internal.operators.observable.ObservableWindowTimed` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.a` @kind class {
  `long` `io.reactivex.internal.operators.observable.ObservableWindowTimed.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindowTimed.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableWindowTimed.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableWindowTimed.d` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindowTimed.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableWindowTimed.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowTimed.g` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowTimed` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `long` v2 , `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `io.reactivex.Scheduler` v7 @kind object, `long` v8 , `int` v10 , `boolean` v11 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed;.<init>:(Lio/reactivex/ObservableSource;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JIZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4493f0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/a;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L4493f6.  v0.`io.reactivex.internal.operators.observable.ObservableWindowTimed.a` @type ^`long` := v2 @kind wide;
  #L4493fa.  v0.`io.reactivex.internal.operators.observable.ObservableWindowTimed.b` @type ^`long` := v4 @kind wide;
  #L4493fe.  v0.`io.reactivex.internal.operators.observable.ObservableWindowTimed.c` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L449402.  v0.`io.reactivex.internal.operators.observable.ObservableWindowTimed.d` @type ^`io.reactivex.Scheduler` := v7 @kind object;
  #L449406.  v0.`io.reactivex.internal.operators.observable.ObservableWindowTimed.e` @type ^`long` := v8 @kind wide;
  #L44940a.  v0.`io.reactivex.internal.operators.observable.ObservableWindowTimed.f` @type ^`int` := v10;
  #L44940e.  v0.`io.reactivex.internal.operators.observable.ObservableWindowTimed.g` @type ^`boolean` := v11 @kind boolean;
  #L449412.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableWindowTimed` v11 @kind this, `io.reactivex.Observer` v12 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L449424.  v1:= new `io.reactivex.observers.SerializedObserver`;
  #L449428.  call `<init>`(v1, v12) @signature `Lio/reactivex/observers/SerializedObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L44942e.  v2:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed.a` @type ^`long` @kind wide;
  #L449432.  v4:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed.b` @type ^`long` @kind wide;
  #L449436.  v12:= lcmp(v2, v4);
  #L44943a.  if v12 != 0 then goto L4494a4;
  #L44943e.  v7:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed.e` @type ^`long` @kind wide;
  #L449442.  v4:= 9223372036854775807L;
  #L44944c.  v12:= lcmp(v7, v4);
  #L449450.  if v12 != 0 then goto L44947c;
  #L449454.  v12:= v11.`io.reactivex.internal.operators.observable.a.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L449458.  v7:= new `io.reactivex.internal.operators.observable.ObservableWindowTimed$b`;
  #L44945c.  v2:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed.a` @type ^`long` @kind wide;
  #L449460.  v4:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L449464.  v5:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L449468.  v6:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed.f` @type ^`int`;
  #L44946c.  v0:= v7 @kind object;
  #L44946e.  call `<init>`(v0, v1, v2, v4, v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)V` @kind direct;
  #L449474.  call `subscribe`(v12, v7) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L44947a.  return @kind void;
  #L44947c.  v12:= v11.`io.reactivex.internal.operators.observable.a.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L449480.  v10:= new `io.reactivex.internal.operators.observable.ObservableWindowTimed$a`;
  #L449484.  v4:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L449488.  v5:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L44948c.  v6:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed.f` @type ^`int`;
  #L449490.  v9:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed.g` @type ^`boolean` @kind boolean;
  #L449494.  v0:= v10 @kind object;
  #L449496.  call `<init>`(v0, v1, v2, v4, v5, v6, v7, v9) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IJZ)V` @kind direct;
  #L44949c.  call `subscribe`(v12, v10) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4494a2.  return @kind void;
  #L4494a4.  v12:= v11.`io.reactivex.internal.operators.observable.a.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L4494a8.  v9:= new `io.reactivex.internal.operators.observable.ObservableWindowTimed$c`;
  #L4494ac.  v6:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4494b0.  v0:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L4494b4.  call temp:= `createWorker`(v0) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L4494ba.  v7:= temp @kind object;
  #L4494bc.  v8:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed.f` @type ^`int`;
  #L4494c0.  v0:= v9 @kind object;
  #L4494c2.  call `<init>`(v0, v1, v2, v4, v6, v7, v8) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.<init>:(Lio/reactivex/Observer;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;I)V` @kind direct;
  #L4494c8.  call `subscribe`(v12, v9) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4494ce.  return @kind void;
}
