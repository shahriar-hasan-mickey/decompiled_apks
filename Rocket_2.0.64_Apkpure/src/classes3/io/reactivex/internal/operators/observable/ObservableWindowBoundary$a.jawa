record `io.reactivex.internal.operators.observable.ObservableWindowBoundary$a` @kind class @AccessFlag FINAL extends `io.reactivex.observers.DisposableObserver` @kind class {
  `io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4476f8.  call `<init>`(v0) @signature `Lio/reactivex/observers/DisposableObserver;.<init>:()V` @kind direct;
  #L4476fe.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` := v1 @kind object;
  #L447702.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L447714.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.c` @type ^`boolean` @kind boolean;
  #L447718.  if v0 == 0 then goto L44771e;
  #L44771c.  return @kind void;
  #L44771e.  v0:= 1I;
  #L447720.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.c` @type ^`boolean` := v0 @kind boolean;
  #L447724.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` @kind object;
  #L447728.  call `onComplete`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.onComplete:()V` @kind virtual;
  #L44772e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L447740.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.c` @type ^`boolean` @kind boolean;
  #L447744.  if v0 == 0 then goto L447750;
  #L447748.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44774e.  return @kind void;
  #L447750.  v0:= 1I;
  #L447752.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.c` @type ^`boolean` := v0 @kind boolean;
  #L447756.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` @kind object;
  #L44775a.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L447760.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L447774.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.c` @type ^`boolean` @kind boolean;
  #L447778.  if v1 == 0 then goto L44777e;
  #L44777c.  return @kind void;
  #L44777e.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` @kind object;
  #L447782.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.b:()V` @kind virtual;
  #L447788.  return @kind void;
}
