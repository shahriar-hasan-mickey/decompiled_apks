record `io.reactivex.internal.operators.observable.ObservableCache$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableCache$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableCache$a` `io.reactivex.internal.operators.observable.ObservableCache$b.b` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.operators.observable.ObservableCache$b.c` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableCache$b.d` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableCache$b.e` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableCache$b.f` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableCache$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableCache$b` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.internal.operators.observable.ObservableCache$a` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$b;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/operators/observable/ObservableCache$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L435118.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L43511e.  v0.`io.reactivex.internal.operators.observable.ObservableCache$b.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L435122.  v0.`io.reactivex.internal.operators.observable.ObservableCache$b.b` @type ^`io.reactivex.internal.operators.observable.ObservableCache$a` := v2 @kind object;
  #L435126.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableCache$b` v9 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$b;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L435164.  call temp:= `getAndIncrement`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43516a.  v0:= temp;
  #L43516c.  if v0 == 0 then goto L435172;
  #L435170.  return @kind void;
  #L435172.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableCache$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L435176.  v1:= 1I;
  #L435178.  v2:= 1I;
  #L43517a.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableCache$b.f` @type ^`boolean` @kind boolean;
  #L43517e.  if v3 == 0 then goto L435184;
  #L435182.  return @kind void;
  #L435184.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableCache$b.b` @type ^`io.reactivex.internal.operators.observable.ObservableCache$a` @kind object;
  #L435188.  call temp:= `size`(v3) @signature `Lio/reactivex/internal/util/LinkedArrayList;.size:()I` @kind virtual;
  #L43518e.  v3:= temp;
  #L435190.  if v3 == 0 then goto L435206;
  #L435194.  v4:= v9.`io.reactivex.internal.operators.observable.ObservableCache$b.c` @type ^`java.lang.Object`[] @kind object;
  #L435198.  if v4 != 0 then goto L4351ac;
  #L43519c.  v4:= v9.`io.reactivex.internal.operators.observable.ObservableCache$b.b` @type ^`io.reactivex.internal.operators.observable.ObservableCache$a` @kind object;
  #L4351a0.  call temp:= `head`(v4) @signature `Lio/reactivex/internal/util/LinkedArrayList;.head:()[Ljava/lang/Object;` @kind virtual;
  #L4351a6.  v4:= temp @kind object;
  #L4351a8.  v9.`io.reactivex.internal.operators.observable.ObservableCache$b.c` @type ^`java.lang.Object`[] := v4 @kind object;
  #L4351ac.  v5:= length @variable v4;
  #L4351ae.  v5:= v5 - v1 @kind int;
  #L4351b0.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableCache$b.e` @type ^`int`;
  #L4351b4.  v7:= v9.`io.reactivex.internal.operators.observable.ObservableCache$b.d` @type ^`int`;
  #L4351b8.  if v6 >= v3 then goto L4351f0;
  #L4351bc.  v8:= v9.`io.reactivex.internal.operators.observable.ObservableCache$b.f` @type ^`boolean` @kind boolean;
  #L4351c0.  if v8 == 0 then goto L4351c6;
  #L4351c4.  return @kind void;
  #L4351c6.  if v7 != v5 then goto L4351d4;
  #L4351ca.  v4:= v4[v5] @kind object;
  #L4351ce.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L4351d2.  v7:= 0I;
  #L4351d4.  v8:= v4[v7] @kind object;
  #L4351d8.  call temp:= `accept`(v8, v0) @signature `Lio/reactivex/internal/util/NotificationLite;.accept:(Ljava/lang/Object;Lio/reactivex/Observer;)Z` @kind static;
  #L4351de.  v8:= temp;
  #L4351e0.  if v8 == 0 then goto L4351e6;
  #L4351e4.  return @kind void;
  #L4351e6.  v7:= v7 + 1;
  #L4351ea.  v6:= v6 + 1;
  #L4351ee.  goto L4351b8;
  #L4351f0.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableCache$b.f` @type ^`boolean` @kind boolean;
  #L4351f4.  if v3 == 0 then goto L4351fa;
  #L4351f8.  return @kind void;
  #L4351fa.  v9.`io.reactivex.internal.operators.observable.ObservableCache$b.e` @type ^`int` := v6;
  #L4351fe.  v9.`io.reactivex.internal.operators.observable.ObservableCache$b.d` @type ^`int` := v7;
  #L435202.  v9.`io.reactivex.internal.operators.observable.ObservableCache$b.c` @type ^`java.lang.Object`[] := v4 @kind object;
  #L435206.  v2:= -v2 @kind int;
  #L435208.  call temp:= `addAndGet`(v9, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L43520e.  v2:= temp;
  #L435210.  if v2 != 0 then goto L43517a;
  #L435214.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableCache$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435138.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCache$b.f` @type ^`boolean` @kind boolean;
  #L43513c.  if v0 != 0 then goto L435150;
  #L435140.  v0:= 1I;
  #L435142.  v1.`io.reactivex.internal.operators.observable.ObservableCache$b.f` @type ^`boolean` := v0 @kind boolean;
  #L435146.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCache$b.b` @type ^`io.reactivex.internal.operators.observable.ObservableCache$a` @kind object;
  #L43514a.  call `c`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$a;.c:(Lio/reactivex/internal/operators/observable/ObservableCache$b;)V` @kind virtual;
  #L435150.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableCache$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435100.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCache$b.f` @type ^`boolean` @kind boolean;
  #L435104.  return v0;
}
