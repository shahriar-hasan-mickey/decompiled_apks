record `io.reactivex.internal.operators.observable.ObservablePublish$b` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservablePublish$b.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservablePublish$b.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservablePublish$b.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservablePublish$b.d` @AccessFlag FINAL;
}
global `io.reactivex.internal.operators.observable.ObservablePublish$a`[] `@@io.reactivex.internal.operators.observable.ObservablePublish$b.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.observable.ObservablePublish$a`[] `@@io.reactivex.internal.operators.observable.ObservablePublish$b.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L43f3fc.  v0:= 0I;
  #L43f3fe.  v1:= new `io.reactivex.internal.operators.observable.ObservablePublish$a`[v0];
  #L43f402.  `@@io.reactivex.internal.operators.observable.ObservablePublish$b.e` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$a`[] := v1 @kind object;
  #L43f406.  v0:= new `io.reactivex.internal.operators.observable.ObservablePublish$a`[v0];
  #L43f40a.  `@@io.reactivex.internal.operators.observable.ObservablePublish$b.f` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$a`[] := v0 @kind object;
  #L43f40e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservablePublish$b` v2 @kind this, `java.util.concurrent.atomic.AtomicReference` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L43f420.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43f426.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L43f42a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43f430.  v2.`io.reactivex.internal.operators.observable.ObservablePublish$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L43f434.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L43f438.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$b.e` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$a`[] @kind object;
  #L43f43c.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L43f442.  v2.`io.reactivex.internal.operators.observable.ObservablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L43f446.  v2.`io.reactivex.internal.operators.observable.ObservablePublish$b.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L43f44a.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L43f44e.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L43f454.  v2.`io.reactivex.internal.operators.observable.ObservablePublish$b.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L43f458.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.observable.ObservablePublish$b` v4 @kind this, `io.reactivex.internal.operators.observable.ObservablePublish$a` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.a:(Lio/reactivex/internal/operators/observable/ObservablePublish$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43f37c.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43f380.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43f386.  v0:= temp @kind object;
  #L43f388.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$a`[]) v0 @kind object;
  #L43f38c.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$b.f` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$a`[] @kind object;
  #L43f390.  v2:= 0I;
  #L43f392.  if v0 != v1 then goto L43f398;
  #L43f396.  return v2;
  #L43f398.  v1:= length @variable v0;
  #L43f39a.  v3:= v1 + 1;
  #L43f39e.  v3:= new `io.reactivex.internal.operators.observable.ObservablePublish$a`[v3];
  #L43f3a2.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L43f3a8.  v3[v1]:= v5 @kind object;
  #L43f3ac.  v1:= v4.`io.reactivex.internal.operators.observable.ObservablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43f3b0.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L43f3b6.  v0:= temp;
  #L43f3b8.  if v0 == 0 then goto L43f37c;
  #L43f3bc.  v5:= 1I;
  #L43f3be.  return v5;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservablePublish$b` v6 @kind this, `io.reactivex.internal.operators.observable.ObservablePublish$a` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.b:(Lio/reactivex/internal/operators/observable/ObservablePublish$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L43f5c4.  v0:= v6.`io.reactivex.internal.operators.observable.ObservablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43f5c8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43f5ce.  v0:= temp @kind object;
  #L43f5d0.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$a`[]) v0 @kind object;
  #L43f5d4.  v1:= length @variable v0;
  #L43f5d6.  if v1 != 0 then goto L43f5dc;
  #L43f5da.  return @kind void;
  #L43f5dc.  v2:= -1I;
  #L43f5de.  v3:= 0I;
  #L43f5e0.  v4:= 0I;
  #L43f5e2.  if v4 >= v1 then goto L43f600;
  #L43f5e6.  v5:= v0[v4] @kind object;
  #L43f5ea.  call temp:= `equals`(v5, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L43f5f0.  v5:= temp;
  #L43f5f2.  if v5 == 0 then goto L43f5fa;
  #L43f5f6.  v2:= v4;
  #L43f5f8.  goto L43f600;
  #L43f5fa.  v4:= v4 + 1;
  #L43f5fe.  goto L43f5e2;
  #L43f600.  if v2 >= 0 then goto L43f606;
  #L43f604.  return @kind void;
  #L43f606.  v4:= 1I;
  #L43f608.  if v1 != v4 then goto L43f612;
  #L43f60c.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$b.e` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$a`[] @kind object;
  #L43f610.  goto L43f630;
  #L43f612.  v5:= v1 + -1;
  #L43f616.  v5:= new `io.reactivex.internal.operators.observable.ObservablePublish$a`[v5];
  #L43f61a.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L43f620.  v3:= v2 + 1;
  #L43f624.  v1:= v1 - v2 @kind int;
  #L43f626.  v1:= v1 - v4 @kind int;
  #L43f628.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L43f62e.  v1:= v5 @kind object;
  #L43f630.  v2:= v6.`io.reactivex.internal.operators.observable.ObservablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43f634.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L43f63a.  v0:= temp;
  #L43f63c.  if v0 == 0 then goto L43f5c4;
  #L43f640.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservablePublish$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43f46c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43f470.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43f476.  v0:= temp @kind object;
  #L43f478.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$b.f` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$a`[] @kind object;
  #L43f47c.  if v0 == v1 then goto L43f4aa;
  #L43f480.  v0:= v2.`io.reactivex.internal.operators.observable.ObservablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43f484.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L43f48a.  v0:= temp @kind object;
  #L43f48c.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$a`[]) v0 @kind object;
  #L43f490.  if v0 == v1 then goto L43f4aa;
  #L43f494.  v0:= v2.`io.reactivex.internal.operators.observable.ObservablePublish$b.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43f498.  v1:= 0I;
  #L43f49a.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L43f4a0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservablePublish$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43f4a4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43f4aa.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservablePublish$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43f3d0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43f3d4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43f3da.  v0:= temp @kind object;
  #L43f3dc.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$b.f` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$a`[] @kind object;
  #L43f3e0.  if v0 != v1 then goto L43f3e8;
  #L43f3e4.  v0:= 1I;
  #L43f3e6.  goto L43f3ea;
  #L43f3e8.  v0:= 0I;
  #L43f3ea.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservablePublish$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43f4bc.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublish$b.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43f4c0.  v1:= 0I;
  #L43f4c2.  call temp:= `compareAndSet`(v0, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L43f4c8.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43f4cc.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$b.f` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$a`[] @kind object;
  #L43f4d0.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L43f4d6.  v0:= temp @kind object;
  #L43f4d8.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$a`[]) v0 @kind object;
  #L43f4dc.  v1:= length @variable v0;
  #L43f4de.  v2:= 0I;
  #L43f4e0.  if v2 >= v1 then goto L43f4f8;
  #L43f4e4.  v3:= v0[v2] @kind object;
  #L43f4e8.  v3:= v3.`io.reactivex.internal.operators.observable.ObservablePublish$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43f4ec.  call `onComplete`(v3) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43f4f2.  v2:= v2 + 1;
  #L43f4f6.  goto L43f4e0;
  #L43f4f8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservablePublish$b` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43f50c.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublish$b.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43f510.  v1:= 0I;
  #L43f512.  call temp:= `compareAndSet`(v0, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L43f518.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43f51c.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$b.f` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$a`[] @kind object;
  #L43f520.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L43f526.  v0:= temp @kind object;
  #L43f528.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$a`[]) v0 @kind object;
  #L43f52c.  v1:= length @variable v0;
  #L43f52e.  if v1 == 0 then goto L43f54e;
  #L43f532.  v1:= length @variable v0;
  #L43f534.  v2:= 0I;
  #L43f536.  if v2 >= v1 then goto L43f554;
  #L43f53a.  v3:= v0[v2] @kind object;
  #L43f53e.  v3:= v3.`io.reactivex.internal.operators.observable.ObservablePublish$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43f542.  call `onError`(v3, v5) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43f548.  v2:= v2 + 1;
  #L43f54c.  goto L43f536;
  #L43f54e.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43f554.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservablePublish$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43f568.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43f56c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43f572.  v0:= temp @kind object;
  #L43f574.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$a`[]) v0 @kind object;
  #L43f578.  v1:= length @variable v0;
  #L43f57a.  v2:= 0I;
  #L43f57c.  if v2 >= v1 then goto L43f594;
  #L43f580.  v3:= v0[v2] @kind object;
  #L43f584.  v3:= v3.`io.reactivex.internal.operators.observable.ObservablePublish$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43f588.  call `onNext`(v3, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43f58e.  v2:= v2 + 1;
  #L43f592.  goto L43f57c;
  #L43f594.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservablePublish$b` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f5a8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublish$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43f5ac.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43f5b2.  return @kind void;
}
