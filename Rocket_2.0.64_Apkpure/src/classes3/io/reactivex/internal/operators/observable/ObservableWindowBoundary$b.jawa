record `io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.QueueDrainObserver` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.c` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.d` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.e` @AccessFlag FINAL;
  `io.reactivex.subjects.UnicastSubject` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.f` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.g` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.h` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4477b4.  v0:= new `java.lang.Object`;
  #L4477b8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4477be.  `@@io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.h` @type ^`java.lang.Object` := v0 @kind object;
  #L4477c2.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `io.reactivex.ObservableSource` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.<init>:(Lio/reactivex/Observer;Lio/reactivex/ObservableSource;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4477d4.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L4477d8.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4477de.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L4477e4.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4477e8.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4477ee.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4477f2.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4477f6.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4477fc.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.g` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L447800.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.b` @type ^`io.reactivex.ObservableSource` := v3 @kind object;
  #L447804.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.c` @type ^`int` := v4;
  #L447808.  v3:= 1L;
  #L44780c.  call `lazySet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L447812.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` v10 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L44783c.  v0:= v10.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L447840.  v0:= (`io.reactivex.internal.queue.MpscLinkedQueue`) v0 @kind object;
  #L447844.  v1:= v10.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L447848.  v2:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.f` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L44784c.  v3:= 1I;
  #L44784e.  v4:= 1I;
  #L447850.  v5:= v10.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` @kind boolean;
  #L447854.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L44785a.  v6:= temp @kind object;
  #L44785c.  if v6 != 0 then goto L447864;
  #L447860.  v7:= 1I;
  #L447862.  goto L447866;
  #L447864.  v7:= 0I;
  #L447866.  if v5 == 0 then goto L447890;
  #L44786a.  if v7 == 0 then goto L447890;
  #L44786e.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L447872.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L447878.  v0:= v10.`io.reactivex.internal.observers.QueueDrainObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L44787c.  if v0 == 0 then goto L447888;
  #L447880.  call `onError`(v2, v0) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L447886.  goto L44788e;
  #L447888.  call `onComplete`(v2) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L44788e.  return @kind void;
  #L447890.  if v7 == 0 then goto L4478a4;
  #L447894.  v4:= -v4 @kind int;
  #L447896.  call temp:= `leave`(v10, v4) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L44789c.  v4:= temp;
  #L44789e.  if v4 != 0 then goto L447850;
  #L4478a2.  return @kind void;
  #L4478a4.  v5:= `@@io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.h` @type ^`java.lang.Object` @kind object;
  #L4478a8.  if v6 != v5 then goto L447902;
  #L4478ac.  call `onComplete`(v2) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4478b2.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4478b6.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L4478bc.  v5:= temp @kind wide;
  #L4478be.  v7:= 0L;
  #L4478c2.  v9:= lcmp(v5, v7);
  #L4478c6.  if v9 != 0 then goto L4478d6;
  #L4478ca.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4478ce.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4478d4.  return @kind void;
  #L4478d6.  v5:= v10.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4478da.  if v5 == 0 then goto L4478e0;
  #L4478de.  goto L447850;
  #L4478e0.  v2:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.c` @type ^`int`;
  #L4478e4.  call temp:= `create`(v2) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L4478ea.  v2:= temp @kind object;
  #L4478ec.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4478f0.  call temp:= `getAndIncrement`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndIncrement:()J` @kind virtual;
  #L4478f6.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.f` @type ^`io.reactivex.subjects.UnicastSubject` := v2 @kind object;
  #L4478fa.  call `onNext`(v1, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L447900.  goto L447850;
  #L447902.  call temp:= `getValue`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L447908.  v5:= temp @kind object;
  #L44790a.  call `onNext`(v2, v5) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L447910.  goto L447850;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L447924.  v0:= v2.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L447928.  v1:= `@@io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.h` @type ^`java.lang.Object` @kind object;
  #L44792c.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L447932.  call temp:= `enter`(v2) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L447938.  v0:= temp;
  #L44793a.  if v0 == 0 then goto L447944;
  #L44793e.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.a:()V` @kind virtual;
  #L447944.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L447824.  v0:= 1I;
  #L447826.  v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L44782a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44779c.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4477a0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L447958.  v0:= v5.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` @kind boolean;
  #L44795c.  if v0 == 0 then goto L447962;
  #L447960.  return @kind void;
  #L447962.  v0:= 1I;
  #L447964.  v5.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L447968.  call temp:= `enter`(v5) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L44796e.  v0:= temp;
  #L447970.  if v0 == 0 then goto L44797a;
  #L447974.  call `a`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.a:()V` @kind virtual;
  #L44797a.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44797e.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L447984.  v0:= temp @kind wide;
  #L447986.  v2:= 0L;
  #L44798a.  v4:= lcmp(v0, v2);
  #L44798e.  if v4 != 0 then goto L44799c;
  #L447992.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L447996.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44799c.  v0:= v5.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L4479a0.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4479a6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4479b8.  v0:= v5.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` @kind boolean;
  #L4479bc.  if v0 == 0 then goto L4479c8;
  #L4479c0.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4479c6.  return @kind void;
  #L4479c8.  v5.`io.reactivex.internal.observers.QueueDrainObserver.error` @type ^`java.lang.Throwable` := v6 @kind object;
  #L4479cc.  v0:= 1I;
  #L4479ce.  v5.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4479d2.  call temp:= `enter`(v5) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L4479d8.  v0:= temp;
  #L4479da.  if v0 == 0 then goto L4479e4;
  #L4479de.  call `a`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.a:()V` @kind virtual;
  #L4479e4.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4479e8.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L4479ee.  v0:= temp @kind wide;
  #L4479f0.  v2:= 0L;
  #L4479f4.  v4:= lcmp(v0, v2);
  #L4479f8.  if v4 != 0 then goto L447a06;
  #L4479fc.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L447a00.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L447a06.  v0:= v5.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L447a0a.  call `onError`(v0, v6) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L447a10.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L447a24.  call temp:= `fastEnter`(v1) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastEnter:()Z` @kind virtual;
  #L447a2a.  v0:= temp;
  #L447a2c.  if v0 == 0 then goto L447a4a;
  #L447a30.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.f` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L447a34.  call `onNext`(v0, v2) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L447a3a.  v2:= -1I;
  #L447a3c.  call temp:= `leave`(v1, v2) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L447a42.  v2:= temp;
  #L447a44.  if v2 != 0 then goto L447a6a;
  #L447a48.  return @kind void;
  #L447a4a.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L447a4e.  call temp:= `next`(v2) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L447a54.  v2:= temp @kind object;
  #L447a56.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L447a5c.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L447a62.  v2:= temp;
  #L447a64.  if v2 != 0 then goto L447a6a;
  #L447a68.  return @kind void;
  #L447a6a.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.a:()V` @kind virtual;
  #L447a70.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L447a84.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L447a88.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L447a8e.  v0:= temp;
  #L447a90.  if v0 == 0 then goto L447af2;
  #L447a94.  v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.d` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L447a98.  v3:= v2.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L447a9c.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L447aa2.  v0:= v2.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L447aa6.  if v0 == 0 then goto L447aac;
  #L447aaa.  return @kind void;
  #L447aac.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.c` @type ^`int`;
  #L447ab0.  call temp:= `create`(v0) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L447ab6.  v0:= temp @kind object;
  #L447ab8.  v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.f` @type ^`io.reactivex.subjects.UnicastSubject` := v0 @kind object;
  #L447abc.  call `onNext`(v3, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L447ac2.  v3:= new `io.reactivex.internal.operators.observable.ObservableWindowBoundary$a`;
  #L447ac6.  call `<init>`(v3, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;)V` @kind direct;
  #L447acc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L447ad0.  v1:= 0I;
  #L447ad2.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L447ad8.  v0:= temp;
  #L447ada.  if v0 == 0 then goto L447af2;
  #L447ade.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L447ae2.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndIncrement:()J` @kind virtual;
  #L447ae8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.b` @type ^`io.reactivex.ObservableSource` @kind object;
  #L447aec.  call `subscribe`(v0, v3) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L447af2.  return @kind void;
}
