record `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.QueueDrainObserver` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.b` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.c` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.d` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.e` @AccessFlag FINAL;
  `java.util.Collection` `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.<init>:(Lio/reactivex/Observer;Ljava/util/concurrent/Callable;Ljava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L43393c.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L433940.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L433946.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L43394c.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L433950.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L433956.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L43395a.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.b` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L43395e.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.c` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L433962.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.a:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @AccessFlag PUBLIC {
    temp;

  #L433990.  v1:= v0.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L433994.  call `onNext`(v1, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43399a.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.accept:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L433974.  v2:= (`java.util.Collection`) v2 @kind object;
  #L433978.  call `a`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.a:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @kind virtual;
  #L43397e.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4339f4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4339f8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4339fe.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L433a10.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L433a14.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L433a1a.  v0:= temp @kind object;
  #L433a1c.  v1:= "The buffer supplied is null" @kind object;
  #L433a20.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L433a26.  v0:= temp @kind object;
  #L433a28.  v0:= (`java.util.Collection`) v0 @kind object;
  #L433a2c.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L433a30.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L433a36.  v1:= temp @kind object;
  #L433a38.  v2:= "The boundary ObservableSource supplied is null" @kind object;
  #L433a3c.  call temp:= `requireNonNull`(v1, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L433a42.  v1:= temp @kind object;
  #L433a44.  v1:= (`io.reactivex.ObservableSource`) v1 @kind object;
  #L433a48.  v2:= new `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a`;
  #L433a4c.  call `<init>`(v2, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;)V` @kind direct;
  #L433a52.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L433a56.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L433a5c.  v3:= temp @kind object;
  #L433a5e.  v3:= (`io.reactivex.disposables.Disposable`) v3 @kind object;
  #L433a62.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L433a66.  call temp:= `compareAndSet`(v4, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L433a6c.  v3:= temp;
  #L433a6e.  if v3 != 0 then goto L433a74;
  #L433a72.  return @kind void;
  #L433a74.  @monitorenter v5
  #L433a76.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.f` @type ^`java.util.Collection` @kind object;
  #L433a7a.  if v3 != 0 then goto L433a82;
  #L433a7e.  @monitorexit v5
  #L433a80.  return @kind void;
  #L433a82.  v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.f` @type ^`java.util.Collection` := v0 @kind object;
  #L433a86.  @monitorexit v5
  #L433a88.  call `subscribe`(v1, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L433a8e.  v0:= 0I;
  #L433a90.  call `fastPathEmit`(v5, v3, v0, v5) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastPathEmit:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L433a96.  return @kind void;
  #L433a98.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L433a9a.  @monitorexit v5
  #L433a9c.  throw v0;
  #L433a9e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L433aa0.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L433aa6.  v1:= 1I;
  #L433aa8.  v5.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L433aac.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L433ab0.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L433ab6.  v1:= v5.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L433aba.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L433ac0.  return @kind void;
  #L433ac2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L433ac4.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L433aca.  call `dispose`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.dispose:()V` @kind virtual;
  #L433ad0.  v1:= v5.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L433ad4.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L433ada.  return @kind void;
  catch `java.lang.Throwable` @[L433a10..L433a2c] goto L433ac2;
  catch `java.lang.Throwable` @[L433a2c..L433a48] goto L433a9e;
  catch `java.lang.Throwable` @[L433a76..L433a88] goto L433a98;
  catch `java.lang.Throwable` @[L433a9a..L433a9c] goto L433a98;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4339ac.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4339b0.  if v0 != 0 then goto L4339e0;
  #L4339b4.  v0:= 1I;
  #L4339b6.  v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L4339ba.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4339be.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4339c4.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.b:()V` @kind virtual;
  #L4339ca.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L4339d0.  v0:= temp;
  #L4339d2.  if v0 == 0 then goto L4339e0;
  #L4339d6.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4339da.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4339e0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L433924.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L433928.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L433b14.  @monitorenter v3
  #L433b16.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.f` @type ^`java.util.Collection` @kind object;
  #L433b1a.  if v0 != 0 then goto L433b22;
  #L433b1e.  @monitorexit v3
  #L433b20.  return @kind void;
  #L433b22.  v1:= 0I;
  #L433b24.  v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.f` @type ^`java.util.Collection` := v1 @kind object;
  #L433b28.  @monitorexit v3
  #L433b2a.  v1:= v3.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L433b2e.  call temp:= `offer`(v1, v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L433b34.  v0:= 1I;
  #L433b36.  v3.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L433b3a.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L433b40.  v0:= temp;
  #L433b42.  if v0 == 0 then goto L433b56;
  #L433b46.  v0:= v3.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L433b4a.  v1:= v3.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L433b4e.  v2:= 0I;
  #L433b50.  call `drainLoop`(v0, v1, v2, v3, v3) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lio/reactivex/Observer;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain;)V` @kind static;
  #L433b56.  return @kind void;
  #L433b58.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L433b5a.  @monitorexit v3
  #L433b5c.  throw v0;
  catch `java.lang.Throwable` @[L433b16..L433b2a] goto L433b58;
  catch `java.lang.Throwable` @[L433b5a..L433b5c] goto L433b58;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L433b84.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.dispose:()V` @kind virtual;
  #L433b8a.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L433b8e.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L433b94.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L433ba8.  @monitorenter v1
  #L433baa.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.f` @type ^`java.util.Collection` @kind object;
  #L433bae.  if v0 != 0 then goto L433bb6;
  #L433bb2.  @monitorexit v1
  #L433bb4.  return @kind void;
  #L433bb6.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L433bbc.  @monitorexit v1
  #L433bbe.  return @kind void;
  #L433bc0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L433bc2.  @monitorexit v1
  #L433bc4.  throw v2;
  catch `java.lang.Throwable` @[L433baa..L433bc4] goto L433bc0;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` v4 @kind this, `io.reactivex.disposables.Disposable` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L433be4.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L433be8.  call temp:= `validate`(v0, v5) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L433bee.  v0:= temp;
  #L433bf0.  if v0 == 0 then goto L433c96;
  #L433bf4.  v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.d` @type ^`io.reactivex.disposables.Disposable` := v5 @kind object;
  #L433bf8.  v0:= v4.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L433bfc.  v1:= 1I;
  #L433bfe.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L433c02.  call temp:= `call`(v2) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L433c08.  v2:= temp @kind object;
  #L433c0a.  v3:= "The buffer supplied is null" @kind object;
  #L433c0e.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L433c14.  v2:= temp @kind object;
  #L433c16.  v2:= (`java.util.Collection`) v2 @kind object;
  #L433c1a.  v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.f` @type ^`java.util.Collection` := v2 @kind object;
  #L433c1e.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L433c22.  call temp:= `call`(v2) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L433c28.  v2:= temp @kind object;
  #L433c2a.  v3:= "The boundary ObservableSource supplied is null" @kind object;
  #L433c2e.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L433c34.  v2:= temp @kind object;
  #L433c36.  v2:= (`io.reactivex.ObservableSource`) v2 @kind object;
  #L433c3a.  v5:= new `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a`;
  #L433c3e.  call `<init>`(v5, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;)V` @kind direct;
  #L433c44.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L433c48.  call `set`(v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L433c4e.  call `onSubscribe`(v0, v4) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L433c54.  v0:= v4.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L433c58.  if v0 != 0 then goto L433c96;
  #L433c5c.  call `subscribe`(v2, v5) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L433c62.  goto L433c96;
  #L433c64.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L433c66.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L433c6c.  v4.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L433c70.  call `dispose`(v5) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L433c76.  call `error`(v2, v0) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L433c7c.  return @kind void;
  #L433c7e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L433c80.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L433c86.  v4.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L433c8a.  call `dispose`(v5) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L433c90.  call `error`(v2, v0) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L433c96.  return @kind void;
  catch `java.lang.Throwable` @[L433bfe..L433c1a] goto L433c7e;
  catch `java.lang.Throwable` @[L433c1e..L433c3a] goto L433c64;
}
