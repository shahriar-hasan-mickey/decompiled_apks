record `io.reactivex.internal.operators.observable.ObservableSkipWhile$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableSkipWhile$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.observable.ObservableSkipWhile$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableSkipWhile$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSkipWhile$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSkipWhile$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipWhile$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4443dc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4443e2.  v0.`io.reactivex.internal.operators.observable.ObservableSkipWhile$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4443e6.  v0.`io.reactivex.internal.operators.observable.ObservableSkipWhile$a.b` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L4443ea.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSkipWhile$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipWhile$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4443fc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipWhile$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L444400.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L444406.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSkipWhile$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipWhile$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4443bc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipWhile$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4443c0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4443c6.  v0:= temp;
  #L4443c8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSkipWhile$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipWhile$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444418.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipWhile$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L44441c.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L444422.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSkipWhile$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipWhile$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444434.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipWhile$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L444438.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44443e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSkipWhile$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipWhile$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444450.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipWhile$a.d` @type ^`boolean` @kind boolean;
  #L444454.  if v0 == 0 then goto L444464;
  #L444458.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipWhile$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L44445c.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L444462.  goto L444484;
  #L444464.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipWhile$a.b` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L444468.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L44446e.  v0:= temp;
  #L444470.  if v0 != 0 then goto L444484;
  #L444474.  v0:= 1I;
  #L444476.  v1.`io.reactivex.internal.operators.observable.ObservableSkipWhile$a.d` @type ^`boolean` := v0 @kind boolean;
  #L44447a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipWhile$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L44447e.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L444484.  return @kind void;
  #L444486.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L444488.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44448e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipWhile$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L444492.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L444498.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipWhile$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L44449c.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4444a2.  return @kind void;
  catch `java.lang.Throwable` @[L444464..L444470] goto L444486;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSkipWhile$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipWhile$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4444c0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipWhile$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4444c4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4444ca.  v0:= temp;
  #L4444cc.  if v0 == 0 then goto L4444de;
  #L4444d0.  v1.`io.reactivex.internal.operators.observable.ObservableSkipWhile$a.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L4444d4.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSkipWhile$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4444d8.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4444de.  return @kind void;
}
