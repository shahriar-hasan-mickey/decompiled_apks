record `io.reactivex.internal.operators.observable.ObservableTakeUntil$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.Observer` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableTakeUntil$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.ArrayCompositeDisposable` `io.reactivex.internal.operators.observable.ObservableTakeUntil$b.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableTakeUntil$b.c` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableTakeUntil$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$b` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.internal.disposables.ArrayCompositeDisposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$b;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/disposables/ArrayCompositeDisposable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L445548.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L44554e.  v0.`io.reactivex.internal.operators.observable.ObservableTakeUntil$b.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L445552.  v0.`io.reactivex.internal.operators.observable.ObservableTakeUntil$b.b` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` := v2 @kind object;
  #L445556.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L445568.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntil$b.b` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L44556c.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.dispose:()V` @kind virtual;
  #L445572.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntil$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L445576.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L44557c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L445590.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntil$b.b` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L445594.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.dispose:()V` @kind virtual;
  #L44559a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntil$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L44559e.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4455a4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4455b8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntil$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L4455bc.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4455c2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$b` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4455d4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$b.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4455d8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4455de.  v0:= temp;
  #L4455e0.  if v0 == 0 then goto L4455f4;
  #L4455e4.  v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$b.c` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L4455e8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$b.b` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L4455ec.  v1:= 0I;
  #L4455ee.  call temp:= `setResource`(v0, v1, v3) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.setResource:(ILio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4455f4.  return @kind void;
}
