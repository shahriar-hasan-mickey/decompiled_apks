record `io.reactivex.internal.operators.observable.ObservableToListSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.observable.ObservableToListSingle$a.a` @AccessFlag FINAL;
  `java.util.Collection` `io.reactivex.internal.operators.observable.ObservableToListSingle$a.b` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableToListSingle$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableToListSingle$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableToListSingle$a;.<init>:(Lio/reactivex/SingleObserver;Ljava/util/Collection;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L446c38.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L446c3e.  v0.`io.reactivex.internal.operators.observable.ObservableToListSingle$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L446c42.  v0.`io.reactivex.internal.operators.observable.ObservableToListSingle$a.b` @type ^`java.util.Collection` := v2 @kind object;
  #L446c46.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableToListSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableToListSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L446c58.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableToListSingle$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L446c5c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L446c62.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableToListSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableToListSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L446c18.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableToListSingle$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L446c1c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L446c22.  v0:= temp;
  #L446c24.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableToListSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableToListSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L446c74.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableToListSingle$a.b` @type ^`java.util.Collection` @kind object;
  #L446c78.  v1:= 0I;
  #L446c7a.  v2.`io.reactivex.internal.operators.observable.ObservableToListSingle$a.b` @type ^`java.util.Collection` := v1 @kind object;
  #L446c7e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableToListSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L446c82.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L446c88.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableToListSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableToListSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L446c9c.  v0:= 0I;
  #L446c9e.  v1.`io.reactivex.internal.operators.observable.ObservableToListSingle$a.b` @type ^`java.util.Collection` := v0 @kind object;
  #L446ca2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableToListSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L446ca6.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L446cac.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableToListSingle$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableToListSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L446cc0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableToListSingle$a.b` @type ^`java.util.Collection` @kind object;
  #L446cc4.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L446cca.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableToListSingle$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableToListSingle$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L446cdc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableToListSingle$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L446ce0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L446ce6.  v0:= temp;
  #L446ce8.  if v0 == 0 then goto L446cfa;
  #L446cec.  v1.`io.reactivex.internal.operators.observable.ObservableToListSingle$a.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L446cf0.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableToListSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L446cf4.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L446cfa.  return @kind void;
}
