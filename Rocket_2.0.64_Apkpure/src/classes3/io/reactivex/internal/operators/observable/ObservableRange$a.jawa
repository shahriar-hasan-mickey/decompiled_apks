record `io.reactivex.internal.operators.observable.ObservableRange$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicIntQueueDisposable` @kind class {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableRange$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableRange$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableRange$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableRange$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRange$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRange$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `long` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$a;.<init>:(Lio/reactivex/Observer;JJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43fb10.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L43fb16.  v0.`io.reactivex.internal.operators.observable.ObservableRange$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L43fb1a.  v0.`io.reactivex.internal.operators.observable.ObservableRange$a.c` @type ^`long` := v2 @kind wide;
  #L43fb1e.  v0.`io.reactivex.internal.operators.observable.ObservableRange$a.b` @type ^`long` := v4 @kind wide;
  #L43fb22.  return @kind void;
}
procedure `java.lang.Integer` `a`(`io.reactivex.internal.operators.observable.ObservableRange$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$a;.a:()Ljava/lang/Integer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43fab0.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRange$a.c` @type ^`long` @kind wide;
  #L43fab4.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableRange$a.b` @type ^`long` @kind wide;
  #L43fab8.  v4:= lcmp(v0, v2);
  #L43fabc.  if v4 == 0 then goto L43fad6;
  #L43fac0.  v2:= 1L;
  #L43fac4.  v2:= v2 + v0 @kind long;
  #L43fac6.  v5.`io.reactivex.internal.operators.observable.ObservableRange$a.c` @type ^`long` := v2 @kind wide;
  #L43faca.  v1:= (`int`) v0 @kind l2i;
  #L43facc.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43fad2.  v0:= temp @kind object;
  #L43fad4.  return v0 @kind object;
  #L43fad6.  v0:= 1I;
  #L43fad8.  call `lazySet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L43fade.  v0:= 0I;
  #L43fae0.  return v0 @kind object;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableRange$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43fb34.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRange$a.b` @type ^`long` @kind wide;
  #L43fb38.  v2.`io.reactivex.internal.operators.observable.ObservableRange$a.c` @type ^`long` := v0 @kind wide;
  #L43fb3c.  v0:= 1I;
  #L43fb3e.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L43fb44.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableRange$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43fb58.  v0:= 1I;
  #L43fb5a.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L43fb60.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableRange$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43fa40.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L43fa46.  v0:= temp;
  #L43fa48.  if v0 == 0 then goto L43fa50;
  #L43fa4c.  v0:= 1I;
  #L43fa4e.  goto L43fa52;
  #L43fa50.  v0:= 0I;
  #L43fa52.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.observable.ObservableRange$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43fa64.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRange$a.c` @type ^`long` @kind wide;
  #L43fa68.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableRange$a.b` @type ^`long` @kind wide;
  #L43fa6c.  v4:= lcmp(v0, v2);
  #L43fa70.  if v4 != 0 then goto L43fa78;
  #L43fa74.  v0:= 1I;
  #L43fa76.  goto L43fa7a;
  #L43fa78.  v0:= 0I;
  #L43fa7a.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableRange$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L43faf4.  call temp:= `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$a;.a:()Ljava/lang/Integer;` @kind virtual;
  #L43fafa.  v0:= temp @kind object;
  #L43fafc.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableRange$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43fa8c.  v0:= 1I;
  #L43fa8e.  v2:= v2 ^& v0 @kind int;
  #L43fa90.  if v2 == 0 then goto L43fa9a;
  #L43fa94.  v1.`io.reactivex.internal.operators.observable.ObservableRange$a.d` @type ^`boolean` := v0 @kind boolean;
  #L43fa98.  return v0;
  #L43fa9a.  v2:= 0I;
  #L43fa9c.  return v2;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableRange$a` v7 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$a;.run:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L43fb74.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableRange$a.d` @type ^`boolean` @kind boolean;
  #L43fb78.  if v0 == 0 then goto L43fb7e;
  #L43fb7c.  return @kind void;
  #L43fb7e.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableRange$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43fb82.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableRange$a.b` @type ^`long` @kind wide;
  #L43fb86.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableRange$a.c` @type ^`long` @kind wide;
  #L43fb8a.  v5:= lcmp(v3, v1);
  #L43fb8e.  if v5 == 0 then goto L43fbb6;
  #L43fb92.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L43fb98.  v5:= temp;
  #L43fb9a.  if v5 != 0 then goto L43fbb6;
  #L43fb9e.  v5:= (`int`) v3 @kind l2i;
  #L43fba0.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43fba6.  v5:= temp @kind object;
  #L43fba8.  call `onNext`(v0, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43fbae.  v5:= 1L;
  #L43fbb2.  v3:= v3 + v5 @kind long;
  #L43fbb4.  goto L43fb8a;
  #L43fbb6.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L43fbbc.  v1:= temp;
  #L43fbbe.  if v1 != 0 then goto L43fbd0;
  #L43fbc2.  v1:= 1I;
  #L43fbc4.  call `lazySet`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L43fbca.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43fbd0.  return @kind void;
}
