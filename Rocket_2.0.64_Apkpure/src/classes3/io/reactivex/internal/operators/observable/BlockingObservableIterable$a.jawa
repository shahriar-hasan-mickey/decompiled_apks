record `io.reactivex.internal.operators.observable.BlockingObservableIterable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `java.util.Iterator` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.observable.BlockingObservableIterable$a.a` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `io.reactivex.internal.operators.observable.BlockingObservableIterable$a.b` @AccessFlag FINAL;
  `java.util.concurrent.locks.Condition` `io.reactivex.internal.operators.observable.BlockingObservableIterable$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.BlockingObservableIterable$a.d` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.BlockingObservableIterable$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.BlockingObservableIterable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4319dc.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4319e2.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L4319e6.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4319ec.  v1.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v0 @kind object;
  #L4319f0.  v2:= new `java.util.concurrent.locks.ReentrantLock`;
  #L4319f4.  call `<init>`(v2) @signature `Ljava/util/concurrent/locks/ReentrantLock;.<init>:()V` @kind direct;
  #L4319fa.  v1.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.b` @type ^`java.util.concurrent.locks.Lock` := v2 @kind object;
  #L4319fe.  call temp:= `newCondition`(v2) @signature `Ljava/util/concurrent/locks/Lock;.newCondition:()Ljava/util/concurrent/locks/Condition;` @kind interface;
  #L431a04.  v2:= temp @kind object;
  #L431a06.  v1.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.c` @type ^`java.util.concurrent.locks.Condition` := v2 @kind object;
  #L431a0a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L431ad4.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.b` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L431ad8.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L431ade.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.c` @type ^`java.util.concurrent.locks.Condition` @kind object;
  #L431ae2.  call `signalAll`(v0) @signature `Ljava/util/concurrent/locks/Condition;.signalAll:()V` @kind interface;
  #L431ae8.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.b` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L431aec.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L431af2.  return @kind void;
  #L431af4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L431af6.  v1:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.b` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L431afa.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L431b00.  throw v0;
  catch `java.lang.Throwable` @[L431ade..L431ae8] goto L431af4;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L431a1c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L431a22.  return @kind void;
}
procedure `boolean` `hasNext`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4318b0.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.d` @type ^`boolean` @kind boolean;
  #L4318b4.  v1:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4318b8.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4318be.  v1:= temp;
  #L4318c0.  if v0 == 0 then goto L4318de;
  #L4318c4.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.e` @type ^`java.lang.Throwable` @kind object;
  #L4318c8.  if v0 != 0 then goto L4318d4;
  #L4318cc.  if v1 == 0 then goto L4318de;
  #L4318d0.  v0:= 0I;
  #L4318d2.  return v0;
  #L4318d4.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4318da.  v0:= temp @kind object;
  #L4318dc.  throw v0;
  #L4318de.  if v1 == 0 then goto L431948;
  #L4318e2.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L4318e8.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.b` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4318ec.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L4318f2.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.d` @type ^`boolean` @kind boolean;
  #L4318f6.  if v0 != 0 then goto L431916;
  #L4318fa.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4318fe.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L431904.  v0:= temp;
  #L431906.  if v0 == 0 then goto L431916;
  #L43190a.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.c` @type ^`java.util.concurrent.locks.Condition` @kind object;
  #L43190e.  call `await`(v0) @signature `Ljava/util/concurrent/locks/Condition;.await:()V` @kind interface;
  #L431914.  goto L4318f2;
  #L431916.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.b` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L43191a.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L431920.  goto L4318b0;
  #L431922.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L431924.  v1:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.b` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L431928.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L43192e.  throw v0;
  #L431930.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L431932.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L431938.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.a:()V` @kind virtual;
  #L43193e.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L431944.  v0:= temp @kind object;
  #L431946.  throw v0;
  #L431948.  v0:= 1I;
  #L43194a.  return v0;
  catch `java.lang.InterruptedException` @[L4318e2..L4318f2] goto L431930;
  catch `java.lang.Throwable` @[L4318f2..L431914] goto L431922;
  catch `java.lang.InterruptedException` @[L431916..L431930] goto L431930;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43197c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L431982.  v0:= temp @kind object;
  #L431984.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L431988.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43198e.  v0:= temp;
  #L431990.  return v0;
}
procedure `java.lang.Object` `next`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4319a4.  call temp:= `hasNext`(v1) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.hasNext:()Z` @kind virtual;
  #L4319aa.  v0:= temp;
  #L4319ac.  if v0 == 0 then goto L4319be;
  #L4319b0.  v0:= v1.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4319b4.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4319ba.  v0:= temp @kind object;
  #L4319bc.  return v0 @kind object;
  #L4319be.  v0:= new `java.util.NoSuchElementException`;
  #L4319c2.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L4319c8.  throw v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431a34.  v0:= 1I;
  #L431a36.  v1.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.d` @type ^`boolean` := v0 @kind boolean;
  #L431a3a.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.a:()V` @kind virtual;
  #L431a40.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L431a54.  v0.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.e` @type ^`java.lang.Throwable` := v1 @kind object;
  #L431a58.  v1:= 1I;
  #L431a5a.  v0.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.d` @type ^`boolean` := v1 @kind boolean;
  #L431a5e.  call `a`(v0) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.a:()V` @kind virtual;
  #L431a64.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431a78.  v0:= v1.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L431a7c.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L431a82.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.a:()V` @kind virtual;
  #L431a88.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L431a9c.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L431aa2.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L431ab4.  v0:= new `java.lang.UnsupportedOperationException`;
  #L431ab8.  v1:= "remove" @kind object;
  #L431abc.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L431ac2.  throw v0;
}
