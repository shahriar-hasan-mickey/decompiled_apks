record `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.d` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.e` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.f` @AccessFlag ;
  `io.reactivex.internal.disposables.ObserverFullArbiter` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.g` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.i` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler$Worker` v5 @kind object, `io.reactivex.ObservableSource` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$c;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4466b0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4466b6.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4466ba.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.b` @type ^`long` := v2 @kind wide;
  #L4466be.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L4466c2.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.d` @type ^`io.reactivex.Scheduler$Worker` := v5 @kind object;
  #L4466c6.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.e` @type ^`io.reactivex.ObservableSource` := v6 @kind object;
  #L4466ca.  v2:= new `io.reactivex.internal.disposables.ObserverFullArbiter`;
  #L4466ce.  v3:= 8I;
  #L4466d2.  call `<init>`(v2, v1, v0, v3) @signature `Lio/reactivex/internal/disposables/ObserverFullArbiter;.<init>:(Lio/reactivex/Observer;Lio/reactivex/disposables/Disposable;I)V` @kind direct;
  #L4466d8.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.g` @type ^`io.reactivex.internal.disposables.ObserverFullArbiter` := v2 @kind object;
  #L4466dc.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$c;.a:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L446828.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44682e.  v0:= temp @kind object;
  #L446830.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L446834.  if v0 == 0 then goto L44683e;
  #L446838.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44683e.  v1:= `@@io.reactivex.internal.operators.observable.ObservableTimeoutTimed.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L446842.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L446848.  v0:= temp;
  #L44684a.  if v0 == 0 then goto L446872;
  #L44684e.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L446852.  v1:= new `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c$a`;
  #L446856.  call `<init>`(v1, v3, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$c$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$c;J)V` @kind direct;
  #L44685c.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.b` @type ^`long` @kind wide;
  #L446860.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L446864.  call temp:= `schedule`(v0, v1, v4, v2) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L44686a.  v4:= temp @kind object;
  #L44686c.  call temp:= `replace`(v3, v4) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L446872.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$c;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L446884.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.e` @type ^`io.reactivex.ObservableSource` @kind object;
  #L446888.  v1:= new `io.reactivex.internal.observers.FullArbiterObserver`;
  #L44688c.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.g` @type ^`io.reactivex.internal.disposables.ObserverFullArbiter` @kind object;
  #L446890.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/observers/FullArbiterObserver;.<init>:(Lio/reactivex/internal/disposables/ObserverFullArbiter;)V` @kind direct;
  #L446896.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L44689c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4466f0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4466f4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4466fa.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4466fe.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L446704.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L446690.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L446694.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L44669a.  v0:= temp;
  #L44669c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L446718.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.i` @type ^`boolean` @kind boolean;
  #L44671c.  if v0 == 0 then goto L446722;
  #L446720.  return @kind void;
  #L446722.  v0:= 1I;
  #L446724.  v2.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.i` @type ^`boolean` := v0 @kind boolean;
  #L446728.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.g` @type ^`io.reactivex.internal.disposables.ObserverFullArbiter` @kind object;
  #L44672c.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L446730.  call `onComplete`(v0, v1) @signature `Lio/reactivex/internal/disposables/ObserverFullArbiter;.onComplete:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L446736.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L44673a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L446740.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L446754.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.i` @type ^`boolean` @kind boolean;
  #L446758.  if v0 == 0 then goto L446764;
  #L44675c.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L446762.  return @kind void;
  #L446764.  v0:= 1I;
  #L446766.  v2.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.i` @type ^`boolean` := v0 @kind boolean;
  #L44676a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.g` @type ^`io.reactivex.internal.disposables.ObserverFullArbiter` @kind object;
  #L44676e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L446772.  call `onError`(v0, v3, v1) @signature `Lio/reactivex/internal/disposables/ObserverFullArbiter;.onError:(Ljava/lang/Throwable;Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L446778.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L44677c.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L446782.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L446794.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.i` @type ^`boolean` @kind boolean;
  #L446798.  if v0 == 0 then goto L44679e;
  #L44679c.  return @kind void;
  #L44679e.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.h` @type ^`long` @kind wide;
  #L4467a2.  v2:= 1L;
  #L4467a6.  v0:= v0 + v2 @kind long;
  #L4467a8.  v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.h` @type ^`long` := v0 @kind wide;
  #L4467ac.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.g` @type ^`io.reactivex.internal.disposables.ObserverFullArbiter` @kind object;
  #L4467b0.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4467b4.  call temp:= `onNext`(v2, v5, v3) @signature `Lio/reactivex/internal/disposables/ObserverFullArbiter;.onNext:(Ljava/lang/Object;Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4467ba.  v5:= temp;
  #L4467bc.  if v5 == 0 then goto L4467c6;
  #L4467c0.  call `a`(v4, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$c;.a:(J)V` @kind virtual;
  #L4467c6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$c;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4467d8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4467dc.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4467e2.  v0:= temp;
  #L4467e4.  if v0 == 0 then goto L446814;
  #L4467e8.  v2.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.f` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L4467ec.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.g` @type ^`io.reactivex.internal.disposables.ObserverFullArbiter` @kind object;
  #L4467f0.  call temp:= `setDisposable`(v0, v3) @signature `Lio/reactivex/internal/disposables/ObserverFullArbiter;.setDisposable:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4467f6.  v3:= temp;
  #L4467f8.  if v3 == 0 then goto L446814;
  #L4467fc.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L446800.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.g` @type ^`io.reactivex.internal.disposables.ObserverFullArbiter` @kind object;
  #L446804.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L44680a.  v0:= 0L;
  #L44680e.  call `a`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$c;.a:(J)V` @kind virtual;
  #L446814.  return @kind void;
}
