record `io.reactivex.internal.operators.observable.ObservablePublish` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.observables.ConnectableObservable` @kind class, `io.reactivex.internal.fuseable.HasUpstreamObservableSource` @kind interface {
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservablePublish.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservablePublish.b` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservablePublish.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservablePublish` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.ObservableSource` v2 @kind object, `java.util.concurrent.atomic.AtomicReference` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/ObservableSource;Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L43f950.  call `<init>`(v0) @signature `Lio/reactivex/observables/ConnectableObservable;.<init>:()V` @kind direct;
  #L43f956.  v0.`io.reactivex.internal.operators.observable.ObservablePublish.c` @type ^`io.reactivex.ObservableSource` := v1 @kind object;
  #L43f95a.  v0.`io.reactivex.internal.operators.observable.ObservablePublish.a` @type ^`io.reactivex.ObservableSource` := v2 @kind object;
  #L43f95e.  v0.`io.reactivex.internal.operators.observable.ObservablePublish.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L43f962.  return @kind void;
}
procedure `io.reactivex.observables.ConnectableObservable` `create`(`io.reactivex.ObservableSource` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish;.create:(Lio/reactivex/ObservableSource;)Lio/reactivex/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L43f918.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L43f91c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43f922.  v1:= new `io.reactivex.internal.operators.observable.ObservablePublish$c`;
  #L43f926.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$c;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L43f92c.  v2:= new `io.reactivex.internal.operators.observable.ObservablePublish`;
  #L43f930.  call `<init>`(v2, v1, v3, v0) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/ObservableSource;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L43f936.  call temp:= `onAssembly`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/observables/ConnectableObservable;)Lio/reactivex/observables/ConnectableObservable;` @kind static;
  #L43f93c.  v3:= temp @kind object;
  #L43f93e.  return v3 @kind object;
}
procedure `void` `connect`(`io.reactivex.internal.operators.observable.ObservablePublish` v4 @kind this, `io.reactivex.functions.Consumer` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish;.connect:(Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43f974.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublish.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43f978.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43f97e.  v0:= temp @kind object;
  #L43f980.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$b`) v0 @kind object;
  #L43f984.  if v0 == 0 then goto L43f994;
  #L43f988.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.isDisposed:()Z` @kind virtual;
  #L43f98e.  v1:= temp;
  #L43f990.  if v1 == 0 then goto L43f9b6;
  #L43f994.  v1:= new `io.reactivex.internal.operators.observable.ObservablePublish$b`;
  #L43f998.  v2:= v4.`io.reactivex.internal.operators.observable.ObservablePublish.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43f99c.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L43f9a2.  v2:= v4.`io.reactivex.internal.operators.observable.ObservablePublish.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43f9a6.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L43f9ac.  v0:= temp;
  #L43f9ae.  if v0 != 0 then goto L43f9b4;
  #L43f9b2.  goto L43f974;
  #L43f9b4.  v0:= v1 @kind object;
  #L43f9b6.  v1:= v0.`io.reactivex.internal.operators.observable.ObservablePublish$b.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L43f9ba.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L43f9c0.  v1:= temp;
  #L43f9c2.  v2:= 1I;
  #L43f9c4.  v3:= 0I;
  #L43f9c6.  if v1 != 0 then goto L43f9dc;
  #L43f9ca.  v1:= v0.`io.reactivex.internal.operators.observable.ObservablePublish$b.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L43f9ce.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L43f9d4.  v1:= temp;
  #L43f9d6.  if v1 == 0 then goto L43f9dc;
  #L43f9da.  goto L43f9de;
  #L43f9dc.  v2:= 0I;
  #L43f9de.  call `accept`(v5, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L43f9e4.  if v2 == 0 then goto L43f9f2;
  #L43f9e8.  v5:= v4.`io.reactivex.internal.operators.observable.ObservablePublish.a` @type ^`io.reactivex.ObservableSource` @kind object;
  #L43f9ec.  call `subscribe`(v5, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L43f9f2.  return @kind void;
  #L43f9f4.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43f9f6.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43f9fc.  call temp:= `wrapOrThrow`(v5) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L43fa02.  v5:= temp @kind object;
  #L43fa04.  throw v5;
  catch `java.lang.Throwable` @[L43f9de..L43f9e4] goto L43f9f4;
}
procedure `io.reactivex.ObservableSource` `source`(`io.reactivex.internal.operators.observable.ObservablePublish` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish;.source:()Lio/reactivex/ObservableSource;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f900.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublish.a` @type ^`io.reactivex.ObservableSource` @kind object;
  #L43f904.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservablePublish` v1 @kind this, `io.reactivex.Observer` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L43fa24.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublish.c` @type ^`io.reactivex.ObservableSource` @kind object;
  #L43fa28.  call `subscribe`(v0, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L43fa2e.  return @kind void;
}
