record `io.reactivex.internal.operators.observable.ObservableScalarXMap` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableScalarXMap` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L442cfc.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L442d02.  v0:= new `java.lang.IllegalStateException`;
  #L442d06.  v1:= "No instances!" @kind object;
  #L442d0a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L442d10.  throw v0;
}
procedure `io.reactivex.Observable` `scalarXMap`(`java.lang.Object` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap;.scalarXMap:(Ljava/lang/Object;Lio/reactivex/functions/Function;)Lio/reactivex/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L442cd8.  v0:= new `io.reactivex.internal.operators.observable.ObservableScalarXMap$a`;
  #L442cdc.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$a;.<init>:(Ljava/lang/Object;Lio/reactivex/functions/Function;)V` @kind direct;
  #L442ce2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Observable;)Lio/reactivex/Observable;` @kind static;
  #L442ce8.  v1:= temp @kind object;
  #L442cea.  return v1 @kind object;
}
procedure `boolean` `tryScalarXMapSubscribe`(`io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.Observer` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap;.tryScalarXMapSubscribe:(Lio/reactivex/ObservableSource;Lio/reactivex/Observer;Lio/reactivex/functions/Function;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L442bf8.  v0:= instanceof @variable v1 @type ^`java.util.concurrent.Callable` @kind boolean;
  #L442bfc.  if v0 == 0 then goto L442ca2;
  #L442c00.  v0:= 1I;
  #L442c02.  v1:= (`java.util.concurrent.Callable`) v1 @kind object;
  #L442c06.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L442c0c.  v1:= temp @kind object;
  #L442c0e.  if v1 != 0 then goto L442c1a;
  #L442c12.  call `complete`(v2) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.complete:(Lio/reactivex/Observer;)V` @kind static;
  #L442c18.  return v0;
  #L442c1a.  call temp:= `apply`(v3, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L442c20.  v1:= temp @kind object;
  #L442c22.  v3:= "The mapper returned a null ObservableSource" @kind object;
  #L442c26.  call temp:= `requireNonNull`(v1, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L442c2c.  v1:= temp @kind object;
  #L442c2e.  v1:= (`io.reactivex.ObservableSource`) v1 @kind object;
  #L442c32.  v3:= instanceof @variable v1 @type ^`java.util.concurrent.Callable` @kind boolean;
  #L442c36.  if v3 == 0 then goto L442c7a;
  #L442c3a.  v1:= (`java.util.concurrent.Callable`) v1 @kind object;
  #L442c3e.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L442c44.  v1:= temp @kind object;
  #L442c46.  if v1 != 0 then goto L442c52;
  #L442c4a.  call `complete`(v2) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.complete:(Lio/reactivex/Observer;)V` @kind static;
  #L442c50.  return v0;
  #L442c52.  v3:= new `io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable`;
  #L442c56.  call `<init>`(v3, v2, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.<init>:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @kind direct;
  #L442c5c.  call `onSubscribe`(v2, v3) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L442c62.  call `run`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.run:()V` @kind virtual;
  #L442c68.  goto L442c80;
  #L442c6a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L442c6c.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L442c72.  call `error`(v1, v2) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L442c78.  return v0;
  #L442c7a.  call `subscribe`(v1, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L442c80.  return v0;
  #L442c82.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L442c84.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L442c8a.  call `error`(v1, v2) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L442c90.  return v0;
  #L442c92.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L442c94.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L442c9a.  call `error`(v1, v2) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L442ca0.  return v0;
  #L442ca2.  v1:= 0I;
  #L442ca4.  return v1;
  catch `java.lang.Throwable` @[L442c02..L442c0e] goto L442c92;
  catch `java.lang.Throwable` @[L442c1a..L442c32] goto L442c82;
  catch `java.lang.Throwable` @[L442c3a..L442c46] goto L442c6a;
}
