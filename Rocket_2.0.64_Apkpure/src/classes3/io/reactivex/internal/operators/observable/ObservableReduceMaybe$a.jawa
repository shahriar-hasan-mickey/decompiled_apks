record `io.reactivex.internal.operators.observable.ObservableReduceMaybe$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.c` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.d` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceMaybe$a;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43fe58.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43fe5e.  v0.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L43fe62.  v0.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.b` @type ^`io.reactivex.functions.BiFunction` := v2 @kind object;
  #L43fe66.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43fe78.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43fe7c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43fe82.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43fe38.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43fe3c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L43fe42.  v0:= temp;
  #L43fe44.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43fe94.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.c` @type ^`boolean` @kind boolean;
  #L43fe98.  if v0 == 0 then goto L43fe9e;
  #L43fe9c.  return @kind void;
  #L43fe9e.  v0:= 1I;
  #L43fea0.  v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.c` @type ^`boolean` := v0 @kind boolean;
  #L43fea4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.d` @type ^`java.lang.Object` @kind object;
  #L43fea8.  v1:= 0I;
  #L43feaa.  v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.d` @type ^`java.lang.Object` := v1 @kind object;
  #L43feae.  if v0 == 0 then goto L43febe;
  #L43feb2.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L43feb6.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L43febc.  goto L43fec8;
  #L43febe.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L43fec2.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L43fec8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43fedc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.c` @type ^`boolean` @kind boolean;
  #L43fee0.  if v0 == 0 then goto L43feec;
  #L43fee4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43feea.  return @kind void;
  #L43feec.  v0:= 1I;
  #L43feee.  v1.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.c` @type ^`boolean` := v0 @kind boolean;
  #L43fef2.  v0:= 0I;
  #L43fef4.  v1.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.d` @type ^`java.lang.Object` := v0 @kind object;
  #L43fef8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L43fefc.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43ff02.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43ff14.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.c` @type ^`boolean` @kind boolean;
  #L43ff18.  if v0 != 0 then goto L43ff60;
  #L43ff1c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.d` @type ^`java.lang.Object` @kind object;
  #L43ff20.  if v0 != 0 then goto L43ff2a;
  #L43ff24.  v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.d` @type ^`java.lang.Object` := v3 @kind object;
  #L43ff28.  goto L43ff60;
  #L43ff2a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.b` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L43ff2e.  call temp:= `apply`(v1, v0, v3) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43ff34.  v3:= temp @kind object;
  #L43ff36.  v0:= "The reducer returned a null value" @kind object;
  #L43ff3a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43ff40.  v3:= temp @kind object;
  #L43ff42.  v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.d` @type ^`java.lang.Object` := v3 @kind object;
  #L43ff46.  goto L43ff60;
  #L43ff48.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43ff4a.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43ff50.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43ff54.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43ff5a.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceMaybe$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43ff60.  return @kind void;
  catch `java.lang.Throwable` @[L43ff2a..L43ff46] goto L43ff48;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceMaybe$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43ff80.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43ff84.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43ff8a.  v0:= temp;
  #L43ff8c.  if v0 == 0 then goto L43ff9e;
  #L43ff90.  v1.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.e` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L43ff94.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L43ff98.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43ff9e.  return @kind void;
}
