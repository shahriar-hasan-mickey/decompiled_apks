record `io.reactivex.internal.operators.observable.ObservableSingleMaybe$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.b` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleMaybe$a;.<init>:(Lio/reactivex/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L443984.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44398a.  v0.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L44398e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4439a0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4439a4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4439aa.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443964.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L443968.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L44396e.  v0:= temp;
  #L443970.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4439bc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.d` @type ^`boolean` @kind boolean;
  #L4439c0.  if v0 == 0 then goto L4439c6;
  #L4439c4.  return @kind void;
  #L4439c6.  v0:= 1I;
  #L4439c8.  v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4439cc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.c` @type ^`java.lang.Object` @kind object;
  #L4439d0.  v1:= 0I;
  #L4439d2.  v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4439d6.  if v0 != 0 then goto L4439e6;
  #L4439da.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4439de.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L4439e4.  goto L4439f0;
  #L4439e6.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4439ea.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4439f0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443a04.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.d` @type ^`boolean` @kind boolean;
  #L443a08.  if v0 == 0 then goto L443a14;
  #L443a0c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L443a12.  return @kind void;
  #L443a14.  v0:= 1I;
  #L443a16.  v1.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.d` @type ^`boolean` := v0 @kind boolean;
  #L443a1a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L443a1e.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L443a24.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L443a38.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.d` @type ^`boolean` @kind boolean;
  #L443a3c.  if v0 == 0 then goto L443a42;
  #L443a40.  return @kind void;
  #L443a42.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.c` @type ^`java.lang.Object` @kind object;
  #L443a46.  if v0 == 0 then goto L443a74;
  #L443a4a.  v3:= 1I;
  #L443a4c.  v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.d` @type ^`boolean` := v3 @kind boolean;
  #L443a50.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L443a54.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L443a5a.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L443a5e.  v0:= new `java.lang.IllegalArgumentException`;
  #L443a62.  v1:= "Sequence contains more than one element!" @kind object;
  #L443a66.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L443a6c.  call `onError`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L443a72.  return @kind void;
  #L443a74.  v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.c` @type ^`java.lang.Object` := v3 @kind object;
  #L443a78.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleMaybe$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443a8c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L443a90.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L443a96.  v0:= temp;
  #L443a98.  if v0 == 0 then goto L443aaa;
  #L443a9c.  v1.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.b` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L443aa0.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L443aa4.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L443aaa.  return @kind void;
}
