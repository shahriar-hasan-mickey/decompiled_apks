record `io.reactivex.internal.operators.observable.ObservableRefCount$b` @kind class @AccessFlag FINAL extends `io.reactivex.functions.Consumer` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableRefCount$b.a` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableRefCount$b.b` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.internal.operators.observable.ObservableRefCount` `io.reactivex.internal.operators.observable.ObservableRefCount$b.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRefCount$b` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableRefCount` v1 @kind object, `io.reactivex.Observer` v2 @kind object, `java.util.concurrent.atomic.AtomicBoolean` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$b;.<init>:(Lio/reactivex/internal/operators/observable/ObservableRefCount;Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicBoolean;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4403b8.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` := v1 @kind object;
  #L4403bc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4403c2.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount$b.a` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L4403c6.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount$b.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L4403ca.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableRefCount$b` v3 @kind this, `io.reactivex.disposables.Disposable` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$b;.a:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4403dc.  v0:= 0I;
  #L4403de.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableRefCount$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L4403e2.  v1:= v1.`io.reactivex.internal.operators.observable.ObservableRefCount.b` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4403e6.  call temp:= `add`(v1, v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4403ec.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableRefCount$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L4403f0.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableRefCount$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L4403f4.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableRefCount.b` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4403f8.  call `e`(v4, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.e:(Lio/reactivex/Observer;Lio/reactivex/disposables/CompositeDisposable;)V` @kind virtual;
  #L4403fe.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableRefCount$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L440402.  v4:= v4.`io.reactivex.internal.operators.observable.ObservableRefCount.d` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L440406.  call `unlock`(v4) @signature `Ljava/util/concurrent/locks/ReentrantLock;.unlock:()V` @kind virtual;
  #L44040c.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableRefCount$b.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L440410.  call `set`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L440416.  return @kind void;
  #L440418.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44041a.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableRefCount$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L44041e.  v1:= v1.`io.reactivex.internal.operators.observable.ObservableRefCount.d` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L440422.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantLock;.unlock:()V` @kind virtual;
  #L440428.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableRefCount$b.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L44042c.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L440432.  throw v4;
  catch `java.lang.Throwable` @[L4403de..L4403fe] goto L440418;
}
procedure `void` `accept`(`io.reactivex.internal.operators.observable.ObservableRefCount$b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$b;.accept:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L440450.  v1:= (`io.reactivex.disposables.Disposable`) v1 @kind object;
  #L440454.  call `a`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$b;.a:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L44045a.  return @kind void;
}
