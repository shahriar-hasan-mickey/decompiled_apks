record `io.reactivex.internal.operators.observable.ObservableCreate$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.ObservableEmitter` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableCreate$a.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableCreate$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableCreate$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L436df8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L436dfe.  v0.`io.reactivex.internal.operators.observable.ObservableCreate$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L436e02.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableCreate$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L436e14.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L436e1a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableCreate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436db4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L436dba.  v0:= temp @kind object;
  #L436dbc.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L436dc0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L436dc6.  v0:= temp;
  #L436dc8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableCreate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436e2c.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.isDisposed:()Z` @kind virtual;
  #L436e32.  v0:= temp;
  #L436e34.  if v0 != 0 then goto L436e54;
  #L436e38.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L436e3c.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L436e42.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.dispose:()V` @kind virtual;
  #L436e48.  goto L436e54;
  #L436e4a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L436e4c.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.dispose:()V` @kind virtual;
  #L436e52.  throw v0;
  #L436e54.  return @kind void;
  catch `java.lang.Throwable` @[L436e38..L436e42] goto L436e4a;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableCreate$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436e74.  if v2 != 0 then goto L436e86;
  #L436e78.  v2:= new `java.lang.NullPointerException`;
  #L436e7c.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L436e80.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L436e86.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.isDisposed:()Z` @kind virtual;
  #L436e8c.  v0:= temp;
  #L436e8e.  if v0 != 0 then goto L436eae;
  #L436e92.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L436e96.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L436e9c.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.dispose:()V` @kind virtual;
  #L436ea2.  goto L436eb4;
  #L436ea4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L436ea6.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.dispose:()V` @kind virtual;
  #L436eac.  throw v2;
  #L436eae.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L436eb4.  return @kind void;
  catch `java.lang.Throwable` @[L436e92..L436e9c] goto L436ea4;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableCreate$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436ed4.  if v2 != 0 then goto L436eee;
  #L436ed8.  v2:= new `java.lang.NullPointerException`;
  #L436edc.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L436ee0.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L436ee6.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L436eec.  return @kind void;
  #L436eee.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.isDisposed:()Z` @kind virtual;
  #L436ef4.  v0:= temp;
  #L436ef6.  if v0 != 0 then goto L436f04;
  #L436efa.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L436efe.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L436f04.  return @kind void;
}
procedure `io.reactivex.ObservableEmitter` `serialize`(`io.reactivex.internal.operators.observable.ObservableCreate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.serialize:()Lio/reactivex/ObservableEmitter;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436ddc.  v0:= new `io.reactivex.internal.operators.observable.ObservableCreate$b`;
  #L436de0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.<init>:(Lio/reactivex/ObservableEmitter;)V` @kind direct;
  #L436de6.  return v0 @kind object;
}
procedure `void` `setCancellable`(`io.reactivex.internal.operators.observable.ObservableCreate$a` v1 @kind this, `io.reactivex.functions.Cancellable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.setCancellable:(Lio/reactivex/functions/Cancellable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436f18.  v0:= new `io.reactivex.internal.disposables.CancellableDisposable`;
  #L436f1c.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/disposables/CancellableDisposable;.<init>:(Lio/reactivex/functions/Cancellable;)V` @kind direct;
  #L436f22.  call `setDisposable`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L436f28.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.internal.operators.observable.ObservableCreate$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L436f3c.  call temp:= `set`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L436f42.  return @kind void;
}
