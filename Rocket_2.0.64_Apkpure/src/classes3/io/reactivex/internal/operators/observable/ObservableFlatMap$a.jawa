record `io.reactivex.internal.operators.observable.ObservableFlatMap$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface {
  `long` `io.reactivex.internal.operators.observable.ObservableFlatMap$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableFlatMap$b` `io.reactivex.internal.operators.observable.ObservableFlatMap$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMap$a.c` @AccessFlag VOLATILE;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.observable.ObservableFlatMap$a.d` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.observable.ObservableFlatMap$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableFlatMap$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFlatMap$a` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMap$b` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4391dc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4391e2.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMap$a.a` @type ^`long` := v2 @kind wide;
  #L4391e6.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMap$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$b` := v1 @kind object;
  #L4391ea.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableFlatMap$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$a;.a:()V` @AccessFlag PUBLIC {
    temp;

  #L4391fc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L439202.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableFlatMap$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L439214.  v0:= 1I;
  #L439216.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$a.c` @type ^`boolean` := v0 @kind boolean;
  #L43921a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$b` @kind object;
  #L43921e.  call `d`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.d:()V` @kind virtual;
  #L439224.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableFlatMap$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L439238.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$b` @kind object;
  #L43923c.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.h` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L439240.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L439246.  v0:= temp;
  #L439248.  if v0 == 0 then goto L439270;
  #L43924c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$b` @kind object;
  #L439250.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.c` @type ^`boolean` @kind boolean;
  #L439254.  if v0 != 0 then goto L43925e;
  #L439258.  call temp:= `c`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.c:()Z` @kind virtual;
  #L43925e.  v2:= 1I;
  #L439260.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$a.c` @type ^`boolean` := v2 @kind boolean;
  #L439264.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$b` @kind object;
  #L439268.  call `d`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.d:()V` @kind virtual;
  #L43926e.  goto L439276;
  #L439270.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L439276.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableFlatMap$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L439288.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$a.e` @type ^`int`;
  #L43928c.  if v0 != 0 then goto L43929c;
  #L439290.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$b` @kind object;
  #L439294.  call `h`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.h:(Ljava/lang/Object;Lio/reactivex/internal/operators/observable/ObservableFlatMap$a;)V` @kind virtual;
  #L43929a.  goto L4392a6;
  #L43929c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$b` @kind object;
  #L4392a0.  call `d`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.d:()V` @kind virtual;
  #L4392a6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableFlatMap$a` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4392b8.  call temp:= `setOnce`(v2, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4392be.  v0:= temp;
  #L4392c0.  if v0 == 0 then goto L439306;
  #L4392c4.  v0:= instanceof @variable v3 @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind boolean;
  #L4392c8.  if v0 == 0 then goto L439306;
  #L4392cc.  v3:= (`io.reactivex.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L4392d0.  v0:= 7I;
  #L4392d2.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4392d8.  v0:= temp;
  #L4392da.  v1:= 1I;
  #L4392dc.  if v0 != v1 then goto L4392f8;
  #L4392e0.  v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$a.e` @type ^`int` := v0;
  #L4392e4.  v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$a.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4392e8.  v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$a.c` @type ^`boolean` := v1 @kind boolean;
  #L4392ec.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$b` @kind object;
  #L4392f0.  call `d`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.d:()V` @kind virtual;
  #L4392f6.  return @kind void;
  #L4392f8.  v1:= 2I;
  #L4392fa.  if v0 != v1 then goto L439306;
  #L4392fe.  v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$a.e` @type ^`int` := v0;
  #L439302.  v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$a.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L439306.  return @kind void;
}
