record `io.reactivex.internal.operators.observable.ObservableSkip$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableSkip$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableSkip$a.b` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableSkip$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSkip$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSkip$a;.<init>:(Lio/reactivex/Observer;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L443cd8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L443cde.  v0.`io.reactivex.internal.operators.observable.ObservableSkip$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L443ce2.  v0.`io.reactivex.internal.operators.observable.ObservableSkip$a.b` @type ^`long` := v2 @kind wide;
  #L443ce6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSkip$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkip$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443cf8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkip$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L443cfc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L443d02.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSkip$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkip$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443cb8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkip$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L443cbc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L443cc2.  v0:= temp;
  #L443cc4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSkip$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkip$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443d14.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkip$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L443d18.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L443d1e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSkip$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkip$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443d30.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkip$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L443d34.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L443d3a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSkip$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkip$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L443d4c.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableSkip$a.b` @type ^`long` @kind wide;
  #L443d50.  v2:= 0L;
  #L443d54.  v4:= lcmp(v0, v2);
  #L443d58.  if v4 == 0 then goto L443d68;
  #L443d5c.  v2:= 1L;
  #L443d60.  v0:= v0 - v2 @kind long;
  #L443d62.  v5.`io.reactivex.internal.operators.observable.ObservableSkip$a.b` @type ^`long` := v0 @kind wide;
  #L443d66.  goto L443d72;
  #L443d68.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableSkip$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L443d6c.  call `onNext`(v0, v6) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L443d72.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSkip$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkip$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L443d84.  v0.`io.reactivex.internal.operators.observable.ObservableSkip$a.c` @type ^`io.reactivex.disposables.Disposable` := v1 @kind object;
  #L443d88.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableSkip$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L443d8c.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L443d92.  return @kind void;
}
