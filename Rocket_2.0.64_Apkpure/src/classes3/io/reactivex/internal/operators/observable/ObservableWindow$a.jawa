record `io.reactivex.internal.operators.observable.ObservableWindow$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableWindow$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindow$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableWindow$a.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindow$a.d` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableWindow$a.e` @AccessFlag ;
  `io.reactivex.subjects.UnicastSubject` `io.reactivex.internal.operators.observable.ObservableWindow$a.f` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindow$a.g` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableWindow$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindow$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `int` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$a;.<init>:(Lio/reactivex/Observer;JI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L447348.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L44734e.  v0.`io.reactivex.internal.operators.observable.ObservableWindow$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L447352.  v0.`io.reactivex.internal.operators.observable.ObservableWindow$a.b` @type ^`long` := v2 @kind wide;
  #L447356.  v0.`io.reactivex.internal.operators.observable.ObservableWindow$a.c` @type ^`int` := v4;
  #L44735a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWindow$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44736c.  v0:= 1I;
  #L44736e.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$a.g` @type ^`boolean` := v0 @kind boolean;
  #L447372.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWindow$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L447330.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$a.g` @type ^`boolean` @kind boolean;
  #L447334.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindow$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L447384.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$a.f` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L447388.  if v0 == 0 then goto L447398;
  #L44738c.  v1:= 0I;
  #L44738e.  v2.`io.reactivex.internal.operators.observable.ObservableWindow$a.f` @type ^`io.reactivex.subjects.UnicastSubject` := v1 @kind object;
  #L447392.  call `onComplete`(v0) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L447398.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L44739c.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4473a2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindow$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4473b4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$a.f` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L4473b8.  if v0 == 0 then goto L4473c8;
  #L4473bc.  v1:= 0I;
  #L4473be.  v2.`io.reactivex.internal.operators.observable.ObservableWindow$a.f` @type ^`io.reactivex.subjects.UnicastSubject` := v1 @kind object;
  #L4473c2.  call `onError`(v0, v3) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4473c8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4473cc.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4473d2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindow$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4473e4.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$a.f` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L4473e8.  if v0 != 0 then goto L44740e;
  #L4473ec.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$a.g` @type ^`boolean` @kind boolean;
  #L4473f0.  if v1 != 0 then goto L44740e;
  #L4473f4.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$a.c` @type ^`int`;
  #L4473f8.  call temp:= `create`(v0, v5) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L4473fe.  v0:= temp @kind object;
  #L447400.  v5.`io.reactivex.internal.operators.observable.ObservableWindow$a.f` @type ^`io.reactivex.subjects.UnicastSubject` := v0 @kind object;
  #L447404.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L447408.  call `onNext`(v1, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44740e.  if v0 == 0 then goto L447458;
  #L447412.  call `onNext`(v0, v6) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L447418.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$a.d` @type ^`long` @kind wide;
  #L44741c.  v3:= 1L;
  #L447420.  v1:= v1 + v3 @kind long;
  #L447422.  v5.`io.reactivex.internal.operators.observable.ObservableWindow$a.d` @type ^`long` := v1 @kind wide;
  #L447426.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$a.b` @type ^`long` @kind wide;
  #L44742a.  v6:= lcmp(v1, v3);
  #L44742e.  if v6 < 0 then goto L447458;
  #L447432.  v1:= 0L;
  #L447436.  v5.`io.reactivex.internal.operators.observable.ObservableWindow$a.d` @type ^`long` := v1 @kind wide;
  #L44743a.  v6:= 0I;
  #L44743c.  v5.`io.reactivex.internal.operators.observable.ObservableWindow$a.f` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L447440.  call `onComplete`(v0) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L447446.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$a.g` @type ^`boolean` @kind boolean;
  #L44744a.  if v6 == 0 then goto L447458;
  #L44744e.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L447452.  call `dispose`(v6) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L447458.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWindow$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44746c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L447470.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L447476.  v0:= temp;
  #L447478.  if v0 == 0 then goto L44748a;
  #L44747c.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$a.e` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L447480.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L447484.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L44748a.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableWindow$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44749c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$a.g` @type ^`boolean` @kind boolean;
  #L4474a0.  if v0 == 0 then goto L4474ae;
  #L4474a4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4474a8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4474ae.  return @kind void;
}
