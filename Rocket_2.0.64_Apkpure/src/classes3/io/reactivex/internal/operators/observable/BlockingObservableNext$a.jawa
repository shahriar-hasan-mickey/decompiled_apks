record `io.reactivex.internal.operators.observable.BlockingObservableNext$a` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface {
  `io.reactivex.internal.operators.observable.BlockingObservableNext$b` `io.reactivex.internal.operators.observable.BlockingObservableNext$a.a` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.BlockingObservableNext$a.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.BlockingObservableNext$a.c` @AccessFlag PRIVATE;
  `boolean` `io.reactivex.internal.operators.observable.BlockingObservableNext$a.d` @AccessFlag PRIVATE;
  `boolean` `io.reactivex.internal.operators.observable.BlockingObservableNext$a.e` @AccessFlag PRIVATE;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.BlockingObservableNext$a.f` @AccessFlag PRIVATE;
  `boolean` `io.reactivex.internal.operators.observable.BlockingObservableNext$a.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.BlockingObservableNext$a` v1 @kind this, `io.reactivex.ObservableSource` v2 @kind object, `io.reactivex.internal.operators.observable.BlockingObservableNext$b` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$a;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/internal/operators/observable/BlockingObservableNext$b;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4320e4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4320ea.  v0:= 1I;
  #L4320ec.  v1.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4320f0.  v1.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4320f4.  v1.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.b` @type ^`io.reactivex.ObservableSource` := v2 @kind object;
  #L4320f8.  v1.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.a` @type ^`io.reactivex.internal.operators.observable.BlockingObservableNext$b` := v3 @kind object;
  #L4320fc.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.observable.BlockingObservableNext$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$a;.a:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L431fd8.  v0:= v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.g` @type ^`boolean` @kind boolean;
  #L431fdc.  v1:= 1I;
  #L431fde.  if v0 != 0 then goto L432008;
  #L431fe2.  v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.g` @type ^`boolean` := v1 @kind boolean;
  #L431fe6.  v0:= v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.a` @type ^`io.reactivex.internal.operators.observable.BlockingObservableNext$b` @kind object;
  #L431fea.  call `b`(v0) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$b;.b:()V` @kind virtual;
  #L431ff0.  v0:= new `io.reactivex.internal.operators.observable.ObservableMaterialize`;
  #L431ff4.  v2:= v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.b` @type ^`io.reactivex.ObservableSource` @kind object;
  #L431ff8.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMaterialize;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L431ffe.  v2:= v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.a` @type ^`io.reactivex.internal.operators.observable.BlockingObservableNext$b` @kind object;
  #L432002.  call `subscribe`(v0, v2) @signature `Lio/reactivex/Observable;.subscribe:(Lio/reactivex/Observer;)V` @kind virtual;
  #L432008.  v0:= v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.a` @type ^`io.reactivex.internal.operators.observable.BlockingObservableNext$b` @kind object;
  #L43200c.  call temp:= `c`(v0) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$b;.c:()Lio/reactivex/Notification;` @kind virtual;
  #L432012.  v0:= temp @kind object;
  #L432014.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/Notification;.isOnNext:()Z` @kind virtual;
  #L43201a.  v2:= temp;
  #L43201c.  v3:= 0I;
  #L43201e.  if v2 == 0 then goto L432034;
  #L432022.  v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.e` @type ^`boolean` := v3 @kind boolean;
  #L432026.  call temp:= `getValue`(v0) @signature `Lio/reactivex/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L43202c.  v0:= temp @kind object;
  #L43202e.  v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.c` @type ^`java.lang.Object` := v0 @kind object;
  #L432032.  return v1;
  #L432034.  v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.d` @type ^`boolean` := v3 @kind boolean;
  #L432038.  call temp:= `isOnComplete`(v0) @signature `Lio/reactivex/Notification;.isOnComplete:()Z` @kind virtual;
  #L43203e.  v1:= temp;
  #L432040.  if v1 == 0 then goto L432046;
  #L432044.  return v3;
  #L432046.  call temp:= `getError`(v0) @signature `Lio/reactivex/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L43204c.  v0:= temp @kind object;
  #L43204e.  v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.f` @type ^`java.lang.Throwable` := v0 @kind object;
  #L432052.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L432058.  v0:= temp @kind object;
  #L43205a.  throw v0;
  #L43205c.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L43205e.  v1:= v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.a` @type ^`io.reactivex.internal.operators.observable.BlockingObservableNext$b` @kind object;
  #L432062.  call `dispose`(v1) @signature `Lio/reactivex/observers/DisposableObserver;.dispose:()V` @kind virtual;
  #L432068.  v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.f` @type ^`java.lang.Throwable` := v0 @kind object;
  #L43206c.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L432072.  v0:= temp @kind object;
  #L432074.  throw v0;
  catch `java.lang.InterruptedException` @[L432008..L432014] goto L43205c;
}
procedure `boolean` `hasNext`(`io.reactivex.internal.operators.observable.BlockingObservableNext$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L431f90.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.f` @type ^`java.lang.Throwable` @kind object;
  #L431f94.  if v0 != 0 then goto L431fbc;
  #L431f98.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.d` @type ^`boolean` @kind boolean;
  #L431f9c.  v1:= 0I;
  #L431f9e.  if v0 != 0 then goto L431fa4;
  #L431fa2.  return v1;
  #L431fa4.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.e` @type ^`boolean` @kind boolean;
  #L431fa8.  if v0 == 0 then goto L431fb8;
  #L431fac.  call temp:= `a`(v2) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$a;.a:()Z` @kind direct;
  #L431fb2.  v0:= temp;
  #L431fb4.  if v0 == 0 then goto L431fba;
  #L431fb8.  v1:= 1I;
  #L431fba.  return v1;
  #L431fbc.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L431fc2.  v0:= temp @kind object;
  #L431fc4.  throw v0;
}
procedure `java.lang.Object` `next`(`io.reactivex.internal.operators.observable.BlockingObservableNext$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L432098.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.f` @type ^`java.lang.Throwable` @kind object;
  #L43209c.  if v0 != 0 then goto L4320c8;
  #L4320a0.  call temp:= `hasNext`(v2) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$a;.hasNext:()Z` @kind virtual;
  #L4320a6.  v0:= temp;
  #L4320a8.  if v0 == 0 then goto L4320b8;
  #L4320ac.  v0:= 1I;
  #L4320ae.  v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4320b2.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.c` @type ^`java.lang.Object` @kind object;
  #L4320b6.  return v0 @kind object;
  #L4320b8.  v0:= new `java.util.NoSuchElementException`;
  #L4320bc.  v1:= "No more elements" @kind object;
  #L4320c0.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4320c6.  throw v0;
  #L4320c8.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4320ce.  v0:= temp @kind object;
  #L4320d0.  throw v0;
}
procedure `void` `remove`(`io.reactivex.internal.operators.observable.BlockingObservableNext$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L432110.  v0:= new `java.lang.UnsupportedOperationException`;
  #L432114.  v1:= "Read only iterator" @kind object;
  #L432118.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43211e.  throw v0;
}
