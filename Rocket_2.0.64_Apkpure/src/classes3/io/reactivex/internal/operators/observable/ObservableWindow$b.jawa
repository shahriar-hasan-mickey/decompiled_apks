record `io.reactivex.internal.operators.observable.ObservableWindow$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableWindow$b.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindow$b.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindow$b.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableWindow$b.d` @AccessFlag FINAL;
  `java.util.ArrayDeque` `io.reactivex.internal.operators.observable.ObservableWindow$b.e` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindow$b.f` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindow$b.g` @AccessFlag VOLATILE;
  `long` `io.reactivex.internal.operators.observable.ObservableWindow$b.h` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableWindow$b.i` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableWindow$b.j` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableWindow$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindow$b` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `long` v3 , `long` v5 , `int` v7 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$b;.<init>:(Lio/reactivex/Observer;JJI)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4474d8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4474de.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4474e2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4474e8.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$b.j` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L4474ec.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$b.a` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L4474f0.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$b.b` @type ^`long` := v3 @kind wide;
  #L4474f4.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$b.c` @type ^`long` := v5 @kind wide;
  #L4474f8.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$b.d` @type ^`int` := v7;
  #L4474fc.  v2:= new `java.util.ArrayDeque`;
  #L447500.  call `<init>`(v2) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L447506.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$b.e` @type ^`java.util.ArrayDeque` := v2 @kind object;
  #L44750a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWindow$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44751c.  v0:= 1I;
  #L44751e.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$b.g` @type ^`boolean` := v0 @kind boolean;
  #L447522.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWindow$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4474c0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$b.g` @type ^`boolean` @kind boolean;
  #L4474c4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindow$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L447534.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L447538.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L44753e.  v1:= temp;
  #L447540.  if v1 != 0 then goto L447558;
  #L447544.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L44754a.  v1:= temp @kind object;
  #L44754c.  v1:= (`io.reactivex.subjects.UnicastSubject`) v1 @kind object;
  #L447550.  call `onComplete`(v1) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L447556.  goto L447538;
  #L447558.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L44755c.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L447562.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindow$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L447574.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L447578.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L44757e.  v1:= temp;
  #L447580.  if v1 != 0 then goto L447598;
  #L447584.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L44758a.  v1:= temp @kind object;
  #L44758c.  v1:= (`io.reactivex.subjects.UnicastSubject`) v1 @kind object;
  #L447590.  call `onError`(v1, v3) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L447596.  goto L447578;
  #L447598.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L44759c.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4475a2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindow$b` v11 @kind this, `java.lang.Object` v12 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4475b4.  v0:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L4475b8.  v1:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$b.f` @type ^`long` @kind wide;
  #L4475bc.  v3:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$b.c` @type ^`long` @kind wide;
  #L4475c0.  v5:= v1 %% v3 @kind long;
  #L4475c4.  v7:= 0L;
  #L4475c8.  v9:= lcmp(v5, v7);
  #L4475cc.  if v9 != 0 then goto L4475fe;
  #L4475d0.  v5:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$b.g` @type ^`boolean` @kind boolean;
  #L4475d4.  if v5 != 0 then goto L4475fe;
  #L4475d8.  v5:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$b.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4475dc.  call temp:= `getAndIncrement`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4475e2.  v5:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$b.d` @type ^`int`;
  #L4475e6.  call temp:= `create`(v5, v11) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L4475ec.  v5:= temp @kind object;
  #L4475ee.  call temp:= `offer`(v0, v5) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4475f4.  v6:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L4475f8.  call `onNext`(v6, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4475fe.  v5:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$b.h` @type ^`long` @kind wide;
  #L447602.  v7:= 1L;
  #L447606.  v5:= v5 + v7 @kind long;
  #L447608.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L44760e.  v9:= temp @kind object;
  #L447610.  call temp:= `hasNext`(v9) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L447616.  v10:= temp;
  #L447618.  if v10 == 0 then goto L447630;
  #L44761c.  call temp:= `next`(v9) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L447622.  v10:= temp @kind object;
  #L447624.  v10:= (`io.reactivex.subjects.UnicastSubject`) v10 @kind object;
  #L447628.  call `onNext`(v10, v12) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L44762e.  goto L447610;
  #L447630.  v9:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$b.b` @type ^`long` @kind wide;
  #L447634.  v12:= lcmp(v5, v9);
  #L447638.  if v12 < 0 then goto L447676;
  #L44763c.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L447642.  v12:= temp @kind object;
  #L447644.  v12:= (`io.reactivex.subjects.UnicastSubject`) v12 @kind object;
  #L447648.  call `onComplete`(v12) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L44764e.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L447654.  v12:= temp;
  #L447656.  if v12 == 0 then goto L44766e;
  #L44765a.  v12:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$b.g` @type ^`boolean` @kind boolean;
  #L44765e.  if v12 == 0 then goto L44766e;
  #L447662.  v12:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$b.i` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L447666.  call `dispose`(v12) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44766c.  return @kind void;
  #L44766e.  v5:= v5 - v3 @kind long;
  #L447670.  v11.`io.reactivex.internal.operators.observable.ObservableWindow$b.h` @type ^`long` := v5 @kind wide;
  #L447674.  goto L44767a;
  #L447676.  v11.`io.reactivex.internal.operators.observable.ObservableWindow$b.h` @type ^`long` := v5 @kind wide;
  #L44767a.  v1:= v1 + v7 @kind long;
  #L44767c.  v11.`io.reactivex.internal.operators.observable.ObservableWindow$b.f` @type ^`long` := v1 @kind wide;
  #L447680.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWindow$b` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L447694.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$b.i` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L447698.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L44769e.  v0:= temp;
  #L4476a0.  if v0 == 0 then goto L4476b2;
  #L4476a4.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$b.i` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L4476a8.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L4476ac.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4476b2.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableWindow$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4476c4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$b.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4476c8.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4476ce.  v0:= temp;
  #L4476d0.  if v0 != 0 then goto L4476e6;
  #L4476d4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$b.g` @type ^`boolean` @kind boolean;
  #L4476d8.  if v0 == 0 then goto L4476e6;
  #L4476dc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$b.i` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4476e0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4476e6.  return @kind void;
}
