record `io.reactivex.internal.operators.observable.ObservableAmb$a` @kind class @AccessFlag FINAL extends `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableAmb$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableAmb$b`[] `io.reactivex.internal.operators.observable.ObservableAmb$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableAmb$a.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableAmb$a` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$a;.<init>:(Lio/reactivex/Observer;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4326d8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4326de.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4326e2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4326e8.  v1.`io.reactivex.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L4326ec.  v1.`io.reactivex.internal.operators.observable.ObservableAmb$a.a` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L4326f0.  v2:= new `io.reactivex.internal.operators.observable.ObservableAmb$b`[v3];
  #L4326f4.  v1.`io.reactivex.internal.operators.observable.ObservableAmb$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$b`[] := v2 @kind object;
  #L4326f8.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableAmb$a` v7 @kind this, `io.reactivex.ObservableSource`[] v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$a;.a:([Lio/reactivex/ObservableSource;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L432758.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableAmb$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$b`[] @kind object;
  #L43275c.  v1:= length @variable v0;
  #L43275e.  v2:= 0I;
  #L432760.  v3:= 0I;
  #L432762.  if v3 >= v1 then goto L432780;
  #L432766.  v4:= new `io.reactivex.internal.operators.observable.ObservableAmb$b`;
  #L43276a.  v5:= v3 + 1;
  #L43276e.  v6:= v7.`io.reactivex.internal.operators.observable.ObservableAmb$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L432772.  call `<init>`(v4, v7, v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$b;.<init>:(Lio/reactivex/internal/operators/observable/ObservableAmb$a;ILio/reactivex/Observer;)V` @kind direct;
  #L432778.  v0[v3]:= v4 @kind object;
  #L43277c.  v3:= v5;
  #L43277e.  goto L432762;
  #L432780.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L432784.  call `lazySet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L43278a.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableAmb$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43278e.  call `onSubscribe`(v3, v7) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L432794.  if v2 >= v1 then goto L4327be;
  #L432798.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43279c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4327a2.  v3:= temp;
  #L4327a4.  if v3 == 0 then goto L4327aa;
  #L4327a8.  return @kind void;
  #L4327aa.  v3:= v8[v2] @kind object;
  #L4327ae.  v4:= v0[v2] @kind object;
  #L4327b2.  call `subscribe`(v3, v4) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4327b8.  v2:= v2 + 1;
  #L4327bc.  goto L432794;
  #L4327be.  return @kind void;
}
procedure `boolean` `b`(`io.reactivex.internal.operators.observable.ObservableAmb$a` v5 @kind this, `int` v6 ) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$a;.b:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L432674.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L432678.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L43267e.  v0:= temp;
  #L432680.  v1:= 1I;
  #L432682.  v2:= 0I;
  #L432684.  if v0 != 0 then goto L4326bc;
  #L432688.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43268c.  call temp:= `compareAndSet`(v0, v2, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L432692.  v0:= temp;
  #L432694.  if v0 == 0 then goto L4326ba;
  #L432698.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableAmb$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$b`[] @kind object;
  #L43269c.  v3:= length @variable v0;
  #L43269e.  if v2 >= v3 then goto L4326b8;
  #L4326a2.  v4:= v2 + 1;
  #L4326a6.  if v4 == v6 then goto L4326b4;
  #L4326aa.  v2:= v0[v2] @kind object;
  #L4326ae.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$b;.a:()V` @kind virtual;
  #L4326b4.  v2:= v4;
  #L4326b6.  goto L43269e;
  #L4326b8.  return v1;
  #L4326ba.  return v2;
  #L4326bc.  if v0 != v6 then goto L4326c2;
  #L4326c0.  goto L4326c4;
  #L4326c2.  v1:= 0I;
  #L4326c4.  return v1;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableAmb$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43270c.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L432710.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L432716.  v0:= temp;
  #L432718.  v1:= -1I;
  #L43271a.  if v0 == v1 then goto L432744;
  #L43271e.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L432722.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L432728.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableAmb$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$b`[] @kind object;
  #L43272c.  v1:= length @variable v0;
  #L43272e.  v2:= 0I;
  #L432730.  if v2 >= v1 then goto L432744;
  #L432734.  v3:= v0[v2] @kind object;
  #L432738.  call `a`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$b;.a:()V` @kind virtual;
  #L43273e.  v2:= v2 + 1;
  #L432742.  goto L432730;
  #L432744.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableAmb$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L432648.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43264c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L432652.  v0:= temp;
  #L432654.  v1:= -1I;
  #L432656.  if v0 != v1 then goto L43265e;
  #L43265a.  v0:= 1I;
  #L43265c.  goto L432660;
  #L43265e.  v0:= 0I;
  #L432660.  return v0;
}
