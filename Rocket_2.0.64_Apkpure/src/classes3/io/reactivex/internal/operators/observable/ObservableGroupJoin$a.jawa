record `io.reactivex.internal.operators.observable.ObservableGroupJoin$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.internal.operators.observable.ObservableGroupJoin$b` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableGroupJoin$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.observable.ObservableGroupJoin$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.observable.ObservableGroupJoin$a.c` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.internal.operators.observable.ObservableGroupJoin$a.d` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.internal.operators.observable.ObservableGroupJoin$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableGroupJoin$a.f` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableGroupJoin$a.g` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableGroupJoin$a.h` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.observable.ObservableGroupJoin$a.i` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableGroupJoin$a.j` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableGroupJoin$a.k` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableGroupJoin$a.l` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableGroupJoin$a.m` @AccessFlag VOLATILE;
}
global `java.lang.Integer` `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.n` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.o` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.p` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.q` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L43c1b4.  v0:= 1I;
  #L43c1b6.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43c1bc.  v0:= temp @kind object;
  #L43c1be.  `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.n` @type ^`java.lang.Integer` := v0 @kind object;
  #L43c1c2.  v0:= 2I;
  #L43c1c4.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43c1ca.  v0:= temp @kind object;
  #L43c1cc.  `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.o` @type ^`java.lang.Integer` := v0 @kind object;
  #L43c1d0.  v0:= 3I;
  #L43c1d2.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43c1d8.  v0:= temp @kind object;
  #L43c1da.  `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.p` @type ^`java.lang.Integer` := v0 @kind object;
  #L43c1de.  v0:= 4I;
  #L43c1e0.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43c1e6.  v0:= temp @kind object;
  #L43c1e8.  `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.q` @type ^`java.lang.Integer` := v0 @kind object;
  #L43c1ec.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object, `io.reactivex.functions.BiFunction` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L43c200.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L43c206.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.a` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L43c20a.  v2:= new `io.reactivex.disposables.CompositeDisposable`;
  #L43c20e.  call `<init>`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L43c214.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` := v2 @kind object;
  #L43c218.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L43c21c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Observable;.bufferSize:()I` @kind static;
  #L43c222.  v0:= temp;
  #L43c224.  call `<init>`(v2, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L43c22a.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L43c22e.  v2:= new `java.util.LinkedHashMap`;
  #L43c232.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L43c238.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` := v2 @kind object;
  #L43c23c.  v2:= new `java.util.LinkedHashMap`;
  #L43c240.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L43c246.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.e` @type ^`java.util.Map` := v2 @kind object;
  #L43c24a.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L43c24e.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43c254.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L43c258.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.g` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L43c25c.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.h` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L43c260.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.i` @type ^`io.reactivex.functions.BiFunction` := v5 @kind object;
  #L43c264.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L43c268.  v3:= 2I;
  #L43c26a.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L43c270.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L43c274.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c784.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43c788.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L43c78e.  v0:= temp;
  #L43c790.  if v0 == 0 then goto L43c7a6;
  #L43c794.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43c798.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43c79e.  call `g`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.g:()V` @kind virtual;
  #L43c7a4.  goto L43c7ac;
  #L43c7a6.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43c7ac.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this, `boolean` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.b:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c7c0.  @monitorenter v1
  #L43c7c2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43c7c6.  if v2 == 0 then goto L43c7d0;
  #L43c7ca.  v2:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.n` @type ^`java.lang.Integer` @kind object;
  #L43c7ce.  goto L43c7d4;
  #L43c7d0.  v2:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L43c7d4.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L43c7da.  @monitorexit v1
  #L43c7dc.  call `g`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.g:()V` @kind virtual;
  #L43c7e2.  return @kind void;
  #L43c7e4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43c7e6.  @monitorexit v1
  #L43c7e8.  throw v2;
  catch `java.lang.Throwable` @[L43c7c2..L43c7dc] goto L43c7e4;
  catch `java.lang.Throwable` @[L43c7e6..L43c7e8] goto L43c7e4;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.c:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c728.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43c72c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L43c732.  v0:= temp;
  #L43c734.  if v0 == 0 then goto L43c740;
  #L43c738.  call `g`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.g:()V` @kind virtual;
  #L43c73e.  goto L43c746;
  #L43c740.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43c746.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this, `boolean` v2 , `io.reactivex.internal.operators.observable.ObservableGroupJoin$c` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.d:(ZLio/reactivex/internal/operators/observable/ObservableGroupJoin$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c6d8.  @monitorenter v1
  #L43c6da.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43c6de.  if v2 == 0 then goto L43c6e8;
  #L43c6e2.  v2:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L43c6e6.  goto L43c6ec;
  #L43c6e8.  v2:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.q` @type ^`java.lang.Integer` @kind object;
  #L43c6ec.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L43c6f2.  @monitorexit v1
  #L43c6f4.  call `g`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.g:()V` @kind virtual;
  #L43c6fa.  return @kind void;
  #L43c6fc.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43c6fe.  @monitorexit v1
  #L43c700.  throw v2;
  catch `java.lang.Throwable` @[L43c6da..L43c6f4] goto L43c6fc;
  catch `java.lang.Throwable` @[L43c6fe..L43c700] goto L43c6fc;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c2a4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.m` @type ^`boolean` @kind boolean;
  #L43c2a8.  if v0 == 0 then goto L43c2ae;
  #L43c2ac.  return @kind void;
  #L43c2ae.  v0:= 1I;
  #L43c2b0.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.m` @type ^`boolean` := v0 @kind boolean;
  #L43c2b4.  call `f`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.f:()V` @kind virtual;
  #L43c2ba.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43c2c0.  v0:= temp;
  #L43c2c2.  if v0 != 0 then goto L43c2d0;
  #L43c2c6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43c2ca.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43c2d0.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableGroupJoin$d` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.e:(Lio/reactivex/internal/operators/observable/ObservableGroupJoin$d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c758.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43c75c.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43c762.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43c766.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43c76c.  call `g`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.g:()V` @kind virtual;
  #L43c772.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.f:()V` @AccessFlag  {
    temp;
    v0;

  #L43c288.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43c28c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L43c292.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` v9 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L43c2e4.  call temp:= `getAndIncrement`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43c2ea.  v0:= temp;
  #L43c2ec.  if v0 == 0 then goto L43c2f2;
  #L43c2f0.  return @kind void;
  #L43c2f2.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43c2f6.  v1:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43c2fa.  v2:= 1I;
  #L43c2fc.  v3:= 1I;
  #L43c2fe.  v4:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.m` @type ^`boolean` @kind boolean;
  #L43c302.  if v4 == 0 then goto L43c30e;
  #L43c306.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43c30c.  return @kind void;
  #L43c30e.  v4:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43c312.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43c318.  v4:= temp @kind object;
  #L43c31a.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L43c31e.  if v4 == 0 then goto L43c336;
  #L43c322.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43c328.  call `f`(v9) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.f:()V` @kind virtual;
  #L43c32e.  call `h`(v9, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.h:(Lio/reactivex/Observer;)V` @kind virtual;
  #L43c334.  return @kind void;
  #L43c336.  v4:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43c33a.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L43c340.  v4:= temp;
  #L43c342.  v5:= 0I;
  #L43c344.  if v4 != 0 then goto L43c34c;
  #L43c348.  v4:= 1I;
  #L43c34a.  goto L43c34e;
  #L43c34c.  v4:= 0I;
  #L43c34e.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L43c354.  v6:= temp @kind object;
  #L43c356.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L43c35a.  if v6 != 0 then goto L43c362;
  #L43c35e.  v7:= 1I;
  #L43c360.  goto L43c364;
  #L43c362.  v7:= 0I;
  #L43c364.  if v4 == 0 then goto L43c3c6;
  #L43c368.  if v7 == 0 then goto L43c3c6;
  #L43c36c.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` @kind object;
  #L43c370.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L43c376.  v0:= temp @kind object;
  #L43c378.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43c37e.  v0:= temp @kind object;
  #L43c380.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43c386.  v2:= temp;
  #L43c388.  if v2 == 0 then goto L43c3a0;
  #L43c38c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43c392.  v2:= temp @kind object;
  #L43c394.  v2:= (`io.reactivex.subjects.UnicastSubject`) v2 @kind object;
  #L43c398.  call `onComplete`(v2) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L43c39e.  goto L43c380;
  #L43c3a0.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` @kind object;
  #L43c3a4.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L43c3aa.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L43c3ae.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L43c3b4.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43c3b8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L43c3be.  call `onComplete`(v1) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43c3c4.  return @kind void;
  #L43c3c6.  if v7 == 0 then goto L43c3da;
  #L43c3ca.  v3:= -v3 @kind int;
  #L43c3cc.  call temp:= `addAndGet`(v9, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L43c3d2.  v3:= temp;
  #L43c3d4.  if v3 != 0 then goto L43c2fe;
  #L43c3d8.  return @kind void;
  #L43c3da.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L43c3e0.  v4:= temp @kind object;
  #L43c3e2.  v7:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.n` @type ^`java.lang.Integer` @kind object;
  #L43c3e6.  if v6 != v7 then goto L43c4d0;
  #L43c3ea.  call temp:= `create`() @signature `Lio/reactivex/subjects/UnicastSubject;.create:()Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L43c3f0.  v5:= temp @kind object;
  #L43c3f2.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.k` @type ^`int`;
  #L43c3f6.  v7:= v6 + 1;
  #L43c3fa.  v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.k` @type ^`int` := v7;
  #L43c3fe.  v7:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` @kind object;
  #L43c402.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43c408.  v8:= temp @kind object;
  #L43c40a.  call temp:= `put`(v7, v8, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43c410.  v7:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.g` @type ^`io.reactivex.functions.Function` @kind object;
  #L43c414.  call temp:= `apply`(v7, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43c41a.  v7:= temp @kind object;
  #L43c41c.  v8:= "The leftEnd returned a null ObservableSource" @kind object;
  #L43c420.  call temp:= `requireNonNull`(v7, v8) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43c426.  v7:= temp @kind object;
  #L43c428.  v7:= (`io.reactivex.ObservableSource`) v7 @kind object;
  #L43c42c.  v8:= new `io.reactivex.internal.operators.observable.ObservableGroupJoin$c`;
  #L43c430.  call `<init>`(v8, v9, v2, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$c;.<init>:(Lio/reactivex/internal/operators/observable/ObservableGroupJoin$b;ZI)V` @kind direct;
  #L43c436.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43c43a.  call temp:= `add`(v6, v8) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43c440.  call `subscribe`(v7, v8) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L43c446.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43c44a.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43c450.  v6:= temp @kind object;
  #L43c452.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L43c456.  if v6 == 0 then goto L43c46e;
  #L43c45a.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43c460.  call `f`(v9) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.f:()V` @kind virtual;
  #L43c466.  call `h`(v9, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.h:(Lio/reactivex/Observer;)V` @kind virtual;
  #L43c46c.  return @kind void;
  #L43c46e.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.i` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L43c472.  call temp:= `apply`(v6, v4, v5) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43c478.  v4:= temp @kind object;
  #L43c47a.  v6:= "The resultSelector returned a null value" @kind object;
  #L43c47e.  call temp:= `requireNonNull`(v4, v6) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43c484.  v4:= temp @kind object;
  #L43c486.  call `onNext`(v1, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43c48c.  v4:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L43c490.  call temp:= `values`(v4) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L43c496.  v4:= temp @kind object;
  #L43c498.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43c49e.  v4:= temp @kind object;
  #L43c4a0.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43c4a6.  v6:= temp;
  #L43c4a8.  if v6 == 0 then goto L43c2fe;
  #L43c4ac.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43c4b2.  v6:= temp @kind object;
  #L43c4b4.  call `onNext`(v5, v6) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L43c4ba.  goto L43c4a0;
  #L43c4bc.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43c4be.  call `i`(v9, v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/Observer;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L43c4c4.  return @kind void;
  #L43c4c6.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43c4c8.  call `i`(v9, v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/Observer;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L43c4ce.  return @kind void;
  #L43c4d0.  v7:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L43c4d4.  if v6 != v7 then goto L43c592;
  #L43c4d8.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.l` @type ^`int`;
  #L43c4dc.  v7:= v6 + 1;
  #L43c4e0.  v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.l` @type ^`int` := v7;
  #L43c4e4.  v7:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L43c4e8.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43c4ee.  v8:= temp @kind object;
  #L43c4f0.  call temp:= `put`(v7, v8, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43c4f6.  v7:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.h` @type ^`io.reactivex.functions.Function` @kind object;
  #L43c4fa.  call temp:= `apply`(v7, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43c500.  v7:= temp @kind object;
  #L43c502.  v8:= "The rightEnd returned a null ObservableSource" @kind object;
  #L43c506.  call temp:= `requireNonNull`(v7, v8) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43c50c.  v7:= temp @kind object;
  #L43c50e.  v7:= (`io.reactivex.ObservableSource`) v7 @kind object;
  #L43c512.  v8:= new `io.reactivex.internal.operators.observable.ObservableGroupJoin$c`;
  #L43c516.  call `<init>`(v8, v9, v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$c;.<init>:(Lio/reactivex/internal/operators/observable/ObservableGroupJoin$b;ZI)V` @kind direct;
  #L43c51c.  v5:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43c520.  call temp:= `add`(v5, v8) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43c526.  call `subscribe`(v7, v8) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L43c52c.  v5:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43c530.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43c536.  v5:= temp @kind object;
  #L43c538.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L43c53c.  if v5 == 0 then goto L43c554;
  #L43c540.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43c546.  call `f`(v9) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.f:()V` @kind virtual;
  #L43c54c.  call `h`(v9, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.h:(Lio/reactivex/Observer;)V` @kind virtual;
  #L43c552.  return @kind void;
  #L43c554.  v5:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` @kind object;
  #L43c558.  call temp:= `values`(v5) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L43c55e.  v5:= temp @kind object;
  #L43c560.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43c566.  v5:= temp @kind object;
  #L43c568.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43c56e.  v6:= temp;
  #L43c570.  if v6 == 0 then goto L43c2fe;
  #L43c574.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43c57a.  v6:= temp @kind object;
  #L43c57c.  v6:= (`io.reactivex.subjects.UnicastSubject`) v6 @kind object;
  #L43c580.  call `onNext`(v6, v4) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L43c586.  goto L43c568;
  #L43c588.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43c58a.  call `i`(v9, v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/Observer;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L43c590.  return @kind void;
  #L43c592.  v5:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L43c596.  if v6 != v5 then goto L43c5d2;
  #L43c59a.  v4:= (`io.reactivex.internal.operators.observable.ObservableGroupJoin$c`) v4 @kind object;
  #L43c59e.  v5:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` @kind object;
  #L43c5a2.  v6:= v4.`io.reactivex.internal.operators.observable.ObservableGroupJoin$c.c` @type ^`int`;
  #L43c5a6.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43c5ac.  v6:= temp @kind object;
  #L43c5ae.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43c5b4.  v5:= temp @kind object;
  #L43c5b6.  v5:= (`io.reactivex.subjects.UnicastSubject`) v5 @kind object;
  #L43c5ba.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43c5be.  call temp:= `remove`(v6, v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.remove:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43c5c4.  if v5 == 0 then goto L43c2fe;
  #L43c5c8.  call `onComplete`(v5) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L43c5ce.  goto L43c2fe;
  #L43c5d2.  v5:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.q` @type ^`java.lang.Integer` @kind object;
  #L43c5d6.  if v6 != v5 then goto L43c2fe;
  #L43c5da.  v4:= (`io.reactivex.internal.operators.observable.ObservableGroupJoin$c`) v4 @kind object;
  #L43c5de.  v5:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L43c5e2.  v6:= v4.`io.reactivex.internal.operators.observable.ObservableGroupJoin$c.c` @type ^`int`;
  #L43c5e6.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43c5ec.  v6:= temp @kind object;
  #L43c5ee.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43c5f4.  v5:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43c5f8.  call temp:= `remove`(v5, v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.remove:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43c5fe.  goto L43c2fe;
  catch `java.lang.Throwable` @[L43c410..L43c42c] goto L43c4c6;
  catch `java.lang.Throwable` @[L43c46e..L43c486] goto L43c4bc;
  catch `java.lang.Throwable` @[L43c4f6..L43c512] goto L43c588;
}
procedure `void` `h`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` v3 @kind this, `io.reactivex.Observer` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.h:(Lio/reactivex/Observer;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L43c638.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43c63c.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L43c642.  v0:= temp @kind object;
  #L43c644.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` @kind object;
  #L43c648.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L43c64e.  v1:= temp @kind object;
  #L43c650.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43c656.  v1:= temp @kind object;
  #L43c658.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43c65e.  v2:= temp;
  #L43c660.  if v2 == 0 then goto L43c678;
  #L43c664.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43c66a.  v2:= temp @kind object;
  #L43c66c.  v2:= (`io.reactivex.subjects.UnicastSubject`) v2 @kind object;
  #L43c670.  call `onError`(v2, v0) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43c676.  goto L43c658;
  #L43c678.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` @kind object;
  #L43c67c.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L43c682.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L43c686.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L43c68c.  call `onError`(v4, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43c692.  return @kind void;
}
procedure `void` `i`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object, `io.reactivex.Observer` v3 @kind object, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/Observer;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @AccessFlag  {
    temp;
    v0;

  #L43c6a4.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43c6aa.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43c6ae.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L43c6b4.  call `clear`(v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43c6ba.  call `f`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.f:()V` @kind virtual;
  #L43c6c0.  call `h`(v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.h:(Lio/reactivex/Observer;)V` @kind virtual;
  #L43c6c6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c19c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.m` @type ^`boolean` @kind boolean;
  #L43c1a0.  return v0;
}
