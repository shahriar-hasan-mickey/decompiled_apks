record `io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.Observer` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.b` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.d` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.e` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.f` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.<init>:(Lio/reactivex/CompletableObserver;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L439f98.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L439f9e.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.a` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L439fa2.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.c` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L439fa6.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.d` @type ^`boolean` := v3 @kind boolean;
  #L439faa.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L439fae.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L439fb4.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L439fb8.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L439fbc.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L439fc2.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L439fc6.  v1:= 1I;
  #L439fc8.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L439fce.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a$a` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.a:(Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a$a;)V` @AccessFlag  {
    temp;
    v0;

  #L43a008.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43a00c.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43a012.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.onComplete:()V` @kind virtual;
  #L43a018.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a$a` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.b:(Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L43a02c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43a030.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43a036.  call `onError`(v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43a03c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L439fe0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L439fe4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L439fea.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L439fee.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L439ff4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L439f78.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L439f7c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L439f82.  v0:= temp;
  #L439f84.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43a050.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43a056.  v0:= temp;
  #L43a058.  if v0 != 0 then goto L43a082;
  #L43a05c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43a060.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43a066.  v0:= temp @kind object;
  #L43a068.  if v0 == 0 then goto L43a078;
  #L43a06c.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L43a070.  call `onError`(v1, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43a076.  goto L43a082;
  #L43a078.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L43a07c.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L43a082.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a094.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43a098.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L43a09e.  v0:= temp;
  #L43a0a0.  if v0 == 0 then goto L43a0fc;
  #L43a0a4.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.d` @type ^`boolean` @kind boolean;
  #L43a0a8.  if v2 == 0 then goto L43a0d0;
  #L43a0ac.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43a0b2.  v2:= temp;
  #L43a0b4.  if v2 != 0 then goto L43a102;
  #L43a0b8.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43a0bc.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43a0c2.  v2:= temp @kind object;
  #L43a0c4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L43a0c8.  call `onError`(v0, v2) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43a0ce.  goto L43a102;
  #L43a0d0.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.dispose:()V` @kind virtual;
  #L43a0d6.  v2:= 0I;
  #L43a0d8.  call temp:= `getAndSet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L43a0de.  v2:= temp;
  #L43a0e0.  if v2 <= 0 then goto L43a102;
  #L43a0e4.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43a0e8.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43a0ee.  v2:= temp @kind object;
  #L43a0f0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L43a0f4.  call `onError`(v0, v2) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43a0fa.  goto L43a102;
  #L43a0fc.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43a102.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43a114.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.c` @type ^`io.reactivex.functions.Function` @kind object;
  #L43a118.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43a11e.  v3:= temp @kind object;
  #L43a120.  v0:= "The mapper returned a null CompletableSource" @kind object;
  #L43a124.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43a12a.  v3:= temp @kind object;
  #L43a12c.  v3:= (`io.reactivex.CompletableSource`) v3 @kind object;
  #L43a130.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43a136.  v0:= new `io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a$a`;
  #L43a13a.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;)V` @kind direct;
  #L43a140.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43a144.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43a14a.  v1:= temp;
  #L43a14c.  if v1 == 0 then goto L43a156;
  #L43a150.  call `subscribe`(v3, v0) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L43a156.  return @kind void;
  #L43a158.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43a15a.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43a160.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43a164.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43a16a.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43a170.  return @kind void;
  catch `java.lang.Throwable` @[L43a114..L43a130] goto L43a158;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a190.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43a194.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43a19a.  v0:= temp;
  #L43a19c.  if v0 == 0 then goto L43a1ae;
  #L43a1a0.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.f` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L43a1a4.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L43a1a8.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43a1ae.  return @kind void;
}
