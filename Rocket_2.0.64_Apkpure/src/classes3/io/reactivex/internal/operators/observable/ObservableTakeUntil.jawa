record `io.reactivex.internal.operators.observable.ObservableTakeUntil` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.a` @kind class {
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableTakeUntil.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTakeUntil` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.ObservableSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/ObservableSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L44586c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/a;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L445872.  v0.`io.reactivex.internal.operators.observable.ObservableTakeUntil.a` @type ^`io.reactivex.ObservableSource` := v2 @kind object;
  #L445876.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableTakeUntil` v4 @kind this, `io.reactivex.Observer` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L445888.  v0:= new `io.reactivex.observers.SerializedObserver`;
  #L44588c.  call `<init>`(v0, v5) @signature `Lio/reactivex/observers/SerializedObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L445892.  v1:= new `io.reactivex.internal.disposables.ArrayCompositeDisposable`;
  #L445896.  v2:= 2I;
  #L445898.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.<init>:(I)V` @kind direct;
  #L44589e.  v2:= new `io.reactivex.internal.operators.observable.ObservableTakeUntil$b`;
  #L4458a2.  call `<init>`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$b;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/disposables/ArrayCompositeDisposable;)V` @kind direct;
  #L4458a8.  call `onSubscribe`(v5, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4458ae.  v5:= v4.`io.reactivex.internal.operators.observable.ObservableTakeUntil.a` @type ^`io.reactivex.ObservableSource` @kind object;
  #L4458b2.  v3:= new `io.reactivex.internal.operators.observable.ObservableTakeUntil$a`;
  #L4458b6.  call `<init>`(v3, v4, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableTakeUntil;Lio/reactivex/internal/disposables/ArrayCompositeDisposable;Lio/reactivex/observers/SerializedObserver;)V` @kind direct;
  #L4458bc.  call `subscribe`(v5, v3) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4458c2.  v5:= v4.`io.reactivex.internal.operators.observable.a.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L4458c6.  call `subscribe`(v5, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4458cc.  return @kind void;
}
