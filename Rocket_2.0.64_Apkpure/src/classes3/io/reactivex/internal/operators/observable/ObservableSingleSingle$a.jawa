record `io.reactivex.internal.operators.observable.ObservableSingleSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.observable.ObservableSingleSingle$a.a` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableSingleSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableSingleSingle$a.c` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableSingleSingle$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSingleSingle$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSingleSingle$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleSingle$a;.<init>:(Lio/reactivex/SingleObserver;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L443b20.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L443b26.  v0.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L443b2a.  v0.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.b` @type ^`java.lang.Object` := v2 @kind object;
  #L443b2e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSingleSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443b40.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L443b44.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L443b4a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSingleSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443b00.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L443b04.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L443b0a.  v0:= temp;
  #L443b0c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSingleSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L443b5c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.e` @type ^`boolean` @kind boolean;
  #L443b60.  if v0 == 0 then goto L443b66;
  #L443b64.  return @kind void;
  #L443b66.  v0:= 1I;
  #L443b68.  v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.e` @type ^`boolean` := v0 @kind boolean;
  #L443b6c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.d` @type ^`java.lang.Object` @kind object;
  #L443b70.  v1:= 0I;
  #L443b72.  v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.d` @type ^`java.lang.Object` := v1 @kind object;
  #L443b76.  if v0 != 0 then goto L443b7e;
  #L443b7a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.b` @type ^`java.lang.Object` @kind object;
  #L443b7e.  if v0 == 0 then goto L443b8e;
  #L443b82.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L443b86.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L443b8c.  goto L443ba2;
  #L443b8e.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L443b92.  v1:= new `java.util.NoSuchElementException`;
  #L443b96.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L443b9c.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L443ba2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSingleSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443bb4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.e` @type ^`boolean` @kind boolean;
  #L443bb8.  if v0 == 0 then goto L443bc4;
  #L443bbc.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L443bc2.  return @kind void;
  #L443bc4.  v0:= 1I;
  #L443bc6.  v1.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.e` @type ^`boolean` := v0 @kind boolean;
  #L443bca.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L443bce.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L443bd4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSingleSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L443be8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.e` @type ^`boolean` @kind boolean;
  #L443bec.  if v0 == 0 then goto L443bf2;
  #L443bf0.  return @kind void;
  #L443bf2.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.d` @type ^`java.lang.Object` @kind object;
  #L443bf6.  if v0 == 0 then goto L443c24;
  #L443bfa.  v3:= 1I;
  #L443bfc.  v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.e` @type ^`boolean` := v3 @kind boolean;
  #L443c00.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L443c04.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L443c0a.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L443c0e.  v0:= new `java.lang.IllegalArgumentException`;
  #L443c12.  v1:= "Sequence contains more than one element!" @kind object;
  #L443c16.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L443c1c.  call `onError`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L443c22.  return @kind void;
  #L443c24.  v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.d` @type ^`java.lang.Object` := v3 @kind object;
  #L443c28.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSingleSingle$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleSingle$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443c3c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L443c40.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L443c46.  v0:= temp;
  #L443c48.  if v0 == 0 then goto L443c5a;
  #L443c4c.  v1.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L443c50.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L443c54.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L443c5a.  return @kind void;
}
