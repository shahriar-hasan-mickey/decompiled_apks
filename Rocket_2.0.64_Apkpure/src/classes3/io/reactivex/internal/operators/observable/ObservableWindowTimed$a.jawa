record `io.reactivex.internal.operators.observable.ObservableWindowTimed$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.QueueDrainObserver` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `long` `io.reactivex.internal.operators.observable.ObservableWindowTimed$a.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableWindowTimed$a.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableWindowTimed$a.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableWindowTimed$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowTimed$a.f` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindowTimed$a.g` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.observable.ObservableWindowTimed$a.h` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindowTimed$a.i` @AccessFlag ;
  `long` `io.reactivex.internal.operators.observable.ObservableWindowTimed$a.j` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableWindowTimed$a.k` @AccessFlag ;
  `io.reactivex.subjects.UnicastSubject` `io.reactivex.internal.operators.observable.ObservableWindowTimed$a.l` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowTimed$a.m` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableWindowTimed$a.n` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$a` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object, `int` v7 , `long` v8 , `boolean` v10 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IJZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4487dc.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L4487e0.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4487e6.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L4487ec.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4487f0.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4487f6.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.n` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4487fa.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.b` @type ^`long` := v3 @kind wide;
  #L4487fe.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.c` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L448802.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.d` @type ^`io.reactivex.Scheduler` := v6 @kind object;
  #L448806.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.e` @type ^`int` := v7;
  #L44880a.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.g` @type ^`long` := v8 @kind wide;
  #L44880e.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`boolean` := v10 @kind boolean;
  #L448812.  if v10 == 0 then goto L448824;
  #L448816.  call temp:= `createWorker`(v6) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L44881c.  v2:= temp @kind object;
  #L44881e.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.h` @type ^`io.reactivex.Scheduler$Worker` := v2 @kind object;
  #L448822.  goto L44882a;
  #L448824.  v2:= 0I;
  #L448826.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.h` @type ^`io.reactivex.Scheduler$Worker` := v2 @kind object;
  #L44882a.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$a` v0 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.a:(Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;)Z` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L448794.  v0:= v0.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L448798.  return v0;
}
procedure `io.reactivex.internal.fuseable.SimplePlainQueue` `b`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$a` v0 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.b:(Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;)Lio/reactivex/internal/fuseable/SimplePlainQueue;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4487c4.  v0:= v0.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4487c8.  return v0 @kind object;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.c:()V` @AccessFlag  {
    temp;
    v0;

  #L448854.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.n` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L448858.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44885e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.h` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L448862.  if v0 == 0 then goto L44886c;
  #L448866.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44886c.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$a` v14 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L448880.  v0:= v14.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L448884.  v0:= (`io.reactivex.internal.queue.MpscLinkedQueue`) v0 @kind object;
  #L448888.  v1:= v14.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L44888c.  v2:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.l` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L448890.  v3:= 1I;
  #L448892.  v4:= 1I;
  #L448894.  v5:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.m` @type ^`boolean` @kind boolean;
  #L448898.  if v5 == 0 then goto L4488b4;
  #L44889c.  v1:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.k` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4488a0.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4488a6.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L4488ac.  call `c`(v14) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.c:()V` @kind virtual;
  #L4488b2.  return @kind void;
  #L4488b4.  v5:= v14.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` @kind boolean;
  #L4488b8.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4488be.  v6:= temp @kind object;
  #L4488c0.  if v6 != 0 then goto L4488c8;
  #L4488c4.  v7:= 1I;
  #L4488c6.  goto L4488ca;
  #L4488c8.  v7:= 0I;
  #L4488ca.  v8:= instanceof @variable v6 @type ^`io.reactivex.internal.operators.observable.ObservableWindowTimed$a$a` @kind boolean;
  #L4488ce.  if v5 == 0 then goto L448904;
  #L4488d2.  if v7 != 0 then goto L4488da;
  #L4488d6.  if v8 == 0 then goto L448904;
  #L4488da.  v1:= 0I;
  #L4488dc.  v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.l` @type ^`io.reactivex.subjects.UnicastSubject` := v1 @kind object;
  #L4488e0.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L4488e6.  call `c`(v14) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.c:()V` @kind virtual;
  #L4488ec.  v0:= v14.`io.reactivex.internal.observers.QueueDrainObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L4488f0.  if v0 == 0 then goto L4488fc;
  #L4488f4.  call `onError`(v2, v0) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4488fa.  goto L448902;
  #L4488fc.  call `onComplete`(v2) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L448902.  return @kind void;
  #L448904.  if v7 == 0 then goto L448918;
  #L448908.  v4:= -v4 @kind int;
  #L44890a.  call temp:= `leave`(v14, v4) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L448910.  v4:= temp;
  #L448912.  if v4 != 0 then goto L448894;
  #L448916.  return @kind void;
  #L448918.  v9:= 0L;
  #L44891c.  if v8 == 0 then goto L44895e;
  #L448920.  v6:= (`io.reactivex.internal.operators.observable.ObservableWindowTimed$a$a`) v6 @kind object;
  #L448924.  v5:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`boolean` @kind boolean;
  #L448928.  if v5 != 0 then goto L44893c;
  #L44892c.  v7:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.j` @type ^`long` @kind wide;
  #L448930.  v5:= v6.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a$a.a` @type ^`long` @kind wide;
  #L448934.  v11:= lcmp(v7, v5);
  #L448938.  if v11 != 0 then goto L448894;
  #L44893c.  call `onComplete`(v2) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L448942.  v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.i` @type ^`long` := v9 @kind wide;
  #L448946.  v2:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.e` @type ^`int`;
  #L44894a.  call temp:= `create`(v2) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L448950.  v2:= temp @kind object;
  #L448952.  v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.l` @type ^`io.reactivex.subjects.UnicastSubject` := v2 @kind object;
  #L448956.  call `onNext`(v1, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44895c.  goto L448894;
  #L44895e.  call temp:= `getValue`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L448964.  v5:= temp @kind object;
  #L448966.  call `onNext`(v2, v5) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L44896c.  v5:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.i` @type ^`long` @kind wide;
  #L448970.  v7:= 1L;
  #L448974.  v5:= v5 + v7 @kind long;
  #L448976.  v11:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.g` @type ^`long` @kind wide;
  #L44897a.  v13:= lcmp(v5, v11);
  #L44897e.  if v13 < 0 then goto L448a0c;
  #L448982.  v5:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.j` @type ^`long` @kind wide;
  #L448986.  v5:= v5 + v7 @kind long;
  #L448988.  v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.j` @type ^`long` := v5 @kind wide;
  #L44898c.  v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.i` @type ^`long` := v9 @kind wide;
  #L448990.  call `onComplete`(v2) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L448996.  v2:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.e` @type ^`int`;
  #L44899a.  call temp:= `create`(v2) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L4489a0.  v2:= temp @kind object;
  #L4489a2.  v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.l` @type ^`io.reactivex.subjects.UnicastSubject` := v2 @kind object;
  #L4489a6.  v5:= v14.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L4489aa.  call `onNext`(v5, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4489b0.  v5:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`boolean` @kind boolean;
  #L4489b4.  if v5 == 0 then goto L448894;
  #L4489b8.  v5:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.n` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4489bc.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4489c2.  v5:= temp @kind object;
  #L4489c4.  v5:= (`io.reactivex.disposables.Disposable`) v5 @kind object;
  #L4489c8.  call `dispose`(v5) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4489ce.  v6:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.h` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4489d2.  v7:= new `io.reactivex.internal.operators.observable.ObservableWindowTimed$a$a`;
  #L4489d6.  v8:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.j` @type ^`long` @kind wide;
  #L4489da.  call `<init>`(v7, v8, v14) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a$a;.<init>:(JLio/reactivex/internal/operators/observable/ObservableWindowTimed$a;)V` @kind direct;
  #L4489e0.  v10:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.b` @type ^`long` @kind wide;
  #L4489e4.  v12:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4489e8.  v8:= v10 @kind wide;
  #L4489ea.  call temp:= `schedulePeriodically`(v6, v7, v8, v10, v12) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L4489f0.  v6:= temp @kind object;
  #L4489f2.  v7:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.n` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4489f6.  call temp:= `compareAndSet`(v7, v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4489fc.  v5:= temp;
  #L4489fe.  if v5 != 0 then goto L448894;
  #L448a02.  call `dispose`(v6) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L448a08.  goto L448894;
  #L448a0c.  v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.i` @type ^`long` := v5 @kind wide;
  #L448a10.  goto L448894;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44883c.  v0:= 1I;
  #L44883e.  v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L448842.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4487ac.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4487b0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L448a24.  v0:= 1I;
  #L448a26.  v1.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L448a2a.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L448a30.  v0:= temp;
  #L448a32.  if v0 == 0 then goto L448a3c;
  #L448a36.  call `d`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.d:()V` @kind virtual;
  #L448a3c.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L448a40.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L448a46.  call `c`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.c:()V` @kind virtual;
  #L448a4c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L448a60.  v1.`io.reactivex.internal.observers.QueueDrainObserver.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L448a64.  v0:= 1I;
  #L448a66.  v1.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L448a6a.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L448a70.  v0:= temp;
  #L448a72.  if v0 == 0 then goto L448a7c;
  #L448a76.  call `d`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.d:()V` @kind virtual;
  #L448a7c.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L448a80.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L448a86.  call `c`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.c:()V` @kind virtual;
  #L448a8c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$a` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L448aa0.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.m` @type ^`boolean` @kind boolean;
  #L448aa4.  if v0 == 0 then goto L448aaa;
  #L448aa8.  return @kind void;
  #L448aaa.  call temp:= `fastEnter`(v7) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastEnter:()Z` @kind virtual;
  #L448ab0.  v0:= temp;
  #L448ab2.  if v0 == 0 then goto L448b6a;
  #L448ab6.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.l` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L448aba.  call `onNext`(v0, v8) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L448ac0.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.i` @type ^`long` @kind wide;
  #L448ac4.  v3:= 1L;
  #L448ac8.  v1:= v1 + v3 @kind long;
  #L448aca.  v5:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.g` @type ^`long` @kind wide;
  #L448ace.  v8:= lcmp(v1, v5);
  #L448ad2.  if v8 < 0 then goto L448b56;
  #L448ad6.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.j` @type ^`long` @kind wide;
  #L448ada.  v1:= v1 + v3 @kind long;
  #L448adc.  v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.j` @type ^`long` := v1 @kind wide;
  #L448ae0.  v1:= 0L;
  #L448ae4.  v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.i` @type ^`long` := v1 @kind wide;
  #L448ae8.  call `onComplete`(v0) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L448aee.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.e` @type ^`int`;
  #L448af2.  call temp:= `create`(v8) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L448af8.  v8:= temp @kind object;
  #L448afa.  v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.l` @type ^`io.reactivex.subjects.UnicastSubject` := v8 @kind object;
  #L448afe.  v0:= v7.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L448b02.  call `onNext`(v0, v8) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L448b08.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`boolean` @kind boolean;
  #L448b0c.  if v8 == 0 then goto L448b5a;
  #L448b10.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.n` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L448b14.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L448b1a.  v8:= temp @kind object;
  #L448b1c.  v8:= (`io.reactivex.disposables.Disposable`) v8 @kind object;
  #L448b20.  call `dispose`(v8) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L448b26.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.h` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L448b2a.  v1:= new `io.reactivex.internal.operators.observable.ObservableWindowTimed$a$a`;
  #L448b2e.  v2:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.j` @type ^`long` @kind wide;
  #L448b32.  call `<init>`(v1, v2, v7) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a$a;.<init>:(JLio/reactivex/internal/operators/observable/ObservableWindowTimed$a;)V` @kind direct;
  #L448b38.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.b` @type ^`long` @kind wide;
  #L448b3c.  v6:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L448b40.  v2:= v4 @kind wide;
  #L448b42.  call temp:= `schedulePeriodically`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L448b48.  v8:= temp @kind object;
  #L448b4a.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.n` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L448b4e.  call temp:= `replace`(v0, v8) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L448b54.  goto L448b5a;
  #L448b56.  v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.i` @type ^`long` := v1 @kind wide;
  #L448b5a.  v8:= -1I;
  #L448b5c.  call temp:= `leave`(v7, v8) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L448b62.  v8:= temp;
  #L448b64.  if v8 != 0 then goto L448b8a;
  #L448b68.  return @kind void;
  #L448b6a.  v0:= v7.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L448b6e.  call temp:= `next`(v8) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L448b74.  v8:= temp @kind object;
  #L448b76.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L448b7c.  call temp:= `enter`(v7) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L448b82.  v8:= temp;
  #L448b84.  if v8 != 0 then goto L448b8a;
  #L448b88.  return @kind void;
  #L448b8a.  call `d`(v7) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.d:()V` @kind virtual;
  #L448b90.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$a` v8 @kind this, `io.reactivex.disposables.Disposable` v9 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L448ba4.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.k` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L448ba8.  call temp:= `validate`(v0, v9) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L448bae.  v0:= temp;
  #L448bb0.  if v0 == 0 then goto L448c30;
  #L448bb4.  v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.k` @type ^`io.reactivex.disposables.Disposable` := v9 @kind object;
  #L448bb8.  v9:= v8.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L448bbc.  call `onSubscribe`(v9, v8) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L448bc2.  v0:= v8.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L448bc6.  if v0 == 0 then goto L448bcc;
  #L448bca.  return @kind void;
  #L448bcc.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.e` @type ^`int`;
  #L448bd0.  call temp:= `create`(v0) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L448bd6.  v0:= temp @kind object;
  #L448bd8.  v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.l` @type ^`io.reactivex.subjects.UnicastSubject` := v0 @kind object;
  #L448bdc.  call `onNext`(v9, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L448be2.  v2:= new `io.reactivex.internal.operators.observable.ObservableWindowTimed$a$a`;
  #L448be6.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.j` @type ^`long` @kind wide;
  #L448bea.  call `<init>`(v2, v0, v8) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a$a;.<init>:(JLio/reactivex/internal/operators/observable/ObservableWindowTimed$a;)V` @kind direct;
  #L448bf0.  v9:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`boolean` @kind boolean;
  #L448bf4.  if v9 == 0 then goto L448c10;
  #L448bf8.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.h` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L448bfc.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.b` @type ^`long` @kind wide;
  #L448c00.  v7:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L448c04.  v3:= v5 @kind wide;
  #L448c06.  call temp:= `schedulePeriodically`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L448c0c.  v9:= temp @kind object;
  #L448c0e.  goto L448c26;
  #L448c10.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L448c14.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.b` @type ^`long` @kind wide;
  #L448c18.  v7:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L448c1c.  v3:= v5 @kind wide;
  #L448c1e.  call temp:= `schedulePeriodicallyDirect`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L448c24.  v9:= temp @kind object;
  #L448c26.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.n` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L448c2a.  call temp:= `replace`(v0, v9) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L448c30.  return @kind void;
}
