record `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicIntQueueDisposable` @kind class, `io.reactivex.Observer` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.b` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.d` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.e` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.f` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L439c90.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L439c96.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L439c9a.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.c` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L439c9e.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.d` @type ^`boolean` := v3 @kind boolean;
  #L439ca2.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L439ca6.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L439cac.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L439cb0.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L439cb4.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L439cba.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L439cbe.  v1:= 1I;
  #L439cc0.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L439cc6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a$a` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.a:(Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a$a;)V` @AccessFlag  {
    temp;
    v0;

  #L439d14.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L439d18.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L439d1e.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.onComplete:()V` @kind virtual;
  #L439d24.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;

  #L439cd8.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L439cec.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L439cf0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L439cf6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L439cfa.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L439d00.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a$a` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.e:(Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L439d38.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L439d3c.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L439d42.  call `onError`(v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L439d48.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L439c30.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L439c34.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L439c3a.  v0:= temp;
  #L439c3c.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L439c50.  v0:= 1I;
  #L439c52.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L439d5c.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L439d62.  v0:= temp;
  #L439d64.  if v0 != 0 then goto L439d8e;
  #L439d68.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L439d6c.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L439d72.  v0:= temp @kind object;
  #L439d74.  if v0 == 0 then goto L439d84;
  #L439d78.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L439d7c.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L439d82.  goto L439d8e;
  #L439d84.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L439d88.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L439d8e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L439da0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L439da4.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L439daa.  v0:= temp;
  #L439dac.  if v0 == 0 then goto L439e08;
  #L439db0.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.d` @type ^`boolean` @kind boolean;
  #L439db4.  if v2 == 0 then goto L439ddc;
  #L439db8.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L439dbe.  v2:= temp;
  #L439dc0.  if v2 != 0 then goto L439e0e;
  #L439dc4.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L439dc8.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L439dce.  v2:= temp @kind object;
  #L439dd0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L439dd4.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L439dda.  goto L439e0e;
  #L439ddc.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.dispose:()V` @kind virtual;
  #L439de2.  v2:= 0I;
  #L439de4.  call temp:= `getAndSet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L439dea.  v2:= temp;
  #L439dec.  if v2 <= 0 then goto L439e0e;
  #L439df0.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L439df4.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L439dfa.  v2:= temp @kind object;
  #L439dfc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L439e00.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L439e06.  goto L439e0e;
  #L439e08.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L439e0e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L439e20.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.c` @type ^`io.reactivex.functions.Function` @kind object;
  #L439e24.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L439e2a.  v3:= temp @kind object;
  #L439e2c.  v0:= "The mapper returned a null CompletableSource" @kind object;
  #L439e30.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L439e36.  v3:= temp @kind object;
  #L439e38.  v3:= (`io.reactivex.CompletableSource`) v3 @kind object;
  #L439e3c.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L439e42.  v0:= new `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a$a`;
  #L439e46.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;)V` @kind direct;
  #L439e4c.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L439e50.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L439e56.  v1:= temp;
  #L439e58.  if v1 == 0 then goto L439e62;
  #L439e5c.  call `subscribe`(v3, v0) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L439e62.  return @kind void;
  #L439e64.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L439e66.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L439e6c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L439e70.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L439e76.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L439e7c.  return @kind void;
  catch `java.lang.Throwable` @[L439e20..L439e3c] goto L439e64;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L439e9c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L439ea0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L439ea6.  v0:= temp;
  #L439ea8.  if v0 == 0 then goto L439eba;
  #L439eac.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.f` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L439eb0.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L439eb4.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L439eba.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L439c7c.  v0:= 0I;
  #L439c7e.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L439c64.  v1:= v1 ^& 2;
  #L439c68.  return v1;
}
