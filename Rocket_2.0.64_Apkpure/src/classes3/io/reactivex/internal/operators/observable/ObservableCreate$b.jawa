record `io.reactivex.internal.operators.observable.ObservableCreate$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.ObservableEmitter` @kind interface {
  `io.reactivex.ObservableEmitter` `io.reactivex.internal.operators.observable.ObservableCreate$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableCreate$b.b` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.observable.ObservableCreate$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableCreate$b.d` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableCreate$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableCreate$b` v1 @kind this, `io.reactivex.ObservableEmitter` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.<init>:(Lio/reactivex/ObservableEmitter;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L436f88.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L436f8e.  v1.`io.reactivex.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.ObservableEmitter` := v2 @kind object;
  #L436f92.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L436f96.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L436f9c.  v1.`io.reactivex.internal.operators.observable.ObservableCreate$b.b` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L436fa0.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L436fa4.  v0:= 16I;
  #L436fa8.  call `<init>`(v2, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L436fae.  v1.`io.reactivex.internal.operators.observable.ObservableCreate$b.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L436fb2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableCreate$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L436fc4.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L436fca.  v0:= temp;
  #L436fcc.  if v0 != 0 then goto L436fd6;
  #L436fd0.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.b:()V` @kind virtual;
  #L436fd6.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableCreate$b` v8 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L436fe8.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.ObservableEmitter` @kind object;
  #L436fec.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableCreate$b.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L436ff0.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableCreate$b.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L436ff4.  v3:= 1I;
  #L436ff6.  v4:= 1I;
  #L436ff8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/ObservableEmitter;.isDisposed:()Z` @kind interface;
  #L436ffe.  v5:= temp;
  #L437000.  if v5 == 0 then goto L43700c;
  #L437004.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43700a.  return @kind void;
  #L43700c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L437012.  v5:= temp @kind object;
  #L437014.  if v5 == 0 then goto L43702e;
  #L437018.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43701e.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L437024.  v1:= temp @kind object;
  #L437026.  call `onError`(v0, v1) @signature `Lio/reactivex/Emitter;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43702c.  return @kind void;
  #L43702e.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableCreate$b.d` @type ^`boolean` @kind boolean;
  #L437032.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L437038.  v6:= temp @kind object;
  #L43703a.  if v6 != 0 then goto L437042;
  #L43703e.  v7:= 1I;
  #L437040.  goto L437044;
  #L437042.  v7:= 0I;
  #L437044.  if v5 == 0 then goto L437054;
  #L437048.  if v7 == 0 then goto L437054;
  #L43704c.  call `onComplete`(v0) @signature `Lio/reactivex/Emitter;.onComplete:()V` @kind interface;
  #L437052.  return @kind void;
  #L437054.  if v7 == 0 then goto L437068;
  #L437058.  v4:= -v4 @kind int;
  #L43705a.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L437060.  v4:= temp;
  #L437062.  if v4 != 0 then goto L436ff8;
  #L437066.  return @kind void;
  #L437068.  call `onNext`(v0, v6) @signature `Lio/reactivex/Emitter;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43706e.  goto L436ff8;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableCreate$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436f54.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.ObservableEmitter` @kind object;
  #L436f58.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/ObservableEmitter;.isDisposed:()Z` @kind interface;
  #L436f5e.  v0:= temp;
  #L436f60.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableCreate$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L437080.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.ObservableEmitter` @kind object;
  #L437084.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/ObservableEmitter;.isDisposed:()Z` @kind interface;
  #L43708a.  v0:= temp;
  #L43708c.  if v0 != 0 then goto L4370a6;
  #L437090.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$b.d` @type ^`boolean` @kind boolean;
  #L437094.  if v0 == 0 then goto L43709a;
  #L437098.  goto L4370a6;
  #L43709a.  v0:= 1I;
  #L43709c.  v1.`io.reactivex.internal.operators.observable.ObservableCreate$b.d` @type ^`boolean` := v0 @kind boolean;
  #L4370a0.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.a:()V` @kind virtual;
  #L4370a6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableCreate$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4370b8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.ObservableEmitter` @kind object;
  #L4370bc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/ObservableEmitter;.isDisposed:()Z` @kind interface;
  #L4370c2.  v0:= temp;
  #L4370c4.  if v0 != 0 then goto L43710a;
  #L4370c8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$b.d` @type ^`boolean` @kind boolean;
  #L4370cc.  if v0 == 0 then goto L4370d2;
  #L4370d0.  goto L43710a;
  #L4370d2.  if v2 != 0 then goto L4370e4;
  #L4370d6.  v2:= new `java.lang.NullPointerException`;
  #L4370da.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L4370de.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4370e4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$b.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4370e8.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4370ee.  v0:= temp;
  #L4370f0.  if v0 == 0 then goto L437102;
  #L4370f4.  v2:= 1I;
  #L4370f6.  v1.`io.reactivex.internal.operators.observable.ObservableCreate$b.d` @type ^`boolean` := v2 @kind boolean;
  #L4370fa.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.a:()V` @kind virtual;
  #L437100.  goto L437108;
  #L437102.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L437108.  return @kind void;
  #L43710a.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L437110.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableCreate$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L437124.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.ObservableEmitter` @kind object;
  #L437128.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/ObservableEmitter;.isDisposed:()Z` @kind interface;
  #L43712e.  v0:= temp;
  #L437130.  if v0 != 0 then goto L4371b6;
  #L437134.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCreate$b.d` @type ^`boolean` @kind boolean;
  #L437138.  if v0 == 0 then goto L43713e;
  #L43713c.  goto L4371b6;
  #L43713e.  if v3 != 0 then goto L437158;
  #L437142.  v3:= new `java.lang.NullPointerException`;
  #L437146.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L43714a.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L437150.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L437156.  return @kind void;
  #L437158.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L43715e.  v0:= temp;
  #L437160.  if v0 != 0 then goto L43718c;
  #L437164.  v0:= 0I;
  #L437166.  v1:= 1I;
  #L437168.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L43716e.  v0:= temp;
  #L437170.  if v0 == 0 then goto L43718c;
  #L437174.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.ObservableEmitter` @kind object;
  #L437178.  call `onNext`(v0, v3) @signature `Lio/reactivex/Emitter;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43717e.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L437184.  v3:= temp;
  #L437186.  if v3 != 0 then goto L4371a8;
  #L43718a.  return @kind void;
  #L43718c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCreate$b.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L437190.  @monitorenter v0
  #L437192.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L437198.  @monitorexit v0
  #L43719a.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4371a0.  v3:= temp;
  #L4371a2.  if v3 == 0 then goto L4371a8;
  #L4371a6.  return @kind void;
  #L4371a8.  call `b`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.b:()V` @kind virtual;
  #L4371ae.  return @kind void;
  #L4371b0.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4371b2.  @monitorexit v0
  #L4371b4.  throw v3;
  #L4371b6.  return @kind void;
  catch `java.lang.Throwable` @[L437192..L43719a] goto L4371b0;
  catch `java.lang.Throwable` @[L4371b2..L4371b4] goto L4371b0;
}
procedure `io.reactivex.ObservableEmitter` `serialize`(`io.reactivex.internal.operators.observable.ObservableCreate$b` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.serialize:()Lio/reactivex/ObservableEmitter;` @AccessFlag PUBLIC {
    temp;

  #L436f74.  return v0 @kind object;
}
procedure `void` `setCancellable`(`io.reactivex.internal.operators.observable.ObservableCreate$b` v1 @kind this, `io.reactivex.functions.Cancellable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.setCancellable:(Lio/reactivex/functions/Cancellable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4371dc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.ObservableEmitter` @kind object;
  #L4371e0.  call `setCancellable`(v0, v2) @signature `Lio/reactivex/ObservableEmitter;.setCancellable:(Lio/reactivex/functions/Cancellable;)V` @kind interface;
  #L4371e6.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.internal.operators.observable.ObservableCreate$b` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4371f8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.ObservableEmitter` @kind object;
  #L4371fc.  call `setDisposable`(v0, v2) @signature `Lio/reactivex/ObservableEmitter;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L437202.  return @kind void;
}
