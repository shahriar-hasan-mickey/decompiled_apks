record `io.reactivex.internal.operators.observable.ObservableScanSeed$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableScanSeed$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.observable.ObservableScanSeed$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableScanSeed$a.c` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableScanSeed$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableScanSeed$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableScanSeed$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScanSeed$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/BiFunction;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L442eac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L442eb2.  v0.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L442eb6.  v0.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.b` @type ^`io.reactivex.functions.BiFunction` := v2 @kind object;
  #L442eba.  v0.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.c` @type ^`java.lang.Object` := v3 @kind object;
  #L442ebe.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableScanSeed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScanSeed$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442ed0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L442ed4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L442eda.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableScanSeed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScanSeed$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442e8c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L442e90.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L442e96.  v0:= temp;
  #L442e98.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableScanSeed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScanSeed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442eec.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.e` @type ^`boolean` @kind boolean;
  #L442ef0.  if v0 == 0 then goto L442ef6;
  #L442ef4.  return @kind void;
  #L442ef6.  v0:= 1I;
  #L442ef8.  v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.e` @type ^`boolean` := v0 @kind boolean;
  #L442efc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L442f00.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L442f06.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableScanSeed$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScanSeed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442f18.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.e` @type ^`boolean` @kind boolean;
  #L442f1c.  if v0 == 0 then goto L442f28;
  #L442f20.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L442f26.  return @kind void;
  #L442f28.  v0:= 1I;
  #L442f2a.  v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.e` @type ^`boolean` := v0 @kind boolean;
  #L442f2e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L442f32.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L442f38.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableScanSeed$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScanSeed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L442f4c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.e` @type ^`boolean` @kind boolean;
  #L442f50.  if v0 == 0 then goto L442f56;
  #L442f54.  return @kind void;
  #L442f56.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.c` @type ^`java.lang.Object` @kind object;
  #L442f5a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.b` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L442f5e.  call temp:= `apply`(v1, v0, v3) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L442f64.  v3:= temp @kind object;
  #L442f66.  v0:= "The accumulator returned a null value" @kind object;
  #L442f6a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L442f70.  v3:= temp @kind object;
  #L442f72.  v2.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.c` @type ^`java.lang.Object` := v3 @kind object;
  #L442f76.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L442f7a.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L442f80.  return @kind void;
  #L442f82.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L442f84.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L442f8a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L442f8e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L442f94.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableScanSeed$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L442f9a.  return @kind void;
  catch `java.lang.Throwable` @[L442f5a..L442f72] goto L442f82;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableScanSeed$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScanSeed$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442fb8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L442fbc.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L442fc2.  v0:= temp;
  #L442fc4.  if v0 == 0 then goto L442fe4;
  #L442fc8.  v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.d` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L442fcc.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L442fd0.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L442fd6.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L442fda.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.c` @type ^`java.lang.Object` @kind object;
  #L442fde.  call `onNext`(v2, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L442fe4.  return @kind void;
}
