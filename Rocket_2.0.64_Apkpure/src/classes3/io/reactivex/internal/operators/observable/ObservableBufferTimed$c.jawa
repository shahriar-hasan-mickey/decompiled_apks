record `io.reactivex.internal.operators.observable.ObservableBufferTimed$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.QueueDrainObserver` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBufferTimed$c.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableBufferTimed$c.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableBufferTimed$c.d` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableBufferTimed$c.e` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.observable.ObservableBufferTimed$c.f` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.internal.operators.observable.ObservableBufferTimed$c.g` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableBufferTimed$c.h` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$c` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `long` v4 , `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object, `io.reactivex.Scheduler$Worker` v9 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.<init>:(Lio/reactivex/Observer;Ljava/util/concurrent/Callable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L434920.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L434924.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L43492a.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L434930.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.b` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L434934.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.c` @type ^`long` := v4 @kind wide;
  #L434938.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.d` @type ^`long` := v6 @kind wide;
  #L43493c.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.e` @type ^`java.util.concurrent.TimeUnit` := v8 @kind object;
  #L434940.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.f` @type ^`io.reactivex.Scheduler$Worker` := v9 @kind object;
  #L434944.  v2:= new `java.util.LinkedList`;
  #L434948.  call `<init>`(v2) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L43494e.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.g` @type ^`java.util.List` := v2 @kind object;
  #L434952.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$c` v0 @kind object, `java.lang.Object` v1 @kind object, `boolean` v2 , `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.b:(Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L434998.  call `fastPathOrderedEmit`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastPathOrderedEmit:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L43499e.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$c` v0 @kind object, `java.lang.Object` v1 @kind object, `boolean` v2 , `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.c:(Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4349b0.  call `fastPathOrderedEmit`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastPathOrderedEmit:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L4349b6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$c` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.a:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @AccessFlag PUBLIC {
    temp;

  #L434980.  call `onNext`(v1, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L434986.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$c` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.accept:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L434964.  v2:= (`java.util.Collection`) v2 @kind object;
  #L434968.  call `a`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.a:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @kind virtual;
  #L43496e.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L4349c8.  @monitorenter v1
  #L4349ca.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.g` @type ^`java.util.List` @kind object;
  #L4349ce.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4349d4.  @monitorexit v1
  #L4349d6.  return @kind void;
  #L4349d8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4349da.  @monitorexit v1
  #L4349dc.  throw v0;
  catch `java.lang.Throwable` @[L4349ca..L4349dc] goto L4349d8;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4349fc.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L434a00.  if v0 != 0 then goto L434a24;
  #L434a04.  v0:= 1I;
  #L434a06.  v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L434a0a.  call `d`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.d:()V` @kind virtual;
  #L434a10.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L434a14.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L434a1a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.f` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L434a1e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L434a24.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L434908.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L43490c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$c` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L434a38.  @monitorenter v4
  #L434a3a.  v0:= new `java.util.ArrayList`;
  #L434a3e.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.g` @type ^`java.util.List` @kind object;
  #L434a42.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L434a48.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.g` @type ^`java.util.List` @kind object;
  #L434a4c.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L434a52.  @monitorexit v4
  #L434a54.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L434a5a.  v0:= temp @kind object;
  #L434a5c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L434a62.  v1:= temp;
  #L434a64.  if v1 == 0 then goto L434a80;
  #L434a68.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L434a6e.  v1:= temp @kind object;
  #L434a70.  v1:= (`java.util.Collection`) v1 @kind object;
  #L434a74.  v2:= v4.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L434a78.  call temp:= `offer`(v2, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L434a7e.  goto L434a5c;
  #L434a80.  v0:= 1I;
  #L434a82.  v4.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L434a86.  call temp:= `enter`(v4) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L434a8c.  v0:= temp;
  #L434a8e.  if v0 == 0 then goto L434aa6;
  #L434a92.  v0:= v4.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L434a96.  v1:= v4.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L434a9a.  v2:= 0I;
  #L434a9c.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.f` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L434aa0.  call `drainLoop`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lio/reactivex/Observer;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain;)V` @kind static;
  #L434aa6.  return @kind void;
  #L434aa8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L434aaa.  @monitorexit v4
  #L434aac.  throw v0;
  catch `java.lang.Throwable` @[L434a3a..L434a54] goto L434aa8;
  catch `java.lang.Throwable` @[L434aaa..L434aac] goto L434aa8;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L434ad4.  v0:= 1I;
  #L434ad6.  v1.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L434ada.  call `d`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.d:()V` @kind virtual;
  #L434ae0.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L434ae4.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L434aea.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.f` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L434aee.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L434af4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L434b08.  @monitorenter v2
  #L434b0a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.g` @type ^`java.util.List` @kind object;
  #L434b0e.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L434b14.  v0:= temp @kind object;
  #L434b16.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L434b1c.  v1:= temp;
  #L434b1e.  if v1 == 0 then goto L434b36;
  #L434b22.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L434b28.  v1:= temp @kind object;
  #L434b2a.  v1:= (`java.util.Collection`) v1 @kind object;
  #L434b2e.  call temp:= `add`(v1, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L434b34.  goto L434b16;
  #L434b36.  @monitorexit v2
  #L434b38.  return @kind void;
  #L434b3a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L434b3c.  @monitorexit v2
  #L434b3e.  throw v3;
  catch `java.lang.Throwable` @[L434b0a..L434b3e] goto L434b3a;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$c` v8 @kind this, `io.reactivex.disposables.Disposable` v9 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L434b5c.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L434b60.  call temp:= `validate`(v0, v9) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L434b66.  v0:= temp;
  #L434b68.  if v0 == 0 then goto L434bf6;
  #L434b6c.  v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.h` @type ^`io.reactivex.disposables.Disposable` := v9 @kind object;
  #L434b70.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L434b74.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L434b7a.  v0:= temp @kind object;
  #L434b7c.  v1:= "The buffer supplied is null" @kind object;
  #L434b80.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L434b86.  v0:= temp @kind object;
  #L434b88.  v0:= (`java.util.Collection`) v0 @kind object;
  #L434b8c.  v9:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.g` @type ^`java.util.List` @kind object;
  #L434b90.  call temp:= `add`(v9, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L434b96.  v9:= v8.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L434b9a.  call `onSubscribe`(v9, v8) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L434ba0.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.f` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L434ba4.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.d` @type ^`long` @kind wide;
  #L434ba8.  v7:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L434bac.  v2:= v8 @kind object;
  #L434bae.  v3:= v5 @kind wide;
  #L434bb0.  call temp:= `schedulePeriodically`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L434bb6.  v9:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.f` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L434bba.  v1:= new `io.reactivex.internal.operators.observable.ObservableBufferTimed$c$b`;
  #L434bbe.  call `<init>`(v1, v8, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c$b;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;Ljava/util/Collection;)V` @kind direct;
  #L434bc4.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.c` @type ^`long` @kind wide;
  #L434bc8.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L434bcc.  call temp:= `schedule`(v9, v1, v2, v0) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L434bd2.  goto L434bf6;
  #L434bd4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L434bd6.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L434bdc.  call `dispose`(v9) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L434be2.  v9:= v8.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L434be6.  call `error`(v0, v9) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L434bec.  v9:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.f` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L434bf0.  call `dispose`(v9) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L434bf6.  return @kind void;
  catch `java.lang.Throwable` @[L434b70..L434b8c] goto L434bd4;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$c` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L434c14.  v0:= v5.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L434c18.  if v0 == 0 then goto L434c1e;
  #L434c1c.  return @kind void;
  #L434c1e.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L434c22.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L434c28.  v0:= temp @kind object;
  #L434c2a.  v1:= "The bufferSupplier returned a null buffer" @kind object;
  #L434c2e.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L434c34.  v0:= temp @kind object;
  #L434c36.  v0:= (`java.util.Collection`) v0 @kind object;
  #L434c3a.  @monitorenter v5
  #L434c3c.  v1:= v5.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L434c40.  if v1 == 0 then goto L434c48;
  #L434c44.  @monitorexit v5
  #L434c46.  return @kind void;
  #L434c48.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.g` @type ^`java.util.List` @kind object;
  #L434c4c.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L434c52.  @monitorexit v5
  #L434c54.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.f` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L434c58.  v2:= new `io.reactivex.internal.operators.observable.ObservableBufferTimed$c$a`;
  #L434c5c.  call `<init>`(v2, v5, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;Ljava/util/Collection;)V` @kind direct;
  #L434c62.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.c` @type ^`long` @kind wide;
  #L434c66.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L434c6a.  call temp:= `schedule`(v1, v2, v3, v0) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L434c70.  return @kind void;
  #L434c72.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L434c74.  @monitorexit v5
  #L434c76.  throw v0;
  #L434c78.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L434c7a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L434c80.  v1:= v5.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L434c84.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L434c8a.  call `dispose`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.dispose:()V` @kind virtual;
  #L434c90.  return @kind void;
  catch `java.lang.Throwable` @[L434c1e..L434c3a] goto L434c78;
  catch `java.lang.Throwable` @[L434c3c..L434c54] goto L434c72;
  catch `java.lang.Throwable` @[L434c74..L434c76] goto L434c72;
}
