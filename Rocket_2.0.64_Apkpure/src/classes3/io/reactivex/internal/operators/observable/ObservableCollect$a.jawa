record `io.reactivex.internal.operators.observable.ObservableCollect$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableCollect$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiConsumer` `io.reactivex.internal.operators.observable.ObservableCollect$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableCollect$a.c` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableCollect$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableCollect$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableCollect$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.functions.BiConsumer` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCollect$a;.<init>:(Lio/reactivex/Observer;Ljava/lang/Object;Lio/reactivex/functions/BiConsumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L435330.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L435336.  v0.`io.reactivex.internal.operators.observable.ObservableCollect$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L43533a.  v0.`io.reactivex.internal.operators.observable.ObservableCollect$a.b` @type ^`io.reactivex.functions.BiConsumer` := v3 @kind object;
  #L43533e.  v0.`io.reactivex.internal.operators.observable.ObservableCollect$a.c` @type ^`java.lang.Object` := v2 @kind object;
  #L435342.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableCollect$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCollect$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435354.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCollect$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L435358.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43535e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableCollect$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCollect$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435310.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCollect$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L435314.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L43531a.  v0:= temp;
  #L43531c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableCollect$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCollect$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L435370.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCollect$a.e` @type ^`boolean` @kind boolean;
  #L435374.  if v0 == 0 then goto L43537a;
  #L435378.  return @kind void;
  #L43537a.  v0:= 1I;
  #L43537c.  v2.`io.reactivex.internal.operators.observable.ObservableCollect$a.e` @type ^`boolean` := v0 @kind boolean;
  #L435380.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCollect$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L435384.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableCollect$a.c` @type ^`java.lang.Object` @kind object;
  #L435388.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43538e.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCollect$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L435392.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L435398.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableCollect$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCollect$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4353ac.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCollect$a.e` @type ^`boolean` @kind boolean;
  #L4353b0.  if v0 == 0 then goto L4353bc;
  #L4353b4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4353ba.  return @kind void;
  #L4353bc.  v0:= 1I;
  #L4353be.  v1.`io.reactivex.internal.operators.observable.ObservableCollect$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4353c2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCollect$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4353c6.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4353cc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableCollect$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCollect$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4353e0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCollect$a.e` @type ^`boolean` @kind boolean;
  #L4353e4.  if v0 == 0 then goto L4353ea;
  #L4353e8.  return @kind void;
  #L4353ea.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCollect$a.b` @type ^`io.reactivex.functions.BiConsumer` @kind object;
  #L4353ee.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableCollect$a.c` @type ^`java.lang.Object` @kind object;
  #L4353f2.  call `accept`(v0, v1, v3) @signature `Lio/reactivex/functions/BiConsumer;.accept:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L4353f8.  goto L43540c;
  #L4353fa.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4353fc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCollect$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L435400.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L435406.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableCollect$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43540c.  return @kind void;
  catch `java.lang.Throwable` @[L4353ea..L4353f8] goto L4353fa;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableCollect$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCollect$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43542c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCollect$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L435430.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L435436.  v0:= temp;
  #L435438.  if v0 == 0 then goto L43544a;
  #L43543c.  v1.`io.reactivex.internal.operators.observable.ObservableCollect$a.d` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L435440.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableCollect$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L435444.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43544a.  return @kind void;
}
