record `io.reactivex.internal.operators.observable.ObservableFromArray$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicQueueDisposable` @kind class {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableFromArray$a.a` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.operators.observable.ObservableFromArray$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableFromArray$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFromArray$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFromArray$a.e` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFromArray$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$a;.<init>:(Lio/reactivex/Observer;[Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43b1bc.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicQueueDisposable;.<init>:()V` @kind direct;
  #L43b1c2.  v0.`io.reactivex.internal.operators.observable.ObservableFromArray$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L43b1c6.  v0.`io.reactivex.internal.operators.observable.ObservableFromArray$a.b` @type ^`java.lang.Object`[] := v2 @kind object;
  #L43b1ca.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableFromArray$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43b210.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableFromArray$a.b` @type ^`java.lang.Object`[] @kind object;
  #L43b214.  v1:= length @variable v0;
  #L43b216.  v2:= 0I;
  #L43b218.  if v2 >= v1 then goto L43b282;
  #L43b21c.  call temp:= `isDisposed`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$a;.isDisposed:()Z` @kind virtual;
  #L43b222.  v3:= temp;
  #L43b224.  if v3 != 0 then goto L43b282;
  #L43b228.  v3:= v0[v2] @kind object;
  #L43b22c.  if v3 != 0 then goto L43b272;
  #L43b230.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableFromArray$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43b234.  v1:= new `java.lang.NullPointerException`;
  #L43b238.  v3:= new `java.lang.StringBuilder`;
  #L43b23c.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43b242.  v4:= "The " @kind object;
  #L43b246.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43b24c.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L43b252.  v2:= "th element is null" @kind object;
  #L43b256.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43b25c.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43b262.  v2:= temp @kind object;
  #L43b264.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43b26a.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43b270.  return @kind void;
  #L43b272.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableFromArray$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43b276.  call `onNext`(v4, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43b27c.  v2:= v2 + 1;
  #L43b280.  goto L43b218;
  #L43b282.  call temp:= `isDisposed`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$a;.isDisposed:()Z` @kind virtual;
  #L43b288.  v0:= temp;
  #L43b28a.  if v0 != 0 then goto L43b298;
  #L43b28e.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableFromArray$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43b292.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43b298.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableFromArray$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b1dc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFromArray$a.b` @type ^`java.lang.Object`[] @kind object;
  #L43b1e0.  v0:= length @variable v0;
  #L43b1e2.  v1.`io.reactivex.internal.operators.observable.ObservableFromArray$a.c` @type ^`int` := v0;
  #L43b1e6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableFromArray$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b1f8.  v0:= 1I;
  #L43b1fa.  v1.`io.reactivex.internal.operators.observable.ObservableFromArray$a.e` @type ^`boolean` := v0 @kind boolean;
  #L43b1fe.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableFromArray$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b11c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFromArray$a.e` @type ^`boolean` @kind boolean;
  #L43b120.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.observable.ObservableFromArray$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43b134.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFromArray$a.c` @type ^`int`;
  #L43b138.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFromArray$a.b` @type ^`java.lang.Object`[] @kind object;
  #L43b13c.  v1:= length @variable v1;
  #L43b13e.  if v0 != v1 then goto L43b146;
  #L43b142.  v0:= 1I;
  #L43b144.  goto L43b148;
  #L43b146.  v0:= 0I;
  #L43b148.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableFromArray$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43b180.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableFromArray$a.c` @type ^`int`;
  #L43b184.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableFromArray$a.b` @type ^`java.lang.Object`[] @kind object;
  #L43b188.  v2:= length @variable v1;
  #L43b18a.  if v0 == v2 then goto L43b1a8;
  #L43b18e.  v2:= v0 + 1;
  #L43b192.  v3.`io.reactivex.internal.operators.observable.ObservableFromArray$a.c` @type ^`int` := v2;
  #L43b196.  v0:= v1[v0] @kind object;
  #L43b19a.  v1:= "The array element is null" @kind object;
  #L43b19e.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43b1a4.  v0:= temp @kind object;
  #L43b1a6.  return v0 @kind object;
  #L43b1a8.  v0:= 0I;
  #L43b1aa.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableFromArray$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b15c.  v0:= 1I;
  #L43b15e.  v2:= v2 ^& v0 @kind int;
  #L43b160.  if v2 == 0 then goto L43b16a;
  #L43b164.  v1.`io.reactivex.internal.operators.observable.ObservableFromArray$a.d` @type ^`boolean` := v0 @kind boolean;
  #L43b168.  return v0;
  #L43b16a.  v2:= 0I;
  #L43b16c.  return v2;
}
