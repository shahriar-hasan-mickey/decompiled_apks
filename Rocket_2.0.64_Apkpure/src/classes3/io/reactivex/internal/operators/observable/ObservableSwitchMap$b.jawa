record `io.reactivex.internal.operators.observable.ObservableSwitchMap$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableSwitchMap$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableSwitchMap$b.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableSwitchMap$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSwitchMap$b.d` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableSwitchMap$b.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSwitchMap$b.f` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSwitchMap$b.g` @AccessFlag VOLATILE;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableSwitchMap$b.h` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableSwitchMap$b.i` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableSwitchMap$b.j` @AccessFlag VOLATILE;
}
global `io.reactivex.internal.operators.observable.ObservableSwitchMap$a` `@@io.reactivex.internal.operators.observable.ObservableSwitchMap$b.k` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableSwitchMap$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L444948.  v0:= new `io.reactivex.internal.operators.observable.ObservableSwitchMap$a`;
  #L44494c.  v1:= 0I;
  #L44494e.  v2:= -1L;
  #L444952.  v4:= 1I;
  #L444954.  call `<init>`(v0, v1, v2, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;JI)V` @kind direct;
  #L44495a.  `@@io.reactivex.internal.operators.observable.ObservableSwitchMap$b.k` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$a` := v0 @kind object;
  #L44495e.  call `a`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$a;.a:()V` @kind virtual;
  #L444964.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 , `boolean` v5 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L444978.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L44497e.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L444982.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L444988.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L44498c.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.a` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L444990.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.b` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L444994.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.c` @type ^`int` := v4;
  #L444998.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.d` @type ^`boolean` := v5 @kind boolean;
  #L44499c.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L4449a0.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4449a6.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L4449aa.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4449ec.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4449f0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4449f6.  v0:= temp @kind object;
  #L4449f8.  v0:= (`io.reactivex.internal.operators.observable.ObservableSwitchMap$a`) v0 @kind object;
  #L4449fc.  v1:= `@@io.reactivex.internal.operators.observable.ObservableSwitchMap$b.k` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$a` @kind object;
  #L444a00.  if v0 == v1 then goto L444a22;
  #L444a04.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L444a08.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L444a0e.  v0:= temp @kind object;
  #L444a10.  v0:= (`io.reactivex.internal.operators.observable.ObservableSwitchMap$a`) v0 @kind object;
  #L444a14.  if v0 == v1 then goto L444a22;
  #L444a18.  if v0 == 0 then goto L444a22;
  #L444a1c.  call `a`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$a;.a:()V` @kind virtual;
  #L444a22.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` v10 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L444a34.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L444a3a.  v0:= temp;
  #L444a3c.  if v0 == 0 then goto L444a42;
  #L444a40.  return @kind void;
  #L444a42.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L444a46.  v1:= 1I;
  #L444a48.  v2:= 1I;
  #L444a4a.  v3:= v10.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L444a4e.  if v3 == 0 then goto L444a54;
  #L444a52.  return @kind void;
  #L444a54.  v3:= v10.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.f` @type ^`boolean` @kind boolean;
  #L444a58.  v4:= 0I;
  #L444a5a.  if v3 == 0 then goto L444ad8;
  #L444a5e.  v3:= v10.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L444a62.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L444a68.  v3:= temp @kind object;
  #L444a6a.  if v3 != 0 then goto L444a72;
  #L444a6e.  v3:= 1I;
  #L444a70.  goto L444a74;
  #L444a72.  v3:= 0I;
  #L444a74.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L444a78.  if v5 == 0 then goto L444aa4;
  #L444a7c.  if v3 == 0 then goto L444ad8;
  #L444a80.  v1:= v10.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L444a84.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L444a8a.  v1:= temp @kind object;
  #L444a8c.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L444a90.  if v1 == 0 then goto L444a9c;
  #L444a94.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L444a9a.  goto L444aa2;
  #L444a9c.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L444aa2.  return @kind void;
  #L444aa4.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L444aa8.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L444aae.  v5:= temp @kind object;
  #L444ab0.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L444ab4.  if v5 == 0 then goto L444acc;
  #L444ab8.  v1:= v10.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L444abc.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L444ac2.  v1:= temp @kind object;
  #L444ac4.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L444aca.  return @kind void;
  #L444acc.  if v3 == 0 then goto L444ad8;
  #L444ad0.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L444ad6.  return @kind void;
  #L444ad8.  v3:= v10.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L444adc.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L444ae2.  v3:= temp @kind object;
  #L444ae4.  v3:= (`io.reactivex.internal.operators.observable.ObservableSwitchMap$a`) v3 @kind object;
  #L444ae8.  if v3 == 0 then goto L444be0;
  #L444aec.  v5:= v3.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L444af0.  v6:= v3.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.d` @type ^`boolean` @kind boolean;
  #L444af4.  v7:= 0I;
  #L444af6.  if v6 == 0 then goto L444b54;
  #L444afa.  call temp:= `isEmpty`(v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L444b00.  v6:= temp;
  #L444b02.  v8:= v10.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L444b06.  if v8 == 0 then goto L444b1a;
  #L444b0a.  if v6 == 0 then goto L444b54;
  #L444b0e.  v4:= v10.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L444b12.  call temp:= `compareAndSet`(v4, v3, v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L444b18.  goto L444a4a;
  #L444b1a.  v8:= v10.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L444b1e.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L444b24.  v8:= temp @kind object;
  #L444b26.  v8:= (`java.lang.Throwable`) v8 @kind object;
  #L444b2a.  if v8 == 0 then goto L444b42;
  #L444b2e.  v1:= v10.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L444b32.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L444b38.  v1:= temp @kind object;
  #L444b3a.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L444b40.  return @kind void;
  #L444b42.  if v6 == 0 then goto L444b54;
  #L444b46.  v4:= v10.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L444b4a.  call temp:= `compareAndSet`(v4, v3, v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L444b50.  goto L444a4a;
  #L444b54.  v6:= v10.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L444b58.  if v6 == 0 then goto L444b5e;
  #L444b5c.  return @kind void;
  #L444b5e.  v6:= v10.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L444b62.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L444b68.  v6:= temp @kind object;
  #L444b6a.  if v3 == v6 then goto L444b72;
  #L444b6e.  v4:= 1I;
  #L444b70.  goto L444bd0;
  #L444b72.  v6:= v10.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L444b76.  if v6 != 0 then goto L444ba2;
  #L444b7a.  v6:= v10.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L444b7e.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L444b84.  v6:= temp @kind object;
  #L444b86.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L444b8a.  if v6 == 0 then goto L444ba2;
  #L444b8e.  v1:= v10.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L444b92.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L444b98.  v1:= temp @kind object;
  #L444b9a.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L444ba0.  return @kind void;
  #L444ba2.  v6:= v3.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.d` @type ^`boolean` @kind boolean;
  #L444ba6.  call temp:= `poll`(v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L444bac.  v8:= temp @kind object;
  #L444bae.  if v8 != 0 then goto L444bb6;
  #L444bb2.  v9:= 1I;
  #L444bb4.  goto L444bb8;
  #L444bb6.  v9:= 0I;
  #L444bb8.  if v6 == 0 then goto L444bcc;
  #L444bbc.  if v9 == 0 then goto L444bcc;
  #L444bc0.  v4:= v10.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L444bc4.  call temp:= `compareAndSet`(v4, v3, v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L444bca.  goto L444b6e;
  #L444bcc.  if v9 == 0 then goto L444bd8;
  #L444bd0.  if v4 == 0 then goto L444be0;
  #L444bd4.  goto L444a4a;
  #L444bd8.  call `onNext`(v0, v8) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L444bde.  goto L444b54;
  #L444be0.  v2:= -v2 @kind int;
  #L444be2.  call temp:= `addAndGet`(v10, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L444be8.  v2:= temp;
  #L444bea.  if v2 != 0 then goto L444a4a;
  #L444bee.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` v5 @kind this, `io.reactivex.internal.operators.observable.ObservableSwitchMap$a` v6 @kind object, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.c:(Lio/reactivex/internal/operators/observable/ObservableSwitchMap$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L444c00.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.b` @type ^`long` @kind wide;
  #L444c04.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.j` @type ^`long` @kind wide;
  #L444c08.  v4:= lcmp(v0, v2);
  #L444c0c.  if v4 != 0 then goto L444c40;
  #L444c10.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L444c14.  call temp:= `addThrowable`(v0, v7) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L444c1a.  v0:= temp;
  #L444c1c.  if v0 == 0 then goto L444c40;
  #L444c20.  v7:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L444c24.  if v7 != 0 then goto L444c32;
  #L444c28.  v7:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L444c2c.  call `dispose`(v7) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L444c32.  v7:= 1I;
  #L444c34.  v6.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.d` @type ^`boolean` := v7 @kind boolean;
  #L444c38.  call `b`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.b:()V` @kind virtual;
  #L444c3e.  goto L444c46;
  #L444c40.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L444c46.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4449bc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L4449c0.  if v0 != 0 then goto L4449da;
  #L4449c4.  v0:= 1I;
  #L4449c6.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.g` @type ^`boolean` := v0 @kind boolean;
  #L4449ca.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4449ce.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4449d4.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.a:()V` @kind virtual;
  #L4449da.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444930.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L444934.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444c58.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.f` @type ^`boolean` @kind boolean;
  #L444c5c.  if v0 != 0 then goto L444c6c;
  #L444c60.  v0:= 1I;
  #L444c62.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.f` @type ^`boolean` := v0 @kind boolean;
  #L444c66.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.b:()V` @kind virtual;
  #L444c6c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444c80.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.f` @type ^`boolean` @kind boolean;
  #L444c84.  if v0 != 0 then goto L444ca8;
  #L444c88.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L444c8c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L444c92.  v0:= temp;
  #L444c94.  if v0 != 0 then goto L444c9a;
  #L444c98.  goto L444ca8;
  #L444c9a.  v2:= 1I;
  #L444c9c.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.f` @type ^`boolean` := v2 @kind boolean;
  #L444ca0.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.b:()V` @kind virtual;
  #L444ca6.  return @kind void;
  #L444ca8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L444cac.  if v0 != 0 then goto L444cb6;
  #L444cb0.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.a:()V` @kind virtual;
  #L444cb6.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L444cbc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L444cd0.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.j` @type ^`long` @kind wide;
  #L444cd4.  v2:= 1L;
  #L444cd8.  v0:= v0 + v2 @kind long;
  #L444cda.  v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.j` @type ^`long` := v0 @kind wide;
  #L444cde.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L444ce2.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L444ce8.  v2:= temp @kind object;
  #L444cea.  v2:= (`io.reactivex.internal.operators.observable.ObservableSwitchMap$a`) v2 @kind object;
  #L444cee.  if v2 == 0 then goto L444cf8;
  #L444cf2.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$a;.a:()V` @kind virtual;
  #L444cf8.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L444cfc.  call temp:= `apply`(v2, v5) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L444d02.  v5:= temp @kind object;
  #L444d04.  v2:= "The ObservableSource returned is null" @kind object;
  #L444d08.  call temp:= `requireNonNull`(v5, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L444d0e.  v5:= temp @kind object;
  #L444d10.  v5:= (`io.reactivex.ObservableSource`) v5 @kind object;
  #L444d14.  v2:= new `io.reactivex.internal.operators.observable.ObservableSwitchMap$a`;
  #L444d18.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.c` @type ^`int`;
  #L444d1c.  call `<init>`(v2, v4, v0, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;JI)V` @kind direct;
  #L444d22.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L444d26.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L444d2c.  v0:= temp @kind object;
  #L444d2e.  v0:= (`io.reactivex.internal.operators.observable.ObservableSwitchMap$a`) v0 @kind object;
  #L444d32.  v1:= `@@io.reactivex.internal.operators.observable.ObservableSwitchMap$b.k` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$a` @kind object;
  #L444d36.  if v0 != v1 then goto L444d3c;
  #L444d3a.  goto L444d52;
  #L444d3c.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L444d40.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L444d46.  v0:= temp;
  #L444d48.  if v0 == 0 then goto L444d22;
  #L444d4c.  call `subscribe`(v5, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L444d52.  return @kind void;
  #L444d54.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L444d56.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L444d5c.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L444d60.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L444d66.  call `onError`(v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L444d6c.  return @kind void;
  catch `java.lang.Throwable` @[L444cf8..L444d14] goto L444d54;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444d8c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L444d90.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L444d96.  v0:= temp;
  #L444d98.  if v0 == 0 then goto L444daa;
  #L444d9c.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.h` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L444da0.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L444da4.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L444daa.  return @kind void;
}
