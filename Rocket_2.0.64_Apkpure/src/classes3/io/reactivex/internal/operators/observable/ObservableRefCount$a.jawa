record `io.reactivex.internal.operators.observable.ObservableRefCount$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableRefCount$a.a` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.observable.ObservableRefCount$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableRefCount$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableRefCount` `io.reactivex.internal.operators.observable.ObservableRefCount$a.d` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRefCount$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRefCount$a` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableRefCount` v1 @kind object, `io.reactivex.Observer` v2 @kind object, `io.reactivex.disposables.CompositeDisposable` v3 @kind object, `io.reactivex.disposables.Disposable` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableRefCount;Lio/reactivex/Observer;Lio/reactivex/disposables/CompositeDisposable;Lio/reactivex/disposables/Disposable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L440248.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount$a.d` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` := v1 @kind object;
  #L44024c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L440252.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount$a.a` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L440256.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount$a.b` @type ^`io.reactivex.disposables.CompositeDisposable` := v3 @kind object;
  #L44025a.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount$a.c` @type ^`io.reactivex.disposables.Disposable` := v4 @kind object;
  #L44025e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableRefCount$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L440270.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$a.d` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L440274.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableRefCount.d` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L440278.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantLock;.lock:()V` @kind virtual;
  #L44027e.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$a.d` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L440282.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableRefCount.b` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L440286.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$a.b` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L44028a.  if v0 != v1 then goto L4402d8;
  #L44028e.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$a.d` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L440292.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableRefCount.a` @type ^`io.reactivex.observables.ConnectableObservable` @kind object;
  #L440296.  v1:= instanceof @variable v0 @type ^`io.reactivex.disposables.Disposable` @kind boolean;
  #L44029a.  if v1 == 0 then goto L4402a8;
  #L44029e.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L4402a2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4402a8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$a.d` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L4402ac.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableRefCount.b` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4402b0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4402b6.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$a.d` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L4402ba.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L4402be.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4402c4.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount.b` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L4402c8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$a.d` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L4402cc.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableRefCount.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4402d0.  v1:= 0I;
  #L4402d2.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L4402d8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$a.d` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L4402dc.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableRefCount.d` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L4402e0.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantLock;.unlock:()V` @kind virtual;
  #L4402e6.  return @kind void;
  #L4402e8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4402ea.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$a.d` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L4402ee.  v1:= v1.`io.reactivex.internal.operators.observable.ObservableRefCount.d` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L4402f2.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantLock;.unlock:()V` @kind virtual;
  #L4402f8.  throw v0;
  catch `java.lang.Throwable` @[L44027e..L4402d8] goto L4402e8;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableRefCount$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L440318.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44031e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRefCount$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L440322.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L440328.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableRefCount$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L440220.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L440226.  v0:= temp @kind object;
  #L440228.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L44022c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L440232.  v0:= temp;
  #L440234.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableRefCount$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44033c.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$a;.a:()V` @kind virtual;
  #L440342.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRefCount$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L440346.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L44034c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableRefCount$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L440360.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$a;.a:()V` @kind virtual;
  #L440366.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRefCount$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L44036a.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L440370.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableRefCount$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L440384.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRefCount$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L440388.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44038e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableRefCount$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4403a0.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4403a6.  return @kind void;
}
