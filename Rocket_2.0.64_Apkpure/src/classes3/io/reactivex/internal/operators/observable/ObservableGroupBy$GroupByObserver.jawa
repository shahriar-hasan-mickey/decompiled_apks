record `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.b` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.e` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.g` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.h` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.i` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L43bad4.  v0:= new `java.lang.Object`;
  #L43bad8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43bade.  `@@io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.i` @type ^`java.lang.Object` := v0 @kind object;
  #L43bae2.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object, `int` v5 , `boolean` v6 ) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L43baf4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L43bafa.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L43bafe.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L43bb04.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L43bb08.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.a` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L43bb0c.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.b` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L43bb10.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.c` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L43bb14.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.d` @type ^`int` := v5;
  #L43bb18.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.e` @type ^`boolean` := v6 @kind boolean;
  #L43bb1c.  v2:= new `java.util.concurrent.ConcurrentHashMap`;
  #L43bb20.  call `<init>`(v2) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L43bb26.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` := v2 @kind object;
  #L43bb2a.  v2:= 1I;
  #L43bb2c.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L43bb32.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.cancel:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43bb44.  if v2 == 0 then goto L43bb4a;
  #L43bb48.  goto L43bb4e;
  #L43bb4a.  v2:= `@@io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.i` @type ^`java.lang.Object` @kind object;
  #L43bb4e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` @kind object;
  #L43bb52.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43bb58.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43bb5e.  v2:= temp;
  #L43bb60.  if v2 != 0 then goto L43bb6e;
  #L43bb64.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43bb68.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43bb6e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43bb80.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L43bb84.  v1:= 0I;
  #L43bb86.  v2:= 1I;
  #L43bb88.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L43bb8e.  v0:= temp;
  #L43bb90.  if v0 == 0 then goto L43bbaa;
  #L43bb94.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43bb9a.  v0:= temp;
  #L43bb9c.  if v0 != 0 then goto L43bbaa;
  #L43bba0.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43bba4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43bbaa.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43bab4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L43bab8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L43babe.  v0:= temp;
  #L43bac0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43bbbc.  v0:= new `java.util.ArrayList`;
  #L43bbc0.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` @kind object;
  #L43bbc4.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L43bbca.  v1:= temp @kind object;
  #L43bbcc.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L43bbd2.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` @kind object;
  #L43bbd6.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L43bbdc.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43bbe2.  v0:= temp @kind object;
  #L43bbe4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43bbea.  v1:= temp;
  #L43bbec.  if v1 == 0 then goto L43bc04;
  #L43bbf0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43bbf6.  v1:= temp @kind object;
  #L43bbf8.  v1:= (`io.reactivex.internal.operators.observable.ObservableGroupBy$a`) v1 @kind object;
  #L43bbfc.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$a;.onComplete:()V` @kind virtual;
  #L43bc02.  goto L43bbe4;
  #L43bc04.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.a` @type ^`io.reactivex.Observer` @kind object;
  #L43bc08.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43bc0e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43bc20.  v0:= new `java.util.ArrayList`;
  #L43bc24.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` @kind object;
  #L43bc28.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L43bc2e.  v1:= temp @kind object;
  #L43bc30.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L43bc36.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` @kind object;
  #L43bc3a.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L43bc40.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43bc46.  v0:= temp @kind object;
  #L43bc48.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43bc4e.  v1:= temp;
  #L43bc50.  if v1 == 0 then goto L43bc68;
  #L43bc54.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43bc5a.  v1:= temp @kind object;
  #L43bc5c.  v1:= (`io.reactivex.internal.operators.observable.ObservableGroupBy$a`) v1 @kind object;
  #L43bc60.  call `onError`(v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43bc66.  goto L43bc48;
  #L43bc68.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.a` @type ^`io.reactivex.Observer` @kind object;
  #L43bc6c.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43bc72.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43bc84.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L43bc88.  call temp:= `apply`(v0, v5) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43bc8e.  v0:= temp @kind object;
  #L43bc90.  if v0 == 0 then goto L43bc98;
  #L43bc94.  v1:= v0 @kind object;
  #L43bc96.  goto L43bc9c;
  #L43bc98.  v1:= `@@io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.i` @type ^`java.lang.Object` @kind object;
  #L43bc9c.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` @kind object;
  #L43bca0.  call temp:= `get`(v2, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43bca6.  v2:= temp @kind object;
  #L43bca8.  v2:= (`io.reactivex.internal.operators.observable.ObservableGroupBy$a`) v2 @kind object;
  #L43bcac.  if v2 != 0 then goto L43bcec;
  #L43bcb0.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L43bcb4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L43bcba.  v2:= temp;
  #L43bcbc.  if v2 == 0 then goto L43bcc2;
  #L43bcc0.  return @kind void;
  #L43bcc2.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.d` @type ^`int`;
  #L43bcc6.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.e` @type ^`boolean` @kind boolean;
  #L43bcca.  call temp:= `d`(v0, v2, v4, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$a;.d:(Ljava/lang/Object;ILio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;Z)Lio/reactivex/internal/operators/observable/ObservableGroupBy$a;` @kind static;
  #L43bcd0.  v2:= temp @kind object;
  #L43bcd2.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` @kind object;
  #L43bcd6.  call temp:= `put`(v0, v1, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43bcdc.  call temp:= `getAndIncrement`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43bce2.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.a` @type ^`io.reactivex.Observer` @kind object;
  #L43bce6.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43bcec.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.c` @type ^`io.reactivex.functions.Function` @kind object;
  #L43bcf0.  call temp:= `apply`(v0, v5) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43bcf6.  v5:= temp @kind object;
  #L43bcf8.  v0:= "The value supplied is null" @kind object;
  #L43bcfc.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43bd02.  v5:= temp @kind object;
  #L43bd04.  call `onNext`(v2, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$a;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L43bd0a.  return @kind void;
  #L43bd0c.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43bd0e.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43bd14.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43bd18.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43bd1e.  call `onError`(v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43bd24.  return @kind void;
  #L43bd26.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43bd28.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43bd2e.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43bd32.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43bd38.  call `onError`(v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43bd3e.  return @kind void;
  catch `java.lang.Throwable` @[L43bc84..L43bc90] goto L43bd26;
  catch `java.lang.Throwable` @[L43bcec..L43bd04] goto L43bd0c;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43bd68.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43bd6c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43bd72.  v0:= temp;
  #L43bd74.  if v0 == 0 then goto L43bd86;
  #L43bd78.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.g` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L43bd7c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.a` @type ^`io.reactivex.Observer` @kind object;
  #L43bd80.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43bd86.  return @kind void;
}
