record `io.reactivex.internal.operators.observable.ObservableSubscribeOn$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableSubscribeOn$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableSubscribeOn$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSubscribeOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$a;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4445a8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4445ae.  v0.`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4445b2.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4445b6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4445bc.  v0.`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4445c0.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$a;.a:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag  {
    temp;

  #L444668.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L44466e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4445d4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4445d8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4445de.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4445e4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444580.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L444586.  v0:= temp @kind object;
  #L444588.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L44458c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L444592.  v0:= temp;
  #L444594.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4445f8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4445fc.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L444602.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444614.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L444618.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44461e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444630.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L444634.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44463a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44464c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L444650.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L444656.  return @kind void;
}
