record `io.reactivex.internal.operators.observable.ObservableCache$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.util.LinkedArrayList` @kind class, `io.reactivex.Observer` @kind interface {
  `io.reactivex.Observable` `io.reactivex.internal.operators.observable.ObservableCache$a.f` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableCache$a.g` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableCache$a.h` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableCache$a.i` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableCache$a.j` @AccessFlag ;
}
global `io.reactivex.internal.operators.observable.ObservableCache$b`[] `@@io.reactivex.internal.operators.observable.ObservableCache$a.k` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.observable.ObservableCache$b`[] `@@io.reactivex.internal.operators.observable.ObservableCache$a.l` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableCache$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L434eb8.  v0:= 0I;
  #L434eba.  v1:= new `io.reactivex.internal.operators.observable.ObservableCache$b`[v0];
  #L434ebe.  `@@io.reactivex.internal.operators.observable.ObservableCache$a.k` @type ^`io.reactivex.internal.operators.observable.ObservableCache$b`[] := v1 @kind object;
  #L434ec2.  v0:= new `io.reactivex.internal.operators.observable.ObservableCache$b`[v0];
  #L434ec6.  `@@io.reactivex.internal.operators.observable.ObservableCache$a.l` @type ^`io.reactivex.internal.operators.observable.ObservableCache$b`[] := v0 @kind object;
  #L434eca.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableCache$a` v0 @kind this, `io.reactivex.Observable` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$a;.<init>:(Lio/reactivex/Observable;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L434edc.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/util/LinkedArrayList;.<init>:(I)V` @kind direct;
  #L434ee2.  v0.`io.reactivex.internal.operators.observable.ObservableCache$a.f` @type ^`io.reactivex.Observable` := v1 @kind object;
  #L434ee6.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L434eea.  v2:= `@@io.reactivex.internal.operators.observable.ObservableCache$a.k` @type ^`io.reactivex.internal.operators.observable.ObservableCache$b`[] @kind object;
  #L434eee.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L434ef4.  v0.`io.reactivex.internal.operators.observable.ObservableCache$a.h` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L434ef8.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L434efc.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L434f02.  v0.`io.reactivex.internal.operators.observable.ObservableCache$a.g` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L434f06.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.observable.ObservableCache$a` v4 @kind this, `io.reactivex.internal.operators.observable.ObservableCache$b` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$a;.a:(Lio/reactivex/internal/operators/observable/ObservableCache$b;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L434e64.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableCache$a.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L434e68.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L434e6e.  v0:= temp @kind object;
  #L434e70.  v0:= (`io.reactivex.internal.operators.observable.ObservableCache$b`[]) v0 @kind object;
  #L434e74.  v1:= `@@io.reactivex.internal.operators.observable.ObservableCache$a.l` @type ^`io.reactivex.internal.operators.observable.ObservableCache$b`[] @kind object;
  #L434e78.  v2:= 0I;
  #L434e7a.  if v0 != v1 then goto L434e80;
  #L434e7e.  return v2;
  #L434e80.  v1:= length @variable v0;
  #L434e82.  v3:= v1 + 1;
  #L434e86.  v3:= new `io.reactivex.internal.operators.observable.ObservableCache$b`[v3];
  #L434e8a.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L434e90.  v3[v1]:= v5 @kind object;
  #L434e94.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableCache$a.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L434e98.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L434e9e.  v0:= temp;
  #L434ea0.  if v0 == 0 then goto L434e64;
  #L434ea4.  v5:= 1I;
  #L434ea6.  return v5;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableCache$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$a;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L434f18.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCache$a.f` @type ^`io.reactivex.Observable` @kind object;
  #L434f1c.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Observable;.subscribe:(Lio/reactivex/Observer;)V` @kind virtual;
  #L434f22.  v0:= 1I;
  #L434f24.  v1.`io.reactivex.internal.operators.observable.ObservableCache$a.i` @type ^`boolean` := v0 @kind boolean;
  #L434f28.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableCache$a` v6 @kind this, `io.reactivex.internal.operators.observable.ObservableCache$b` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$a;.c:(Lio/reactivex/internal/operators/observable/ObservableCache$b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L435070.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableCache$a.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L435074.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43507a.  v0:= temp @kind object;
  #L43507c.  v0:= (`io.reactivex.internal.operators.observable.ObservableCache$b`[]) v0 @kind object;
  #L435080.  v1:= length @variable v0;
  #L435082.  if v1 != 0 then goto L435088;
  #L435086.  return @kind void;
  #L435088.  v2:= -1I;
  #L43508a.  v3:= 0I;
  #L43508c.  v4:= 0I;
  #L43508e.  if v4 >= v1 then goto L4350ac;
  #L435092.  v5:= v0[v4] @kind object;
  #L435096.  call temp:= `equals`(v5, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L43509c.  v5:= temp;
  #L43509e.  if v5 == 0 then goto L4350a6;
  #L4350a2.  v2:= v4;
  #L4350a4.  goto L4350ac;
  #L4350a6.  v4:= v4 + 1;
  #L4350aa.  goto L43508e;
  #L4350ac.  if v2 >= 0 then goto L4350b2;
  #L4350b0.  return @kind void;
  #L4350b2.  v4:= 1I;
  #L4350b4.  if v1 != v4 then goto L4350be;
  #L4350b8.  v1:= `@@io.reactivex.internal.operators.observable.ObservableCache$a.k` @type ^`io.reactivex.internal.operators.observable.ObservableCache$b`[] @kind object;
  #L4350bc.  goto L4350dc;
  #L4350be.  v5:= v1 + -1;
  #L4350c2.  v5:= new `io.reactivex.internal.operators.observable.ObservableCache$b`[v5];
  #L4350c6.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4350cc.  v3:= v2 + 1;
  #L4350d0.  v1:= v1 - v2 @kind int;
  #L4350d2.  v1:= v1 - v4 @kind int;
  #L4350d4.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4350da.  v1:= v5 @kind object;
  #L4350dc.  v2:= v6.`io.reactivex.internal.operators.observable.ObservableCache$a.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4350e0.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4350e6.  v0:= temp;
  #L4350e8.  if v0 == 0 then goto L435070;
  #L4350ec.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableCache$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L434f3c.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableCache$a.j` @type ^`boolean` @kind boolean;
  #L434f40.  if v0 != 0 then goto L434f8e;
  #L434f44.  v0:= 1I;
  #L434f46.  v4.`io.reactivex.internal.operators.observable.ObservableCache$a.j` @type ^`boolean` := v0 @kind boolean;
  #L434f4a.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L434f50.  v0:= temp @kind object;
  #L434f52.  call `add`(v4, v0) @signature `Lio/reactivex/internal/util/LinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L434f58.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableCache$a.g` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L434f5c.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L434f62.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableCache$a.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L434f66.  v1:= `@@io.reactivex.internal.operators.observable.ObservableCache$a.l` @type ^`io.reactivex.internal.operators.observable.ObservableCache$b`[] @kind object;
  #L434f6a.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L434f70.  v0:= temp @kind object;
  #L434f72.  v0:= (`io.reactivex.internal.operators.observable.ObservableCache$b`[]) v0 @kind object;
  #L434f76.  v1:= length @variable v0;
  #L434f78.  v2:= 0I;
  #L434f7a.  if v2 >= v1 then goto L434f8e;
  #L434f7e.  v3:= v0[v2] @kind object;
  #L434f82.  call `a`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$b;.a:()V` @kind virtual;
  #L434f88.  v2:= v2 + 1;
  #L434f8c.  goto L434f7a;
  #L434f8e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableCache$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L434fa0.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableCache$a.j` @type ^`boolean` @kind boolean;
  #L434fa4.  if v0 != 0 then goto L434ff2;
  #L434fa8.  v0:= 1I;
  #L434faa.  v3.`io.reactivex.internal.operators.observable.ObservableCache$a.j` @type ^`boolean` := v0 @kind boolean;
  #L434fae.  call temp:= `error`(v4) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L434fb4.  v4:= temp @kind object;
  #L434fb6.  call `add`(v3, v4) @signature `Lio/reactivex/internal/util/LinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L434fbc.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableCache$a.g` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L434fc0.  call `dispose`(v4) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L434fc6.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableCache$a.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L434fca.  v0:= `@@io.reactivex.internal.operators.observable.ObservableCache$a.l` @type ^`io.reactivex.internal.operators.observable.ObservableCache$b`[] @kind object;
  #L434fce.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L434fd4.  v4:= temp @kind object;
  #L434fd6.  v4:= (`io.reactivex.internal.operators.observable.ObservableCache$b`[]) v4 @kind object;
  #L434fda.  v0:= length @variable v4;
  #L434fdc.  v1:= 0I;
  #L434fde.  if v1 >= v0 then goto L434ff2;
  #L434fe2.  v2:= v4[v1] @kind object;
  #L434fe6.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$b;.a:()V` @kind virtual;
  #L434fec.  v1:= v1 + 1;
  #L434ff0.  goto L434fde;
  #L434ff2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableCache$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L435004.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableCache$a.j` @type ^`boolean` @kind boolean;
  #L435008.  if v0 != 0 then goto L435042;
  #L43500c.  call temp:= `next`(v4) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L435012.  v4:= temp @kind object;
  #L435014.  call `add`(v3, v4) @signature `Lio/reactivex/internal/util/LinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L43501a.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableCache$a.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43501e.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L435024.  v4:= temp @kind object;
  #L435026.  v4:= (`io.reactivex.internal.operators.observable.ObservableCache$b`[]) v4 @kind object;
  #L43502a.  v0:= length @variable v4;
  #L43502c.  v1:= 0I;
  #L43502e.  if v1 >= v0 then goto L435042;
  #L435032.  v2:= v4[v1] @kind object;
  #L435036.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$b;.a:()V` @kind virtual;
  #L43503c.  v1:= v1 + 1;
  #L435040.  goto L43502e;
  #L435042.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableCache$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435054.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCache$a.g` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L435058.  call temp:= `update`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.update:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43505e.  return @kind void;
}
