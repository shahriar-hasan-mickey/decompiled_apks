record `io.reactivex.internal.operators.observable.ObservableGenerate$a` @kind class @AccessFlag FINAL extends `io.reactivex.Emitter` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableGenerate$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.observable.ObservableGenerate$a.b` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.observable.ObservableGenerate$a.c` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableGenerate$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableGenerate$a.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableGenerate$a.f` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableGenerate$a.g` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableGenerate$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/BiFunction;Lio/reactivex/functions/Consumer;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43b858.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43b85e.  v0.`io.reactivex.internal.operators.observable.ObservableGenerate$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L43b862.  v0.`io.reactivex.internal.operators.observable.ObservableGenerate$a.b` @type ^`io.reactivex.functions.BiFunction` := v2 @kind object;
  #L43b866.  v0.`io.reactivex.internal.operators.observable.ObservableGenerate$a.c` @type ^`io.reactivex.functions.Consumer` := v3 @kind object;
  #L43b86a.  v0.`io.reactivex.internal.operators.observable.ObservableGenerate$a.d` @type ^`java.lang.Object` := v4 @kind object;
  #L43b86e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableGenerate$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.a:(Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L43b898.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGenerate$a.c` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L43b89c.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L43b8a2.  goto L43b8b2;
  #L43b8a4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43b8a6.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43b8ac.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43b8b2.  return @kind void;
  catch `java.lang.Throwable` @[L43b898..L43b8a2] goto L43b8a4;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableGenerate$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43b9a4.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableGenerate$a.d` @type ^`java.lang.Object` @kind object;
  #L43b9a8.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableGenerate$a.e` @type ^`boolean` @kind boolean;
  #L43b9ac.  v2:= 0I;
  #L43b9ae.  if v1 == 0 then goto L43b9be;
  #L43b9b2.  v5.`io.reactivex.internal.operators.observable.ObservableGenerate$a.d` @type ^`java.lang.Object` := v2 @kind object;
  #L43b9b6.  call `a`(v5, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.a:(Ljava/lang/Object;)V` @kind direct;
  #L43b9bc.  return @kind void;
  #L43b9be.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableGenerate$a.b` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L43b9c2.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableGenerate$a.e` @type ^`boolean` @kind boolean;
  #L43b9c6.  if v3 == 0 then goto L43b9d6;
  #L43b9ca.  v5.`io.reactivex.internal.operators.observable.ObservableGenerate$a.d` @type ^`java.lang.Object` := v2 @kind object;
  #L43b9ce.  call `a`(v5, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.a:(Ljava/lang/Object;)V` @kind direct;
  #L43b9d4.  return @kind void;
  #L43b9d6.  v3:= 0I;
  #L43b9d8.  v5.`io.reactivex.internal.operators.observable.ObservableGenerate$a.g` @type ^`boolean` := v3 @kind boolean;
  #L43b9dc.  v3:= 1I;
  #L43b9de.  call temp:= `apply`(v1, v0, v5) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43b9e4.  v0:= temp @kind object;
  #L43b9e6.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableGenerate$a.f` @type ^`boolean` @kind boolean;
  #L43b9ea.  if v4 == 0 then goto L43b9c2;
  #L43b9ee.  v5.`io.reactivex.internal.operators.observable.ObservableGenerate$a.e` @type ^`boolean` := v3 @kind boolean;
  #L43b9f2.  v5.`io.reactivex.internal.operators.observable.ObservableGenerate$a.d` @type ^`java.lang.Object` := v2 @kind object;
  #L43b9f6.  call `a`(v5, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.a:(Ljava/lang/Object;)V` @kind direct;
  #L43b9fc.  return @kind void;
  #L43b9fe.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43ba00.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43ba06.  v5.`io.reactivex.internal.operators.observable.ObservableGenerate$a.d` @type ^`java.lang.Object` := v2 @kind object;
  #L43ba0a.  v5.`io.reactivex.internal.operators.observable.ObservableGenerate$a.e` @type ^`boolean` := v3 @kind boolean;
  #L43ba0e.  call `onError`(v5, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43ba14.  call `a`(v5, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.a:(Ljava/lang/Object;)V` @kind direct;
  #L43ba1a.  return @kind void;
  catch `java.lang.Throwable` @[L43b9de..L43b9e6] goto L43b9fe;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableGenerate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b880.  v0:= 1I;
  #L43b882.  v1.`io.reactivex.internal.operators.observable.ObservableGenerate$a.e` @type ^`boolean` := v0 @kind boolean;
  #L43b886.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableGenerate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b840.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGenerate$a.e` @type ^`boolean` @kind boolean;
  #L43b844.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableGenerate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b8d0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGenerate$a.f` @type ^`boolean` @kind boolean;
  #L43b8d4.  if v0 != 0 then goto L43b8e8;
  #L43b8d8.  v0:= 1I;
  #L43b8da.  v1.`io.reactivex.internal.operators.observable.ObservableGenerate$a.f` @type ^`boolean` := v0 @kind boolean;
  #L43b8de.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGenerate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43b8e2.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43b8e8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableGenerate$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b8fc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGenerate$a.f` @type ^`boolean` @kind boolean;
  #L43b900.  if v0 == 0 then goto L43b90c;
  #L43b904.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43b90a.  goto L43b92e;
  #L43b90c.  if v2 != 0 then goto L43b91e;
  #L43b910.  v2:= new `java.lang.NullPointerException`;
  #L43b914.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L43b918.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43b91e.  v0:= 1I;
  #L43b920.  v1.`io.reactivex.internal.operators.observable.ObservableGenerate$a.f` @type ^`boolean` := v0 @kind boolean;
  #L43b924.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGenerate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43b928.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43b92e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableGenerate$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b940.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGenerate$a.f` @type ^`boolean` @kind boolean;
  #L43b944.  if v0 != 0 then goto L43b990;
  #L43b948.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGenerate$a.g` @type ^`boolean` @kind boolean;
  #L43b94c.  if v0 == 0 then goto L43b966;
  #L43b950.  v2:= new `java.lang.IllegalStateException`;
  #L43b954.  v0:= "onNext already called in this generate turn" @kind object;
  #L43b958.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43b95e.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43b964.  goto L43b990;
  #L43b966.  if v2 != 0 then goto L43b980;
  #L43b96a.  v2:= new `java.lang.NullPointerException`;
  #L43b96e.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L43b972.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43b978.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43b97e.  goto L43b990;
  #L43b980.  v0:= 1I;
  #L43b982.  v1.`io.reactivex.internal.operators.observable.ObservableGenerate$a.g` @type ^`boolean` := v0 @kind boolean;
  #L43b986.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGenerate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43b98a.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43b990.  return @kind void;
}
