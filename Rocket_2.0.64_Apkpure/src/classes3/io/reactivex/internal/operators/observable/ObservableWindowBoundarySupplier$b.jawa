record `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.QueueDrainObserver` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.c` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.d` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.e` @AccessFlag FINAL;
  `io.reactivex.subjects.UnicastSubject` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.f` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.g` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.h` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L44827c.  v0:= new `java.lang.Object`;
  #L448280.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L448286.  `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.h` @type ^`java.lang.Object` := v0 @kind object;
  #L44828a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.<init>:(Lio/reactivex/Observer;Ljava/util/concurrent/Callable;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L44829c.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L4482a0.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4482a6.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L4482ac.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4482b0.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4482b6.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4482ba.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4482be.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4482c4.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.g` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L4482c8.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.b` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L4482cc.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.c` @type ^`int` := v4;
  #L4482d0.  v3:= 1L;
  #L4482d4.  call `lazySet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L4482da.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` v10 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L448304.  v0:= v10.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L448308.  v0:= (`io.reactivex.internal.queue.MpscLinkedQueue`) v0 @kind object;
  #L44830c.  v1:= v10.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L448310.  v2:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.f` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L448314.  v3:= 1I;
  #L448316.  v4:= 1I;
  #L448318.  v5:= v10.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` @kind boolean;
  #L44831c.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L448322.  v6:= temp @kind object;
  #L448324.  if v6 != 0 then goto L44832c;
  #L448328.  v7:= 1I;
  #L44832a.  goto L44832e;
  #L44832c.  v7:= 0I;
  #L44832e.  if v5 == 0 then goto L448358;
  #L448332.  if v7 == 0 then goto L448358;
  #L448336.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44833a.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L448340.  v0:= v10.`io.reactivex.internal.observers.QueueDrainObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L448344.  if v0 == 0 then goto L448350;
  #L448348.  call `onError`(v2, v0) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44834e.  goto L448356;
  #L448350.  call `onComplete`(v2) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L448356.  return @kind void;
  #L448358.  if v7 == 0 then goto L44836c;
  #L44835c.  v4:= -v4 @kind int;
  #L44835e.  call temp:= `leave`(v10, v4) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L448364.  v4:= temp;
  #L448366.  if v4 != 0 then goto L448318;
  #L44836a.  return @kind void;
  #L44836c.  v5:= `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.h` @type ^`java.lang.Object` @kind object;
  #L448370.  if v6 != v5 then goto L44842a;
  #L448374.  call `onComplete`(v2) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L44837a.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44837e.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L448384.  v5:= temp @kind wide;
  #L448386.  v7:= 0L;
  #L44838a.  v9:= lcmp(v5, v7);
  #L44838e.  if v9 != 0 then goto L44839e;
  #L448392.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L448396.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44839c.  return @kind void;
  #L44839e.  v5:= v10.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4483a2.  if v5 == 0 then goto L4483a8;
  #L4483a6.  goto L448318;
  #L4483a8.  v2:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L4483ac.  call temp:= `call`(v2) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L4483b2.  v2:= temp @kind object;
  #L4483b4.  v5:= "The ObservableSource supplied is null" @kind object;
  #L4483b8.  call temp:= `requireNonNull`(v2, v5) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4483be.  v2:= temp @kind object;
  #L4483c0.  v2:= (`io.reactivex.ObservableSource`) v2 @kind object;
  #L4483c4.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.c` @type ^`int`;
  #L4483c8.  call temp:= `create`(v5) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L4483ce.  v5:= temp @kind object;
  #L4483d0.  v6:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4483d4.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndIncrement:()J` @kind virtual;
  #L4483da.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.f` @type ^`io.reactivex.subjects.UnicastSubject` := v5 @kind object;
  #L4483de.  call `onNext`(v1, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4483e4.  v6:= new `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a`;
  #L4483e8.  call `<init>`(v6, v10) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;)V` @kind direct;
  #L4483ee.  v7:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4483f2.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4483f8.  v8:= temp @kind object;
  #L4483fa.  call temp:= `compareAndSet`(v7, v8, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L448400.  v7:= temp;
  #L448402.  if v7 == 0 then goto L44840c;
  #L448406.  call `subscribe`(v2, v6) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L44840c.  v2:= v5 @kind object;
  #L44840e.  goto L448318;
  #L448410.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L448412.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L448418.  v2:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44841c.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L448422.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L448428.  return @kind void;
  #L44842a.  call temp:= `getValue`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L448430.  v5:= temp @kind object;
  #L448432.  call `onNext`(v2, v5) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L448438.  goto L448318;
  catch `java.lang.Throwable` @[L4483a8..L4483c4] goto L448410;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L448458.  v0:= v2.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L44845c.  v1:= `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.h` @type ^`java.lang.Object` @kind object;
  #L448460.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L448466.  call temp:= `enter`(v2) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L44846c.  v0:= temp;
  #L44846e.  if v0 == 0 then goto L448478;
  #L448472.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.a:()V` @kind virtual;
  #L448478.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4482ec.  v0:= 1I;
  #L4482ee.  v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L4482f2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L448264.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L448268.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44848c.  v0:= v5.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` @kind boolean;
  #L448490.  if v0 == 0 then goto L448496;
  #L448494.  return @kind void;
  #L448496.  v0:= 1I;
  #L448498.  v5.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L44849c.  call temp:= `enter`(v5) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L4484a2.  v0:= temp;
  #L4484a4.  if v0 == 0 then goto L4484ae;
  #L4484a8.  call `a`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.a:()V` @kind virtual;
  #L4484ae.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4484b2.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L4484b8.  v0:= temp @kind wide;
  #L4484ba.  v2:= 0L;
  #L4484be.  v4:= lcmp(v0, v2);
  #L4484c2.  if v4 != 0 then goto L4484d0;
  #L4484c6.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4484ca.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4484d0.  v0:= v5.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L4484d4.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4484da.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4484ec.  v0:= v5.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` @kind boolean;
  #L4484f0.  if v0 == 0 then goto L4484fc;
  #L4484f4.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4484fa.  return @kind void;
  #L4484fc.  v5.`io.reactivex.internal.observers.QueueDrainObserver.error` @type ^`java.lang.Throwable` := v6 @kind object;
  #L448500.  v0:= 1I;
  #L448502.  v5.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L448506.  call temp:= `enter`(v5) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L44850c.  v0:= temp;
  #L44850e.  if v0 == 0 then goto L448518;
  #L448512.  call `a`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.a:()V` @kind virtual;
  #L448518.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44851c.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L448522.  v0:= temp @kind wide;
  #L448524.  v2:= 0L;
  #L448528.  v4:= lcmp(v0, v2);
  #L44852c.  if v4 != 0 then goto L44853a;
  #L448530.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L448534.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44853a.  v0:= v5.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L44853e.  call `onError`(v0, v6) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L448544.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L448558.  call temp:= `fastEnter`(v1) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastEnter:()Z` @kind virtual;
  #L44855e.  v0:= temp;
  #L448560.  if v0 == 0 then goto L44857e;
  #L448564.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.f` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L448568.  call `onNext`(v0, v2) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L44856e.  v2:= -1I;
  #L448570.  call temp:= `leave`(v1, v2) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L448576.  v2:= temp;
  #L448578.  if v2 != 0 then goto L44859e;
  #L44857c.  return @kind void;
  #L44857e.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L448582.  call temp:= `next`(v2) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L448588.  v2:= temp @kind object;
  #L44858a.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L448590.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L448596.  v2:= temp;
  #L448598.  if v2 != 0 then goto L44859e;
  #L44859c.  return @kind void;
  #L44859e.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.a:()V` @kind virtual;
  #L4485a4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` v3 @kind this, `io.reactivex.disposables.Disposable` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4485b8.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4485bc.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4485c2.  v0:= temp;
  #L4485c4.  if v0 == 0 then goto L448654;
  #L4485c8.  v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.d` @type ^`io.reactivex.disposables.Disposable` := v4 @kind object;
  #L4485cc.  v0:= v3.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L4485d0.  call `onSubscribe`(v0, v3) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4485d6.  v1:= v3.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4485da.  if v1 == 0 then goto L4485e0;
  #L4485de.  return @kind void;
  #L4485e0.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L4485e4.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L4485ea.  v1:= temp @kind object;
  #L4485ec.  v2:= "The first window ObservableSource supplied is null" @kind object;
  #L4485f0.  call temp:= `requireNonNull`(v1, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4485f6.  v1:= temp @kind object;
  #L4485f8.  v1:= (`io.reactivex.ObservableSource`) v1 @kind object;
  #L4485fc.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.c` @type ^`int`;
  #L448600.  call temp:= `create`(v4) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L448606.  v4:= temp @kind object;
  #L448608.  v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.f` @type ^`io.reactivex.subjects.UnicastSubject` := v4 @kind object;
  #L44860c.  call `onNext`(v0, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L448612.  v4:= new `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a`;
  #L448616.  call `<init>`(v4, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;)V` @kind direct;
  #L44861c.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L448620.  v2:= 0I;
  #L448622.  call temp:= `compareAndSet`(v0, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L448628.  v0:= temp;
  #L44862a.  if v0 == 0 then goto L448654;
  #L44862e.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L448632.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndIncrement:()J` @kind virtual;
  #L448638.  call `subscribe`(v1, v4) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L44863e.  goto L448654;
  #L448640.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L448642.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L448648.  call `dispose`(v4) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44864e.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L448654.  return @kind void;
  catch `java.lang.Throwable` @[L4485e0..L4485fc] goto L448640;
}
