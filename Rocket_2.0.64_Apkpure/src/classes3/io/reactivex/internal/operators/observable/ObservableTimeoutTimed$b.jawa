record `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.d` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.e` @AccessFlag ;
  `long` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.f` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.g` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler$Worker` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$b;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L446480.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L446486.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L44648a.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.b` @type ^`long` := v2 @kind wide;
  #L44648e.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L446492.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.d` @type ^`io.reactivex.Scheduler$Worker` := v5 @kind object;
  #L446496.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$b;.a:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4465b4.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4465ba.  v0:= temp @kind object;
  #L4465bc.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L4465c0.  if v0 == 0 then goto L4465ca;
  #L4465c4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4465ca.  v1:= `@@io.reactivex.internal.operators.observable.ObservableTimeoutTimed.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4465ce.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4465d4.  v0:= temp;
  #L4465d6.  if v0 == 0 then goto L4465fe;
  #L4465da.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4465de.  v1:= new `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b$a`;
  #L4465e2.  call `<init>`(v1, v3, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$b$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$b;J)V` @kind direct;
  #L4465e8.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.b` @type ^`long` @kind wide;
  #L4465ec.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4465f0.  call temp:= `schedule`(v0, v1, v4, v2) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L4465f6.  v4:= temp @kind object;
  #L4465f8.  call temp:= `replace`(v3, v4) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4465fe.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4464a8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4464ac.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4464b2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4464b6.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4464bc.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L446460.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L446464.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L44646a.  v0:= temp;
  #L44646c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4464d0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.g` @type ^`boolean` @kind boolean;
  #L4464d4.  if v0 == 0 then goto L4464da;
  #L4464d8.  return @kind void;
  #L4464da.  v0:= 1I;
  #L4464dc.  v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.g` @type ^`boolean` := v0 @kind boolean;
  #L4464e0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L4464e4.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4464ea.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$b;.dispose:()V` @kind virtual;
  #L4464f0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L446504.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.g` @type ^`boolean` @kind boolean;
  #L446508.  if v0 == 0 then goto L446514;
  #L44650c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L446512.  return @kind void;
  #L446514.  v0:= 1I;
  #L446516.  v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.g` @type ^`boolean` := v0 @kind boolean;
  #L44651a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L44651e.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L446524.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$b;.dispose:()V` @kind virtual;
  #L44652a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44653c.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.g` @type ^`boolean` @kind boolean;
  #L446540.  if v0 == 0 then goto L446546;
  #L446544.  return @kind void;
  #L446546.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.f` @type ^`long` @kind wide;
  #L44654a.  v2:= 1L;
  #L44654e.  v0:= v0 + v2 @kind long;
  #L446550.  v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.f` @type ^`long` := v0 @kind wide;
  #L446554.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L446558.  call `onNext`(v2, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44655e.  call `a`(v4, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$b;.a:(J)V` @kind virtual;
  #L446564.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L446578.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L44657c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L446582.  v0:= temp;
  #L446584.  if v0 == 0 then goto L4465a0;
  #L446588.  v2.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.e` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L44658c.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L446590.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L446596.  v0:= 0L;
  #L44659a.  call `a`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$b;.a:(J)V` @kind virtual;
  #L4465a0.  return @kind void;
}
