record `io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicFuseableObserver` @kind class {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinctUntilChanged$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43831c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L438322.  v0.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.a` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L438326.  v0.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.b` @type ^`io.reactivex.functions.BiPredicate` := v3 @kind object;
  #L43832a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinctUntilChanged$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43833c.  v0:= v3.`io.reactivex.internal.observers.BasicFuseableObserver.done` @type ^`boolean` @kind boolean;
  #L438340.  if v0 == 0 then goto L438346;
  #L438344.  return @kind void;
  #L438346.  v0:= v3.`io.reactivex.internal.observers.BasicFuseableObserver.sourceMode` @type ^`int`;
  #L43834a.  if v0 == 0 then goto L43835a;
  #L43834e.  v0:= v3.`io.reactivex.internal.observers.BasicFuseableObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L438352.  call `onNext`(v0, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L438358.  return @kind void;
  #L43835a.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.a` @type ^`io.reactivex.functions.Function` @kind object;
  #L43835e.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L438364.  v0:= temp @kind object;
  #L438366.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.d` @type ^`boolean` @kind boolean;
  #L43836a.  if v1 == 0 then goto L438388;
  #L43836e.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.b` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L438372.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @type ^`java.lang.Object` @kind object;
  #L438376.  call temp:= `test`(v1, v2, v0) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L43837c.  v1:= temp;
  #L43837e.  v3.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v0 @kind object;
  #L438382.  if v1 == 0 then goto L438392;
  #L438386.  return @kind void;
  #L438388.  v1:= 1I;
  #L43838a.  v3.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.d` @type ^`boolean` := v1 @kind boolean;
  #L43838e.  v3.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v0 @kind object;
  #L438392.  v0:= v3.`io.reactivex.internal.observers.BasicFuseableObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L438396.  call `onNext`(v0, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43839c.  return @kind void;
  #L43839e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4383a0.  call `fail`(v3, v4) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4383a6.  return @kind void;
  catch `java.lang.Throwable` @[L43835a..L438392] goto L43839e;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinctUntilChanged$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4382b8.  v0:= v4.`io.reactivex.internal.observers.BasicFuseableObserver.qs` @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind object;
  #L4382bc.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4382c2.  v0:= temp @kind object;
  #L4382c4.  if v0 != 0 then goto L4382cc;
  #L4382c8.  v0:= 0I;
  #L4382ca.  return v0 @kind object;
  #L4382cc.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.a` @type ^`io.reactivex.functions.Function` @kind object;
  #L4382d0.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4382d6.  v1:= temp @kind object;
  #L4382d8.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.d` @type ^`boolean` @kind boolean;
  #L4382dc.  if v2 != 0 then goto L4382ec;
  #L4382e0.  v2:= 1I;
  #L4382e2.  v4.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.d` @type ^`boolean` := v2 @kind boolean;
  #L4382e6.  v4.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4382ea.  return v0 @kind object;
  #L4382ec.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.b` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L4382f0.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @type ^`java.lang.Object` @kind object;
  #L4382f4.  call temp:= `test`(v2, v3, v1) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L4382fa.  v2:= temp;
  #L4382fc.  if v2 != 0 then goto L438306;
  #L438300.  v4.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L438304.  return v0 @kind object;
  #L438306.  v4.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L43830a.  goto L4382b8;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinctUntilChanged$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L43829c.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L4382a2.  v1:= temp;
  #L4382a4.  return v1;
}
