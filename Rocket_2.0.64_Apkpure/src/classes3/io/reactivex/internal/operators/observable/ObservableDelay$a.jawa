record `io.reactivex.internal.operators.observable.ObservableDelay$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableDelay$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableDelay$a.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableDelay$a.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.observable.ObservableDelay$a.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableDelay$a.e` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableDelay$a.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableDelay$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler$Worker` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/internal/operators/observable/ObservableDelay$a;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L437a80.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L437a86.  v0.`io.reactivex.internal.operators.observable.ObservableDelay$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L437a8a.  v0.`io.reactivex.internal.operators.observable.ObservableDelay$a.b` @type ^`long` := v2 @kind wide;
  #L437a8e.  v0.`io.reactivex.internal.operators.observable.ObservableDelay$a.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L437a92.  v0.`io.reactivex.internal.operators.observable.ObservableDelay$a.d` @type ^`io.reactivex.Scheduler$Worker` := v5 @kind object;
  #L437a96.  v0.`io.reactivex.internal.operators.observable.ObservableDelay$a.e` @type ^`boolean` := v6 @kind boolean;
  #L437a9a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableDelay$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDelay$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L437aac.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDelay$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L437ab0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L437ab6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDelay$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L437aba.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L437ac0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableDelay$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDelay$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L437a60.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDelay$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L437a64.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L437a6a.  v0:= temp;
  #L437a6c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableDelay$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDelay$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L437ad4.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableDelay$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L437ad8.  v1:= new `io.reactivex.internal.operators.observable.ObservableDelay$a$a`;
  #L437adc.  call `<init>`(v1, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableDelay$a$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableDelay$a;)V` @kind direct;
  #L437ae2.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableDelay$a.b` @type ^`long` @kind wide;
  #L437ae6.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableDelay$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L437aea.  call temp:= `schedule`(v0, v1, v2, v4) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L437af0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableDelay$a` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDelay$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L437b04.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableDelay$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L437b08.  v1:= new `io.reactivex.internal.operators.observable.ObservableDelay$a$b`;
  #L437b0c.  call `<init>`(v1, v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableDelay$a$b;.<init>:(Lio/reactivex/internal/operators/observable/ObservableDelay$a;Ljava/lang/Throwable;)V` @kind direct;
  #L437b12.  v5:= v4.`io.reactivex.internal.operators.observable.ObservableDelay$a.e` @type ^`boolean` @kind boolean;
  #L437b16.  if v5 == 0 then goto L437b20;
  #L437b1a.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableDelay$a.b` @type ^`long` @kind wide;
  #L437b1e.  goto L437b24;
  #L437b20.  v2:= 0L;
  #L437b24.  v5:= v4.`io.reactivex.internal.operators.observable.ObservableDelay$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L437b28.  call temp:= `schedule`(v0, v1, v2, v5) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L437b2e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableDelay$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDelay$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L437b40.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableDelay$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L437b44.  v1:= new `io.reactivex.internal.operators.observable.ObservableDelay$a$c`;
  #L437b48.  call `<init>`(v1, v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableDelay$a$c;.<init>:(Lio/reactivex/internal/operators/observable/ObservableDelay$a;Ljava/lang/Object;)V` @kind direct;
  #L437b4e.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableDelay$a.b` @type ^`long` @kind wide;
  #L437b52.  v5:= v4.`io.reactivex.internal.operators.observable.ObservableDelay$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L437b56.  call temp:= `schedule`(v0, v1, v2, v5) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L437b5c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableDelay$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDelay$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L437b70.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDelay$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L437b74.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L437b7a.  v0:= temp;
  #L437b7c.  if v0 == 0 then goto L437b8e;
  #L437b80.  v1.`io.reactivex.internal.operators.observable.ObservableDelay$a.f` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L437b84.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableDelay$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L437b88.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L437b8e.  return @kind void;
}
