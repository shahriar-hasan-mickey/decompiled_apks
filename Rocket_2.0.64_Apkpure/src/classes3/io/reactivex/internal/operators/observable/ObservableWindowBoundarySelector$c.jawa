record `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.QueueDrainObserver` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.b` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.d` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.e` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.f` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.g` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.i` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `io.reactivex.ObservableSource` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object, `int` v5 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.<init>:(Lio/reactivex/Observer;Lio/reactivex/ObservableSource;Lio/reactivex/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L447c40.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L447c44.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L447c4a.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L447c50.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L447c54.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L447c5a.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L447c5e.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L447c62.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L447c68.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.i` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L447c6c.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.b` @type ^`io.reactivex.ObservableSource` := v3 @kind object;
  #L447c70.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.c` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L447c74.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.d` @type ^`int` := v5;
  #L447c78.  v3:= new `io.reactivex.disposables.CompositeDisposable`;
  #L447c7c.  call `<init>`(v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L447c82.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.e` @type ^`io.reactivex.disposables.CompositeDisposable` := v3 @kind object;
  #L447c86.  v3:= new `java.util.ArrayList`;
  #L447c8a.  call `<init>`(v3) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L447c90.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.h` @type ^`java.util.List` := v3 @kind object;
  #L447c94.  v3:= 1L;
  #L447c98.  call `lazySet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L447c9e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` v3 @kind this, `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$a` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.a:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L447cc4.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L447cc8.  call temp:= `delete`(v0, v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L447cce.  v0:= v3.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L447cd2.  v1:= new `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$d`;
  #L447cd6.  v4:= v4.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$a.c` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L447cda.  v2:= 0I;
  #L447cdc.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$d;.<init>:(Lio/reactivex/subjects/UnicastSubject;Ljava/lang/Object;)V` @kind direct;
  #L447ce2.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L447ce8.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L447cee.  v4:= temp;
  #L447cf0.  if v4 == 0 then goto L447cfa;
  #L447cf4.  call `c`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.c:()V` @kind virtual;
  #L447cfa.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.accept:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L447cb0.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L447d24.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L447d28.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L447d2e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L447d32.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L447d38.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` v10 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L447d4c.  v0:= v10.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L447d50.  v0:= (`io.reactivex.internal.queue.MpscLinkedQueue`) v0 @kind object;
  #L447d54.  v1:= v10.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L447d58.  v2:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.h` @type ^`java.util.List` @kind object;
  #L447d5c.  v3:= 1I;
  #L447d5e.  v4:= 1I;
  #L447d60.  v5:= v10.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` @kind boolean;
  #L447d64.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L447d6a.  v6:= temp @kind object;
  #L447d6c.  if v6 != 0 then goto L447d74;
  #L447d70.  v7:= 1I;
  #L447d72.  goto L447d76;
  #L447d74.  v7:= 0I;
  #L447d76.  if v5 == 0 then goto L447de4;
  #L447d7a.  if v7 == 0 then goto L447de4;
  #L447d7e.  call `b`(v10) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.b:()V` @kind virtual;
  #L447d84.  v0:= v10.`io.reactivex.internal.observers.QueueDrainObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L447d88.  if v0 == 0 then goto L447db4;
  #L447d8c.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L447d92.  v1:= temp @kind object;
  #L447d94.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L447d9a.  v3:= temp;
  #L447d9c.  if v3 == 0 then goto L447ddc;
  #L447da0.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L447da6.  v3:= temp @kind object;
  #L447da8.  v3:= (`io.reactivex.subjects.UnicastSubject`) v3 @kind object;
  #L447dac.  call `onError`(v3, v0) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L447db2.  goto L447d94;
  #L447db4.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L447dba.  v0:= temp @kind object;
  #L447dbc.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L447dc2.  v1:= temp;
  #L447dc4.  if v1 == 0 then goto L447ddc;
  #L447dc8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L447dce.  v1:= temp @kind object;
  #L447dd0.  v1:= (`io.reactivex.subjects.UnicastSubject`) v1 @kind object;
  #L447dd4.  call `onComplete`(v1) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L447dda.  goto L447dbc;
  #L447ddc.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L447de2.  return @kind void;
  #L447de4.  if v7 == 0 then goto L447df8;
  #L447de8.  v4:= -v4 @kind int;
  #L447dea.  call temp:= `leave`(v10, v4) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L447df0.  v4:= temp;
  #L447df2.  if v4 != 0 then goto L447d60;
  #L447df6.  return @kind void;
  #L447df8.  v5:= instanceof @variable v6 @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$d` @kind boolean;
  #L447dfc.  if v5 == 0 then goto L447ec8;
  #L447e00.  v6:= (`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$d`) v6 @kind object;
  #L447e04.  v5:= v6.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$d.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L447e08.  if v5 == 0 then goto L447e42;
  #L447e0c.  call temp:= `remove`(v2, v5) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L447e12.  v5:= temp;
  #L447e14.  if v5 == 0 then goto L447d60;
  #L447e18.  v5:= v6.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$d.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L447e1c.  call `onComplete`(v5) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L447e22.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L447e26.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L447e2c.  v5:= temp @kind wide;
  #L447e2e.  v7:= 0L;
  #L447e32.  v9:= lcmp(v5, v7);
  #L447e36.  if v9 != 0 then goto L447d60;
  #L447e3a.  call `b`(v10) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.b:()V` @kind virtual;
  #L447e40.  return @kind void;
  #L447e42.  v5:= v10.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L447e46.  if v5 == 0 then goto L447e4c;
  #L447e4a.  goto L447d60;
  #L447e4c.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.d` @type ^`int`;
  #L447e50.  call temp:= `create`(v5) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L447e56.  v5:= temp @kind object;
  #L447e58.  call temp:= `add`(v2, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L447e5e.  call `onNext`(v1, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L447e64.  v7:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.c` @type ^`io.reactivex.functions.Function` @kind object;
  #L447e68.  v6:= v6.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$d.b` @type ^`java.lang.Object` @kind object;
  #L447e6c.  call temp:= `apply`(v7, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L447e72.  v6:= temp @kind object;
  #L447e74.  v7:= "The ObservableSource supplied is null" @kind object;
  #L447e78.  call temp:= `requireNonNull`(v6, v7) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L447e7e.  v6:= temp @kind object;
  #L447e80.  v6:= (`io.reactivex.ObservableSource`) v6 @kind object;
  #L447e84.  v7:= new `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$a`;
  #L447e88.  call `<init>`(v7, v10, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;Lio/reactivex/subjects/UnicastSubject;)V` @kind direct;
  #L447e8e.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L447e92.  call temp:= `add`(v5, v7) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L447e98.  v5:= temp;
  #L447e9a.  if v5 == 0 then goto L447d60;
  #L447e9e.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L447ea2.  call temp:= `getAndIncrement`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndIncrement:()J` @kind virtual;
  #L447ea8.  call `subscribe`(v6, v7) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L447eae.  goto L447d60;
  #L447eb2.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L447eb4.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L447eba.  v10.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v3 @kind boolean;
  #L447ebe.  call `onError`(v1, v5) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L447ec4.  goto L447d60;
  #L447ec8.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L447ece.  v5:= temp @kind object;
  #L447ed0.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L447ed6.  v7:= temp;
  #L447ed8.  if v7 == 0 then goto L447d60;
  #L447edc.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L447ee2.  v7:= temp @kind object;
  #L447ee4.  v7:= (`io.reactivex.subjects.UnicastSubject`) v7 @kind object;
  #L447ee8.  call temp:= `getValue`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L447eee.  v8:= temp @kind object;
  #L447ef0.  call `onNext`(v7, v8) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L447ef6.  goto L447ed0;
  catch `java.lang.Throwable` @[L447e64..L447e84] goto L447eb2;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.d:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L447f14.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L447f18.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L447f1e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L447f22.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L447f28.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L447f2e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L447d0c.  v0:= 1I;
  #L447d0e.  v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L447d12.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.e:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4480f8.  v0:= v3.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4480fc.  v1:= new `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$d`;
  #L448100.  v2:= 0I;
  #L448102.  call `<init>`(v1, v2, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$d;.<init>:(Lio/reactivex/subjects/UnicastSubject;Ljava/lang/Object;)V` @kind direct;
  #L448108.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L44810e.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L448114.  v4:= temp;
  #L448116.  if v4 == 0 then goto L448120;
  #L44811a.  call `c`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.c:()V` @kind virtual;
  #L448120.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L447c28.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L447c2c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L447f40.  v0:= v5.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` @kind boolean;
  #L447f44.  if v0 == 0 then goto L447f4a;
  #L447f48.  return @kind void;
  #L447f4a.  v0:= 1I;
  #L447f4c.  v5.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L447f50.  call temp:= `enter`(v5) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L447f56.  v0:= temp;
  #L447f58.  if v0 == 0 then goto L447f62;
  #L447f5c.  call `c`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.c:()V` @kind virtual;
  #L447f62.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L447f66.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L447f6c.  v0:= temp @kind wide;
  #L447f6e.  v2:= 0L;
  #L447f72.  v4:= lcmp(v0, v2);
  #L447f76.  if v4 != 0 then goto L447f84;
  #L447f7a.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L447f7e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L447f84.  v0:= v5.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L447f88.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L447f8e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L447fa0.  v0:= v5.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` @kind boolean;
  #L447fa4.  if v0 == 0 then goto L447fb0;
  #L447fa8.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L447fae.  return @kind void;
  #L447fb0.  v5.`io.reactivex.internal.observers.QueueDrainObserver.error` @type ^`java.lang.Throwable` := v6 @kind object;
  #L447fb4.  v0:= 1I;
  #L447fb6.  v5.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L447fba.  call temp:= `enter`(v5) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L447fc0.  v0:= temp;
  #L447fc2.  if v0 == 0 then goto L447fcc;
  #L447fc6.  call `c`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.c:()V` @kind virtual;
  #L447fcc.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L447fd0.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L447fd6.  v0:= temp @kind wide;
  #L447fd8.  v2:= 0L;
  #L447fdc.  v4:= lcmp(v0, v2);
  #L447fe0.  if v4 != 0 then goto L447fee;
  #L447fe4.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L447fe8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L447fee.  v0:= v5.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L447ff2.  call `onError`(v0, v6) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L447ff8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44800c.  call temp:= `fastEnter`(v2) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastEnter:()Z` @kind virtual;
  #L448012.  v0:= temp;
  #L448014.  if v0 == 0 then goto L448054;
  #L448018.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.h` @type ^`java.util.List` @kind object;
  #L44801c.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L448022.  v0:= temp @kind object;
  #L448024.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L44802a.  v1:= temp;
  #L44802c.  if v1 == 0 then goto L448044;
  #L448030.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L448036.  v1:= temp @kind object;
  #L448038.  v1:= (`io.reactivex.subjects.UnicastSubject`) v1 @kind object;
  #L44803c.  call `onNext`(v1, v3) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L448042.  goto L448024;
  #L448044.  v3:= -1I;
  #L448046.  call temp:= `leave`(v2, v3) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L44804c.  v3:= temp;
  #L44804e.  if v3 != 0 then goto L448074;
  #L448052.  return @kind void;
  #L448054.  v0:= v2.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L448058.  call temp:= `next`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44805e.  v3:= temp @kind object;
  #L448060.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L448066.  call temp:= `enter`(v2) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L44806c.  v3:= temp;
  #L44806e.  if v3 != 0 then goto L448074;
  #L448072.  return @kind void;
  #L448074.  call `c`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.c:()V` @kind virtual;
  #L44807a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44808c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L448090.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L448096.  v0:= temp;
  #L448098.  if v0 == 0 then goto L4480e4;
  #L44809c.  v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.f` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L4480a0.  v3:= v2.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L4480a4.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4480aa.  v3:= v2.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4480ae.  if v3 == 0 then goto L4480b4;
  #L4480b2.  return @kind void;
  #L4480b4.  v3:= new `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$b`;
  #L4480b8.  call `<init>`(v3, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$b;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;)V` @kind direct;
  #L4480be.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4480c2.  v1:= 0I;
  #L4480c4.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4480ca.  v0:= temp;
  #L4480cc.  if v0 == 0 then goto L4480e4;
  #L4480d0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4480d4.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndIncrement:()J` @kind virtual;
  #L4480da.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.b` @type ^`io.reactivex.ObservableSource` @kind object;
  #L4480de.  call `subscribe`(v0, v3) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4480e4.  return @kind void;
}
