record `io.reactivex.internal.operators.observable.ObservableSwitchMap` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.a` @kind class {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableSwitchMap.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableSwitchMap.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSwitchMap.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSwitchMap` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/functions/Function;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L444dbc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/a;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L444dc2.  v0.`io.reactivex.internal.operators.observable.ObservableSwitchMap.a` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L444dc6.  v0.`io.reactivex.internal.operators.observable.ObservableSwitchMap.b` @type ^`int` := v3;
  #L444dca.  v0.`io.reactivex.internal.operators.observable.ObservableSwitchMap.c` @type ^`boolean` := v4 @kind boolean;
  #L444dce.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableSwitchMap` v5 @kind this, `io.reactivex.Observer` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L444de0.  v0:= v5.`io.reactivex.internal.operators.observable.a.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L444de4.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap.a` @type ^`io.reactivex.functions.Function` @kind object;
  #L444de8.  call temp:= `tryScalarXMapSubscribe`(v0, v6, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap;.tryScalarXMapSubscribe:(Lio/reactivex/ObservableSource;Lio/reactivex/Observer;Lio/reactivex/functions/Function;)Z` @kind static;
  #L444dee.  v0:= temp;
  #L444df0.  if v0 == 0 then goto L444df6;
  #L444df4.  return @kind void;
  #L444df6.  v0:= v5.`io.reactivex.internal.operators.observable.a.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L444dfa.  v1:= new `io.reactivex.internal.operators.observable.ObservableSwitchMap$b`;
  #L444dfe.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap.a` @type ^`io.reactivex.functions.Function` @kind object;
  #L444e02.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap.b` @type ^`int`;
  #L444e06.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap.c` @type ^`boolean` @kind boolean;
  #L444e0a.  call `<init>`(v1, v6, v2, v3, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L444e10.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L444e16.  return @kind void;
}
