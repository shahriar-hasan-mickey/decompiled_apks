record `io.reactivex.internal.operators.observable.ObservableWindowTimed$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.QueueDrainObserver` @kind class, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `long` `io.reactivex.internal.operators.observable.ObservableWindowTimed$c.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindowTimed$c.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableWindowTimed$c.d` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.observable.ObservableWindowTimed$c.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableWindowTimed$c.f` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.internal.operators.observable.ObservableWindowTimed$c.g` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableWindowTimed$c.h` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowTimed$c.i` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$c` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `long` v3 , `long` v5 , `java.util.concurrent.TimeUnit` v7 @kind object, `io.reactivex.Scheduler$Worker` v8 @kind object, `int` v9 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.<init>:(Lio/reactivex/Observer;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L448fd0.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L448fd4.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L448fda.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L448fe0.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.b` @type ^`long` := v3 @kind wide;
  #L448fe4.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.c` @type ^`long` := v5 @kind wide;
  #L448fe8.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.d` @type ^`java.util.concurrent.TimeUnit` := v7 @kind object;
  #L448fec.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.e` @type ^`io.reactivex.Scheduler$Worker` := v8 @kind object;
  #L448ff0.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.f` @type ^`int` := v9;
  #L448ff4.  v2:= new `java.util.LinkedList`;
  #L448ff8.  call `<init>`(v2) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L448ffe.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.g` @type ^`java.util.List` := v2 @kind object;
  #L449002.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$c` v3 @kind this, `io.reactivex.subjects.UnicastSubject` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.a:(Lio/reactivex/subjects/UnicastSubject;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L449014.  v0:= v3.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L449018.  v1:= new `io.reactivex.internal.operators.observable.ObservableWindowTimed$c$b`;
  #L44901c.  v2:= 0I;
  #L44901e.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c$b;.<init>:(Lio/reactivex/subjects/UnicastSubject;Z)V` @kind direct;
  #L449024.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L44902a.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L449030.  v4:= temp;
  #L449032.  if v4 == 0 then goto L44903c;
  #L449036.  call `c`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.c:()V` @kind virtual;
  #L44903c.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L449068.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.e` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L44906c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L449072.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$c` v10 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L449084.  v0:= v10.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L449088.  v0:= (`io.reactivex.internal.queue.MpscLinkedQueue`) v0 @kind object;
  #L44908c.  v1:= v10.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L449090.  v2:= v10.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.g` @type ^`java.util.List` @kind object;
  #L449094.  v3:= 1I;
  #L449096.  v4:= 1I;
  #L449098.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.i` @type ^`boolean` @kind boolean;
  #L44909c.  if v5 == 0 then goto L4490be;
  #L4490a0.  v1:= v10.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4490a4.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4490aa.  call `b`(v10) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.b:()V` @kind virtual;
  #L4490b0.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L4490b6.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4490bc.  return @kind void;
  #L4490be.  v5:= v10.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` @kind boolean;
  #L4490c2.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4490c8.  v6:= temp @kind object;
  #L4490ca.  if v6 != 0 then goto L4490d2;
  #L4490ce.  v7:= 1I;
  #L4490d0.  goto L4490d4;
  #L4490d2.  v7:= 0I;
  #L4490d4.  v8:= instanceof @variable v6 @type ^`io.reactivex.internal.operators.observable.ObservableWindowTimed$c$b` @kind boolean;
  #L4490d8.  if v5 == 0 then goto L449150;
  #L4490dc.  if v7 != 0 then goto L4490e4;
  #L4490e0.  if v8 == 0 then goto L449150;
  #L4490e4.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L4490ea.  v0:= v10.`io.reactivex.internal.observers.QueueDrainObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L4490ee.  if v0 == 0 then goto L44911a;
  #L4490f2.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4490f8.  v1:= temp @kind object;
  #L4490fa.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L449100.  v3:= temp;
  #L449102.  if v3 == 0 then goto L449142;
  #L449106.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L44910c.  v3:= temp @kind object;
  #L44910e.  v3:= (`io.reactivex.subjects.UnicastSubject`) v3 @kind object;
  #L449112.  call `onError`(v3, v0) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L449118.  goto L4490fa;
  #L44911a.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L449120.  v0:= temp @kind object;
  #L449122.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L449128.  v1:= temp;
  #L44912a.  if v1 == 0 then goto L449142;
  #L44912e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L449134.  v1:= temp @kind object;
  #L449136.  v1:= (`io.reactivex.subjects.UnicastSubject`) v1 @kind object;
  #L44913a.  call `onComplete`(v1) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L449140.  goto L449122;
  #L449142.  call `b`(v10) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.b:()V` @kind virtual;
  #L449148.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L44914e.  return @kind void;
  #L449150.  if v7 == 0 then goto L449164;
  #L449154.  v4:= -v4 @kind int;
  #L449156.  call temp:= `leave`(v10, v4) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L44915c.  v4:= temp;
  #L44915e.  if v4 != 0 then goto L449098;
  #L449162.  return @kind void;
  #L449164.  if v8 == 0 then goto L4491e6;
  #L449168.  v6:= (`io.reactivex.internal.operators.observable.ObservableWindowTimed$c$b`) v6 @kind object;
  #L44916c.  v5:= v6.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c$b.b` @type ^`boolean` @kind boolean;
  #L449170.  if v5 == 0 then goto L4491b6;
  #L449174.  v5:= v10.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L449178.  if v5 == 0 then goto L44917e;
  #L44917c.  goto L449098;
  #L44917e.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.f` @type ^`int`;
  #L449182.  call temp:= `create`(v5) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L449188.  v5:= temp @kind object;
  #L44918a.  call temp:= `add`(v2, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L449190.  call `onNext`(v1, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L449196.  v6:= v10.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.e` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L44919a.  v7:= new `io.reactivex.internal.operators.observable.ObservableWindowTimed$c$a`;
  #L44919e.  call `<init>`(v7, v10, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;Lio/reactivex/subjects/UnicastSubject;)V` @kind direct;
  #L4491a4.  v8:= v10.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.b` @type ^`long` @kind wide;
  #L4491a8.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4491ac.  call temp:= `schedule`(v6, v7, v8, v5) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L4491b2.  goto L449098;
  #L4491b6.  v5:= v6.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c$b.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L4491ba.  call temp:= `remove`(v2, v5) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L4491c0.  v5:= v6.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c$b.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L4491c4.  call `onComplete`(v5) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4491ca.  call temp:= `isEmpty`(v2) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L4491d0.  v5:= temp;
  #L4491d2.  if v5 == 0 then goto L449098;
  #L4491d6.  v5:= v10.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4491da.  if v5 == 0 then goto L449098;
  #L4491de.  v10.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.i` @type ^`boolean` := v3 @kind boolean;
  #L4491e2.  goto L449098;
  #L4491e6.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4491ec.  v5:= temp @kind object;
  #L4491ee.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4491f4.  v7:= temp;
  #L4491f6.  if v7 == 0 then goto L449098;
  #L4491fa.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L449200.  v7:= temp @kind object;
  #L449202.  v7:= (`io.reactivex.subjects.UnicastSubject`) v7 @kind object;
  #L449206.  call `onNext`(v7, v6) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L44920c.  goto L4491ee;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L449050.  v0:= 1I;
  #L449052.  v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L449056.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L448fb8.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L448fbc.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L449220.  v0:= 1I;
  #L449222.  v1.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L449226.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L44922c.  v0:= temp;
  #L44922e.  if v0 == 0 then goto L449238;
  #L449232.  call `c`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.c:()V` @kind virtual;
  #L449238.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L44923c.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L449242.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.b:()V` @kind virtual;
  #L449248.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44925c.  v1.`io.reactivex.internal.observers.QueueDrainObserver.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L449260.  v0:= 1I;
  #L449262.  v1.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L449266.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L44926c.  v0:= temp;
  #L44926e.  if v0 == 0 then goto L449278;
  #L449272.  call `c`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.c:()V` @kind virtual;
  #L449278.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L44927c.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L449282.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.b:()V` @kind virtual;
  #L449288.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44929c.  call temp:= `fastEnter`(v2) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastEnter:()Z` @kind virtual;
  #L4492a2.  v0:= temp;
  #L4492a4.  if v0 == 0 then goto L4492e4;
  #L4492a8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.g` @type ^`java.util.List` @kind object;
  #L4492ac.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4492b2.  v0:= temp @kind object;
  #L4492b4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4492ba.  v1:= temp;
  #L4492bc.  if v1 == 0 then goto L4492d4;
  #L4492c0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4492c6.  v1:= temp @kind object;
  #L4492c8.  v1:= (`io.reactivex.subjects.UnicastSubject`) v1 @kind object;
  #L4492cc.  call `onNext`(v1, v3) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4492d2.  goto L4492b4;
  #L4492d4.  v3:= -1I;
  #L4492d6.  call temp:= `leave`(v2, v3) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L4492dc.  v3:= temp;
  #L4492de.  if v3 != 0 then goto L4492fc;
  #L4492e2.  return @kind void;
  #L4492e4.  v0:= v2.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4492e8.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4492ee.  call temp:= `enter`(v2) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L4492f4.  v3:= temp;
  #L4492f6.  if v3 != 0 then goto L4492fc;
  #L4492fa.  return @kind void;
  #L4492fc.  call `c`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.c:()V` @kind virtual;
  #L449302.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$c` v11 @kind this, `io.reactivex.disposables.Disposable` v12 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L449314.  v0:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L449318.  call temp:= `validate`(v0, v12) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L44931e.  v0:= temp;
  #L449320.  if v0 == 0 then goto L44938e;
  #L449324.  v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.h` @type ^`io.reactivex.disposables.Disposable` := v12 @kind object;
  #L449328.  v12:= v11.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L44932c.  call `onSubscribe`(v12, v11) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L449332.  v12:= v11.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L449336.  if v12 == 0 then goto L44933c;
  #L44933a.  return @kind void;
  #L44933c.  v12:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.f` @type ^`int`;
  #L449340.  call temp:= `create`(v12) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L449346.  v12:= temp @kind object;
  #L449348.  v0:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.g` @type ^`java.util.List` @kind object;
  #L44934c.  call temp:= `add`(v0, v12) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L449352.  v0:= v11.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L449356.  call `onNext`(v0, v12) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44935c.  v0:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.e` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L449360.  v1:= new `io.reactivex.internal.operators.observable.ObservableWindowTimed$c$a`;
  #L449364.  call `<init>`(v1, v11, v12) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;Lio/reactivex/subjects/UnicastSubject;)V` @kind direct;
  #L44936a.  v2:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.b` @type ^`long` @kind wide;
  #L44936e.  v12:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L449372.  call temp:= `schedule`(v0, v1, v2, v12) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L449378.  v4:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.e` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L44937c.  v8:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.c` @type ^`long` @kind wide;
  #L449380.  v10:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L449384.  v5:= v11 @kind object;
  #L449386.  v6:= v8 @kind wide;
  #L449388.  call temp:= `schedulePeriodically`(v4, v5, v6, v8, v10) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L44938e.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$c` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4493a0.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.f` @type ^`int`;
  #L4493a4.  call temp:= `create`(v0) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L4493aa.  v0:= temp @kind object;
  #L4493ac.  v1:= new `io.reactivex.internal.operators.observable.ObservableWindowTimed$c$b`;
  #L4493b0.  v2:= 1I;
  #L4493b2.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c$b;.<init>:(Lio/reactivex/subjects/UnicastSubject;Z)V` @kind direct;
  #L4493b8.  v0:= v3.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4493bc.  if v0 != 0 then goto L4493ca;
  #L4493c0.  v0:= v3.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4493c4.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4493ca.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L4493d0.  v0:= temp;
  #L4493d2.  if v0 == 0 then goto L4493dc;
  #L4493d6.  call `c`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.c:()V` @kind virtual;
  #L4493dc.  return @kind void;
}
