record `io.reactivex.internal.operators.observable.ObservableAmb$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableAmb$a` `io.reactivex.internal.operators.observable.ObservableAmb$b.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableAmb$b.b` @AccessFlag FINAL;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableAmb$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableAmb$b.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableAmb$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableAmb$b` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableAmb$a` v1 @kind object, `int` v2 , `io.reactivex.Observer` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$b;.<init>:(Lio/reactivex/internal/operators/observable/ObservableAmb$a;ILio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4327d0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4327d6.  v0.`io.reactivex.internal.operators.observable.ObservableAmb$b.a` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$a` := v1 @kind object;
  #L4327da.  v0.`io.reactivex.internal.operators.observable.ObservableAmb$b.b` @type ^`int` := v2;
  #L4327de.  v0.`io.reactivex.internal.operators.observable.ObservableAmb$b.c` @type ^`io.reactivex.Observer` := v3 @kind object;
  #L4327e2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableAmb$b` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$b;.a:()V` @AccessFlag PUBLIC {
    temp;

  #L4327f4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4327fa.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableAmb$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43280c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.d` @type ^`boolean` @kind boolean;
  #L432810.  if v0 == 0 then goto L432820;
  #L432814.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.c` @type ^`io.reactivex.Observer` @kind object;
  #L432818.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43281e.  goto L432844;
  #L432820.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.a` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$a` @kind object;
  #L432824.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.b` @type ^`int`;
  #L432828.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$a;.b:(I)Z` @kind virtual;
  #L43282e.  v0:= temp;
  #L432830.  if v0 == 0 then goto L432844;
  #L432834.  v0:= 1I;
  #L432836.  v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.d` @type ^`boolean` := v0 @kind boolean;
  #L43283a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.c` @type ^`io.reactivex.Observer` @kind object;
  #L43283e.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L432844.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableAmb$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L432858.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.d` @type ^`boolean` @kind boolean;
  #L43285c.  if v0 == 0 then goto L43286c;
  #L432860.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.c` @type ^`io.reactivex.Observer` @kind object;
  #L432864.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43286a.  goto L432898;
  #L43286c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.a` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$a` @kind object;
  #L432870.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.b` @type ^`int`;
  #L432874.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$a;.b:(I)Z` @kind virtual;
  #L43287a.  v0:= temp;
  #L43287c.  if v0 == 0 then goto L432892;
  #L432880.  v0:= 1I;
  #L432882.  v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.d` @type ^`boolean` := v0 @kind boolean;
  #L432886.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.c` @type ^`io.reactivex.Observer` @kind object;
  #L43288a.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L432890.  goto L432898;
  #L432892.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L432898.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableAmb$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4328ac.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.d` @type ^`boolean` @kind boolean;
  #L4328b0.  if v0 == 0 then goto L4328c0;
  #L4328b4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.c` @type ^`io.reactivex.Observer` @kind object;
  #L4328b8.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4328be.  goto L4328f8;
  #L4328c0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.a` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$a` @kind object;
  #L4328c4.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.b` @type ^`int`;
  #L4328c8.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$a;.b:(I)Z` @kind virtual;
  #L4328ce.  v0:= temp;
  #L4328d0.  if v0 == 0 then goto L4328e6;
  #L4328d4.  v0:= 1I;
  #L4328d6.  v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.d` @type ^`boolean` := v0 @kind boolean;
  #L4328da.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.c` @type ^`io.reactivex.Observer` @kind object;
  #L4328de.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4328e4.  goto L4328f8;
  #L4328e6.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4328ec.  v3:= temp @kind object;
  #L4328ee.  v3:= (`io.reactivex.disposables.Disposable`) v3 @kind object;
  #L4328f2.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4328f8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableAmb$b` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L43290c.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L432912.  return @kind void;
}
