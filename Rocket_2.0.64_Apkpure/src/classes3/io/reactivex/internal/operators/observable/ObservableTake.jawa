record `io.reactivex.internal.operators.observable.ObservableTake` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.a` @kind class {
  `long` `io.reactivex.internal.operators.observable.ObservableTake.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTake` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableTake;.<init>:(Lio/reactivex/ObservableSource;J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L445a8c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/a;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L445a92.  v0.`io.reactivex.internal.operators.observable.ObservableTake.a` @type ^`long` := v2 @kind wide;
  #L445a96.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableTake` v4 @kind this, `io.reactivex.Observer` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTake;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L445aa8.  v0:= v4.`io.reactivex.internal.operators.observable.a.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L445aac.  v1:= new `io.reactivex.internal.operators.observable.ObservableTake$a`;
  #L445ab0.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableTake.a` @type ^`long` @kind wide;
  #L445ab4.  call `<init>`(v1, v5, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableTake$a;.<init>:(Lio/reactivex/Observer;J)V` @kind direct;
  #L445aba.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L445ac0.  return @kind void;
}
