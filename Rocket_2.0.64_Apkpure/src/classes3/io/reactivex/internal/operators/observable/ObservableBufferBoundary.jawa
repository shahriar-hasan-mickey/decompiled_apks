record `io.reactivex.internal.operators.observable.ObservableBufferBoundary` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.a` @kind class {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBufferBoundary.a` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableBufferBoundary.b` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableBufferBoundary.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.ObservableSource` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/ObservableSource;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L433d18.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/a;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L433d1e.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary.b` @type ^`io.reactivex.ObservableSource` := v2 @kind object;
  #L433d22.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary.c` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L433d26.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary.a` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L433d2a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary` v5 @kind this, `io.reactivex.Observer` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L433d3c.  v0:= v5.`io.reactivex.internal.operators.observable.a.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L433d40.  v1:= new `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a`;
  #L433d44.  v2:= new `io.reactivex.observers.SerializedObserver`;
  #L433d48.  call `<init>`(v2, v6) @signature `Lio/reactivex/observers/SerializedObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L433d4e.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundary.b` @type ^`io.reactivex.ObservableSource` @kind object;
  #L433d52.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundary.c` @type ^`io.reactivex.functions.Function` @kind object;
  #L433d56.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundary.a` @type ^`java.util.concurrent.Callable` @kind object;
  #L433d5a.  call `<init>`(v1, v2, v6, v3, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/ObservableSource;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L433d60.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L433d66.  return @kind void;
}
