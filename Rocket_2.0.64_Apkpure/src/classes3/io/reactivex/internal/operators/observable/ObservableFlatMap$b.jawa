record `io.reactivex.internal.operators.observable.ObservableFlatMap$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.Observer` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableFlatMap$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableFlatMap$b.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMap$b.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableFlatMap$b.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableFlatMap$b.e` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.observable.ObservableFlatMap$b.f` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMap$b.g` @AccessFlag VOLATILE;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableFlatMap$b.h` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMap$b.i` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableFlatMap$b.j` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableFlatMap$b.k` @AccessFlag ;
  `long` `io.reactivex.internal.operators.observable.ObservableFlatMap$b.l` @AccessFlag ;
  `long` `io.reactivex.internal.operators.observable.ObservableFlatMap$b.m` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableFlatMap$b.n` @AccessFlag ;
  `java.util.Queue` `io.reactivex.internal.operators.observable.ObservableFlatMap$b.o` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableFlatMap$b.p` @AccessFlag ;
}
global `io.reactivex.internal.operators.observable.ObservableFlatMap$a`[] `@@io.reactivex.internal.operators.observable.ObservableFlatMap$b.q` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.observable.ObservableFlatMap$a`[] `@@io.reactivex.internal.operators.observable.ObservableFlatMap$b.r` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableFlatMap$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L439454.  v0:= 0I;
  #L439456.  v1:= new `io.reactivex.internal.operators.observable.ObservableFlatMap$a`[v0];
  #L43945a.  `@@io.reactivex.internal.operators.observable.ObservableFlatMap$b.q` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$a`[] := v1 @kind object;
  #L43945e.  v0:= new `io.reactivex.internal.operators.observable.ObservableFlatMap$a`[v0];
  #L439462.  `@@io.reactivex.internal.operators.observable.ObservableFlatMap$b.r` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$a`[] := v0 @kind object;
  #L439466.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFlatMap$b` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `boolean` v4 , `int` v5 , `int` v6 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;ZII)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L439478.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L43947e.  v0:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L439482.  call `<init>`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L439488.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.h` @type ^`io.reactivex.internal.util.AtomicThrowable` := v0 @kind object;
  #L43948c.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.a` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L439490.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.b` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L439494.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.c` @type ^`boolean` := v4 @kind boolean;
  #L439498.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.d` @type ^`int` := v5;
  #L43949c.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.e` @type ^`int` := v6;
  #L4394a0.  v2:= 2147483647I;
  #L4394a6.  if v5 == v2 then goto L4394b8;
  #L4394aa.  v2:= new `java.util.ArrayDeque`;
  #L4394ae.  call `<init>`(v2, v5) @signature `Ljava/util/ArrayDeque;.<init>:(I)V` @kind direct;
  #L4394b4.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.o` @type ^`java.util.Queue` := v2 @kind object;
  #L4394b8.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4394bc.  v3:= `@@io.reactivex.internal.operators.observable.ObservableFlatMap$b.q` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$a`[] @kind object;
  #L4394c0.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4394c6.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4394ca.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.observable.ObservableFlatMap$b` v4 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMap$a` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.a:(Lio/reactivex/internal/operators/observable/ObservableFlatMap$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L439318.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43931c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L439322.  v0:= temp @kind object;
  #L439324.  v0:= (`io.reactivex.internal.operators.observable.ObservableFlatMap$a`[]) v0 @kind object;
  #L439328.  v1:= `@@io.reactivex.internal.operators.observable.ObservableFlatMap$b.r` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$a`[] @kind object;
  #L43932c.  v2:= 0I;
  #L43932e.  if v0 != v1 then goto L43933a;
  #L439332.  call `a`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$a;.a:()V` @kind virtual;
  #L439338.  return v2;
  #L43933a.  v1:= length @variable v0;
  #L43933c.  v3:= v1 + 1;
  #L439340.  v3:= new `io.reactivex.internal.operators.observable.ObservableFlatMap$a`[v3];
  #L439344.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L43934a.  v3[v1]:= v5 @kind object;
  #L43934e.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L439352.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L439358.  v0:= temp;
  #L43935a.  if v0 == 0 then goto L439318;
  #L43935e.  v5:= 1I;
  #L439360.  return v5;
}
procedure `boolean` `b`(`io.reactivex.internal.operators.observable.ObservableFlatMap$b` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.b:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L439374.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.i` @type ^`boolean` @kind boolean;
  #L439378.  v1:= 1I;
  #L43937a.  if v0 == 0 then goto L439380;
  #L43937e.  return v1;
  #L439380.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.h` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L439384.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43938a.  v0:= temp @kind object;
  #L43938c.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L439390.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.c` @type ^`boolean` @kind boolean;
  #L439394.  if v2 != 0 then goto L4393c2;
  #L439398.  if v0 == 0 then goto L4393c2;
  #L43939c.  call temp:= `c`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.c:()Z` @kind virtual;
  #L4393a2.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.h` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4393a6.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4393ac.  v0:= temp @kind object;
  #L4393ae.  v2:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L4393b2.  if v0 == v2 then goto L4393c0;
  #L4393b6.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L4393ba.  call `onError`(v2, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4393c0.  return v1;
  #L4393c2.  v0:= 0I;
  #L4393c4.  return v0;
}
procedure `boolean` `c`(`io.reactivex.internal.operators.observable.ObservableFlatMap$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.c:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4393d8.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.k` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4393dc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4393e2.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4393e6.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4393ec.  v0:= temp @kind object;
  #L4393ee.  v0:= (`io.reactivex.internal.operators.observable.ObservableFlatMap$a`[]) v0 @kind object;
  #L4393f2.  v1:= `@@io.reactivex.internal.operators.observable.ObservableFlatMap$b.r` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$a`[] @kind object;
  #L4393f6.  v2:= 0I;
  #L4393f8.  if v0 == v1 then goto L43942a;
  #L4393fc.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L439400.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L439406.  v0:= temp @kind object;
  #L439408.  v0:= (`io.reactivex.internal.operators.observable.ObservableFlatMap$a`[]) v0 @kind object;
  #L43940c.  if v0 == v1 then goto L43942a;
  #L439410.  v1:= length @variable v0;
  #L439412.  if v2 >= v1 then goto L439426;
  #L439416.  v3:= v0[v2] @kind object;
  #L43941a.  call `a`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$a;.a:()V` @kind virtual;
  #L439420.  v2:= v2 + 1;
  #L439424.  goto L439412;
  #L439426.  v0:= 1I;
  #L439428.  return v0;
  #L43942a.  return v2;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableFlatMap$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L439528.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43952e.  v0:= temp;
  #L439530.  if v0 != 0 then goto L43953a;
  #L439534.  call `e`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.e:()V` @kind virtual;
  #L43953a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableFlatMap$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4394dc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.i` @type ^`boolean` @kind boolean;
  #L4394e0.  if v0 != 0 then goto L439514;
  #L4394e4.  v0:= 1I;
  #L4394e6.  v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.i` @type ^`boolean` := v0 @kind boolean;
  #L4394ea.  call temp:= `c`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.c:()Z` @kind virtual;
  #L4394f0.  v0:= temp;
  #L4394f2.  if v0 == 0 then goto L439514;
  #L4394f6.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.h` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4394fa.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L439500.  v0:= temp @kind object;
  #L439502.  if v0 == 0 then goto L439514;
  #L439506.  v1:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L43950a.  if v0 == v1 then goto L439514;
  #L43950e.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L439514.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableFlatMap$b` v13 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L43954c.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L439550.  v1:= 1I;
  #L439552.  v2:= 1I;
  #L439554.  call temp:= `b`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.b:()Z` @kind virtual;
  #L43955a.  v3:= temp;
  #L43955c.  if v3 == 0 then goto L439562;
  #L439560.  return @kind void;
  #L439562.  v3:= v13.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.f` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L439566.  if v3 == 0 then goto L439592;
  #L43956a.  call temp:= `b`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.b:()Z` @kind virtual;
  #L439570.  v4:= temp;
  #L439572.  if v4 == 0 then goto L439578;
  #L439576.  return @kind void;
  #L439578.  call temp:= `poll`(v3) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L43957e.  v4:= temp @kind object;
  #L439580.  if v4 != 0 then goto L43958a;
  #L439584.  if v4 != 0 then goto L43956a;
  #L439588.  goto L439592;
  #L43958a.  call `onNext`(v0, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L439590.  goto L43956a;
  #L439592.  v3:= v13.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.g` @type ^`boolean` @kind boolean;
  #L439596.  v4:= v13.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.f` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L43959a.  v5:= v13.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43959e.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4395a4.  v5:= temp @kind object;
  #L4395a6.  v5:= (`io.reactivex.internal.operators.observable.ObservableFlatMap$a`[]) v5 @kind object;
  #L4395aa.  v6:= length @variable v5;
  #L4395ac.  if v3 == 0 then goto L4395ec;
  #L4395b0.  if v4 == 0 then goto L4395c0;
  #L4395b4.  call temp:= `isEmpty`(v4) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4395ba.  v3:= temp;
  #L4395bc.  if v3 == 0 then goto L4395ec;
  #L4395c0.  if v6 != 0 then goto L4395ec;
  #L4395c4.  v1:= v13.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.h` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4395c8.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4395ce.  v1:= temp @kind object;
  #L4395d0.  v2:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L4395d4.  if v1 == v2 then goto L4395ea;
  #L4395d8.  if v1 != 0 then goto L4395e4;
  #L4395dc.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4395e2.  goto L4395ea;
  #L4395e4.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4395ea.  return @kind void;
  #L4395ec.  v3:= 0I;
  #L4395ee.  if v6 == 0 then goto L439728;
  #L4395f2.  v7:= v13.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.m` @type ^`long` @kind wide;
  #L4395f6.  v4:= v13.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.n` @type ^`int`;
  #L4395fa.  if v6 <= v4 then goto L43960e;
  #L4395fe.  v9:= v5[v4] @kind object;
  #L439602.  v9:= v9.`io.reactivex.internal.operators.observable.ObservableFlatMap$a.a` @type ^`long` @kind wide;
  #L439606.  v11:= lcmp(v9, v7);
  #L43960a.  if v11 == 0 then goto L43964c;
  #L43960e.  if v6 > v4 then goto L439614;
  #L439612.  v4:= 0I;
  #L439614.  v9:= 0I;
  #L439616.  if v9 >= v6 then goto L43963c;
  #L43961a.  v10:= v5[v4] @kind object;
  #L43961e.  v10:= v10.`io.reactivex.internal.operators.observable.ObservableFlatMap$a.a` @type ^`long` @kind wide;
  #L439622.  v12:= lcmp(v10, v7);
  #L439626.  if v12 != 0 then goto L43962c;
  #L43962a.  goto L43963c;
  #L43962c.  v4:= v4 + 1;
  #L439630.  if v4 != v6 then goto L439636;
  #L439634.  v4:= 0I;
  #L439636.  v9:= v9 + 1;
  #L43963a.  goto L439616;
  #L43963c.  v13.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.n` @type ^`int` := v4;
  #L439640.  v7:= v5[v4] @kind object;
  #L439644.  v7:= v7.`io.reactivex.internal.operators.observable.ObservableFlatMap$a.a` @type ^`long` @kind wide;
  #L439648.  v13.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.m` @type ^`long` := v7 @kind wide;
  #L43964c.  v7:= 0I;
  #L43964e.  v8:= 0I;
  #L439650.  if v7 >= v6 then goto L439716;
  #L439654.  call temp:= `b`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.b:()Z` @kind virtual;
  #L43965a.  v9:= temp;
  #L43965c.  if v9 == 0 then goto L439662;
  #L439660.  return @kind void;
  #L439662.  v9:= v5[v4] @kind object;
  #L439666.  call temp:= `b`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.b:()Z` @kind virtual;
  #L43966c.  v10:= temp;
  #L43966e.  if v10 == 0 then goto L439674;
  #L439672.  return @kind void;
  #L439674.  v10:= v9.`io.reactivex.internal.operators.observable.ObservableFlatMap$a.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L439678.  if v10 != 0 then goto L43967e;
  #L43967c.  goto L43968e;
  #L43967e.  call temp:= `poll`(v10) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L439684.  v11:= temp @kind object;
  #L439686.  if v11 != 0 then goto L4396cc;
  #L43968a.  if v11 != 0 then goto L439666;
  #L43968e.  v10:= v9.`io.reactivex.internal.operators.observable.ObservableFlatMap$a.c` @type ^`boolean` @kind boolean;
  #L439692.  v11:= v9.`io.reactivex.internal.operators.observable.ObservableFlatMap$a.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L439696.  if v10 == 0 then goto L4396c0;
  #L43969a.  if v11 == 0 then goto L4396aa;
  #L43969e.  call temp:= `isEmpty`(v11) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4396a4.  v10:= temp;
  #L4396a6.  if v10 == 0 then goto L4396c0;
  #L4396aa.  call `f`(v13, v9) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.f:(Lio/reactivex/internal/operators/observable/ObservableFlatMap$a;)V` @kind virtual;
  #L4396b0.  call temp:= `b`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.b:()Z` @kind virtual;
  #L4396b6.  v8:= temp;
  #L4396b8.  if v8 == 0 then goto L4396be;
  #L4396bc.  return @kind void;
  #L4396be.  v8:= 1I;
  #L4396c0.  v4:= v4 + 1;
  #L4396c4.  if v4 != v6 then goto L439712;
  #L4396c8.  v4:= 0I;
  #L4396ca.  goto L439712;
  #L4396cc.  call `onNext`(v0, v11) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4396d2.  call temp:= `b`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.b:()Z` @kind virtual;
  #L4396d8.  v11:= temp;
  #L4396da.  if v11 == 0 then goto L43967e;
  #L4396de.  return @kind void;
  #L4396e0.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4396e2.  call `throwIfFatal`(v8) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4396e8.  call `a`(v9) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$a;.a:()V` @kind virtual;
  #L4396ee.  v10:= v13.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.h` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4396f2.  call temp:= `addThrowable`(v10, v8) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4396f8.  call temp:= `b`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.b:()Z` @kind virtual;
  #L4396fe.  v8:= temp;
  #L439700.  if v8 == 0 then goto L439706;
  #L439704.  return @kind void;
  #L439706.  call `f`(v13, v9) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.f:(Lio/reactivex/internal/operators/observable/ObservableFlatMap$a;)V` @kind virtual;
  #L43970c.  v7:= v7 + 1;
  #L439710.  v8:= 1I;
  #L439712.  v7:= v7 + v1 @kind int;
  #L439714.  goto L439650;
  #L439716.  v13.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.n` @type ^`int` := v4;
  #L43971a.  v3:= v5[v4] @kind object;
  #L43971e.  v3:= v3.`io.reactivex.internal.operators.observable.ObservableFlatMap$a.a` @type ^`long` @kind wide;
  #L439722.  v13.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.m` @type ^`long` := v3 @kind wide;
  #L439726.  v3:= v8;
  #L439728.  if v3 == 0 then goto L439772;
  #L43972c.  v3:= v13.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.d` @type ^`int`;
  #L439730.  v4:= 2147483647I;
  #L439736.  if v3 == v4 then goto L439554;
  #L43973a.  @monitorenter v13
  #L43973c.  v3:= v13.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.o` @type ^`java.util.Queue` @kind object;
  #L439740.  call temp:= `poll`(v3) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L439746.  v3:= temp @kind object;
  #L439748.  v3:= (`io.reactivex.ObservableSource`) v3 @kind object;
  #L43974c.  if v3 != 0 then goto L439760;
  #L439750.  v3:= v13.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.p` @type ^`int`;
  #L439754.  v3:= v3 - v1 @kind int;
  #L439756.  v13.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.p` @type ^`int` := v3;
  #L43975a.  @monitorexit v13
  #L43975c.  goto L439554;
  #L439760.  @monitorexit v13
  #L439762.  call `g`(v13, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.g:(Lio/reactivex/ObservableSource;)V` @kind virtual;
  #L439768.  goto L439554;
  #L43976c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43976e.  @monitorexit v13
  #L439770.  throw v0;
  #L439772.  v2:= -v2 @kind int;
  #L439774.  call temp:= `addAndGet`(v13, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L43977a.  v2:= temp;
  #L43977c.  if v2 != 0 then goto L439554;
  #L439780.  return @kind void;
  catch `java.lang.Throwable` @[L43967e..L439686] goto L4396e0;
  catch `java.lang.Throwable` @[L43973c..L439762] goto L43976c;
  catch `java.lang.Throwable` @[L43976e..L439770] goto L43976c;
}
procedure `void` `f`(`io.reactivex.internal.operators.observable.ObservableFlatMap$b` v6 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMap$a` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.f:(Lio/reactivex/internal/operators/observable/ObservableFlatMap$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L439900.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L439904.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43990a.  v0:= temp @kind object;
  #L43990c.  v0:= (`io.reactivex.internal.operators.observable.ObservableFlatMap$a`[]) v0 @kind object;
  #L439910.  v1:= length @variable v0;
  #L439912.  if v1 != 0 then goto L439918;
  #L439916.  return @kind void;
  #L439918.  v2:= -1I;
  #L43991a.  v3:= 0I;
  #L43991c.  v4:= 0I;
  #L43991e.  if v4 >= v1 then goto L439934;
  #L439922.  v5:= v0[v4] @kind object;
  #L439926.  if v5 != v7 then goto L43992e;
  #L43992a.  v2:= v4;
  #L43992c.  goto L439934;
  #L43992e.  v4:= v4 + 1;
  #L439932.  goto L43991e;
  #L439934.  if v2 >= 0 then goto L43993a;
  #L439938.  return @kind void;
  #L43993a.  v4:= 1I;
  #L43993c.  if v1 != v4 then goto L439946;
  #L439940.  v1:= `@@io.reactivex.internal.operators.observable.ObservableFlatMap$b.q` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$a`[] @kind object;
  #L439944.  goto L439964;
  #L439946.  v5:= v1 + -1;
  #L43994a.  v5:= new `io.reactivex.internal.operators.observable.ObservableFlatMap$a`[v5];
  #L43994e.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L439954.  v3:= v2 + 1;
  #L439958.  v1:= v1 - v2 @kind int;
  #L43995a.  v1:= v1 - v4 @kind int;
  #L43995c.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L439962.  v1:= v5 @kind object;
  #L439964.  v2:= v6.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L439968.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L43996e.  v0:= temp;
  #L439970.  if v0 == 0 then goto L439900;
  #L439974.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.observable.ObservableFlatMap$b` v5 @kind this, `io.reactivex.ObservableSource` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.g:(Lio/reactivex/ObservableSource;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L439988.  v0:= instanceof @variable v6 @type ^`java.util.concurrent.Callable` @kind boolean;
  #L43998c.  if v0 == 0 then goto L4399d8;
  #L439990.  v6:= (`java.util.concurrent.Callable`) v6 @kind object;
  #L439994.  call `i`(v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.i:(Ljava/util/concurrent/Callable;)V` @kind virtual;
  #L43999a.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.d` @type ^`int`;
  #L43999e.  v0:= 2147483647I;
  #L4399a4.  if v6 == v0 then goto L439a02;
  #L4399a8.  @monitorenter v5
  #L4399aa.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.o` @type ^`java.util.Queue` @kind object;
  #L4399ae.  call temp:= `poll`(v6) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4399b4.  v6:= temp @kind object;
  #L4399b6.  v6:= (`io.reactivex.ObservableSource`) v6 @kind object;
  #L4399ba.  if v6 != 0 then goto L4399ce;
  #L4399be.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.p` @type ^`int`;
  #L4399c2.  v6:= v6 + -1;
  #L4399c6.  v5.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.p` @type ^`int` := v6;
  #L4399ca.  @monitorexit v5
  #L4399cc.  goto L439a02;
  #L4399ce.  @monitorexit v5
  #L4399d0.  goto L439988;
  #L4399d2.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4399d4.  @monitorexit v5
  #L4399d6.  throw v6;
  #L4399d8.  v0:= new `io.reactivex.internal.operators.observable.ObservableFlatMap$a`;
  #L4399dc.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.l` @type ^`long` @kind wide;
  #L4399e0.  v3:= 1L;
  #L4399e4.  v3:= v3 + v1 @kind long;
  #L4399e6.  v5.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.l` @type ^`long` := v3 @kind wide;
  #L4399ea.  call `<init>`(v0, v5, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;J)V` @kind direct;
  #L4399f0.  call temp:= `a`(v5, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.a:(Lio/reactivex/internal/operators/observable/ObservableFlatMap$a;)Z` @kind virtual;
  #L4399f6.  v1:= temp;
  #L4399f8.  if v1 == 0 then goto L439a02;
  #L4399fc.  call `subscribe`(v6, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L439a02.  return @kind void;
  catch `java.lang.Throwable` @[L4399aa..L4399d6] goto L4399d2;
}
procedure `void` `h`(`io.reactivex.internal.operators.observable.ObservableFlatMap$b` v2 @kind this, `java.lang.Object` v3 @kind object, `io.reactivex.internal.operators.observable.ObservableFlatMap$a` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.h:(Ljava/lang/Object;Lio/reactivex/internal/operators/observable/ObservableFlatMap$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L439a20.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L439a26.  v0:= temp;
  #L439a28.  if v0 != 0 then goto L439a54;
  #L439a2c.  v0:= 0I;
  #L439a2e.  v1:= 1I;
  #L439a30.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L439a36.  v0:= temp;
  #L439a38.  if v0 == 0 then goto L439a54;
  #L439a3c.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L439a40.  call `onNext`(v4, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L439a46.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L439a4c.  v3:= temp;
  #L439a4e.  if v3 != 0 then goto L439a82;
  #L439a52.  return @kind void;
  #L439a54.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableFlatMap$a.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L439a58.  if v0 != 0 then goto L439a6e;
  #L439a5c.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L439a60.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.e` @type ^`int`;
  #L439a64.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L439a6a.  v4.`io.reactivex.internal.operators.observable.ObservableFlatMap$a.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L439a6e.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L439a74.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L439a7a.  v3:= temp;
  #L439a7c.  if v3 == 0 then goto L439a82;
  #L439a80.  return @kind void;
  #L439a82.  call `e`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.e:()V` @kind virtual;
  #L439a88.  return @kind void;
}
procedure `void` `i`(`io.reactivex.internal.operators.observable.ObservableFlatMap$b` v2 @kind this, `java.util.concurrent.Callable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.i:(Ljava/util/concurrent/Callable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L439a9c.  call temp:= `call`(v3) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L439aa2.  v3:= temp @kind object;
  #L439aa4.  if v3 != 0 then goto L439aaa;
  #L439aa8.  return @kind void;
  #L439aaa.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L439ab0.  v0:= temp;
  #L439ab2.  if v0 != 0 then goto L439ade;
  #L439ab6.  v0:= 0I;
  #L439ab8.  v1:= 1I;
  #L439aba.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L439ac0.  v0:= temp;
  #L439ac2.  if v0 == 0 then goto L439ade;
  #L439ac6.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L439aca.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L439ad0.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L439ad6.  v3:= temp;
  #L439ad8.  if v3 != 0 then goto L439b46;
  #L439adc.  return @kind void;
  #L439ade.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.f` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L439ae2.  if v0 != 0 then goto L439b16;
  #L439ae6.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.d` @type ^`int`;
  #L439aea.  v1:= 2147483647I;
  #L439af0.  if v0 != v1 then goto L439b04;
  #L439af4.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L439af8.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.e` @type ^`int`;
  #L439afc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L439b02.  goto L439b12;
  #L439b04.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L439b08.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.d` @type ^`int`;
  #L439b0c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L439b12.  v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.f` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L439b16.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L439b1c.  v3:= temp;
  #L439b1e.  if v3 != 0 then goto L439b38;
  #L439b22.  v3:= new `java.lang.IllegalStateException`;
  #L439b26.  v0:= "Scalar queue full?!" @kind object;
  #L439b2a.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L439b30.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L439b36.  return @kind void;
  #L439b38.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L439b3e.  v3:= temp;
  #L439b40.  if v3 == 0 then goto L439b46;
  #L439b44.  return @kind void;
  #L439b46.  call `e`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.e:()V` @kind virtual;
  #L439b4c.  return @kind void;
  #L439b4e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L439b50.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L439b56.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.h` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L439b5a.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L439b60.  call `d`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.d:()V` @kind virtual;
  #L439b66.  return @kind void;
  catch `java.lang.Throwable` @[L439a9c..L439aa4] goto L439b4e;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableFlatMap$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43943c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.i` @type ^`boolean` @kind boolean;
  #L439440.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableFlatMap$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4397b4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.g` @type ^`boolean` @kind boolean;
  #L4397b8.  if v0 == 0 then goto L4397be;
  #L4397bc.  return @kind void;
  #L4397be.  v0:= 1I;
  #L4397c0.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.g` @type ^`boolean` := v0 @kind boolean;
  #L4397c4.  call `d`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.d:()V` @kind virtual;
  #L4397ca.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableFlatMap$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4397dc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.g` @type ^`boolean` @kind boolean;
  #L4397e0.  if v0 == 0 then goto L4397ec;
  #L4397e4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4397ea.  return @kind void;
  #L4397ec.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.h` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4397f0.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4397f6.  v0:= temp;
  #L4397f8.  if v0 == 0 then goto L43980a;
  #L4397fc.  v2:= 1I;
  #L4397fe.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.g` @type ^`boolean` := v2 @kind boolean;
  #L439802.  call `d`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.d:()V` @kind virtual;
  #L439808.  goto L439810;
  #L43980a.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L439810.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableFlatMap$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L439824.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.g` @type ^`boolean` @kind boolean;
  #L439828.  if v0 == 0 then goto L43982e;
  #L43982c.  return @kind void;
  #L43982e.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L439832.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L439838.  v3:= temp @kind object;
  #L43983a.  v0:= "The mapper returned a null ObservableSource" @kind object;
  #L43983e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L439844.  v3:= temp @kind object;
  #L439846.  v3:= (`io.reactivex.ObservableSource`) v3 @kind object;
  #L43984a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.d` @type ^`int`;
  #L43984e.  v1:= 2147483647I;
  #L439854.  if v0 == v1 then goto L439886;
  #L439858.  @monitorenter v2
  #L43985a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.p` @type ^`int`;
  #L43985e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.d` @type ^`int`;
  #L439862.  if v0 != v1 then goto L439874;
  #L439866.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.o` @type ^`java.util.Queue` @kind object;
  #L43986a.  call temp:= `offer`(v0, v3) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L439870.  @monitorexit v2
  #L439872.  return @kind void;
  #L439874.  v0:= v0 + 1;
  #L439878.  v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.p` @type ^`int` := v0;
  #L43987c.  @monitorexit v2
  #L43987e.  goto L439886;
  #L439880.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L439882.  @monitorexit v2
  #L439884.  throw v3;
  #L439886.  call `g`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.g:(Lio/reactivex/ObservableSource;)V` @kind virtual;
  #L43988c.  return @kind void;
  #L43988e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L439890.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L439896.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.k` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43989a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4398a0.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4398a6.  return @kind void;
  catch `java.lang.Throwable` @[L43982e..L43984a] goto L43988e;
  catch `java.lang.Throwable` @[L43985a..L439884] goto L439880;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableFlatMap$b` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4398d0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.k` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4398d4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4398da.  v0:= temp;
  #L4398dc.  if v0 == 0 then goto L4398ee;
  #L4398e0.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.k` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L4398e4.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L4398e8.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4398ee.  return @kind void;
}
