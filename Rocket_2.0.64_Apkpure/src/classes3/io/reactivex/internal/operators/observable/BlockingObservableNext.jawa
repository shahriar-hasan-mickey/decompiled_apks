record `io.reactivex.internal.operators.observable.BlockingObservableNext` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Iterable` @kind interface {
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.BlockingObservableNext.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.BlockingObservableNext` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext;.<init>:(Lio/reactivex/ObservableSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L432294.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43229a.  v0.`io.reactivex.internal.operators.observable.BlockingObservableNext.a` @type ^`io.reactivex.ObservableSource` := v1 @kind object;
  #L43229e.  return @kind void;
}
procedure `java.util.Iterator` `iterator`(`io.reactivex.internal.operators.observable.BlockingObservableNext` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L432268.  v0:= new `io.reactivex.internal.operators.observable.BlockingObservableNext$b`;
  #L43226c.  call `<init>`(v0) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$b;.<init>:()V` @kind direct;
  #L432272.  v1:= new `io.reactivex.internal.operators.observable.BlockingObservableNext$a`;
  #L432276.  v2:= v3.`io.reactivex.internal.operators.observable.BlockingObservableNext.a` @type ^`io.reactivex.ObservableSource` @kind object;
  #L43227a.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$a;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/internal/operators/observable/BlockingObservableNext$b;)V` @kind direct;
  #L432280.  return v1 @kind object;
}
