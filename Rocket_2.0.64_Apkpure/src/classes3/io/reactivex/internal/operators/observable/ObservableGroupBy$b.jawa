record `io.reactivex.internal.operators.observable.ObservableGroupBy$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.ObservableSource` @kind interface {
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableGroupBy$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.observable.ObservableGroupBy$b.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` `io.reactivex.internal.operators.observable.ObservableGroupBy$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableGroupBy$b.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableGroupBy$b.e` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.ObservableGroupBy$b.f` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableGroupBy$b.g` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableGroupBy$b.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableGroupBy$b.i` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableGroupBy$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableGroupBy$b` v1 @kind this, `int` v2 , `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v3 @kind object, `java.lang.Object` v4 @kind object, `boolean` v5 ) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$b;.<init>:(ILio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;Ljava/lang/Object;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L43bf20.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L43bf26.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L43bf2a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L43bf30.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L43bf34.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L43bf38.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L43bf3e.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L43bf42.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L43bf46.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43bf4c.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L43bf50.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L43bf54.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L43bf5a.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v0 @kind object;
  #L43bf5e.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` := v3 @kind object;
  #L43bf62.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.a` @type ^`java.lang.Object` := v4 @kind object;
  #L43bf66.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.d` @type ^`boolean` := v5 @kind boolean;
  #L43bf6a.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.observable.ObservableGroupBy$b` v3 @kind this, `boolean` v4 , `boolean` v5 , `io.reactivex.Observer` v6 @kind object, `boolean` v7 ) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$b;.a:(ZZLio/reactivex/Observer;Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L43be4c.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L43be50.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L43be56.  v0:= temp;
  #L43be58.  v1:= 1I;
  #L43be5a.  v2:= 0I;
  #L43be5c.  if v0 == 0 then goto L43be84;
  #L43be60.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43be64.  call `clear`(v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43be6a.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` @kind object;
  #L43be6e.  v5:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.a` @type ^`java.lang.Object` @kind object;
  #L43be72.  call `cancel`(v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.cancel:(Ljava/lang/Object;)V` @kind virtual;
  #L43be78.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43be7c.  call `lazySet`(v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L43be82.  return v1;
  #L43be84.  if v4 == 0 then goto L43beec;
  #L43be88.  if v7 == 0 then goto L43beb2;
  #L43be8c.  if v5 == 0 then goto L43beec;
  #L43be90.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.f` @type ^`java.lang.Throwable` @kind object;
  #L43be94.  v5:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43be98.  call `lazySet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L43be9e.  if v4 == 0 then goto L43beaa;
  #L43bea2.  call `onError`(v6, v4) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43bea8.  goto L43beb0;
  #L43beaa.  call `onComplete`(v6) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43beb0.  return v1;
  #L43beb2.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.f` @type ^`java.lang.Throwable` @kind object;
  #L43beb6.  if v4 == 0 then goto L43bed6;
  #L43beba.  v5:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43bebe.  call `clear`(v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43bec4.  v5:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43bec8.  call `lazySet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L43bece.  call `onError`(v6, v4) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43bed4.  return v1;
  #L43bed6.  if v5 == 0 then goto L43beec;
  #L43beda.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43bede.  call `lazySet`(v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L43bee4.  call `onComplete`(v6) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43beea.  return v1;
  #L43beec.  v4:= 0I;
  #L43beee.  return v4;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableGroupBy$b` v8 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L43bfc8.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43bfce.  v0:= temp;
  #L43bfd0.  if v0 == 0 then goto L43bfd6;
  #L43bfd4.  return @kind void;
  #L43bfd6.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43bfda.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.d` @type ^`boolean` @kind boolean;
  #L43bfde.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43bfe2.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43bfe8.  v2:= temp @kind object;
  #L43bfea.  v2:= (`io.reactivex.Observer`) v2 @kind object;
  #L43bfee.  v3:= 1I;
  #L43bff0.  v4:= 1I;
  #L43bff2.  if v2 == 0 then goto L43c028;
  #L43bff6.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.e` @type ^`boolean` @kind boolean;
  #L43bffa.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L43c000.  v6:= temp @kind object;
  #L43c002.  if v6 != 0 then goto L43c00a;
  #L43c006.  v7:= 1I;
  #L43c008.  goto L43c00c;
  #L43c00a.  v7:= 0I;
  #L43c00c.  call temp:= `a`(v8, v5, v7, v2, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$b;.a:(ZZLio/reactivex/Observer;Z)Z` @kind virtual;
  #L43c012.  v5:= temp;
  #L43c014.  if v5 == 0 then goto L43c01a;
  #L43c018.  return @kind void;
  #L43c01a.  if v7 == 0 then goto L43c020;
  #L43c01e.  goto L43c028;
  #L43c020.  call `onNext`(v2, v6) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43c026.  goto L43bff6;
  #L43c028.  v4:= -v4 @kind int;
  #L43c02a.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L43c030.  v4:= temp;
  #L43c032.  if v4 != 0 then goto L43c038;
  #L43c036.  return @kind void;
  #L43c038.  if v2 != 0 then goto L43bff2;
  #L43c03c.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43c040.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43c046.  v2:= temp @kind object;
  #L43c048.  v2:= (`io.reactivex.Observer`) v2 @kind object;
  #L43c04c.  goto L43bff2;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableGroupBy$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$b;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c060.  v0:= 1I;
  #L43c062.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.e` @type ^`boolean` := v0 @kind boolean;
  #L43c066.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$b;.b:()V` @kind virtual;
  #L43c06c.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableGroupBy$b` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$b;.d:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L43c080.  v0.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.f` @type ^`java.lang.Throwable` := v1 @kind object;
  #L43c084.  v1:= 1I;
  #L43c086.  v0.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.e` @type ^`boolean` := v1 @kind boolean;
  #L43c08a.  call `b`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$b;.b:()V` @kind virtual;
  #L43c090.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableGroupBy$b` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43bf7c.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L43bf80.  v1:= 0I;
  #L43bf82.  v2:= 1I;
  #L43bf84.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L43bf8a.  v0:= temp;
  #L43bf8c.  if v0 == 0 then goto L43bfb6;
  #L43bf90.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43bf96.  v0:= temp;
  #L43bf98.  if v0 != 0 then goto L43bfb6;
  #L43bf9c.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43bfa0.  v1:= 0I;
  #L43bfa2.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L43bfa8.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` @kind object;
  #L43bfac.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.a` @type ^`java.lang.Object` @kind object;
  #L43bfb0.  call `cancel`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.cancel:(Ljava/lang/Object;)V` @kind virtual;
  #L43bfb6.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableGroupBy$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$b;.e:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c0a4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43c0a8.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L43c0ae.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$b;.b:()V` @kind virtual;
  #L43c0b4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableGroupBy$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43bf00.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L43bf04.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L43bf0a.  v0:= temp;
  #L43bf0c.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.observable.ObservableGroupBy$b` v3 @kind this, `io.reactivex.Observer` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$b;.subscribe:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43c0c8.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L43c0cc.  v1:= 0I;
  #L43c0ce.  v2:= 1I;
  #L43c0d0.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L43c0d6.  v0:= temp;
  #L43c0d8.  if v0 == 0 then goto L43c112;
  #L43c0dc.  call `onSubscribe`(v4, v3) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43c0e2.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43c0e6.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L43c0ec.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L43c0f0.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L43c0f6.  v4:= temp;
  #L43c0f8.  if v4 == 0 then goto L43c10a;
  #L43c0fc.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43c100.  v0:= 0I;
  #L43c102.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L43c108.  goto L43c126;
  #L43c10a.  call `b`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$b;.b:()V` @kind virtual;
  #L43c110.  goto L43c126;
  #L43c112.  v0:= new `java.lang.IllegalStateException`;
  #L43c116.  v1:= "Only one Observer allowed!" @kind object;
  #L43c11a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43c120.  call `error`(v0, v4) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L43c126.  return @kind void;
}
