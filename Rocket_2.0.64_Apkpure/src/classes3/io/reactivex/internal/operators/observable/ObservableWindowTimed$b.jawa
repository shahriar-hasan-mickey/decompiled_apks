record `io.reactivex.internal.operators.observable.ObservableWindowTimed$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.QueueDrainObserver` @kind class, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `long` `io.reactivex.internal.operators.observable.ObservableWindowTimed$b.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableWindowTimed$b.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableWindowTimed$b.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableWindowTimed$b.e` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableWindowTimed$b.f` @AccessFlag ;
  `io.reactivex.subjects.UnicastSubject` `io.reactivex.internal.operators.observable.ObservableWindowTimed$b.g` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableWindowTimed$b.h` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowTimed$b.i` @AccessFlag VOLATILE;
}
global `java.lang.Object` `@@io.reactivex.internal.operators.observable.ObservableWindowTimed$b.j` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L448c5c.  v0:= new `java.lang.Object`;
  #L448c60.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L448c66.  `@@io.reactivex.internal.operators.observable.ObservableWindowTimed$b.j` @type ^`java.lang.Object` := v0 @kind object;
  #L448c6a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$b` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object, `int` v7 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L448c7c.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L448c80.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L448c86.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L448c8c.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L448c90.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L448c96.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L448c9a.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.b` @type ^`long` := v3 @kind wide;
  #L448c9e.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.c` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L448ca2.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.d` @type ^`io.reactivex.Scheduler` := v6 @kind object;
  #L448ca6.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.e` @type ^`int` := v7;
  #L448caa.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L448cd4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L448cd8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L448cde.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$b` v7 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L448cf0.  v0:= v7.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L448cf4.  v0:= (`io.reactivex.internal.queue.MpscLinkedQueue`) v0 @kind object;
  #L448cf8.  v1:= v7.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L448cfc.  v2:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.g` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L448d00.  v3:= 1I;
  #L448d02.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.i` @type ^`boolean` @kind boolean;
  #L448d06.  v5:= v7.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` @kind boolean;
  #L448d0a.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L448d10.  v6:= temp @kind object;
  #L448d12.  if v5 == 0 then goto L448d4c;
  #L448d16.  if v6 == 0 then goto L448d22;
  #L448d1a.  v5:= `@@io.reactivex.internal.operators.observable.ObservableWindowTimed$b.j` @type ^`java.lang.Object` @kind object;
  #L448d1e.  if v6 != v5 then goto L448d4c;
  #L448d22.  v1:= 0I;
  #L448d24.  v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.g` @type ^`io.reactivex.subjects.UnicastSubject` := v1 @kind object;
  #L448d28.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L448d2e.  call `a`(v7) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.a:()V` @kind virtual;
  #L448d34.  v0:= v7.`io.reactivex.internal.observers.QueueDrainObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L448d38.  if v0 == 0 then goto L448d44;
  #L448d3c.  call `onError`(v2, v0) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L448d42.  goto L448d4a;
  #L448d44.  call `onComplete`(v2) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L448d4a.  return @kind void;
  #L448d4c.  if v6 != 0 then goto L448d60;
  #L448d50.  v3:= -v3 @kind int;
  #L448d52.  call temp:= `leave`(v7, v3) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L448d58.  v3:= temp;
  #L448d5a.  if v3 != 0 then goto L448d02;
  #L448d5e.  return @kind void;
  #L448d60.  v5:= `@@io.reactivex.internal.operators.observable.ObservableWindowTimed$b.j` @type ^`java.lang.Object` @kind object;
  #L448d64.  if v6 != v5 then goto L448d96;
  #L448d68.  call `onComplete`(v2) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L448d6e.  if v4 != 0 then goto L448d8a;
  #L448d72.  v2:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.e` @type ^`int`;
  #L448d76.  call temp:= `create`(v2) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L448d7c.  v2:= temp @kind object;
  #L448d7e.  v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.g` @type ^`io.reactivex.subjects.UnicastSubject` := v2 @kind object;
  #L448d82.  call `onNext`(v1, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L448d88.  goto L448d02;
  #L448d8a.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L448d8e.  call `dispose`(v4) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L448d94.  goto L448d02;
  #L448d96.  call temp:= `getValue`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L448d9c.  v4:= temp @kind object;
  #L448d9e.  call `onNext`(v2, v4) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L448da4.  goto L448d02;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L448cbc.  v0:= 1I;
  #L448cbe.  v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L448cc2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L448c44.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L448c48.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L448db8.  v0:= 1I;
  #L448dba.  v1.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L448dbe.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L448dc4.  v0:= temp;
  #L448dc6.  if v0 == 0 then goto L448dd0;
  #L448dca.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.b:()V` @kind virtual;
  #L448dd0.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.a:()V` @kind virtual;
  #L448dd6.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L448dda.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L448de0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L448df4.  v1.`io.reactivex.internal.observers.QueueDrainObserver.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L448df8.  v0:= 1I;
  #L448dfa.  v1.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L448dfe.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L448e04.  v0:= temp;
  #L448e06.  if v0 == 0 then goto L448e10;
  #L448e0a.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.b:()V` @kind virtual;
  #L448e10.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.a:()V` @kind virtual;
  #L448e16.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L448e1a.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L448e20.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L448e34.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.i` @type ^`boolean` @kind boolean;
  #L448e38.  if v0 == 0 then goto L448e3e;
  #L448e3c.  return @kind void;
  #L448e3e.  call temp:= `fastEnter`(v1) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastEnter:()Z` @kind virtual;
  #L448e44.  v0:= temp;
  #L448e46.  if v0 == 0 then goto L448e64;
  #L448e4a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.g` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L448e4e.  call `onNext`(v0, v2) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L448e54.  v2:= -1I;
  #L448e56.  call temp:= `leave`(v1, v2) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L448e5c.  v2:= temp;
  #L448e5e.  if v2 != 0 then goto L448e84;
  #L448e62.  return @kind void;
  #L448e64.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L448e68.  call temp:= `next`(v2) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L448e6e.  v2:= temp @kind object;
  #L448e70.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L448e76.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L448e7c.  v2:= temp;
  #L448e7e.  if v2 != 0 then goto L448e84;
  #L448e82.  return @kind void;
  #L448e84.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.b:()V` @kind virtual;
  #L448e8a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$b` v7 @kind this, `io.reactivex.disposables.Disposable` v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L448e9c.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L448ea0.  call temp:= `validate`(v0, v8) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L448ea6.  v0:= temp;
  #L448ea8.  if v0 == 0 then goto L448efe;
  #L448eac.  v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.f` @type ^`io.reactivex.disposables.Disposable` := v8 @kind object;
  #L448eb0.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.e` @type ^`int`;
  #L448eb4.  call temp:= `create`(v8) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L448eba.  v8:= temp @kind object;
  #L448ebc.  v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.g` @type ^`io.reactivex.subjects.UnicastSubject` := v8 @kind object;
  #L448ec0.  v8:= v7.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L448ec4.  call `onSubscribe`(v8, v7) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L448eca.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.g` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L448ece.  call `onNext`(v8, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L448ed4.  v8:= v7.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L448ed8.  if v8 != 0 then goto L448efe;
  #L448edc.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L448ee0.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.b` @type ^`long` @kind wide;
  #L448ee4.  v6:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L448ee8.  v1:= v7 @kind object;
  #L448eea.  v2:= v4 @kind wide;
  #L448eec.  call temp:= `schedulePeriodicallyDirect`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L448ef2.  v8:= temp @kind object;
  #L448ef4.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L448ef8.  call temp:= `replace`(v0, v8) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L448efe.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L448f10.  v0:= v2.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L448f14.  if v0 == 0 then goto L448f24;
  #L448f18.  v0:= 1I;
  #L448f1a.  v2.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.i` @type ^`boolean` := v0 @kind boolean;
  #L448f1e.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.a:()V` @kind virtual;
  #L448f24.  v0:= v2.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L448f28.  v1:= `@@io.reactivex.internal.operators.observable.ObservableWindowTimed$b.j` @type ^`java.lang.Object` @kind object;
  #L448f2c.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L448f32.  call temp:= `enter`(v2) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L448f38.  v0:= temp;
  #L448f3a.  if v0 == 0 then goto L448f44;
  #L448f3e.  call `b`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.b:()V` @kind virtual;
  #L448f44.  return @kind void;
}
