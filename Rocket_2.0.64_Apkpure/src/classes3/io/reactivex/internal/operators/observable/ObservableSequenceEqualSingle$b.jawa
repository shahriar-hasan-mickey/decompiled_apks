record `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.d` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$b;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L443764.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44376a.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.a` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a` := v1 @kind object;
  #L44376e.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.c` @type ^`int` := v2;
  #L443772.  v1:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L443776.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L44377c.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v1 @kind object;
  #L443780.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443794.  v0:= 1I;
  #L443796.  v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.d` @type ^`boolean` := v0 @kind boolean;
  #L44379a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.a` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a` @kind object;
  #L44379e.  call `b`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L4437a4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4437b8.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.e` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4437bc.  v1:= 1I;
  #L4437be.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.d` @type ^`boolean` := v1 @kind boolean;
  #L4437c2.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.a` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a` @kind object;
  #L4437c6.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L4437cc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4437e0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4437e4.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4437ea.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.a` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a` @kind object;
  #L4437ee.  call `b`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L4437f4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L443808.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.a` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a` @kind object;
  #L44380c.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.c` @type ^`int`;
  #L443810.  call temp:= `c`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;.c:(Lio/reactivex/disposables/Disposable;I)Z` @kind virtual;
  #L443816.  return @kind void;
}
