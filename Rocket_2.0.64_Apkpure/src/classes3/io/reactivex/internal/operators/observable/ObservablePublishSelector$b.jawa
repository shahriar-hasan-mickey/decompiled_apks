record `io.reactivex.internal.operators.observable.ObservablePublishSelector$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservablePublishSelector$b.a` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservablePublishSelector$b.b` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservablePublishSelector$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservablePublishSelector$b` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishSelector$b;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43f798.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43f79e.  v0.`io.reactivex.internal.operators.observable.ObservablePublishSelector$b.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L43f7a2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservablePublishSelector$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishSelector$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f7b4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublishSelector$b.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43f7b8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43f7be.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43f7c4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservablePublishSelector$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishSelector$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f778.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublishSelector$b.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43f77c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L43f782.  v0:= temp;
  #L43f784.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservablePublishSelector$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishSelector$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f7d8.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43f7de.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublishSelector$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L43f7e2.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43f7e8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservablePublishSelector$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishSelector$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f7fc.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43f802.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublishSelector$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L43f806.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43f80c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservablePublishSelector$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishSelector$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f820.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublishSelector$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L43f824.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43f82a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservablePublishSelector$b` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishSelector$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f83c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublishSelector$b.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43f840.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43f846.  v0:= temp;
  #L43f848.  if v0 == 0 then goto L43f85a;
  #L43f84c.  v1.`io.reactivex.internal.operators.observable.ObservablePublishSelector$b.b` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L43f850.  v2:= v1.`io.reactivex.internal.operators.observable.ObservablePublishSelector$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L43f854.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43f85a.  return @kind void;
}
