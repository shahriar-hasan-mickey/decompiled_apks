record `io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$a.a` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.ObservableSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchIfEmpty$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L444720.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L444726.  v0.`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L44472a.  v0.`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$a.b` @type ^`io.reactivex.ObservableSource` := v2 @kind object;
  #L44472e.  v1:= 1I;
  #L444730.  v0.`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$a.d` @type ^`boolean` := v1 @kind boolean;
  #L444734.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L444738.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L44473e.  v0.`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$a.c` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L444742.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchIfEmpty$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444754.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$a.d` @type ^`boolean` @kind boolean;
  #L444758.  if v0 == 0 then goto L44476e;
  #L44475c.  v0:= 0I;
  #L44475e.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$a.d` @type ^`boolean` := v0 @kind boolean;
  #L444762.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$a.b` @type ^`io.reactivex.ObservableSource` @kind object;
  #L444766.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L44476c.  goto L444778;
  #L44476e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L444772.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L444778.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchIfEmpty$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44478c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L444790.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L444796.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchIfEmpty$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4447a8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$a.d` @type ^`boolean` @kind boolean;
  #L4447ac.  if v0 == 0 then goto L4447b6;
  #L4447b0.  v0:= 0I;
  #L4447b2.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4447b6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4447ba.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4447c0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchIfEmpty$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4447d4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$a.c` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L4447d8.  call temp:= `update`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.update:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4447de.  return @kind void;
}
