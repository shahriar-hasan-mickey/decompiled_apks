record `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.e` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.g` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.h` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.i` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43aa10.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L43aa16.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L43aa1a.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.f` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L43aa1e.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.b` @type ^`boolean` := v3 @kind boolean;
  #L43aa22.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L43aa26.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L43aa2c.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L43aa30.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L43aa34.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L43aa3a.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L43aa3e.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L43aa42.  v2:= 1I;
  #L43aa44.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L43aa4a.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L43aa4e.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L43aa52.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43aa58.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L43aa5c.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L43aa70.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43aa74.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43aa7a.  v0:= temp @kind object;
  #L43aa7c.  v0:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L43aa80.  if v0 == 0 then goto L43aa8a;
  #L43aa84.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43aa8a.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L43aac8.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43aace.  v0:= temp;
  #L43aad0.  if v0 != 0 then goto L43aada;
  #L43aad4.  call `c`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.c:()V` @kind virtual;
  #L43aada.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a` v8 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L43aaec.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43aaf0.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43aaf4.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43aaf8.  v3:= 1I;
  #L43aafa.  v4:= 1I;
  #L43aafc.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.i` @type ^`boolean` @kind boolean;
  #L43ab00.  if v5 == 0 then goto L43ab0c;
  #L43ab04.  call `a`(v8) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.a:()V` @kind virtual;
  #L43ab0a.  return @kind void;
  #L43ab0c.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.b` @type ^`boolean` @kind boolean;
  #L43ab10.  if v5 != 0 then goto L43ab42;
  #L43ab14.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43ab18.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43ab1e.  v5:= temp @kind object;
  #L43ab20.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L43ab24.  if v5 == 0 then goto L43ab42;
  #L43ab28.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43ab2c.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43ab32.  v1:= temp @kind object;
  #L43ab34.  call `a`(v8) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.a:()V` @kind virtual;
  #L43ab3a.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43ab40.  return @kind void;
  #L43ab42.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L43ab48.  v5:= temp;
  #L43ab4a.  v6:= 0I;
  #L43ab4c.  if v5 != 0 then goto L43ab54;
  #L43ab50.  v5:= 1I;
  #L43ab52.  goto L43ab56;
  #L43ab54.  v5:= 0I;
  #L43ab56.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43ab5c.  v7:= temp @kind object;
  #L43ab5e.  v7:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v7 @kind object;
  #L43ab62.  if v7 == 0 then goto L43ab70;
  #L43ab66.  call temp:= `poll`(v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L43ab6c.  v7:= temp @kind object;
  #L43ab6e.  goto L43ab72;
  #L43ab70.  v7:= 0I;
  #L43ab72.  if v7 != 0 then goto L43ab78;
  #L43ab76.  v6:= 1I;
  #L43ab78.  if v5 == 0 then goto L43aba0;
  #L43ab7c.  if v6 == 0 then goto L43aba0;
  #L43ab80.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43ab84.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43ab8a.  v1:= temp @kind object;
  #L43ab8c.  if v1 == 0 then goto L43ab98;
  #L43ab90.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43ab96.  goto L43ab9e;
  #L43ab98.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43ab9e.  return @kind void;
  #L43aba0.  if v6 == 0 then goto L43abb4;
  #L43aba4.  v4:= -v4 @kind int;
  #L43aba6.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L43abac.  v4:= temp;
  #L43abae.  if v4 != 0 then goto L43aafc;
  #L43abb2.  return @kind void;
  #L43abb4.  call `onNext`(v0, v7) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43abba.  goto L43aafc;
}
procedure `io.reactivex.internal.queue.SpscLinkedArrayQueue` `d`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.d:()Lio/reactivex/internal/queue/SpscLinkedArrayQueue;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L43a9c4.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43a9c8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43a9ce.  v0:= temp @kind object;
  #L43a9d0.  v0:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L43a9d4.  if v0 == 0 then goto L43a9da;
  #L43a9d8.  return v0 @kind object;
  #L43a9da.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L43a9de.  call temp:= `bufferSize`() @signature `Lio/reactivex/Observable;.bufferSize:()I` @kind static;
  #L43a9e4.  v1:= temp;
  #L43a9e6.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L43a9ec.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43a9f0.  v2:= 0I;
  #L43a9f2.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L43a9f8.  v1:= temp;
  #L43a9fa.  if v1 == 0 then goto L43a9c4;
  #L43a9fe.  return v0 @kind object;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43aa9c.  v0:= 1I;
  #L43aa9e.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.i` @type ^`boolean` := v0 @kind boolean;
  #L43aaa2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43aaa6.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43aaac.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43aab0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L43aab6.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a$a` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.e:(Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L43abcc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43abd0.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43abd6.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43abda.  call temp:= `addThrowable`(v2, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L43abe0.  v2:= temp;
  #L43abe2.  if v2 == 0 then goto L43ac14;
  #L43abe6.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.b` @type ^`boolean` @kind boolean;
  #L43abea.  if v2 != 0 then goto L43ac02;
  #L43abee.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43abf2.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43abf8.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43abfc.  call `dispose`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L43ac02.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43ac06.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43ac0c.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.b:()V` @kind virtual;
  #L43ac12.  goto L43ac1a;
  #L43ac14.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43ac1a.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a` v2 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a$a` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.f:(Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a$a;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L43ac2c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43ac30.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43ac36.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L43ac3c.  v3:= temp;
  #L43ac3e.  if v3 != 0 then goto L43acc8;
  #L43ac42.  v3:= 0I;
  #L43ac44.  v0:= 1I;
  #L43ac46.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L43ac4c.  v1:= temp;
  #L43ac4e.  if v1 == 0 then goto L43acc8;
  #L43ac52.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43ac56.  call `onNext`(v1, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43ac5c.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43ac60.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43ac66.  v4:= temp;
  #L43ac68.  if v4 != 0 then goto L43ac6e;
  #L43ac6c.  v3:= 1I;
  #L43ac6e.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43ac72.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43ac78.  v4:= temp @kind object;
  #L43ac7a.  v4:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v4 @kind object;
  #L43ac7e.  if v3 == 0 then goto L43acba;
  #L43ac82.  if v4 == 0 then goto L43ac92;
  #L43ac86.  call temp:= `isEmpty`(v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L43ac8c.  v3:= temp;
  #L43ac8e.  if v3 == 0 then goto L43acba;
  #L43ac92.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43ac96.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43ac9c.  v3:= temp @kind object;
  #L43ac9e.  if v3 == 0 then goto L43acae;
  #L43aca2.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43aca6.  call `onError`(v4, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43acac.  goto L43acb8;
  #L43acae.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43acb2.  call `onComplete`(v3) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43acb8.  return @kind void;
  #L43acba.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43acc0.  v3:= temp;
  #L43acc2.  if v3 != 0 then goto L43acf2;
  #L43acc6.  return @kind void;
  #L43acc8.  call temp:= `d`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.d:()Lio/reactivex/internal/queue/SpscLinkedArrayQueue;` @kind virtual;
  #L43acce.  v3:= temp @kind object;
  #L43acd0.  @monitorenter v3
  #L43acd2.  call temp:= `offer`(v3, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L43acd8.  @monitorexit v3
  #L43acda.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43acde.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43ace4.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43acea.  v3:= temp;
  #L43acec.  if v3 == 0 then goto L43acf2;
  #L43acf0.  return @kind void;
  #L43acf2.  call `c`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.c:()V` @kind virtual;
  #L43acf8.  return @kind void;
  #L43acfa.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43acfc.  @monitorexit v3
  #L43acfe.  throw v4;
  catch `java.lang.Throwable` @[L43acd2..L43acda] goto L43acfa;
  catch `java.lang.Throwable` @[L43acfc..L43acfe] goto L43acfa;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a9ac.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.i` @type ^`boolean` @kind boolean;
  #L43a9b0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43ad24.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43ad28.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43ad2e.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.b:()V` @kind virtual;
  #L43ad34.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43ad48.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43ad4c.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43ad52.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43ad56.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L43ad5c.  v0:= temp;
  #L43ad5e.  if v0 == 0 then goto L43ad7c;
  #L43ad62.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.b` @type ^`boolean` @kind boolean;
  #L43ad66.  if v2 != 0 then goto L43ad74;
  #L43ad6a.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43ad6e.  call `dispose`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L43ad74.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.b:()V` @kind virtual;
  #L43ad7a.  goto L43ad82;
  #L43ad7c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43ad82.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43ad94.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.f` @type ^`io.reactivex.functions.Function` @kind object;
  #L43ad98.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43ad9e.  v3:= temp @kind object;
  #L43ada0.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L43ada4.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43adaa.  v3:= temp @kind object;
  #L43adac.  v3:= (`io.reactivex.SingleSource`) v3 @kind object;
  #L43adb0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43adb4.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43adba.  v0:= new `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a$a`;
  #L43adbe.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;)V` @kind direct;
  #L43adc4.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43adc8.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43adce.  v1:= temp;
  #L43add0.  if v1 == 0 then goto L43adda;
  #L43add4.  call `subscribe`(v3, v0) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L43adda.  return @kind void;
  #L43addc.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43adde.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43ade4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43ade8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43adee.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43adf4.  return @kind void;
  catch `java.lang.Throwable` @[L43ad94..L43adb0] goto L43addc;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43ae14.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43ae18.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43ae1e.  v0:= temp;
  #L43ae20.  if v0 == 0 then goto L43ae32;
  #L43ae24.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.h` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L43ae28.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43ae2c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43ae32.  return @kind void;
}
