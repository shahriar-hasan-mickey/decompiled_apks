record `io.reactivex.internal.operators.observable.ObservableZip$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableZip$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableZip$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableZip$b`[] `io.reactivex.internal.operators.observable.ObservableZip$a.c` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.operators.observable.ObservableZip$a.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableZip$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableZip$a.f` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableZip$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableZip$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L449de0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L449de6.  v0.`io.reactivex.internal.operators.observable.ObservableZip$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L449dea.  v0.`io.reactivex.internal.operators.observable.ObservableZip$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L449dee.  v1:= new `io.reactivex.internal.operators.observable.ObservableZip$b`[v3];
  #L449df2.  v0.`io.reactivex.internal.operators.observable.ObservableZip$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableZip$b`[] := v1 @kind object;
  #L449df6.  v1:= new `java.lang.Object`[v3];
  #L449dfa.  v0.`io.reactivex.internal.operators.observable.ObservableZip$a.d` @type ^`java.lang.Object`[] := v1 @kind object;
  #L449dfe.  v0.`io.reactivex.internal.operators.observable.ObservableZip$a.e` @type ^`boolean` := v4 @kind boolean;
  #L449e02.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableZip$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.a:()V` @AccessFlag  {
    temp;

  #L449e14.  call `d`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.d:()V` @kind virtual;
  #L449e1a.  call `b`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.b:()V` @kind virtual;
  #L449e20.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableZip$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L449e34.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableZip$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableZip$b`[] @kind object;
  #L449e38.  v1:= length @variable v0;
  #L449e3a.  v2:= 0I;
  #L449e3c.  if v2 >= v1 then goto L449e50;
  #L449e40.  v3:= v0[v2] @kind object;
  #L449e44.  call `a`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$b;.a:()V` @kind virtual;
  #L449e4a.  v2:= v2 + 1;
  #L449e4e.  goto L449e3c;
  #L449e50.  return @kind void;
}
procedure `boolean` `c`(`io.reactivex.internal.operators.observable.ObservableZip$a` v2 @kind this, `boolean` v3 , `boolean` v4 , `io.reactivex.Observer` v5 @kind object, `boolean` v6 , `io.reactivex.internal.operators.observable.ObservableZip$b` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.c:(ZZLio/reactivex/Observer;ZLio/reactivex/internal/operators/observable/ObservableZip$b;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L449d50.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` @kind boolean;
  #L449d54.  v1:= 1I;
  #L449d56.  if v0 == 0 then goto L449d62;
  #L449d5a.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.a:()V` @kind virtual;
  #L449d60.  return v1;
  #L449d62.  if v3 == 0 then goto L449db4;
  #L449d66.  if v6 == 0 then goto L449d8c;
  #L449d6a.  if v4 == 0 then goto L449db4;
  #L449d6e.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableZip$b.d` @type ^`java.lang.Throwable` @kind object;
  #L449d72.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.a:()V` @kind virtual;
  #L449d78.  if v3 == 0 then goto L449d84;
  #L449d7c.  call `onError`(v5, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L449d82.  goto L449d8a;
  #L449d84.  call `onComplete`(v5) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L449d8a.  return v1;
  #L449d8c.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableZip$b.d` @type ^`java.lang.Throwable` @kind object;
  #L449d90.  if v3 == 0 then goto L449da2;
  #L449d94.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.a:()V` @kind virtual;
  #L449d9a.  call `onError`(v5, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L449da0.  return v1;
  #L449da2.  if v4 == 0 then goto L449db4;
  #L449da6.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.a:()V` @kind virtual;
  #L449dac.  call `onComplete`(v5) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L449db2.  return v1;
  #L449db4.  v3:= 0I;
  #L449db6.  return v3;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableZip$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L449e64.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableZip$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableZip$b`[] @kind object;
  #L449e68.  v1:= length @variable v0;
  #L449e6a.  v2:= 0I;
  #L449e6c.  if v2 >= v1 then goto L449e84;
  #L449e70.  v3:= v0[v2] @kind object;
  #L449e74.  v3:= v3.`io.reactivex.internal.operators.observable.ObservableZip$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L449e78.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L449e7e.  v2:= v2 + 1;
  #L449e82.  goto L449e6c;
  #L449e84.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableZip$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L449e98.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` @kind boolean;
  #L449e9c.  if v0 != 0 then goto L449ebe;
  #L449ea0.  v0:= 1I;
  #L449ea2.  v1.`io.reactivex.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` := v0 @kind boolean;
  #L449ea6.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.b:()V` @kind virtual;
  #L449eac.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L449eb2.  v0:= temp;
  #L449eb4.  if v0 != 0 then goto L449ebe;
  #L449eb8.  call `d`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.d:()V` @kind virtual;
  #L449ebe.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableZip$a` v20 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;

  #L449ed0.  v7:= v20 @kind object;
  #L449ed4.  call temp:= `getAndIncrement`(v20) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L449eda.  v0:= temp;
  #L449edc.  if v0 == 0 then goto L449ee2;
  #L449ee0.  return @kind void;
  #L449ee2.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableZip$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableZip$b`[] @kind object;
  #L449ee6.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableZip$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L449eea.  v9:= v7.`io.reactivex.internal.operators.observable.ObservableZip$a.d` @type ^`java.lang.Object`[] @kind object;
  #L449eee.  v10:= v7.`io.reactivex.internal.operators.observable.ObservableZip$a.e` @type ^`boolean` @kind boolean;
  #L449ef2.  v11:= 1I;
  #L449ef4.  v12:= 1I;
  #L449ef6.  v13:= length @variable v0;
  #L449ef8.  v14:= 0I;
  #L449efa.  v15:= 0I;
  #L449efc.  v16:= 0I;
  #L449f00.  v17:= 0I;
  #L449f04.  if v15 >= v13 then goto L449f88;
  #L449f08.  v6:= v0[v15] @kind object;
  #L449f0c.  v1:= v9[v17] @kind object;
  #L449f10.  if v1 != 0 then goto L449f5c;
  #L449f14.  v2:= v6.`io.reactivex.internal.operators.observable.ObservableZip$b.c` @type ^`boolean` @kind boolean;
  #L449f18.  v1:= v6.`io.reactivex.internal.operators.observable.ObservableZip$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L449f1c.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L449f22.  v18:= temp @kind object;
  #L449f24.  if v18 != 0 then goto L449f2e;
  #L449f28.  v19:= 1I;
  #L449f2c.  goto L449f32;
  #L449f2e.  v19:= 0I;
  #L449f32.  v1:= v20 @kind object;
  #L449f36.  v3:= v19;
  #L449f3a.  v4:= v8 @kind object;
  #L449f3c.  v5:= v10;
  #L449f3e.  call temp:= `c`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.c:(ZZLio/reactivex/Observer;ZLio/reactivex/internal/operators/observable/ObservableZip$b;)Z` @kind virtual;
  #L449f44.  v1:= temp;
  #L449f46.  if v1 == 0 then goto L449f4c;
  #L449f4a.  return @kind void;
  #L449f4c.  if v19 != 0 then goto L449f56;
  #L449f50.  v9[v17]:= v18 @kind object;
  #L449f54.  goto L449f7e;
  #L449f56.  v16:= v16 + 1;
  #L449f5a.  goto L449f7e;
  #L449f5c.  v1:= v6.`io.reactivex.internal.operators.observable.ObservableZip$b.c` @type ^`boolean` @kind boolean;
  #L449f60.  if v1 == 0 then goto L449f7e;
  #L449f64.  if v10 != 0 then goto L449f7e;
  #L449f68.  v1:= v6.`io.reactivex.internal.operators.observable.ObservableZip$b.d` @type ^`java.lang.Throwable` @kind object;
  #L449f6c.  if v1 == 0 then goto L449f7e;
  #L449f70.  call `a`(v20) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.a:()V` @kind virtual;
  #L449f76.  call `onError`(v8, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L449f7c.  return @kind void;
  #L449f7e.  v17:= v17 + 1;
  #L449f82.  v15:= v15 + 1;
  #L449f86.  goto L449f04;
  #L449f88.  if v16 == 0 then goto L449f9c;
  #L449f8c.  v1:= -v12 @kind int;
  #L449f8e.  call temp:= `addAndGet`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L449f94.  v12:= temp;
  #L449f96.  if v12 != 0 then goto L449ef6;
  #L449f9a.  return @kind void;
  #L449f9c.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableZip$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L449fa0.  call temp:= `clone`(v9) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L449fa6.  v2:= temp @kind object;
  #L449fa8.  call temp:= `apply`(v1, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L449fae.  v1:= temp @kind object;
  #L449fb0.  v2:= "The zipper returned a null value" @kind object;
  #L449fb4.  call temp:= `requireNonNull`(v1, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L449fba.  v1:= temp @kind object;
  #L449fbc.  call `onNext`(v8, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L449fc2.  v1:= 0I;
  #L449fc4.  call `fill`(v9, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L449fca.  goto L449ef6;
  #L449fcc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L449fce.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L449fd4.  call `a`(v20) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.a:()V` @kind virtual;
  #L449fda.  call `onError`(v8, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L449fe0.  return @kind void;
  catch `java.lang.Throwable` @[L449f9c..L449fbc] goto L449fcc;
}
procedure `void` `f`(`io.reactivex.internal.operators.observable.ObservableZip$a` v5 @kind this, `io.reactivex.ObservableSource`[] v6 @kind object, `int` v7 ) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.f:([Lio/reactivex/ObservableSource;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44a000.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableZip$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableZip$b`[] @kind object;
  #L44a004.  v1:= length @variable v0;
  #L44a006.  v2:= 0I;
  #L44a008.  v3:= 0I;
  #L44a00a.  if v3 >= v1 then goto L44a022;
  #L44a00e.  v4:= new `io.reactivex.internal.operators.observable.ObservableZip$b`;
  #L44a012.  call `<init>`(v4, v5, v7) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$b;.<init>:(Lio/reactivex/internal/operators/observable/ObservableZip$a;I)V` @kind direct;
  #L44a018.  v0[v3]:= v4 @kind object;
  #L44a01c.  v3:= v3 + 1;
  #L44a020.  goto L44a00a;
  #L44a022.  call `lazySet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L44a028.  v7:= v5.`io.reactivex.internal.operators.observable.ObservableZip$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L44a02c.  call `onSubscribe`(v7, v5) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L44a032.  if v2 >= v1 then goto L44a054;
  #L44a036.  v7:= v5.`io.reactivex.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` @kind boolean;
  #L44a03a.  if v7 == 0 then goto L44a040;
  #L44a03e.  return @kind void;
  #L44a040.  v7:= v6[v2] @kind object;
  #L44a044.  v3:= v0[v2] @kind object;
  #L44a048.  call `subscribe`(v7, v3) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L44a04e.  v2:= v2 + 1;
  #L44a052.  goto L44a032;
  #L44a054.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableZip$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L449dc8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` @kind boolean;
  #L449dcc.  return v0;
}
