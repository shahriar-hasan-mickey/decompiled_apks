record `io.reactivex.internal.operators.observable.ObservableDetach$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableDetach$a.a` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableDetach$a.b` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableDetach$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDetach$a;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L437fcc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L437fd2.  v0.`io.reactivex.internal.operators.observable.ObservableDetach$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L437fd6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableDetach$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDetach$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L437fe8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableDetach$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L437fec.  v1:= `@@io.reactivex.internal.util.EmptyComponent.INSTANCE` @type ^`io.reactivex.internal.util.EmptyComponent` @kind object;
  #L437ff0.  v2.`io.reactivex.internal.operators.observable.ObservableDetach$a.b` @type ^`io.reactivex.disposables.Disposable` := v1 @kind object;
  #L437ff4.  call temp:= `asObserver`() @signature `Lio/reactivex/internal/util/EmptyComponent;.asObserver:()Lio/reactivex/Observer;` @kind static;
  #L437ffa.  v1:= temp @kind object;
  #L437ffc.  v2.`io.reactivex.internal.operators.observable.ObservableDetach$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L438000.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L438006.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableDetach$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDetach$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L437fac.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDetach$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L437fb0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L437fb6.  v0:= temp;
  #L437fb8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableDetach$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDetach$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L438018.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableDetach$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43801c.  v1:= `@@io.reactivex.internal.util.EmptyComponent.INSTANCE` @type ^`io.reactivex.internal.util.EmptyComponent` @kind object;
  #L438020.  v2.`io.reactivex.internal.operators.observable.ObservableDetach$a.b` @type ^`io.reactivex.disposables.Disposable` := v1 @kind object;
  #L438024.  call temp:= `asObserver`() @signature `Lio/reactivex/internal/util/EmptyComponent;.asObserver:()Lio/reactivex/Observer;` @kind static;
  #L43802a.  v1:= temp @kind object;
  #L43802c.  v2.`io.reactivex.internal.operators.observable.ObservableDetach$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L438030.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L438036.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableDetach$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDetach$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L438048.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableDetach$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43804c.  v1:= `@@io.reactivex.internal.util.EmptyComponent.INSTANCE` @type ^`io.reactivex.internal.util.EmptyComponent` @kind object;
  #L438050.  v2.`io.reactivex.internal.operators.observable.ObservableDetach$a.b` @type ^`io.reactivex.disposables.Disposable` := v1 @kind object;
  #L438054.  call temp:= `asObserver`() @signature `Lio/reactivex/internal/util/EmptyComponent;.asObserver:()Lio/reactivex/Observer;` @kind static;
  #L43805a.  v1:= temp @kind object;
  #L43805c.  v2.`io.reactivex.internal.operators.observable.ObservableDetach$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L438060.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L438066.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableDetach$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDetach$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438078.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDetach$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43807c.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L438082.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableDetach$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDetach$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438094.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDetach$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L438098.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43809e.  v0:= temp;
  #L4380a0.  if v0 == 0 then goto L4380b2;
  #L4380a4.  v1.`io.reactivex.internal.operators.observable.ObservableDetach$a.b` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L4380a8.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableDetach$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4380ac.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4380b2.  return @kind void;
}
