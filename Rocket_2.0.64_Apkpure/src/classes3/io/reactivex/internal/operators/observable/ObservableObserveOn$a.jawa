record `io.reactivex.internal.operators.observable.ObservableObserveOn$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicIntQueueDisposable` @kind class, `io.reactivex.Observer` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableObserveOn$a.a` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.observable.ObservableObserveOn$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableObserveOn$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableObserveOn$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.observable.ObservableObserveOn$a.e` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableObserveOn$a.f` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.ObservableObserveOn$a.g` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableObserveOn$a.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableObserveOn$a.i` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.observable.ObservableObserveOn$a.j` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableObserveOn$a.k` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableObserveOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.Scheduler$Worker` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/Scheduler$Worker;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43ebbc.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L43ebc2.  v0.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L43ebc6.  v0.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.Scheduler$Worker` := v2 @kind object;
  #L43ebca.  v0.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.c` @type ^`boolean` := v3 @kind boolean;
  #L43ebce.  v0.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.d` @type ^`int` := v4;
  #L43ebd2.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v2 @kind this, `boolean` v3 , `boolean` v4 , `io.reactivex.Observer` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.a:(ZZLio/reactivex/Observer;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L43eaac.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L43eab0.  v1:= 1I;
  #L43eab2.  if v0 == 0 then goto L43eac2;
  #L43eab6.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L43eaba.  call `clear`(v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L43eac0.  return v1;
  #L43eac2.  if v3 == 0 then goto L43eb2a;
  #L43eac6.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.g` @type ^`java.lang.Throwable` @kind object;
  #L43eaca.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.c` @type ^`boolean` @kind boolean;
  #L43eace.  if v0 == 0 then goto L43eaf4;
  #L43ead2.  if v4 == 0 then goto L43eb2a;
  #L43ead6.  if v3 == 0 then goto L43eae2;
  #L43eada.  call `onError`(v5, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43eae0.  goto L43eae8;
  #L43eae2.  call `onComplete`(v5) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43eae8.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L43eaec.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43eaf2.  return v1;
  #L43eaf4.  if v3 == 0 then goto L43eb14;
  #L43eaf8.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L43eafc.  call `clear`(v4) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L43eb02.  call `onError`(v5, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43eb08.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L43eb0c.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43eb12.  return v1;
  #L43eb14.  if v4 == 0 then goto L43eb2a;
  #L43eb18.  call `onComplete`(v5) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43eb1e.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L43eb22.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43eb28.  return v1;
  #L43eb2a.  v3:= 0I;
  #L43eb2c.  return v3;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43ebe4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L43ebe8.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L43ebee.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43ec00.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L43ec04.  if v0 != 0 then goto L43ec38;
  #L43ec08.  v0:= 1I;
  #L43ec0a.  v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` := v0 @kind boolean;
  #L43ec0e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43ec12.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43ec18.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L43ec1c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43ec22.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43ec28.  v0:= temp;
  #L43ec2a.  if v0 != 0 then goto L43ec38;
  #L43ec2e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L43ec32.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L43ec38.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43ec4c.  v0:= 1I;
  #L43ec4e.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L43ec52.  if v1 == 0 then goto L43ec58;
  #L43ec56.  return @kind void;
  #L43ec58.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L43ec5c.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.g` @type ^`java.lang.Throwable` @kind object;
  #L43ec60.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.c` @type ^`boolean` @kind boolean;
  #L43ec64.  if v3 != 0 then goto L43ec86;
  #L43ec68.  if v1 == 0 then goto L43ec86;
  #L43ec6c.  if v2 == 0 then goto L43ec86;
  #L43ec70.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43ec74.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43ec7a.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L43ec7e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43ec84.  return @kind void;
  #L43ec86.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43ec8a.  v3:= 0I;
  #L43ec8c.  call `onNext`(v2, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43ec92.  if v1 == 0 then goto L43ecc0;
  #L43ec96.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.g` @type ^`java.lang.Throwable` @kind object;
  #L43ec9a.  if v0 == 0 then goto L43ecaa;
  #L43ec9e.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43eca2.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43eca8.  goto L43ecb4;
  #L43ecaa.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43ecae.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43ecb4.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L43ecb8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43ecbe.  return @kind void;
  #L43ecc0.  v0:= -v0 @kind int;
  #L43ecc2.  call temp:= `addAndGet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L43ecc8.  v0:= temp;
  #L43ecca.  if v0 != 0 then goto L43ec4e;
  #L43ecce.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v7 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L43ece0.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L43ece4.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43ece8.  v2:= 1I;
  #L43ecea.  v3:= 1I;
  #L43ecec.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L43ecf0.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L43ecf6.  v5:= temp;
  #L43ecf8.  call temp:= `a`(v7, v4, v5, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.a:(ZZLio/reactivex/Observer;)Z` @kind virtual;
  #L43ecfe.  v4:= temp;
  #L43ed00.  if v4 == 0 then goto L43ed06;
  #L43ed04.  return @kind void;
  #L43ed06.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L43ed0a.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L43ed10.  v5:= temp @kind object;
  #L43ed12.  if v5 != 0 then goto L43ed1a;
  #L43ed16.  v6:= 1I;
  #L43ed18.  goto L43ed1c;
  #L43ed1a.  v6:= 0I;
  #L43ed1c.  call temp:= `a`(v7, v4, v6, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.a:(ZZLio/reactivex/Observer;)Z` @kind virtual;
  #L43ed22.  v4:= temp;
  #L43ed24.  if v4 == 0 then goto L43ed2a;
  #L43ed28.  return @kind void;
  #L43ed2a.  if v6 == 0 then goto L43ed3e;
  #L43ed2e.  v3:= -v3 @kind int;
  #L43ed30.  call temp:= `addAndGet`(v7, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L43ed36.  v3:= temp;
  #L43ed38.  if v3 != 0 then goto L43ecec;
  #L43ed3c.  return @kind void;
  #L43ed3e.  call `onNext`(v1, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43ed44.  goto L43ed06;
  #L43ed46.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43ed48.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43ed4e.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43ed52.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43ed58.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L43ed5e.  call `onError`(v1, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43ed64.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L43ed68.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43ed6e.  return @kind void;
  catch `java.lang.Throwable` @[L43ed0a..L43ed12] goto L43ed46;
}
procedure `void` `g`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.g:()V` @AccessFlag  {
    temp;
    v0;

  #L43eee0.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43eee6.  v0:= temp;
  #L43eee8.  if v0 != 0 then goto L43eef6;
  #L43eeec.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L43eef0.  call temp:= `schedule`(v0, v1) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L43eef6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43eb40.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L43eb44.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43eb58.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L43eb5c.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L43eb62.  v0:= temp;
  #L43eb64.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43ed8c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L43ed90.  if v0 == 0 then goto L43ed96;
  #L43ed94.  return @kind void;
  #L43ed96.  v0:= 1I;
  #L43ed98.  v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` := v0 @kind boolean;
  #L43ed9c.  call `g`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.g:()V` @kind virtual;
  #L43eda2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43edb4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L43edb8.  if v0 == 0 then goto L43edc4;
  #L43edbc.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43edc2.  return @kind void;
  #L43edc4.  v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.g` @type ^`java.lang.Throwable` := v2 @kind object;
  #L43edc8.  v2:= 1I;
  #L43edca.  v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` := v2 @kind boolean;
  #L43edce.  call `g`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.g:()V` @kind virtual;
  #L43edd4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43ede8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L43edec.  if v0 == 0 then goto L43edf2;
  #L43edf0.  return @kind void;
  #L43edf2.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.j` @type ^`int`;
  #L43edf6.  v1:= 2I;
  #L43edf8.  if v0 == v1 then goto L43ee06;
  #L43edfc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L43ee00.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L43ee06.  call `g`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.g:()V` @kind virtual;
  #L43ee0c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43ee20.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43ee24.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43ee2a.  v0:= temp;
  #L43ee2c.  if v0 == 0 then goto L43eea4;
  #L43ee30.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.f` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L43ee34.  v0:= instanceof @variable v3 @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind boolean;
  #L43ee38.  if v0 == 0 then goto L43ee88;
  #L43ee3c.  v3:= (`io.reactivex.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L43ee40.  v0:= 7I;
  #L43ee42.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L43ee48.  v0:= temp;
  #L43ee4a.  v1:= 1I;
  #L43ee4c.  if v0 != v1 then goto L43ee6e;
  #L43ee50.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.j` @type ^`int` := v0;
  #L43ee54.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L43ee58.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` := v1 @kind boolean;
  #L43ee5c.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43ee60.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43ee66.  call `g`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.g:()V` @kind virtual;
  #L43ee6c.  return @kind void;
  #L43ee6e.  v1:= 2I;
  #L43ee70.  if v0 != v1 then goto L43ee88;
  #L43ee74.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.j` @type ^`int` := v0;
  #L43ee78.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L43ee7c.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43ee80.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43ee86.  return @kind void;
  #L43ee88.  v3:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L43ee8c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.d` @type ^`int`;
  #L43ee90.  call `<init>`(v3, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L43ee96.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L43ee9a.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43ee9e.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43eea4.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43eb9c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L43eba0.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L43eba6.  v0:= temp @kind object;
  #L43eba8.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43eb78.  v0:= 2I;
  #L43eb7a.  v2:= v2 ^& v0 @kind int;
  #L43eb7c.  if v2 == 0 then goto L43eb88;
  #L43eb80.  v2:= 1I;
  #L43eb82.  v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.k` @type ^`boolean` := v2 @kind boolean;
  #L43eb86.  return v0;
  #L43eb88.  v2:= 0I;
  #L43eb8a.  return v2;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43eeb8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.k` @type ^`boolean` @kind boolean;
  #L43eebc.  if v0 == 0 then goto L43eec8;
  #L43eec0.  call `e`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.e:()V` @kind virtual;
  #L43eec6.  goto L43eece;
  #L43eec8.  call `f`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.f:()V` @kind virtual;
  #L43eece.  return @kind void;
}
