record `io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$b;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L44963c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L449642.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L449646.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L44964c.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L449650.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L449654.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L44965a.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L44965e.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b.a` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L449662.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b.b` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L449666.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$b;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L449774.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L449778.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44977e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L449782.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L449788.  return @kind void;
}
procedure `boolean` `b`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$b;.b:(Lio/reactivex/disposables/Disposable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44961c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L449620.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L449626.  v2:= temp;
  #L449628.  return v2;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L449678.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44967c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L449682.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L449686.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44968c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4495f0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4495f4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4495fa.  v0:= temp @kind object;
  #L4495fc.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L449600.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L449606.  v0:= temp;
  #L449608.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4496a0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4496a4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4496aa.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L4496ae.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4496b4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4496c8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4496cc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4496d2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L4496d6.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4496dc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4496f0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4496f6.  v0:= temp @kind object;
  #L4496f8.  if v0 == 0 then goto L449738;
  #L4496fc.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b.b` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L449700.  call temp:= `apply`(v1, v3, v0) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L449706.  v3:= temp @kind object;
  #L449708.  v0:= "The combiner returned a null value" @kind object;
  #L44970c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L449712.  v3:= temp @kind object;
  #L449714.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L449718.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44971e.  goto L449738;
  #L449720.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L449722.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L449728.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$b;.dispose:()V` @kind virtual;
  #L44972e.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L449732.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L449738.  return @kind void;
  catch `java.lang.Throwable` @[L4496fc..L449714] goto L449720;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L449758.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44975c.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L449762.  return @kind void;
}
