record `io.reactivex.internal.operators.observable.ObservableRepeat$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableRepeat$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableRepeat$a.b` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableRepeat$a.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableRepeat$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRepeat$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRepeat$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `io.reactivex.internal.disposables.SequentialDisposable` v4 @kind object, `io.reactivex.ObservableSource` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$a;.<init>:(Lio/reactivex/Observer;JLio/reactivex/internal/disposables/SequentialDisposable;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4406ac.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4406b2.  v0.`io.reactivex.internal.operators.observable.ObservableRepeat$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4406b6.  v0.`io.reactivex.internal.operators.observable.ObservableRepeat$a.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v4 @kind object;
  #L4406ba.  v0.`io.reactivex.internal.operators.observable.ObservableRepeat$a.c` @type ^`io.reactivex.ObservableSource` := v5 @kind object;
  #L4406be.  v0.`io.reactivex.internal.operators.observable.ObservableRepeat$a.d` @type ^`long` := v2 @kind wide;
  #L4406c2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableRepeat$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L44077c.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L440782.  v0:= temp;
  #L440784.  if v0 != 0 then goto L4407b4;
  #L440788.  v0:= 1I;
  #L44078a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeat$a.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L44078e.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.isDisposed:()Z` @kind virtual;
  #L440794.  v1:= temp;
  #L440796.  if v1 == 0 then goto L44079c;
  #L44079a.  return @kind void;
  #L44079c.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeat$a.c` @type ^`io.reactivex.ObservableSource` @kind object;
  #L4407a0.  call `subscribe`(v1, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4407a6.  v0:= -v0 @kind int;
  #L4407a8.  call temp:= `addAndGet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4407ae.  v0:= temp;
  #L4407b0.  if v0 != 0 then goto L44078a;
  #L4407b4.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableRepeat$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4406d4.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRepeat$a.d` @type ^`long` @kind wide;
  #L4406d8.  v2:= 9223372036854775807L;
  #L4406e2.  v4:= lcmp(v0, v2);
  #L4406e6.  if v4 == 0 then goto L4406f6;
  #L4406ea.  v2:= 1L;
  #L4406ee.  v2:= v0 - v2 @kind long;
  #L4406f2.  v5.`io.reactivex.internal.operators.observable.ObservableRepeat$a.d` @type ^`long` := v2 @kind wide;
  #L4406f6.  v2:= 0L;
  #L4406fa.  v4:= lcmp(v0, v2);
  #L4406fe.  if v4 == 0 then goto L44070a;
  #L440702.  call `a`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$a;.a:()V` @kind virtual;
  #L440708.  goto L440714;
  #L44070a.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRepeat$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L44070e.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L440714.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableRepeat$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L440728.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeat$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L44072c.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L440732.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableRepeat$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L440744.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeat$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L440748.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44074e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableRepeat$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L440760.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeat$a.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L440764.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L44076a.  return @kind void;
}
