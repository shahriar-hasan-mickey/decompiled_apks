record `io.reactivex.internal.operators.observable.ObservableUsing$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableUsing$a.a` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableUsing$a.b` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.observable.ObservableUsing$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableUsing$a.d` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableUsing$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableUsing$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableUsing$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$a;.<init>:(Lio/reactivex/Observer;Ljava/lang/Object;Lio/reactivex/functions/Consumer;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L447044.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L44704a.  v0.`io.reactivex.internal.operators.observable.ObservableUsing$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L44704e.  v0.`io.reactivex.internal.operators.observable.ObservableUsing$a.b` @type ^`java.lang.Object` := v2 @kind object;
  #L447052.  v0.`io.reactivex.internal.operators.observable.ObservableUsing$a.c` @type ^`io.reactivex.functions.Consumer` := v3 @kind object;
  #L447056.  v0.`io.reactivex.internal.operators.observable.ObservableUsing$a.d` @type ^`boolean` := v4 @kind boolean;
  #L44705a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableUsing$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L447090.  v0:= 0I;
  #L447092.  v1:= 1I;
  #L447094.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L44709a.  v0:= temp;
  #L44709c.  if v0 == 0 then goto L4470be;
  #L4470a0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$a.c` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4470a4.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$a.b` @type ^`java.lang.Object` @kind object;
  #L4470a8.  call `accept`(v0, v1) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4470ae.  goto L4470be;
  #L4470b0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4470b2.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4470b8.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4470be.  return @kind void;
  catch `java.lang.Throwable` @[L4470a0..L4470ae] goto L4470b0;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableUsing$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44706c.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$a;.a:()V` @kind virtual;
  #L447072.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableUsing$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L447076.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44707c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableUsing$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L447028.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L44702e.  v0:= temp;
  #L447030.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableUsing$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4470dc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$a.d` @type ^`boolean` @kind boolean;
  #L4470e0.  if v0 == 0 then goto L44712e;
  #L4470e4.  v0:= 0I;
  #L4470e6.  v1:= 1I;
  #L4470e8.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4470ee.  v0:= temp;
  #L4470f0.  if v0 == 0 then goto L447118;
  #L4470f4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$a.c` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4470f8.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$a.b` @type ^`java.lang.Object` @kind object;
  #L4470fc.  call `accept`(v0, v1) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L447102.  goto L447118;
  #L447104.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L447106.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44710c.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L447110.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L447116.  return @kind void;
  #L447118.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L44711c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L447122.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L447126.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L44712c.  goto L447148;
  #L44712e.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L447132.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L447138.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L44713c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L447142.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$a;.a:()V` @kind virtual;
  #L447148.  return @kind void;
  catch `java.lang.Throwable` @[L4470f4..L447102] goto L447104;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableUsing$a` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L447168.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableUsing$a.d` @type ^`boolean` @kind boolean;
  #L44716c.  if v0 == 0 then goto L4471c8;
  #L447170.  v0:= 0I;
  #L447172.  v1:= 1I;
  #L447174.  call temp:= `compareAndSet`(v5, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L44717a.  v2:= temp;
  #L44717c.  if v2 == 0 then goto L4471b2;
  #L447180.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableUsing$a.c` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L447184.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableUsing$a.b` @type ^`java.lang.Object` @kind object;
  #L447188.  call `accept`(v2, v3) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L44718e.  goto L4471b2;
  #L447190.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L447192.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L447198.  v3:= new `io.reactivex.exceptions.CompositeException`;
  #L44719c.  v4:= 2I;
  #L44719e.  v4:= new `java.lang.Throwable`[v4];
  #L4471a2.  v4[v0]:= v6 @kind object;
  #L4471a6.  v4[v1]:= v2 @kind object;
  #L4471aa.  call `<init>`(v3, v4) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4471b0.  v6:= v3 @kind object;
  #L4471b2.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableUsing$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4471b6.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4471bc.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableUsing$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4471c0.  call `onError`(v0, v6) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4471c6.  goto L4471e2;
  #L4471c8.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableUsing$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4471cc.  call `onError`(v0, v6) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4471d2.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableUsing$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4471d6.  call `dispose`(v6) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4471dc.  call `a`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$a;.a:()V` @kind virtual;
  #L4471e2.  return @kind void;
  catch `java.lang.Throwable` @[L447180..L44718e] goto L447190;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableUsing$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L447200.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableUsing$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L447204.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44720a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableUsing$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44721c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableUsing$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L447220.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L447226.  v0:= temp;
  #L447228.  if v0 == 0 then goto L44723a;
  #L44722c.  v1.`io.reactivex.internal.operators.observable.ObservableUsing$a.e` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L447230.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableUsing$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L447234.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L44723a.  return @kind void;
}
