record `io.reactivex.internal.operators.observable.ObservableTakeWhile$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableTakeWhile$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.observable.ObservableTakeWhile$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableTakeWhile$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableTakeWhile$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTakeWhile$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeWhile$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L445900.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L445906.  v0.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L44590a.  v0.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.b` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L44590e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTakeWhile$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeWhile$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L445920.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L445924.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44592a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTakeWhile$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeWhile$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4458e0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4458e4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4458ea.  v0:= temp;
  #L4458ec.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTakeWhile$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeWhile$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44593c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.d` @type ^`boolean` @kind boolean;
  #L445940.  if v0 == 0 then goto L445946;
  #L445944.  return @kind void;
  #L445946.  v0:= 1I;
  #L445948.  v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.d` @type ^`boolean` := v0 @kind boolean;
  #L44594c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L445950.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L445956.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTakeWhile$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeWhile$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L445968.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.d` @type ^`boolean` @kind boolean;
  #L44596c.  if v0 == 0 then goto L445978;
  #L445970.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L445976.  return @kind void;
  #L445978.  v0:= 1I;
  #L44597a.  v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.d` @type ^`boolean` := v0 @kind boolean;
  #L44597e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L445982.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L445988.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTakeWhile$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeWhile$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44599c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.d` @type ^`boolean` @kind boolean;
  #L4459a0.  if v0 == 0 then goto L4459a6;
  #L4459a4.  return @kind void;
  #L4459a6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.b` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L4459aa.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4459b0.  v0:= temp;
  #L4459b2.  if v0 != 0 then goto L4459d2;
  #L4459b6.  v2:= 1I;
  #L4459b8.  v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.d` @type ^`boolean` := v2 @kind boolean;
  #L4459bc.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4459c0.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4459c6.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4459ca.  call `onComplete`(v2) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4459d0.  return @kind void;
  #L4459d2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4459d6.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4459dc.  return @kind void;
  #L4459de.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4459e0.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4459e6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4459ea.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4459f0.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeWhile$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4459f6.  return @kind void;
  catch `java.lang.Throwable` @[L4459a6..L4459b2] goto L4459de;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTakeWhile$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeWhile$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L445a14.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L445a18.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L445a1e.  v0:= temp;
  #L445a20.  if v0 == 0 then goto L445a32;
  #L445a24.  v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L445a28.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L445a2c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L445a32.  return @kind void;
}
