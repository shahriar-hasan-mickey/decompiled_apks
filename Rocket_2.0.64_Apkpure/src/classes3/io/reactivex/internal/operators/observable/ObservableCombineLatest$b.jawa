record `io.reactivex.internal.operators.observable.ObservableCombineLatest$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableCombineLatest$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableCombineLatest$b.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableCombineLatest$a`[] `io.reactivex.internal.operators.observable.ObservableCombineLatest$b.c` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.operators.observable.ObservableCombineLatest$b.d` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.observable.ObservableCombineLatest$b.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableCombineLatest$b.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableCombineLatest$b.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableCombineLatest$b.h` @AccessFlag VOLATILE;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableCombineLatest$b.i` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableCombineLatest$b.j` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableCombineLatest$b.k` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableCombineLatest$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableCombineLatest$b` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 , `int` v5 , `boolean` v6 ) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;IIZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L43584c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L435852.  v0:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L435856.  call `<init>`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L43585c.  v1.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.i` @type ^`io.reactivex.internal.util.AtomicThrowable` := v0 @kind object;
  #L435860.  v1.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.a` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L435864.  v1.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.b` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L435868.  v1.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.f` @type ^`boolean` := v6 @kind boolean;
  #L43586c.  v2:= new `java.lang.Object`[v4];
  #L435870.  v1.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.d` @type ^`java.lang.Object`[] := v2 @kind object;
  #L435874.  v2:= new `io.reactivex.internal.operators.observable.ObservableCombineLatest$a`[v4];
  #L435878.  v1.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableCombineLatest$a`[] := v2 @kind object;
  #L43587c.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L435880.  call `<init>`(v2, v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L435886.  v1.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.e` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L43588a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableCombineLatest$b` v0 @kind this, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.a:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @AccessFlag  {
    temp;

  #L43589c.  call `d`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.d:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4358a2.  call `b`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.b:()V` @kind virtual;
  #L4358a8.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableCombineLatest$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4358bc.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableCombineLatest$a`[] @kind object;
  #L4358c0.  v1:= length @variable v0;
  #L4358c2.  v2:= 0I;
  #L4358c4.  if v2 >= v1 then goto L4358d8;
  #L4358c8.  v3:= v0[v2] @kind object;
  #L4358cc.  call `a`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$a;.a:()V` @kind virtual;
  #L4358d2.  v2:= v2 + 1;
  #L4358d6.  goto L4358c4;
  #L4358d8.  return @kind void;
}
procedure `boolean` `c`(`io.reactivex.internal.operators.observable.ObservableCombineLatest$b` v2 @kind this, `boolean` v3 , `boolean` v4 , `io.reactivex.Observer` v5 @kind object, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v6 @kind object, `boolean` v7 ) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.c:(ZZLio/reactivex/Observer;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L435798.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.g` @type ^`boolean` @kind boolean;
  #L43579c.  v1:= 1I;
  #L43579e.  if v0 == 0 then goto L4357aa;
  #L4357a2.  call `a`(v2, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.a:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4357a8.  return v1;
  #L4357aa.  if v3 == 0 then goto L435820;
  #L4357ae.  if v7 == 0 then goto L4357dc;
  #L4357b2.  if v4 == 0 then goto L435820;
  #L4357b6.  call `a`(v2, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.a:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4357bc.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.i` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4357c0.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4357c6.  v3:= temp @kind object;
  #L4357c8.  if v3 == 0 then goto L4357d4;
  #L4357cc.  call `onError`(v5, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4357d2.  goto L4357da;
  #L4357d4.  call `onComplete`(v5) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4357da.  return v1;
  #L4357dc.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.i` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4357e0.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4357e6.  v3:= temp @kind object;
  #L4357e8.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L4357ec.  if v3 == 0 then goto L43580a;
  #L4357f0.  call `a`(v2, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.a:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4357f6.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.i` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4357fa.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L435800.  v3:= temp @kind object;
  #L435802.  call `onError`(v5, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L435808.  return v1;
  #L43580a.  if v4 == 0 then goto L435820;
  #L43580e.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.e` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L435812.  call `d`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.d:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L435818.  call `onComplete`(v5) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43581e.  return v1;
  #L435820.  v3:= 0I;
  #L435822.  return v3;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableCombineLatest$b` v2 @kind this, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.d:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4358ec.  @monitorenter v2
  #L4358ee.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.d` @type ^`java.lang.Object`[] @kind object;
  #L4358f2.  v1:= 0I;
  #L4358f4.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L4358fa.  @monitorexit v2
  #L4358fc.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L435902.  return @kind void;
  #L435904.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L435906.  @monitorexit v2
  #L435908.  throw v3;
  catch `java.lang.Throwable` @[L4358ee..L4358fc] goto L435904;
  catch `java.lang.Throwable` @[L435906..L435908] goto L435904;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableCombineLatest$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435a10.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.g` @type ^`boolean` @kind boolean;
  #L435a14.  if v0 != 0 then goto L435a3a;
  #L435a18.  v0:= 1I;
  #L435a1a.  v1.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.g` @type ^`boolean` := v0 @kind boolean;
  #L435a1e.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.b:()V` @kind virtual;
  #L435a24.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L435a2a.  v0:= temp;
  #L435a2c.  if v0 != 0 then goto L435a3a;
  #L435a30.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.e` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L435a34.  call `d`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.d:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L435a3a.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableCombineLatest$b` v7 @kind this, `java.lang.Object` v8 @kind object, `int` v9 ) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.e:(Ljava/lang/Object;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L435930.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableCombineLatest$a`[] @kind object;
  #L435934.  v0:= v0[v9] @kind object;
  #L435938.  @monitorenter v7
  #L43593a.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.g` @type ^`boolean` @kind boolean;
  #L43593e.  if v1 == 0 then goto L435946;
  #L435942.  @monitorexit v7
  #L435944.  return @kind void;
  #L435946.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.d` @type ^`java.lang.Object`[] @kind object;
  #L43594a.  v2:= length @variable v1;
  #L43594c.  v3:= v1[v9] @kind object;
  #L435950.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.j` @type ^`int`;
  #L435954.  if v3 != 0 then goto L435960;
  #L435958.  v4:= v4 + 1;
  #L43595c.  v7.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.j` @type ^`int` := v4;
  #L435960.  v5:= v7.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.k` @type ^`int`;
  #L435964.  if v8 != 0 then goto L435972;
  #L435968.  v5:= v5 + 1;
  #L43596c.  v7.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.k` @type ^`int` := v5;
  #L435970.  goto L435976;
  #L435972.  v1[v9]:= v8 @kind object;
  #L435976.  v9:= 0I;
  #L435978.  v6:= 1I;
  #L43597a.  if v4 != v2 then goto L435982;
  #L43597e.  v4:= 1I;
  #L435980.  goto L435984;
  #L435982.  v4:= 0I;
  #L435984.  if v5 == v2 then goto L435990;
  #L435988.  if v8 != 0 then goto L435992;
  #L43598c.  if v3 != 0 then goto L435992;
  #L435990.  v9:= 1I;
  #L435992.  if v9 != 0 then goto L4359cc;
  #L435996.  if v8 == 0 then goto L4359b2;
  #L43599a.  if v4 == 0 then goto L4359b2;
  #L43599e.  v9:= v7.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.e` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4359a2.  call temp:= `clone`(v1) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L4359a8.  v1:= temp @kind object;
  #L4359aa.  call temp:= `offer`(v9, v0, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4359b0.  goto L4359d0;
  #L4359b2.  if v8 != 0 then goto L4359d0;
  #L4359b6.  v9:= v7.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.i` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4359ba.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4359c0.  v9:= temp @kind object;
  #L4359c2.  if v9 == 0 then goto L4359d0;
  #L4359c6.  v7.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.h` @type ^`boolean` := v6 @kind boolean;
  #L4359ca.  goto L4359d0;
  #L4359cc.  v7.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.h` @type ^`boolean` := v6 @kind boolean;
  #L4359d0.  @monitorexit v7
  #L4359d2.  if v4 != 0 then goto L4359dc;
  #L4359d6.  if v8 == 0 then goto L4359dc;
  #L4359da.  return @kind void;
  #L4359dc.  call `f`(v7) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.f:()V` @kind virtual;
  #L4359e2.  return @kind void;
  #L4359e4.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4359e6.  @monitorexit v7
  #L4359e8.  throw v8;
  catch `java.lang.Throwable` @[L43593a..L4359d2] goto L4359e4;
  catch `java.lang.Throwable` @[L4359e6..L4359e8] goto L4359e4;
}
procedure `void` `f`(`io.reactivex.internal.operators.observable.ObservableCombineLatest$b` v12 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L435a4c.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L435a52.  v0:= temp;
  #L435a54.  if v0 == 0 then goto L435a5a;
  #L435a58.  return @kind void;
  #L435a5a.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.e` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L435a5e.  v7:= v12.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L435a62.  v8:= v12.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.f` @type ^`boolean` @kind boolean;
  #L435a66.  v9:= 1I;
  #L435a68.  v10:= 1I;
  #L435a6a.  v2:= v12.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.h` @type ^`boolean` @kind boolean;
  #L435a6e.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L435a74.  v3:= temp;
  #L435a76.  v1:= v12 @kind object;
  #L435a78.  v4:= v7 @kind object;
  #L435a7a.  v5:= v0 @kind object;
  #L435a7c.  v6:= v8;
  #L435a7e.  call temp:= `c`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.c:(ZZLio/reactivex/Observer;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Z)Z` @kind virtual;
  #L435a84.  v1:= temp;
  #L435a86.  if v1 == 0 then goto L435a8c;
  #L435a8a.  return @kind void;
  #L435a8c.  v2:= v12.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.h` @type ^`boolean` @kind boolean;
  #L435a90.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L435a96.  v1:= temp @kind object;
  #L435a98.  v1:= (`io.reactivex.internal.operators.observable.ObservableCombineLatest$a`) v1 @kind object;
  #L435a9c.  if v1 != 0 then goto L435aa4;
  #L435aa0.  v11:= 1I;
  #L435aa2.  goto L435aa8;
  #L435aa4.  v1:= 0I;
  #L435aa6.  v11:= 0I;
  #L435aa8.  v1:= v12 @kind object;
  #L435aaa.  v3:= v11;
  #L435aac.  v4:= v7 @kind object;
  #L435aae.  v5:= v0 @kind object;
  #L435ab0.  v6:= v8;
  #L435ab2.  call temp:= `c`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.c:(ZZLio/reactivex/Observer;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Z)Z` @kind virtual;
  #L435ab8.  v1:= temp;
  #L435aba.  if v1 == 0 then goto L435ac0;
  #L435abe.  return @kind void;
  #L435ac0.  if v11 == 0 then goto L435ad4;
  #L435ac4.  v1:= -v10 @kind int;
  #L435ac6.  call temp:= `addAndGet`(v12, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L435acc.  v10:= temp;
  #L435ace.  if v10 != 0 then goto L435a6a;
  #L435ad2.  return @kind void;
  #L435ad4.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L435ada.  v1:= temp @kind object;
  #L435adc.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L435ae0.  v2:= v12.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L435ae4.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L435aea.  v1:= temp @kind object;
  #L435aec.  v2:= "The combiner returned a null" @kind object;
  #L435af0.  call temp:= `requireNonNull`(v1, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L435af6.  v1:= temp @kind object;
  #L435af8.  call `onNext`(v7, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L435afe.  goto L435a8c;
  #L435b00.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L435b02.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L435b08.  v12.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.g` @type ^`boolean` := v9 @kind boolean;
  #L435b0c.  call `a`(v12, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.a:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L435b12.  call `onError`(v7, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L435b18.  return @kind void;
  catch `java.lang.Throwable` @[L435ae0..L435af8] goto L435b00;
}
procedure `void` `g`(`io.reactivex.internal.operators.observable.ObservableCombineLatest$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.g:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L435b38.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.i` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L435b3c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L435b42.  v0:= temp;
  #L435b44.  if v0 != 0 then goto L435b4e;
  #L435b48.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L435b4e.  return @kind void;
}
procedure `void` `h`(`io.reactivex.internal.operators.observable.ObservableCombineLatest$b` v5 @kind this, `io.reactivex.ObservableSource`[] v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.h:([Lio/reactivex/ObservableSource;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L435b60.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableCombineLatest$a`[] @kind object;
  #L435b64.  v1:= length @variable v0;
  #L435b66.  v2:= 0I;
  #L435b68.  v3:= 0I;
  #L435b6a.  if v3 >= v1 then goto L435b82;
  #L435b6e.  v4:= new `io.reactivex.internal.operators.observable.ObservableCombineLatest$a`;
  #L435b72.  call `<init>`(v4, v5, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;I)V` @kind direct;
  #L435b78.  v0[v3]:= v4 @kind object;
  #L435b7c.  v3:= v3 + 1;
  #L435b80.  goto L435b6a;
  #L435b82.  call `lazySet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L435b88.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L435b8c.  call `onSubscribe`(v3, v5) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L435b92.  if v2 >= v1 then goto L435bbc;
  #L435b96.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.h` @type ^`boolean` @kind boolean;
  #L435b9a.  if v3 != 0 then goto L435bbc;
  #L435b9e.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.g` @type ^`boolean` @kind boolean;
  #L435ba2.  if v3 == 0 then goto L435ba8;
  #L435ba6.  goto L435bbc;
  #L435ba8.  v3:= v6[v2] @kind object;
  #L435bac.  v4:= v0[v2] @kind object;
  #L435bb0.  call `subscribe`(v3, v4) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L435bb6.  v2:= v2 + 1;
  #L435bba.  goto L435b92;
  #L435bbc.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableCombineLatest$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435834.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.g` @type ^`boolean` @kind boolean;
  #L435838.  return v0;
}
