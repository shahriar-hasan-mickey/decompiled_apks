record `io.reactivex.internal.operators.observable.ObservableRangeLong$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicIntQueueDisposable` @kind class {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableRangeLong$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableRangeLong$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableRangeLong$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableRangeLong$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRangeLong$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRangeLong$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `long` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$a;.<init>:(Lio/reactivex/Observer;JJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43fcb0.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L43fcb6.  v0.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L43fcba.  v0.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.c` @type ^`long` := v2 @kind wide;
  #L43fcbe.  v0.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.b` @type ^`long` := v4 @kind wide;
  #L43fcc2.  return @kind void;
}
procedure `java.lang.Long` `a`(`io.reactivex.internal.operators.observable.ObservableRangeLong$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$a;.a:()Ljava/lang/Long;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43fc54.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.c` @type ^`long` @kind wide;
  #L43fc58.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.b` @type ^`long` @kind wide;
  #L43fc5c.  v4:= lcmp(v0, v2);
  #L43fc60.  if v4 == 0 then goto L43fc78;
  #L43fc64.  v2:= 1L;
  #L43fc68.  v2:= v2 + v0 @kind long;
  #L43fc6a.  v5.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.c` @type ^`long` := v2 @kind wide;
  #L43fc6e.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L43fc74.  v0:= temp @kind object;
  #L43fc76.  return v0 @kind object;
  #L43fc78.  v0:= 1I;
  #L43fc7a.  call `lazySet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L43fc80.  v0:= 0I;
  #L43fc82.  return v0 @kind object;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableRangeLong$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43fcd4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.b` @type ^`long` @kind wide;
  #L43fcd8.  v2.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.c` @type ^`long` := v0 @kind wide;
  #L43fcdc.  v0:= 1I;
  #L43fcde.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L43fce4.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableRangeLong$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43fcf8.  v0:= 1I;
  #L43fcfa.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L43fd00.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableRangeLong$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43fbe4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L43fbea.  v0:= temp;
  #L43fbec.  if v0 == 0 then goto L43fbf4;
  #L43fbf0.  v0:= 1I;
  #L43fbf2.  goto L43fbf6;
  #L43fbf4.  v0:= 0I;
  #L43fbf6.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.observable.ObservableRangeLong$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43fc08.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.c` @type ^`long` @kind wide;
  #L43fc0c.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.b` @type ^`long` @kind wide;
  #L43fc10.  v4:= lcmp(v0, v2);
  #L43fc14.  if v4 != 0 then goto L43fc1c;
  #L43fc18.  v0:= 1I;
  #L43fc1a.  goto L43fc1e;
  #L43fc1c.  v0:= 0I;
  #L43fc1e.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableRangeLong$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L43fc94.  call temp:= `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$a;.a:()Ljava/lang/Long;` @kind virtual;
  #L43fc9a.  v0:= temp @kind object;
  #L43fc9c.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableRangeLong$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43fc30.  v0:= 1I;
  #L43fc32.  v2:= v2 ^& v0 @kind int;
  #L43fc34.  if v2 == 0 then goto L43fc3e;
  #L43fc38.  v1.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.d` @type ^`boolean` := v0 @kind boolean;
  #L43fc3c.  return v0;
  #L43fc3e.  v2:= 0I;
  #L43fc40.  return v2;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableRangeLong$a` v7 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$a;.run:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L43fd14.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.d` @type ^`boolean` @kind boolean;
  #L43fd18.  if v0 == 0 then goto L43fd1e;
  #L43fd1c.  return @kind void;
  #L43fd1e.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43fd22.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.b` @type ^`long` @kind wide;
  #L43fd26.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.c` @type ^`long` @kind wide;
  #L43fd2a.  v5:= lcmp(v3, v1);
  #L43fd2e.  if v5 == 0 then goto L43fd54;
  #L43fd32.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L43fd38.  v5:= temp;
  #L43fd3a.  if v5 != 0 then goto L43fd54;
  #L43fd3e.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L43fd44.  v5:= temp @kind object;
  #L43fd46.  call `onNext`(v0, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43fd4c.  v5:= 1L;
  #L43fd50.  v3:= v3 + v5 @kind long;
  #L43fd52.  goto L43fd2a;
  #L43fd54.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L43fd5a.  v1:= temp;
  #L43fd5c.  if v1 != 0 then goto L43fd6e;
  #L43fd60.  v1:= 1I;
  #L43fd62.  call `lazySet`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L43fd68.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43fd6e.  return @kind void;
}
