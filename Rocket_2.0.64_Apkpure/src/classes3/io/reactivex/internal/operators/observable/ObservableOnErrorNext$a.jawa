record `io.reactivex.internal.operators.observable.ObservableOnErrorNext$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.e` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableOnErrorNext$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43ef7c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43ef82.  v0.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L43ef86.  v0.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L43ef8a.  v0.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.c` @type ^`boolean` := v3 @kind boolean;
  #L43ef8e.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L43ef92.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L43ef98.  v0.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.d` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L43ef9c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableOnErrorNext$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43efb0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.f` @type ^`boolean` @kind boolean;
  #L43efb4.  if v0 == 0 then goto L43efba;
  #L43efb8.  return @kind void;
  #L43efba.  v0:= 1I;
  #L43efbc.  v1.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.f` @type ^`boolean` := v0 @kind boolean;
  #L43efc0.  v1.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.e` @type ^`boolean` := v0 @kind boolean;
  #L43efc4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43efc8.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43efce.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableOnErrorNext$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L43efe0.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.e` @type ^`boolean` @kind boolean;
  #L43efe4.  if v0 == 0 then goto L43f004;
  #L43efe8.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.f` @type ^`boolean` @kind boolean;
  #L43efec.  if v0 == 0 then goto L43eff8;
  #L43eff0.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43eff6.  return @kind void;
  #L43eff8.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43effc.  call `onError`(v0, v7) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43f002.  return @kind void;
  #L43f004.  v0:= 1I;
  #L43f006.  v6.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.e` @type ^`boolean` := v0 @kind boolean;
  #L43f00a.  v1:= v6.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.c` @type ^`boolean` @kind boolean;
  #L43f00e.  if v1 == 0 then goto L43f026;
  #L43f012.  v1:= instanceof @variable v7 @type ^`java.lang.Exception` @kind boolean;
  #L43f016.  if v1 != 0 then goto L43f026;
  #L43f01a.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43f01e.  call `onError`(v0, v7) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43f024.  return @kind void;
  #L43f026.  v1:= v6.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L43f02a.  call temp:= `apply`(v1, v7) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43f030.  v1:= temp @kind object;
  #L43f032.  v1:= (`io.reactivex.ObservableSource`) v1 @kind object;
  #L43f036.  if v1 != 0 then goto L43f05a;
  #L43f03a.  v0:= new `java.lang.NullPointerException`;
  #L43f03e.  v1:= "Observable is null" @kind object;
  #L43f042.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43f048.  call temp:= `initCause`(v0, v7) @signature `Ljava/lang/NullPointerException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L43f04e.  v7:= v6.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43f052.  call `onError`(v7, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43f058.  return @kind void;
  #L43f05a.  call `subscribe`(v1, v6) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L43f060.  return @kind void;
  #L43f062.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43f064.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43f06a.  v2:= v6.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43f06e.  v3:= new `io.reactivex.exceptions.CompositeException`;
  #L43f072.  v4:= 2I;
  #L43f074.  v4:= new `java.lang.Throwable`[v4];
  #L43f078.  v5:= 0I;
  #L43f07a.  v4[v5]:= v7 @kind object;
  #L43f07e.  v4[v0]:= v1 @kind object;
  #L43f082.  call `<init>`(v3, v4) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L43f088.  call `onError`(v2, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43f08e.  return @kind void;
  catch `java.lang.Throwable` @[L43f026..L43f036] goto L43f062;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableOnErrorNext$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f0ac.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.f` @type ^`boolean` @kind boolean;
  #L43f0b0.  if v0 == 0 then goto L43f0b6;
  #L43f0b4.  return @kind void;
  #L43f0b6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43f0ba.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43f0c0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableOnErrorNext$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f0d4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.d` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L43f0d8.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43f0de.  return @kind void;
}
