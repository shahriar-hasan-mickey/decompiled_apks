record `io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface {
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$a.a` @AccessFlag FINAL;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$a.c` @AccessFlag ;
  `io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther` `io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$a.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$a` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther` v1 @kind object, `io.reactivex.internal.disposables.SequentialDisposable` v2 @kind object, `io.reactivex.Observer` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDelaySubscriptionOther$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableDelaySubscriptionOther;Lio/reactivex/internal/disposables/SequentialDisposable;Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L437c3c.  v0.`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$a.d` @type ^`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther` := v1 @kind object;
  #L437c40.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L437c46.  v0.`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$a.a` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v2 @kind object;
  #L437c4a.  v0.`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$a.b` @type ^`io.reactivex.Observer` := v3 @kind object;
  #L437c4e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDelaySubscriptionOther$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L437c60.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$a.c` @type ^`boolean` @kind boolean;
  #L437c64.  if v0 == 0 then goto L437c6a;
  #L437c68.  return @kind void;
  #L437c6a.  v0:= 1I;
  #L437c6c.  v2.`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$a.c` @type ^`boolean` := v0 @kind boolean;
  #L437c70.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$a.d` @type ^`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther` @kind object;
  #L437c74.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther.a` @type ^`io.reactivex.ObservableSource` @kind object;
  #L437c78.  v1:= new `io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$a$a`;
  #L437c7c.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableDelaySubscriptionOther$a$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableDelaySubscriptionOther$a;)V` @kind direct;
  #L437c82.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L437c88.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDelaySubscriptionOther$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L437c9c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$a.c` @type ^`boolean` @kind boolean;
  #L437ca0.  if v0 == 0 then goto L437cac;
  #L437ca4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L437caa.  return @kind void;
  #L437cac.  v0:= 1I;
  #L437cae.  v1.`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$a.c` @type ^`boolean` := v0 @kind boolean;
  #L437cb2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$a.b` @type ^`io.reactivex.Observer` @kind object;
  #L437cb6.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L437cbc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDelaySubscriptionOther$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L437cd0.  call `onComplete`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableDelaySubscriptionOther$a;.onComplete:()V` @kind virtual;
  #L437cd6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDelaySubscriptionOther$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L437ce8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther$a.a` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L437cec.  call temp:= `update`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.update:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L437cf2.  return @kind void;
}
