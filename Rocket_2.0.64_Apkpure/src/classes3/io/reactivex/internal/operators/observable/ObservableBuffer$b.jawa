record `io.reactivex.internal.operators.observable.ObservableBuffer$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableBuffer$b.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableBuffer$b.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableBuffer$b.c` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBuffer$b.d` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableBuffer$b.e` @AccessFlag ;
  `java.util.ArrayDeque` `io.reactivex.internal.operators.observable.ObservableBuffer$b.f` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableBuffer$b.g` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableBuffer$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBuffer$b` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `int` v2 , `int` v3 , `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$b;.<init>:(Lio/reactivex/Observer;IILjava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L433154.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L43315a.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer$b.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L43315e.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer$b.b` @type ^`int` := v2;
  #L433162.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer$b.c` @type ^`int` := v3;
  #L433166.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer$b.d` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L43316a.  v1:= new `java.util.ArrayDeque`;
  #L43316e.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L433174.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer$b.f` @type ^`java.util.ArrayDeque` := v1 @kind object;
  #L433178.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableBuffer$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43318c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$b.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L433190.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L433196.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableBuffer$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L433134.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$b.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L433138.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L43313e.  v0:= temp;
  #L433140.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBuffer$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4331a8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$b.f` @type ^`java.util.ArrayDeque` @kind object;
  #L4331ac.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L4331b2.  v0:= temp;
  #L4331b4.  if v0 != 0 then goto L4331d0;
  #L4331b8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L4331bc.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$b.f` @type ^`java.util.ArrayDeque` @kind object;
  #L4331c0.  call temp:= `poll`(v1) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4331c6.  v1:= temp @kind object;
  #L4331c8.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4331ce.  goto L4331a8;
  #L4331d0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L4331d4.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4331da.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBuffer$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4331ec.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$b.f` @type ^`java.util.ArrayDeque` @kind object;
  #L4331f0.  call `clear`(v0) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L4331f6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L4331fa.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L433200.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBuffer$b` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L433214.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$b.g` @type ^`long` @kind wide;
  #L433218.  v2:= 1L;
  #L43321c.  v2:= v2 + v0 @kind long;
  #L43321e.  v5.`io.reactivex.internal.operators.observable.ObservableBuffer$b.g` @type ^`long` := v2 @kind wide;
  #L433222.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$b.c` @type ^`int`;
  #L433226.  v2:= (`long`) v2 @kind i2l;
  #L433228.  v0:= v0 %% v2 @kind long;
  #L43322a.  v2:= 0L;
  #L43322e.  v4:= lcmp(v0, v2);
  #L433232.  if v4 != 0 then goto L433280;
  #L433236.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$b.d` @type ^`java.util.concurrent.Callable` @kind object;
  #L43323a.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L433240.  v0:= temp @kind object;
  #L433242.  v1:= "The bufferSupplier returned a null collection. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L433246.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43324c.  v0:= temp @kind object;
  #L43324e.  v0:= (`java.util.Collection`) v0 @kind object;
  #L433252.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$b.f` @type ^`java.util.ArrayDeque` @kind object;
  #L433256.  call temp:= `offer`(v1, v0) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L43325c.  goto L433280;
  #L43325e.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L433260.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$b.f` @type ^`java.util.ArrayDeque` @kind object;
  #L433264.  call `clear`(v0) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L43326a.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$b.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43326e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L433274.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L433278.  call `onError`(v0, v6) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43327e.  return @kind void;
  #L433280.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$b.f` @type ^`java.util.ArrayDeque` @kind object;
  #L433284.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L43328a.  v0:= temp @kind object;
  #L43328c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L433292.  v1:= temp;
  #L433294.  if v1 == 0 then goto L4332cc;
  #L433298.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43329e.  v1:= temp @kind object;
  #L4332a0.  v1:= (`java.util.Collection`) v1 @kind object;
  #L4332a4.  call temp:= `add`(v1, v6) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4332aa.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$b.b` @type ^`int`;
  #L4332ae.  call temp:= `size`(v1) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L4332b4.  v3:= temp;
  #L4332b6.  if v2 > v3 then goto L43328c;
  #L4332ba.  call `remove`(v0) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L4332c0.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L4332c4.  call `onNext`(v2, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4332ca.  goto L43328c;
  #L4332cc.  return @kind void;
  catch `java.lang.Throwable` @[L433236..L433252] goto L43325e;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableBuffer$b` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4332ec.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$b.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4332f0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4332f6.  v0:= temp;
  #L4332f8.  if v0 == 0 then goto L43330a;
  #L4332fc.  v1.`io.reactivex.internal.operators.observable.ObservableBuffer$b.e` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L433300.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L433304.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43330a.  return @kind void;
}
