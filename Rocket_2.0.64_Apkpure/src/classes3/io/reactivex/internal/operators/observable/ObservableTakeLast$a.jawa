record `io.reactivex.internal.operators.observable.ObservableTakeLast$a` @kind class @AccessFlag FINAL extends `java.util.ArrayDeque` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableTakeLast$a.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableTakeLast$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableTakeLast$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableTakeLast$a.d` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableTakeLast$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTakeLast$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast$a;.<init>:(Lio/reactivex/Observer;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L444fbc.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L444fc2.  v0.`io.reactivex.internal.operators.observable.ObservableTakeLast$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L444fc6.  v0.`io.reactivex.internal.operators.observable.ObservableTakeLast$a.b` @type ^`int` := v2;
  #L444fca.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTakeLast$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444fdc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeLast$a.d` @type ^`boolean` @kind boolean;
  #L444fe0.  if v0 != 0 then goto L444ff4;
  #L444fe4.  v0:= 1I;
  #L444fe6.  v1.`io.reactivex.internal.operators.observable.ObservableTakeLast$a.d` @type ^`boolean` := v0 @kind boolean;
  #L444fea.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeLast$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L444fee.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L444ff4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTakeLast$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444fa4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeLast$a.d` @type ^`boolean` @kind boolean;
  #L444fa8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTakeLast$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L445008.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeLast$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L44500c.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableTakeLast$a.d` @type ^`boolean` @kind boolean;
  #L445010.  if v1 == 0 then goto L445016;
  #L445014.  return @kind void;
  #L445016.  call temp:= `poll`(v2) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L44501c.  v1:= temp @kind object;
  #L44501e.  if v1 != 0 then goto L445032;
  #L445022.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableTakeLast$a.d` @type ^`boolean` @kind boolean;
  #L445026.  if v1 != 0 then goto L445030;
  #L44502a.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L445030.  return @kind void;
  #L445032.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L445038.  goto L44500c;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTakeLast$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44504c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeLast$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L445050.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L445056.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTakeLast$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L445068.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeLast$a.b` @type ^`int`;
  #L44506c.  call temp:= `size`(v2) @signature `Ljava/util/ArrayDeque;.size:()I` @kind virtual;
  #L445072.  v1:= temp;
  #L445074.  if v0 != v1 then goto L44507e;
  #L445078.  call temp:= `poll`(v2) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L44507e.  call temp:= `offer`(v2, v3) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L445084.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTakeLast$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L445098.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeLast$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L44509c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4450a2.  v0:= temp;
  #L4450a4.  if v0 == 0 then goto L4450b6;
  #L4450a8.  v1.`io.reactivex.internal.operators.observable.ObservableTakeLast$a.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L4450ac.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableTakeLast$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4450b0.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4450b6.  return @kind void;
}
