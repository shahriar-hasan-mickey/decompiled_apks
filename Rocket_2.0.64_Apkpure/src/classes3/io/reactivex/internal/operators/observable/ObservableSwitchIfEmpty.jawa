record `io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.a` @kind class {
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.ObservableSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchIfEmpty;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/ObservableSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4447f0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/a;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L4447f6.  v0.`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty.a` @type ^`io.reactivex.ObservableSource` := v2 @kind object;
  #L4447fa.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty` v2 @kind this, `io.reactivex.Observer` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchIfEmpty;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44480c.  v0:= new `io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$a`;
  #L444810.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty.a` @type ^`io.reactivex.ObservableSource` @kind object;
  #L444814.  call `<init>`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchIfEmpty$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/ObservableSource;)V` @kind direct;
  #L44481a.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$a.c` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L44481e.  call `onSubscribe`(v3, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L444824.  v3:= v2.`io.reactivex.internal.operators.observable.a.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L444828.  call `subscribe`(v3, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L44482e.  return @kind void;
}
