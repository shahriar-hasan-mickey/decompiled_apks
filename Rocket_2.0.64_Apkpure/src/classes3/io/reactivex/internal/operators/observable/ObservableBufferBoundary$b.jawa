record `io.reactivex.internal.operators.observable.ObservableBufferBoundary$b` @kind class @AccessFlag FINAL extends `io.reactivex.observers.DisposableObserver` @kind class {
  `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$b.b` @AccessFlag FINAL;
  `java.util.Collection` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$b.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$b` v0 @kind this, `java.util.Collection` v1 @kind object, `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$b;.<init>:(Ljava/util/Collection;Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43373c.  call `<init>`(v0) @signature `Lio/reactivex/observers/DisposableObserver;.<init>:()V` @kind direct;
  #L433742.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$b.b` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` := v2 @kind object;
  #L433746.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$b.c` @type ^`java.util.Collection` := v1 @kind object;
  #L43374a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43375c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$b.d` @type ^`boolean` @kind boolean;
  #L433760.  if v0 == 0 then goto L433766;
  #L433764.  return @kind void;
  #L433766.  v0:= 1I;
  #L433768.  v2.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$b.d` @type ^`boolean` := v0 @kind boolean;
  #L43376c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$b.b` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` @kind object;
  #L433770.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$b.c` @type ^`java.util.Collection` @kind object;
  #L433774.  call `b`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.b:(Ljava/util/Collection;Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L43377a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43378c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$b.d` @type ^`boolean` @kind boolean;
  #L433790.  if v0 == 0 then goto L43379c;
  #L433794.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43379a.  return @kind void;
  #L43379c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$b.b` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` @kind object;
  #L4337a0.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4337a6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4337b8.  call `onComplete`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$b;.onComplete:()V` @kind virtual;
  #L4337be.  return @kind void;
}
