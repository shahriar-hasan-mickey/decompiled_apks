record `io.reactivex.internal.operators.observable.ObservableJoin$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.internal.operators.observable.ObservableGroupJoin$b` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableJoin$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.observable.ObservableJoin$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.observable.ObservableJoin$a.c` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.internal.operators.observable.ObservableJoin$a.d` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.internal.operators.observable.ObservableJoin$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableJoin$a.f` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableJoin$a.g` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableJoin$a.h` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.observable.ObservableJoin$a.i` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableJoin$a.j` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableJoin$a.k` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableJoin$a.l` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableJoin$a.m` @AccessFlag VOLATILE;
}
global `java.lang.Integer` `@@io.reactivex.internal.operators.observable.ObservableJoin$a.n` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.observable.ObservableJoin$a.o` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.observable.ObservableJoin$a.p` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.observable.ObservableJoin$a.q` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableJoin$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L43db54.  v0:= 1I;
  #L43db56.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43db5c.  v0:= temp @kind object;
  #L43db5e.  `@@io.reactivex.internal.operators.observable.ObservableJoin$a.n` @type ^`java.lang.Integer` := v0 @kind object;
  #L43db62.  v0:= 2I;
  #L43db64.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43db6a.  v0:= temp @kind object;
  #L43db6c.  `@@io.reactivex.internal.operators.observable.ObservableJoin$a.o` @type ^`java.lang.Integer` := v0 @kind object;
  #L43db70.  v0:= 3I;
  #L43db72.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43db78.  v0:= temp @kind object;
  #L43db7a.  `@@io.reactivex.internal.operators.observable.ObservableJoin$a.p` @type ^`java.lang.Integer` := v0 @kind object;
  #L43db7e.  v0:= 4I;
  #L43db80.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43db86.  v0:= temp @kind object;
  #L43db88.  `@@io.reactivex.internal.operators.observable.ObservableJoin$a.q` @type ^`java.lang.Integer` := v0 @kind object;
  #L43db8c.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableJoin$a` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object, `io.reactivex.functions.BiFunction` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L43dba0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L43dba6.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.a` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L43dbaa.  v2:= new `io.reactivex.disposables.CompositeDisposable`;
  #L43dbae.  call `<init>`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L43dbb4.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` := v2 @kind object;
  #L43dbb8.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L43dbbc.  call temp:= `bufferSize`() @signature `Lio/reactivex/Observable;.bufferSize:()I` @kind static;
  #L43dbc2.  v0:= temp;
  #L43dbc4.  call `<init>`(v2, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L43dbca.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L43dbce.  v2:= new `java.util.LinkedHashMap`;
  #L43dbd2.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L43dbd8.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.d` @type ^`java.util.Map` := v2 @kind object;
  #L43dbdc.  v2:= new `java.util.LinkedHashMap`;
  #L43dbe0.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L43dbe6.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.e` @type ^`java.util.Map` := v2 @kind object;
  #L43dbea.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L43dbee.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43dbf4.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L43dbf8.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.g` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L43dbfc.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.h` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L43dc00.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.i` @type ^`io.reactivex.functions.BiFunction` := v5 @kind object;
  #L43dc04.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L43dc08.  v3:= 2I;
  #L43dc0a.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L43dc10.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L43dc14.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43e0b8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43e0bc.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L43e0c2.  v0:= temp;
  #L43e0c4.  if v0 == 0 then goto L43e0da;
  #L43e0c8.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43e0cc.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43e0d2.  call `g`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.g:()V` @kind virtual;
  #L43e0d8.  goto L43e0e0;
  #L43e0da.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43e0e0.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableJoin$a` v1 @kind this, `boolean` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.b:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43e0f4.  @monitorenter v1
  #L43e0f6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43e0fa.  if v2 == 0 then goto L43e104;
  #L43e0fe.  v2:= `@@io.reactivex.internal.operators.observable.ObservableJoin$a.n` @type ^`java.lang.Integer` @kind object;
  #L43e102.  goto L43e108;
  #L43e104.  v2:= `@@io.reactivex.internal.operators.observable.ObservableJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L43e108.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L43e10e.  @monitorexit v1
  #L43e110.  call `g`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.g:()V` @kind virtual;
  #L43e116.  return @kind void;
  #L43e118.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43e11a.  @monitorexit v1
  #L43e11c.  throw v2;
  catch `java.lang.Throwable` @[L43e0f6..L43e110] goto L43e118;
  catch `java.lang.Throwable` @[L43e11a..L43e11c] goto L43e118;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.c:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43e05c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43e060.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L43e066.  v0:= temp;
  #L43e068.  if v0 == 0 then goto L43e074;
  #L43e06c.  call `g`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.g:()V` @kind virtual;
  #L43e072.  goto L43e07a;
  #L43e074.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43e07a.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableJoin$a` v1 @kind this, `boolean` v2 , `io.reactivex.internal.operators.observable.ObservableGroupJoin$c` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.d:(ZLio/reactivex/internal/operators/observable/ObservableGroupJoin$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43e00c.  @monitorenter v1
  #L43e00e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43e012.  if v2 == 0 then goto L43e01c;
  #L43e016.  v2:= `@@io.reactivex.internal.operators.observable.ObservableJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L43e01a.  goto L43e020;
  #L43e01c.  v2:= `@@io.reactivex.internal.operators.observable.ObservableJoin$a.q` @type ^`java.lang.Integer` @kind object;
  #L43e020.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L43e026.  @monitorexit v1
  #L43e028.  call `g`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.g:()V` @kind virtual;
  #L43e02e.  return @kind void;
  #L43e030.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43e032.  @monitorexit v1
  #L43e034.  throw v2;
  catch `java.lang.Throwable` @[L43e00e..L43e028] goto L43e030;
  catch `java.lang.Throwable` @[L43e032..L43e034] goto L43e030;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableJoin$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43dc44.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.m` @type ^`boolean` @kind boolean;
  #L43dc48.  if v0 != 0 then goto L43dc6e;
  #L43dc4c.  v0:= 1I;
  #L43dc4e.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.m` @type ^`boolean` := v0 @kind boolean;
  #L43dc52.  call `f`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.f:()V` @kind virtual;
  #L43dc58.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43dc5e.  v0:= temp;
  #L43dc60.  if v0 != 0 then goto L43dc6e;
  #L43dc64.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43dc68.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43dc6e.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableJoin$a` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableGroupJoin$d` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.e:(Lio/reactivex/internal/operators/observable/ObservableGroupJoin$d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43e08c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43e090.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43e096.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43e09a.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43e0a0.  call `g`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.g:()V` @kind virtual;
  #L43e0a6.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.observable.ObservableJoin$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.f:()V` @AccessFlag  {
    temp;
    v0;

  #L43dc28.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43dc2c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L43dc32.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.observable.ObservableJoin$a` v10 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L43dc80.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43dc86.  v0:= temp;
  #L43dc88.  if v0 == 0 then goto L43dc8e;
  #L43dc8c.  return @kind void;
  #L43dc8e.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43dc92.  v1:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43dc96.  v2:= 1I;
  #L43dc98.  v3:= 1I;
  #L43dc9a.  v4:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.m` @type ^`boolean` @kind boolean;
  #L43dc9e.  if v4 == 0 then goto L43dcaa;
  #L43dca2.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43dca8.  return @kind void;
  #L43dcaa.  v4:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43dcae.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43dcb4.  v4:= temp @kind object;
  #L43dcb6.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L43dcba.  if v4 == 0 then goto L43dcd2;
  #L43dcbe.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43dcc4.  call `f`(v10) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.f:()V` @kind virtual;
  #L43dcca.  call `h`(v10, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.h:(Lio/reactivex/Observer;)V` @kind virtual;
  #L43dcd0.  return @kind void;
  #L43dcd2.  v4:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43dcd6.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L43dcdc.  v4:= temp;
  #L43dcde.  v5:= 0I;
  #L43dce0.  if v4 != 0 then goto L43dce8;
  #L43dce4.  v4:= 1I;
  #L43dce6.  goto L43dcea;
  #L43dce8.  v4:= 0I;
  #L43dcea.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L43dcf0.  v6:= temp @kind object;
  #L43dcf2.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L43dcf6.  if v6 != 0 then goto L43dcfe;
  #L43dcfa.  v7:= 1I;
  #L43dcfc.  goto L43dd00;
  #L43dcfe.  v7:= 0I;
  #L43dd00.  if v4 == 0 then goto L43dd2e;
  #L43dd04.  if v7 == 0 then goto L43dd2e;
  #L43dd08.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.d` @type ^`java.util.Map` @kind object;
  #L43dd0c.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L43dd12.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L43dd16.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L43dd1c.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43dd20.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L43dd26.  call `onComplete`(v1) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43dd2c.  return @kind void;
  #L43dd2e.  if v7 == 0 then goto L43dd42;
  #L43dd32.  v3:= -v3 @kind int;
  #L43dd34.  call temp:= `addAndGet`(v10, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L43dd3a.  v3:= temp;
  #L43dd3c.  if v3 != 0 then goto L43dc9a;
  #L43dd40.  return @kind void;
  #L43dd42.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L43dd48.  v4:= temp @kind object;
  #L43dd4a.  v7:= `@@io.reactivex.internal.operators.observable.ObservableJoin$a.n` @type ^`java.lang.Integer` @kind object;
  #L43dd4e.  v8:= "The resultSelector returned a null value" @kind object;
  #L43dd52.  if v6 != v7 then goto L43de2a;
  #L43dd56.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.k` @type ^`int`;
  #L43dd5a.  v6:= v5 + 1;
  #L43dd5e.  v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.k` @type ^`int` := v6;
  #L43dd62.  v6:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.d` @type ^`java.util.Map` @kind object;
  #L43dd66.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43dd6c.  v7:= temp @kind object;
  #L43dd6e.  call temp:= `put`(v6, v7, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43dd74.  v6:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.g` @type ^`io.reactivex.functions.Function` @kind object;
  #L43dd78.  call temp:= `apply`(v6, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43dd7e.  v6:= temp @kind object;
  #L43dd80.  v7:= "The leftEnd returned a null ObservableSource" @kind object;
  #L43dd84.  call temp:= `requireNonNull`(v6, v7) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43dd8a.  v6:= temp @kind object;
  #L43dd8c.  v6:= (`io.reactivex.ObservableSource`) v6 @kind object;
  #L43dd90.  v7:= new `io.reactivex.internal.operators.observable.ObservableGroupJoin$c`;
  #L43dd94.  call `<init>`(v7, v10, v2, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$c;.<init>:(Lio/reactivex/internal/operators/observable/ObservableGroupJoin$b;ZI)V` @kind direct;
  #L43dd9a.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43dd9e.  call temp:= `add`(v5, v7) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43dda4.  call `subscribe`(v6, v7) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L43ddaa.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43ddae.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43ddb4.  v5:= temp @kind object;
  #L43ddb6.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L43ddba.  if v5 == 0 then goto L43ddd2;
  #L43ddbe.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43ddc4.  call `f`(v10) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.f:()V` @kind virtual;
  #L43ddca.  call `h`(v10, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.h:(Lio/reactivex/Observer;)V` @kind virtual;
  #L43ddd0.  return @kind void;
  #L43ddd2.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L43ddd6.  call temp:= `values`(v5) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L43dddc.  v5:= temp @kind object;
  #L43ddde.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43dde4.  v5:= temp @kind object;
  #L43dde6.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43ddec.  v6:= temp;
  #L43ddee.  if v6 == 0 then goto L43dc9a;
  #L43ddf2.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43ddf8.  v6:= temp @kind object;
  #L43ddfa.  v7:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.i` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L43ddfe.  call temp:= `apply`(v7, v4, v6) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43de04.  v6:= temp @kind object;
  #L43de06.  call temp:= `requireNonNull`(v6, v8) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43de0c.  v6:= temp @kind object;
  #L43de0e.  call `onNext`(v1, v6) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43de14.  goto L43dde6;
  #L43de16.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43de18.  call `i`(v10, v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/Observer;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L43de1e.  return @kind void;
  #L43de20.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43de22.  call `i`(v10, v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/Observer;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L43de28.  return @kind void;
  #L43de2a.  v7:= `@@io.reactivex.internal.operators.observable.ObservableJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L43de2e.  if v6 != v7 then goto L43df06;
  #L43de32.  v6:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.l` @type ^`int`;
  #L43de36.  v7:= v6 + 1;
  #L43de3a.  v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.l` @type ^`int` := v7;
  #L43de3e.  v7:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L43de42.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43de48.  v9:= temp @kind object;
  #L43de4a.  call temp:= `put`(v7, v9, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43de50.  v7:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.h` @type ^`io.reactivex.functions.Function` @kind object;
  #L43de54.  call temp:= `apply`(v7, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43de5a.  v7:= temp @kind object;
  #L43de5c.  v9:= "The rightEnd returned a null ObservableSource" @kind object;
  #L43de60.  call temp:= `requireNonNull`(v7, v9) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43de66.  v7:= temp @kind object;
  #L43de68.  v7:= (`io.reactivex.ObservableSource`) v7 @kind object;
  #L43de6c.  v9:= new `io.reactivex.internal.operators.observable.ObservableGroupJoin$c`;
  #L43de70.  call `<init>`(v9, v10, v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$c;.<init>:(Lio/reactivex/internal/operators/observable/ObservableGroupJoin$b;ZI)V` @kind direct;
  #L43de76.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43de7a.  call temp:= `add`(v5, v9) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43de80.  call `subscribe`(v7, v9) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L43de86.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43de8a.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43de90.  v5:= temp @kind object;
  #L43de92.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L43de96.  if v5 == 0 then goto L43deae;
  #L43de9a.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43dea0.  call `f`(v10) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.f:()V` @kind virtual;
  #L43dea6.  call `h`(v10, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.h:(Lio/reactivex/Observer;)V` @kind virtual;
  #L43deac.  return @kind void;
  #L43deae.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.d` @type ^`java.util.Map` @kind object;
  #L43deb2.  call temp:= `values`(v5) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L43deb8.  v5:= temp @kind object;
  #L43deba.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43dec0.  v5:= temp @kind object;
  #L43dec2.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43dec8.  v6:= temp;
  #L43deca.  if v6 == 0 then goto L43dc9a;
  #L43dece.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43ded4.  v6:= temp @kind object;
  #L43ded6.  v7:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.i` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L43deda.  call temp:= `apply`(v7, v6, v4) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43dee0.  v6:= temp @kind object;
  #L43dee2.  call temp:= `requireNonNull`(v6, v8) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43dee8.  v6:= temp @kind object;
  #L43deea.  call `onNext`(v1, v6) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43def0.  goto L43dec2;
  #L43def2.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43def4.  call `i`(v10, v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/Observer;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L43defa.  return @kind void;
  #L43defc.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43defe.  call `i`(v10, v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/Observer;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L43df04.  return @kind void;
  #L43df06.  v5:= `@@io.reactivex.internal.operators.observable.ObservableJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L43df0a.  if v6 != v5 then goto L43df36;
  #L43df0e.  v4:= (`io.reactivex.internal.operators.observable.ObservableGroupJoin$c`) v4 @kind object;
  #L43df12.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.d` @type ^`java.util.Map` @kind object;
  #L43df16.  v6:= v4.`io.reactivex.internal.operators.observable.ObservableGroupJoin$c.c` @type ^`int`;
  #L43df1a.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43df20.  v6:= temp @kind object;
  #L43df22.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43df28.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43df2c.  call temp:= `remove`(v5, v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.remove:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43df32.  goto L43dc9a;
  #L43df36.  v4:= (`io.reactivex.internal.operators.observable.ObservableGroupJoin$c`) v4 @kind object;
  #L43df3a.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L43df3e.  v6:= v4.`io.reactivex.internal.operators.observable.ObservableGroupJoin$c.c` @type ^`int`;
  #L43df42.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43df48.  v6:= temp @kind object;
  #L43df4a.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43df50.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43df54.  call temp:= `remove`(v5, v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.remove:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43df5a.  goto L43dc9a;
  catch `java.lang.Throwable` @[L43dd74..L43dd90] goto L43de20;
  catch `java.lang.Throwable` @[L43ddfa..L43de0e] goto L43de16;
  catch `java.lang.Throwable` @[L43de50..L43de6c] goto L43defc;
  catch `java.lang.Throwable` @[L43ded6..L43deea] goto L43def2;
}
procedure `void` `h`(`io.reactivex.internal.operators.observable.ObservableJoin$a` v2 @kind this, `io.reactivex.Observer` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.h:(Lio/reactivex/Observer;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L43dfa0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43dfa4.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L43dfaa.  v0:= temp @kind object;
  #L43dfac.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableJoin$a.d` @type ^`java.util.Map` @kind object;
  #L43dfb0.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L43dfb6.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L43dfba.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L43dfc0.  call `onError`(v3, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43dfc6.  return @kind void;
}
procedure `void` `i`(`io.reactivex.internal.operators.observable.ObservableJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object, `io.reactivex.Observer` v3 @kind object, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/Observer;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @AccessFlag  {
    temp;
    v0;

  #L43dfd8.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43dfde.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43dfe2.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L43dfe8.  call `clear`(v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43dfee.  call `f`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.f:()V` @kind virtual;
  #L43dff4.  call `h`(v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.h:(Lio/reactivex/Observer;)V` @kind virtual;
  #L43dffa.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableJoin$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43db3c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.m` @type ^`boolean` @kind boolean;
  #L43db40.  return v0;
}
