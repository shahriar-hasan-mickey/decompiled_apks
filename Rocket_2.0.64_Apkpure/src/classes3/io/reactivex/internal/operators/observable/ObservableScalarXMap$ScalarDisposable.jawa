record `io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.internal.fuseable.QueueDisposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.a` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.<init>:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L442a80.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L442a86.  v0.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L442a8a.  v0.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.b` @type ^`java.lang.Object` := v2 @kind object;
  #L442a8e.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442aa0.  v0:= 3I;
  #L442aa2.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L442aa8.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442abc.  v0:= 3I;
  #L442abe.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L442ac4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4429a0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4429a6.  v0:= temp;
  #L4429a8.  v1:= 3I;
  #L4429aa.  if v0 != v1 then goto L4429b2;
  #L4429ae.  v0:= 1I;
  #L4429b0.  goto L4429b4;
  #L4429b2.  v0:= 0I;
  #L4429b4.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4429c8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4429ce.  v0:= temp;
  #L4429d0.  v1:= 1I;
  #L4429d2.  if v0 == v1 then goto L4429d8;
  #L4429d6.  goto L4429da;
  #L4429d8.  v1:= 0I;
  #L4429da.  return v1;
}
procedure `boolean` `offer`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4429ec.  v2:= new `java.lang.UnsupportedOperationException`;
  #L4429f0.  v0:= "Should not be called!" @kind object;
  #L4429f4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4429fa.  throw v2;
}
procedure `boolean` `offer`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L442a0c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L442a10.  v2:= "Should not be called!" @kind object;
  #L442a14.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L442a1a.  throw v1;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L442a50.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L442a56.  v0:= temp;
  #L442a58.  v1:= 1I;
  #L442a5a.  if v0 != v1 then goto L442a6c;
  #L442a5e.  v0:= 3I;
  #L442a60.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L442a66.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.b` @type ^`java.lang.Object` @kind object;
  #L442a6a.  return v0 @kind object;
  #L442a6c.  v0:= 0I;
  #L442a6e.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442a2c.  v0:= 1I;
  #L442a2e.  v2:= v2 ^& v0 @kind int;
  #L442a30.  if v2 == 0 then goto L442a3c;
  #L442a34.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L442a3a.  return v0;
  #L442a3c.  v2:= 0I;
  #L442a3e.  return v2;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L442ad8.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L442ade.  v0:= temp;
  #L442ae0.  if v0 != 0 then goto L442b20;
  #L442ae4.  v0:= 0I;
  #L442ae6.  v1:= 2I;
  #L442ae8.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L442aee.  v0:= temp;
  #L442af0.  if v0 == 0 then goto L442b20;
  #L442af4.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.a` @type ^`io.reactivex.Observer` @kind object;
  #L442af8.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.b` @type ^`java.lang.Object` @kind object;
  #L442afc.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L442b02.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L442b08.  v0:= temp;
  #L442b0a.  if v0 != v1 then goto L442b20;
  #L442b0e.  v0:= 3I;
  #L442b10.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L442b16.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.a` @type ^`io.reactivex.Observer` @kind object;
  #L442b1a.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L442b20.  return @kind void;
}
