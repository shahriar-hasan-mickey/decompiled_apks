record `io.reactivex.internal.operators.observable.BlockingObservableLatest$a` @kind class @AccessFlag FINAL extends `io.reactivex.observers.DisposableObserver` @kind class, `java.util.Iterator` @kind interface {
  `io.reactivex.Notification` `io.reactivex.internal.operators.observable.BlockingObservableLatest$a.b` @AccessFlag ;
  `java.util.concurrent.Semaphore` `io.reactivex.internal.operators.observable.BlockingObservableLatest$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.BlockingObservableLatest$a.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.BlockingObservableLatest$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L431c70.  call `<init>`(v2) @signature `Lio/reactivex/observers/DisposableObserver;.<init>:()V` @kind direct;
  #L431c76.  v0:= new `java.util.concurrent.Semaphore`;
  #L431c7a.  v1:= 0I;
  #L431c7c.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/Semaphore;.<init>:(I)V` @kind direct;
  #L431c82.  v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$a.c` @type ^`java.util.concurrent.Semaphore` := v0 @kind object;
  #L431c86.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L431c8a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L431c90.  v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L431c94.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.BlockingObservableLatest$a` v1 @kind this, `io.reactivex.Notification` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$a;.a:(Lio/reactivex/Notification;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431cd4.  v0:= v1.`io.reactivex.internal.operators.observable.BlockingObservableLatest$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L431cd8.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L431cde.  v2:= temp @kind object;
  #L431ce0.  if v2 != 0 then goto L431ce8;
  #L431ce4.  v2:= 1I;
  #L431ce6.  goto L431cea;
  #L431ce8.  v2:= 0I;
  #L431cea.  if v2 == 0 then goto L431cf8;
  #L431cee.  v2:= v1.`io.reactivex.internal.operators.observable.BlockingObservableLatest$a.c` @type ^`java.util.concurrent.Semaphore` @kind object;
  #L431cf2.  call `release`(v2) @signature `Ljava/util/concurrent/Semaphore;.release:()V` @kind virtual;
  #L431cf8.  return @kind void;
}
procedure `boolean` `hasNext`(`io.reactivex.internal.operators.observable.BlockingObservableLatest$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L431b6c.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$a.b` @type ^`io.reactivex.Notification` @kind object;
  #L431b70.  if v0 == 0 then goto L431b98;
  #L431b74.  call temp:= `isOnError`(v0) @signature `Lio/reactivex/Notification;.isOnError:()Z` @kind virtual;
  #L431b7a.  v0:= temp;
  #L431b7c.  if v0 != 0 then goto L431b82;
  #L431b80.  goto L431b98;
  #L431b82.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$a.b` @type ^`io.reactivex.Notification` @kind object;
  #L431b86.  call temp:= `getError`(v0) @signature `Lio/reactivex/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L431b8c.  v0:= temp @kind object;
  #L431b8e.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L431b94.  v0:= temp @kind object;
  #L431b96.  throw v0;
  #L431b98.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$a.b` @type ^`io.reactivex.Notification` @kind object;
  #L431b9c.  if v0 != 0 then goto L431c04;
  #L431ba0.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L431ba6.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$a.c` @type ^`java.util.concurrent.Semaphore` @kind object;
  #L431baa.  call `acquire`(v0) @signature `Ljava/util/concurrent/Semaphore;.acquire:()V` @kind virtual;
  #L431bb0.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L431bb4.  v1:= 0I;
  #L431bb6.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L431bbc.  v0:= temp @kind object;
  #L431bbe.  v0:= (`io.reactivex.Notification`) v0 @kind object;
  #L431bc2.  v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$a.b` @type ^`io.reactivex.Notification` := v0 @kind object;
  #L431bc6.  call temp:= `isOnError`(v0) @signature `Lio/reactivex/Notification;.isOnError:()Z` @kind virtual;
  #L431bcc.  v1:= temp;
  #L431bce.  if v1 != 0 then goto L431bd4;
  #L431bd2.  goto L431c04;
  #L431bd4.  call temp:= `getError`(v0) @signature `Lio/reactivex/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L431bda.  v0:= temp @kind object;
  #L431bdc.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L431be2.  v0:= temp @kind object;
  #L431be4.  throw v0;
  #L431be6.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L431be8.  call `dispose`(v2) @signature `Lio/reactivex/observers/DisposableObserver;.dispose:()V` @kind virtual;
  #L431bee.  call temp:= `createOnError`(v0) @signature `Lio/reactivex/Notification;.createOnError:(Ljava/lang/Throwable;)Lio/reactivex/Notification;` @kind static;
  #L431bf4.  v1:= temp @kind object;
  #L431bf6.  v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$a.b` @type ^`io.reactivex.Notification` := v1 @kind object;
  #L431bfa.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L431c00.  v0:= temp @kind object;
  #L431c02.  throw v0;
  #L431c04.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$a.b` @type ^`io.reactivex.Notification` @kind object;
  #L431c08.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/Notification;.isOnNext:()Z` @kind virtual;
  #L431c0e.  v0:= temp;
  #L431c10.  return v0;
  catch `java.lang.InterruptedException` @[L431ba0..L431bb0] goto L431be6;
}
procedure `java.lang.Object` `next`(`io.reactivex.internal.operators.observable.BlockingObservableLatest$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L431c34.  call temp:= `hasNext`(v2) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$a;.hasNext:()Z` @kind virtual;
  #L431c3a.  v0:= temp;
  #L431c3c.  if v0 == 0 then goto L431c54;
  #L431c40.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$a.b` @type ^`io.reactivex.Notification` @kind object;
  #L431c44.  call temp:= `getValue`(v0) @signature `Lio/reactivex/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L431c4a.  v0:= temp @kind object;
  #L431c4c.  v1:= 0I;
  #L431c4e.  v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$a.b` @type ^`io.reactivex.Notification` := v1 @kind object;
  #L431c52.  return v0 @kind object;
  #L431c54.  v0:= new `java.util.NoSuchElementException`;
  #L431c58.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L431c5e.  throw v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.BlockingObservableLatest$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L431ca8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.BlockingObservableLatest$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L431cbc.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L431cc2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.BlockingObservableLatest$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L431d0c.  v1:= (`io.reactivex.Notification`) v1 @kind object;
  #L431d10.  call `a`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$a;.a:(Lio/reactivex/Notification;)V` @kind virtual;
  #L431d16.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.internal.operators.observable.BlockingObservableLatest$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L431d28.  v0:= new `java.lang.UnsupportedOperationException`;
  #L431d2c.  v1:= "Read-only iterator." @kind object;
  #L431d30.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L431d36.  throw v0;
}
