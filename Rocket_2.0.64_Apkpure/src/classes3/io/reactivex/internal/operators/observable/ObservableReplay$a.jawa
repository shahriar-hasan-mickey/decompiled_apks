record `io.reactivex.internal.operators.observable.ObservableReplay$a` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.internal.operators.observable.ObservableReplay$h` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableReplay$f` `io.reactivex.internal.operators.observable.ObservableReplay$a.a` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableReplay$a.b` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableReplay$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableReplay$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L440d14.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L440d1a.  v0:= new `io.reactivex.internal.operators.observable.ObservableReplay$f`;
  #L440d1e.  v1:= 0I;
  #L440d20.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$f;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L440d26.  v2.`io.reactivex.internal.operators.observable.ObservableReplay$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$f` := v0 @kind object;
  #L440d2a.  call `set`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L440d30.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableReplay$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L440da8.  call temp:= `error`(v2) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L440dae.  v2:= temp @kind object;
  #L440db0.  call temp:= `e`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L440db6.  v2:= temp @kind object;
  #L440db8.  v0:= new `io.reactivex.internal.operators.observable.ObservableReplay$f`;
  #L440dbc.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$f;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L440dc2.  call `d`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.d:(Lio/reactivex/internal/operators/observable/ObservableReplay$f;)V` @kind virtual;
  #L440dc8.  call `k`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.k:()V` @kind virtual;
  #L440dce.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableReplay$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.b:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L440de0.  call temp:= `next`(v2) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L440de6.  v2:= temp @kind object;
  #L440de8.  call temp:= `e`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L440dee.  v2:= temp @kind object;
  #L440df0.  v0:= new `io.reactivex.internal.operators.observable.ObservableReplay$f`;
  #L440df4.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$f;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L440dfa.  call `d`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.d:(Lio/reactivex/internal/operators/observable/ObservableReplay$f;)V` @kind virtual;
  #L440e00.  call `j`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.j:()V` @kind virtual;
  #L440e06.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableReplay$a` v4 @kind this, `io.reactivex.internal.operators.observable.ObservableReplay$d` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.c:(Lio/reactivex/internal/operators/observable/ObservableReplay$d;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L440e54.  call temp:= `getAndIncrement`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L440e5a.  v0:= temp;
  #L440e5c.  if v0 == 0 then goto L440e62;
  #L440e60.  return @kind void;
  #L440e62.  v0:= 1I;
  #L440e64.  call temp:= `a`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$d;.a:()Ljava/lang/Object;` @kind virtual;
  #L440e6a.  v1:= temp @kind object;
  #L440e6c.  v1:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v1 @kind object;
  #L440e70.  if v1 != 0 then goto L440e80;
  #L440e74.  call temp:= `f`(v4) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.f:()Lio/reactivex/internal/operators/observable/ObservableReplay$f;` @kind virtual;
  #L440e7a.  v1:= temp @kind object;
  #L440e7c.  v5.`io.reactivex.internal.operators.observable.ObservableReplay$d.c` @type ^`java.lang.Object` := v1 @kind object;
  #L440e80.  call temp:= `isDisposed`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$d;.isDisposed:()Z` @kind virtual;
  #L440e86.  v2:= temp;
  #L440e88.  if v2 == 0 then goto L440e8e;
  #L440e8c.  return @kind void;
  #L440e8e.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L440e94.  v2:= temp @kind object;
  #L440e96.  v2:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v2 @kind object;
  #L440e9a.  if v2 == 0 then goto L440ec6;
  #L440e9e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$f.a` @type ^`java.lang.Object` @kind object;
  #L440ea2.  call temp:= `g`(v4, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L440ea8.  v1:= temp @kind object;
  #L440eaa.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableReplay$d.b` @type ^`io.reactivex.Observer` @kind object;
  #L440eae.  call temp:= `accept`(v1, v3) @signature `Lio/reactivex/internal/util/NotificationLite;.accept:(Ljava/lang/Object;Lio/reactivex/Observer;)Z` @kind static;
  #L440eb4.  v1:= temp;
  #L440eb6.  if v1 == 0 then goto L440ec2;
  #L440eba.  v0:= 0I;
  #L440ebc.  v5.`io.reactivex.internal.operators.observable.ObservableReplay$d.c` @type ^`java.lang.Object` := v0 @kind object;
  #L440ec0.  return @kind void;
  #L440ec2.  v1:= v2 @kind object;
  #L440ec4.  goto L440e80;
  #L440ec6.  v5.`io.reactivex.internal.operators.observable.ObservableReplay$d.c` @type ^`java.lang.Object` := v1 @kind object;
  #L440eca.  v0:= -v0 @kind int;
  #L440ecc.  call temp:= `addAndGet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L440ed2.  v0:= temp;
  #L440ed4.  if v0 != 0 then goto L440e64;
  #L440ed8.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.operators.observable.ObservableReplay$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.complete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L440d70.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L440d76.  v0:= temp @kind object;
  #L440d78.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L440d7e.  v0:= temp @kind object;
  #L440d80.  v1:= new `io.reactivex.internal.operators.observable.ObservableReplay$f`;
  #L440d84.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$f;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L440d8a.  call `d`(v2, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.d:(Lio/reactivex/internal/operators/observable/ObservableReplay$f;)V` @kind virtual;
  #L440d90.  call `k`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.k:()V` @kind virtual;
  #L440d96.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableReplay$a` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableReplay$f` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.d:(Lio/reactivex/internal/operators/observable/ObservableReplay$f;)V` @AccessFlag FINAL {
    temp;
    v0;

  #L440d44.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$f` @kind object;
  #L440d48.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L440d4e.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$f` := v2 @kind object;
  #L440d52.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$a.b` @type ^`int`;
  #L440d56.  v2:= v2 + 1;
  #L440d5a.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$a.b` @type ^`int` := v2;
  #L440d5e.  return @kind void;
}
procedure `java.lang.Object` `e`(`io.reactivex.internal.operators.observable.ObservableReplay$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L440cec.  return v1 @kind object;
}
procedure `io.reactivex.internal.operators.observable.ObservableReplay$f` `f`(`io.reactivex.internal.operators.observable.ObservableReplay$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.f:()Lio/reactivex/internal/operators/observable/ObservableReplay$f;` @AccessFlag  {
    temp;
    v0;

  #L440ccc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L440cd2.  v0:= temp @kind object;
  #L440cd4.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v0 @kind object;
  #L440cd8.  return v0 @kind object;
}
procedure `java.lang.Object` `g`(`io.reactivex.internal.operators.observable.ObservableReplay$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L440d00.  return v1 @kind object;
}
procedure `void` `h`(`io.reactivex.internal.operators.observable.ObservableReplay$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.h:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L440e18.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L440e1e.  v0:= temp @kind object;
  #L440e20.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v0 @kind object;
  #L440e24.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L440e2a.  v0:= temp @kind object;
  #L440e2c.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v0 @kind object;
  #L440e30.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$a.b` @type ^`int`;
  #L440e34.  v1:= v1 + -1;
  #L440e38.  v2.`io.reactivex.internal.operators.observable.ObservableReplay$a.b` @type ^`int` := v1;
  #L440e3c.  call `i`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.i:(Lio/reactivex/internal/operators/observable/ObservableReplay$f;)V` @kind virtual;
  #L440e42.  return @kind void;
}
procedure `void` `i`(`io.reactivex.internal.operators.observable.ObservableReplay$a` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableReplay$f` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.i:(Lio/reactivex/internal/operators/observable/ObservableReplay$f;)V` @AccessFlag FINAL {
    temp;

  #L440eec.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L440ef2.  return @kind void;
}
procedure `void` `j`() @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.j:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `k`(`io.reactivex.internal.operators.observable.ObservableReplay$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.k:()V` @AccessFlag  {
    temp;

  #L440f04.  return @kind void;
}
