record `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$c`[] `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.e` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.g` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L449814.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L44981a.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.a` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L44981e.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.b` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L449822.  v2:= new `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$c`[v4];
  #L449826.  v3:= 0I;
  #L449828.  if v3 >= v4 then goto L449840;
  #L44982c.  v0:= new `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$c`;
  #L449830.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$c;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;I)V` @kind direct;
  #L449836.  v2[v3]:= v0 @kind object;
  #L44983a.  v3:= v3 + 1;
  #L44983e.  goto L449828;
  #L449840.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$c`[] := v2 @kind object;
  #L449844.  v2:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L449848.  call `<init>`(v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L44984e.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v2 @kind object;
  #L449852.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L449856.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L44985c.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L449860.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L449864.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L44986a.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L44986e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.a:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L449880.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$c`[] @kind object;
  #L449884.  v1:= 0I;
  #L449886.  v2:= length @variable v0;
  #L449888.  if v1 >= v2 then goto L4498a0;
  #L44988c.  if v1 == v4 then goto L44989a;
  #L449890.  v2:= v0[v1] @kind object;
  #L449894.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$c;.a:()V` @kind virtual;
  #L44989a.  v1:= v1 + 1;
  #L44989e.  goto L449886;
  #L4498a0.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b` v0 @kind this, `int` v1 , `boolean` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.b:(IZ)V` @AccessFlag  {
    temp;

  #L4498ec.  if v2 != 0 then goto L44990a;
  #L4498f0.  v2:= 1I;
  #L4498f2.  v0.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` := v2 @kind boolean;
  #L4498f6.  call `a`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L4498fc.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L449900.  v2:= v0.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L449904.  call `onComplete`(v1, v0, v2) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L44990a.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b` v1 @kind this, `int` v2 , `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.c:(ILjava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L44991c.  v0:= 1I;
  #L44991e.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` := v0 @kind boolean;
  #L449922.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L449926.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44992c.  call `a`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L449932.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L449936.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44993a.  call `onError`(v2, v3, v1, v0) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lio/reactivex/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L449940.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b` v1 @kind this, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.d:(ILjava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;

  #L449954.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L449958.  call `set`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L44995e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4498b4.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4498b8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4498be.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$c`[] @kind object;
  #L4498c2.  v1:= length @variable v0;
  #L4498c4.  v2:= 0I;
  #L4498c6.  if v2 >= v1 then goto L4498da;
  #L4498ca.  v3:= v0[v2] @kind object;
  #L4498ce.  call `a`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$c;.a:()V` @kind virtual;
  #L4498d4.  v2:= v2 + 1;
  #L4498d8.  goto L4498c6;
  #L4498da.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b` v5 @kind this, `io.reactivex.ObservableSource`[] v6 @kind object, `int` v7 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.e:([Lio/reactivex/ObservableSource;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L449aa0.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$c`[] @kind object;
  #L449aa4.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L449aa8.  v2:= 0I;
  #L449aaa.  if v2 >= v7 then goto L449ae4;
  #L449aae.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L449ab4.  v3:= temp @kind object;
  #L449ab6.  v3:= (`io.reactivex.disposables.Disposable`) v3 @kind object;
  #L449aba.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L449ac0.  v3:= temp;
  #L449ac2.  if v3 != 0 then goto L449ae4;
  #L449ac6.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` @kind boolean;
  #L449aca.  if v3 == 0 then goto L449ad0;
  #L449ace.  goto L449ae4;
  #L449ad0.  v3:= v6[v2] @kind object;
  #L449ad4.  v4:= v0[v2] @kind object;
  #L449ad8.  call `subscribe`(v3, v4) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L449ade.  v2:= v2 + 1;
  #L449ae2.  goto L449aaa;
  #L449ae4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4497e8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4497ec.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4497f2.  v0:= temp @kind object;
  #L4497f4.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L4497f8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4497fe.  v0:= temp;
  #L449800.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L449970.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` @kind boolean;
  #L449974.  if v0 != 0 then goto L449994;
  #L449978.  v0:= 1I;
  #L44997a.  v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` := v0 @kind boolean;
  #L44997e.  v0:= -1I;
  #L449980.  call `a`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L449986.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L44998a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44998e.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L449994.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4499a8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` @kind boolean;
  #L4499ac.  if v0 == 0 then goto L4499b8;
  #L4499b0.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4499b6.  return @kind void;
  #L4499b8.  v0:= 1I;
  #L4499ba.  v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` := v0 @kind boolean;
  #L4499be.  v0:= -1I;
  #L4499c0.  call `a`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L4499c6.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L4499ca.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4499ce.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lio/reactivex/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L4499d4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4499e8.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` @kind boolean;
  #L4499ec.  if v0 == 0 then goto L4499f2;
  #L4499f0.  return @kind void;
  #L4499f2.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L4499f6.  call temp:= `length`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L4499fc.  v1:= temp;
  #L4499fe.  v2:= v1 + 1;
  #L449a02.  v2:= new `java.lang.Object`[v2];
  #L449a06.  v3:= 0I;
  #L449a08.  v2[v3]:= v5 @kind object;
  #L449a0c.  if v3 >= v1 then goto L449a28;
  #L449a10.  call temp:= `get`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L449a16.  v5:= temp @kind object;
  #L449a18.  if v5 != 0 then goto L449a1e;
  #L449a1c.  return @kind void;
  #L449a1e.  v3:= v3 + 1;
  #L449a22.  v2[v3]:= v5 @kind object;
  #L449a26.  goto L449a0c;
  #L449a28.  v5:= v4.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L449a2c.  call temp:= `apply`(v5, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L449a32.  v5:= temp @kind object;
  #L449a34.  v0:= "combiner returned a null value" @kind object;
  #L449a38.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L449a3e.  v5:= temp @kind object;
  #L449a40.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L449a44.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L449a48.  call `onNext`(v0, v5, v4, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onNext:(Lio/reactivex/Observer;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L449a4e.  return @kind void;
  #L449a50.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L449a52.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L449a58.  call `dispose`(v4) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.dispose:()V` @kind virtual;
  #L449a5e.  call `onError`(v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L449a64.  return @kind void;
  catch `java.lang.Throwable` @[L449a28..L449a40] goto L449a50;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L449a84.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L449a88.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L449a8e.  return @kind void;
}
