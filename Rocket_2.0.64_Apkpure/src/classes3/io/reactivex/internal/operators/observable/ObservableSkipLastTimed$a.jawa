record `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.f` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.g` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.i` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.j` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object, `int` v6 , `boolean` v7 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$a;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L443ebc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L443ec2.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L443ec6.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.b` @type ^`long` := v2 @kind wide;
  #L443eca.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L443ece.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.d` @type ^`io.reactivex.Scheduler` := v5 @kind object;
  #L443ed2.  v1:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L443ed6.  call `<init>`(v1, v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L443edc.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.e` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v1 @kind object;
  #L443ee0.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.f` @type ^`boolean` := v7 @kind boolean;
  #L443ee4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a` v17 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L443f38.  v0:= v17 @kind object;
  #L443f3c.  call temp:= `getAndIncrement`(v17) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L443f42.  v1:= temp;
  #L443f44.  if v1 == 0 then goto L443f4a;
  #L443f48.  return @kind void;
  #L443f4a.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L443f4e.  v2:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.e` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L443f52.  v3:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.f` @type ^`boolean` @kind boolean;
  #L443f56.  v4:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L443f5a.  v5:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L443f5e.  v6:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.b` @type ^`long` @kind wide;
  #L443f62.  v8:= 1I;
  #L443f64.  v9:= 1I;
  #L443f66.  v10:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.h` @type ^`boolean` @kind boolean;
  #L443f6a.  if v10 == 0 then goto L443f7a;
  #L443f6e.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.e` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L443f72.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L443f78.  return @kind void;
  #L443f7a.  v10:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.i` @type ^`boolean` @kind boolean;
  #L443f7e.  call temp:= `peek`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.peek:()Ljava/lang/Object;` @kind virtual;
  #L443f84.  v11:= temp @kind object;
  #L443f86.  v11:= (`java.lang.Long`) v11 @kind object;
  #L443f8a.  if v11 != 0 then goto L443f92;
  #L443f8e.  v12:= 1I;
  #L443f90.  goto L443f94;
  #L443f92.  v12:= 0I;
  #L443f94.  call temp:= `now`(v5, v4) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L443f9a.  v13:= temp @kind wide;
  #L443f9c.  if v12 != 0 then goto L443fb4;
  #L443fa0.  call temp:= `longValue`(v11) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L443fa6.  v15:= temp @kind wide;
  #L443fa8.  v13:= v13 - v6 @kind long;
  #L443faa.  v11:= lcmp(v15, v13);
  #L443fae.  if v11 <= 0 then goto L443fb4;
  #L443fb2.  v12:= 1I;
  #L443fb4.  if v10 == 0 then goto L443ffe;
  #L443fb8.  if v3 == 0 then goto L443fd8;
  #L443fbc.  if v12 == 0 then goto L443ffe;
  #L443fc0.  v2:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.j` @type ^`java.lang.Throwable` @kind object;
  #L443fc4.  if v2 == 0 then goto L443fd0;
  #L443fc8.  call `onError`(v1, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L443fce.  goto L443fd6;
  #L443fd0.  call `onComplete`(v1) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L443fd6.  return @kind void;
  #L443fd8.  v10:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.j` @type ^`java.lang.Throwable` @kind object;
  #L443fdc.  if v10 == 0 then goto L443ff2;
  #L443fe0.  v2:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.e` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L443fe4.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L443fea.  call `onError`(v1, v10) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L443ff0.  return @kind void;
  #L443ff2.  if v12 == 0 then goto L443ffe;
  #L443ff6.  call `onComplete`(v1) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L443ffc.  return @kind void;
  #L443ffe.  if v12 == 0 then goto L444012;
  #L444002.  v9:= -v9 @kind int;
  #L444004.  call temp:= `addAndGet`(v0, v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L44400a.  v9:= temp;
  #L44400c.  if v9 != 0 then goto L443f66;
  #L444010.  return @kind void;
  #L444012.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L444018.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L44401e.  v10:= temp @kind object;
  #L444020.  call `onNext`(v1, v10) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L444026.  goto L443f66;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443ef8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.h` @type ^`boolean` @kind boolean;
  #L443efc.  if v0 != 0 then goto L443f26;
  #L443f00.  v0:= 1I;
  #L443f02.  v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.h` @type ^`boolean` := v0 @kind boolean;
  #L443f06.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L443f0a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L443f10.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L443f16.  v0:= temp;
  #L443f18.  if v0 != 0 then goto L443f26;
  #L443f1c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.e` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L443f20.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L443f26.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443ea4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.h` @type ^`boolean` @kind boolean;
  #L443ea8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444038.  v0:= 1I;
  #L44403a.  v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.i` @type ^`boolean` := v0 @kind boolean;
  #L44403e.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$a;.a:()V` @kind virtual;
  #L444044.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L444058.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.j` @type ^`java.lang.Throwable` := v1 @kind object;
  #L44405c.  v1:= 1I;
  #L44405e.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.i` @type ^`boolean` := v1 @kind boolean;
  #L444062.  call `a`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$a;.a:()V` @kind virtual;
  #L444068.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44407c.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.e` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L444080.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L444084.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L444088.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L44408e.  v1:= temp @kind wide;
  #L444090.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L444096.  v1:= temp @kind object;
  #L444098.  call temp:= `offer`(v0, v1, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44409e.  call `a`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$a;.a:()V` @kind virtual;
  #L4440a4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4440b8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4440bc.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4440c2.  v0:= temp;
  #L4440c4.  if v0 == 0 then goto L4440d6;
  #L4440c8.  v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.g` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L4440cc.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4440d0.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4440d6.  return @kind void;
}
