record `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a` @kind class @AccessFlag FINAL extends `io.reactivex.observers.DisposableObserver` @kind class {
  `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4481b4.  call `<init>`(v0) @signature `Lio/reactivex/observers/DisposableObserver;.<init>:()V` @kind direct;
  #L4481ba.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` := v1 @kind object;
  #L4481be.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4481d0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.c` @type ^`boolean` @kind boolean;
  #L4481d4.  if v0 == 0 then goto L4481da;
  #L4481d8.  return @kind void;
  #L4481da.  v0:= 1I;
  #L4481dc.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4481e0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` @kind object;
  #L4481e4.  call `onComplete`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.onComplete:()V` @kind virtual;
  #L4481ea.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4481fc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.c` @type ^`boolean` @kind boolean;
  #L448200.  if v0 == 0 then goto L44820c;
  #L448204.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44820a.  return @kind void;
  #L44820c.  v0:= 1I;
  #L44820e.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.c` @type ^`boolean` := v0 @kind boolean;
  #L448212.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` @kind object;
  #L448216.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44821c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L448230.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.c` @type ^`boolean` @kind boolean;
  #L448234.  if v1 == 0 then goto L44823a;
  #L448238.  return @kind void;
  #L44823a.  v1:= 1I;
  #L44823c.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.c` @type ^`boolean` := v1 @kind boolean;
  #L448240.  call `dispose`(v0) @signature `Lio/reactivex/observers/DisposableObserver;.dispose:()V` @kind virtual;
  #L448246.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` @kind object;
  #L44824a.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.b:()V` @kind virtual;
  #L448250.  return @kind void;
}
