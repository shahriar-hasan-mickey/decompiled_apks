record `io.reactivex.internal.operators.observable.ObservableCountSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.observable.ObservableCountSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableCountSingle$a.b` @AccessFlag ;
  `long` `io.reactivex.internal.operators.observable.ObservableCountSingle$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableCountSingle$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCountSingle$a;.<init>:(Lio/reactivex/SingleObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L436c24.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L436c2a.  v0.`io.reactivex.internal.operators.observable.ObservableCountSingle$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L436c2e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableCountSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCountSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436c40.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCountSingle$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L436c44.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L436c4a.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L436c4e.  v1.`io.reactivex.internal.operators.observable.ObservableCountSingle$a.b` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L436c52.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableCountSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCountSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436c04.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCountSingle$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L436c08.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L436c0e.  v0:= temp;
  #L436c10.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableCountSingle$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCountSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L436c64.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L436c68.  v3.`io.reactivex.internal.operators.observable.ObservableCountSingle$a.b` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L436c6c.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableCountSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L436c70.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableCountSingle$a.c` @type ^`long` @kind wide;
  #L436c74.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L436c7a.  v1:= temp @kind object;
  #L436c7c.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L436c82.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableCountSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCountSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436c94.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L436c98.  v1.`io.reactivex.internal.operators.observable.ObservableCountSingle$a.b` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L436c9c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCountSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L436ca0.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L436ca6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableCountSingle$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCountSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L436cb8.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableCountSingle$a.c` @type ^`long` @kind wide;
  #L436cbc.  v2:= 1L;
  #L436cc0.  v0:= v0 + v2 @kind long;
  #L436cc2.  v4.`io.reactivex.internal.operators.observable.ObservableCountSingle$a.c` @type ^`long` := v0 @kind wide;
  #L436cc6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableCountSingle$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCountSingle$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436cd8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCountSingle$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L436cdc.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L436ce2.  v0:= temp;
  #L436ce4.  if v0 == 0 then goto L436cf6;
  #L436ce8.  v1.`io.reactivex.internal.operators.observable.ObservableCountSingle$a.b` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L436cec.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableCountSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L436cf0.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L436cf6.  return @kind void;
}
