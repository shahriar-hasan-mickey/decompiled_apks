record `io.reactivex.internal.operators.observable.ObservableSkipUntil$b` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableSkipUntil$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.ArrayCompositeDisposable` `io.reactivex.internal.operators.observable.ObservableSkipUntil$b.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableSkipUntil$b.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSkipUntil$b.d` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSkipUntil$b.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSkipUntil$b` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.internal.disposables.ArrayCompositeDisposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipUntil$b;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/disposables/ArrayCompositeDisposable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44419c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4441a2.  v0.`io.reactivex.internal.operators.observable.ObservableSkipUntil$b.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4441a6.  v0.`io.reactivex.internal.operators.observable.ObservableSkipUntil$b.b` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` := v2 @kind object;
  #L4441aa.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSkipUntil$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipUntil$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4441bc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipUntil$b.b` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L4441c0.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.dispose:()V` @kind virtual;
  #L4441c6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipUntil$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L4441ca.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4441d0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSkipUntil$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipUntil$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4441e4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipUntil$b.b` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L4441e8.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.dispose:()V` @kind virtual;
  #L4441ee.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipUntil$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L4441f2.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4441f8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSkipUntil$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipUntil$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44420c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipUntil$b.e` @type ^`boolean` @kind boolean;
  #L444210.  if v0 == 0 then goto L444220;
  #L444214.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipUntil$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L444218.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44421e.  goto L444238;
  #L444220.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipUntil$b.d` @type ^`boolean` @kind boolean;
  #L444224.  if v0 == 0 then goto L444238;
  #L444228.  v0:= 1I;
  #L44422a.  v1.`io.reactivex.internal.operators.observable.ObservableSkipUntil$b.e` @type ^`boolean` := v0 @kind boolean;
  #L44422e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipUntil$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L444232.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L444238.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSkipUntil$b` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipUntil$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44424c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSkipUntil$b.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L444250.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L444256.  v0:= temp;
  #L444258.  if v0 == 0 then goto L44426c;
  #L44425c.  v2.`io.reactivex.internal.operators.observable.ObservableSkipUntil$b.c` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L444260.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSkipUntil$b.b` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L444264.  v1:= 0I;
  #L444266.  call temp:= `setResource`(v0, v1, v3) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.setResource:(ILio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L44426c.  return @kind void;
}
