record `io.reactivex.internal.operators.observable.ObservableFromPublisher$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableFromPublisher$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.observable.ObservableFromPublisher$a.b` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFromPublisher$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFromPublisher$a;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43b6f0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43b6f6.  v0.`io.reactivex.internal.operators.observable.ObservableFromPublisher$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L43b6fa.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableFromPublisher$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromPublisher$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b70c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFromPublisher$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43b710.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43b716.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L43b71a.  v1.`io.reactivex.internal.operators.observable.ObservableFromPublisher$a.b` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L43b71e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableFromPublisher$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromPublisher$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43b6cc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFromPublisher$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43b6d0.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L43b6d4.  if v0 != v1 then goto L43b6dc;
  #L43b6d8.  v0:= 1I;
  #L43b6da.  goto L43b6de;
  #L43b6dc.  v0:= 0I;
  #L43b6de.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableFromPublisher$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromPublisher$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b730.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFromPublisher$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43b734.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43b73a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableFromPublisher$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFromPublisher$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b74c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFromPublisher$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43b750.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43b756.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableFromPublisher$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFromPublisher$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b768.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFromPublisher$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43b76c.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43b772.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableFromPublisher$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFromPublisher$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43b784.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFromPublisher$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43b788.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L43b78e.  v0:= temp;
  #L43b790.  if v0 == 0 then goto L43b7b2;
  #L43b794.  v2.`io.reactivex.internal.operators.observable.ObservableFromPublisher$a.b` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L43b798.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFromPublisher$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43b79c.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43b7a2.  v0:= 9223372036854775807L;
  #L43b7ac.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43b7b2.  return @kind void;
}
