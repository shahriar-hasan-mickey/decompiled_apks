record `io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.c` @AccessFlag ;
  `long` `io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableElementAtMaybe$a;.<init>:(Lio/reactivex/MaybeObserver;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L438c20.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L438c26.  v0.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L438c2a.  v0.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.b` @type ^`long` := v2 @kind wide;
  #L438c2e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableElementAtMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438c40.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L438c44.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L438c4a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableElementAtMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438c00.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L438c04.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L438c0a.  v0:= temp;
  #L438c0c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableElementAtMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438c5c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.e` @type ^`boolean` @kind boolean;
  #L438c60.  if v0 != 0 then goto L438c74;
  #L438c64.  v0:= 1I;
  #L438c66.  v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.e` @type ^`boolean` := v0 @kind boolean;
  #L438c6a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L438c6e.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L438c74.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableElementAtMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438c88.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.e` @type ^`boolean` @kind boolean;
  #L438c8c.  if v0 == 0 then goto L438c98;
  #L438c90.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L438c96.  return @kind void;
  #L438c98.  v0:= 1I;
  #L438c9a.  v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.e` @type ^`boolean` := v0 @kind boolean;
  #L438c9e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L438ca2.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L438ca8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableElementAtMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L438cbc.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.e` @type ^`boolean` @kind boolean;
  #L438cc0.  if v0 == 0 then goto L438cc6;
  #L438cc4.  return @kind void;
  #L438cc6.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.d` @type ^`long` @kind wide;
  #L438cca.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.b` @type ^`long` @kind wide;
  #L438cce.  v4:= lcmp(v0, v2);
  #L438cd2.  if v4 != 0 then goto L438cf2;
  #L438cd6.  v0:= 1I;
  #L438cd8.  v5.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.e` @type ^`boolean` := v0 @kind boolean;
  #L438cdc.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L438ce0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L438ce6.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L438cea.  call `onSuccess`(v0, v6) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L438cf0.  return @kind void;
  #L438cf2.  v2:= 1L;
  #L438cf6.  v0:= v0 + v2 @kind long;
  #L438cf8.  v5.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.d` @type ^`long` := v0 @kind wide;
  #L438cfc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableElementAtMaybe$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438d10.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L438d14.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L438d1a.  v0:= temp;
  #L438d1c.  if v0 == 0 then goto L438d2e;
  #L438d20.  v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L438d24.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L438d28.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L438d2e.  return @kind void;
}
