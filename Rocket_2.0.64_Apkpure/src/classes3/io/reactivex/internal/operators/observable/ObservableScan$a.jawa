record `io.reactivex.internal.operators.observable.ObservableScan$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableScan$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.observable.ObservableScan$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableScan$a.c` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableScan$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableScan$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableScan$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScan$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L442d44.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L442d4a.  v0.`io.reactivex.internal.operators.observable.ObservableScan$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L442d4e.  v0.`io.reactivex.internal.operators.observable.ObservableScan$a.b` @type ^`io.reactivex.functions.BiFunction` := v2 @kind object;
  #L442d52.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableScan$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScan$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442d64.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScan$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L442d68.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L442d6e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableScan$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScan$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442d24.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScan$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L442d28.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L442d2e.  v0:= temp;
  #L442d30.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableScan$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScan$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442d80.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScan$a.e` @type ^`boolean` @kind boolean;
  #L442d84.  if v0 == 0 then goto L442d8a;
  #L442d88.  return @kind void;
  #L442d8a.  v0:= 1I;
  #L442d8c.  v1.`io.reactivex.internal.operators.observable.ObservableScan$a.e` @type ^`boolean` := v0 @kind boolean;
  #L442d90.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScan$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L442d94.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L442d9a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableScan$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScan$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442dac.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScan$a.e` @type ^`boolean` @kind boolean;
  #L442db0.  if v0 == 0 then goto L442dbc;
  #L442db4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L442dba.  return @kind void;
  #L442dbc.  v0:= 1I;
  #L442dbe.  v1.`io.reactivex.internal.operators.observable.ObservableScan$a.e` @type ^`boolean` := v0 @kind boolean;
  #L442dc2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScan$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L442dc6.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L442dcc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableScan$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScan$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L442de0.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableScan$a.e` @type ^`boolean` @kind boolean;
  #L442de4.  if v0 == 0 then goto L442dea;
  #L442de8.  return @kind void;
  #L442dea.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableScan$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L442dee.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableScan$a.d` @type ^`java.lang.Object` @kind object;
  #L442df2.  if v1 != 0 then goto L442e02;
  #L442df6.  v3.`io.reactivex.internal.operators.observable.ObservableScan$a.d` @type ^`java.lang.Object` := v4 @kind object;
  #L442dfa.  call `onNext`(v0, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L442e00.  goto L442e24;
  #L442e02.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableScan$a.b` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L442e06.  call temp:= `apply`(v2, v1, v4) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L442e0c.  v4:= temp @kind object;
  #L442e0e.  v1:= "The value returned by the accumulator is null" @kind object;
  #L442e12.  call temp:= `requireNonNull`(v4, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L442e18.  v4:= temp @kind object;
  #L442e1a.  v3.`io.reactivex.internal.operators.observable.ObservableScan$a.d` @type ^`java.lang.Object` := v4 @kind object;
  #L442e1e.  call `onNext`(v0, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L442e24.  return @kind void;
  #L442e26.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L442e28.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L442e2e.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableScan$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L442e32.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L442e38.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableScan$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L442e3e.  return @kind void;
  catch `java.lang.Throwable` @[L442e02..L442e1a] goto L442e26;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableScan$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScan$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442e5c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScan$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L442e60.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L442e66.  v0:= temp;
  #L442e68.  if v0 == 0 then goto L442e7a;
  #L442e6c.  v1.`io.reactivex.internal.operators.observable.ObservableScan$a.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L442e70.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableScan$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L442e74.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L442e7a.  return @kind void;
}
