record `io.reactivex.internal.operators.observable.ObservableBufferTimed$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.QueueDrainObserver` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBufferTimed$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableBufferTimed$a.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableBufferTimed$a.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableBufferTimed$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableBufferTimed$a.f` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.observable.ObservableBufferTimed$a.g` @AccessFlag FINAL;
  `java.util.Collection` `io.reactivex.internal.operators.observable.ObservableBufferTimed$a.h` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableBufferTimed$a.i` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableBufferTimed$a.j` @AccessFlag ;
  `long` `io.reactivex.internal.operators.observable.ObservableBufferTimed$a.k` @AccessFlag ;
  `long` `io.reactivex.internal.operators.observable.ObservableBufferTimed$a.l` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$a` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `int` v7 , `boolean` v8 , `io.reactivex.Scheduler$Worker` v9 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$a;.<init>:(Lio/reactivex/Observer;Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;IZLio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L434118.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L43411c.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L434122.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L434128.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.b` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L43412c.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.c` @type ^`long` := v4 @kind wide;
  #L434130.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.d` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L434134.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.e` @type ^`int` := v7;
  #L434138.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.f` @type ^`boolean` := v8 @kind boolean;
  #L43413c.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.g` @type ^`io.reactivex.Scheduler$Worker` := v9 @kind object;
  #L434140.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$a;.a:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @AccessFlag PUBLIC {
    temp;

  #L434170.  call `onNext`(v1, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L434176.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$a;.accept:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L434154.  v2:= (`java.util.Collection`) v2 @kind object;
  #L434158.  call `a`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$a;.a:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @kind virtual;
  #L43415e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L434188.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L43418c.  if v0 != 0 then goto L4341bc;
  #L434190.  v0:= 1I;
  #L434192.  v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L434196.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.j` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43419a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4341a0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4341a4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4341aa.  @monitorenter v1
  #L4341ac.  v0:= 0I;
  #L4341ae.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` := v0 @kind object;
  #L4341b2.  @monitorexit v1
  #L4341b4.  goto L4341bc;
  #L4341b6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4341b8.  @monitorexit v1
  #L4341ba.  throw v0;
  #L4341bc.  return @kind void;
  catch `java.lang.Throwable` @[L4341ae..L4341ba] goto L4341b6;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L434100.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L434104.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4341dc.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4341e0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4341e6.  @monitorenter v3
  #L4341e8.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` @kind object;
  #L4341ec.  v1:= 0I;
  #L4341ee.  v3.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` := v1 @kind object;
  #L4341f2.  @monitorexit v3
  #L4341f4.  v1:= v3.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4341f8.  call temp:= `offer`(v1, v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4341fe.  v0:= 1I;
  #L434200.  v3.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L434204.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L43420a.  v0:= temp;
  #L43420c.  if v0 == 0 then goto L434220;
  #L434210.  v0:= v3.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L434214.  v1:= v3.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L434218.  v2:= 0I;
  #L43421a.  call `drainLoop`(v0, v1, v2, v3, v3) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lio/reactivex/Observer;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain;)V` @kind static;
  #L434220.  return @kind void;
  #L434222.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L434224.  @monitorexit v3
  #L434226.  throw v0;
  catch `java.lang.Throwable` @[L4341e8..L4341f4] goto L434222;
  catch `java.lang.Throwable` @[L434224..L434226] goto L434222;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43424c.  @monitorenter v1
  #L43424e.  v0:= 0I;
  #L434250.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` := v0 @kind object;
  #L434254.  @monitorexit v1
  #L434256.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L43425a.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L434260.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L434264.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43426a.  return @kind void;
  #L43426c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43426e.  @monitorexit v1
  #L434270.  throw v2;
  catch `java.lang.Throwable` @[L434250..L434256] goto L43426c;
  catch `java.lang.Throwable` @[L43426e..L434270] goto L43426c;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$a` v12 @kind this, `java.lang.Object` v13 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L434298.  @monitorenter v12
  #L43429a.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` @kind object;
  #L43429e.  if v0 != 0 then goto L4342a6;
  #L4342a2.  @monitorexit v12
  #L4342a4.  return @kind void;
  #L4342a6.  call temp:= `add`(v0, v13) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4342ac.  call temp:= `size`(v0) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L4342b2.  v13:= temp;
  #L4342b4.  v1:= v12.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.e` @type ^`int`;
  #L4342b8.  if v13 >= v1 then goto L4342c0;
  #L4342bc.  @monitorexit v12
  #L4342be.  return @kind void;
  #L4342c0.  @monitorexit v12
  #L4342c2.  v13:= v12.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.f` @type ^`boolean` @kind boolean;
  #L4342c6.  v1:= 1L;
  #L4342ca.  if v13 == 0 then goto L4342e8;
  #L4342ce.  v13:= 0I;
  #L4342d0.  v12.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` := v13 @kind object;
  #L4342d4.  v3:= v12.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.k` @type ^`long` @kind wide;
  #L4342d8.  v3:= v3 + v1 @kind long;
  #L4342da.  v12.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.k` @type ^`long` := v3 @kind wide;
  #L4342de.  v13:= v12.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.i` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4342e2.  call `dispose`(v13) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4342e8.  v13:= 0I;
  #L4342ea.  call `fastPathOrderedEmit`(v12, v0, v13, v12) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastPathOrderedEmit:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L4342f0.  v13:= v12.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L4342f4.  call temp:= `call`(v13) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L4342fa.  v13:= temp @kind object;
  #L4342fc.  v0:= "The buffer supplied is null" @kind object;
  #L434300.  call temp:= `requireNonNull`(v13, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L434306.  v13:= temp @kind object;
  #L434308.  v13:= (`java.util.Collection`) v13 @kind object;
  #L43430c.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.f` @type ^`boolean` @kind boolean;
  #L434310.  if v0 == 0 then goto L43434a;
  #L434314.  @monitorenter v12
  #L434316.  v12.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` := v13 @kind object;
  #L43431a.  v3:= v12.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.l` @type ^`long` @kind wide;
  #L43431e.  v3:= v3 + v1 @kind long;
  #L434320.  v12.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.l` @type ^`long` := v3 @kind wide;
  #L434324.  @monitorexit v12
  #L434326.  v5:= v12.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L43432a.  v9:= v12.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.c` @type ^`long` @kind wide;
  #L43432e.  v11:= v12.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L434332.  v6:= v12 @kind object;
  #L434334.  v7:= v9 @kind wide;
  #L434336.  call temp:= `schedulePeriodically`(v5, v6, v7, v9, v11) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L43433c.  v13:= temp @kind object;
  #L43433e.  v12.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.i` @type ^`io.reactivex.disposables.Disposable` := v13 @kind object;
  #L434342.  goto L434352;
  #L434344.  v13:= Exception @type ^`java.lang.Throwable` @kind object;
  #L434346.  @monitorexit v12
  #L434348.  throw v13;
  #L43434a.  @monitorenter v12
  #L43434c.  v12.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` := v13 @kind object;
  #L434350.  @monitorexit v12
  #L434352.  return @kind void;
  #L434354.  v13:= Exception @type ^`java.lang.Throwable` @kind object;
  #L434356.  @monitorexit v12
  #L434358.  throw v13;
  #L43435a.  v13:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43435c.  call `throwIfFatal`(v13) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L434362.  v0:= v12.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L434366.  call `onError`(v0, v13) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43436c.  call `dispose`(v12) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$a;.dispose:()V` @kind virtual;
  #L434372.  return @kind void;
  #L434374.  v13:= Exception @type ^`java.lang.Throwable` @kind object;
  #L434376.  @monitorexit v12
  #L434378.  throw v13;
  catch `java.lang.Throwable` @[L43429a..L4342c2] goto L434374;
  catch `java.lang.Throwable` @[L4342f0..L43430c] goto L43435a;
  catch `java.lang.Throwable` @[L434316..L434326] goto L434344;
  catch `java.lang.Throwable` @[L434346..L434348] goto L434344;
  catch `java.lang.Throwable` @[L43434c..L434358] goto L434354;
  catch `java.lang.Throwable` @[L434376..L434378] goto L434374;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$a` v7 @kind this, `io.reactivex.disposables.Disposable` v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4343c8.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.j` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4343cc.  call temp:= `validate`(v0, v8) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4343d2.  v0:= temp;
  #L4343d4.  if v0 == 0 then goto L434446;
  #L4343d8.  v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.j` @type ^`io.reactivex.disposables.Disposable` := v8 @kind object;
  #L4343dc.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L4343e0.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L4343e6.  v0:= temp @kind object;
  #L4343e8.  v1:= "The buffer supplied is null" @kind object;
  #L4343ec.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4343f2.  v0:= temp @kind object;
  #L4343f4.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4343f8.  v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` := v0 @kind object;
  #L4343fc.  v8:= v7.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L434400.  call `onSubscribe`(v8, v7) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L434406.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L43440a.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.c` @type ^`long` @kind wide;
  #L43440e.  v6:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L434412.  v1:= v7 @kind object;
  #L434414.  v2:= v4 @kind wide;
  #L434416.  call temp:= `schedulePeriodically`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L43441c.  v8:= temp @kind object;
  #L43441e.  v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.i` @type ^`io.reactivex.disposables.Disposable` := v8 @kind object;
  #L434422.  goto L434446;
  #L434424.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L434426.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43442c.  call `dispose`(v8) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L434432.  v8:= v7.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L434436.  call `error`(v0, v8) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L43443c.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L434440.  call `dispose`(v8) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L434446.  return @kind void;
  catch `java.lang.Throwable` @[L4343dc..L4343f8] goto L434424;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$a` v7 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L434464.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L434468.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L43446e.  v0:= temp @kind object;
  #L434470.  v1:= "The bufferSupplier returned a null buffer" @kind object;
  #L434474.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43447a.  v0:= temp @kind object;
  #L43447c.  v0:= (`java.util.Collection`) v0 @kind object;
  #L434480.  @monitorenter v7
  #L434482.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` @kind object;
  #L434486.  if v1 == 0 then goto L4344ac;
  #L43448a.  v2:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.k` @type ^`long` @kind wide;
  #L43448e.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.l` @type ^`long` @kind wide;
  #L434492.  v6:= lcmp(v2, v4);
  #L434496.  if v6 == 0 then goto L43449c;
  #L43449a.  goto L4344ac;
  #L43449c.  v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` := v0 @kind object;
  #L4344a0.  @monitorexit v7
  #L4344a2.  v0:= 0I;
  #L4344a4.  call `fastPathOrderedEmit`(v7, v1, v0, v7) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastPathOrderedEmit:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L4344aa.  return @kind void;
  #L4344ac.  @monitorexit v7
  #L4344ae.  return @kind void;
  #L4344b0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4344b2.  @monitorexit v7
  #L4344b4.  throw v0;
  #L4344b6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4344b8.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4344be.  call `dispose`(v7) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$a;.dispose:()V` @kind virtual;
  #L4344c4.  v1:= v7.`io.reactivex.internal.observers.QueueDrainObserver.actual` @type ^`io.reactivex.Observer` @kind object;
  #L4344c8.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4344ce.  return @kind void;
  catch `java.lang.Throwable` @[L434464..L434480] goto L4344b6;
  catch `java.lang.Throwable` @[L434482..L4344a2] goto L4344b0;
  catch `java.lang.Throwable` @[L4344ac..L4344b4] goto L4344b0;
}
