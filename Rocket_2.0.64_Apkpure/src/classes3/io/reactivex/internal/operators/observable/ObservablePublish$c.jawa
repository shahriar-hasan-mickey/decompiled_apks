record `io.reactivex.internal.operators.observable.ObservablePublish$c` @kind class @AccessFlag FINAL extends `io.reactivex.ObservableSource` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservablePublish$c.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservablePublish$c` v0 @kind this, `java.util.concurrent.atomic.AtomicReference` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$c;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43f654.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43f65a.  v0.`io.reactivex.internal.operators.observable.ObservablePublish$c.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L43f65e.  return @kind void;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.observable.ObservablePublish$c` v3 @kind this, `io.reactivex.Observer` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$c;.subscribe:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43f670.  v0:= new `io.reactivex.internal.operators.observable.ObservablePublish$a`;
  #L43f674.  call `<init>`(v0, v4) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$a;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L43f67a.  call `onSubscribe`(v4, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43f680.  v4:= v3.`io.reactivex.internal.operators.observable.ObservablePublish$c.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43f684.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43f68a.  v4:= temp @kind object;
  #L43f68c.  v4:= (`io.reactivex.internal.operators.observable.ObservablePublish$b`) v4 @kind object;
  #L43f690.  if v4 == 0 then goto L43f6a0;
  #L43f694.  call temp:= `isDisposed`(v4) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.isDisposed:()Z` @kind virtual;
  #L43f69a.  v1:= temp;
  #L43f69c.  if v1 == 0 then goto L43f6c2;
  #L43f6a0.  v1:= new `io.reactivex.internal.operators.observable.ObservablePublish$b`;
  #L43f6a4.  v2:= v3.`io.reactivex.internal.operators.observable.ObservablePublish$c.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43f6a8.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L43f6ae.  v2:= v3.`io.reactivex.internal.operators.observable.ObservablePublish$c.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43f6b2.  call temp:= `compareAndSet`(v2, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L43f6b8.  v4:= temp;
  #L43f6ba.  if v4 != 0 then goto L43f6c0;
  #L43f6be.  goto L43f680;
  #L43f6c0.  v4:= v1 @kind object;
  #L43f6c2.  call temp:= `a`(v4, v0) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.a:(Lio/reactivex/internal/operators/observable/ObservablePublish$a;)Z` @kind virtual;
  #L43f6c8.  v1:= temp;
  #L43f6ca.  if v1 == 0 then goto L43f680;
  #L43f6ce.  call `a`(v0, v4) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$a;.a:(Lio/reactivex/internal/operators/observable/ObservablePublish$b;)V` @kind virtual;
  #L43f6d4.  return @kind void;
}
