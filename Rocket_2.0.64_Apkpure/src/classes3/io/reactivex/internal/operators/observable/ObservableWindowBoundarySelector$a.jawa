record `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$a` @kind class @AccessFlag FINAL extends `io.reactivex.observers.DisposableObserver` @kind class {
  `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$a.b` @AccessFlag FINAL;
  `io.reactivex.subjects.UnicastSubject` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$a` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` v1 @kind object, `io.reactivex.subjects.UnicastSubject` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;Lio/reactivex/subjects/UnicastSubject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L447b04.  call `<init>`(v0) @signature `Lio/reactivex/observers/DisposableObserver;.<init>:()V` @kind direct;
  #L447b0a.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` := v1 @kind object;
  #L447b0e.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$a.c` @type ^`io.reactivex.subjects.UnicastSubject` := v2 @kind object;
  #L447b12.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L447b24.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$a.d` @type ^`boolean` @kind boolean;
  #L447b28.  if v0 == 0 then goto L447b2e;
  #L447b2c.  return @kind void;
  #L447b2e.  v0:= 1I;
  #L447b30.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$a.d` @type ^`boolean` := v0 @kind boolean;
  #L447b34.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` @kind object;
  #L447b38.  call `a`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.a:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$a;)V` @kind virtual;
  #L447b3e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L447b50.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$a.d` @type ^`boolean` @kind boolean;
  #L447b54.  if v0 == 0 then goto L447b60;
  #L447b58.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L447b5e.  return @kind void;
  #L447b60.  v0:= 1I;
  #L447b62.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$a.d` @type ^`boolean` := v0 @kind boolean;
  #L447b66.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` @kind object;
  #L447b6a.  call `d`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.d:(Ljava/lang/Throwable;)V` @kind virtual;
  #L447b70.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L447b84.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$a.d` @type ^`boolean` @kind boolean;
  #L447b88.  if v1 == 0 then goto L447b8e;
  #L447b8c.  return @kind void;
  #L447b8e.  v1:= 1I;
  #L447b90.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$a.d` @type ^`boolean` := v1 @kind boolean;
  #L447b94.  call `dispose`(v0) @signature `Lio/reactivex/observers/DisposableObserver;.dispose:()V` @kind virtual;
  #L447b9a.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` @kind object;
  #L447b9e.  call `a`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.a:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$a;)V` @kind virtual;
  #L447ba4.  return @kind void;
}
