record `io.reactivex.internal.operators.observable.ObservableFromIterable$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicQueueDisposable` @kind class {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableFromIterable$a.a` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.internal.operators.observable.ObservableFromIterable$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFromIterable$a.c` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFromIterable$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFromIterable$a.e` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFromIterable$a.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFromIterable$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$a;.<init>:(Lio/reactivex/Observer;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43b520.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicQueueDisposable;.<init>:()V` @kind direct;
  #L43b526.  v0.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L43b52a.  v0.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.b` @type ^`java.util.Iterator` := v2 @kind object;
  #L43b52e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableFromIterable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L43b570.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$a;.isDisposed:()Z` @kind virtual;
  #L43b576.  v0:= temp;
  #L43b578.  if v0 == 0 then goto L43b57e;
  #L43b57c.  return @kind void;
  #L43b57e.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.b` @type ^`java.util.Iterator` @kind object;
  #L43b582.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43b588.  v0:= temp @kind object;
  #L43b58a.  v1:= "The iterator returned a null value" @kind object;
  #L43b58e.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43b594.  v0:= temp @kind object;
  #L43b596.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43b59a.  call `onNext`(v1, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43b5a0.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$a;.isDisposed:()Z` @kind virtual;
  #L43b5a6.  v0:= temp;
  #L43b5a8.  if v0 == 0 then goto L43b5ae;
  #L43b5ac.  return @kind void;
  #L43b5ae.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.b` @type ^`java.util.Iterator` @kind object;
  #L43b5b2.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43b5b8.  v0:= temp;
  #L43b5ba.  if v0 != 0 then goto L43b570;
  #L43b5be.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$a;.isDisposed:()Z` @kind virtual;
  #L43b5c4.  v0:= temp;
  #L43b5c6.  if v0 != 0 then goto L43b5d4;
  #L43b5ca.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43b5ce.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L43b5d4.  return @kind void;
  #L43b5d6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43b5d8.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43b5de.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43b5e2.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43b5e8.  return @kind void;
  #L43b5ea.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43b5ec.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43b5f2.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L43b5f6.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43b5fc.  return @kind void;
  catch `java.lang.Throwable` @[L43b57e..L43b596] goto L43b5ea;
  catch `java.lang.Throwable` @[L43b5ae..L43b5ba] goto L43b5d6;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableFromIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b540.  v0:= 1I;
  #L43b542.  v1.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L43b546.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableFromIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b558.  v0:= 1I;
  #L43b55a.  v1.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.c` @type ^`boolean` := v0 @kind boolean;
  #L43b55e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableFromIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b470.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.c` @type ^`boolean` @kind boolean;
  #L43b474.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.observable.ObservableFromIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b488.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.e` @type ^`boolean` @kind boolean;
  #L43b48c.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableFromIterable$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43b4c4.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.e` @type ^`boolean` @kind boolean;
  #L43b4c8.  v1:= 0I;
  #L43b4ca.  if v0 == 0 then goto L43b4d0;
  #L43b4ce.  return v1 @kind object;
  #L43b4d0.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.f` @type ^`boolean` @kind boolean;
  #L43b4d4.  v2:= 1I;
  #L43b4d6.  if v0 == 0 then goto L43b4f0;
  #L43b4da.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.b` @type ^`java.util.Iterator` @kind object;
  #L43b4de.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43b4e4.  v0:= temp;
  #L43b4e6.  if v0 != 0 then goto L43b4f4;
  #L43b4ea.  v3.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.e` @type ^`boolean` := v2 @kind boolean;
  #L43b4ee.  return v1 @kind object;
  #L43b4f0.  v3.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.f` @type ^`boolean` := v2 @kind boolean;
  #L43b4f4.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.b` @type ^`java.util.Iterator` @kind object;
  #L43b4f8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43b4fe.  v0:= temp @kind object;
  #L43b500.  v1:= "The iterator returned a null value" @kind object;
  #L43b504.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43b50a.  v0:= temp @kind object;
  #L43b50c.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableFromIterable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b4a0.  v0:= 1I;
  #L43b4a2.  v2:= v2 ^& v0 @kind int;
  #L43b4a4.  if v2 == 0 then goto L43b4ae;
  #L43b4a8.  v1.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.d` @type ^`boolean` := v0 @kind boolean;
  #L43b4ac.  return v0;
  #L43b4ae.  v2:= 0I;
  #L43b4b0.  return v2;
}
