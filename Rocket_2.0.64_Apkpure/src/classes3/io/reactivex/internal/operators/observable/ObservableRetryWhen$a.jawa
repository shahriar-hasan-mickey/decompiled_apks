record `io.reactivex.internal.operators.observable.ObservableRetryWhen$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableRetryWhen$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableRetryWhen$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableRetryWhen$a.c` @AccessFlag FINAL;
  `io.reactivex.subjects.Subject` `io.reactivex.internal.operators.observable.ObservableRetryWhen$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableRetryWhen$a$a` `io.reactivex.internal.operators.observable.ObservableRetryWhen$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableRetryWhen$a.f` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableRetryWhen$a.g` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableRetryWhen$a.h` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRetryWhen$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.subjects.Subject` v2 @kind object, `io.reactivex.ObservableSource` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/subjects/Subject;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L442014.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L44201a.  v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L44201e.  v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.d` @type ^`io.reactivex.subjects.Subject` := v2 @kind object;
  #L442022.  v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.g` @type ^`io.reactivex.ObservableSource` := v3 @kind object;
  #L442026.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L44202a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L442030.  v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L442034.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L442038.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L44203e.  v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.c` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L442042.  v1:= new `io.reactivex.internal.operators.observable.ObservableRetryWhen$a$a`;
  #L442046.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a;)V` @kind direct;
  #L44204c.  v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.e` @type ^`io.reactivex.internal.operators.observable.ObservableRetryWhen$a$a` := v1 @kind object;
  #L442050.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L442054.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L44205a.  v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L44205e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L442098.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44209c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4420a2.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4420a6.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4420aa.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L4420b0.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4420c4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4420c8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4420ce.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4420d2.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4420d6.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lio/reactivex/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L4420dc.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a;.c:()V` @AccessFlag  {
    temp;

  #L4420f0.  call `d`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a;.d:()V` @kind virtual;
  #L4420f6.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L442194.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L442198.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44219e.  v0:= temp;
  #L4421a0.  if v0 != 0 then goto L4421da;
  #L4421a4.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a;.isDisposed:()Z` @kind virtual;
  #L4421aa.  v0:= temp;
  #L4421ac.  if v0 == 0 then goto L4421b2;
  #L4421b0.  return @kind void;
  #L4421b2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.h` @type ^`boolean` @kind boolean;
  #L4421b6.  if v0 != 0 then goto L4421ca;
  #L4421ba.  v0:= 1I;
  #L4421bc.  v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4421c0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.g` @type ^`io.reactivex.ObservableSource` @kind object;
  #L4421c4.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4421ca.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4421ce.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4421d4.  v0:= temp;
  #L4421d6.  if v0 != 0 then goto L4421a4;
  #L4421da.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442070.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L442074.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44207a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.e` @type ^`io.reactivex.internal.operators.observable.ObservableRetryWhen$a$a` @kind object;
  #L44207e.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L442084.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L441fe8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L441fec.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L441ff2.  v0:= temp @kind object;
  #L441ff4.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L441ff8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L441ffe.  v0:= temp;
  #L442000.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L442108.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.e` @type ^`io.reactivex.internal.operators.observable.ObservableRetryWhen$a$a` @kind object;
  #L44210c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L442112.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L442116.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44211a.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L442120.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442134.  v0:= 0I;
  #L442136.  v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.h` @type ^`boolean` := v0 @kind boolean;
  #L44213a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.d` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L44213e.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L442144.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L442158.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L44215c.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L442160.  call `onNext`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onNext:(Lio/reactivex/Observer;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L442166.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442178.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44217c.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L442182.  return @kind void;
}
