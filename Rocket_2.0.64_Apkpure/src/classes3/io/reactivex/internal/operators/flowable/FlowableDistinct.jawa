record `io.reactivex.internal.operators.flowable.FlowableDistinct` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableDistinct.b` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableDistinct.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDistinct` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinct;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L41193c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L411942.  v0.`io.reactivex.internal.operators.flowable.FlowableDistinct.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L411946.  v0.`io.reactivex.internal.operators.flowable.FlowableDistinct.c` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L41194a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableDistinct` v4 @kind this, `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinct;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41195c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableDistinct.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L411960.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L411966.  v0:= temp @kind object;
  #L411968.  v1:= "The collectionSupplier returned a null collection. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L41196c.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L411972.  v0:= temp @kind object;
  #L411974.  v0:= (`java.util.Collection`) v0 @kind object;
  #L411978.  v1:= v4.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L41197c.  v2:= new `io.reactivex.internal.operators.flowable.FlowableDistinct$a`;
  #L411980.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableDistinct.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L411984.  call `<init>`(v2, v5, v3, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinct$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Ljava/util/Collection;)V` @kind direct;
  #L41198a.  call `subscribe`(v1, v2) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L411990.  return @kind void;
  #L411992.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L411994.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41199a.  call `error`(v0, v5) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L4119a0.  return @kind void;
  catch `java.lang.Throwable` @[L41195c..L411978] goto L411992;
}
