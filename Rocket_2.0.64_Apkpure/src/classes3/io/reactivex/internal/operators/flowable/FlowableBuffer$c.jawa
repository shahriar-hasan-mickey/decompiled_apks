record `io.reactivex.internal.operators.flowable.FlowableBuffer$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableBuffer$c.a` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBuffer$c.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$c.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$c.d` @AccessFlag FINAL;
  `java.util.Collection` `io.reactivex.internal.operators.flowable.FlowableBuffer$c.e` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableBuffer$c.f` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBuffer$c.g` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$c.h` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableBuffer$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBuffer$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `int` v3 , `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$c;.<init>:(Lorg/reactivestreams/Subscriber;IILjava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40b0ac.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L40b0b2.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L40b0b6.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.c` @type ^`int` := v2;
  #L40b0ba.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.d` @type ^`int` := v3;
  #L40b0be.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.b` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L40b0c2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBuffer$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40b0d4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40b0d8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40b0de.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBuffer$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40b0f0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.g` @type ^`boolean` @kind boolean;
  #L40b0f4.  if v0 == 0 then goto L40b0fa;
  #L40b0f8.  return @kind void;
  #L40b0fa.  v0:= 1I;
  #L40b0fc.  v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.g` @type ^`boolean` := v0 @kind boolean;
  #L40b100.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.e` @type ^`java.util.Collection` @kind object;
  #L40b104.  v1:= 0I;
  #L40b106.  v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.e` @type ^`java.util.Collection` := v1 @kind object;
  #L40b10a.  if v0 == 0 then goto L40b118;
  #L40b10e.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40b112.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40b118.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40b11c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40b122.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBuffer$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40b134.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.g` @type ^`boolean` @kind boolean;
  #L40b138.  if v0 == 0 then goto L40b144;
  #L40b13c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40b142.  return @kind void;
  #L40b144.  v0:= 1I;
  #L40b146.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.g` @type ^`boolean` := v0 @kind boolean;
  #L40b14a.  v0:= 0I;
  #L40b14c.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.e` @type ^`java.util.Collection` := v0 @kind object;
  #L40b150.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40b154.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40b15a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBuffer$c` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40b16c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.g` @type ^`boolean` @kind boolean;
  #L40b170.  if v0 == 0 then goto L40b176;
  #L40b174.  return @kind void;
  #L40b176.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.e` @type ^`java.util.Collection` @kind object;
  #L40b17a.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.h` @type ^`int`;
  #L40b17e.  v2:= v1 + 1;
  #L40b182.  if v1 != 0 then goto L40b1be;
  #L40b186.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L40b18a.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L40b190.  v0:= temp @kind object;
  #L40b192.  v1:= "The bufferSupplier returned a null buffer" @kind object;
  #L40b196.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40b19c.  v0:= temp @kind object;
  #L40b19e.  v0:= (`java.util.Collection`) v0 @kind object;
  #L40b1a2.  v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.e` @type ^`java.util.Collection` := v0 @kind object;
  #L40b1a6.  goto L40b1be;
  #L40b1a8.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40b1aa.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40b1b0.  call `cancel`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$c;.cancel:()V` @kind virtual;
  #L40b1b6.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40b1bc.  return @kind void;
  #L40b1be.  if v0 == 0 then goto L40b1e8;
  #L40b1c2.  call temp:= `add`(v0, v4) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L40b1c8.  call temp:= `size`(v0) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L40b1ce.  v4:= temp;
  #L40b1d0.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.c` @type ^`int`;
  #L40b1d4.  if v4 != v1 then goto L40b1e8;
  #L40b1d8.  v4:= 0I;
  #L40b1da.  v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.e` @type ^`java.util.Collection` := v4 @kind object;
  #L40b1de.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40b1e2.  call `onNext`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40b1e8.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.d` @type ^`int`;
  #L40b1ec.  if v2 != v4 then goto L40b1f2;
  #L40b1f0.  v2:= 0I;
  #L40b1f2.  v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.h` @type ^`int` := v2;
  #L40b1f6.  return @kind void;
  catch `java.lang.Throwable` @[L40b186..L40b1a2] goto L40b1a8;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBuffer$c` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40b214.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40b218.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40b21e.  v0:= temp;
  #L40b220.  if v0 == 0 then goto L40b232;
  #L40b224.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.f` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L40b228.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40b22c.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40b232.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBuffer$c` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L40b244.  call temp:= `validate`(v7) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L40b24a.  v0:= temp;
  #L40b24c.  if v0 == 0 then goto L40b2c0;
  #L40b250.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L40b256.  v0:= temp;
  #L40b258.  if v0 != 0 then goto L40b2a8;
  #L40b25c.  v0:= 0I;
  #L40b25e.  v1:= 1I;
  #L40b260.  call temp:= `compareAndSet`(v6, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L40b266.  v0:= temp;
  #L40b268.  if v0 == 0 then goto L40b2a8;
  #L40b26c.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.c` @type ^`int`;
  #L40b270.  v0:= (`long`) v0 @kind i2l;
  #L40b272.  call temp:= `multiplyCap`(v7, v0) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L40b278.  v0:= temp @kind wide;
  #L40b27a.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.d` @type ^`int`;
  #L40b27e.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.c` @type ^`int`;
  #L40b282.  v2:= v2 - v3 @kind int;
  #L40b284.  v2:= (`long`) v2 @kind i2l;
  #L40b286.  v4:= 1L;
  #L40b28a.  v7:= v7 - v4 @kind long;
  #L40b28c.  call temp:= `multiplyCap`(v2, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L40b292.  v7:= temp @kind wide;
  #L40b294.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40b298.  call temp:= `addCap`(v0, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L40b29e.  v7:= temp @kind wide;
  #L40b2a0.  call `request`(v2, v7) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40b2a6.  goto L40b2c0;
  #L40b2a8.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40b2ac.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.d` @type ^`int`;
  #L40b2b0.  v1:= (`long`) v1 @kind i2l;
  #L40b2b2.  call temp:= `multiplyCap`(v1, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L40b2b8.  v7:= temp @kind wide;
  #L40b2ba.  call `request`(v0, v7) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40b2c0.  return @kind void;
}
