record `io.reactivex.internal.operators.flowable.FlowableZip` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Flowable` @kind class {
  `org.reactivestreams.Publisher`[] `io.reactivex.internal.operators.flowable.FlowableZip.b` @AccessFlag FINAL;
  `java.lang.Iterable` `io.reactivex.internal.operators.flowable.FlowableZip.c` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableZip.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableZip.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableZip.f` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableZip` v0 @kind this, `org.reactivestreams.Publisher`[] v1 @kind object, `java.lang.Iterable` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 , `boolean` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip;.<init>:([Lorg/reactivestreams/Publisher;Ljava/lang/Iterable;Lio/reactivex/functions/Function;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L429ca4.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L429caa.  v0.`io.reactivex.internal.operators.flowable.FlowableZip.b` @type ^`org.reactivestreams.Publisher`[] := v1 @kind object;
  #L429cae.  v0.`io.reactivex.internal.operators.flowable.FlowableZip.c` @type ^`java.lang.Iterable` := v2 @kind object;
  #L429cb2.  v0.`io.reactivex.internal.operators.flowable.FlowableZip.d` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L429cb6.  v0.`io.reactivex.internal.operators.flowable.FlowableZip.e` @type ^`int` := v4;
  #L429cba.  v0.`io.reactivex.internal.operators.flowable.FlowableZip.f` @type ^`boolean` := v5 @kind boolean;
  #L429cbe.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableZip` v9 @kind this, `org.reactivestreams.Subscriber` v10 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L429cd0.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableZip.b` @type ^`org.reactivestreams.Publisher`[] @kind object;
  #L429cd4.  if v0 != 0 then goto L429d2c;
  #L429cd8.  v0:= 8I;
  #L429cdc.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L429ce0.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableZip.c` @type ^`java.lang.Iterable` @kind object;
  #L429ce4.  call temp:= `iterator`(v1) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L429cea.  v1:= temp @kind object;
  #L429cec.  v2:= 0I;
  #L429cee.  v3:= 0I;
  #L429cf0.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L429cf6.  v4:= temp;
  #L429cf8.  if v4 == 0 then goto L429d2e;
  #L429cfc.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L429d02.  v4:= temp @kind object;
  #L429d04.  v4:= (`org.reactivestreams.Publisher`) v4 @kind object;
  #L429d08.  v5:= length @variable v0;
  #L429d0a.  if v3 != v5 then goto L429d20;
  #L429d0e.  v5:= v3 ^> 2;
  #L429d12.  v5:= v5 + v3 @kind int;
  #L429d14.  v5:= new `org.reactivestreams.Publisher`[v5];
  #L429d18.  call `arraycopy`(v0, v2, v5, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L429d1e.  v0:= v5 @kind object;
  #L429d20.  v5:= v3 + 1;
  #L429d24.  v0[v3]:= v4 @kind object;
  #L429d28.  v3:= v5;
  #L429d2a.  goto L429cf0;
  #L429d2c.  v3:= length @variable v0;
  #L429d2e.  v7:= v3;
  #L429d30.  if v7 != 0 then goto L429d3c;
  #L429d34.  call `complete`(v10) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.complete:(Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L429d3a.  return @kind void;
  #L429d3c.  v8:= new `io.reactivex.internal.operators.flowable.FlowableZip$a`;
  #L429d40.  v3:= v9.`io.reactivex.internal.operators.flowable.FlowableZip.d` @type ^`io.reactivex.functions.Function` @kind object;
  #L429d44.  v5:= v9.`io.reactivex.internal.operators.flowable.FlowableZip.e` @type ^`int`;
  #L429d48.  v6:= v9.`io.reactivex.internal.operators.flowable.FlowableZip.f` @type ^`boolean` @kind boolean;
  #L429d4c.  v1:= v8 @kind object;
  #L429d4e.  v2:= v10 @kind object;
  #L429d50.  v4:= v7;
  #L429d52.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;IIZ)V` @kind direct;
  #L429d58.  call `onSubscribe`(v10, v8) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L429d5e.  call `d`(v8, v0, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$a;.d:([Lorg/reactivestreams/Publisher;I)V` @kind virtual;
  #L429d64.  return @kind void;
}
