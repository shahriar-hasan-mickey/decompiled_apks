record `io.reactivex.internal.operators.flowable.FlowableCreate$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableCreate$b` @kind class {
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.flowable.FlowableCreate$c.c` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableCreate$c.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCreate$c.e` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableCreate$c.f` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCreate$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCreate$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$c;.<init>:(Lorg/reactivestreams/Subscriber;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40fa98.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L40fa9e.  v1:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L40faa2.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L40faa8.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate$c.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v1 @kind object;
  #L40faac.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L40fab0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L40fab6.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L40faba.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableCreate$c` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$c;.a:()V` @AccessFlag  {
    temp;

  #L40fc9c.  call `c`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$c;.c:()V` @kind virtual;
  #L40fca2.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableCreate$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$c;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L40fcb4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40fcb8.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L40fcbe.  v0:= temp;
  #L40fcc0.  if v0 != 0 then goto L40fcce;
  #L40fcc4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$c.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L40fcc8.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L40fcce.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableCreate$c` v14 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$c;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L40facc.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableCreate$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40fad0.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L40fad6.  v0:= temp;
  #L40fad8.  if v0 == 0 then goto L40fade;
  #L40fadc.  return @kind void;
  #L40fade.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableCreate$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40fae2.  v1:= v14.`io.reactivex.internal.operators.flowable.FlowableCreate$c.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L40fae6.  v2:= 1I;
  #L40fae8.  v3:= 1I;
  #L40faea.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L40faf0.  v4:= temp @kind wide;
  #L40faf2.  v6:= 0L;
  #L40faf6.  v8:= v6 @kind wide;
  #L40faf8.  v10:= lcmp(v8, v4);
  #L40fafc.  if v10 == 0 then goto L40fb5e;
  #L40fb00.  call temp:= `isCancelled`(v14) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L40fb06.  v11:= temp;
  #L40fb08.  if v11 == 0 then goto L40fb14;
  #L40fb0c.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L40fb12.  return @kind void;
  #L40fb14.  v11:= v14.`io.reactivex.internal.operators.flowable.FlowableCreate$c.e` @type ^`boolean` @kind boolean;
  #L40fb18.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L40fb1e.  v12:= temp @kind object;
  #L40fb20.  if v12 != 0 then goto L40fb28;
  #L40fb24.  v13:= 1I;
  #L40fb26.  goto L40fb2a;
  #L40fb28.  v13:= 0I;
  #L40fb2a.  if v11 == 0 then goto L40fb4a;
  #L40fb2e.  if v13 == 0 then goto L40fb4a;
  #L40fb32.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableCreate$c.d` @type ^`java.lang.Throwable` @kind object;
  #L40fb36.  if v0 == 0 then goto L40fb42;
  #L40fb3a.  call `onError`(v14, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.onError:(Ljava/lang/Throwable;)V` @kind super;
  #L40fb40.  goto L40fb48;
  #L40fb42.  call `onComplete`(v14) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.onComplete:()V` @kind super;
  #L40fb48.  return @kind void;
  #L40fb4a.  if v13 == 0 then goto L40fb50;
  #L40fb4e.  goto L40fb5e;
  #L40fb50.  call `onNext`(v0, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40fb56.  v10:= 1L;
  #L40fb5a.  v8:= v8 + v10 @kind long;
  #L40fb5c.  goto L40faf8;
  #L40fb5e.  if v10 != 0 then goto L40fba2;
  #L40fb62.  call temp:= `isCancelled`(v14) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L40fb68.  v4:= temp;
  #L40fb6a.  if v4 == 0 then goto L40fb76;
  #L40fb6e.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L40fb74.  return @kind void;
  #L40fb76.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableCreate$c.e` @type ^`boolean` @kind boolean;
  #L40fb7a.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L40fb80.  v5:= temp;
  #L40fb82.  if v4 == 0 then goto L40fba2;
  #L40fb86.  if v5 == 0 then goto L40fba2;
  #L40fb8a.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableCreate$c.d` @type ^`java.lang.Throwable` @kind object;
  #L40fb8e.  if v0 == 0 then goto L40fb9a;
  #L40fb92.  call `onError`(v14, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.onError:(Ljava/lang/Throwable;)V` @kind super;
  #L40fb98.  goto L40fba0;
  #L40fb9a.  call `onComplete`(v14) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.onComplete:()V` @kind super;
  #L40fba0.  return @kind void;
  #L40fba2.  v4:= lcmp(v8, v6);
  #L40fba6.  if v4 == 0 then goto L40fbb0;
  #L40fbaa.  call temp:= `produced`(v14, v8) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L40fbb0.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableCreate$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40fbb4.  v3:= -v3 @kind int;
  #L40fbb6.  call temp:= `addAndGet`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L40fbbc.  v3:= temp;
  #L40fbbe.  if v3 != 0 then goto L40faea;
  #L40fbc2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCreate$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40fbd4.  v0:= 1I;
  #L40fbd6.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$c.e` @type ^`boolean` := v0 @kind boolean;
  #L40fbda.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$c;.c:()V` @kind virtual;
  #L40fbe0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableCreate$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40fbf4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$c.e` @type ^`boolean` @kind boolean;
  #L40fbf8.  if v0 != 0 then goto L40fc2e;
  #L40fbfc.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L40fc02.  v0:= temp;
  #L40fc04.  if v0 == 0 then goto L40fc0a;
  #L40fc08.  goto L40fc2e;
  #L40fc0a.  if v2 != 0 then goto L40fc1c;
  #L40fc0e.  v2:= new `java.lang.NullPointerException`;
  #L40fc12.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L40fc16.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40fc1c.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$c.d` @type ^`java.lang.Throwable` := v2 @kind object;
  #L40fc20.  v2:= 1I;
  #L40fc22.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$c.e` @type ^`boolean` := v2 @kind boolean;
  #L40fc26.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$c;.c:()V` @kind virtual;
  #L40fc2c.  return @kind void;
  #L40fc2e.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40fc34.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCreate$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40fc48.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$c.e` @type ^`boolean` @kind boolean;
  #L40fc4c.  if v0 != 0 then goto L40fc88;
  #L40fc50.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L40fc56.  v0:= temp;
  #L40fc58.  if v0 == 0 then goto L40fc5e;
  #L40fc5c.  goto L40fc88;
  #L40fc5e.  if v2 != 0 then goto L40fc78;
  #L40fc62.  v2:= new `java.lang.NullPointerException`;
  #L40fc66.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L40fc6a.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40fc70.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40fc76.  return @kind void;
  #L40fc78.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$c.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L40fc7c.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L40fc82.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$c;.c:()V` @kind virtual;
  #L40fc88.  return @kind void;
}
