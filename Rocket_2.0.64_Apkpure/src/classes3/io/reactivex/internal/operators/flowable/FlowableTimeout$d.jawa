record `io.reactivex.internal.operators.flowable.FlowableTimeout$d` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.internal.operators.flowable.FlowableTimeout$a` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableTimeout$d.a` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableTimeout$d.b` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableTimeout$d.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableTimeout$d.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTimeout$d.e` @AccessFlag VOLATILE;
  `long` `io.reactivex.internal.operators.flowable.FlowableTimeout$d.f` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableTimeout$d.g` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTimeout$d` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$d;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L424d8c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L424d92.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L424d96.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L424d9c.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$d.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L424da0.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$d.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L424da4.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$d.b` @type ^`org.reactivestreams.Publisher` := v3 @kind object;
  #L424da8.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$d.c` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L424dac.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableTimeout$d` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$d;.b:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L424f6c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeout$d.f` @type ^`long` @kind wide;
  #L424f70.  v2:= lcmp(v4, v0);
  #L424f74.  if v2 != 0 then goto L424f92;
  #L424f78.  call `cancel`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$d;.cancel:()V` @kind virtual;
  #L424f7e.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeout$d.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L424f82.  v5:= new `java.util.concurrent.TimeoutException`;
  #L424f86.  call `<init>`(v5) @signature `Ljava/util/concurrent/TimeoutException;.<init>:()V` @kind direct;
  #L424f8c.  call `onError`(v4, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L424f92.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTimeout$d` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$d;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L424dc0.  v0:= 1I;
  #L424dc2.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$d.e` @type ^`boolean` := v0 @kind boolean;
  #L424dc6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$d.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L424dca.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L424dd0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$d.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L424dd4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L424dda.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTimeout$d` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$d;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L424dec.  call `cancel`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$d;.cancel:()V` @kind virtual;
  #L424df2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$d.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L424df6.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L424dfc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTimeout$d` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$d;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L424e10.  call `cancel`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$d;.cancel:()V` @kind virtual;
  #L424e16.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$d.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L424e1a.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L424e20.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTimeout$d` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$d;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L424e34.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$d.f` @type ^`long` @kind wide;
  #L424e38.  v2:= 1L;
  #L424e3c.  v0:= v0 + v2 @kind long;
  #L424e3e.  v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$d.f` @type ^`long` := v0 @kind wide;
  #L424e42.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$d.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L424e46.  call `onNext`(v2, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L424e4c.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$d.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L424e50.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L424e56.  v2:= temp @kind object;
  #L424e58.  v2:= (`io.reactivex.disposables.Disposable`) v2 @kind object;
  #L424e5c.  if v2 == 0 then goto L424e66;
  #L424e60.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L424e66.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$d.c` @type ^`io.reactivex.functions.Function` @kind object;
  #L424e6a.  call temp:= `apply`(v3, v5) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L424e70.  v5:= temp @kind object;
  #L424e72.  v3:= "The publisher returned is null" @kind object;
  #L424e76.  call temp:= `requireNonNull`(v5, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L424e7c.  v5:= temp @kind object;
  #L424e7e.  v5:= (`org.reactivestreams.Publisher`) v5 @kind object;
  #L424e82.  v3:= new `io.reactivex.internal.operators.flowable.FlowableTimeout$b`;
  #L424e86.  call `<init>`(v3, v4, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$b;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableTimeout$a;J)V` @kind direct;
  #L424e8c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$d.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L424e90.  call temp:= `compareAndSet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L424e96.  v0:= temp;
  #L424e98.  if v0 == 0 then goto L424ea2;
  #L424e9c.  call `subscribe`(v5, v3) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L424ea2.  return @kind void;
  #L424ea4.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L424ea6.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L424eac.  call `cancel`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$d;.cancel:()V` @kind virtual;
  #L424eb2.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$d.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L424eb6.  call `onError`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L424ebc.  return @kind void;
  catch `java.lang.Throwable` @[L424e66..L424e82] goto L424ea4;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTimeout$d` v4 @kind this, `org.reactivestreams.Subscription` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$d;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L424edc.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$d.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L424ee0.  call temp:= `validate`(v0, v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L424ee6.  v0:= temp;
  #L424ee8.  if v0 != 0 then goto L424eee;
  #L424eec.  return @kind void;
  #L424eee.  v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$d.d` @type ^`org.reactivestreams.Subscription` := v5 @kind object;
  #L424ef2.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$d.e` @type ^`boolean` @kind boolean;
  #L424ef6.  if v5 == 0 then goto L424efc;
  #L424efa.  return @kind void;
  #L424efc.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$d.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L424f00.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$d.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L424f04.  if v0 == 0 then goto L424f36;
  #L424f08.  v1:= new `io.reactivex.internal.operators.flowable.FlowableTimeout$b`;
  #L424f0c.  v2:= 0L;
  #L424f10.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$b;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableTimeout$a;J)V` @kind direct;
  #L424f16.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$d.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L424f1a.  v3:= 0I;
  #L424f1c.  call temp:= `compareAndSet`(v2, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L424f22.  v2:= temp;
  #L424f24.  if v2 == 0 then goto L424f3c;
  #L424f28.  call `onSubscribe`(v5, v4) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L424f2e.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L424f34.  goto L424f3c;
  #L424f36.  call `onSubscribe`(v5, v4) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L424f3c.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTimeout$d` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$d;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L424f50.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$d.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L424f54.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L424f5a.  return @kind void;
}
