record `io.reactivex.internal.operators.flowable.FlowableSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableSingle$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableSingle$a.b` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSingle$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSingle$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingle$a;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L421c24.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L421c2a.  v0.`io.reactivex.internal.operators.flowable.FlowableSingle$a.a` @type ^`java.lang.Object` := v2 @kind object;
  #L421c2e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingle$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L421c40.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @kind super;
  #L421c46.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSingle$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L421c4a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L421c50.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L421c64.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingle$a.c` @type ^`boolean` @kind boolean;
  #L421c68.  if v0 == 0 then goto L421c6e;
  #L421c6c.  return @kind void;
  #L421c6e.  v0:= 1I;
  #L421c70.  v2.`io.reactivex.internal.operators.flowable.FlowableSingle$a.c` @type ^`boolean` := v0 @kind boolean;
  #L421c74.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L421c78.  v1:= 0I;
  #L421c7a.  v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v1 @kind object;
  #L421c7e.  if v0 != 0 then goto L421c86;
  #L421c82.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingle$a.a` @type ^`java.lang.Object` @kind object;
  #L421c86.  if v0 != 0 then goto L421c96;
  #L421c8a.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L421c8e.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L421c94.  goto L421c9c;
  #L421c96.  call `complete`(v2, v0) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L421c9c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L421cb0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSingle$a.c` @type ^`boolean` @kind boolean;
  #L421cb4.  if v0 == 0 then goto L421cc0;
  #L421cb8.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L421cbe.  return @kind void;
  #L421cc0.  v0:= 1I;
  #L421cc2.  v1.`io.reactivex.internal.operators.flowable.FlowableSingle$a.c` @type ^`boolean` := v0 @kind boolean;
  #L421cc6.  v0:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L421cca.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L421cd0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L421ce4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingle$a.c` @type ^`boolean` @kind boolean;
  #L421ce8.  if v0 == 0 then goto L421cee;
  #L421cec.  return @kind void;
  #L421cee.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L421cf2.  if v0 == 0 then goto L421d20;
  #L421cf6.  v3:= 1I;
  #L421cf8.  v2.`io.reactivex.internal.operators.flowable.FlowableSingle$a.c` @type ^`boolean` := v3 @kind boolean;
  #L421cfc.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableSingle$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L421d00.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L421d06.  v3:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L421d0a.  v0:= new `java.lang.IllegalArgumentException`;
  #L421d0e.  v1:= "Sequence contains more than one element!" @kind object;
  #L421d12.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L421d18.  call `onError`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L421d1e.  return @kind void;
  #L421d20.  v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v3 @kind object;
  #L421d24.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L421d38.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingle$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L421d3c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L421d42.  v0:= temp;
  #L421d44.  if v0 == 0 then goto L421d66;
  #L421d48.  v2.`io.reactivex.internal.operators.flowable.FlowableSingle$a.b` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L421d4c.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L421d50.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L421d56.  v0:= 9223372036854775807L;
  #L421d60.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L421d66.  return @kind void;
}
