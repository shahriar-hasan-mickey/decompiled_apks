record `io.reactivex.internal.operators.flowable.FlowableRefCount$b` @kind class @AccessFlag FINAL extends `io.reactivex.functions.Consumer` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableRefCount$b.a` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableRefCount$b.b` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.internal.operators.flowable.FlowableRefCount` `io.reactivex.internal.operators.flowable.FlowableRefCount$b.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRefCount$b` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableRefCount` v1 @kind object, `org.reactivestreams.Subscriber` v2 @kind object, `java.util.concurrent.atomic.AtomicBoolean` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$b;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableRefCount;Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicBoolean;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41e0b0.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$b.c` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` := v1 @kind object;
  #L41e0b4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41e0ba.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$b.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L41e0be.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$b.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L41e0c2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableRefCount$b` v3 @kind this, `io.reactivex.disposables.Disposable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$b;.a:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L41e0d4.  v0:= 0I;
  #L41e0d6.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableRefCount$b.c` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` @kind object;
  #L41e0da.  v1:= v1.`io.reactivex.internal.operators.flowable.FlowableRefCount.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L41e0de.  call temp:= `add`(v1, v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L41e0e4.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableRefCount$b.c` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` @kind object;
  #L41e0e8.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableRefCount$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41e0ec.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableRefCount.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L41e0f0.  call `f`(v4, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.f:(Lorg/reactivestreams/Subscriber;Lio/reactivex/disposables/CompositeDisposable;)V` @kind virtual;
  #L41e0f6.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableRefCount$b.c` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` @kind object;
  #L41e0fa.  v4:= v4.`io.reactivex.internal.operators.flowable.FlowableRefCount.e` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L41e0fe.  call `unlock`(v4) @signature `Ljava/util/concurrent/locks/ReentrantLock;.unlock:()V` @kind virtual;
  #L41e104.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableRefCount$b.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L41e108.  call `set`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L41e10e.  return @kind void;
  #L41e110.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41e112.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableRefCount$b.c` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` @kind object;
  #L41e116.  v1:= v1.`io.reactivex.internal.operators.flowable.FlowableRefCount.e` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L41e11a.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantLock;.unlock:()V` @kind virtual;
  #L41e120.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableRefCount$b.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L41e124.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L41e12a.  throw v4;
  catch `java.lang.Throwable` @[L41e0d6..L41e0f6] goto L41e110;
}
procedure `void` `accept`(`io.reactivex.internal.operators.flowable.FlowableRefCount$b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$b;.accept:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L41e148.  v1:= (`io.reactivex.disposables.Disposable`) v1 @kind object;
  #L41e14c.  call `a`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$b;.a:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L41e152.  return @kind void;
}
