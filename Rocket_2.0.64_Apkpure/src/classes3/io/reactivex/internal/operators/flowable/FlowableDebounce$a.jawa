record `io.reactivex.internal.operators.flowable.FlowableDebounce$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableDebounce$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableDebounce$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableDebounce$a.c` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableDebounce$a.d` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableDebounce$a.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableDebounce$a.f` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableDebounce$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDebounce$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L41055c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L410562.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L410566.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L41056c.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L410570.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L410574.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.b` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L410578.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableDebounce$a` v3 @kind this, `long` v4 , `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$a;.a:(JLjava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4105b4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.e` @type ^`long` @kind wide;
  #L4105b8.  v2:= lcmp(v4, v0);
  #L4105bc.  if v2 != 0 then goto L410608;
  #L4105c0.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4105c6.  v4:= temp @kind wide;
  #L4105c8.  v0:= 0L;
  #L4105cc.  v2:= lcmp(v4, v0);
  #L4105d0.  if v2 == 0 then goto L4105ea;
  #L4105d4.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4105d8.  call `onNext`(v4, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4105de.  v4:= 1L;
  #L4105e2.  call temp:= `produced`(v3, v4) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4105e8.  goto L410608;
  #L4105ea.  call `cancel`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$a;.cancel:()V` @kind virtual;
  #L4105f0.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4105f4.  v5:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L4105f8.  v6:= "Could not deliver value due to lack of requests" @kind object;
  #L4105fc.  call `<init>`(v5, v6) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L410602.  call `onError`(v4, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L410608.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableDebounce$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41058c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L410590.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L410596.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41059a.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4105a0.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDebounce$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41061c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.f` @type ^`boolean` @kind boolean;
  #L410620.  if v0 == 0 then goto L410626;
  #L410624.  return @kind void;
  #L410626.  v0:= 1I;
  #L410628.  v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.f` @type ^`boolean` := v0 @kind boolean;
  #L41062c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L410630.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L410636.  v0:= temp @kind object;
  #L410638.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L41063c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L410642.  v1:= temp;
  #L410644.  if v1 != 0 then goto L410666;
  #L410648.  v0:= (`io.reactivex.internal.operators.flowable.FlowableDebounce$a$a`) v0 @kind object;
  #L41064c.  call `a`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$a$a;.a:()V` @kind virtual;
  #L410652.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L410656.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L41065c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L410660.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L410666.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDebounce$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L410678.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41067c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L410682.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L410686.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41068c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDebounce$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4106a0.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.f` @type ^`boolean` @kind boolean;
  #L4106a4.  if v0 == 0 then goto L4106aa;
  #L4106a8.  return @kind void;
  #L4106aa.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.e` @type ^`long` @kind wide;
  #L4106ae.  v2:= 1L;
  #L4106b2.  v0:= v0 + v2 @kind long;
  #L4106b4.  v5.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.e` @type ^`long` := v0 @kind wide;
  #L4106b8.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4106bc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4106c2.  v2:= temp @kind object;
  #L4106c4.  v2:= (`io.reactivex.disposables.Disposable`) v2 @kind object;
  #L4106c8.  if v2 == 0 then goto L4106d2;
  #L4106cc.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4106d2.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L4106d6.  call temp:= `apply`(v3, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4106dc.  v3:= temp @kind object;
  #L4106de.  v4:= "The publisher supplied is null" @kind object;
  #L4106e2.  call temp:= `requireNonNull`(v3, v4) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4106e8.  v3:= temp @kind object;
  #L4106ea.  v3:= (`org.reactivestreams.Publisher`) v3 @kind object;
  #L4106ee.  v4:= new `io.reactivex.internal.operators.flowable.FlowableDebounce$a$a`;
  #L4106f2.  call `<init>`(v4, v5, v0, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$a$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableDebounce$a;JLjava/lang/Object;)V` @kind direct;
  #L4106f8.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4106fc.  call temp:= `compareAndSet`(v6, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L410702.  v6:= temp;
  #L410704.  if v6 == 0 then goto L41070e;
  #L410708.  call `subscribe`(v3, v4) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L41070e.  return @kind void;
  #L410710.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L410712.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L410718.  call `cancel`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$a;.cancel:()V` @kind virtual;
  #L41071e.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L410722.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L410728.  return @kind void;
  catch `java.lang.Throwable` @[L4106d2..L4106ee] goto L410710;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableDebounce$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L410748.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41074c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L410752.  v0:= temp;
  #L410754.  if v0 == 0 then goto L410776;
  #L410758.  v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L41075c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L410760.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L410766.  v0:= 9223372036854775807L;
  #L410770.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L410776.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableDebounce$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L410788.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L41078e.  v0:= temp;
  #L410790.  if v0 == 0 then goto L41079a;
  #L410794.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L41079a.  return @kind void;
}
