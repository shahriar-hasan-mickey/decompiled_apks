record `io.reactivex.internal.operators.flowable.FlowableConcatArray$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableConcatArray$a.g` @AccessFlag FINAL;
  `org.reactivestreams.Publisher`[] `io.reactivex.internal.operators.flowable.FlowableConcatArray$a.h` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableConcatArray$a.i` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableConcatArray$a.j` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableConcatArray$a.k` @AccessFlag ;
  `java.util.List` `io.reactivex.internal.operators.flowable.FlowableConcatArray$a.l` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableConcatArray$a.m` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableConcatArray$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableConcatArray$a` v0 @kind this, `org.reactivestreams.Publisher`[] v1 @kind object, `boolean` v2 , `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray$a;.<init>:([Lorg/reactivestreams/Publisher;ZLorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40e13c.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.<init>:()V` @kind direct;
  #L40e142.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.g` @type ^`org.reactivestreams.Subscriber` := v3 @kind object;
  #L40e146.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.h` @type ^`org.reactivestreams.Publisher`[] := v1 @kind object;
  #L40e14a.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.i` @type ^`boolean` := v2 @kind boolean;
  #L40e14e.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L40e152.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L40e158.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L40e15c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableConcatArray$a` v9 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L40e170.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40e174.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L40e17a.  v0:= temp;
  #L40e17c.  if v0 != 0 then goto L40e26a;
  #L40e180.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.h` @type ^`org.reactivestreams.Publisher`[] @kind object;
  #L40e184.  v1:= length @variable v0;
  #L40e186.  v2:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.k` @type ^`int`;
  #L40e18a.  v3:= 1I;
  #L40e18c.  if v2 != v1 then goto L40e1e0;
  #L40e190.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.l` @type ^`java.util.List` @kind object;
  #L40e194.  if v0 == 0 then goto L40e1d4;
  #L40e198.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L40e19e.  v1:= temp;
  #L40e1a0.  if v1 != v3 then goto L40e1be;
  #L40e1a4.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.g` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40e1a8.  v2:= 0I;
  #L40e1aa.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L40e1b0.  v0:= temp @kind object;
  #L40e1b2.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L40e1b6.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40e1bc.  goto L40e1de;
  #L40e1be.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.g` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40e1c2.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L40e1c6.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L40e1cc.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40e1d2.  goto L40e1de;
  #L40e1d4.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.g` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40e1d8.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40e1de.  return @kind void;
  #L40e1e0.  v4:= v0[v2] @kind object;
  #L40e1e4.  if v4 != 0 then goto L40e232;
  #L40e1e8.  v4:= new `java.lang.NullPointerException`;
  #L40e1ec.  v5:= "A Publisher entry is null" @kind object;
  #L40e1f0.  call `<init>`(v4, v5) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40e1f6.  v5:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.i` @type ^`boolean` @kind boolean;
  #L40e1fa.  if v5 == 0 then goto L40e226;
  #L40e1fe.  v5:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.l` @type ^`java.util.List` @kind object;
  #L40e202.  if v5 != 0 then goto L40e21a;
  #L40e206.  v5:= new `java.util.ArrayList`;
  #L40e20a.  v6:= v1 - v2 @kind int;
  #L40e20e.  v6:= v6 + v3 @kind int;
  #L40e210.  call `<init>`(v5, v6) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L40e216.  v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.l` @type ^`java.util.List` := v5 @kind object;
  #L40e21a.  call temp:= `add`(v5, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L40e220.  v2:= v2 + 1;
  #L40e224.  goto L40e18a;
  #L40e226.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.g` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40e22a.  call `onError`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40e230.  return @kind void;
  #L40e232.  v5:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.m` @type ^`long` @kind wide;
  #L40e236.  v7:= 0L;
  #L40e23a.  v3:= lcmp(v5, v7);
  #L40e23e.  if v3 == 0 then goto L40e24c;
  #L40e242.  v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.m` @type ^`long` := v7 @kind wide;
  #L40e246.  call `produced`(v9, v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L40e24c.  call `subscribe`(v4, v9) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40e252.  v2:= v2 + 1;
  #L40e256.  v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.k` @type ^`int` := v2;
  #L40e25a.  v3:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40e25e.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L40e264.  v3:= temp;
  #L40e266.  if v3 != 0 then goto L40e18a;
  #L40e26a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableConcatArray$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40e27c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.i` @type ^`boolean` @kind boolean;
  #L40e280.  if v0 == 0 then goto L40e2b8;
  #L40e284.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.l` @type ^`java.util.List` @kind object;
  #L40e288.  if v0 != 0 then goto L40e2aa;
  #L40e28c.  v0:= new `java.util.ArrayList`;
  #L40e290.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.h` @type ^`org.reactivestreams.Publisher`[] @kind object;
  #L40e294.  v1:= length @variable v1;
  #L40e296.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.k` @type ^`int`;
  #L40e29a.  v1:= v1 - v2 @kind int;
  #L40e29c.  v1:= v1 + 1;
  #L40e2a0.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L40e2a6.  v3.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.l` @type ^`java.util.List` := v0 @kind object;
  #L40e2aa.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L40e2b0.  call `onComplete`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray$a;.onComplete:()V` @kind virtual;
  #L40e2b6.  goto L40e2c2;
  #L40e2b8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.g` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40e2bc.  call `onError`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40e2c2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableConcatArray$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40e2d4.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.m` @type ^`long` @kind wide;
  #L40e2d8.  v2:= 1L;
  #L40e2dc.  v0:= v0 + v2 @kind long;
  #L40e2de.  v4.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.m` @type ^`long` := v0 @kind wide;
  #L40e2e2.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.g` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40e2e6.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40e2ec.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableConcatArray$a` v0 @kind this, `org.reactivestreams.Subscription` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;

  #L40e300.  call `setSubscription`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L40e306.  return @kind void;
}
