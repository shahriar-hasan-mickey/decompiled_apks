record `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$c` @kind class @AccessFlag FINAL extends `io.reactivex.subscribers.DisposableSubscriber` @kind class {
  `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$c.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$c.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$c` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$c;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40b7d8.  call `<init>`(v0) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.<init>:()V` @kind direct;
  #L40b7de.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$c.b` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` := v1 @kind object;
  #L40b7e2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40b7f4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$c.c` @type ^`boolean` @kind boolean;
  #L40b7f8.  if v0 == 0 then goto L40b7fe;
  #L40b7fc.  return @kind void;
  #L40b7fe.  v0:= 1I;
  #L40b800.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$c.c` @type ^`boolean` := v0 @kind boolean;
  #L40b804.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$c.b` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` @kind object;
  #L40b808.  call `e`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.e:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L40b80e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40b820.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$c.c` @type ^`boolean` @kind boolean;
  #L40b824.  if v0 == 0 then goto L40b830;
  #L40b828.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40b82e.  return @kind void;
  #L40b830.  v0:= 1I;
  #L40b832.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$c.c` @type ^`boolean` := v0 @kind boolean;
  #L40b836.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$c.b` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` @kind object;
  #L40b83a.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40b840.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40b854.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$c.c` @type ^`boolean` @kind boolean;
  #L40b858.  if v0 == 0 then goto L40b85e;
  #L40b85c.  return @kind void;
  #L40b85e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$c.b` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` @kind object;
  #L40b862.  call `d`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.d:(Ljava/lang/Object;)V` @kind virtual;
  #L40b868.  return @kind void;
}
