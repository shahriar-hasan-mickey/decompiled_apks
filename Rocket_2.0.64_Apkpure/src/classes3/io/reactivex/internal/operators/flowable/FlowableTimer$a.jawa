record `io.reactivex.internal.operators.flowable.FlowableTimer$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableTimer$a.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTimer$a.b` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTimer$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTimer$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimer$a;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L425668.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42566e.  v0.`io.reactivex.internal.operators.flowable.FlowableTimer$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L425672.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableTimer$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimer$a;.a:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L425738.  call temp:= `trySet`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.trySet:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42573e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTimer$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimer$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L425684.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42568a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTimer$a` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimer$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L42569c.  call temp:= `validate`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4256a2.  v1:= temp;
  #L4256a4.  if v1 == 0 then goto L4256ae;
  #L4256a8.  v1:= 1I;
  #L4256aa.  v0.`io.reactivex.internal.operators.flowable.FlowableTimer$a.b` @type ^`boolean` := v1 @kind boolean;
  #L4256ae.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableTimer$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimer$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4256c0.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4256c6.  v0:= temp @kind object;
  #L4256c8.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4256cc.  if v0 == v1 then goto L425726;
  #L4256d0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimer$a.b` @type ^`boolean` @kind boolean;
  #L4256d4.  if v0 == 0 then goto L425704;
  #L4256d8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4256dc.  v1:= 0L;
  #L4256e0.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4256e6.  v1:= temp @kind object;
  #L4256e8.  call `onNext`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4256ee.  v0:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L4256f2.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4256f8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4256fc.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L425702.  goto L425726;
  #L425704.  v0:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L425708.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L42570e.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L425712.  v1:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L425716.  v2:= "Can't deliver value due to lack of requests" @kind object;
  #L42571a.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L425720.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L425726.  return @kind void;
}
