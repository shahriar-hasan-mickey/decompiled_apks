record `io.reactivex.internal.operators.flowable.FlowableCombineLatest$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$b.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$b.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$b.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$b.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$b.e` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCombineLatest$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$b;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40de3c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L40de42.  v0.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` := v1 @kind object;
  #L40de46.  v0.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b.b` @type ^`int` := v2;
  #L40de4a.  v0.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b.c` @type ^`int` := v3;
  #L40de4e.  v1:= v3 ^> 2;
  #L40de52.  v3:= v3 - v1 @kind int;
  #L40de54.  v0.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b.d` @type ^`int` := v3;
  #L40de58.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$b;.a:()V` @AccessFlag PUBLIC {
    temp;

  #L40de6c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40de72.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$b;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40df10.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b.e` @type ^`int`;
  #L40df14.  v0:= v0 + 1;
  #L40df18.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b.d` @type ^`int`;
  #L40df1c.  if v0 != v1 then goto L40df3c;
  #L40df20.  v1:= 0I;
  #L40df22.  v4.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b.e` @type ^`int` := v1;
  #L40df26.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L40df2c.  v1:= temp @kind object;
  #L40df2e.  v1:= (`org.reactivestreams.Subscription`) v1 @kind object;
  #L40df32.  v2:= (`long`) v0 @kind i2l;
  #L40df34.  call `request`(v1, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40df3a.  goto L40df40;
  #L40df3c.  v4.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b.e` @type ^`int` := v0;
  #L40df40.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40de84.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` @kind object;
  #L40de88.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b.b` @type ^`int`;
  #L40de8c.  call `i`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.i:(I)V` @kind virtual;
  #L40de92.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40dea4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` @kind object;
  #L40dea8.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b.b` @type ^`int`;
  #L40deac.  call `j`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.j:(ILjava/lang/Throwable;)V` @kind virtual;
  #L40deb2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40dec4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` @kind object;
  #L40dec8.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b.b` @type ^`int`;
  #L40decc.  call `k`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.k:(ILjava/lang/Object;)V` @kind virtual;
  #L40ded2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40dee4.  call temp:= `setOnce`(v2, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40deea.  v0:= temp;
  #L40deec.  if v0 == 0 then goto L40defc;
  #L40def0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b.c` @type ^`int`;
  #L40def4.  v0:= (`long`) v0 @kind i2l;
  #L40def6.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40defc.  return @kind void;
}
