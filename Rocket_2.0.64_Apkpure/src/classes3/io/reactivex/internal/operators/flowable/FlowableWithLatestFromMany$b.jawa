record `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c`[] `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.f` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.g` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L428e1c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L428e22.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L428e26.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.b` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L428e2a.  v2:= new `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c`[v4];
  #L428e2e.  v3:= 0I;
  #L428e30.  if v3 >= v4 then goto L428e48;
  #L428e34.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c`;
  #L428e38.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$c;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;I)V` @kind direct;
  #L428e3e.  v2[v3]:= v0 @kind object;
  #L428e42.  v3:= v3 + 1;
  #L428e46.  goto L428e30;
  #L428e48.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.c` @type ^`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c`[] := v2 @kind object;
  #L428e4c.  v2:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L428e50.  call `<init>`(v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L428e56.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v2 @kind object;
  #L428e5a.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L428e5e.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L428e64.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L428e68.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L428e6c.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L428e72.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L428e76.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L428e7a.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L428e80.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.g` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L428e84.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.a:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L428ed0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.c` @type ^`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c`[] @kind object;
  #L428ed4.  v1:= 0I;
  #L428ed6.  v2:= length @variable v0;
  #L428ed8.  if v1 >= v2 then goto L428ef0;
  #L428edc.  if v1 == v4 then goto L428eea;
  #L428ee0.  v2:= v0[v1] @kind object;
  #L428ee4.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$c;.dispose:()V` @kind virtual;
  #L428eea.  v1:= v1 + 1;
  #L428eee.  goto L428ed6;
  #L428ef0.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` v0 @kind this, `int` v1 , `boolean` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.b:(IZ)V` @AccessFlag  {
    temp;

  #L428f04.  if v2 != 0 then goto L428f22;
  #L428f08.  v2:= 1I;
  #L428f0a.  v0.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` := v2 @kind boolean;
  #L428f0e.  call `a`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L428f14.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L428f18.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L428f1c.  call `onComplete`(v1, v0, v2) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L428f22.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` v1 @kind this, `int` v2 , `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.c:(ILjava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L428f34.  v0:= 1I;
  #L428f36.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` := v0 @kind boolean;
  #L428f3a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L428f3e.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L428f44.  call `a`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L428f4a.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L428f4e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L428f52.  call `onError`(v2, v3, v1, v0) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L428f58.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L428e98.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L428e9c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L428ea2.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.c` @type ^`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c`[] @kind object;
  #L428ea6.  v1:= length @variable v0;
  #L428ea8.  v2:= 0I;
  #L428eaa.  if v2 >= v1 then goto L428ebe;
  #L428eae.  v3:= v0[v2] @kind object;
  #L428eb2.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L428eb8.  v2:= v2 + 1;
  #L428ebc.  goto L428eaa;
  #L428ebe.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` v1 @kind this, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.d:(ILjava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;

  #L428f6c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L428f70.  call `set`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L428f76.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` v5 @kind this, `org.reactivestreams.Publisher`[] v6 @kind object, `int` v7 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.e:([Lorg/reactivestreams/Publisher;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4290f4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.c` @type ^`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c`[] @kind object;
  #L4290f8.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4290fc.  v2:= 0I;
  #L4290fe.  if v2 >= v7 then goto L429138;
  #L429102.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L429108.  v3:= temp @kind object;
  #L42910a.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L42910e.  call temp:= `isCancelled`(v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.isCancelled:(Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L429114.  v3:= temp;
  #L429116.  if v3 != 0 then goto L429138;
  #L42911a.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` @kind boolean;
  #L42911e.  if v3 == 0 then goto L429124;
  #L429122.  goto L429138;
  #L429124.  v3:= v6[v2] @kind object;
  #L429128.  v4:= v0[v2] @kind object;
  #L42912c.  call `subscribe`(v3, v4) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L429132.  v2:= v2 + 1;
  #L429136.  goto L4290fe;
  #L429138.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L428f88.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` @kind boolean;
  #L428f8c.  if v0 != 0 then goto L428fac;
  #L428f90.  v0:= 1I;
  #L428f92.  v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` := v0 @kind boolean;
  #L428f96.  v0:= -1I;
  #L428f98.  call `a`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L428f9e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L428fa2.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L428fa6.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L428fac.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L428fc0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` @kind boolean;
  #L428fc4.  if v0 == 0 then goto L428fd0;
  #L428fc8.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L428fce.  return @kind void;
  #L428fd0.  v0:= 1I;
  #L428fd2.  v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` := v0 @kind boolean;
  #L428fd6.  v0:= -1I;
  #L428fd8.  call `a`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L428fde.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L428fe2.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L428fe6.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L428fec.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L429000.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` @kind boolean;
  #L429004.  if v0 == 0 then goto L42900a;
  #L429008.  return @kind void;
  #L42900a.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L42900e.  call temp:= `length`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L429014.  v1:= temp;
  #L429016.  v2:= v1 + 1;
  #L42901a.  v2:= new `java.lang.Object`[v2];
  #L42901e.  v3:= 0I;
  #L429020.  v2[v3]:= v5 @kind object;
  #L429024.  if v3 >= v1 then goto L42905a;
  #L429028.  call temp:= `get`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L42902e.  v5:= temp @kind object;
  #L429030.  if v5 != 0 then goto L429050;
  #L429034.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L429038.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42903e.  v5:= temp @kind object;
  #L429040.  v5:= (`org.reactivestreams.Subscription`) v5 @kind object;
  #L429044.  v0:= 1L;
  #L429048.  call `request`(v5, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L42904e.  return @kind void;
  #L429050.  v3:= v3 + 1;
  #L429054.  v2[v3]:= v5 @kind object;
  #L429058.  goto L429024;
  #L42905a.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L42905e.  call temp:= `apply`(v5, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L429064.  v5:= temp @kind object;
  #L429066.  v0:= "combiner returned a null value" @kind object;
  #L42906a.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L429070.  v5:= temp @kind object;
  #L429072.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L429076.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42907a.  call `onNext`(v0, v5, v4, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onNext:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L429080.  return @kind void;
  #L429082.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L429084.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42908a.  call `cancel`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.cancel:()V` @kind virtual;
  #L429090.  call `onError`(v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L429096.  return @kind void;
  catch `java.lang.Throwable` @[L42905a..L429072] goto L429082;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4290b4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4290b8.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4290bc.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4290c2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4290d4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4290d8.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4290dc.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L4290e2.  return @kind void;
}
