record `io.reactivex.internal.operators.flowable.FlowableBuffer$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableBuffer$a.a` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBuffer$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$a.c` @AccessFlag FINAL;
  `java.util.Collection` `io.reactivex.internal.operators.flowable.FlowableBuffer$a.d` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableBuffer$a.e` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBuffer$a.f` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$a.g` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBuffer$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `java.util.concurrent.Callable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$a;.<init>:(Lorg/reactivestreams/Subscriber;ILjava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40ac20.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40ac26.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L40ac2a.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.c` @type ^`int` := v2;
  #L40ac2e.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.b` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L40ac32.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBuffer$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40ac44.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40ac48.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40ac4e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBuffer$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40ac60.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.f` @type ^`boolean` @kind boolean;
  #L40ac64.  if v0 == 0 then goto L40ac6a;
  #L40ac68.  return @kind void;
  #L40ac6a.  v0:= 1I;
  #L40ac6c.  v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.f` @type ^`boolean` := v0 @kind boolean;
  #L40ac70.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.d` @type ^`java.util.Collection` @kind object;
  #L40ac74.  if v0 == 0 then goto L40ac8e;
  #L40ac78.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L40ac7e.  v1:= temp;
  #L40ac80.  if v1 != 0 then goto L40ac8e;
  #L40ac84.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40ac88.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40ac8e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40ac92.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40ac98.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBuffer$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40acac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.f` @type ^`boolean` @kind boolean;
  #L40acb0.  if v0 == 0 then goto L40acbc;
  #L40acb4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40acba.  return @kind void;
  #L40acbc.  v0:= 1I;
  #L40acbe.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.f` @type ^`boolean` := v0 @kind boolean;
  #L40acc2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40acc6.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40accc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBuffer$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40ace0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.f` @type ^`boolean` @kind boolean;
  #L40ace4.  if v0 == 0 then goto L40acea;
  #L40ace8.  return @kind void;
  #L40acea.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.d` @type ^`java.util.Collection` @kind object;
  #L40acee.  if v0 != 0 then goto L40ad2a;
  #L40acf2.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L40acf6.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L40acfc.  v0:= temp @kind object;
  #L40acfe.  v1:= "The bufferSupplier returned a null buffer" @kind object;
  #L40ad02.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40ad08.  v0:= temp @kind object;
  #L40ad0a.  v0:= (`java.util.Collection`) v0 @kind object;
  #L40ad0e.  v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.d` @type ^`java.util.Collection` := v0 @kind object;
  #L40ad12.  goto L40ad2a;
  #L40ad14.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40ad16.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40ad1c.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$a;.cancel:()V` @kind virtual;
  #L40ad22.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40ad28.  return @kind void;
  #L40ad2a.  call temp:= `add`(v0, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L40ad30.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.g` @type ^`int`;
  #L40ad34.  v3:= v3 + 1;
  #L40ad38.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.c` @type ^`int`;
  #L40ad3c.  if v3 != v1 then goto L40ad58;
  #L40ad40.  v3:= 0I;
  #L40ad42.  v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.g` @type ^`int` := v3;
  #L40ad46.  v3:= 0I;
  #L40ad48.  v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.d` @type ^`java.util.Collection` := v3 @kind object;
  #L40ad4c.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40ad50.  call `onNext`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40ad56.  goto L40ad5c;
  #L40ad58.  v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.g` @type ^`int` := v3;
  #L40ad5c.  return @kind void;
  catch `java.lang.Throwable` @[L40acf2..L40ad0e] goto L40ad14;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBuffer$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40ad7c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40ad80.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40ad86.  v0:= temp;
  #L40ad88.  if v0 == 0 then goto L40ad9a;
  #L40ad8c.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.e` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L40ad90.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40ad94.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40ad9a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBuffer$a` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40adac.  call temp:= `validate`(v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L40adb2.  v0:= temp;
  #L40adb4.  if v0 == 0 then goto L40add0;
  #L40adb8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40adbc.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.c` @type ^`int`;
  #L40adc0.  v1:= (`long`) v1 @kind i2l;
  #L40adc2.  call temp:= `multiplyCap`(v4, v1) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L40adc8.  v4:= temp @kind wide;
  #L40adca.  call `request`(v0, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40add0.  return @kind void;
}
