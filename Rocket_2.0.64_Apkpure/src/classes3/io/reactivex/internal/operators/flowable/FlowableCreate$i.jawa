record `io.reactivex.internal.operators.flowable.FlowableCreate$i` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableEmitter` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableCreate$b` `io.reactivex.internal.operators.flowable.FlowableCreate$i.a` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableCreate$i.b` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.flowable.FlowableCreate$i.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCreate$i.d` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCreate$i.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCreate$i` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableCreate$b` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableCreate$b;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L41010c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L410112.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$b` := v2 @kind object;
  #L410116.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L41011a.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L410120.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$i.b` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L410124.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L410128.  v0:= 16I;
  #L41012c.  call `<init>`(v2, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L410132.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$i.c` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v2 @kind object;
  #L410136.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableCreate$i` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L410148.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L41014e.  v0:= temp;
  #L410150.  if v0 != 0 then goto L41015a;
  #L410154.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.b:()V` @kind virtual;
  #L41015a.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableCreate$i` v8 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L41016c.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L410170.  v1:= v8.`io.reactivex.internal.operators.flowable.FlowableCreate$i.c` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L410174.  v2:= v8.`io.reactivex.internal.operators.flowable.FlowableCreate$i.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L410178.  v3:= 1I;
  #L41017a.  v4:= 1I;
  #L41017c.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L410182.  v5:= temp;
  #L410184.  if v5 == 0 then goto L410190;
  #L410188.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L41018e.  return @kind void;
  #L410190.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L410196.  v5:= temp @kind object;
  #L410198.  if v5 == 0 then goto L4101b2;
  #L41019c.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4101a2.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4101a8.  v1:= temp @kind object;
  #L4101aa.  call `onError`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4101b0.  return @kind void;
  #L4101b2.  v5:= v8.`io.reactivex.internal.operators.flowable.FlowableCreate$i.d` @type ^`boolean` @kind boolean;
  #L4101b6.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4101bc.  v6:= temp @kind object;
  #L4101be.  if v6 != 0 then goto L4101c6;
  #L4101c2.  v7:= 1I;
  #L4101c4.  goto L4101c8;
  #L4101c6.  v7:= 0I;
  #L4101c8.  if v5 == 0 then goto L4101d8;
  #L4101cc.  if v7 == 0 then goto L4101d8;
  #L4101d0.  call `onComplete`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.onComplete:()V` @kind virtual;
  #L4101d6.  return @kind void;
  #L4101d8.  if v7 == 0 then goto L4101ec;
  #L4101dc.  v4:= -v4 @kind int;
  #L4101de.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4101e4.  v4:= temp;
  #L4101e6.  if v4 != 0 then goto L41017c;
  #L4101ea.  return @kind void;
  #L4101ec.  call `onNext`(v0, v6) @signature `Lio/reactivex/Emitter;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4101f2.  goto L41017c;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.operators.flowable.FlowableCreate$i` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4100b8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L4100bc.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L4100c2.  v0:= temp;
  #L4100c4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCreate$i` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L410204.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L410208.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L41020e.  v0:= temp;
  #L410210.  if v0 != 0 then goto L41022a;
  #L410214.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$i.d` @type ^`boolean` @kind boolean;
  #L410218.  if v0 == 0 then goto L41021e;
  #L41021c.  goto L41022a;
  #L41021e.  v0:= 1I;
  #L410220.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$i.d` @type ^`boolean` := v0 @kind boolean;
  #L410224.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.a:()V` @kind virtual;
  #L41022a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableCreate$i` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41023c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L410240.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L410246.  v0:= temp;
  #L410248.  if v0 != 0 then goto L41028e;
  #L41024c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$i.d` @type ^`boolean` @kind boolean;
  #L410250.  if v0 == 0 then goto L410256;
  #L410254.  goto L41028e;
  #L410256.  if v2 != 0 then goto L410268;
  #L41025a.  v2:= new `java.lang.NullPointerException`;
  #L41025e.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L410262.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L410268.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$i.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41026c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L410272.  v0:= temp;
  #L410274.  if v0 == 0 then goto L410286;
  #L410278.  v2:= 1I;
  #L41027a.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$i.d` @type ^`boolean` := v2 @kind boolean;
  #L41027e.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.a:()V` @kind virtual;
  #L410284.  goto L41028c;
  #L410286.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41028c.  return @kind void;
  #L41028e.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L410294.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCreate$i` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4102a8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L4102ac.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L4102b2.  v0:= temp;
  #L4102b4.  if v0 != 0 then goto L41033a;
  #L4102b8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$i.d` @type ^`boolean` @kind boolean;
  #L4102bc.  if v0 == 0 then goto L4102c2;
  #L4102c0.  goto L41033a;
  #L4102c2.  if v3 != 0 then goto L4102dc;
  #L4102c6.  v3:= new `java.lang.NullPointerException`;
  #L4102ca.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L4102ce.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4102d4.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4102da.  return @kind void;
  #L4102dc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4102e2.  v0:= temp;
  #L4102e4.  if v0 != 0 then goto L410310;
  #L4102e8.  v0:= 0I;
  #L4102ea.  v1:= 1I;
  #L4102ec.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4102f2.  v0:= temp;
  #L4102f4.  if v0 == 0 then goto L410310;
  #L4102f8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L4102fc.  call `onNext`(v0, v3) @signature `Lio/reactivex/Emitter;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L410302.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L410308.  v3:= temp;
  #L41030a.  if v3 != 0 then goto L41032c;
  #L41030e.  return @kind void;
  #L410310.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$i.c` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L410314.  @monitorenter v0
  #L410316.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L41031c.  @monitorexit v0
  #L41031e.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L410324.  v3:= temp;
  #L410326.  if v3 == 0 then goto L41032c;
  #L41032a.  return @kind void;
  #L41032c.  call `b`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.b:()V` @kind virtual;
  #L410332.  return @kind void;
  #L410334.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L410336.  @monitorexit v0
  #L410338.  throw v3;
  #L41033a.  return @kind void;
  catch `java.lang.Throwable` @[L410316..L41031e] goto L410334;
  catch `java.lang.Throwable` @[L410336..L410338] goto L410334;
}
procedure `long` `requested`(`io.reactivex.internal.operators.flowable.FlowableCreate$i` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.requested:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4100ec.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L4100f0.  call temp:= `requested`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.requested:()J` @kind virtual;
  #L4100f6.  v0:= temp @kind wide;
  #L4100f8.  return v0 @kind wide;
}
procedure `io.reactivex.FlowableEmitter` `serialize`(`io.reactivex.internal.operators.flowable.FlowableCreate$i` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.serialize:()Lio/reactivex/FlowableEmitter;` @AccessFlag PUBLIC {
    temp;

  #L4100d8.  return v0 @kind object;
}
procedure `void` `setCancellable`(`io.reactivex.internal.operators.flowable.FlowableCreate$i` v1 @kind this, `io.reactivex.functions.Cancellable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.setCancellable:(Lio/reactivex/functions/Cancellable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L410360.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L410364.  call `setCancellable`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.setCancellable:(Lio/reactivex/functions/Cancellable;)V` @kind virtual;
  #L41036a.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.internal.operators.flowable.FlowableCreate$i` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41037c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L410380.  call `setDisposable`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L410386.  return @kind void;
}
