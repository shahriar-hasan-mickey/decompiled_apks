record `io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.c` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.d` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.e` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.f` @AccessFlag ;
  `java.util.Collection` `io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.g` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/Callable;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L40beb4.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L40beb8.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L40bebe.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L40bec4.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.c` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L40bec8.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.d` @type ^`org.reactivestreams.Publisher` := v4 @kind object;
  #L40becc.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L40be7c.  v1:= v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40be80.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40be86.  v1:= 1I;
  #L40be88.  return v1;
}
procedure `boolean` `accept`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L40be5c.  v2:= (`java.util.Collection`) v2 @kind object;
  #L40be60.  call temp:= `a`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @kind virtual;
  #L40be66.  v1:= temp;
  #L40be68.  return v1;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L40bf44.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L40bf48.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L40bf4e.  v0:= temp @kind object;
  #L40bf50.  v1:= "The buffer supplied is null" @kind object;
  #L40bf54.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40bf5a.  v0:= temp @kind object;
  #L40bf5c.  v0:= (`java.util.Collection`) v0 @kind object;
  #L40bf60.  @monitorenter v2
  #L40bf62.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.g` @type ^`java.util.Collection` @kind object;
  #L40bf66.  if v1 != 0 then goto L40bf6e;
  #L40bf6a.  @monitorexit v2
  #L40bf6c.  return @kind void;
  #L40bf6e.  v2.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.g` @type ^`java.util.Collection` := v0 @kind object;
  #L40bf72.  @monitorexit v2
  #L40bf74.  v0:= 0I;
  #L40bf76.  call `fastPathEmitMax`(v2, v1, v0, v2) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastPathEmitMax:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L40bf7c.  return @kind void;
  #L40bf7e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40bf80.  @monitorexit v2
  #L40bf82.  throw v0;
  #L40bf84.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40bf86.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40bf8c.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.cancel:()V` @kind virtual;
  #L40bf92.  v1:= v2.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40bf96.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40bf9c.  return @kind void;
  catch `java.lang.Throwable` @[L40bf44..L40bf60] goto L40bf84;
  catch `java.lang.Throwable` @[L40bf62..L40bf74] goto L40bf7e;
  catch `java.lang.Throwable` @[L40bf80..L40bf82] goto L40bf7e;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40bee0.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L40bee4.  if v0 != 0 then goto L40bf18;
  #L40bee8.  v0:= 1I;
  #L40beea.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L40beee.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L40bef2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L40bef8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40befc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40bf02.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L40bf08.  v0:= temp;
  #L40bf0a.  if v0 == 0 then goto L40bf18;
  #L40bf0e.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L40bf12.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L40bf18.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L40bf2c.  call `cancel`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.cancel:()V` @kind virtual;
  #L40bf32.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40be9c.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L40bea0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40bfd0.  @monitorenter v3
  #L40bfd2.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.g` @type ^`java.util.Collection` @kind object;
  #L40bfd6.  if v0 != 0 then goto L40bfde;
  #L40bfda.  @monitorexit v3
  #L40bfdc.  return @kind void;
  #L40bfde.  v1:= 0I;
  #L40bfe0.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.g` @type ^`java.util.Collection` := v1 @kind object;
  #L40bfe4.  @monitorexit v3
  #L40bfe6.  v1:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L40bfea.  call temp:= `offer`(v1, v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L40bff0.  v0:= 1I;
  #L40bff2.  v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40bff6.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L40bffc.  v0:= temp;
  #L40bffe.  if v0 == 0 then goto L40c012;
  #L40c002.  v0:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L40c006.  v1:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40c00a.  v2:= 0I;
  #L40c00c.  call `drainMaxLoop`(v0, v1, v2, v3, v3) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/QueueDrain;)V` @kind static;
  #L40c012.  return @kind void;
  #L40c014.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40c016.  @monitorexit v3
  #L40c018.  throw v0;
  catch `java.lang.Throwable` @[L40bfd2..L40bfe6] goto L40c014;
  catch `java.lang.Throwable` @[L40c016..L40c018] goto L40c014;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40c040.  call `cancel`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.cancel:()V` @kind virtual;
  #L40c046.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40c04a.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40c050.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40c064.  @monitorenter v1
  #L40c066.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.g` @type ^`java.util.Collection` @kind object;
  #L40c06a.  if v0 != 0 then goto L40c072;
  #L40c06e.  @monitorexit v1
  #L40c070.  return @kind void;
  #L40c072.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L40c078.  @monitorexit v1
  #L40c07a.  return @kind void;
  #L40c07c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40c07e.  @monitorexit v1
  #L40c080.  throw v2;
  catch `java.lang.Throwable` @[L40c066..L40c080] goto L40c07c;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40c0a0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40c0a4.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40c0aa.  v0:= temp;
  #L40c0ac.  if v0 != 0 then goto L40c0b2;
  #L40c0b0.  return @kind void;
  #L40c0b2.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.e` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L40c0b6.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L40c0ba.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L40c0c0.  v0:= temp @kind object;
  #L40c0c2.  v1:= "The buffer supplied is null" @kind object;
  #L40c0c6.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40c0cc.  v0:= temp @kind object;
  #L40c0ce.  v0:= (`java.util.Collection`) v0 @kind object;
  #L40c0d2.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.g` @type ^`java.util.Collection` := v0 @kind object;
  #L40c0d6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$a`;
  #L40c0da.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;)V` @kind direct;
  #L40c0e0.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.f` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L40c0e4.  v1:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40c0e8.  call `onSubscribe`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40c0ee.  v1:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L40c0f2.  if v1 != 0 then goto L40c110;
  #L40c0f6.  v1:= 9223372036854775807L;
  #L40c100.  call `request`(v4, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40c106.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.d` @type ^`org.reactivestreams.Publisher` @kind object;
  #L40c10a.  call `subscribe`(v4, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40c110.  return @kind void;
  #L40c112.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40c114.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40c11a.  v1:= 1I;
  #L40c11c.  v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L40c120.  call `cancel`(v4) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40c126.  v4:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40c12a.  call `error`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L40c130.  return @kind void;
  catch `java.lang.Throwable` @[L40c0b6..L40c0d2] goto L40c112;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L40c150.  call `requested`(v0, v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @kind virtual;
  #L40c156.  return @kind void;
}
