record `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` @kind class {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$a;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L411708.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;)V` @kind direct;
  #L41170e.  v0.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.a` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L411712.  v0.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.b` @type ^`io.reactivex.functions.BiPredicate` := v3 @kind object;
  #L411716.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L411728.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$a;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L41172e.  v3:= temp;
  #L411730.  if v3 != 0 then goto L411742;
  #L411734.  v3:= v2.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.s` @type ^`org.reactivestreams.Subscription` @kind object;
  #L411738.  v0:= 1L;
  #L41173c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L411742.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L41168c.  v0:= v5.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L411690.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L411696.  v0:= temp @kind object;
  #L411698.  if v0 != 0 then goto L4116a0;
  #L41169c.  v0:= 0I;
  #L41169e.  return v0 @kind object;
  #L4116a0.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.a` @type ^`io.reactivex.functions.Function` @kind object;
  #L4116a4.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4116aa.  v1:= temp @kind object;
  #L4116ac.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.d` @type ^`boolean` @kind boolean;
  #L4116b0.  v3:= 1I;
  #L4116b2.  if v2 != 0 then goto L4116c0;
  #L4116b6.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.d` @type ^`boolean` := v3 @kind boolean;
  #L4116ba.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4116be.  return v0 @kind object;
  #L4116c0.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.b` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L4116c4.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @type ^`java.lang.Object` @kind object;
  #L4116c8.  call temp:= `test`(v2, v4, v1) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L4116ce.  v2:= temp;
  #L4116d0.  if v2 != 0 then goto L4116da;
  #L4116d4.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4116d8.  return v0 @kind object;
  #L4116da.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4116de.  v0:= v5.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L4116e2.  if v0 == v3 then goto L41168c;
  #L4116e6.  v0:= v5.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.s` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4116ea.  v1:= 1L;
  #L4116ee.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4116f4.  goto L41168c;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L411670.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L411676.  v1:= temp;
  #L411678.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$a;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4115e4.  v0:= v5.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L4115e8.  v1:= 0I;
  #L4115ea.  if v0 == 0 then goto L4115f0;
  #L4115ee.  return v1;
  #L4115f0.  v0:= v5.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L4115f4.  if v0 == 0 then goto L411606;
  #L4115f8.  v0:= v5.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.actual` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4115fc.  call temp:= `tryOnNext`(v0, v6) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L411602.  v6:= temp;
  #L411604.  return v6;
  #L411606.  v0:= 1I;
  #L411608.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.a` @type ^`io.reactivex.functions.Function` @kind object;
  #L41160c.  call temp:= `apply`(v2, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L411612.  v2:= temp @kind object;
  #L411614.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.d` @type ^`boolean` @kind boolean;
  #L411618.  if v3 == 0 then goto L411636;
  #L41161c.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.b` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L411620.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @type ^`java.lang.Object` @kind object;
  #L411624.  call temp:= `test`(v3, v4, v2) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L41162a.  v3:= temp;
  #L41162c.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v2 @kind object;
  #L411630.  if v3 == 0 then goto L41163e;
  #L411634.  return v1;
  #L411636.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.d` @type ^`boolean` := v0 @kind boolean;
  #L41163a.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v2 @kind object;
  #L41163e.  v1:= v5.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.actual` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L411642.  call `onNext`(v1, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L411648.  return v0;
  #L41164a.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41164c.  call `fail`(v5, v6) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L411652.  return v0;
  catch `java.lang.Throwable` @[L411608..L41163e] goto L41164a;
}
