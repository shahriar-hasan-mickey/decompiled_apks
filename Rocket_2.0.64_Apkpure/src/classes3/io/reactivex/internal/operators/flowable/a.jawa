record `io.reactivex.internal.operators.flowable.a` @kind class @AccessFlag ABSTRACT extends `io.reactivex.Flowable` @kind class, `io.reactivex.internal.fuseable.HasUpstreamPublisher` @kind interface {
  `io.reactivex.Flowable` `io.reactivex.internal.operators.flowable.a.source` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.a` v1 @kind this, `io.reactivex.Flowable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4093b0.  call `<init>`(v1) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L4093b6.  v0:= "source is null" @kind object;
  #L4093ba.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4093c0.  v2:= temp @kind object;
  #L4093c2.  v2:= (`io.reactivex.Flowable`) v2 @kind object;
  #L4093c6.  v1.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` := v2 @kind object;
  #L4093ca.  return @kind void;
}
procedure `org.reactivestreams.Publisher` `source`(`io.reactivex.internal.operators.flowable.a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/a;.source:()Lorg/reactivestreams/Publisher;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L409398.  v0:= v1.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L40939c.  return v0 @kind object;
}
