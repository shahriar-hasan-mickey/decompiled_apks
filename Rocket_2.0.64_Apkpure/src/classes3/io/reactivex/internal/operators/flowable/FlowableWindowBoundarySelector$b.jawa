record `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$b` @kind class @AccessFlag FINAL extends `io.reactivex.subscribers.DisposableSubscriber` @kind class {
  `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$b.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$b.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$b` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$b;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L426d88.  call `<init>`(v0) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.<init>:()V` @kind direct;
  #L426d8e.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$b.b` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` := v1 @kind object;
  #L426d92.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L426da4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$b.c` @type ^`boolean` @kind boolean;
  #L426da8.  if v0 == 0 then goto L426dae;
  #L426dac.  return @kind void;
  #L426dae.  v0:= 1I;
  #L426db0.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$b.c` @type ^`boolean` := v0 @kind boolean;
  #L426db4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$b.b` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` @kind object;
  #L426db8.  call `onComplete`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.onComplete:()V` @kind virtual;
  #L426dbe.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L426dd0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$b.c` @type ^`boolean` @kind boolean;
  #L426dd4.  if v0 == 0 then goto L426de0;
  #L426dd8.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L426dde.  return @kind void;
  #L426de0.  v0:= 1I;
  #L426de2.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$b.c` @type ^`boolean` := v0 @kind boolean;
  #L426de6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$b.b` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` @kind object;
  #L426dea.  call `c`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.c:(Ljava/lang/Throwable;)V` @kind virtual;
  #L426df0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L426e04.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$b.c` @type ^`boolean` @kind boolean;
  #L426e08.  if v0 == 0 then goto L426e0e;
  #L426e0c.  return @kind void;
  #L426e0e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$b.b` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` @kind object;
  #L426e12.  call `d`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.d:(Ljava/lang/Object;)V` @kind virtual;
  #L426e18.  return @kind void;
}
