record `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.b` @AccessFlag FINAL;
  `io.reactivex.BackpressureOverflowStrategy` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.e` @AccessFlag FINAL;
  `java.util.Deque` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.g` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.i` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.j` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Action` v2 @kind object, `io.reactivex.BackpressureOverflowStrategy` v3 @kind object, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Action;Lio/reactivex/BackpressureOverflowStrategy;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41b248.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L41b24e.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L41b252.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.b` @type ^`io.reactivex.functions.Action` := v2 @kind object;
  #L41b256.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.c` @type ^`io.reactivex.BackpressureOverflowStrategy` := v3 @kind object;
  #L41b25a.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.d` @type ^`long` := v4 @kind wide;
  #L41b25e.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L41b262.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L41b268.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L41b26c.  v1:= new `java.util.ArrayDeque`;
  #L41b270.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L41b276.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.f` @type ^`java.util.Deque` := v1 @kind object;
  #L41b27a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v1 @kind this, `java.util.Deque` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.a:(Ljava/util/Deque;)V` @AccessFlag  {
    temp;
    v0;

  #L41b2c4.  @monitorenter v2
  #L41b2c6.  call `clear`(v2) @signature `Ljava/util/Deque;.clear:()V` @kind interface;
  #L41b2cc.  @monitorexit v2
  #L41b2ce.  return @kind void;
  #L41b2d0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41b2d2.  @monitorexit v2
  #L41b2d4.  throw v0;
  catch `java.lang.Throwable` @[L41b2c6..L41b2d4] goto L41b2d0;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v14 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L41b2f4.  call temp:= `getAndIncrement`(v14) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L41b2fa.  v0:= temp;
  #L41b2fc.  if v0 == 0 then goto L41b302;
  #L41b300.  return @kind void;
  #L41b302.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.f` @type ^`java.util.Deque` @kind object;
  #L41b306.  v1:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41b30a.  v2:= 1I;
  #L41b30c.  v3:= 1I;
  #L41b30e.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L41b312.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L41b318.  v4:= temp @kind wide;
  #L41b31a.  v6:= 0L;
  #L41b31e.  v8:= v6 @kind wide;
  #L41b320.  v10:= lcmp(v8, v4);
  #L41b324.  if v10 == 0 then goto L41b392;
  #L41b328.  v11:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.h` @type ^`boolean` @kind boolean;
  #L41b32c.  if v11 == 0 then goto L41b338;
  #L41b330.  call `a`(v14, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.a:(Ljava/util/Deque;)V` @kind virtual;
  #L41b336.  return @kind void;
  #L41b338.  v11:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.i` @type ^`boolean` @kind boolean;
  #L41b33c.  @monitorenter v0
  #L41b33e.  call temp:= `poll`(v0) @signature `Ljava/util/Deque;.poll:()Ljava/lang/Object;` @kind interface;
  #L41b344.  v12:= temp @kind object;
  #L41b346.  @monitorexit v0
  #L41b348.  if v12 != 0 then goto L41b350;
  #L41b34c.  v13:= 1I;
  #L41b34e.  goto L41b352;
  #L41b350.  v13:= 0I;
  #L41b352.  if v11 == 0 then goto L41b378;
  #L41b356.  v11:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.j` @type ^`java.lang.Throwable` @kind object;
  #L41b35a.  if v11 == 0 then goto L41b36c;
  #L41b35e.  call `a`(v14, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.a:(Ljava/util/Deque;)V` @kind virtual;
  #L41b364.  call `onError`(v1, v11) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41b36a.  return @kind void;
  #L41b36c.  if v13 == 0 then goto L41b378;
  #L41b370.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41b376.  return @kind void;
  #L41b378.  if v13 == 0 then goto L41b37e;
  #L41b37c.  goto L41b392;
  #L41b37e.  call `onNext`(v1, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41b384.  v10:= 1L;
  #L41b388.  v8:= v8 + v10 @kind long;
  #L41b38a.  goto L41b320;
  #L41b38c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41b38e.  @monitorexit v0
  #L41b390.  throw v1;
  #L41b392.  if v10 != 0 then goto L41b3e2;
  #L41b396.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.h` @type ^`boolean` @kind boolean;
  #L41b39a.  if v4 == 0 then goto L41b3a6;
  #L41b39e.  call `a`(v14, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.a:(Ljava/util/Deque;)V` @kind virtual;
  #L41b3a4.  return @kind void;
  #L41b3a6.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.i` @type ^`boolean` @kind boolean;
  #L41b3aa.  @monitorenter v0
  #L41b3ac.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Deque;.isEmpty:()Z` @kind interface;
  #L41b3b2.  v5:= temp;
  #L41b3b4.  @monitorexit v0
  #L41b3b6.  if v4 == 0 then goto L41b3e2;
  #L41b3ba.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.j` @type ^`java.lang.Throwable` @kind object;
  #L41b3be.  if v4 == 0 then goto L41b3d0;
  #L41b3c2.  call `a`(v14, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.a:(Ljava/util/Deque;)V` @kind virtual;
  #L41b3c8.  call `onError`(v1, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41b3ce.  return @kind void;
  #L41b3d0.  if v5 == 0 then goto L41b3e2;
  #L41b3d4.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41b3da.  return @kind void;
  #L41b3dc.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41b3de.  @monitorexit v0
  #L41b3e0.  throw v1;
  #L41b3e2.  v4:= lcmp(v8, v6);
  #L41b3e6.  if v4 == 0 then goto L41b3f4;
  #L41b3ea.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L41b3ee.  call temp:= `produced`(v4, v8) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L41b3f4.  v3:= -v3 @kind int;
  #L41b3f6.  call temp:= `addAndGet`(v14, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L41b3fc.  v3:= temp;
  #L41b3fe.  if v3 != 0 then goto L41b30e;
  #L41b402.  return @kind void;
  catch `java.lang.Throwable` @[L41b33e..L41b348] goto L41b38c;
  catch `java.lang.Throwable` @[L41b38e..L41b390] goto L41b38c;
  catch `java.lang.Throwable` @[L41b3ac..L41b3b6] goto L41b3dc;
  catch `java.lang.Throwable` @[L41b3de..L41b3e0] goto L41b3dc;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41b28c.  v0:= 1I;
  #L41b28e.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.h` @type ^`boolean` := v0 @kind boolean;
  #L41b292.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41b296.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L41b29c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L41b2a2.  v0:= temp;
  #L41b2a4.  if v0 != 0 then goto L41b2b2;
  #L41b2a8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.f` @type ^`java.util.Deque` @kind object;
  #L41b2ac.  call `a`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.a:(Ljava/util/Deque;)V` @kind virtual;
  #L41b2b2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41b43c.  v0:= 1I;
  #L41b43e.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.i` @type ^`boolean` := v0 @kind boolean;
  #L41b442.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.b:()V` @kind virtual;
  #L41b448.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41b45c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.i` @type ^`boolean` @kind boolean;
  #L41b460.  if v0 == 0 then goto L41b46c;
  #L41b464.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41b46a.  return @kind void;
  #L41b46c.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.j` @type ^`java.lang.Throwable` := v2 @kind object;
  #L41b470.  v2:= 1I;
  #L41b472.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.i` @type ^`boolean` := v2 @kind boolean;
  #L41b476.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.b:()V` @kind virtual;
  #L41b47c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v8 @kind this, `java.lang.Object` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L41b490.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.i` @type ^`boolean` @kind boolean;
  #L41b494.  if v0 == 0 then goto L41b49a;
  #L41b498.  return @kind void;
  #L41b49a.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.f` @type ^`java.util.Deque` @kind object;
  #L41b49e.  @monitorenter v0
  #L41b4a0.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L41b4a6.  v1:= temp;
  #L41b4a8.  v1:= (`long`) v1 @kind i2l;
  #L41b4aa.  v3:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.d` @type ^`long` @kind wide;
  #L41b4ae.  v5:= 0I;
  #L41b4b0.  v6:= 1I;
  #L41b4b2.  v7:= lcmp(v1, v3);
  #L41b4b6.  if v7 != 0 then goto L41b4f8;
  #L41b4ba.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$a.a` @type ^`int`[] @kind object;
  #L41b4be.  v2:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.c` @type ^`io.reactivex.BackpressureOverflowStrategy` @kind object;
  #L41b4c2.  call temp:= `ordinal`(v2) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L41b4c8.  v2:= temp;
  #L41b4ca.  v1:= v1[v2];
  #L41b4ce.  if v1 == v6 then goto L41b4e8;
  #L41b4d2.  v2:= 2I;
  #L41b4d4.  if v1 == v2 then goto L41b4da;
  #L41b4d8.  goto L41b500;
  #L41b4da.  call temp:= `poll`(v0) @signature `Ljava/util/Deque;.poll:()Ljava/lang/Object;` @kind interface;
  #L41b4e0.  call temp:= `offer`(v0, v9) @signature `Ljava/util/Deque;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L41b4e6.  goto L41b4f4;
  #L41b4e8.  call temp:= `pollLast`(v0) @signature `Ljava/util/Deque;.pollLast:()Ljava/lang/Object;` @kind interface;
  #L41b4ee.  call temp:= `offer`(v0, v9) @signature `Ljava/util/Deque;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L41b4f4.  v5:= 1I;
  #L41b4f6.  goto L41b4fe;
  #L41b4f8.  call temp:= `offer`(v0, v9) @signature `Ljava/util/Deque;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L41b4fe.  v6:= 0I;
  #L41b500.  @monitorexit v0
  #L41b502.  if v5 == 0 then goto L41b530;
  #L41b506.  v9:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.b` @type ^`io.reactivex.functions.Action` @kind object;
  #L41b50a.  if v9 == 0 then goto L41b556;
  #L41b50e.  call `run`(v9) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L41b514.  goto L41b556;
  #L41b516.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41b518.  call `throwIfFatal`(v9) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41b51e.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41b522.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L41b528.  call `onError`(v8, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41b52e.  goto L41b556;
  #L41b530.  if v6 == 0 then goto L41b550;
  #L41b534.  v9:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41b538.  call `cancel`(v9) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L41b53e.  v9:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L41b542.  call `<init>`(v9) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L41b548.  call `onError`(v8, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41b54e.  goto L41b556;
  #L41b550.  call `b`(v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.b:()V` @kind virtual;
  #L41b556.  return @kind void;
  #L41b558.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41b55a.  @monitorexit v0
  #L41b55c.  throw v9;
  catch `java.lang.Throwable` @[L41b4a0..L41b502] goto L41b558;
  catch `java.lang.Throwable` @[L41b50e..L41b514] goto L41b516;
  catch `java.lang.Throwable` @[L41b55a..L41b55c] goto L41b558;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41b590.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41b594.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L41b59a.  v0:= temp;
  #L41b59c.  if v0 == 0 then goto L41b5be;
  #L41b5a0.  v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.g` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L41b5a4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41b5a8.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L41b5ae.  v0:= 9223372036854775807L;
  #L41b5b8.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L41b5be.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41b5d0.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L41b5d6.  v0:= temp;
  #L41b5d8.  if v0 == 0 then goto L41b5ec;
  #L41b5dc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L41b5e0.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L41b5e6.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.b:()V` @kind virtual;
  #L41b5ec.  return @kind void;
}
