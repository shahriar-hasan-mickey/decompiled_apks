record `io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `java.util.Iterator` @kind interface, `java.lang.Runnable` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.internal.queue.SpscArrayQueue` `io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.c` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.d` @AccessFlag FINAL;
  `java.util.concurrent.locks.Condition` `io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.e` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.f` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.g` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.h` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L409530.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L409536.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L40953a.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L409540.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.a` @type ^`io.reactivex.internal.queue.SpscArrayQueue` := v0 @kind object;
  #L409544.  v0:= (`long`) v3 @kind i2l;
  #L409546.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.b` @type ^`long` := v0 @kind wide;
  #L40954a.  v0:= v3 ^> 2;
  #L40954e.  v3:= v3 - v0 @kind int;
  #L409550.  v0:= (`long`) v3 @kind i2l;
  #L409552.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.c` @type ^`long` := v0 @kind wide;
  #L409556.  v3:= new `java.util.concurrent.locks.ReentrantLock`;
  #L40955a.  call `<init>`(v3) @signature `Ljava/util/concurrent/locks/ReentrantLock;.<init>:()V` @kind direct;
  #L409560.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.d` @type ^`java.util.concurrent.locks.Lock` := v3 @kind object;
  #L409564.  call temp:= `newCondition`(v3) @signature `Ljava/util/concurrent/locks/Lock;.newCondition:()Ljava/util/concurrent/locks/Condition;` @kind interface;
  #L40956a.  v3:= temp @kind object;
  #L40956c.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.e` @type ^`java.util.concurrent.locks.Condition` := v3 @kind object;
  #L409570.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L40968c.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L409690.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L409696.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.e` @type ^`java.util.concurrent.locks.Condition` @kind object;
  #L40969a.  call `signalAll`(v0) @signature `Ljava/util/concurrent/locks/Condition;.signalAll:()V` @kind interface;
  #L4096a0.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4096a4.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L4096aa.  return @kind void;
  #L4096ac.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4096ae.  v1:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4096b2.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L4096b8.  throw v0;
  catch `java.lang.Throwable` @[L409696..L4096a0] goto L4096ac;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L409584.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40958a.  return @kind void;
}
procedure `boolean` `hasNext`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4093dc.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.g` @type ^`boolean` @kind boolean;
  #L4093e0.  v1:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.a` @type ^`io.reactivex.internal.queue.SpscArrayQueue` @kind object;
  #L4093e4.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4093ea.  v1:= temp;
  #L4093ec.  if v0 == 0 then goto L40940a;
  #L4093f0.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.h` @type ^`java.lang.Throwable` @kind object;
  #L4093f4.  if v0 != 0 then goto L409400;
  #L4093f8.  if v1 == 0 then goto L40940a;
  #L4093fc.  v0:= 0I;
  #L4093fe.  return v0;
  #L409400.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L409406.  v0:= temp @kind object;
  #L409408.  throw v0;
  #L40940a.  if v1 == 0 then goto L409470;
  #L40940e.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L409414.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L409418.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L40941e.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.g` @type ^`boolean` @kind boolean;
  #L409422.  if v0 != 0 then goto L409442;
  #L409426.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.a` @type ^`io.reactivex.internal.queue.SpscArrayQueue` @kind object;
  #L40942a.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.isEmpty:()Z` @kind virtual;
  #L409430.  v0:= temp;
  #L409432.  if v0 == 0 then goto L409442;
  #L409436.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.e` @type ^`java.util.concurrent.locks.Condition` @kind object;
  #L40943a.  call `await`(v0) @signature `Ljava/util/concurrent/locks/Condition;.await:()V` @kind interface;
  #L409440.  goto L40941e;
  #L409442.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L409446.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L40944c.  goto L4093dc;
  #L40944e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L409450.  goto L409464;
  #L409452.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L409454.  call `run`(v2) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.run:()V` @kind virtual;
  #L40945a.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L409460.  v0:= temp @kind object;
  #L409462.  throw v0;
  #L409464.  v1:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L409468.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L40946e.  throw v0;
  #L409470.  v0:= 1I;
  #L409472.  return v0;
  catch `java.lang.InterruptedException` @[L40941e..L409440] goto L409452;
  catch `java.lang.Throwable` @[L40941e..L409440] goto L40944e;
  catch `java.lang.Throwable` @[L409454..L409464] goto L40944e;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40949c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4094a2.  v0:= temp @kind object;
  #L4094a4.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4094a8.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.isCancelled:(Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4094ae.  v0:= temp;
  #L4094b0.  return v0;
}
procedure `java.lang.Object` `next`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4094c4.  call temp:= `hasNext`(v6) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.hasNext:()Z` @kind virtual;
  #L4094ca.  v0:= temp;
  #L4094cc.  if v0 == 0 then goto L409514;
  #L4094d0.  v0:= v6.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.a` @type ^`io.reactivex.internal.queue.SpscArrayQueue` @kind object;
  #L4094d4.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4094da.  v0:= temp @kind object;
  #L4094dc.  v1:= v6.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.f` @type ^`long` @kind wide;
  #L4094e0.  v3:= 1L;
  #L4094e4.  v1:= v1 + v3 @kind long;
  #L4094e6.  v3:= v6.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.c` @type ^`long` @kind wide;
  #L4094ea.  v5:= lcmp(v1, v3);
  #L4094ee.  if v5 != 0 then goto L40950e;
  #L4094f2.  v3:= 0L;
  #L4094f6.  v6.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.f` @type ^`long` := v3 @kind wide;
  #L4094fa.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L409500.  v3:= temp @kind object;
  #L409502.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L409506.  call `request`(v3, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40950c.  goto L409512;
  #L40950e.  v6.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.f` @type ^`long` := v1 @kind wide;
  #L409512.  return v0 @kind object;
  #L409514.  v0:= new `java.util.NoSuchElementException`;
  #L409518.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L40951e.  throw v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40959c.  v0:= 1I;
  #L40959e.  v1.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4095a2.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.a:()V` @kind virtual;
  #L4095a8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4095bc.  v0.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.h` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4095c0.  v1:= 1I;
  #L4095c2.  v0.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.g` @type ^`boolean` := v1 @kind boolean;
  #L4095c6.  call `a`(v0) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.a:()V` @kind virtual;
  #L4095cc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4095e0.  v0:= v1.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.a` @type ^`io.reactivex.internal.queue.SpscArrayQueue` @kind object;
  #L4095e4.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4095ea.  v2:= temp;
  #L4095ec.  if v2 != 0 then goto L40960c;
  #L4095f0.  call temp:= `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4095f6.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L4095fa.  v0:= "Queue full?!" @kind object;
  #L4095fe.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L409604.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40960a.  goto L409612;
  #L40960c.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.a:()V` @kind virtual;
  #L409612.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L409624.  call temp:= `setOnce`(v2, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40962a.  v0:= temp;
  #L40962c.  if v0 == 0 then goto L40963a;
  #L409630.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.b` @type ^`long` @kind wide;
  #L409634.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40963a.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40964c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L409650.  v1:= "remove" @kind object;
  #L409654.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40965a.  throw v0;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.run:()V` @AccessFlag PUBLIC {
    temp;

  #L40966c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L409672.  call `a`(v0) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.a:()V` @kind virtual;
  #L409678.  return @kind void;
}
