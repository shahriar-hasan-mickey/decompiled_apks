record `io.reactivex.internal.operators.flowable.FlowableGroupBy$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `org.reactivestreams.Publisher` @kind interface {
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableGroupBy$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.flowable.FlowableGroupBy$b.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` `io.reactivex.internal.operators.flowable.FlowableGroupBy$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$b.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableGroupBy$b.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$b.f` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableGroupBy$b.g` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$b.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableGroupBy$b.i` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$b.j` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$b.k` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableGroupBy$b.l` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableGroupBy$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$b` v1 @kind this, `int` v2 , `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v3 @kind object, `java.lang.Object` v4 @kind object, `boolean` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;.<init>:(ILio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;Ljava/lang/Object;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4174e0.  call `<init>`(v1) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L4174e6.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4174ea.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4174f0.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L4174f4.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4174f8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4174fe.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L417502.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L417506.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L41750c.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L417510.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L417514.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L41751a.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L41751e.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L417522.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L417528.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v0 @kind object;
  #L41752c.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.c` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` := v3 @kind object;
  #L417530.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.a` @type ^`java.lang.Object` := v4 @kind object;
  #L417534.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.d` @type ^`boolean` := v5 @kind boolean;
  #L417538.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$b` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L41754c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L417550.  v1:= 0I;
  #L417552.  v2:= 1I;
  #L417554.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L41755a.  v0:= temp;
  #L41755c.  if v0 == 0 then goto L41756e;
  #L417560.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.c` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` @kind object;
  #L417564.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.a` @type ^`java.lang.Object` @kind object;
  #L417568.  call `cancel`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.cancel:(Ljava/lang/Object;)V` @kind virtual;
  #L41756e.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L417580.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L417584.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L41758a.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L41759c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4175a2.  v0:= temp;
  #L4175a4.  if v0 == 0 then goto L4175aa;
  #L4175a8.  return @kind void;
  #L4175aa.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.k` @type ^`boolean` @kind boolean;
  #L4175ae.  if v0 == 0 then goto L4175ba;
  #L4175b2.  call `f`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;.f:()V` @kind virtual;
  #L4175b8.  goto L4175c0;
  #L4175ba.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;.g:()V` @kind virtual;
  #L4175c0.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$b` v2 @kind this, `boolean` v3 , `boolean` v4 , `org.reactivestreams.Subscriber` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;.e:(ZZLorg/reactivestreams/Subscriber;Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4173d0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4173d4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4173da.  v0:= temp;
  #L4173dc.  v1:= 1I;
  #L4173de.  if v0 == 0 then goto L4173ee;
  #L4173e2.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4173e6.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4173ec.  return v1;
  #L4173ee.  if v3 == 0 then goto L417438;
  #L4173f2.  if v6 == 0 then goto L417412;
  #L4173f6.  if v4 == 0 then goto L417438;
  #L4173fa.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.g` @type ^`java.lang.Throwable` @kind object;
  #L4173fe.  if v3 == 0 then goto L41740a;
  #L417402.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L417408.  goto L417410;
  #L41740a.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L417410.  return v1;
  #L417412.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.g` @type ^`java.lang.Throwable` @kind object;
  #L417416.  if v3 == 0 then goto L41742c;
  #L41741a.  v4:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L41741e.  call `clear`(v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L417424.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41742a.  return v1;
  #L41742c.  if v4 == 0 then goto L417438;
  #L417430.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L417436.  return v1;
  #L417438.  v3:= 0I;
  #L41743a.  return v3;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$b` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4175d4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4175d8.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4175dc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4175e2.  v1:= temp @kind object;
  #L4175e4.  v1:= (`org.reactivestreams.Subscriber`) v1 @kind object;
  #L4175e8.  v2:= 1I;
  #L4175ea.  if v1 == 0 then goto L417650;
  #L4175ee.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4175f2.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4175f8.  v3:= temp;
  #L4175fa.  if v3 == 0 then goto L417606;
  #L4175fe.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L417604.  return @kind void;
  #L417606.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.f` @type ^`boolean` @kind boolean;
  #L41760a.  if v3 == 0 then goto L41762c;
  #L41760e.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.d` @type ^`boolean` @kind boolean;
  #L417612.  if v4 != 0 then goto L41762c;
  #L417616.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.g` @type ^`java.lang.Throwable` @kind object;
  #L41761a.  if v4 == 0 then goto L41762c;
  #L41761e.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L417624.  call `onError`(v1, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41762a.  return @kind void;
  #L41762c.  v4:= 0I;
  #L41762e.  call `onNext`(v1, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L417634.  if v3 == 0 then goto L417650;
  #L417638.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.g` @type ^`java.lang.Throwable` @kind object;
  #L41763c.  if v0 == 0 then goto L417648;
  #L417640.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L417646.  goto L41764e;
  #L417648.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41764e.  return @kind void;
  #L417650.  v2:= -v2 @kind int;
  #L417652.  call temp:= `addAndGet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L417658.  v2:= temp;
  #L41765a.  if v2 != 0 then goto L417660;
  #L41765e.  return @kind void;
  #L417660.  if v1 != 0 then goto L4175ea;
  #L417664.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L417668.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41766e.  v1:= temp @kind object;
  #L417670.  v1:= (`org.reactivestreams.Subscriber`) v1 @kind object;
  #L417674.  goto L4175ea;
}
procedure `void` `g`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$b` v15 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L417688.  v0:= v15.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L41768c.  v1:= v15.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.d` @type ^`boolean` @kind boolean;
  #L417690.  v2:= v15.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L417694.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41769a.  v2:= temp @kind object;
  #L41769c.  v2:= (`org.reactivestreams.Subscriber`) v2 @kind object;
  #L4176a0.  v3:= 1I;
  #L4176a2.  v4:= 1I;
  #L4176a4.  if v2 == 0 then goto L41774c;
  #L4176a8.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4176ac.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4176b2.  v5:= temp @kind wide;
  #L4176b4.  v7:= 0L;
  #L4176b8.  v9:= v7 @kind wide;
  #L4176ba.  v11:= lcmp(v9, v5);
  #L4176be.  if v11 == 0 then goto L4176fa;
  #L4176c2.  v12:= v15.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.f` @type ^`boolean` @kind boolean;
  #L4176c6.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4176cc.  v13:= temp @kind object;
  #L4176ce.  if v13 != 0 then goto L4176d6;
  #L4176d2.  v14:= 1I;
  #L4176d4.  goto L4176d8;
  #L4176d6.  v14:= 0I;
  #L4176d8.  call temp:= `e`(v15, v12, v14, v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;.e:(ZZLorg/reactivestreams/Subscriber;Z)Z` @kind virtual;
  #L4176de.  v12:= temp;
  #L4176e0.  if v12 == 0 then goto L4176e6;
  #L4176e4.  return @kind void;
  #L4176e6.  if v14 == 0 then goto L4176ec;
  #L4176ea.  goto L4176fa;
  #L4176ec.  call `onNext`(v2, v13) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4176f2.  v11:= 1L;
  #L4176f6.  v9:= v9 + v11 @kind long;
  #L4176f8.  goto L4176ba;
  #L4176fa.  if v11 != 0 then goto L417718;
  #L4176fe.  v11:= v15.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.f` @type ^`boolean` @kind boolean;
  #L417702.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L417708.  v12:= temp;
  #L41770a.  call temp:= `e`(v15, v11, v12, v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;.e:(ZZLorg/reactivestreams/Subscriber;Z)Z` @kind virtual;
  #L417710.  v11:= temp;
  #L417712.  if v11 == 0 then goto L417718;
  #L417716.  return @kind void;
  #L417718.  v11:= lcmp(v9, v7);
  #L41771c.  if v11 == 0 then goto L41774c;
  #L417720.  v7:= 9223372036854775807L;
  #L41772a.  v11:= lcmp(v5, v7);
  #L41772e.  if v11 == 0 then goto L41773e;
  #L417732.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L417736.  v6:= -v9 @kind long;
  #L417738.  call temp:= `addAndGet`(v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L41773e.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.c` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` @kind object;
  #L417742.  v5:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L417746.  call `request`(v5, v9) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L41774c.  v4:= -v4 @kind int;
  #L41774e.  call temp:= `addAndGet`(v15, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L417754.  v4:= temp;
  #L417756.  if v4 != 0 then goto L41775c;
  #L41775a.  return @kind void;
  #L41775c.  if v2 != 0 then goto L4176a4;
  #L417760.  v2:= v15.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L417764.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41776a.  v2:= temp @kind object;
  #L41776c.  v2:= (`org.reactivestreams.Subscriber`) v2 @kind object;
  #L417770.  goto L4176a4;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41744c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L417450.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L417456.  v0:= temp;
  #L417458.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L417784.  v0:= 1I;
  #L417786.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.f` @type ^`boolean` := v0 @kind boolean;
  #L41778a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;.drain:()V` @kind virtual;
  #L417790.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$b` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4177a4.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.g` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4177a8.  v1:= 1I;
  #L4177aa.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.f` @type ^`boolean` := v1 @kind boolean;
  #L4177ae.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;.drain:()V` @kind virtual;
  #L4177b4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4177c8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4177cc.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4177d2.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;.drain:()V` @kind virtual;
  #L4177d8.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L417490.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L417494.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L41749a.  v0:= temp @kind object;
  #L41749c.  if v0 == 0 then goto L4174ae;
  #L4174a0.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.l` @type ^`int`;
  #L4174a4.  v1:= v1 + 1;
  #L4174a8.  v4.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.l` @type ^`int` := v1;
  #L4174ac.  return v0 @kind object;
  #L4174ae.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.l` @type ^`int`;
  #L4174b2.  if v0 == 0 then goto L4174cc;
  #L4174b6.  v1:= 0I;
  #L4174b8.  v4.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.l` @type ^`int` := v1;
  #L4174bc.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.c` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` @kind object;
  #L4174c0.  v1:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4174c4.  v2:= (`long`) v0 @kind i2l;
  #L4174c6.  call `request`(v1, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4174cc.  v0:= 0I;
  #L4174ce.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4177ec.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4177f2.  v0:= temp;
  #L4177f4.  if v0 == 0 then goto L417808;
  #L4177f8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4177fc.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L417802.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;.drain:()V` @kind virtual;
  #L417808.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$b` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41746c.  v0:= 2I;
  #L41746e.  v2:= v2 ^& v0 @kind int;
  #L417470.  if v2 == 0 then goto L41747c;
  #L417474.  v2:= 1I;
  #L417476.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.k` @type ^`boolean` := v2 @kind boolean;
  #L41747a.  return v0;
  #L41747c.  v2:= 0I;
  #L41747e.  return v2;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$b` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L41781c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L417820.  v1:= 0I;
  #L417822.  v2:= 1I;
  #L417824.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L41782a.  v0:= temp;
  #L41782c.  if v0 == 0 then goto L417848;
  #L417830.  call `onSubscribe`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L417836.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41783a.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L417840.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;.drain:()V` @kind virtual;
  #L417846.  goto L41785c;
  #L417848.  v0:= new `java.lang.IllegalStateException`;
  #L41784c.  v1:= "Only one Subscriber allowed!" @kind object;
  #L417850.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L417856.  call `error`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L41785c.  return @kind void;
}
