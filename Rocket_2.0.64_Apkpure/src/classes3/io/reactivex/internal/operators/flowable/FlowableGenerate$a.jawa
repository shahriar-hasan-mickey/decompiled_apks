record `io.reactivex.internal.operators.flowable.FlowableGenerate$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.Emitter` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableGenerate$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.flowable.FlowableGenerate$a.b` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.flowable.FlowableGenerate$a.c` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableGenerate$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGenerate$a.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGenerate$a.f` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGenerate$a.g` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableGenerate$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableGenerate$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/BiFunction;Lio/reactivex/functions/Consumer;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L416a2c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L416a32.  v0.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L416a36.  v0.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.b` @type ^`io.reactivex.functions.BiFunction` := v2 @kind object;
  #L416a3a.  v0.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.c` @type ^`io.reactivex.functions.Consumer` := v3 @kind object;
  #L416a3e.  v0.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` := v4 @kind object;
  #L416a42.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableGenerate$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$a;.a:(Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L416a9c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.c` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L416aa0.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L416aa6.  goto L416ab6;
  #L416aa8.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L416aaa.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L416ab0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L416ab6.  return @kind void;
  catch `java.lang.Throwable` @[L416a9c..L416aa6] goto L416aa8;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableGenerate$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L416a54.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.e` @type ^`boolean` @kind boolean;
  #L416a58.  if v0 != 0 then goto L416a8a;
  #L416a5c.  v0:= 1I;
  #L416a5e.  v5.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.e` @type ^`boolean` := v0 @kind boolean;
  #L416a62.  v0:= 1L;
  #L416a66.  call temp:= `add`(v5, v0) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L416a6c.  v0:= temp @kind wide;
  #L416a6e.  v2:= 0L;
  #L416a72.  v4:= lcmp(v0, v2);
  #L416a76.  if v4 != 0 then goto L416a8a;
  #L416a7a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` @kind object;
  #L416a7e.  v1:= 0I;
  #L416a80.  v5.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` := v1 @kind object;
  #L416a84.  call `a`(v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$a;.a:(Ljava/lang/Object;)V` @kind direct;
  #L416a8a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableGenerate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L416ad4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.f` @type ^`boolean` @kind boolean;
  #L416ad8.  if v0 != 0 then goto L416aec;
  #L416adc.  v0:= 1I;
  #L416ade.  v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.f` @type ^`boolean` := v0 @kind boolean;
  #L416ae2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L416ae6.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L416aec.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableGenerate$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L416b00.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.f` @type ^`boolean` @kind boolean;
  #L416b04.  if v0 == 0 then goto L416b10;
  #L416b08.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L416b0e.  goto L416b32;
  #L416b10.  if v2 != 0 then goto L416b22;
  #L416b14.  v2:= new `java.lang.NullPointerException`;
  #L416b18.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L416b1c.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L416b22.  v0:= 1I;
  #L416b24.  v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.f` @type ^`boolean` := v0 @kind boolean;
  #L416b28.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L416b2c.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L416b32.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableGenerate$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L416b44.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.f` @type ^`boolean` @kind boolean;
  #L416b48.  if v0 != 0 then goto L416b94;
  #L416b4c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.g` @type ^`boolean` @kind boolean;
  #L416b50.  if v0 == 0 then goto L416b6a;
  #L416b54.  v2:= new `java.lang.IllegalStateException`;
  #L416b58.  v0:= "onNext already called in this generate turn" @kind object;
  #L416b5c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L416b62.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L416b68.  goto L416b94;
  #L416b6a.  if v2 != 0 then goto L416b84;
  #L416b6e.  v2:= new `java.lang.NullPointerException`;
  #L416b72.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L416b76.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L416b7c.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L416b82.  goto L416b94;
  #L416b84.  v0:= 1I;
  #L416b86.  v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.g` @type ^`boolean` := v0 @kind boolean;
  #L416b8a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L416b8e.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L416b94.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableGenerate$a` v9 @kind this, `long` v10 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L416ba8.  call temp:= `validate`(v10) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L416bae.  v0:= temp;
  #L416bb0.  if v0 != 0 then goto L416bb6;
  #L416bb4.  return @kind void;
  #L416bb6.  call temp:= `add`(v9, v10) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L416bbc.  v0:= temp @kind wide;
  #L416bbe.  v2:= 0L;
  #L416bc2.  v4:= lcmp(v0, v2);
  #L416bc6.  if v4 == 0 then goto L416bcc;
  #L416bca.  return @kind void;
  #L416bcc.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` @kind object;
  #L416bd0.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.b` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L416bd4.  v4:= v2 @kind wide;
  #L416bd6.  v6:= lcmp(v4, v10);
  #L416bda.  if v6 == 0 then goto L416c42;
  #L416bde.  v6:= v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.e` @type ^`boolean` @kind boolean;
  #L416be2.  v7:= 0I;
  #L416be4.  if v6 == 0 then goto L416bf4;
  #L416be8.  v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` := v7 @kind object;
  #L416bec.  call `a`(v9, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$a;.a:(Ljava/lang/Object;)V` @kind direct;
  #L416bf2.  return @kind void;
  #L416bf4.  v6:= 0I;
  #L416bf6.  v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.g` @type ^`boolean` := v6 @kind boolean;
  #L416bfa.  v6:= 1I;
  #L416bfc.  call temp:= `apply`(v1, v0, v9) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L416c02.  v0:= temp @kind object;
  #L416c04.  v8:= v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.f` @type ^`boolean` @kind boolean;
  #L416c08.  if v8 == 0 then goto L416c1c;
  #L416c0c.  v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.e` @type ^`boolean` := v6 @kind boolean;
  #L416c10.  v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` := v7 @kind object;
  #L416c14.  call `a`(v9, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$a;.a:(Ljava/lang/Object;)V` @kind direct;
  #L416c1a.  return @kind void;
  #L416c1c.  v6:= 1L;
  #L416c20.  v4:= v4 + v6 @kind long;
  #L416c22.  goto L416bd6;
  #L416c24.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L416c26.  call `throwIfFatal`(v10) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L416c2c.  v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.e` @type ^`boolean` := v6 @kind boolean;
  #L416c30.  v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` := v7 @kind object;
  #L416c34.  call `onError`(v9, v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L416c3a.  call `a`(v9, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$a;.a:(Ljava/lang/Object;)V` @kind direct;
  #L416c40.  return @kind void;
  #L416c42.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L416c48.  v10:= temp @kind wide;
  #L416c4a.  v6:= lcmp(v4, v10);
  #L416c4e.  if v6 != 0 then goto L416bd6;
  #L416c52.  v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` := v0 @kind object;
  #L416c56.  v10:= -v4 @kind long;
  #L416c58.  call temp:= `addAndGet`(v9, v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L416c5e.  v10:= temp @kind wide;
  #L416c60.  v4:= lcmp(v10, v2);
  #L416c64.  if v4 != 0 then goto L416bd4;
  #L416c68.  return @kind void;
  catch `java.lang.Throwable` @[L416bfc..L416c04] goto L416c24;
}
