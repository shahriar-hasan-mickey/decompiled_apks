record `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.a` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.e` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.f` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.Scheduler$Worker` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/Scheduler$Worker;Lorg/reactivestreams/Publisher;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L422c24.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L422c2a.  v0.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L422c2e.  v0.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.b` @type ^`io.reactivex.Scheduler$Worker` := v2 @kind object;
  #L422c32.  v0.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.f` @type ^`org.reactivestreams.Publisher` := v3 @kind object;
  #L422c36.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L422c3a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L422c40.  v0.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L422c44.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L422c48.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L422c4e.  v0.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L422c52.  v0.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.e` @type ^`boolean` := v4 @kind boolean;
  #L422c56.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a` v2 @kind this, `long` v3 , `org.reactivestreams.Subscription` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$a;.a:(JLorg/reactivestreams/Subscription;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L422db4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.e` @type ^`boolean` @kind boolean;
  #L422db8.  if v0 != 0 then goto L422de8;
  #L422dbc.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L422dc2.  v0:= temp @kind object;
  #L422dc4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L422dca.  v1:= temp @kind object;
  #L422dcc.  if v0 != v1 then goto L422dd2;
  #L422dd0.  goto L422de8;
  #L422dd2.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.b` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L422dd6.  v1:= new `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a$a`;
  #L422dda.  call `<init>`(v1, v5, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$a$a;.<init>:(Lorg/reactivestreams/Subscription;J)V` @kind direct;
  #L422de0.  call temp:= `schedule`(v0, v1) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L422de6.  goto L422dee;
  #L422de8.  call `request`(v5, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L422dee.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L422c68.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L422c6c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L422c72.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.b` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L422c76.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L422c7c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L422c90.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L422c94.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L422c9a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.b` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L422c9e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L422ca4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L422cb8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L422cbc.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L422cc2.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.b` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L422cc6.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L422ccc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L422ce0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L422ce4.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L422cea.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a` v5 @kind this, `org.reactivestreams.Subscription` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L422cfc.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L422d00.  call temp:= `setOnce`(v0, v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L422d06.  v0:= temp;
  #L422d08.  if v0 == 0 then goto L422d2a;
  #L422d0c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L422d10.  v1:= 0L;
  #L422d14.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L422d1a.  v3:= temp @kind wide;
  #L422d1c.  v0:= lcmp(v3, v1);
  #L422d20.  if v0 == 0 then goto L422d2a;
  #L422d24.  call `a`(v5, v3, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$a;.a:(JLorg/reactivestreams/Subscription;)V` @kind virtual;
  #L422d2a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L422d3c.  call temp:= `validate`(v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L422d42.  v0:= temp;
  #L422d44.  if v0 == 0 then goto L422da0;
  #L422d48.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L422d4c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L422d52.  v0:= temp @kind object;
  #L422d54.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L422d58.  if v0 == 0 then goto L422d64;
  #L422d5c.  call `a`(v4, v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$a;.a:(JLorg/reactivestreams/Subscription;)V` @kind virtual;
  #L422d62.  goto L422da0;
  #L422d64.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L422d68.  call temp:= `add`(v0, v5) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L422d6e.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L422d72.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L422d78.  v5:= temp @kind object;
  #L422d7a.  v5:= (`org.reactivestreams.Subscription`) v5 @kind object;
  #L422d7e.  if v5 == 0 then goto L422da0;
  #L422d82.  v6:= v4.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L422d86.  v0:= 0L;
  #L422d8a.  call temp:= `getAndSet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L422d90.  v2:= temp @kind wide;
  #L422d92.  v6:= lcmp(v2, v0);
  #L422d96.  if v6 == 0 then goto L422da0;
  #L422d9a.  call `a`(v4, v2, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$a;.a:(JLorg/reactivestreams/Subscription;)V` @kind virtual;
  #L422da0.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L422e00.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L422e06.  v0:= temp @kind object;
  #L422e08.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L422e0e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.f` @type ^`org.reactivestreams.Publisher` @kind object;
  #L422e12.  v1:= 0I;
  #L422e14.  v2.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.f` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L422e18.  call `subscribe`(v0, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L422e1e.  return @kind void;
}
