record `io.reactivex.internal.operators.flowable.FlowableBufferTimed$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.d` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.e` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.f` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.g` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.h` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.i` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `long` v4 , `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object, `io.reactivex.Scheduler$Worker` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/Callable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L40ca2c.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L40ca30.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L40ca36.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L40ca3c.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.c` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L40ca40.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.d` @type ^`long` := v4 @kind wide;
  #L40ca44.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.e` @type ^`long` := v6 @kind wide;
  #L40ca48.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.f` @type ^`java.util.concurrent.TimeUnit` := v8 @kind object;
  #L40ca4c.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.Scheduler$Worker` := v9 @kind object;
  #L40ca50.  v2:= new `java.util.LinkedList`;
  #L40ca54.  call `<init>`(v2) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L40ca5a.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.h` @type ^`java.util.List` := v2 @kind object;
  #L40ca5e.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c` v0 @kind object, `java.lang.Object` v1 @kind object, `boolean` v2 , `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.b:(Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L40ca70.  call `fastPathOrderedEmitMax`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastPathOrderedEmitMax:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L40ca76.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L40ca10.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40ca16.  v1:= 1I;
  #L40ca18.  return v1;
}
procedure `boolean` `accept`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L40c9f0.  v2:= (`java.util.Collection`) v2 @kind object;
  #L40c9f4.  call temp:= `a`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @kind virtual;
  #L40c9fa.  v1:= temp;
  #L40c9fc.  return v1;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.c:()V` @AccessFlag  {
    temp;
    v0;

  #L40cab4.  @monitorenter v1
  #L40cab6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.h` @type ^`java.util.List` @kind object;
  #L40caba.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L40cac0.  @monitorexit v1
  #L40cac2.  return @kind void;
  #L40cac4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40cac6.  @monitorexit v1
  #L40cac8.  throw v0;
  catch `java.lang.Throwable` @[L40cab6..L40cac8] goto L40cac4;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40ca88.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.c:()V` @kind virtual;
  #L40ca8e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40ca92.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40ca98.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40ca9c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L40caa2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40cae8.  @monitorenter v4
  #L40caea.  v0:= new `java.util.ArrayList`;
  #L40caee.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.h` @type ^`java.util.List` @kind object;
  #L40caf2.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L40caf8.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.h` @type ^`java.util.List` @kind object;
  #L40cafc.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L40cb02.  @monitorexit v4
  #L40cb04.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L40cb0a.  v0:= temp @kind object;
  #L40cb0c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40cb12.  v1:= temp;
  #L40cb14.  if v1 == 0 then goto L40cb30;
  #L40cb18.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40cb1e.  v1:= temp @kind object;
  #L40cb20.  v1:= (`java.util.Collection`) v1 @kind object;
  #L40cb24.  v2:= v4.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L40cb28.  call temp:= `offer`(v2, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L40cb2e.  goto L40cb0c;
  #L40cb30.  v0:= 1I;
  #L40cb32.  v4.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40cb36.  call temp:= `enter`(v4) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L40cb3c.  v0:= temp;
  #L40cb3e.  if v0 == 0 then goto L40cb56;
  #L40cb42.  v0:= v4.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L40cb46.  v1:= v4.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40cb4a.  v2:= 0I;
  #L40cb4c.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40cb50.  call `drainMaxLoop`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/QueueDrain;)V` @kind static;
  #L40cb56.  return @kind void;
  #L40cb58.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40cb5a.  @monitorexit v4
  #L40cb5c.  throw v0;
  catch `java.lang.Throwable` @[L40caea..L40cb04] goto L40cb58;
  catch `java.lang.Throwable` @[L40cb5a..L40cb5c] goto L40cb58;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40cb84.  v0:= 1I;
  #L40cb86.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40cb8a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40cb8e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L40cb94.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.c:()V` @kind virtual;
  #L40cb9a.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40cb9e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40cba4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40cbb8.  @monitorenter v2
  #L40cbba.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.h` @type ^`java.util.List` @kind object;
  #L40cbbe.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L40cbc4.  v0:= temp @kind object;
  #L40cbc6.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40cbcc.  v1:= temp;
  #L40cbce.  if v1 == 0 then goto L40cbe6;
  #L40cbd2.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40cbd8.  v1:= temp @kind object;
  #L40cbda.  v1:= (`java.util.Collection`) v1 @kind object;
  #L40cbde.  call temp:= `add`(v1, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L40cbe4.  goto L40cbc6;
  #L40cbe6.  @monitorexit v2
  #L40cbe8.  return @kind void;
  #L40cbea.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40cbec.  @monitorexit v2
  #L40cbee.  throw v3;
  catch `java.lang.Throwable` @[L40cbba..L40cbee] goto L40cbea;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c` v10 @kind this, `org.reactivestreams.Subscription` v11 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L40cc0c.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40cc10.  call temp:= `validate`(v0, v11) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40cc16.  v0:= temp;
  #L40cc18.  if v0 != 0 then goto L40cc1e;
  #L40cc1c.  return @kind void;
  #L40cc1e.  v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.i` @type ^`org.reactivestreams.Subscription` := v11 @kind object;
  #L40cc22.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L40cc26.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L40cc2c.  v0:= temp @kind object;
  #L40cc2e.  v1:= "The supplied buffer is null" @kind object;
  #L40cc32.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40cc38.  v0:= temp @kind object;
  #L40cc3a.  v0:= (`java.util.Collection`) v0 @kind object;
  #L40cc3e.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.h` @type ^`java.util.List` @kind object;
  #L40cc42.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L40cc48.  v1:= v10.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40cc4c.  call `onSubscribe`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40cc52.  v1:= 9223372036854775807L;
  #L40cc5c.  call `request`(v11, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40cc62.  v3:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40cc66.  v7:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.e` @type ^`long` @kind wide;
  #L40cc6a.  v9:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L40cc6e.  v4:= v10 @kind object;
  #L40cc70.  v5:= v7 @kind wide;
  #L40cc72.  call temp:= `schedulePeriodically`(v3, v4, v5, v7, v9) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L40cc78.  v11:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40cc7c.  v1:= new `io.reactivex.internal.operators.flowable.FlowableBufferTimed$c$a`;
  #L40cc80.  call `<init>`(v1, v10, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;Ljava/util/Collection;)V` @kind direct;
  #L40cc86.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.d` @type ^`long` @kind wide;
  #L40cc8a.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L40cc8e.  call temp:= `schedule`(v11, v1, v2, v0) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L40cc94.  return @kind void;
  #L40cc96.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40cc98.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40cc9e.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40cca2.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L40cca8.  call `cancel`(v11) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40ccae.  v11:= v10.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40ccb2.  call `error`(v0, v11) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L40ccb8.  return @kind void;
  catch `java.lang.Throwable` @[L40cc22..L40cc3e] goto L40cc96;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L40ccd8.  call `requested`(v0, v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @kind virtual;
  #L40ccde.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40ccf0.  v0:= v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L40ccf4.  if v0 == 0 then goto L40ccfa;
  #L40ccf8.  return @kind void;
  #L40ccfa.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L40ccfe.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L40cd04.  v0:= temp @kind object;
  #L40cd06.  v1:= "The supplied buffer is null" @kind object;
  #L40cd0a.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40cd10.  v0:= temp @kind object;
  #L40cd12.  v0:= (`java.util.Collection`) v0 @kind object;
  #L40cd16.  @monitorenter v5
  #L40cd18.  v1:= v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L40cd1c.  if v1 == 0 then goto L40cd24;
  #L40cd20.  @monitorexit v5
  #L40cd22.  return @kind void;
  #L40cd24.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.h` @type ^`java.util.List` @kind object;
  #L40cd28.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L40cd2e.  @monitorexit v5
  #L40cd30.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40cd34.  v2:= new `io.reactivex.internal.operators.flowable.FlowableBufferTimed$c$a`;
  #L40cd38.  call `<init>`(v2, v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;Ljava/util/Collection;)V` @kind direct;
  #L40cd3e.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.d` @type ^`long` @kind wide;
  #L40cd42.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L40cd46.  call temp:= `schedule`(v1, v2, v3, v0) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L40cd4c.  return @kind void;
  #L40cd4e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40cd50.  @monitorexit v5
  #L40cd52.  throw v0;
  #L40cd54.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40cd56.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40cd5c.  call `cancel`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.cancel:()V` @kind virtual;
  #L40cd62.  v1:= v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40cd66.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40cd6c.  return @kind void;
  catch `java.lang.Throwable` @[L40ccfa..L40cd16] goto L40cd54;
  catch `java.lang.Throwable` @[L40cd18..L40cd30] goto L40cd4e;
  catch `java.lang.Throwable` @[L40cd50..L40cd52] goto L40cd4e;
}
