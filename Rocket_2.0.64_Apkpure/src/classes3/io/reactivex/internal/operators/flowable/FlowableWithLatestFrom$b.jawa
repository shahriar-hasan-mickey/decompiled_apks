record `io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.e` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L428c3c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L428c42.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L428c46.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L428c4c.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L428c50.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L428c54.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L428c5a.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L428c5e.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L428c62.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L428c68.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L428c6c.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L428c70.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.b` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L428c74.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$b;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L428d88.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L428d8c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L428d92.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L428d96.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L428d9c.  return @kind void;
}
procedure `boolean` `b`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$b;.b:(Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L428c1c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L428c20.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L428c26.  v2:= temp;
  #L428c28.  return v2;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L428c88.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L428c8c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L428c92.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L428c96.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L428c9c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L428cb0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L428cb4.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L428cba.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L428cbe.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L428cc4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L428cd8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L428cdc.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L428ce2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L428ce6.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L428cec.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L428d00.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L428d06.  v0:= temp @kind object;
  #L428d08.  if v0 == 0 then goto L428d48;
  #L428d0c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.b` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L428d10.  call temp:= `apply`(v1, v3, v0) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L428d16.  v3:= temp @kind object;
  #L428d18.  v0:= "The combiner returned a null value" @kind object;
  #L428d1c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L428d22.  v3:= temp @kind object;
  #L428d24.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L428d28.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L428d2e.  goto L428d48;
  #L428d30.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L428d32.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L428d38.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$b;.cancel:()V` @kind virtual;
  #L428d3e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L428d42.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L428d48.  return @kind void;
  catch `java.lang.Throwable` @[L428d0c..L428d24] goto L428d30;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L428d68.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L428d6c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L428d70.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L428d76.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L428db0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L428db4.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L428db8.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L428dbe.  return @kind void;
}
