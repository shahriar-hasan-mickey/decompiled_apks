record `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a` @kind class @AccessFlag FINAL extends `io.reactivex.Flowable` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.g` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.h` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.i` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.j` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.k` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.l` @AccessFlag ;
}
global `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[] `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.m` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[] `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.n` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L41c820.  v0:= 0I;
  #L41c822.  v1:= new `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[v0];
  #L41c826.  `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.m` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[] := v1 @kind object;
  #L41c82a.  v0:= new `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[v0];
  #L41c82e.  `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.n` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[] := v0 @kind object;
  #L41c832.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a` v1 @kind this, `int` v2 , `boolean` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.<init>:(IZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L41c844.  call `<init>`(v1) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L41c84a.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.d` @type ^`int` := v2;
  #L41c84e.  v0:= v2 ^> 2;
  #L41c852.  v2:= v2 - v0 @kind int;
  #L41c854.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.e` @type ^`int` := v2;
  #L41c858.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.f` @type ^`boolean` := v3 @kind boolean;
  #L41c85c.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L41c860.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L41c866.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L41c86a.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L41c86e.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L41c874.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L41c878.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L41c87c.  v3:= `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.m` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[] @kind object;
  #L41c880.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L41c886.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L41c88a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41c8f4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41c8f8.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L41c8fe.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L41c902.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L41c908.  v0:= temp;
  #L41c90a.  if v0 != 0 then goto L41c91c;
  #L41c90e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L41c912.  if v0 == 0 then goto L41c91c;
  #L41c916.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L41c91c.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a` v4 @kind this, `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.e:(Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$b;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41c7a0.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41c7a4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41c7aa.  v0:= temp @kind object;
  #L41c7ac.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[]) v0 @kind object;
  #L41c7b0.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.n` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[] @kind object;
  #L41c7b4.  v2:= 0I;
  #L41c7b6.  if v0 != v1 then goto L41c7bc;
  #L41c7ba.  return v2;
  #L41c7bc.  v1:= length @variable v0;
  #L41c7be.  v3:= v1 + 1;
  #L41c7c2.  v3:= new `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[v3];
  #L41c7c6.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L41c7cc.  v3[v1]:= v5 @kind object;
  #L41c7d0.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41c7d4.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L41c7da.  v0:= temp;
  #L41c7dc.  if v0 == 0 then goto L41c7a0;
  #L41c7e0.  v5:= 1I;
  #L41c7e2.  return v5;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a` v9 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L41c89c.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41c8a0.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.n` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[] @kind object;
  #L41c8a4.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L41c8aa.  v0:= temp @kind object;
  #L41c8ac.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[]) v0 @kind object;
  #L41c8b0.  v1:= length @variable v0;
  #L41c8b2.  v2:= 0I;
  #L41c8b4.  if v2 >= v1 then goto L41c8e0;
  #L41c8b8.  v3:= v0[v2] @kind object;
  #L41c8bc.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L41c8c2.  v4:= temp @kind wide;
  #L41c8c4.  v6:= -9223372036854775808L;
  #L41c8c8.  v8:= lcmp(v4, v6);
  #L41c8cc.  if v8 == 0 then goto L41c8da;
  #L41c8d0.  v3:= v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41c8d4.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41c8da.  v2:= v2 + 1;
  #L41c8de.  goto L41c8b4;
  #L41c8e0.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a` v22 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;

  #L41c930.  v1:= v22 @kind object;
  #L41c934.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L41c938.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L41c93e.  v0:= temp;
  #L41c940.  if v0 == 0 then goto L41c946;
  #L41c944.  return @kind void;
  #L41c946.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L41c94a.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.l` @type ^`int`;
  #L41c94e.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.e` @type ^`int`;
  #L41c952.  v4:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.i` @type ^`int`;
  #L41c956.  v6:= 1I;
  #L41c958.  if v4 == v6 then goto L41c960;
  #L41c95c.  v4:= 1I;
  #L41c95e.  goto L41c962;
  #L41c960.  v4:= 0I;
  #L41c962.  v7:= 1I;
  #L41c964.  v8:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41c968.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41c96e.  v8:= temp @kind object;
  #L41c970.  v8:= (`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[]) v8 @kind object;
  #L41c974.  v9:= length @variable v8;
  #L41c976.  if v0 == 0 then goto L41cb2c;
  #L41c97a.  if v9 == 0 then goto L41cb2c;
  #L41c97e.  v9:= 9223372036854775807L;
  #L41c988.  v11:= length @variable v8;
  #L41c98a.  v12:= 0I;
  #L41c98c.  v13:= -9223372036854775808L;
  #L41c990.  if v12 >= v11 then goto L41c9b8;
  #L41c994.  v15:= v8[v12] @kind object;
  #L41c998.  call temp:= `get`(v15) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L41c99e.  v15:= temp @kind wide;
  #L41c9a0.  v17:= lcmp(v15, v13);
  #L41c9a4.  if v17 == 0 then goto L41c9b2;
  #L41c9a8.  v13:= lcmp(v9, v15);
  #L41c9ac.  if v13 <= 0 then goto L41c9b2;
  #L41c9b0.  v9:= v15 @kind wide;
  #L41c9b2.  v12:= v12 + 1;
  #L41c9b6.  goto L41c98c;
  #L41c9b8.  v11:= 0L;
  #L41c9bc.  v15:= lcmp(v11, v9);
  #L41c9c0.  if v15 == 0 then goto L41cab4;
  #L41c9c4.  call temp:= `isDisposed`(v22) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.isDisposed:()Z` @kind virtual;
  #L41c9ca.  v16:= temp;
  #L41c9cc.  if v16 == 0 then goto L41c9d8;
  #L41c9d0.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L41c9d6.  return @kind void;
  #L41c9d8.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` @kind boolean;
  #L41c9dc.  if v5 == 0 then goto L41c9f8;
  #L41c9e0.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.f` @type ^`boolean` @kind boolean;
  #L41c9e4.  if v6 != 0 then goto L41c9f8;
  #L41c9e8.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.k` @type ^`java.lang.Throwable` @kind object;
  #L41c9ec.  if v6 == 0 then goto L41c9f8;
  #L41c9f0.  call `h`(v1, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.h:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41c9f6.  return @kind void;
  #L41c9f8.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L41c9fe.  v6:= temp @kind object;
  #L41ca00.  if v6 != 0 then goto L41ca0a;
  #L41ca04.  v18:= 1I;
  #L41ca08.  goto L41ca0e;
  #L41ca0a.  v18:= 0I;
  #L41ca0e.  if v5 == 0 then goto L41ca2e;
  #L41ca12.  if v18 == 0 then goto L41ca2e;
  #L41ca16.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.k` @type ^`java.lang.Throwable` @kind object;
  #L41ca1a.  if v0 == 0 then goto L41ca26;
  #L41ca1e.  call `h`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.h:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41ca24.  goto L41ca2c;
  #L41ca26.  call `f`(v22) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.f:()V` @kind virtual;
  #L41ca2c.  return @kind void;
  #L41ca2e.  if v18 == 0 then goto L41ca34;
  #L41ca32.  goto L41cab4;
  #L41ca34.  v5:= length @variable v8;
  #L41ca36.  v15:= 0I;
  #L41ca38.  if v15 >= v5 then goto L41ca68;
  #L41ca3c.  v18:= v5;
  #L41ca40.  v5:= v8[v15] @kind object;
  #L41ca44.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L41ca4a.  v19:= temp @kind wide;
  #L41ca4c.  v21:= lcmp(v19, v13);
  #L41ca50.  if v21 == 0 then goto L41ca5e;
  #L41ca54.  v5:= v5.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41ca58.  call `onNext`(v5, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41ca5e.  v15:= v15 + 1;
  #L41ca62.  v5:= v18;
  #L41ca66.  goto L41ca38;
  #L41ca68.  v5:= 1L;
  #L41ca6c.  v11:= v11 + v5 @kind long;
  #L41ca6e.  if v4 == 0 then goto L41ca94;
  #L41ca72.  v2:= v2 + 1;
  #L41ca76.  if v2 != v3 then goto L41ca94;
  #L41ca7a.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41ca7e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41ca84.  v2:= temp @kind object;
  #L41ca86.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L41ca8a.  v5:= (`long`) v3 @kind i2l;
  #L41ca8c.  call `request`(v2, v5) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L41ca92.  v2:= 0I;
  #L41ca94.  v6:= 1I;
  #L41ca96.  goto L41c9bc;
  #L41ca98.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41ca9a.  v2:= v0 @kind object;
  #L41ca9c.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41caa2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41caa6.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L41caac.  call `h`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.h:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41cab2.  return @kind void;
  #L41cab4.  if v15 != 0 then goto L41cb14;
  #L41cab8.  call temp:= `isDisposed`(v22) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.isDisposed:()Z` @kind virtual;
  #L41cabe.  v5:= temp;
  #L41cac0.  if v5 == 0 then goto L41cacc;
  #L41cac4.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L41caca.  return @kind void;
  #L41cacc.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` @kind boolean;
  #L41cad0.  if v5 == 0 then goto L41caec;
  #L41cad4.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.f` @type ^`boolean` @kind boolean;
  #L41cad8.  if v6 != 0 then goto L41caec;
  #L41cadc.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.k` @type ^`java.lang.Throwable` @kind object;
  #L41cae0.  if v6 == 0 then goto L41caec;
  #L41cae4.  call `h`(v1, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.h:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41caea.  return @kind void;
  #L41caec.  if v5 == 0 then goto L41cb14;
  #L41caf0.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L41caf6.  v5:= temp;
  #L41caf8.  if v5 == 0 then goto L41cb14;
  #L41cafc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.k` @type ^`java.lang.Throwable` @kind object;
  #L41cb00.  if v0 == 0 then goto L41cb0c;
  #L41cb04.  call `h`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.h:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41cb0a.  goto L41cb12;
  #L41cb0c.  call `f`(v22) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.f:()V` @kind virtual;
  #L41cb12.  return @kind void;
  #L41cb14.  v5:= length @variable v8;
  #L41cb16.  v6:= 0I;
  #L41cb18.  if v6 >= v5 then goto L41cb2c;
  #L41cb1c.  v9:= v8[v6] @kind object;
  #L41cb20.  call temp:= `produced`(v9, v11) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L41cb26.  v6:= v6 + 1;
  #L41cb2a.  goto L41cb18;
  #L41cb2c.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.l` @type ^`int` := v2;
  #L41cb30.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L41cb34.  v6:= -v7 @kind int;
  #L41cb36.  call temp:= `addAndGet`(v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L41cb3c.  v7:= temp;
  #L41cb3e.  if v7 != 0 then goto L41cb44;
  #L41cb42.  return @kind void;
  #L41cb44.  if v0 != 0 then goto L41cb4c;
  #L41cb48.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L41cb4c.  v6:= 1I;
  #L41cb4e.  goto L41c964;
  catch `java.lang.Throwable` @[L41c9f8..L41ca00] goto L41ca98;
}
procedure `void` `h`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a` v9 @kind this, `java.lang.Throwable` v10 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.h:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L41cb70.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41cb74.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.n` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[] @kind object;
  #L41cb78.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L41cb7e.  v0:= temp @kind object;
  #L41cb80.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[]) v0 @kind object;
  #L41cb84.  v1:= length @variable v0;
  #L41cb86.  v2:= 0I;
  #L41cb88.  if v2 >= v1 then goto L41cbb4;
  #L41cb8c.  v3:= v0[v2] @kind object;
  #L41cb90.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L41cb96.  v4:= temp @kind wide;
  #L41cb98.  v6:= -9223372036854775808L;
  #L41cb9c.  v8:= lcmp(v4, v6);
  #L41cba0.  if v8 == 0 then goto L41cbae;
  #L41cba4.  v3:= v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41cba8.  call `onError`(v3, v10) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41cbae.  v2:= v2 + 1;
  #L41cbb2.  goto L41cb88;
  #L41cbb4.  return @kind void;
}
procedure `void` `i`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a` v6 @kind this, `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.i:(Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$b;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L41cd10.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41cd14.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41cd1a.  v0:= temp @kind object;
  #L41cd1c.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[]) v0 @kind object;
  #L41cd20.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.n` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[] @kind object;
  #L41cd24.  if v0 == v1 then goto L41cd90;
  #L41cd28.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.m` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[] @kind object;
  #L41cd2c.  if v0 != v1 then goto L41cd32;
  #L41cd30.  goto L41cd90;
  #L41cd32.  v1:= length @variable v0;
  #L41cd34.  v2:= -1I;
  #L41cd36.  v3:= 0I;
  #L41cd38.  v4:= 0I;
  #L41cd3a.  if v4 >= v1 then goto L41cd50;
  #L41cd3e.  v5:= v0[v4] @kind object;
  #L41cd42.  if v5 != v7 then goto L41cd4a;
  #L41cd46.  v2:= v4;
  #L41cd48.  goto L41cd50;
  #L41cd4a.  v4:= v4 + 1;
  #L41cd4e.  goto L41cd3a;
  #L41cd50.  if v2 >= 0 then goto L41cd56;
  #L41cd54.  return @kind void;
  #L41cd56.  v4:= 1I;
  #L41cd58.  if v1 != v4 then goto L41cd62;
  #L41cd5c.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.m` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[] @kind object;
  #L41cd60.  goto L41cd80;
  #L41cd62.  v5:= v1 + -1;
  #L41cd66.  v5:= new `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[v5];
  #L41cd6a.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L41cd70.  v3:= v2 + 1;
  #L41cd74.  v1:= v1 - v2 @kind int;
  #L41cd76.  v1:= v1 - v4 @kind int;
  #L41cd78.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L41cd7e.  v1:= v5 @kind object;
  #L41cd80.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41cd84.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L41cd8a.  v0:= temp;
  #L41cd8c.  if v0 == 0 then goto L41cd10;
  #L41cd90.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41c7f4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41c7f8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41c7fe.  v0:= temp @kind object;
  #L41c800.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L41c804.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.isCancelled:(Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L41c80a.  v0:= temp;
  #L41c80c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41cbc8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` @kind boolean;
  #L41cbcc.  if v0 != 0 then goto L41cbdc;
  #L41cbd0.  v0:= 1I;
  #L41cbd2.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` := v0 @kind boolean;
  #L41cbd6.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.g:()V` @kind virtual;
  #L41cbdc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41cbf0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` @kind boolean;
  #L41cbf4.  if v0 == 0 then goto L41cc00;
  #L41cbf8.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41cbfe.  return @kind void;
  #L41cc00.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.k` @type ^`java.lang.Throwable` := v2 @kind object;
  #L41cc04.  v2:= 1I;
  #L41cc06.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` := v2 @kind boolean;
  #L41cc0a.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.g:()V` @kind virtual;
  #L41cc10.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41cc24.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` @kind boolean;
  #L41cc28.  if v0 == 0 then goto L41cc2e;
  #L41cc2c.  return @kind void;
  #L41cc2e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.i` @type ^`int`;
  #L41cc32.  if v0 != 0 then goto L41cc6e;
  #L41cc36.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L41cc3a.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L41cc40.  v2:= temp;
  #L41cc42.  if v2 != 0 then goto L41cc6e;
  #L41cc46.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41cc4a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41cc50.  v2:= temp @kind object;
  #L41cc52.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L41cc56.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L41cc5c.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L41cc60.  call `<init>`(v2) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L41cc66.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41cc6c.  return @kind void;
  #L41cc6e.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.g:()V` @kind virtual;
  #L41cc74.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L41cc88.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41cc8c.  call temp:= `setOnce`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L41cc92.  v0:= temp;
  #L41cc94.  if v0 == 0 then goto L41ccfe;
  #L41cc98.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L41cc9c.  if v0 == 0 then goto L41cce4;
  #L41cca0.  v0:= v4 @kind object;
  #L41cca2.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L41cca6.  v1:= 3I;
  #L41cca8.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L41ccae.  v1:= temp;
  #L41ccb0.  v2:= 1I;
  #L41ccb2.  if v1 != v2 then goto L41ccca;
  #L41ccb6.  v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.i` @type ^`int` := v1;
  #L41ccba.  v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L41ccbe.  v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` := v2 @kind boolean;
  #L41ccc2.  call `g`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.g:()V` @kind virtual;
  #L41ccc8.  return @kind void;
  #L41ccca.  v2:= 2I;
  #L41cccc.  if v1 != v2 then goto L41cce4;
  #L41ccd0.  v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.i` @type ^`int` := v1;
  #L41ccd4.  v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L41ccd8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.d` @type ^`int`;
  #L41ccdc.  call `request`(v4, v0) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.request:(Lorg/reactivestreams/Subscription;I)V` @kind static;
  #L41cce2.  return @kind void;
  #L41cce4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.d` @type ^`int`;
  #L41cce8.  call temp:= `createQueue`(v0) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.createQueue:(I)Lio/reactivex/internal/fuseable/SimpleQueue;` @kind static;
  #L41ccee.  v0:= temp @kind object;
  #L41ccf0.  v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L41ccf4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.d` @type ^`int`;
  #L41ccf8.  call `request`(v4, v0) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.request:(Lorg/reactivestreams/Subscription;I)V` @kind static;
  #L41ccfe.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L41cda4.  v0:= new `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`;
  #L41cda8.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;)V` @kind direct;
  #L41cdae.  call `onSubscribe`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L41cdb4.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.e:(Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$b;)Z` @kind virtual;
  #L41cdba.  v1:= temp;
  #L41cdbc.  if v1 == 0 then goto L41cddc;
  #L41cdc0.  call temp:= `a`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$b;.a:()Z` @kind virtual;
  #L41cdc6.  v3:= temp;
  #L41cdc8.  if v3 == 0 then goto L41cdd4;
  #L41cdcc.  call `i`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.i:(Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$b;)V` @kind virtual;
  #L41cdd2.  return @kind void;
  #L41cdd4.  call `g`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.g:()V` @kind virtual;
  #L41cdda.  goto L41cdf2;
  #L41cddc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.k` @type ^`java.lang.Throwable` @kind object;
  #L41cde0.  if v0 == 0 then goto L41cdec;
  #L41cde4.  call `onError`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41cdea.  goto L41cdf2;
  #L41cdec.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41cdf2.  return @kind void;
}
