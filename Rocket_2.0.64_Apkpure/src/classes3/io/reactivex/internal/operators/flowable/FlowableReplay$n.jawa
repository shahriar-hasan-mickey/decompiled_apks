record `io.reactivex.internal.operators.flowable.FlowableReplay$n` @kind class @AccessFlag FINAL extends `java.util.ArrayList` @kind class, `io.reactivex.internal.operators.flowable.FlowableReplay$g` @kind interface {
  `int` `io.reactivex.internal.operators.flowable.FlowableReplay$n.a` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableReplay$n.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$n` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$n;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41f8e4.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L41f8ea.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableReplay$n` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$n;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L41f928.  call temp:= `error`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L41f92e.  v1:= temp @kind object;
  #L41f930.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L41f936.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$n.a` @type ^`int`;
  #L41f93a.  v1:= v1 + 1;
  #L41f93e.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$n.a` @type ^`int` := v1;
  #L41f942.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableReplay$n` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$n;.b:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L41f954.  call temp:= `next`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L41f95a.  v1:= temp @kind object;
  #L41f95c.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L41f962.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$n.a` @type ^`int`;
  #L41f966.  v1:= v1 + 1;
  #L41f96a.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$n.a` @type ^`int` := v1;
  #L41f96e.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableReplay$n` v14 @kind this, `io.reactivex.internal.operators.flowable.FlowableReplay$d` v15 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$n;.c:(Lio/reactivex/internal/operators/flowable/FlowableReplay$d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L41f980.  @monitorenter v15
  #L41f982.  v0:= v15.`io.reactivex.internal.operators.flowable.FlowableReplay$d.e` @type ^`boolean` @kind boolean;
  #L41f986.  v1:= 1I;
  #L41f988.  if v0 == 0 then goto L41f994;
  #L41f98c.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$d.f` @type ^`boolean` := v1 @kind boolean;
  #L41f990.  @monitorexit v15
  #L41f992.  return @kind void;
  #L41f994.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$d.e` @type ^`boolean` := v1 @kind boolean;
  #L41f998.  @monitorexit v15
  #L41f99a.  v0:= v15.`io.reactivex.internal.operators.flowable.FlowableReplay$d.b` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41f99e.  call temp:= `isDisposed`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.isDisposed:()Z` @kind virtual;
  #L41f9a4.  v1:= temp;
  #L41f9a6.  if v1 == 0 then goto L41f9ac;
  #L41f9aa.  return @kind void;
  #L41f9ac.  v1:= v14.`io.reactivex.internal.operators.flowable.FlowableReplay$n.a` @type ^`int`;
  #L41f9b0.  call temp:= `a`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.a:()Ljava/lang/Object;` @kind virtual;
  #L41f9b6.  v2:= temp @kind object;
  #L41f9b8.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L41f9bc.  v3:= 0I;
  #L41f9be.  if v2 == 0 then goto L41f9cc;
  #L41f9c2.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L41f9c8.  v2:= temp;
  #L41f9ca.  goto L41f9ce;
  #L41f9cc.  v2:= 0I;
  #L41f9ce.  call temp:= `get`(v15) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L41f9d4.  v4:= temp @kind wide;
  #L41f9d6.  v6:= 0L;
  #L41f9da.  v8:= v4 @kind wide;
  #L41f9dc.  v10:= v6 @kind wide;
  #L41f9de.  v12:= lcmp(v8, v6);
  #L41f9e2.  if v12 == 0 then goto L41fa4a;
  #L41f9e6.  if v2 >= v1 then goto L41fa4a;
  #L41f9ea.  call temp:= `get`(v14, v2) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L41f9f0.  v12:= temp @kind object;
  #L41f9f2.  call temp:= `accept`(v12, v0) @signature `Lio/reactivex/internal/util/NotificationLite;.accept:(Ljava/lang/Object;Lorg/reactivestreams/Subscriber;)Z` @kind static;
  #L41f9f8.  v12:= temp;
  #L41f9fa.  if v12 == 0 then goto L41fa00;
  #L41f9fe.  return @kind void;
  #L41fa00.  call temp:= `isDisposed`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.isDisposed:()Z` @kind virtual;
  #L41fa06.  v12:= temp;
  #L41fa08.  if v12 == 0 then goto L41fa0e;
  #L41fa0c.  return @kind void;
  #L41fa0e.  v2:= v2 + 1;
  #L41fa12.  v12:= 1L;
  #L41fa16.  v8:= v8 - v12 @kind long;
  #L41fa18.  v10:= v10 + v12 @kind long;
  #L41fa1a.  goto L41f9de;
  #L41fa1c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41fa1e.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41fa24.  call `dispose`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.dispose:()V` @kind virtual;
  #L41fa2a.  call temp:= `isError`(v12) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L41fa30.  v15:= temp;
  #L41fa32.  if v15 != 0 then goto L41fa48;
  #L41fa36.  call temp:= `isComplete`(v12) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L41fa3c.  v15:= temp;
  #L41fa3e.  if v15 != 0 then goto L41fa48;
  #L41fa42.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41fa48.  return @kind void;
  #L41fa4a.  v1:= lcmp(v10, v6);
  #L41fa4e.  if v1 == 0 then goto L41fa76;
  #L41fa52.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L41fa58.  v1:= temp @kind object;
  #L41fa5a.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$d.c` @type ^`java.lang.Object` := v1 @kind object;
  #L41fa5e.  v1:= 9223372036854775807L;
  #L41fa68.  v6:= lcmp(v4, v1);
  #L41fa6c.  if v6 == 0 then goto L41fa76;
  #L41fa70.  call temp:= `b`(v15, v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.b:(J)J` @kind virtual;
  #L41fa76.  @monitorenter v15
  #L41fa78.  v1:= v15.`io.reactivex.internal.operators.flowable.FlowableReplay$d.f` @type ^`boolean` @kind boolean;
  #L41fa7c.  if v1 != 0 then goto L41fa88;
  #L41fa80.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$d.e` @type ^`boolean` := v3 @kind boolean;
  #L41fa84.  @monitorexit v15
  #L41fa86.  return @kind void;
  #L41fa88.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$d.f` @type ^`boolean` := v3 @kind boolean;
  #L41fa8c.  @monitorexit v15
  #L41fa8e.  goto L41f99e;
  #L41fa90.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41fa92.  @monitorexit v15
  #L41fa94.  throw v0;
  #L41fa96.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41fa98.  @monitorexit v15
  #L41fa9a.  throw v0;
  catch `java.lang.Throwable` @[L41f982..L41f99a] goto L41fa96;
  catch `java.lang.Throwable` @[L41f9f2..L41f9fa] goto L41fa1c;
  catch `java.lang.Throwable` @[L41fa78..L41fa94] goto L41fa90;
  catch `java.lang.Throwable` @[L41fa98..L41fa9a] goto L41fa96;
}
procedure `void` `complete`(`io.reactivex.internal.operators.flowable.FlowableReplay$n` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$n;.complete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41f8fc.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L41f902.  v0:= temp @kind object;
  #L41f904.  call temp:= `add`(v1, v0) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L41f90a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay$n.a` @type ^`int`;
  #L41f90e.  v0:= v0 + 1;
  #L41f912.  v1.`io.reactivex.internal.operators.flowable.FlowableReplay$n.a` @type ^`int` := v0;
  #L41f916.  return @kind void;
}
