record `io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$a.b` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$a;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41b8ac.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L41b8b2.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L41b8b6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41b8c8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41b8cc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L41b8d2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41b8e4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$a.c` @type ^`boolean` @kind boolean;
  #L41b8e8.  if v0 == 0 then goto L41b8ee;
  #L41b8ec.  return @kind void;
  #L41b8ee.  v0:= 1I;
  #L41b8f0.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$a.c` @type ^`boolean` := v0 @kind boolean;
  #L41b8f4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41b8f8.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41b8fe.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41b910.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$a.c` @type ^`boolean` @kind boolean;
  #L41b914.  if v0 == 0 then goto L41b920;
  #L41b918.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41b91e.  return @kind void;
  #L41b920.  v0:= 1I;
  #L41b922.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$a.c` @type ^`boolean` := v0 @kind boolean;
  #L41b926.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41b92a.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41b930.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L41b944.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$a.c` @type ^`boolean` @kind boolean;
  #L41b948.  if v0 == 0 then goto L41b94e;
  #L41b94c.  return @kind void;
  #L41b94e.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L41b954.  v0:= temp @kind wide;
  #L41b956.  v2:= 0L;
  #L41b95a.  v4:= lcmp(v0, v2);
  #L41b95e.  if v4 == 0 then goto L41b978;
  #L41b962.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41b966.  call `onNext`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41b96c.  v0:= 1L;
  #L41b970.  call temp:= `produced`(v5, v0) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L41b976.  goto L41b98c;
  #L41b978.  v6:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L41b97c.  v0:= "could not emit value due to lack of requests" @kind object;
  #L41b980.  call `<init>`(v6, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41b986.  call `onError`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41b98c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41b9a0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41b9a4.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L41b9aa.  v0:= temp;
  #L41b9ac.  if v0 == 0 then goto L41b9ce;
  #L41b9b0.  v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$a.b` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L41b9b4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41b9b8.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L41b9be.  v0:= 9223372036854775807L;
  #L41b9c8.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L41b9ce.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41b9e0.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L41b9e6.  v0:= temp;
  #L41b9e8.  if v0 == 0 then goto L41b9f2;
  #L41b9ec.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L41b9f2.  return @kind void;
}
