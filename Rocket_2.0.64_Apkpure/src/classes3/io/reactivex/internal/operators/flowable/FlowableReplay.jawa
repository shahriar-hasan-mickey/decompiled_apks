record `io.reactivex.internal.operators.flowable.FlowableReplay` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.flowables.ConnectableFlowable` @kind class, `io.reactivex.internal.fuseable.HasUpstreamPublisher` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Flowable` `io.reactivex.internal.operators.flowable.FlowableReplay.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableReplay.c` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableReplay.d` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableReplay.e` @AccessFlag FINAL;
}
global `java.util.concurrent.Callable` `@@io.reactivex.internal.operators.flowable.FlowableReplay.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L41fc64.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReplay$c`;
  #L41fc68.  call `<init>`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$c;.<init>:()V` @kind direct;
  #L41fc6e.  `@@io.reactivex.internal.operators.flowable.FlowableReplay.f` @type ^`java.util.concurrent.Callable` := v0 @kind object;
  #L41fc72.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object, `io.reactivex.Flowable` v2 @kind object, `java.util.concurrent.atomic.AtomicReference` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/Flowable;Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/Callable;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L41fc84.  call `<init>`(v0) @signature `Lio/reactivex/flowables/ConnectableFlowable;.<init>:()V` @kind direct;
  #L41fc8a.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay.e` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L41fc8e.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay.b` @type ^`io.reactivex.Flowable` := v2 @kind object;
  #L41fc92.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L41fc96.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay.d` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L41fc9a.  return @kind void;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `create`(`io.reactivex.Flowable` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/Flowable;I)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41fb38.  v0:= 2147483647I;
  #L41fb3e.  if v2 != v0 then goto L41fb4c;
  #L41fb42.  call temp:= `createFrom`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.createFrom:(Lio/reactivex/Flowable;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L41fb48.  v1:= temp @kind object;
  #L41fb4a.  return v1 @kind object;
  #L41fb4c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReplay$h`;
  #L41fb50.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$h;.<init>:(I)V` @kind direct;
  #L41fb56.  call temp:= `e`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.e:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L41fb5c.  v1:= temp @kind object;
  #L41fb5e.  return v1 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `create`(`io.reactivex.Flowable` v6 @kind object, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `io.reactivex.Scheduler` v10 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L41fba8.  v5:= 2147483647I;
  #L41fbae.  v0:= v6 @kind object;
  #L41fbb0.  v1:= v7 @kind wide;
  #L41fbb2.  v3:= v9 @kind object;
  #L41fbb4.  v4:= v10 @kind object;
  #L41fbb6.  call temp:= `create`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L41fbbc.  v6:= temp @kind object;
  #L41fbbe.  return v6 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `create`(`io.reactivex.Flowable` v7 @kind object, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object, `int` v12 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L41fbd0.  v6:= new `io.reactivex.internal.operators.flowable.FlowableReplay$k`;
  #L41fbd4.  v0:= v6 @kind object;
  #L41fbd6.  v1:= v12;
  #L41fbd8.  v2:= v8 @kind wide;
  #L41fbda.  v4:= v10 @kind object;
  #L41fbdc.  v5:= v11 @kind object;
  #L41fbde.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$k;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L41fbe4.  call temp:= `e`(v7, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.e:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L41fbea.  v7:= temp @kind object;
  #L41fbec.  return v7 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `createFrom`(`io.reactivex.Flowable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.createFrom:(Lio/reactivex/Flowable;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41fc00.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableReplay.f` @type ^`java.util.concurrent.Callable` @kind object;
  #L41fc04.  call temp:= `e`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.e:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L41fc0a.  v1:= temp @kind object;
  #L41fc0c.  return v1 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `e`(`io.reactivex.Flowable` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.e:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L41fb70.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L41fb74.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L41fb7a.  v1:= new `io.reactivex.internal.operators.flowable.FlowableReplay$i`;
  #L41fb7e.  call `<init>`(v1, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$i;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L41fb84.  v2:= new `io.reactivex.internal.operators.flowable.FlowableReplay`;
  #L41fb88.  call `<init>`(v2, v1, v3, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/Flowable;Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L41fb8e.  call temp:= `onAssembly`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/flowables/ConnectableFlowable;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L41fb94.  v3:= temp @kind object;
  #L41fb96.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `multicastSelector`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.multicastSelector:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41fb14.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReplay$e`;
  #L41fb18.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$e;.<init>:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L41fb1e.  call temp:= `unsafeCreate`(v0) @signature `Lio/reactivex/Flowable;.unsafeCreate:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L41fb24.  v1:= temp @kind object;
  #L41fb26.  return v1 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `observeOn`(`io.reactivex.flowables.ConnectableFlowable` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.observeOn:(Lio/reactivex/flowables/ConnectableFlowable;Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41fc20.  call temp:= `observeOn`(v1, v2) @signature `Lio/reactivex/Flowable;.observeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L41fc26.  v2:= temp @kind object;
  #L41fc28.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReplay$b`;
  #L41fc2c.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$b;.<init>:(Lio/reactivex/flowables/ConnectableFlowable;Lio/reactivex/Flowable;)V` @kind direct;
  #L41fc32.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/flowables/ConnectableFlowable;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L41fc38.  v1:= temp @kind object;
  #L41fc3a.  return v1 @kind object;
}
procedure `void` `connect`(`io.reactivex.internal.operators.flowable.FlowableReplay` v4 @kind this, `io.reactivex.functions.Consumer` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.connect:(Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41fcac.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41fcb0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41fcb6.  v0:= temp @kind object;
  #L41fcb8.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$j`) v0 @kind object;
  #L41fcbc.  if v0 == 0 then goto L41fccc;
  #L41fcc0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.isDisposed:()Z` @kind virtual;
  #L41fcc6.  v1:= temp;
  #L41fcc8.  if v1 == 0 then goto L41fcfa;
  #L41fccc.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay.d` @type ^`java.util.concurrent.Callable` @kind object;
  #L41fcd0.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L41fcd6.  v1:= temp @kind object;
  #L41fcd8.  v1:= (`io.reactivex.internal.operators.flowable.FlowableReplay$g`) v1 @kind object;
  #L41fcdc.  v2:= new `io.reactivex.internal.operators.flowable.FlowableReplay$j`;
  #L41fce0.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableReplay$g;)V` @kind direct;
  #L41fce6.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41fcea.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L41fcf0.  v0:= temp;
  #L41fcf2.  if v0 != 0 then goto L41fcf8;
  #L41fcf6.  goto L41fcac;
  #L41fcf8.  v0:= v2 @kind object;
  #L41fcfa.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$j.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L41fcfe.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L41fd04.  v1:= temp;
  #L41fd06.  v2:= 1I;
  #L41fd08.  v3:= 0I;
  #L41fd0a.  if v1 != 0 then goto L41fd22;
  #L41fd0e.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$j.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L41fd12.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L41fd18.  v1:= temp;
  #L41fd1a.  if v1 == 0 then goto L41fd22;
  #L41fd1e.  v1:= 1I;
  #L41fd20.  goto L41fd24;
  #L41fd22.  v1:= 0I;
  #L41fd24.  call `accept`(v5, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L41fd2a.  if v1 == 0 then goto L41fd38;
  #L41fd2e.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay.b` @type ^`io.reactivex.Flowable` @kind object;
  #L41fd32.  call `subscribe`(v5, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L41fd38.  return @kind void;
  #L41fd3a.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41fd3c.  if v1 == 0 then goto L41fd4a;
  #L41fd40.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$j.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L41fd44.  call temp:= `compareAndSet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L41fd4a.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41fd50.  call temp:= `wrapOrThrow`(v5) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L41fd56.  v5:= temp @kind object;
  #L41fd58.  throw v5;
  #L41fd5a.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41fd5c.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41fd62.  call temp:= `wrapOrThrow`(v5) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L41fd68.  v5:= temp @kind object;
  #L41fd6a.  throw v5;
  catch `java.lang.Throwable` @[L41fccc..L41fcdc] goto L41fd5a;
  catch `java.lang.Throwable` @[L41fd24..L41fd2a] goto L41fd3a;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableReplay` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41fd94.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41fd98.  v1:= 0I;
  #L41fd9a.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L41fda0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableReplay` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41fad8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41fadc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41fae2.  v0:= temp @kind object;
  #L41fae4.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L41fae8.  if v0 == 0 then goto L41fafe;
  #L41faec.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L41faf2.  v0:= temp;
  #L41faf4.  if v0 == 0 then goto L41fafa;
  #L41faf8.  goto L41fafe;
  #L41fafa.  v0:= 0I;
  #L41fafc.  goto L41fb00;
  #L41fafe.  v0:= 1I;
  #L41fb00.  return v0;
}
procedure `org.reactivestreams.Publisher` `source`(`io.reactivex.internal.operators.flowable.FlowableReplay` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.source:()Lorg/reactivestreams/Publisher;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41fc4c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay.b` @type ^`io.reactivex.Flowable` @kind object;
  #L41fc50.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableReplay` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L41fdb4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay.e` @type ^`org.reactivestreams.Publisher` @kind object;
  #L41fdb8.  call `subscribe`(v0, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L41fdbe.  return @kind void;
}
