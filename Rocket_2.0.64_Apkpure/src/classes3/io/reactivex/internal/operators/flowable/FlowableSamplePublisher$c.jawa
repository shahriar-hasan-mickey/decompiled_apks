record `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.a` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.d` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.e` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$c;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4203f0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4203f6.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4203fa.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L420400.  v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.c` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L420404.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L420408.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42040e.  v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L420412.  v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L420416.  v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.b` @type ^`org.reactivestreams.Publisher` := v3 @kind object;
  #L42041a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$c;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L420454.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L420458.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L42045e.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$c;.c:()V` @kind virtual;
  #L420464.  return @kind void;
}
procedure `void` `b`() @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$c;.b:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `c`() @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$c;.c:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42042c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L420430.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L420436.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L42043a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L420440.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$c;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L420478.  v0:= 0I;
  #L42047a.  call temp:= `getAndSet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L420480.  v0:= temp @kind object;
  #L420482.  if v0 == 0 then goto L4204d6;
  #L420486.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L42048a.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L420490.  v1:= temp @kind wide;
  #L420492.  v3:= 0L;
  #L420496.  v5:= lcmp(v1, v3);
  #L42049a.  if v5 == 0 then goto L4204b8;
  #L42049e.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4204a2.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4204a8.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4204ac.  v1:= 1L;
  #L4204b0.  call temp:= `produced`(v0, v1) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4204b6.  goto L4204d6;
  #L4204b8.  call `cancel`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$c;.cancel:()V` @kind virtual;
  #L4204be.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4204c2.  v1:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L4204c6.  v2:= "Couldn't emit value due to lack of requests!" @kind object;
  #L4204ca.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4204d0.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4204d6.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$c;.e:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4204e8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4204ec.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4204f2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4204f6.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4204fc.  return @kind void;
}
procedure `void` `f`() @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$c;.f:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `g`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$c;.g:(Lorg/reactivestreams/Subscription;)Z` @AccessFlag  {
    temp;
    v0;

  #L4203d0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4203d4.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4203da.  v2:= temp;
  #L4203dc.  return v2;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L420510.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L420514.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42051a.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$c;.b:()V` @kind virtual;
  #L420520.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L420534.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L420538.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42053e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L420542.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L420548.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L42055c.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L420562.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L420574.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L420578.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L42057e.  v0:= temp;
  #L420580.  if v0 == 0 then goto L4205c6;
  #L420584.  v2.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.e` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L420588.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L42058c.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L420592.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L420596.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42059c.  v0:= temp @kind object;
  #L42059e.  if v0 != 0 then goto L4205c6;
  #L4205a2.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4205a6.  v1:= new `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$d`;
  #L4205aa.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$d;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$c;)V` @kind direct;
  #L4205b0.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4205b6.  v0:= 9223372036854775807L;
  #L4205c0.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4205c6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4205d8.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4205de.  v0:= temp;
  #L4205e0.  if v0 == 0 then goto L4205ee;
  #L4205e4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4205e8.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4205ee.  return @kind void;
}
