record `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.c` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.d` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.e` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.g` @AccessFlag ;
  `java.util.List` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.i` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object, `java.util.concurrent.Callable` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L40b330.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L40b334.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L40b33a.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L40b340.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L40b344.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L40b34a.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.i` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L40b34e.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.c` @type ^`org.reactivestreams.Publisher` := v3 @kind object;
  #L40b352.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.d` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L40b356.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`java.util.concurrent.Callable` := v5 @kind object;
  #L40b35a.  v2:= new `java.util.LinkedList`;
  #L40b35e.  call `<init>`(v2) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L40b364.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.h` @type ^`java.util.List` := v2 @kind object;
  #L40b368.  v2:= new `io.reactivex.disposables.CompositeDisposable`;
  #L40b36c.  call `<init>`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L40b372.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.f` @type ^`io.reactivex.disposables.CompositeDisposable` := v2 @kind object;
  #L40b376.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L40b2f4.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40b2fa.  v1:= 1I;
  #L40b2fc.  return v1;
}
procedure `boolean` `accept`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L40b2d4.  v2:= (`java.util.Collection`) v2 @kind object;
  #L40b2d8.  call temp:= `a`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @kind virtual;
  #L40b2de.  v1:= temp;
  #L40b2e0.  return v1;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` v1 @kind this, `java.util.Collection` v2 @kind object, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.b:(Ljava/util/Collection;Lio/reactivex/disposables/Disposable;)V` @AccessFlag  {
    temp;
    v0;

  #L40b3b0.  @monitorenter v1
  #L40b3b2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.h` @type ^`java.util.List` @kind object;
  #L40b3b6.  call temp:= `remove`(v0, v2) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L40b3bc.  v0:= temp;
  #L40b3be.  @monitorexit v1
  #L40b3c0.  if v0 == 0 then goto L40b3cc;
  #L40b3c4.  v0:= 0I;
  #L40b3c6.  call `fastPathOrderedEmitMax`(v1, v2, v0, v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastPathOrderedEmitMax:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L40b3cc.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.f` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L40b3d0.  call temp:= `remove`(v2, v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.remove:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L40b3d6.  v2:= temp;
  #L40b3d8.  if v2 == 0 then goto L40b3f2;
  #L40b3dc.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.i` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40b3e0.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L40b3e6.  v2:= temp;
  #L40b3e8.  if v2 != 0 then goto L40b3f2;
  #L40b3ec.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.c:()V` @kind virtual;
  #L40b3f2.  return @kind void;
  #L40b3f4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40b3f6.  @monitorexit v1
  #L40b3f8.  throw v2;
  catch `java.lang.Throwable` @[L40b3b2..L40b3c0] goto L40b3f4;
  catch `java.lang.Throwable` @[L40b3f6..L40b3f8] goto L40b3f4;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L40b420.  @monitorenter v3
  #L40b422.  v0:= new `java.util.ArrayList`;
  #L40b426.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.h` @type ^`java.util.List` @kind object;
  #L40b42a.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L40b430.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.h` @type ^`java.util.List` @kind object;
  #L40b434.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L40b43a.  @monitorexit v3
  #L40b43c.  v1:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L40b440.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L40b446.  v0:= temp @kind object;
  #L40b448.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40b44e.  v2:= temp;
  #L40b450.  if v2 == 0 then goto L40b468;
  #L40b454.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40b45a.  v2:= temp @kind object;
  #L40b45c.  v2:= (`java.util.Collection`) v2 @kind object;
  #L40b460.  call temp:= `offer`(v1, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L40b466.  goto L40b448;
  #L40b468.  v0:= 1I;
  #L40b46a.  v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40b46e.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L40b474.  v0:= temp;
  #L40b476.  if v0 == 0 then goto L40b486;
  #L40b47a.  v0:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40b47e.  v2:= 0I;
  #L40b480.  call `drainMaxLoop`(v1, v0, v2, v3, v3) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/QueueDrain;)V` @kind static;
  #L40b486.  return @kind void;
  #L40b488.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40b48a.  @monitorexit v3
  #L40b48c.  throw v0;
  catch `java.lang.Throwable` @[L40b422..L40b43c] goto L40b488;
  catch `java.lang.Throwable` @[L40b48a..L40b48c] goto L40b488;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40b388.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L40b38c.  if v0 != 0 then goto L40b39c;
  #L40b390.  v0:= 1I;
  #L40b392.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L40b396.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.dispose:()V` @kind virtual;
  #L40b39c.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.d:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L40b608.  v0:= v2.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L40b60c.  if v0 == 0 then goto L40b612;
  #L40b610.  return @kind void;
  #L40b612.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`java.util.concurrent.Callable` @kind object;
  #L40b616.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L40b61c.  v0:= temp @kind object;
  #L40b61e.  v1:= "The buffer supplied is null" @kind object;
  #L40b622.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40b628.  v0:= temp @kind object;
  #L40b62a.  v0:= (`java.util.Collection`) v0 @kind object;
  #L40b62e.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.d` @type ^`io.reactivex.functions.Function` @kind object;
  #L40b632.  call temp:= `apply`(v1, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L40b638.  v3:= temp @kind object;
  #L40b63a.  v1:= "The buffer closing publisher is null" @kind object;
  #L40b63e.  call temp:= `requireNonNull`(v3, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40b644.  v3:= temp @kind object;
  #L40b646.  v3:= (`org.reactivestreams.Publisher`) v3 @kind object;
  #L40b64a.  v1:= v2.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L40b64e.  if v1 == 0 then goto L40b654;
  #L40b652.  return @kind void;
  #L40b654.  @monitorenter v2
  #L40b656.  v1:= v2.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L40b65a.  if v1 == 0 then goto L40b662;
  #L40b65e.  @monitorexit v2
  #L40b660.  return @kind void;
  #L40b662.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.h` @type ^`java.util.List` @kind object;
  #L40b666.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L40b66c.  @monitorexit v2
  #L40b66e.  v1:= new `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$b`;
  #L40b672.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$b;.<init>:(Ljava/util/Collection;Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;)V` @kind direct;
  #L40b678.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.f` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L40b67c.  call temp:= `add`(v0, v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L40b682.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.i` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40b686.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L40b68c.  call `subscribe`(v3, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40b692.  return @kind void;
  #L40b694.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40b696.  @monitorexit v2
  #L40b698.  throw v3;
  #L40b69a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40b69c.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40b6a2.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40b6a8.  return @kind void;
  #L40b6aa.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40b6ac.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40b6b2.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40b6b8.  return @kind void;
  catch `java.lang.Throwable` @[L40b612..L40b62e] goto L40b6aa;
  catch `java.lang.Throwable` @[L40b62e..L40b64a] goto L40b69a;
  catch `java.lang.Throwable` @[L40b656..L40b66e] goto L40b694;
  catch `java.lang.Throwable` @[L40b696..L40b698] goto L40b694;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40b4b4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.f` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L40b4b8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L40b4be.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.e:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag  {
    temp;
    v0;

  #L40b6f4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.f` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L40b6f8.  call temp:= `remove`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.remove:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L40b6fe.  v2:= temp;
  #L40b700.  if v2 == 0 then goto L40b71a;
  #L40b704.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.i` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40b708.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L40b70e.  v2:= temp;
  #L40b710.  if v2 != 0 then goto L40b71a;
  #L40b714.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.c:()V` @kind virtual;
  #L40b71a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40b310.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.f` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L40b314.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.isDisposed:()Z` @kind virtual;
  #L40b31a.  v0:= temp;
  #L40b31c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40b4d0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.i` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40b4d4.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L40b4da.  v0:= temp;
  #L40b4dc.  if v0 != 0 then goto L40b4e6;
  #L40b4e0.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.c:()V` @kind virtual;
  #L40b4e6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40b4f8.  call `cancel`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.cancel:()V` @kind virtual;
  #L40b4fe.  v0:= 1I;
  #L40b500.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L40b504.  @monitorenter v1
  #L40b506.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.h` @type ^`java.util.List` @kind object;
  #L40b50a.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L40b510.  @monitorexit v1
  #L40b512.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40b516.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40b51c.  return @kind void;
  #L40b51e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40b520.  @monitorexit v1
  #L40b522.  throw v2;
  catch `java.lang.Throwable` @[L40b506..L40b512] goto L40b51e;
  catch `java.lang.Throwable` @[L40b520..L40b522] goto L40b51e;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40b548.  @monitorenter v2
  #L40b54a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.h` @type ^`java.util.List` @kind object;
  #L40b54e.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L40b554.  v0:= temp @kind object;
  #L40b556.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40b55c.  v1:= temp;
  #L40b55e.  if v1 == 0 then goto L40b576;
  #L40b562.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40b568.  v1:= temp @kind object;
  #L40b56a.  v1:= (`java.util.Collection`) v1 @kind object;
  #L40b56e.  call temp:= `add`(v1, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L40b574.  goto L40b556;
  #L40b576.  @monitorexit v2
  #L40b578.  return @kind void;
  #L40b57a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40b57c.  @monitorexit v2
  #L40b57e.  throw v3;
  catch `java.lang.Throwable` @[L40b54a..L40b57e] goto L40b57a;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40b59c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40b5a0.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40b5a6.  v0:= temp;
  #L40b5a8.  if v0 == 0 then goto L40b5f4;
  #L40b5ac.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.g` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L40b5b0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$c`;
  #L40b5b4.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$c;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;)V` @kind direct;
  #L40b5ba.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.f` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L40b5be.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L40b5c4.  v1:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40b5c8.  call `onSubscribe`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40b5ce.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.i` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40b5d2.  v2:= 1I;
  #L40b5d4.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L40b5da.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.c` @type ^`org.reactivestreams.Publisher` @kind object;
  #L40b5de.  call `subscribe`(v1, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40b5e4.  v0:= 9223372036854775807L;
  #L40b5ee.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40b5f4.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L40b72c.  call `requested`(v0, v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @kind virtual;
  #L40b732.  return @kind void;
}
