record `io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchIfEmpty;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L422f5c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L422f62.  v0.`io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty.b` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L422f66.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchIfEmpty;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L422f78.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty$a`;
  #L422f7c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L422f80.  call `<init>`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchIfEmpty$a;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L422f86.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty$a.c` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L422f8a.  call `onSubscribe`(v3, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L422f90.  v3:= v2.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L422f94.  call `subscribe`(v3, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L422f9a.  return @kind void;
}
