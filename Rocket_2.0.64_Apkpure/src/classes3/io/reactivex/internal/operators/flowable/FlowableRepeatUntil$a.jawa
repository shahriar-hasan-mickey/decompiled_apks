record `io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.subscriptions.SubscriptionArbiter` `io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.c` @AccessFlag FINAL;
  `io.reactivex.functions.BooleanSupplier` `io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.BooleanSupplier` v2 @kind object, `io.reactivex.internal.subscriptions.SubscriptionArbiter` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/BooleanSupplier;Lio/reactivex/internal/subscriptions/SubscriptionArbiter;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41e4d0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L41e4d6.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L41e4da.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.b` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` := v3 @kind object;
  #L41e4de.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.c` @type ^`org.reactivestreams.Publisher` := v4 @kind object;
  #L41e4e2.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.d` @type ^`io.reactivex.functions.BooleanSupplier` := v2 @kind object;
  #L41e4e6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L41e5b0.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L41e5b6.  v0:= temp;
  #L41e5b8.  if v0 != 0 then goto L41e5d6;
  #L41e5bc.  v0:= 1I;
  #L41e5be.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.c` @type ^`org.reactivestreams.Publisher` @kind object;
  #L41e5c2.  call `subscribe`(v1, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L41e5c8.  v0:= -v0 @kind int;
  #L41e5ca.  call temp:= `addAndGet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L41e5d0.  v0:= temp;
  #L41e5d2.  if v0 != 0 then goto L41e5be;
  #L41e5d6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41e4f8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.d` @type ^`io.reactivex.functions.BooleanSupplier` @kind object;
  #L41e4fc.  call temp:= `getAsBoolean`(v0) @signature `Lio/reactivex/functions/BooleanSupplier;.getAsBoolean:()Z` @kind interface;
  #L41e502.  v0:= temp;
  #L41e504.  if v0 == 0 then goto L41e514;
  #L41e508.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41e50c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41e512.  goto L41e51a;
  #L41e514.  call `a`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$a;.a:()V` @kind virtual;
  #L41e51a.  return @kind void;
  #L41e51c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41e51e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41e524.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41e528.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41e52e.  return @kind void;
  catch `java.lang.Throwable` @[L41e4f8..L41e504] goto L41e51c;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41e54c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41e550.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41e556.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41e568.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41e56c.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41e572.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.b` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L41e576.  v0:= 1L;
  #L41e57a.  call `produced`(v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L41e580.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41e594.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.b` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L41e598.  call `setSubscription`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L41e59e.  return @kind void;
}
