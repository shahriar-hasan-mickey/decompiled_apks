record `io.reactivex.internal.operators.flowable.FlowableWindowTimed$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.d` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.e` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.f` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.g` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.h` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.i` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.j` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `long` v5 , `java.util.concurrent.TimeUnit` v7 @kind object, `io.reactivex.Scheduler$Worker` v8 @kind object, `int` v9 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.<init>:(Lorg/reactivestreams/Subscriber;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L428500.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L428504.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L42850a.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L428510.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.c` @type ^`long` := v3 @kind wide;
  #L428514.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.d` @type ^`long` := v5 @kind wide;
  #L428518.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.e` @type ^`java.util.concurrent.TimeUnit` := v7 @kind object;
  #L42851c.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.f` @type ^`io.reactivex.Scheduler$Worker` := v8 @kind object;
  #L428520.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.g` @type ^`int` := v9;
  #L428524.  v2:= new `java.util.LinkedList`;
  #L428528.  call `<init>`(v2) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L42852e.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.h` @type ^`java.util.List` := v2 @kind object;
  #L428532.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c` v3 @kind this, `io.reactivex.processors.UnicastProcessor` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.a:(Lio/reactivex/processors/UnicastProcessor;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L42855c.  v0:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L428560.  v1:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed$c$b`;
  #L428564.  v2:= 0I;
  #L428566.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c$b;.<init>:(Lio/reactivex/processors/UnicastProcessor;Z)V` @kind direct;
  #L42856c.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L428572.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L428578.  v4:= temp;
  #L42857a.  if v4 == 0 then goto L428584;
  #L42857e.  call `b`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.b:()V` @kind virtual;
  #L428584.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c` v11 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4285b4.  v0:= v11.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4285b8.  v1:= v11.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4285bc.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.h` @type ^`java.util.List` @kind object;
  #L4285c0.  v3:= 1I;
  #L4285c2.  v4:= 1I;
  #L4285c4.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.j` @type ^`boolean` @kind boolean;
  #L4285c8.  if v5 == 0 then goto L4285ea;
  #L4285cc.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4285d0.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4285d6.  call `dispose`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.dispose:()V` @kind virtual;
  #L4285dc.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4285e2.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4285e8.  return @kind void;
  #L4285ea.  v5:= v11.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` @kind boolean;
  #L4285ee.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4285f4.  v6:= temp @kind object;
  #L4285f6.  if v6 != 0 then goto L4285fe;
  #L4285fa.  v7:= 1I;
  #L4285fc.  goto L428600;
  #L4285fe.  v7:= 0I;
  #L428600.  v8:= instanceof @variable v6 @type ^`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c$b` @kind boolean;
  #L428604.  if v5 == 0 then goto L42867c;
  #L428608.  if v7 != 0 then goto L428610;
  #L42860c.  if v8 == 0 then goto L42867c;
  #L428610.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L428616.  v0:= v11.`io.reactivex.internal.subscribers.QueueDrainSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L42861a.  if v0 == 0 then goto L428646;
  #L42861e.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L428624.  v1:= temp @kind object;
  #L428626.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L42862c.  v3:= temp;
  #L42862e.  if v3 == 0 then goto L42866e;
  #L428632.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L428638.  v3:= temp @kind object;
  #L42863a.  v3:= (`io.reactivex.processors.UnicastProcessor`) v3 @kind object;
  #L42863e.  call `onError`(v3, v0) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L428644.  goto L428626;
  #L428646.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L42864c.  v0:= temp @kind object;
  #L42864e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L428654.  v1:= temp;
  #L428656.  if v1 == 0 then goto L42866e;
  #L42865a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L428660.  v1:= temp @kind object;
  #L428662.  v1:= (`io.reactivex.processors.UnicastProcessor`) v1 @kind object;
  #L428666.  call `onComplete`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L42866c.  goto L42864e;
  #L42866e.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L428674.  call `dispose`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.dispose:()V` @kind virtual;
  #L42867a.  return @kind void;
  #L42867c.  if v7 == 0 then goto L428690;
  #L428680.  v4:= -v4 @kind int;
  #L428682.  call temp:= `leave`(v11, v4) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L428688.  v4:= temp;
  #L42868a.  if v4 != 0 then goto L4285c4;
  #L42868e.  return @kind void;
  #L428690.  if v8 == 0 then goto L42875a;
  #L428694.  v6:= (`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c$b`) v6 @kind object;
  #L428698.  v5:= v6.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c$b.b` @type ^`boolean` @kind boolean;
  #L42869c.  if v5 == 0 then goto L42872a;
  #L4286a0.  v5:= v11.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4286a4.  if v5 == 0 then goto L4286aa;
  #L4286a8.  goto L4285c4;
  #L4286aa.  call temp:= `requested`(v11) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:()J` @kind virtual;
  #L4286b0.  v5:= temp @kind wide;
  #L4286b2.  v7:= 0L;
  #L4286b6.  v9:= lcmp(v5, v7);
  #L4286ba.  if v9 == 0 then goto L428712;
  #L4286be.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.g` @type ^`int`;
  #L4286c2.  call temp:= `create`(v7) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L4286c8.  v7:= temp @kind object;
  #L4286ca.  call temp:= `add`(v2, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4286d0.  call `onNext`(v1, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4286d6.  v8:= 9223372036854775807L;
  #L4286e0.  v10:= lcmp(v5, v8);
  #L4286e4.  if v10 == 0 then goto L4286f2;
  #L4286e8.  v5:= 1L;
  #L4286ec.  call temp:= `produced`(v11, v5) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L4286f2.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.f` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4286f6.  v6:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed$c$a`;
  #L4286fa.  call `<init>`(v6, v11, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;Lio/reactivex/processors/UnicastProcessor;)V` @kind direct;
  #L428700.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.c` @type ^`long` @kind wide;
  #L428704.  v9:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L428708.  call temp:= `schedule`(v5, v6, v7, v9) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L42870e.  goto L4285c4;
  #L428712.  v5:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L428716.  v6:= "Can't emit window due to lack of requests" @kind object;
  #L42871a.  call `<init>`(v5, v6) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L428720.  call `onError`(v1, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L428726.  goto L4285c4;
  #L42872a.  v5:= v6.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c$b.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L42872e.  call temp:= `remove`(v2, v5) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L428734.  v5:= v6.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c$b.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L428738.  call `onComplete`(v5) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L42873e.  call temp:= `isEmpty`(v2) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L428744.  v5:= temp;
  #L428746.  if v5 == 0 then goto L4285c4;
  #L42874a.  v5:= v11.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L42874e.  if v5 == 0 then goto L4285c4;
  #L428752.  v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.j` @type ^`boolean` := v3 @kind boolean;
  #L428756.  goto L4285c4;
  #L42875a.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L428760.  v5:= temp @kind object;
  #L428762.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L428768.  v7:= temp;
  #L42876a.  if v7 == 0 then goto L4285c4;
  #L42876e.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L428774.  v7:= temp @kind object;
  #L428776.  v7:= (`io.reactivex.processors.UnicastProcessor`) v7 @kind object;
  #L42877a.  call `onNext`(v7, v6) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L428780.  goto L428762;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L428544.  v0:= 1I;
  #L428546.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L42854a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L428598.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.f` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L42859c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4285a2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L428794.  v0:= 1I;
  #L428796.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L42879a.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L4287a0.  v0:= temp;
  #L4287a2.  if v0 == 0 then goto L4287ac;
  #L4287a6.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.b:()V` @kind virtual;
  #L4287ac.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4287b0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4287b6.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.dispose:()V` @kind virtual;
  #L4287bc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4287d0.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4287d4.  v0:= 1I;
  #L4287d6.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4287da.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L4287e0.  v0:= temp;
  #L4287e2.  if v0 == 0 then goto L4287ec;
  #L4287e6.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.b:()V` @kind virtual;
  #L4287ec.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4287f0.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4287f6.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.dispose:()V` @kind virtual;
  #L4287fc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L428810.  call temp:= `fastEnter`(v2) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastEnter:()Z` @kind virtual;
  #L428816.  v0:= temp;
  #L428818.  if v0 == 0 then goto L428858;
  #L42881c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.h` @type ^`java.util.List` @kind object;
  #L428820.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L428826.  v0:= temp @kind object;
  #L428828.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L42882e.  v1:= temp;
  #L428830.  if v1 == 0 then goto L428848;
  #L428834.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L42883a.  v1:= temp @kind object;
  #L42883c.  v1:= (`io.reactivex.processors.UnicastProcessor`) v1 @kind object;
  #L428840.  call `onNext`(v1, v3) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L428846.  goto L428828;
  #L428848.  v3:= -1I;
  #L42884a.  call temp:= `leave`(v2, v3) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L428850.  v3:= temp;
  #L428852.  if v3 != 0 then goto L428870;
  #L428856.  return @kind void;
  #L428858.  v0:= v2.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L42885c.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L428862.  call temp:= `enter`(v2) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L428868.  v3:= temp;
  #L42886a.  if v3 != 0 then goto L428870;
  #L42886e.  return @kind void;
  #L428870.  call `b`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.b:()V` @kind virtual;
  #L428876.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c` v14 @kind this, `org.reactivestreams.Subscription` v15 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L428888.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L42888c.  call temp:= `validate`(v0, v15) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L428892.  v0:= temp;
  #L428894.  if v0 == 0 then goto L428958;
  #L428898.  v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.i` @type ^`org.reactivestreams.Subscription` := v15 @kind object;
  #L42889c.  v0:= v14.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4288a0.  call `onSubscribe`(v0, v14) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4288a6.  v0:= v14.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4288aa.  if v0 == 0 then goto L4288b0;
  #L4288ae.  return @kind void;
  #L4288b0.  call temp:= `requested`(v14) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:()J` @kind virtual;
  #L4288b6.  v0:= temp @kind wide;
  #L4288b8.  v2:= 0L;
  #L4288bc.  v4:= lcmp(v0, v2);
  #L4288c0.  if v4 == 0 then goto L42893a;
  #L4288c4.  v2:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.g` @type ^`int`;
  #L4288c8.  call temp:= `create`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L4288ce.  v2:= temp @kind object;
  #L4288d0.  v3:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.h` @type ^`java.util.List` @kind object;
  #L4288d4.  call temp:= `add`(v3, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4288da.  v3:= v14.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4288de.  call `onNext`(v3, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4288e4.  v3:= 9223372036854775807L;
  #L4288ee.  v5:= lcmp(v0, v3);
  #L4288f2.  if v5 == 0 then goto L428900;
  #L4288f6.  v0:= 1L;
  #L4288fa.  call temp:= `produced`(v14, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L428900.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.f` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L428904.  v1:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed$c$a`;
  #L428908.  call `<init>`(v1, v14, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;Lio/reactivex/processors/UnicastProcessor;)V` @kind direct;
  #L42890e.  v5:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.c` @type ^`long` @kind wide;
  #L428912.  v2:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L428916.  call temp:= `schedule`(v0, v1, v5, v2) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L42891c.  v7:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.f` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L428920.  v11:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.d` @type ^`long` @kind wide;
  #L428924.  v13:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L428928.  v8:= v14 @kind object;
  #L42892a.  v9:= v11 @kind wide;
  #L42892c.  call temp:= `schedulePeriodically`(v7, v8, v9, v11, v13) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L428932.  call `request`(v15, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L428938.  goto L428958;
  #L42893a.  call `cancel`(v15) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L428940.  v15:= v14.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L428944.  v0:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L428948.  v1:= "Could not emit the first window due to lack of requests" @kind object;
  #L42894c.  call `<init>`(v0, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L428952.  call `onError`(v15, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L428958.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L42896c.  call `requested`(v0, v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @kind virtual;
  #L428972.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L428984.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.g` @type ^`int`;
  #L428988.  call temp:= `create`(v0) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L42898e.  v0:= temp @kind object;
  #L428990.  v1:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed$c$b`;
  #L428994.  v2:= 1I;
  #L428996.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c$b;.<init>:(Lio/reactivex/processors/UnicastProcessor;Z)V` @kind direct;
  #L42899c.  v0:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4289a0.  if v0 != 0 then goto L4289ae;
  #L4289a4.  v0:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4289a8.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4289ae.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L4289b4.  v0:= temp;
  #L4289b6.  if v0 == 0 then goto L4289c0;
  #L4289ba.  call `b`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.b:()V` @kind virtual;
  #L4289c0.  return @kind void;
}
