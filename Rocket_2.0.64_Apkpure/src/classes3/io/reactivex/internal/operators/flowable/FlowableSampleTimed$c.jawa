record `io.reactivex.internal.operators.flowable.FlowableSampleTimed$c` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.e` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.g` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L42080c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L420812.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L420816.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L42081c.  v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L420820.  v0:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L420824.  call `<init>`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L42082a.  v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.f` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v0 @kind object;
  #L42082e.  v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L420832.  v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.b` @type ^`long` := v3 @kind wide;
  #L420836.  v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.c` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L42083a.  v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.d` @type ^`io.reactivex.Scheduler` := v6 @kind object;
  #L42083e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L420874.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.f` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L420878.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42087e.  return @kind void;
}
procedure `void` `b`() @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.b:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L420890.  v0:= 0I;
  #L420892.  call temp:= `getAndSet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L420898.  v0:= temp @kind object;
  #L42089a.  if v0 == 0 then goto L4208ee;
  #L42089e.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4208a2.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4208a8.  v1:= temp @kind wide;
  #L4208aa.  v3:= 0L;
  #L4208ae.  v5:= lcmp(v1, v3);
  #L4208b2.  if v5 == 0 then goto L4208d0;
  #L4208b6.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4208ba.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4208c0.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4208c4.  v1:= 1L;
  #L4208c8.  call temp:= `produced`(v0, v1) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4208ce.  goto L4208ee;
  #L4208d0.  call `cancel`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.cancel:()V` @kind virtual;
  #L4208d6.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4208da.  v1:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L4208de.  v2:= "Couldn't emit value due to lack of requests!" @kind object;
  #L4208e2.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4208e8.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4208ee.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L420850.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.a:()V` @kind virtual;
  #L420856.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L42085a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L420860.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L420900.  call `a`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.a:()V` @kind virtual;
  #L420906.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.b:()V` @kind virtual;
  #L42090c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L420920.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.a:()V` @kind virtual;
  #L420926.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L42092a.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L420930.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L420944.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L42094a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c` v8 @kind this, `org.reactivestreams.Subscription` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L42095c.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L420960.  call temp:= `validate`(v0, v9) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L420966.  v0:= temp;
  #L420968.  if v0 == 0 then goto L4209ac;
  #L42096c.  v8.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.g` @type ^`org.reactivestreams.Subscription` := v9 @kind object;
  #L420970.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L420974.  call `onSubscribe`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L42097a.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.f` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L42097e.  v1:= v8.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L420982.  v5:= v8.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.b` @type ^`long` @kind wide;
  #L420986.  v7:= v8.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L42098a.  v2:= v8 @kind object;
  #L42098c.  v3:= v5 @kind wide;
  #L42098e.  call temp:= `schedulePeriodicallyDirect`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L420994.  v1:= temp @kind object;
  #L420996.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L42099c.  v0:= 9223372036854775807L;
  #L4209a6.  call `request`(v9, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4209ac.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4209c0.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4209c6.  v0:= temp;
  #L4209c8.  if v0 == 0 then goto L4209d6;
  #L4209cc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4209d0.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4209d6.  return @kind void;
}
