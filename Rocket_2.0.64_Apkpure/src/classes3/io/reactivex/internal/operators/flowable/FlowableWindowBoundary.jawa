record `io.reactivex.internal.operators.flowable.FlowableWindowBoundary` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4279d8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L4279de.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary.b` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L4279e2.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary.c` @type ^`int` := v3;
  #L4279e6.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary` v4 @kind this, `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4279f8.  v0:= v4.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L4279fc.  v1:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b`;
  #L427a00.  v2:= new `io.reactivex.subscribers.SerializedSubscriber`;
  #L427a04.  call `<init>`(v2, v5) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L427a0a.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L427a0e.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary.c` @type ^`int`;
  #L427a12.  call `<init>`(v1, v2, v5, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;I)V` @kind direct;
  #L427a18.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L427a1e.  return @kind void;
}
