record `io.reactivex.internal.operators.flowable.FlowableWindow$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableWindow$c.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$c.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$c.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableWindow$c.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableWindow$c.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableWindow$c.f` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$c.g` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableWindow$c.h` @AccessFlag ;
  `io.reactivex.processors.UnicastProcessor` `io.reactivex.internal.operators.flowable.FlowableWindow$c.i` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableWindow$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindow$c` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `long` v5 , `int` v7 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$c;.<init>:(Lorg/reactivestreams/Subscriber;JJI)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4265e4.  v0:= 1I;
  #L4265e6.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4265ec.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$c.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4265f0.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$c.b` @type ^`long` := v3 @kind wide;
  #L4265f4.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$c.c` @type ^`long` := v5 @kind wide;
  #L4265f8.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4265fc.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L426602.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$c.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L426606.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L42660a.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L426610.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$c.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L426614.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$c.f` @type ^`int` := v7;
  #L426618.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWindow$c` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42662c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindow$c.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L426630.  v1:= 0I;
  #L426632.  v2:= 1I;
  #L426634.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L42663a.  v0:= temp;
  #L42663c.  if v0 == 0 then goto L426646;
  #L426640.  call `run`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$c;.run:()V` @kind virtual;
  #L426646.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindow$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L426658.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$c.i` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L42665c.  if v0 == 0 then goto L42666c;
  #L426660.  v1:= 0I;
  #L426662.  v2.`io.reactivex.internal.operators.flowable.FlowableWindow$c.i` @type ^`io.reactivex.processors.UnicastProcessor` := v1 @kind object;
  #L426666.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L42666c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L426670.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L426676.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindow$c` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L426688.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$c.i` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L42668c.  if v0 == 0 then goto L42669c;
  #L426690.  v1:= 0I;
  #L426692.  v2.`io.reactivex.internal.operators.flowable.FlowableWindow$c.i` @type ^`io.reactivex.processors.UnicastProcessor` := v1 @kind object;
  #L426696.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42669c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4266a0.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4266a6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindow$c` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4266b8.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$c.g` @type ^`long` @kind wide;
  #L4266bc.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$c.i` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L4266c0.  v3:= 0L;
  #L4266c4.  v5:= lcmp(v0, v3);
  #L4266c8.  if v5 != 0 then goto L4266ec;
  #L4266cc.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4266d2.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$c.f` @type ^`int`;
  #L4266d6.  call temp:= `create`(v2, v7) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L4266dc.  v2:= temp @kind object;
  #L4266de.  v7.`io.reactivex.internal.operators.flowable.FlowableWindow$c.i` @type ^`io.reactivex.processors.UnicastProcessor` := v2 @kind object;
  #L4266e2.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4266e6.  call `onNext`(v5, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4266ec.  v5:= 1L;
  #L4266f0.  v0:= v0 + v5 @kind long;
  #L4266f2.  if v2 == 0 then goto L4266fc;
  #L4266f6.  call `onNext`(v2, v8) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4266fc.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$c.b` @type ^`long` @kind wide;
  #L426700.  v8:= lcmp(v0, v5);
  #L426704.  if v8 != 0 then goto L426714;
  #L426708.  v8:= 0I;
  #L42670a.  v7.`io.reactivex.internal.operators.flowable.FlowableWindow$c.i` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L42670e.  call `onComplete`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L426714.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$c.c` @type ^`long` @kind wide;
  #L426718.  v8:= lcmp(v0, v5);
  #L42671c.  if v8 != 0 then goto L426726;
  #L426720.  v7.`io.reactivex.internal.operators.flowable.FlowableWindow$c.g` @type ^`long` := v3 @kind wide;
  #L426724.  goto L42672a;
  #L426726.  v7.`io.reactivex.internal.operators.flowable.FlowableWindow$c.g` @type ^`long` := v0 @kind wide;
  #L42672a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWindow$c` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42673c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$c.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L426740.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L426746.  v0:= temp;
  #L426748.  if v0 == 0 then goto L42675a;
  #L42674c.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$c.h` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L426750.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L426754.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L42675a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWindow$c` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42676c.  call temp:= `validate`(v7) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L426772.  v0:= temp;
  #L426774.  if v0 == 0 then goto L4267ea;
  #L426778.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$c.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L42677c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L426782.  v0:= temp;
  #L426784.  if v0 != 0 then goto L4267d4;
  #L426788.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$c.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L42678c.  v1:= 0I;
  #L42678e.  v2:= 1I;
  #L426790.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L426796.  v0:= temp;
  #L426798.  if v0 == 0 then goto L4267d4;
  #L42679c.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$c.b` @type ^`long` @kind wide;
  #L4267a0.  call temp:= `multiplyCap`(v0, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L4267a6.  v0:= temp @kind wide;
  #L4267a8.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$c.c` @type ^`long` @kind wide;
  #L4267ac.  v4:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$c.b` @type ^`long` @kind wide;
  #L4267b0.  v2:= v2 - v4 @kind long;
  #L4267b2.  v4:= 1L;
  #L4267b6.  v7:= v7 - v4 @kind long;
  #L4267b8.  call temp:= `multiplyCap`(v2, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L4267be.  v7:= temp @kind wide;
  #L4267c0.  call temp:= `addCap`(v0, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L4267c6.  v7:= temp @kind wide;
  #L4267c8.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$c.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4267cc.  call `request`(v0, v7) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4267d2.  goto L4267ea;
  #L4267d4.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$c.c` @type ^`long` @kind wide;
  #L4267d8.  call temp:= `multiplyCap`(v0, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L4267de.  v7:= temp @kind wide;
  #L4267e0.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$c.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4267e4.  call `request`(v0, v7) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4267ea.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableWindow$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4267fc.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L426802.  v0:= temp;
  #L426804.  if v0 != 0 then goto L426812;
  #L426808.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$c.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L42680c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L426812.  return @kind void;
}
