record `io.reactivex.internal.operators.flowable.FlowableTimeout$c` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.internal.operators.flowable.FlowableTimeout$a` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableTimeout$c.a` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableTimeout$c.b` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableTimeout$c.c` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableTimeout$c.d` @AccessFlag FINAL;
  `io.reactivex.internal.subscriptions.FullArbiter` `io.reactivex.internal.operators.flowable.FlowableTimeout$c.e` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableTimeout$c.f` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTimeout$c.g` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTimeout$c.h` @AccessFlag VOLATILE;
  `long` `io.reactivex.internal.operators.flowable.FlowableTimeout$c.i` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableTimeout$c.j` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTimeout$c` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$c;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L424b2c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L424b32.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L424b36.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L424b3c.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.j` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L424b40.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L424b44.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.b` @type ^`org.reactivestreams.Publisher` := v3 @kind object;
  #L424b48.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.c` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L424b4c.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.d` @type ^`org.reactivestreams.Publisher` := v5 @kind object;
  #L424b50.  v3:= new `io.reactivex.internal.subscriptions.FullArbiter`;
  #L424b54.  v4:= 8I;
  #L424b58.  call `<init>`(v3, v2, v1, v4) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/disposables/Disposable;I)V` @kind direct;
  #L424b5e.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.e` @type ^`io.reactivex.internal.subscriptions.FullArbiter` := v3 @kind object;
  #L424b62.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableTimeout$c` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$c;.b:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L424d50.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.i` @type ^`long` @kind wide;
  #L424d54.  v2:= lcmp(v4, v0);
  #L424d58.  if v2 != 0 then goto L424d7a;
  #L424d5c.  call `dispose`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$c;.dispose:()V` @kind virtual;
  #L424d62.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.d` @type ^`org.reactivestreams.Publisher` @kind object;
  #L424d66.  v5:= new `io.reactivex.internal.subscribers.FullArbiterSubscriber`;
  #L424d6a.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.e` @type ^`io.reactivex.internal.subscriptions.FullArbiter` @kind object;
  #L424d6e.  call `<init>`(v5, v0) @signature `Lio/reactivex/internal/subscribers/FullArbiterSubscriber;.<init>:(Lio/reactivex/internal/subscriptions/FullArbiter;)V` @kind direct;
  #L424d74.  call `subscribe`(v4, v5) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L424d7a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableTimeout$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L424b74.  v0:= 1I;
  #L424b76.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.h` @type ^`boolean` := v0 @kind boolean;
  #L424b7a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L424b7e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L424b84.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L424b88.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L424b8e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableTimeout$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L424b14.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.h` @type ^`boolean` @kind boolean;
  #L424b18.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTimeout$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L424ba0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.g` @type ^`boolean` @kind boolean;
  #L424ba4.  if v0 == 0 then goto L424baa;
  #L424ba8.  return @kind void;
  #L424baa.  v0:= 1I;
  #L424bac.  v2.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.g` @type ^`boolean` := v0 @kind boolean;
  #L424bb0.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$c;.dispose:()V` @kind virtual;
  #L424bb6.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.e` @type ^`io.reactivex.internal.subscriptions.FullArbiter` @kind object;
  #L424bba.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L424bbe.  call `onComplete`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.onComplete:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L424bc4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTimeout$c` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L424bd8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.g` @type ^`boolean` @kind boolean;
  #L424bdc.  if v0 == 0 then goto L424be8;
  #L424be0.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L424be6.  return @kind void;
  #L424be8.  v0:= 1I;
  #L424bea.  v2.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.g` @type ^`boolean` := v0 @kind boolean;
  #L424bee.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$c;.dispose:()V` @kind virtual;
  #L424bf4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.e` @type ^`io.reactivex.internal.subscriptions.FullArbiter` @kind object;
  #L424bf8.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L424bfc.  call `onError`(v0, v3, v1) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.onError:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L424c02.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTimeout$c` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L424c14.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.g` @type ^`boolean` @kind boolean;
  #L424c18.  if v0 == 0 then goto L424c1e;
  #L424c1c.  return @kind void;
  #L424c1e.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.i` @type ^`long` @kind wide;
  #L424c22.  v2:= 1L;
  #L424c26.  v0:= v0 + v2 @kind long;
  #L424c28.  v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.i` @type ^`long` := v0 @kind wide;
  #L424c2c.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.e` @type ^`io.reactivex.internal.subscriptions.FullArbiter` @kind object;
  #L424c30.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L424c34.  call temp:= `onNext`(v2, v5, v3) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.onNext:(Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z` @kind virtual;
  #L424c3a.  v2:= temp;
  #L424c3c.  if v2 != 0 then goto L424c42;
  #L424c40.  return @kind void;
  #L424c42.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L424c46.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L424c4c.  v2:= temp @kind object;
  #L424c4e.  v2:= (`io.reactivex.disposables.Disposable`) v2 @kind object;
  #L424c52.  if v2 == 0 then goto L424c5c;
  #L424c56.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L424c5c.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.c` @type ^`io.reactivex.functions.Function` @kind object;
  #L424c60.  call temp:= `apply`(v3, v5) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L424c66.  v5:= temp @kind object;
  #L424c68.  v3:= "The publisher returned is null" @kind object;
  #L424c6c.  call temp:= `requireNonNull`(v5, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L424c72.  v5:= temp @kind object;
  #L424c74.  v5:= (`org.reactivestreams.Publisher`) v5 @kind object;
  #L424c78.  v3:= new `io.reactivex.internal.operators.flowable.FlowableTimeout$b`;
  #L424c7c.  call `<init>`(v3, v4, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$b;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableTimeout$a;J)V` @kind direct;
  #L424c82.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L424c86.  call temp:= `compareAndSet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L424c8c.  v0:= temp;
  #L424c8e.  if v0 == 0 then goto L424c98;
  #L424c92.  call `subscribe`(v5, v3) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L424c98.  return @kind void;
  #L424c9a.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L424c9c.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L424ca2.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L424ca6.  call `onError`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L424cac.  return @kind void;
  catch `java.lang.Throwable` @[L424c5c..L424c78] goto L424c9a;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTimeout$c` v4 @kind this, `org.reactivestreams.Subscription` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L424ccc.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L424cd0.  call temp:= `validate`(v0, v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L424cd6.  v0:= temp;
  #L424cd8.  if v0 != 0 then goto L424cde;
  #L424cdc.  return @kind void;
  #L424cde.  v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.f` @type ^`org.reactivestreams.Subscription` := v5 @kind object;
  #L424ce2.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.e` @type ^`io.reactivex.internal.subscriptions.FullArbiter` @kind object;
  #L424ce6.  call temp:= `setSubscription`(v0, v5) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)Z` @kind virtual;
  #L424cec.  v5:= temp;
  #L424cee.  if v5 != 0 then goto L424cf4;
  #L424cf2.  return @kind void;
  #L424cf4.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L424cf8.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L424cfc.  if v0 == 0 then goto L424d32;
  #L424d00.  v1:= new `io.reactivex.internal.operators.flowable.FlowableTimeout$b`;
  #L424d04.  v2:= 0L;
  #L424d08.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$b;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableTimeout$a;J)V` @kind direct;
  #L424d0e.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L424d12.  v3:= 0I;
  #L424d14.  call temp:= `compareAndSet`(v2, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L424d1a.  v2:= temp;
  #L424d1c.  if v2 == 0 then goto L424d3c;
  #L424d20.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.e` @type ^`io.reactivex.internal.subscriptions.FullArbiter` @kind object;
  #L424d24.  call `onSubscribe`(v5, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L424d2a.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L424d30.  goto L424d3c;
  #L424d32.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$c.e` @type ^`io.reactivex.internal.subscriptions.FullArbiter` @kind object;
  #L424d36.  call `onSubscribe`(v5, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L424d3c.  return @kind void;
}
