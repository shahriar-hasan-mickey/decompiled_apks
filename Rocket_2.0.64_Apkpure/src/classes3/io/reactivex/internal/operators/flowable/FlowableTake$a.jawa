record `io.reactivex.internal.operators.flowable.FlowableTake$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTake$a.a` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableTake$a.b` @AccessFlag ;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableTake$a.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableTake$a.d` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableTake$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTake$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTake$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$a;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L423734.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L42373a.  v0.`io.reactivex.internal.operators.flowable.FlowableTake$a.c` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L42373e.  v0.`io.reactivex.internal.operators.flowable.FlowableTake$a.d` @type ^`long` := v2 @kind wide;
  #L423742.  v0.`io.reactivex.internal.operators.flowable.FlowableTake$a.e` @type ^`long` := v2 @kind wide;
  #L423746.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTake$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L423758.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTake$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L42375c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L423762.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTake$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L423774.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTake$a.a` @type ^`boolean` @kind boolean;
  #L423778.  if v0 != 0 then goto L42378c;
  #L42377c.  v0:= 1I;
  #L42377e.  v1.`io.reactivex.internal.operators.flowable.FlowableTake$a.a` @type ^`boolean` := v0 @kind boolean;
  #L423782.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTake$a.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L423786.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L42378c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTake$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4237a0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTake$a.a` @type ^`boolean` @kind boolean;
  #L4237a4.  if v0 != 0 then goto L4237c2;
  #L4237a8.  v0:= 1I;
  #L4237aa.  v1.`io.reactivex.internal.operators.flowable.FlowableTake$a.a` @type ^`boolean` := v0 @kind boolean;
  #L4237ae.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTake$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4237b2.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4237b8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTake$a.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4237bc.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4237c2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTake$a` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4237d4.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableTake$a.a` @type ^`boolean` @kind boolean;
  #L4237d8.  if v0 != 0 then goto L423824;
  #L4237dc.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableTake$a.e` @type ^`long` @kind wide;
  #L4237e0.  v2:= 1L;
  #L4237e4.  v2:= v0 - v2 @kind long;
  #L4237e8.  v7.`io.reactivex.internal.operators.flowable.FlowableTake$a.e` @type ^`long` := v2 @kind wide;
  #L4237ec.  v4:= 0L;
  #L4237f0.  v6:= lcmp(v0, v4);
  #L4237f4.  if v6 <= 0 then goto L423824;
  #L4237f8.  v0:= lcmp(v2, v4);
  #L4237fc.  if v0 != 0 then goto L423804;
  #L423800.  v0:= 1I;
  #L423802.  goto L423806;
  #L423804.  v0:= 0I;
  #L423806.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableTake$a.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L42380a.  call `onNext`(v1, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L423810.  if v0 == 0 then goto L423824;
  #L423814.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableTake$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L423818.  call `cancel`(v8) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L42381e.  call `onComplete`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$a;.onComplete:()V` @kind virtual;
  #L423824.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTake$a` v5 @kind this, `org.reactivestreams.Subscription` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L423838.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTake$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L42383c.  call temp:= `validate`(v0, v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L423842.  v0:= temp;
  #L423844.  if v0 == 0 then goto L42387e;
  #L423848.  v5.`io.reactivex.internal.operators.flowable.FlowableTake$a.b` @type ^`org.reactivestreams.Subscription` := v6 @kind object;
  #L42384c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTake$a.d` @type ^`long` @kind wide;
  #L423850.  v2:= 0L;
  #L423854.  v4:= lcmp(v0, v2);
  #L423858.  if v4 != 0 then goto L423874;
  #L42385c.  call `cancel`(v6) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L423862.  v6:= 1I;
  #L423864.  v5.`io.reactivex.internal.operators.flowable.FlowableTake$a.a` @type ^`boolean` := v6 @kind boolean;
  #L423868.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableTake$a.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L42386c.  call `complete`(v6) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.complete:(Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L423872.  goto L42387e;
  #L423874.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableTake$a.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L423878.  call `onSubscribe`(v6, v5) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L42387e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTake$a` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L423890.  call temp:= `validate`(v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L423896.  v0:= temp;
  #L423898.  if v0 != 0 then goto L42389e;
  #L42389c.  return @kind void;
  #L42389e.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4238a4.  v0:= temp;
  #L4238a6.  if v0 != 0 then goto L4238dc;
  #L4238aa.  v0:= 0I;
  #L4238ac.  v1:= 1I;
  #L4238ae.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4238b4.  v0:= temp;
  #L4238b6.  if v0 == 0 then goto L4238dc;
  #L4238ba.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTake$a.d` @type ^`long` @kind wide;
  #L4238be.  v2:= lcmp(v4, v0);
  #L4238c2.  if v2 < 0 then goto L4238dc;
  #L4238c6.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableTake$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4238ca.  v0:= 9223372036854775807L;
  #L4238d4.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4238da.  return @kind void;
  #L4238dc.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTake$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4238e0.  call `request`(v0, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4238e6.  return @kind void;
}
