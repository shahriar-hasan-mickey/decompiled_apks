record `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$b` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.f` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.g` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `int` v2 , `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.<init>:(Lio/reactivex/SingleObserver;ILio/reactivex/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L421744.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L42174a.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L42174e.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.b` @type ^`io.reactivex.functions.BiPredicate` := v3 @kind object;
  #L421752.  v1:= new `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c`;
  #L421756.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$b;I)V` @kind direct;
  #L42175c.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` := v1 @kind object;
  #L421760.  v1:= new `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c`;
  #L421764.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$b;I)V` @kind direct;
  #L42176a.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` := v1 @kind object;
  #L42176e.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L421772.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L421778.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L42177c.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L421a98.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L421a9c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L421aa2.  v0:= temp;
  #L421aa4.  if v0 == 0 then goto L421ab0;
  #L421aa8.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.drain:()V` @kind virtual;
  #L421aae.  goto L421ab6;
  #L421ab0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L421ab6.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L421790.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L421794.  call `a`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.a:()V` @kind virtual;
  #L42179a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L42179e.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L4217a4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4217a8.  call `a`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.a:()V` @kind virtual;
  #L4217ae.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4217b2.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L4217b8.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.c:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)V` @AccessFlag  {
    temp;
    v0;

  #L421ac8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L421acc.  call `subscribe`(v2, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L421ad2.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L421ad6.  call `subscribe`(v3, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L421adc.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4217cc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4217d0.  call `a`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.a:()V` @kind virtual;
  #L4217d6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4217da.  call `a`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.a:()V` @kind virtual;
  #L4217e0.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4217e6.  v0:= temp;
  #L4217e8.  if v0 != 0 then goto L421800;
  #L4217ec.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4217f0.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L4217f6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4217fa.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L421800.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a` v10 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.drain:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L421814.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L42181a.  v0:= temp;
  #L42181c.  if v0 == 0 then goto L421822;
  #L421820.  return @kind void;
  #L421822.  v0:= 1I;
  #L421824.  v1:= 1I;
  #L421826.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L42182a.  v2:= v2.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L42182e.  v3:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L421832.  v3:= v3.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L421836.  if v2 == 0 then goto L421a04;
  #L42183a.  if v3 == 0 then goto L421a04;
  #L42183e.  call temp:= `isDisposed`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.isDisposed:()Z` @kind virtual;
  #L421844.  v4:= temp;
  #L421846.  if v4 == 0 then goto L421860;
  #L42184a.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L42184e.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L421854.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L421858.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L42185e.  return @kind void;
  #L421860.  v4:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L421864.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42186a.  v4:= temp @kind object;
  #L42186c.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L421870.  if v4 == 0 then goto L421892;
  #L421874.  call `b`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L42187a.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42187e.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L421882.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L421888.  v1:= temp @kind object;
  #L42188a.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L421890.  return @kind void;
  #L421892.  v4:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L421896.  v4:= v4.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c.f` @type ^`boolean` @kind boolean;
  #L42189a.  v5:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.f` @type ^`java.lang.Object` @kind object;
  #L42189e.  if v5 != 0 then goto L4218e0;
  #L4218a2.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4218a8.  v5:= temp @kind object;
  #L4218aa.  v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.f` @type ^`java.lang.Object` := v5 @kind object;
  #L4218ae.  goto L4218e0;
  #L4218b0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4218b2.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4218b8.  call `b`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L4218be.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4218c2.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4218c8.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4218cc.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4218d0.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4218d6.  v1:= temp @kind object;
  #L4218d8.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4218de.  return @kind void;
  #L4218e0.  v6:= 0I;
  #L4218e2.  if v5 != 0 then goto L4218ea;
  #L4218e6.  v7:= 1I;
  #L4218e8.  goto L4218ec;
  #L4218ea.  v7:= 0I;
  #L4218ec.  v8:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4218f0.  v8:= v8.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c.f` @type ^`boolean` @kind boolean;
  #L4218f4.  v9:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.g` @type ^`java.lang.Object` @kind object;
  #L4218f8.  if v9 != 0 then goto L42193a;
  #L4218fc.  call temp:= `poll`(v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L421902.  v9:= temp @kind object;
  #L421904.  v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.g` @type ^`java.lang.Object` := v9 @kind object;
  #L421908.  goto L42193a;
  #L42190a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42190c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L421912.  call `b`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L421918.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42191c.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L421922.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L421926.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42192a.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L421930.  v1:= temp @kind object;
  #L421932.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L421938.  return @kind void;
  #L42193a.  if v9 != 0 then goto L421940;
  #L42193e.  v6:= 1I;
  #L421940.  if v4 == 0 then goto L421960;
  #L421944.  if v8 == 0 then goto L421960;
  #L421948.  if v7 == 0 then goto L421960;
  #L42194c.  if v6 == 0 then goto L421960;
  #L421950.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L421954.  v1:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L421958.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L42195e.  return @kind void;
  #L421960.  if v4 == 0 then goto L421982;
  #L421964.  if v8 == 0 then goto L421982;
  #L421968.  if v7 == v6 then goto L421982;
  #L42196c.  call `b`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L421972.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L421976.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L42197a.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L421980.  return @kind void;
  #L421982.  if v7 != 0 then goto L421a58;
  #L421986.  if v6 == 0 then goto L42198c;
  #L42198a.  goto L421a58;
  #L42198c.  v4:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.b` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L421990.  call temp:= `test`(v4, v5, v9) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L421996.  v4:= temp;
  #L421998.  if v4 != 0 then goto L4219b2;
  #L42199c.  call `b`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L4219a2.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4219a6.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L4219aa.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4219b0.  return @kind void;
  #L4219b2.  v4:= 0I;
  #L4219b4.  v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.f` @type ^`java.lang.Object` := v4 @kind object;
  #L4219b8.  v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.g` @type ^`java.lang.Object` := v4 @kind object;
  #L4219bc.  v4:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4219c0.  call `c`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.c:()V` @kind virtual;
  #L4219c6.  v4:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4219ca.  call `c`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.c:()V` @kind virtual;
  #L4219d0.  goto L42183e;
  #L4219d4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4219d6.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4219dc.  call `b`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L4219e2.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4219e6.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4219ec.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4219f0.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4219f4.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4219fa.  v1:= temp @kind object;
  #L4219fc.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L421a02.  return @kind void;
  #L421a04.  call temp:= `isDisposed`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.isDisposed:()Z` @kind virtual;
  #L421a0a.  v2:= temp;
  #L421a0c.  if v2 == 0 then goto L421a26;
  #L421a10.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L421a14.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L421a1a.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L421a1e.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L421a24.  return @kind void;
  #L421a26.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L421a2a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L421a30.  v2:= temp @kind object;
  #L421a32.  v2:= (`java.lang.Throwable`) v2 @kind object;
  #L421a36.  if v2 == 0 then goto L421a58;
  #L421a3a.  call `b`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L421a40.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L421a44.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L421a48.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L421a4e.  v1:= temp @kind object;
  #L421a50.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L421a56.  return @kind void;
  #L421a58.  v1:= -v1 @kind int;
  #L421a5a.  call temp:= `addAndGet`(v10, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L421a60.  v1:= temp;
  #L421a62.  if v1 != 0 then goto L421826;
  #L421a66.  return @kind void;
  catch `java.lang.Throwable` @[L4218a2..L4218aa] goto L4218b0;
  catch `java.lang.Throwable` @[L4218fc..L421904] goto L42190a;
  catch `java.lang.Throwable` @[L42198c..L421998] goto L4219d4;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L421718.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L42171c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L421722.  v0:= temp @kind object;
  #L421724.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L421728.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.isCancelled:(Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L42172e.  v0:= temp;
  #L421730.  return v0;
}
