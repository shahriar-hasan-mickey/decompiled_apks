record `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.b` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.d` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.g` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a;.<init>:(Lio/reactivex/CompletableObserver;Lio/reactivex/functions/Function;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L414274.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L41427a.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.a` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L41427e.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.c` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L414282.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.d` @type ^`boolean` := v3 @kind boolean;
  #L414286.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L41428a.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L414290.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L414294.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L414298.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L41429e.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L4142a2.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.f` @type ^`int` := v4;
  #L4142a6.  v1:= 1I;
  #L4142a8.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4142ae.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a$a` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a;.a:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a$a;)V` @AccessFlag  {
    temp;
    v0;

  #L4142e8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4142ec.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4142f2.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a;.onComplete:()V` @kind virtual;
  #L4142f8.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a$a` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a;.b:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L41430c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L414310.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L414316.  call `onError`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41431c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4142c0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4142c4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4142ca.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4142ce.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4142d4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L414254.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L414258.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.isDisposed:()Z` @kind virtual;
  #L41425e.  v0:= temp;
  #L414260.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L414330.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L414336.  v0:= temp;
  #L414338.  if v0 != 0 then goto L414364;
  #L41433c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L414340.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L414346.  v0:= temp @kind object;
  #L414348.  if v0 == 0 then goto L414358;
  #L41434c.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L414350.  call `onError`(v1, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L414356.  goto L414380;
  #L414358.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L41435c.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L414362.  goto L414380;
  #L414364.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.f` @type ^`int`;
  #L414368.  v1:= 2147483647I;
  #L41436e.  if v0 == v1 then goto L414380;
  #L414372.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L414376.  v1:= 1L;
  #L41437a.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L414380.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L414394.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L414398.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L41439e.  v0:= temp;
  #L4143a0.  if v0 == 0 then goto L41441a;
  #L4143a4.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.d` @type ^`boolean` @kind boolean;
  #L4143a8.  if v3 == 0 then goto L4143ee;
  #L4143ac.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4143b2.  v3:= temp;
  #L4143b4.  if v3 != 0 then goto L4143d0;
  #L4143b8.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4143bc.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4143c2.  v3:= temp @kind object;
  #L4143c4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L4143c8.  call `onError`(v0, v3) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4143ce.  goto L414420;
  #L4143d0.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.f` @type ^`int`;
  #L4143d4.  v0:= 2147483647I;
  #L4143da.  if v3 == v0 then goto L414420;
  #L4143de.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4143e2.  v0:= 1L;
  #L4143e6.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4143ec.  goto L414420;
  #L4143ee.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a;.dispose:()V` @kind virtual;
  #L4143f4.  v3:= 0I;
  #L4143f6.  call temp:= `getAndSet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L4143fc.  v3:= temp;
  #L4143fe.  if v3 <= 0 then goto L414420;
  #L414402.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L414406.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L41440c.  v3:= temp @kind object;
  #L41440e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L414412.  call `onError`(v0, v3) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L414418.  goto L414420;
  #L41441a.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L414420.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L414434.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.c` @type ^`io.reactivex.functions.Function` @kind object;
  #L414438.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L41443e.  v3:= temp @kind object;
  #L414440.  v0:= "The mapper returned a null CompletableSource" @kind object;
  #L414444.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41444a.  v3:= temp @kind object;
  #L41444c.  v3:= (`io.reactivex.CompletableSource`) v3 @kind object;
  #L414450.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L414456.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a$a`;
  #L41445a.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a;)V` @kind direct;
  #L414460.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L414464.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L41446a.  v1:= temp;
  #L41446c.  if v1 == 0 then goto L414476;
  #L414470.  call `subscribe`(v3, v0) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L414476.  return @kind void;
  #L414478.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41447a.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L414480.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L414484.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L41448a.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L414490.  return @kind void;
  catch `java.lang.Throwable` @[L414434..L414450] goto L414478;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4144b0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4144b4.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4144ba.  v0:= temp;
  #L4144bc.  if v0 == 0 then goto L4144f6;
  #L4144c0.  v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.g` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4144c4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L4144c8.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4144ce.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.f` @type ^`int`;
  #L4144d2.  v1:= 2147483647I;
  #L4144d8.  if v0 != v1 then goto L4144ee;
  #L4144dc.  v0:= 9223372036854775807L;
  #L4144e6.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4144ec.  goto L4144f6;
  #L4144ee.  v0:= (`long`) v0 @kind i2l;
  #L4144f0.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4144f6.  return @kind void;
}
