record `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$b` @kind class @AccessFlag FINAL extends `io.reactivex.subscribers.DisposableSubscriber` @kind class {
  `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$b.b` @AccessFlag FINAL;
  `java.util.Collection` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$b.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$b` v0 @kind this, `java.util.Collection` v1 @kind object, `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$b;.<init>:(Ljava/util/Collection;Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40b744.  call `<init>`(v0) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.<init>:()V` @kind direct;
  #L40b74a.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$b.b` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` := v2 @kind object;
  #L40b74e.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$b.c` @type ^`java.util.Collection` := v1 @kind object;
  #L40b752.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40b764.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$b.d` @type ^`boolean` @kind boolean;
  #L40b768.  if v0 == 0 then goto L40b76e;
  #L40b76c.  return @kind void;
  #L40b76e.  v0:= 1I;
  #L40b770.  v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$b.d` @type ^`boolean` := v0 @kind boolean;
  #L40b774.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$b.b` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` @kind object;
  #L40b778.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$b.c` @type ^`java.util.Collection` @kind object;
  #L40b77c.  call `b`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.b:(Ljava/util/Collection;Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L40b782.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40b794.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$b.d` @type ^`boolean` @kind boolean;
  #L40b798.  if v0 == 0 then goto L40b7a4;
  #L40b79c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40b7a2.  return @kind void;
  #L40b7a4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$b.b` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` @kind object;
  #L40b7a8.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40b7ae.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L40b7c0.  call `onComplete`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$b;.onComplete:()V` @kind virtual;
  #L40b7c6.  return @kind void;
}
