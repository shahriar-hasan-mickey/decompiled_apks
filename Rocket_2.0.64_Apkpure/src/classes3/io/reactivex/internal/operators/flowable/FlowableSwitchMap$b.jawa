record `io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.e` @AccessFlag VOLATILE;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.g` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.h` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.j` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.k` @AccessFlag VOLATILE;
}
global `io.reactivex.internal.operators.flowable.FlowableSwitchMap$a` `@@io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.l` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L423164.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSwitchMap$a`;
  #L423168.  v1:= 0I;
  #L42316a.  v2:= -1L;
  #L42316e.  v4:= 1I;
  #L423170.  call `<init>`(v0, v1, v2, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;JI)V` @kind direct;
  #L423176.  `@@io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.l` @type ^`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a` := v0 @kind object;
  #L42317a.  call `a`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$a;.a:()V` @kind virtual;
  #L423180.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 , `boolean` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L423194.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L42319a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L42319e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4231a4.  v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4231a8.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4231ac.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4231b2.  v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.j` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L4231b6.  v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4231ba.  v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.b` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L4231be.  v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.c` @type ^`int` := v4;
  #L4231c2.  v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.d` @type ^`boolean` := v5 @kind boolean;
  #L4231c6.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L4231ca.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4231d0.  v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L4231d4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L423218.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42321c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L423222.  v0:= temp @kind object;
  #L423224.  v0:= (`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a`) v0 @kind object;
  #L423228.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.l` @type ^`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a` @kind object;
  #L42322c.  if v0 == v1 then goto L42324e;
  #L423230.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L423234.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L42323a.  v0:= temp @kind object;
  #L42323c.  v0:= (`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a`) v0 @kind object;
  #L423240.  if v0 == v1 then goto L42324e;
  #L423244.  if v0 == 0 then goto L42324e;
  #L423248.  call `a`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$a;.a:()V` @kind virtual;
  #L42324e.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` v17 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L423260.  v1:= v17 @kind object;
  #L423264.  call temp:= `getAndIncrement`(v17) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L42326a.  v0:= temp;
  #L42326c.  if v0 == 0 then goto L423272;
  #L423270.  return @kind void;
  #L423272.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L423276.  v4:= 1I;
  #L423278.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L42327c.  v5:= 0I;
  #L42327e.  if v0 == 0 then goto L42328e;
  #L423282.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L423286.  call `lazySet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L42328c.  return @kind void;
  #L42328e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.e` @type ^`boolean` @kind boolean;
  #L423292.  if v0 == 0 then goto L423324;
  #L423296.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L42329a.  if v0 == 0 then goto L4232de;
  #L42329e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4232a2.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4232a8.  v0:= temp @kind object;
  #L4232aa.  if v0 != 0 then goto L423324;
  #L4232ae.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4232b2.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4232b8.  v0:= temp @kind object;
  #L4232ba.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L4232be.  if v0 == 0 then goto L4232d6;
  #L4232c2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4232c6.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4232cc.  v0:= temp @kind object;
  #L4232ce.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4232d4.  goto L4232dc;
  #L4232d6.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4232dc.  return @kind void;
  #L4232de.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4232e2.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4232e8.  v0:= temp @kind object;
  #L4232ea.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L4232ee.  if v0 == 0 then goto L42330c;
  #L4232f2.  call `a`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.a:()V` @kind virtual;
  #L4232f8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4232fc.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L423302.  v0:= temp @kind object;
  #L423304.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42330a.  return @kind void;
  #L42330c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L423310.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L423316.  v0:= temp @kind object;
  #L423318.  if v0 != 0 then goto L423324;
  #L42331c.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L423322.  return @kind void;
  #L423324.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L423328.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42332e.  v0:= temp @kind object;
  #L423330.  v6:= v0 @kind object;
  #L423332.  v6:= (`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a`) v6 @kind object;
  #L423336.  if v6 == 0 then goto L423342;
  #L42333a.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L42333e.  v7:= v0 @kind object;
  #L423340.  goto L423344;
  #L423342.  v7:= v5 @kind object;
  #L423344.  if v7 == 0 then goto L4234de;
  #L423348.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.e` @type ^`boolean` @kind boolean;
  #L42334c.  if v0 == 0 then goto L4233ba;
  #L423350.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L423354.  if v0 != 0 then goto L4233a0;
  #L423358.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42335c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L423362.  v0:= temp @kind object;
  #L423364.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L423368.  if v0 == 0 then goto L423386;
  #L42336c.  call `a`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.a:()V` @kind virtual;
  #L423372.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L423376.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L42337c.  v0:= temp @kind object;
  #L42337e.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L423384.  return @kind void;
  #L423386.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L42338c.  v0:= temp;
  #L42338e.  if v0 == 0 then goto L4233ba;
  #L423392.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L423396.  call temp:= `compareAndSet`(v0, v6, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L42339c.  goto L423278;
  #L4233a0.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4233a6.  v0:= temp;
  #L4233a8.  if v0 == 0 then goto L4233ba;
  #L4233ac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4233b0.  call temp:= `compareAndSet`(v0, v6, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4233b6.  goto L423278;
  #L4233ba.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.j` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4233be.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4233c4.  v8:= temp @kind wide;
  #L4233c6.  v10:= 0L;
  #L4233ca.  v12:= v10 @kind wide;
  #L4233cc.  v14:= 0I;
  #L4233ce.  v0:= lcmp(v12, v8);
  #L4233d2.  if v0 == 0 then goto L423496;
  #L4233d6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L4233da.  if v0 == 0 then goto L4233e0;
  #L4233de.  return @kind void;
  #L4233e0.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.e` @type ^`boolean` @kind boolean;
  #L4233e4.  call temp:= `poll`(v7) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4233ea.  v15:= temp @kind object;
  #L4233ec.  goto L42340c;
  #L4233ee.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4233f0.  v15:= v0 @kind object;
  #L4233f2.  call `throwIfFatal`(v15) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4233f8.  call `a`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$a;.a:()V` @kind virtual;
  #L4233fe.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L423402.  call temp:= `addThrowable`(v0, v15) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L423408.  v15:= v5 @kind object;
  #L42340a.  v0:= 1I;
  #L42340c.  if v15 != 0 then goto L423416;
  #L423410.  v16:= 1I;
  #L423414.  goto L42341a;
  #L423416.  v16:= 0I;
  #L42341a.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42341e.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L423424.  v3:= temp @kind object;
  #L423426.  if v6 == v3 then goto L42342e;
  #L42342a.  v14:= 1I;
  #L42342c.  goto L423496;
  #L42342e.  if v0 == 0 then goto L423482;
  #L423432.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L423436.  if v0 != 0 then goto L423472;
  #L42343a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42343e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L423444.  v0:= temp @kind object;
  #L423446.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L42344a.  if v0 == 0 then goto L423462;
  #L42344e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L423452.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L423458.  v0:= temp @kind object;
  #L42345a.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L423460.  return @kind void;
  #L423462.  if v16 == 0 then goto L423482;
  #L423466.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42346a.  call temp:= `compareAndSet`(v0, v6, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L423470.  goto L42342a;
  #L423472.  if v16 == 0 then goto L423482;
  #L423476.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42347a.  call temp:= `compareAndSet`(v0, v6, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L423480.  goto L42342a;
  #L423482.  if v16 == 0 then goto L423488;
  #L423486.  goto L423496;
  #L423488.  call `onNext`(v2, v15) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42348e.  v14:= 1L;
  #L423492.  v12:= v12 + v14 @kind long;
  #L423494.  goto L4233cc;
  #L423496.  v0:= lcmp(v12, v10);
  #L42349a.  if v0 == 0 then goto L4234d6;
  #L42349e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L4234a2.  if v0 != 0 then goto L4234d6;
  #L4234a6.  v10:= 9223372036854775807L;
  #L4234b0.  v0:= lcmp(v8, v10);
  #L4234b4.  if v0 == 0 then goto L4234c4;
  #L4234b8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.j` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4234bc.  v7:= -v12 @kind long;
  #L4234be.  call temp:= `addAndGet`(v0, v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4234c4.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4234ca.  v0:= temp @kind object;
  #L4234cc.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4234d0.  call `request`(v0, v12) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4234d6.  if v14 == 0 then goto L4234de;
  #L4234da.  goto L423278;
  #L4234de.  v0:= -v4 @kind int;
  #L4234e0.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4234e6.  v4:= temp;
  #L4234e8.  if v4 != 0 then goto L423278;
  #L4234ec.  return @kind void;
  catch `java.lang.Throwable` @[L4233e4..L4233ec] goto L4233ee;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4231e8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L4231ec.  if v0 != 0 then goto L423206;
  #L4231f0.  v0:= 1I;
  #L4231f2.  v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.g` @type ^`boolean` := v0 @kind boolean;
  #L4231f6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4231fa.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L423200.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.a:()V` @kind virtual;
  #L423206.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42350c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.e` @type ^`boolean` @kind boolean;
  #L423510.  if v0 == 0 then goto L423516;
  #L423514.  return @kind void;
  #L423516.  v0:= 1I;
  #L423518.  v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.e` @type ^`boolean` := v0 @kind boolean;
  #L42351c.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @kind virtual;
  #L423522.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L423534.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.e` @type ^`boolean` @kind boolean;
  #L423538.  if v0 != 0 then goto L423568;
  #L42353c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L423540.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L423546.  v0:= temp;
  #L423548.  if v0 == 0 then goto L423568;
  #L42354c.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L423550.  if v2 != 0 then goto L42355a;
  #L423554.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.a:()V` @kind virtual;
  #L42355a.  v2:= 1I;
  #L42355c.  v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.e` @type ^`boolean` := v2 @kind boolean;
  #L423560.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @kind virtual;
  #L423566.  goto L42356e;
  #L423568.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42356e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L423580.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.e` @type ^`boolean` @kind boolean;
  #L423584.  if v0 == 0 then goto L42358a;
  #L423588.  return @kind void;
  #L42358a.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.k` @type ^`long` @kind wide;
  #L42358e.  v2:= 1L;
  #L423592.  v0:= v0 + v2 @kind long;
  #L423594.  v4.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.k` @type ^`long` := v0 @kind wide;
  #L423598.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42359c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4235a2.  v2:= temp @kind object;
  #L4235a4.  v2:= (`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a`) v2 @kind object;
  #L4235a8.  if v2 == 0 then goto L4235b2;
  #L4235ac.  call `a`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$a;.a:()V` @kind virtual;
  #L4235b2.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L4235b6.  call temp:= `apply`(v2, v5) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4235bc.  v5:= temp @kind object;
  #L4235be.  v2:= "The publisher returned is null" @kind object;
  #L4235c2.  call temp:= `requireNonNull`(v5, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4235c8.  v5:= temp @kind object;
  #L4235ca.  v5:= (`org.reactivestreams.Publisher`) v5 @kind object;
  #L4235ce.  v2:= new `io.reactivex.internal.operators.flowable.FlowableSwitchMap$a`;
  #L4235d2.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.c` @type ^`int`;
  #L4235d6.  call `<init>`(v2, v4, v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;JI)V` @kind direct;
  #L4235dc.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4235e0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4235e6.  v0:= temp @kind object;
  #L4235e8.  v0:= (`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a`) v0 @kind object;
  #L4235ec.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.l` @type ^`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a` @kind object;
  #L4235f0.  if v0 != v1 then goto L4235f6;
  #L4235f4.  goto L42360c;
  #L4235f6.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4235fa.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L423600.  v0:= temp;
  #L423602.  if v0 == 0 then goto L4235dc;
  #L423606.  call `subscribe`(v5, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L42360c.  return @kind void;
  #L42360e.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L423610.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L423616.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L42361a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L423620.  call `onError`(v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L423626.  return @kind void;
  catch `java.lang.Throwable` @[L4235b2..L4235ce] goto L42360e;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L423644.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L423648.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L42364e.  v0:= temp;
  #L423650.  if v0 == 0 then goto L423662;
  #L423654.  v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.h` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L423658.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L42365c.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L423662.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L423674.  call temp:= `validate`(v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L42367a.  v0:= temp;
  #L42367c.  if v0 == 0 then goto L4236b6;
  #L423680.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.j` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L423684.  call temp:= `add`(v0, v4) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L42368a.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.k` @type ^`long` @kind wide;
  #L42368e.  v0:= 0L;
  #L423692.  v2:= lcmp(v4, v0);
  #L423696.  if v2 != 0 then goto L4236b0;
  #L42369a.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L42369e.  v0:= 9223372036854775807L;
  #L4236a8.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4236ae.  goto L4236b6;
  #L4236b0.  call `b`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @kind virtual;
  #L4236b6.  return @kind void;
}
