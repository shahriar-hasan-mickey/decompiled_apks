record `io.reactivex.internal.operators.flowable.FlowableSkipWhile$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipWhile$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L422a14.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L422a1a.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L422a1e.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.b` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L422a22.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipWhile$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L422a34.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L422a38.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L422a3e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipWhile$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L422a50.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L422a54.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L422a5a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipWhile$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L422a6c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L422a70.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L422a76.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipWhile$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L422a88.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.d` @type ^`boolean` @kind boolean;
  #L422a8c.  if v0 == 0 then goto L422a9c;
  #L422a90.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L422a94.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L422a9a.  goto L422acc;
  #L422a9c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.b` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L422aa0.  call temp:= `test`(v0, v3) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L422aa6.  v0:= temp;
  #L422aa8.  if v0 == 0 then goto L422abc;
  #L422aac.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L422ab0.  v0:= 1L;
  #L422ab4.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L422aba.  goto L422acc;
  #L422abc.  v0:= 1I;
  #L422abe.  v2.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.d` @type ^`boolean` := v0 @kind boolean;
  #L422ac2.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L422ac6.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L422acc.  return @kind void;
  #L422ace.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L422ad0.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L422ad6.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L422ada.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L422ae0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L422ae4.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L422aea.  return @kind void;
  catch `java.lang.Throwable` @[L422a9c..L422aa8] goto L422ace;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipWhile$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L422b08.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L422b0c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L422b12.  v0:= temp;
  #L422b14.  if v0 == 0 then goto L422b26;
  #L422b18.  v1.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L422b1c.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L422b20.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L422b26.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipWhile$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L422b38.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L422b3c.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L422b42.  return @kind void;
}
