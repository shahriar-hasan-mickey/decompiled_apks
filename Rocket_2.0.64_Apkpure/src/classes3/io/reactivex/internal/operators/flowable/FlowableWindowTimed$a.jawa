record `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.d` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.g` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.h` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.i` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.j` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.k` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.l` @AccessFlag ;
  `io.reactivex.processors.UnicastProcessor` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.m` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.n` @AccessFlag VOLATILE;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.o` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object, `int` v7 , `long` v8 , `boolean` v10 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IJZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L427ad0.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L427ad4.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L427ada.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L427ae0.  v2:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L427ae4.  call `<init>`(v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L427aea.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.o` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v2 @kind object;
  #L427aee.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.c` @type ^`long` := v3 @kind wide;
  #L427af2.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L427af6.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.e` @type ^`io.reactivex.Scheduler` := v6 @kind object;
  #L427afa.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.f` @type ^`int` := v7;
  #L427afe.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.h` @type ^`long` := v8 @kind wide;
  #L427b02.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`boolean` := v10 @kind boolean;
  #L427b06.  if v10 == 0 then goto L427b18;
  #L427b0a.  call temp:= `createWorker`(v6) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L427b10.  v2:= temp @kind object;
  #L427b12.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.i` @type ^`io.reactivex.Scheduler$Worker` := v2 @kind object;
  #L427b16.  goto L427b1e;
  #L427b18.  v2:= 0I;
  #L427b1a.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.i` @type ^`io.reactivex.Scheduler$Worker` := v2 @kind object;
  #L427b1e.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a` v0 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.a:(Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;)Z` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L427aa0.  v0:= v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L427aa4.  return v0;
}
procedure `io.reactivex.internal.fuseable.SimplePlainQueue` `b`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a` v0 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.b:(Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;)Lio/reactivex/internal/fuseable/SimplePlainQueue;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L427ab8.  v0:= v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L427abc.  return v0 @kind object;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a` v17 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L427b74.  v0:= v17 @kind object;
  #L427b78.  v1:= v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L427b7c.  v2:= v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L427b80.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L427b84.  v5:= 1I;
  #L427b86.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.n` @type ^`boolean` @kind boolean;
  #L427b8a.  if v6 == 0 then goto L427ba6;
  #L427b8e.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L427b92.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L427b98.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L427b9e.  call `dispose`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.dispose:()V` @kind virtual;
  #L427ba4.  return @kind void;
  #L427ba6.  v6:= v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` @kind boolean;
  #L427baa.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L427bb0.  v7:= temp @kind object;
  #L427bb2.  if v7 != 0 then goto L427bba;
  #L427bb6.  v8:= 1I;
  #L427bb8.  goto L427bbc;
  #L427bba.  v8:= 0I;
  #L427bbc.  v9:= instanceof @variable v7 @type ^`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a$a` @kind boolean;
  #L427bc0.  v10:= 0I;
  #L427bc2.  if v6 == 0 then goto L427bf6;
  #L427bc6.  if v8 != 0 then goto L427bce;
  #L427bca.  if v9 == 0 then goto L427bf6;
  #L427bce.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`io.reactivex.processors.UnicastProcessor` := v10 @kind object;
  #L427bd2.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L427bd8.  v1:= v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L427bdc.  if v1 == 0 then goto L427be8;
  #L427be0.  call `onError`(v3, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L427be6.  goto L427bee;
  #L427be8.  call `onComplete`(v3) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L427bee.  call `dispose`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.dispose:()V` @kind virtual;
  #L427bf4.  return @kind void;
  #L427bf6.  if v8 == 0 then goto L427c0a;
  #L427bfa.  v5:= -v5 @kind int;
  #L427bfc.  call temp:= `leave`(v0, v5) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L427c02.  v5:= temp;
  #L427c04.  if v5 != 0 then goto L427b86;
  #L427c08.  return @kind void;
  #L427c0a.  v11:= 9223372036854775807L;
  #L427c14.  v13:= 0L;
  #L427c18.  v8:= v5;
  #L427c1a.  if v9 == 0 then goto L427cb8;
  #L427c1e.  v7:= (`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a$a`) v7 @kind object;
  #L427c22.  v9:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`boolean` @kind boolean;
  #L427c26.  if v9 != 0 then goto L427c40;
  #L427c2a.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`long` @kind wide;
  #L427c2e.  v6:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a$a.a` @type ^`long` @kind wide;
  #L427c32.  v16:= lcmp(v4, v6);
  #L427c36.  if v16 != 0 then goto L427c3c;
  #L427c3a.  goto L427c40;
  #L427c3c.  v5:= v8;
  #L427c3e.  goto L427b86;
  #L427c40.  call `onComplete`(v3) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L427c46.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`long` := v13 @kind wide;
  #L427c4a.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.f` @type ^`int`;
  #L427c4e.  call temp:= `create`(v3) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L427c54.  v3:= temp @kind object;
  #L427c56.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`io.reactivex.processors.UnicastProcessor` := v3 @kind object;
  #L427c5a.  call temp:= `requested`(v17) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:()J` @kind virtual;
  #L427c60.  v4:= temp @kind wide;
  #L427c62.  v6:= lcmp(v4, v13);
  #L427c66.  if v6 == 0 then goto L427c84;
  #L427c6a.  call `onNext`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L427c70.  v6:= lcmp(v4, v11);
  #L427c74.  if v6 == 0 then goto L427c3c;
  #L427c78.  v4:= 1L;
  #L427c7c.  call temp:= `produced`(v0, v4) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L427c82.  goto L427c3c;
  #L427c84.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`io.reactivex.processors.UnicastProcessor` := v10 @kind object;
  #L427c88.  v1:= v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L427c8c.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L427c92.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L427c96.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L427c9c.  v1:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L427ca0.  v3:= "Could not deliver first window due to lack of requests." @kind object;
  #L427ca4.  call `<init>`(v1, v3) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L427caa.  call `onError`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L427cb0.  call `dispose`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.dispose:()V` @kind virtual;
  #L427cb6.  return @kind void;
  #L427cb8.  call temp:= `getValue`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L427cbe.  v4:= temp @kind object;
  #L427cc0.  call `onNext`(v3, v4) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L427cc6.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`long` @kind wide;
  #L427cca.  v6:= 1L;
  #L427cce.  v4:= v4 + v6 @kind long;
  #L427cd0.  v9:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.h` @type ^`long` @kind wide;
  #L427cd4.  v15:= lcmp(v4, v9);
  #L427cd8.  if v15 < 0 then goto L427dba;
  #L427cdc.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`long` @kind wide;
  #L427ce0.  v4:= v4 + v6 @kind long;
  #L427ce2.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`long` := v4 @kind wide;
  #L427ce6.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`long` := v13 @kind wide;
  #L427cea.  call `onComplete`(v3) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L427cf0.  call temp:= `requested`(v17) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:()J` @kind virtual;
  #L427cf6.  v3:= temp @kind wide;
  #L427cf8.  v5:= lcmp(v3, v13);
  #L427cfc.  if v5 == 0 then goto L427d8a;
  #L427d00.  v5:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.f` @type ^`int`;
  #L427d04.  call temp:= `create`(v5) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L427d0a.  v5:= temp @kind object;
  #L427d0c.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`io.reactivex.processors.UnicastProcessor` := v5 @kind object;
  #L427d10.  v6:= v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L427d14.  call `onNext`(v6, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L427d1a.  v6:= lcmp(v3, v11);
  #L427d1e.  if v6 == 0 then goto L427d2c;
  #L427d22.  v3:= 1L;
  #L427d26.  call temp:= `produced`(v0, v3) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L427d2c.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`boolean` @kind boolean;
  #L427d30.  if v3 == 0 then goto L427d84;
  #L427d34.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.o` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L427d38.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L427d3e.  v3:= temp @kind object;
  #L427d40.  v3:= (`io.reactivex.disposables.Disposable`) v3 @kind object;
  #L427d44.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L427d4a.  v9:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.i` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L427d4e.  v10:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a$a`;
  #L427d52.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`long` @kind wide;
  #L427d56.  call `<init>`(v10, v6, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a$a;.<init>:(JLio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;)V` @kind direct;
  #L427d5c.  v13:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.c` @type ^`long` @kind wide;
  #L427d60.  v15:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L427d64.  v11:= v13 @kind wide;
  #L427d66.  call temp:= `schedulePeriodically`(v9, v10, v11, v13, v15) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L427d6c.  v4:= temp @kind object;
  #L427d6e.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.o` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L427d72.  call temp:= `compareAndSet`(v6, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L427d78.  v3:= temp;
  #L427d7a.  if v3 != 0 then goto L427d84;
  #L427d7e.  call `dispose`(v4) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L427d84.  v3:= v5 @kind object;
  #L427d86.  goto L427c3c;
  #L427d8a.  v3:= 0I;
  #L427d8c.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`io.reactivex.processors.UnicastProcessor` := v3 @kind object;
  #L427d90.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L427d94.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L427d9a.  v1:= v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L427d9e.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L427da2.  v3:= "Could not deliver window due to lack of requests" @kind object;
  #L427da6.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L427dac.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L427db2.  call `dispose`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.dispose:()V` @kind virtual;
  #L427db8.  return @kind void;
  #L427dba.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`long` := v4 @kind wide;
  #L427dbe.  goto L427c3c;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L427b30.  v0:= 1I;
  #L427b32.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L427b36.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L427b48.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.o` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L427b4c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L427b52.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.i` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L427b56.  if v0 == 0 then goto L427b60;
  #L427b5a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L427b60.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L427dd4.  v0:= 1I;
  #L427dd6.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L427dda.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L427de0.  v0:= temp;
  #L427de2.  if v0 == 0 then goto L427dec;
  #L427de6.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.c:()V` @kind virtual;
  #L427dec.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L427df0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L427df6.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.dispose:()V` @kind virtual;
  #L427dfc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L427e10.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L427e14.  v0:= 1I;
  #L427e16.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L427e1a.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L427e20.  v0:= temp;
  #L427e22.  if v0 == 0 then goto L427e2c;
  #L427e26.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.c:()V` @kind virtual;
  #L427e2c.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L427e30.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L427e36.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.dispose:()V` @kind virtual;
  #L427e3c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L427e50.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.n` @type ^`boolean` @kind boolean;
  #L427e54.  if v0 == 0 then goto L427e5a;
  #L427e58.  return @kind void;
  #L427e5a.  call temp:= `fastEnter`(v7) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastEnter:()Z` @kind virtual;
  #L427e60.  v0:= temp;
  #L427e62.  if v0 == 0 then goto L427f7e;
  #L427e66.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L427e6a.  call `onNext`(v0, v8) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L427e70.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`long` @kind wide;
  #L427e74.  v3:= 1L;
  #L427e78.  v1:= v1 + v3 @kind long;
  #L427e7a.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.h` @type ^`long` @kind wide;
  #L427e7e.  v8:= lcmp(v1, v5);
  #L427e82.  if v8 < 0 then goto L427f6a;
  #L427e86.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`long` @kind wide;
  #L427e8a.  v1:= v1 + v3 @kind long;
  #L427e8c.  v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`long` := v1 @kind wide;
  #L427e90.  v1:= 0L;
  #L427e94.  v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`long` := v1 @kind wide;
  #L427e98.  call `onComplete`(v0) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L427e9e.  call temp:= `requested`(v7) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:()J` @kind virtual;
  #L427ea4.  v5:= temp @kind wide;
  #L427ea6.  v8:= lcmp(v5, v1);
  #L427eaa.  if v8 == 0 then goto L427f3a;
  #L427eae.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.f` @type ^`int`;
  #L427eb2.  call temp:= `create`(v8) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L427eb8.  v8:= temp @kind object;
  #L427eba.  v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L427ebe.  v0:= v7.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L427ec2.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L427ec8.  v0:= 9223372036854775807L;
  #L427ed2.  v8:= lcmp(v5, v0);
  #L427ed6.  if v8 == 0 then goto L427ee0;
  #L427eda.  call temp:= `produced`(v7, v3) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L427ee0.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`boolean` @kind boolean;
  #L427ee4.  if v8 == 0 then goto L427f6e;
  #L427ee8.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.o` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L427eec.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L427ef2.  v8:= temp @kind object;
  #L427ef4.  v8:= (`io.reactivex.disposables.Disposable`) v8 @kind object;
  #L427ef8.  call `dispose`(v8) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L427efe.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.i` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L427f02.  v1:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a$a`;
  #L427f06.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`long` @kind wide;
  #L427f0a.  call `<init>`(v1, v2, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a$a;.<init>:(JLio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;)V` @kind direct;
  #L427f10.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.c` @type ^`long` @kind wide;
  #L427f14.  v6:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L427f18.  v2:= v4 @kind wide;
  #L427f1a.  call temp:= `schedulePeriodically`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L427f20.  v0:= temp @kind object;
  #L427f22.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.o` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L427f26.  call temp:= `compareAndSet`(v1, v8, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L427f2c.  v8:= temp;
  #L427f2e.  if v8 != 0 then goto L427f6e;
  #L427f32.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L427f38.  goto L427f6e;
  #L427f3a.  v8:= 0I;
  #L427f3c.  v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L427f40.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L427f44.  call `cancel`(v8) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L427f4a.  v8:= v7.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L427f4e.  v0:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L427f52.  v1:= "Could not deliver window due to lack of requests" @kind object;
  #L427f56.  call `<init>`(v0, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L427f5c.  call `onError`(v8, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L427f62.  call `dispose`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.dispose:()V` @kind virtual;
  #L427f68.  return @kind void;
  #L427f6a.  v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`long` := v1 @kind wide;
  #L427f6e.  v8:= -1I;
  #L427f70.  call temp:= `leave`(v7, v8) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L427f76.  v8:= temp;
  #L427f78.  if v8 != 0 then goto L427f9e;
  #L427f7c.  return @kind void;
  #L427f7e.  v0:= v7.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L427f82.  call temp:= `next`(v8) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L427f88.  v8:= temp @kind object;
  #L427f8a.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L427f90.  call temp:= `enter`(v7) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L427f96.  v8:= temp;
  #L427f98.  if v8 != 0 then goto L427f9e;
  #L427f9c.  return @kind void;
  #L427f9e.  call `c`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.c:()V` @kind virtual;
  #L427fa4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a` v11 @kind this, `org.reactivestreams.Subscription` v12 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L427fb8.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L427fbc.  call temp:= `validate`(v0, v12) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L427fc2.  v0:= temp;
  #L427fc4.  if v0 == 0 then goto L4280a2;
  #L427fc8.  v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`org.reactivestreams.Subscription` := v12 @kind object;
  #L427fcc.  v0:= v11.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L427fd0.  call `onSubscribe`(v0, v11) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L427fd6.  v1:= v11.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L427fda.  if v1 == 0 then goto L427fe0;
  #L427fde.  return @kind void;
  #L427fe0.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.f` @type ^`int`;
  #L427fe4.  call temp:= `create`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L427fea.  v1:= temp @kind object;
  #L427fec.  v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`io.reactivex.processors.UnicastProcessor` := v1 @kind object;
  #L427ff0.  call temp:= `requested`(v11) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:()J` @kind virtual;
  #L427ff6.  v2:= temp @kind wide;
  #L427ff8.  v4:= 0L;
  #L427ffc.  v6:= lcmp(v2, v4);
  #L428000.  if v6 == 0 then goto L428082;
  #L428004.  call `onNext`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42800a.  v0:= 9223372036854775807L;
  #L428014.  v4:= lcmp(v2, v0);
  #L428018.  if v4 == 0 then goto L428026;
  #L42801c.  v2:= 1L;
  #L428020.  call temp:= `produced`(v11, v2) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L428026.  v5:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a$a`;
  #L42802a.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`long` @kind wide;
  #L42802e.  call `<init>`(v5, v2, v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a$a;.<init>:(JLio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;)V` @kind direct;
  #L428034.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`boolean` @kind boolean;
  #L428038.  if v2 == 0 then goto L428054;
  #L42803c.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.i` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L428040.  v8:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.c` @type ^`long` @kind wide;
  #L428044.  v10:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L428048.  v6:= v8 @kind wide;
  #L42804a.  call temp:= `schedulePeriodically`(v4, v5, v6, v8, v10) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L428050.  v2:= temp @kind object;
  #L428052.  goto L42806a;
  #L428054.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.e` @type ^`io.reactivex.Scheduler` @kind object;
  #L428058.  v8:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.c` @type ^`long` @kind wide;
  #L42805c.  v10:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L428060.  v6:= v8 @kind wide;
  #L428062.  call temp:= `schedulePeriodicallyDirect`(v4, v5, v6, v8, v10) @signature `Lio/reactivex/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L428068.  v2:= temp @kind object;
  #L42806a.  v3:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.o` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L42806e.  call temp:= `replace`(v3, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L428074.  v2:= temp;
  #L428076.  if v2 == 0 then goto L4280a2;
  #L42807a.  call `request`(v12, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L428080.  goto L4280a2;
  #L428082.  v1:= 1I;
  #L428084.  v11.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L428088.  call `cancel`(v12) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L42808e.  v12:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L428092.  v1:= "Could not deliver initial window due to lack of requests." @kind object;
  #L428096.  call `<init>`(v12, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42809c.  call `onError`(v0, v12) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4280a2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L4280b4.  call `requested`(v0, v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @kind virtual;
  #L4280ba.  return @kind void;
}
