record `io.reactivex.internal.operators.flowable.FlowableFromCallable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Flowable` @kind class, `java.util.concurrent.Callable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableFromCallable.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromCallable` v0 @kind this, `java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromCallable;.<init>:(Ljava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L416238.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L41623e.  v0.`io.reactivex.internal.operators.flowable.FlowableFromCallable.b` @type ^`java.util.concurrent.Callable` := v1 @kind object;
  #L416242.  return @kind void;
}
procedure `java.lang.Object` `call`(`io.reactivex.internal.operators.flowable.FlowableFromCallable` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromCallable;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41620c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFromCallable.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L416210.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L416216.  v0:= temp @kind object;
  #L416218.  v1:= "The callable returned a null value" @kind object;
  #L41621c.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416222.  v0:= temp @kind object;
  #L416224.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableFromCallable` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromCallable;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L416254.  v0:= new `io.reactivex.internal.subscriptions.DeferredScalarSubscription`;
  #L416258.  call `<init>`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L41625e.  call `onSubscribe`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L416264.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableFromCallable.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L416268.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L41626e.  v1:= temp @kind object;
  #L416270.  v2:= "The callable returned a null value" @kind object;
  #L416274.  call temp:= `requireNonNull`(v1, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41627a.  v4:= temp @kind object;
  #L41627c.  call `complete`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L416282.  return @kind void;
  #L416284.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L416286.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41628c.  call `onError`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L416292.  return @kind void;
  catch `java.lang.Throwable` @[L416264..L41627c] goto L416284;
}
