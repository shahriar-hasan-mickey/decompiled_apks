record `io.reactivex.internal.operators.flowable.FlowableCache` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `io.reactivex.internal.operators.flowable.FlowableCache$a` `io.reactivex.internal.operators.flowable.FlowableCache.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableCache.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCache` v1 @kind this, `io.reactivex.Flowable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache;.<init>:(Lio/reactivex/Flowable;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L40d428.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L40d42e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCache$a`;
  #L40d432.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$a;.<init>:(Lio/reactivex/Flowable;I)V` @kind direct;
  #L40d438.  v1.`io.reactivex.internal.operators.flowable.FlowableCache.b` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$a` := v0 @kind object;
  #L40d43c.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L40d440.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L40d446.  v1.`io.reactivex.internal.operators.flowable.FlowableCache.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L40d44a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableCache` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L40d45c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCache$b`;
  #L40d460.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCache.b` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$a` @kind object;
  #L40d464.  call `<init>`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/operators/flowable/FlowableCache$a;)V` @kind direct;
  #L40d46a.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCache.b` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$a` @kind object;
  #L40d46e.  call `a`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$a;.a:(Lio/reactivex/internal/operators/flowable/FlowableCache$b;)V` @kind virtual;
  #L40d474.  call `onSubscribe`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40d47a.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableCache.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L40d47e.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L40d484.  v3:= temp;
  #L40d486.  if v3 != 0 then goto L40d4a8;
  #L40d48a.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableCache.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L40d48e.  v0:= 0I;
  #L40d490.  v1:= 1I;
  #L40d492.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L40d498.  v3:= temp;
  #L40d49a.  if v3 == 0 then goto L40d4a8;
  #L40d49e.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableCache.b` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$a` @kind object;
  #L40d4a2.  call `b`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$a;.b:()V` @kind virtual;
  #L40d4a8.  return @kind void;
}
