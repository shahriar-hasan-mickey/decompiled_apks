record `io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.subscriptions.SubscriptionArbiter` `io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a.c` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a.d` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `io.reactivex.functions.Predicate` v4 @kind object, `io.reactivex.internal.subscriptions.SubscriptionArbiter` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate$a;.<init>:(Lorg/reactivestreams/Subscriber;JLio/reactivex/functions/Predicate;Lio/reactivex/internal/subscriptions/SubscriptionArbiter;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41ff84.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L41ff8a.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L41ff8e.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a.b` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` := v5 @kind object;
  #L41ff92.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a.c` @type ^`org.reactivestreams.Publisher` := v6 @kind object;
  #L41ff96.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a.d` @type ^`io.reactivex.functions.Predicate` := v4 @kind object;
  #L41ff9a.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a.e` @type ^`long` := v2 @kind wide;
  #L41ff9e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4200c0.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4200c6.  v0:= temp;
  #L4200c8.  if v0 != 0 then goto L4200f8;
  #L4200cc.  v0:= 1I;
  #L4200ce.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a.b` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L4200d2.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.isCancelled:()Z` @kind virtual;
  #L4200d8.  v1:= temp;
  #L4200da.  if v1 == 0 then goto L4200e0;
  #L4200de.  return @kind void;
  #L4200e0.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a.c` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4200e4.  call `subscribe`(v1, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4200ea.  v0:= -v0 @kind int;
  #L4200ec.  call temp:= `addAndGet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4200f2.  v0:= temp;
  #L4200f4.  if v0 != 0 then goto L4200ce;
  #L4200f8.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41ffb0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41ffb4.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41ffba.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L41ffcc.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a.e` @type ^`long` @kind wide;
  #L41ffd0.  v2:= 9223372036854775807L;
  #L41ffda.  v4:= lcmp(v0, v2);
  #L41ffde.  if v4 == 0 then goto L41ffee;
  #L41ffe2.  v2:= 1L;
  #L41ffe6.  v2:= v0 - v2 @kind long;
  #L41ffea.  v5.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a.e` @type ^`long` := v2 @kind wide;
  #L41ffee.  v2:= 0L;
  #L41fff2.  v4:= lcmp(v0, v2);
  #L41fff6.  if v4 != 0 then goto L420006;
  #L41fffa.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41fffe.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L420004.  goto L420028;
  #L420006.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a.d` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L42000a.  call temp:= `test`(v0, v6) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L420010.  v0:= temp;
  #L420012.  if v0 != 0 then goto L420022;
  #L420016.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L42001a.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L420020.  return @kind void;
  #L420022.  call `a`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate$a;.a:()V` @kind virtual;
  #L420028.  return @kind void;
  #L42002a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42002c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L420032.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L420036.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L42003a.  v3:= 2I;
  #L42003c.  v3:= new `java.lang.Throwable`[v3];
  #L420040.  v4:= 0I;
  #L420042.  v3[v4]:= v6 @kind object;
  #L420046.  v6:= 1I;
  #L420048.  v3[v6]:= v0 @kind object;
  #L42004c.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L420052.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L420058.  return @kind void;
  catch `java.lang.Throwable` @[L420006..L420012] goto L42002a;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L420078.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L42007c.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L420082.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a.b` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L420086.  v0:= 1L;
  #L42008a.  call `produced`(v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L420090.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4200a4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$a.b` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L4200a8.  call `setSubscription`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4200ae.  return @kind void;
}
