record `io.reactivex.internal.operators.flowable.FlowableConcatMap$d` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableConcatMap$b` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableConcatMap$d.m` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableConcatMap$d.n` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableConcatMap$d.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$d` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$d;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40e8b0.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$b;.<init>:(Lio/reactivex/functions/Function;I)V` @kind direct;
  #L40e8b6.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L40e8ba.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L40e8be.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L40e8c4.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.n` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L40e8c8.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$d` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$d;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40eb2c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40eb30.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L40eb36.  v0:= temp;
  #L40eb38.  if v0 == 0 then goto L40eb6a;
  #L40eb3c.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40eb40.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40eb46.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L40eb4c.  v2:= temp;
  #L40eb4e.  if v2 != 0 then goto L40eb70;
  #L40eb52.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40eb56.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40eb5a.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L40eb60.  v0:= temp @kind object;
  #L40eb62.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40eb68.  goto L40eb70;
  #L40eb6a.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40eb70.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$d` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$d;.c:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40eb84.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L40eb8a.  v0:= temp;
  #L40eb8c.  if v0 != 0 then goto L40ebce;
  #L40eb90.  v0:= 0I;
  #L40eb92.  v1:= 1I;
  #L40eb94.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L40eb9a.  v2:= temp;
  #L40eb9c.  if v2 == 0 then goto L40ebce;
  #L40eba0.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40eba4.  call `onNext`(v2, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40ebaa.  call temp:= `compareAndSet`(v3, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L40ebb0.  v4:= temp;
  #L40ebb2.  if v4 == 0 then goto L40ebb8;
  #L40ebb6.  return @kind void;
  #L40ebb8.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40ebbc.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40ebc0.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L40ebc6.  v0:= temp @kind object;
  #L40ebc8.  call `onError`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40ebce.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$d` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$d;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40e8dc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.i` @type ^`boolean` @kind boolean;
  #L40e8e0.  if v0 != 0 then goto L40e8fe;
  #L40e8e4.  v0:= 1I;
  #L40e8e6.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.i` @type ^`boolean` := v0 @kind boolean;
  #L40e8ea.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L40e8ee.  call `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind virtual;
  #L40e8f4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40e8f8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40e8fe.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$d` v7 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$d;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L40e910.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.n` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40e914.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L40e91a.  v0:= temp;
  #L40e91c.  if v0 != 0 then goto L40eaf6;
  #L40e920.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.i` @type ^`boolean` @kind boolean;
  #L40e924.  if v0 == 0 then goto L40e92a;
  #L40e928.  return @kind void;
  #L40e92a.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.k` @type ^`boolean` @kind boolean;
  #L40e92e.  if v0 != 0 then goto L40eae6;
  #L40e932.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.h` @type ^`boolean` @kind boolean;
  #L40e936.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L40e93a.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L40e940.  v1:= temp @kind object;
  #L40e942.  v2:= 0I;
  #L40e944.  v3:= 1I;
  #L40e946.  if v1 != 0 then goto L40e94e;
  #L40e94a.  v4:= 1I;
  #L40e94c.  goto L40e950;
  #L40e94e.  v4:= 0I;
  #L40e950.  if v0 == 0 then goto L40e964;
  #L40e954.  if v4 == 0 then goto L40e964;
  #L40e958.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40e95c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40e962.  return @kind void;
  #L40e964.  if v4 != 0 then goto L40eae6;
  #L40e968.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L40e96c.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L40e972.  v0:= temp @kind object;
  #L40e974.  v1:= "The mapper returned a null Publisher" @kind object;
  #L40e978.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40e97e.  v0:= temp @kind object;
  #L40e980.  v0:= (`org.reactivestreams.Publisher`) v0 @kind object;
  #L40e984.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.l` @type ^`int`;
  #L40e988.  if v1 == v3 then goto L40e9b0;
  #L40e98c.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.f` @type ^`int`;
  #L40e990.  v1:= v1 + v3 @kind int;
  #L40e992.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.d` @type ^`int`;
  #L40e996.  if v1 != v4 then goto L40e9ac;
  #L40e99a.  v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.f` @type ^`int` := v2;
  #L40e99e.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40e9a2.  v5:= (`long`) v1 @kind i2l;
  #L40e9a4.  call `request`(v4, v5) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40e9aa.  goto L40e9b0;
  #L40e9ac.  v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.f` @type ^`int` := v1;
  #L40e9b0.  v1:= instanceof @variable v0 @type ^`java.util.concurrent.Callable` @kind boolean;
  #L40e9b4.  if v1 == 0 then goto L40ea6e;
  #L40e9b8.  v0:= (`java.util.concurrent.Callable`) v0 @kind object;
  #L40e9bc.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L40e9c2.  v0:= temp @kind object;
  #L40e9c4.  if v0 != 0 then goto L40e9ca;
  #L40e9c8.  goto L40e920;
  #L40e9ca.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L40e9ce.  call temp:= `isUnbounded`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.isUnbounded:()Z` @kind virtual;
  #L40e9d4.  v1:= temp;
  #L40e9d6.  if v1 == 0 then goto L40ea20;
  #L40e9da.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L40e9e0.  v1:= temp;
  #L40e9e2.  if v1 != 0 then goto L40e920;
  #L40e9e6.  call temp:= `compareAndSet`(v7, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L40e9ec.  v1:= temp;
  #L40e9ee.  if v1 == 0 then goto L40e920;
  #L40e9f2.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40e9f6.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40e9fc.  call temp:= `compareAndSet`(v7, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L40ea02.  v0:= temp;
  #L40ea04.  if v0 != 0 then goto L40e920;
  #L40ea08.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40ea0c.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40ea10.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L40ea16.  v1:= temp @kind object;
  #L40ea18.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40ea1e.  return @kind void;
  #L40ea20.  v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.k` @type ^`boolean` := v3 @kind boolean;
  #L40ea24.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L40ea28.  v2:= new `io.reactivex.internal.operators.flowable.FlowableConcatMap$g`;
  #L40ea2c.  call `<init>`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$g;.<init>:(Ljava/lang/Object;Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L40ea32.  call `setSubscription`(v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L40ea38.  goto L40eae6;
  #L40ea3a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40ea3c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40ea42.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40ea46.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40ea4c.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40ea50.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L40ea56.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40ea5a.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40ea5e.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L40ea64.  v1:= temp @kind object;
  #L40ea66.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40ea6c.  return @kind void;
  #L40ea6e.  v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.k` @type ^`boolean` := v3 @kind boolean;
  #L40ea72.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L40ea76.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40ea7c.  goto L40eae6;
  #L40ea7e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40ea80.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40ea86.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40ea8a.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40ea90.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40ea94.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L40ea9a.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40ea9e.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40eaa2.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L40eaa8.  v1:= temp @kind object;
  #L40eaaa.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40eab0.  return @kind void;
  #L40eab2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40eab4.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40eaba.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40eabe.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40eac4.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40eac8.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L40eace.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40ead2.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40ead6.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L40eadc.  v1:= temp @kind object;
  #L40eade.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40eae4.  return @kind void;
  #L40eae6.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.n` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40eaea.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L40eaf0.  v0:= temp;
  #L40eaf2.  if v0 != 0 then goto L40e920;
  #L40eaf6.  return @kind void;
  catch `java.lang.Throwable` @[L40e936..L40e942] goto L40eab2;
  catch `java.lang.Throwable` @[L40e968..L40e984] goto L40ea7e;
  catch `java.lang.Throwable` @[L40e9bc..L40e9c4] goto L40ea3a;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$d` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$d;.e:()V` @AccessFlag  {
    temp;
    v0;

  #L40ec54.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40ec58.  call `onSubscribe`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40ec5e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$d` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$d;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40ebe0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40ebe4.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L40ebea.  v0:= temp;
  #L40ebec.  if v0 == 0 then goto L40ec1e;
  #L40ebf0.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L40ebf4.  call `cancel`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind virtual;
  #L40ebfa.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L40ec00.  v2:= temp;
  #L40ec02.  if v2 != 0 then goto L40ec24;
  #L40ec06.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40ec0a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40ec0e.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L40ec14.  v0:= temp @kind object;
  #L40ec16.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40ec1c.  goto L40ec24;
  #L40ec1e.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40ec24.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$d` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$d;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40ec38.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L40ec3c.  call `request`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.request:(J)V` @kind virtual;
  #L40ec42.  return @kind void;
}
