record `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.b` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.d` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L413eec.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L413ef2.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L413ef6.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.c` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L413efa.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.d` @type ^`boolean` := v3 @kind boolean;
  #L413efe.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L413f02.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L413f08.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L413f0c.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L413f10.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L413f16.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L413f1a.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.f` @type ^`int` := v4;
  #L413f1e.  v1:= 1I;
  #L413f20.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L413f26.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L413f38.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L413f3c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L413f42.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L413f46.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L413f4c.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;

  #L413f60.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a$a` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.e:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a$a;)V` @AccessFlag  {
    temp;
    v0;

  #L413f74.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L413f78.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L413f7e.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.onComplete:()V` @kind virtual;
  #L413f84.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a$a` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.f:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L413f98.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L413f9c.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L413fa2.  call `onError`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L413fa8.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L413eac.  v0:= 1I;
  #L413eae.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L413fbc.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L413fc2.  v0:= temp;
  #L413fc4.  if v0 != 0 then goto L413ff0;
  #L413fc8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L413fcc.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L413fd2.  v0:= temp @kind object;
  #L413fd4.  if v0 == 0 then goto L413fe4;
  #L413fd8.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L413fdc.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L413fe2.  goto L41400c;
  #L413fe4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L413fe8.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L413fee.  goto L41400c;
  #L413ff0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.f` @type ^`int`;
  #L413ff4.  v1:= 2147483647I;
  #L413ffa.  if v0 == v1 then goto L41400c;
  #L413ffe.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L414002.  v1:= 1L;
  #L414006.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L41400c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L414020.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L414024.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L41402a.  v0:= temp;
  #L41402c.  if v0 == 0 then goto L4140a6;
  #L414030.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.d` @type ^`boolean` @kind boolean;
  #L414034.  if v3 == 0 then goto L41407a;
  #L414038.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L41403e.  v3:= temp;
  #L414040.  if v3 != 0 then goto L41405c;
  #L414044.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L414048.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L41404e.  v3:= temp @kind object;
  #L414050.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L414054.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41405a.  goto L4140ac;
  #L41405c.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.f` @type ^`int`;
  #L414060.  v0:= 2147483647I;
  #L414066.  if v3 == v0 then goto L4140ac;
  #L41406a.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41406e.  v0:= 1L;
  #L414072.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L414078.  goto L4140ac;
  #L41407a.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.cancel:()V` @kind virtual;
  #L414080.  v3:= 0I;
  #L414082.  call temp:= `getAndSet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L414088.  v3:= temp;
  #L41408a.  if v3 <= 0 then goto L4140ac;
  #L41408e.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L414092.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L414098.  v3:= temp @kind object;
  #L41409a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41409e.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4140a4.  goto L4140ac;
  #L4140a6.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4140ac.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4140c0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.c` @type ^`io.reactivex.functions.Function` @kind object;
  #L4140c4.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4140ca.  v3:= temp @kind object;
  #L4140cc.  v0:= "The mapper returned a null CompletableSource" @kind object;
  #L4140d0.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4140d6.  v3:= temp @kind object;
  #L4140d8.  v3:= (`io.reactivex.CompletableSource`) v3 @kind object;
  #L4140dc.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4140e2.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a$a`;
  #L4140e6.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;)V` @kind direct;
  #L4140ec.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4140f0.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4140f6.  v1:= temp;
  #L4140f8.  if v1 == 0 then goto L414102;
  #L4140fc.  call `subscribe`(v3, v0) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L414102.  return @kind void;
  #L414104.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L414106.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41410c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L414110.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L414116.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41411c.  return @kind void;
  catch `java.lang.Throwable` @[L4140c0..L4140dc] goto L414104;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41413c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L414140.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L414146.  v0:= temp;
  #L414148.  if v0 == 0 then goto L414182;
  #L41414c.  v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L414150.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L414154.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L41415a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.f` @type ^`int`;
  #L41415e.  v1:= 2147483647I;
  #L414164.  if v0 != v1 then goto L41417a;
  #L414168.  v0:= 9223372036854775807L;
  #L414172.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L414178.  goto L414182;
  #L41417a.  v0:= (`long`) v0 @kind i2l;
  #L41417c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L414182.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L413ed8.  v0:= 0I;
  #L413eda.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L414194.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L413ec0.  v1:= v1 ^& 2;
  #L413ec4.  return v1;
}
