record `io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.subscriptions.SubscriptionArbiter` `io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.e` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41bcf8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41bcfe.  v0.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L41bd02.  v0.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L41bd06.  v0.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.c` @type ^`boolean` := v3 @kind boolean;
  #L41bd0a.  v1:= new `io.reactivex.internal.subscriptions.SubscriptionArbiter`;
  #L41bd0e.  call `<init>`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.<init>:()V` @kind direct;
  #L41bd14.  v0.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.d` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` := v1 @kind object;
  #L41bd18.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41bd2c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.f` @type ^`boolean` @kind boolean;
  #L41bd30.  if v0 == 0 then goto L41bd36;
  #L41bd34.  return @kind void;
  #L41bd36.  v0:= 1I;
  #L41bd38.  v1.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.f` @type ^`boolean` := v0 @kind boolean;
  #L41bd3c.  v1.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.e` @type ^`boolean` := v0 @kind boolean;
  #L41bd40.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41bd44.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41bd4a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L41bd5c.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.e` @type ^`boolean` @kind boolean;
  #L41bd60.  if v0 == 0 then goto L41bd80;
  #L41bd64.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.f` @type ^`boolean` @kind boolean;
  #L41bd68.  if v0 == 0 then goto L41bd74;
  #L41bd6c.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41bd72.  return @kind void;
  #L41bd74.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41bd78.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41bd7e.  return @kind void;
  #L41bd80.  v0:= 1I;
  #L41bd82.  v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.e` @type ^`boolean` := v0 @kind boolean;
  #L41bd86.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.c` @type ^`boolean` @kind boolean;
  #L41bd8a.  if v1 == 0 then goto L41bda2;
  #L41bd8e.  v1:= instanceof @variable v7 @type ^`java.lang.Exception` @kind boolean;
  #L41bd92.  if v1 != 0 then goto L41bda2;
  #L41bd96.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41bd9a.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41bda0.  return @kind void;
  #L41bda2.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L41bda6.  call temp:= `apply`(v1, v7) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L41bdac.  v1:= temp @kind object;
  #L41bdae.  v1:= (`org.reactivestreams.Publisher`) v1 @kind object;
  #L41bdb2.  if v1 != 0 then goto L41bdd6;
  #L41bdb6.  v0:= new `java.lang.NullPointerException`;
  #L41bdba.  v1:= "Publisher is null" @kind object;
  #L41bdbe.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41bdc4.  call temp:= `initCause`(v0, v7) @signature `Ljava/lang/NullPointerException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L41bdca.  v7:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41bdce.  call `onError`(v7, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41bdd4.  return @kind void;
  #L41bdd6.  call `subscribe`(v1, v6) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L41bddc.  return @kind void;
  #L41bdde.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41bde0.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41bde6.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41bdea.  v3:= new `io.reactivex.exceptions.CompositeException`;
  #L41bdee.  v4:= 2I;
  #L41bdf0.  v4:= new `java.lang.Throwable`[v4];
  #L41bdf4.  v5:= 0I;
  #L41bdf6.  v4[v5]:= v7 @kind object;
  #L41bdfa.  v4[v0]:= v1 @kind object;
  #L41bdfe.  call `<init>`(v3, v4) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L41be04.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41be0a.  return @kind void;
  catch `java.lang.Throwable` @[L41bda2..L41bdb2] goto L41bdde;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41be28.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.f` @type ^`boolean` @kind boolean;
  #L41be2c.  if v0 == 0 then goto L41be32;
  #L41be30.  return @kind void;
  #L41be32.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41be36.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41be3c.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.e` @type ^`boolean` @kind boolean;
  #L41be40.  if v3 != 0 then goto L41be52;
  #L41be44.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.d` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L41be48.  v0:= 1L;
  #L41be4c.  call `produced`(v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L41be52.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41be64.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.d` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L41be68.  call `setSubscription`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L41be6e.  return @kind void;
}
