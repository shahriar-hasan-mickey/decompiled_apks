record `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.b` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.e` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.f` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.h` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.j` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.k` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.l` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.m` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.n` @AccessFlag ;
}
global `java.lang.Object` `@@io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.o` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L416e00.  v0:= new `java.lang.Object`;
  #L416e04.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L416e0a.  `@@io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.o` @type ^`java.lang.Object` := v0 @kind object;
  #L416e0e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object, `io.reactivex.functions.Function` v5 @kind object, `int` v6 , `boolean` v7 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L416e20.  call `<init>`(v2) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L416e26.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L416e2a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L416e30.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L416e34.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L416e38.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L416e3e.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.j` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L416e42.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L416e46.  v1:= 1I;
  #L416e48.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L416e4e.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.k` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L416e52.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.a` @type ^`org.reactivestreams.Subscriber` := v3 @kind object;
  #L416e56.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.b` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L416e5a.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.c` @type ^`io.reactivex.functions.Function` := v5 @kind object;
  #L416e5e.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.d` @type ^`int` := v6;
  #L416e62.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.e` @type ^`boolean` := v7 @kind boolean;
  #L416e66.  v3:= new `java.util.concurrent.ConcurrentHashMap`;
  #L416e6a.  call `<init>`(v3) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L416e70.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.f` @type ^`java.util.Map` := v3 @kind object;
  #L416e74.  v3:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L416e78.  call `<init>`(v3, v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L416e7e.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v3 @kind object;
  #L416e82.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L416e94.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L416e98.  v1:= 0I;
  #L416e9a.  v2:= 1I;
  #L416e9c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L416ea2.  v0:= temp;
  #L416ea4.  if v0 == 0 then goto L416ec2;
  #L416ea8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L416eac.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L416eb2.  v0:= temp;
  #L416eb4.  if v0 != 0 then goto L416ec2;
  #L416eb8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L416ebc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L416ec2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.cancel:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L416ed4.  if v2 == 0 then goto L416eda;
  #L416ed8.  goto L416ede;
  #L416eda.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.o` @type ^`java.lang.Object` @kind object;
  #L416ede.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.f` @type ^`java.util.Map` @kind object;
  #L416ee2.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L416ee8.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L416eec.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L416ef2.  v2:= temp;
  #L416ef4.  if v2 != 0 then goto L416f18;
  #L416ef8.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L416efc.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L416f02.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L416f08.  v2:= temp;
  #L416f0a.  if v2 != 0 then goto L416f18;
  #L416f0e.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L416f12.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L416f18.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L416f2c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L416f30.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L416f36.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L416f48.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L416f4e.  v0:= temp;
  #L416f50.  if v0 == 0 then goto L416f56;
  #L416f54.  return @kind void;
  #L416f56.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.n` @type ^`boolean` @kind boolean;
  #L416f5a.  if v0 == 0 then goto L416f66;
  #L416f5e.  call `f`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.f:()V` @kind virtual;
  #L416f64.  goto L416f6c;
  #L416f66.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.g:()V` @kind virtual;
  #L416f6c.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this, `boolean` v3 , `boolean` v4 , `org.reactivestreams.Subscriber` v5 @kind object, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.e:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L416d00.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L416d04.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L416d0a.  v0:= temp;
  #L416d0c.  v1:= 1I;
  #L416d0e.  if v0 == 0 then goto L416d1a;
  #L416d12.  call `clear`(v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L416d18.  return v1;
  #L416d1a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.e` @type ^`boolean` @kind boolean;
  #L416d1e.  if v0 == 0 then goto L416d42;
  #L416d22.  if v3 == 0 then goto L416d68;
  #L416d26.  if v4 == 0 then goto L416d68;
  #L416d2a.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.l` @type ^`java.lang.Throwable` @kind object;
  #L416d2e.  if v3 == 0 then goto L416d3a;
  #L416d32.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L416d38.  goto L416d40;
  #L416d3a.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L416d40.  return v1;
  #L416d42.  if v3 == 0 then goto L416d68;
  #L416d46.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.l` @type ^`java.lang.Throwable` @kind object;
  #L416d4a.  if v3 == 0 then goto L416d5c;
  #L416d4e.  call `clear`(v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L416d54.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L416d5a.  return v1;
  #L416d5c.  if v4 == 0 then goto L416d68;
  #L416d60.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L416d66.  return v1;
  #L416d68.  v3:= 0I;
  #L416d6a.  return v3;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L416f80.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L416f84.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L416f88.  v2:= 1I;
  #L416f8a.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L416f8e.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L416f94.  v3:= temp;
  #L416f96.  if v3 == 0 then goto L416fa2;
  #L416f9a.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L416fa0.  return @kind void;
  #L416fa2.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.m` @type ^`boolean` @kind boolean;
  #L416fa6.  if v3 == 0 then goto L416fc8;
  #L416faa.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.e` @type ^`boolean` @kind boolean;
  #L416fae.  if v4 != 0 then goto L416fc8;
  #L416fb2.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.l` @type ^`java.lang.Throwable` @kind object;
  #L416fb6.  if v4 == 0 then goto L416fc8;
  #L416fba.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L416fc0.  call `onError`(v1, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L416fc6.  return @kind void;
  #L416fc8.  v4:= 0I;
  #L416fca.  call `onNext`(v1, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L416fd0.  if v3 == 0 then goto L416fec;
  #L416fd4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.l` @type ^`java.lang.Throwable` @kind object;
  #L416fd8.  if v0 == 0 then goto L416fe4;
  #L416fdc.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L416fe2.  goto L416fea;
  #L416fe4.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L416fea.  return @kind void;
  #L416fec.  v2:= -v2 @kind int;
  #L416fee.  call temp:= `addAndGet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L416ff4.  v2:= temp;
  #L416ff6.  if v2 != 0 then goto L416f8a;
  #L416ffa.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v14 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L41700c.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L417010.  v1:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L417014.  v2:= 1I;
  #L417016.  v3:= 1I;
  #L417018.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.j` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L41701c.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L417022.  v4:= temp @kind wide;
  #L417024.  v6:= 0L;
  #L417028.  v8:= v6 @kind wide;
  #L41702a.  v10:= lcmp(v8, v4);
  #L41702e.  if v10 == 0 then goto L41706e;
  #L417032.  v11:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.m` @type ^`boolean` @kind boolean;
  #L417036.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L41703c.  v12:= temp @kind object;
  #L41703e.  v12:= (`io.reactivex.flowables.GroupedFlowable`) v12 @kind object;
  #L417042.  if v12 != 0 then goto L41704a;
  #L417046.  v13:= 1I;
  #L417048.  goto L41704c;
  #L41704a.  v13:= 0I;
  #L41704c.  call temp:= `e`(v14, v11, v13, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.e:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L417052.  v11:= temp;
  #L417054.  if v11 == 0 then goto L41705a;
  #L417058.  return @kind void;
  #L41705a.  if v13 == 0 then goto L417060;
  #L41705e.  goto L41706e;
  #L417060.  call `onNext`(v1, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L417066.  v10:= 1L;
  #L41706a.  v8:= v8 + v10 @kind long;
  #L41706c.  goto L41702a;
  #L41706e.  if v10 != 0 then goto L41708c;
  #L417072.  v10:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.m` @type ^`boolean` @kind boolean;
  #L417076.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L41707c.  v11:= temp;
  #L41707e.  call temp:= `e`(v14, v10, v11, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.e:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L417084.  v10:= temp;
  #L417086.  if v10 == 0 then goto L41708c;
  #L41708a.  return @kind void;
  #L41708c.  v10:= lcmp(v8, v6);
  #L417090.  if v10 == 0 then goto L4170bc;
  #L417094.  v6:= 9223372036854775807L;
  #L41709e.  v10:= lcmp(v4, v6);
  #L4170a2.  if v10 == 0 then goto L4170b2;
  #L4170a6.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.j` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4170aa.  v5:= -v8 @kind long;
  #L4170ac.  call temp:= `addAndGet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4170b2.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4170b6.  call `request`(v4, v8) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4170bc.  v3:= -v3 @kind int;
  #L4170be.  call temp:= `addAndGet`(v14, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4170c4.  v3:= temp;
  #L4170c6.  if v3 != 0 then goto L417018;
  #L4170ca.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L416d7c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L416d80.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L416d86.  v0:= temp;
  #L416d88.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4170dc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.m` @type ^`boolean` @kind boolean;
  #L4170e0.  if v0 != 0 then goto L41712e;
  #L4170e4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.f` @type ^`java.util.Map` @kind object;
  #L4170e8.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4170ee.  v0:= temp @kind object;
  #L4170f0.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4170f6.  v0:= temp @kind object;
  #L4170f8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4170fe.  v1:= temp;
  #L417100.  if v1 == 0 then goto L417118;
  #L417104.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L41710a.  v1:= temp @kind object;
  #L41710c.  v1:= (`io.reactivex.internal.operators.flowable.FlowableGroupBy$a`) v1 @kind object;
  #L417110.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$a;.onComplete:()V` @kind virtual;
  #L417116.  goto L4170f8;
  #L417118.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.f` @type ^`java.util.Map` @kind object;
  #L41711c.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L417122.  v0:= 1I;
  #L417124.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.m` @type ^`boolean` := v0 @kind boolean;
  #L417128.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.drain:()V` @kind virtual;
  #L41712e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L417140.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.m` @type ^`boolean` @kind boolean;
  #L417144.  if v0 == 0 then goto L417150;
  #L417148.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41714e.  return @kind void;
  #L417150.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.f` @type ^`java.util.Map` @kind object;
  #L417154.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L41715a.  v0:= temp @kind object;
  #L41715c.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L417162.  v0:= temp @kind object;
  #L417164.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L41716a.  v1:= temp;
  #L41716c.  if v1 == 0 then goto L417184;
  #L417170.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L417176.  v1:= temp @kind object;
  #L417178.  v1:= (`io.reactivex.internal.operators.flowable.FlowableGroupBy$a`) v1 @kind object;
  #L41717c.  call `onError`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L417182.  goto L417164;
  #L417184.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.f` @type ^`java.util.Map` @kind object;
  #L417188.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L41718e.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.l` @type ^`java.lang.Throwable` := v3 @kind object;
  #L417192.  v3:= 1I;
  #L417194.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.m` @type ^`boolean` := v3 @kind boolean;
  #L417198.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.drain:()V` @kind virtual;
  #L41719e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4171b0.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.m` @type ^`boolean` @kind boolean;
  #L4171b4.  if v0 == 0 then goto L4171ba;
  #L4171b8.  return @kind void;
  #L4171ba.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4171be.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L4171c2.  call temp:= `apply`(v1, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4171c8.  v1:= temp @kind object;
  #L4171ca.  v2:= 0I;
  #L4171cc.  if v1 == 0 then goto L4171d4;
  #L4171d0.  v3:= v1 @kind object;
  #L4171d2.  goto L4171d8;
  #L4171d4.  v3:= `@@io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.o` @type ^`java.lang.Object` @kind object;
  #L4171d8.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.f` @type ^`java.util.Map` @kind object;
  #L4171dc.  call temp:= `get`(v4, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4171e2.  v4:= temp @kind object;
  #L4171e4.  v4:= (`io.reactivex.internal.operators.flowable.FlowableGroupBy$a`) v4 @kind object;
  #L4171e8.  if v4 != 0 then goto L417224;
  #L4171ec.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4171f0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4171f6.  v2:= temp;
  #L4171f8.  if v2 == 0 then goto L4171fe;
  #L4171fc.  return @kind void;
  #L4171fe.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.d` @type ^`int`;
  #L417202.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.e` @type ^`boolean` @kind boolean;
  #L417206.  call temp:= `e`(v1, v2, v5, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$a;.e:(Ljava/lang/Object;ILio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;Z)Lio/reactivex/internal/operators/flowable/FlowableGroupBy$a;` @kind static;
  #L41720c.  v4:= temp @kind object;
  #L41720e.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.f` @type ^`java.util.Map` @kind object;
  #L417212.  call temp:= `put`(v1, v3, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L417218.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L41721c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L417222.  v2:= 1I;
  #L417224.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.c` @type ^`io.reactivex.functions.Function` @kind object;
  #L417228.  call temp:= `apply`(v1, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L41722e.  v6:= temp @kind object;
  #L417230.  v1:= "The valueSelector returned null" @kind object;
  #L417234.  call temp:= `requireNonNull`(v6, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41723a.  v6:= temp @kind object;
  #L41723c.  call `onNext`(v4, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$a;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L417242.  if v2 == 0 then goto L417252;
  #L417246.  call temp:= `offer`(v0, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L41724c.  call `drain`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.drain:()V` @kind virtual;
  #L417252.  return @kind void;
  #L417254.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L417256.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41725c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L417260.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L417266.  call `onError`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41726c.  return @kind void;
  #L41726e.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L417270.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L417276.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41727a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L417280.  call `onError`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L417286.  return @kind void;
  catch `java.lang.Throwable` @[L4171be..L4171ca] goto L41726e;
  catch `java.lang.Throwable` @[L417224..L41723c] goto L417254;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4172b0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4172b4.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4172ba.  v0:= temp;
  #L4172bc.  if v0 == 0 then goto L4172da;
  #L4172c0.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.h` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4172c4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4172c8.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4172ce.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.d` @type ^`int`;
  #L4172d2.  v0:= (`long`) v0 @kind i2l;
  #L4172d4.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4172da.  return @kind void;
}
procedure `io.reactivex.flowables.GroupedFlowable` `poll`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.poll:()Lio/reactivex/flowables/GroupedFlowable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L416dc0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L416dc4.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L416dca.  v0:= temp @kind object;
  #L416dcc.  v0:= (`io.reactivex.flowables.GroupedFlowable`) v0 @kind object;
  #L416dd0.  return v0 @kind object;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L416de4.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.poll:()Lio/reactivex/flowables/GroupedFlowable;` @kind virtual;
  #L416dea.  v0:= temp @kind object;
  #L416dec.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4172ec.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4172f2.  v0:= temp;
  #L4172f4.  if v0 == 0 then goto L417308;
  #L4172f8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.j` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4172fc.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L417302.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.drain:()V` @kind virtual;
  #L417308.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L416d9c.  v0:= 2I;
  #L416d9e.  v2:= v2 ^& v0 @kind int;
  #L416da0.  if v2 == 0 then goto L416dac;
  #L416da4.  v2:= 1I;
  #L416da6.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.n` @type ^`boolean` := v2 @kind boolean;
  #L416daa.  return v0;
  #L416dac.  v2:= 0I;
  #L416dae.  return v2;
}
