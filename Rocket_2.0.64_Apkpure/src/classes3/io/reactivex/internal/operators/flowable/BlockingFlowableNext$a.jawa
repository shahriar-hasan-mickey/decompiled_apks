record `io.reactivex.internal.operators.flowable.BlockingFlowableNext$a` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface {
  `io.reactivex.internal.operators.flowable.BlockingFlowableNext$b` `io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.a` @AccessFlag PRIVATE_FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.c` @AccessFlag PRIVATE;
  `boolean` `io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.d` @AccessFlag PRIVATE;
  `boolean` `io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.e` @AccessFlag PRIVATE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.f` @AccessFlag PRIVATE;
  `boolean` `io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.internal.operators.flowable.BlockingFlowableNext$b` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$a;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$b;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L409ce0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L409ce6.  v0:= 1I;
  #L409ce8.  v1.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.d` @type ^`boolean` := v0 @kind boolean;
  #L409cec.  v1.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.e` @type ^`boolean` := v0 @kind boolean;
  #L409cf0.  v1.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.b` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L409cf4.  v1.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.a` @type ^`io.reactivex.internal.operators.flowable.BlockingFlowableNext$b` := v3 @kind object;
  #L409cf8.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$a;.a:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L409bb4.  v0:= v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.g` @type ^`boolean` @kind boolean;
  #L409bb8.  v1:= 1I;
  #L409bba.  if v0 != 0 then goto L409bea;
  #L409bbe.  v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.g` @type ^`boolean` := v1 @kind boolean;
  #L409bc2.  v0:= v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.a` @type ^`io.reactivex.internal.operators.flowable.BlockingFlowableNext$b` @kind object;
  #L409bc6.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$b;.b:()V` @kind virtual;
  #L409bcc.  v0:= v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L409bd0.  call temp:= `fromPublisher`(v0) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L409bd6.  v0:= temp @kind object;
  #L409bd8.  call temp:= `materialize`(v0) @signature `Lio/reactivex/Flowable;.materialize:()Lio/reactivex/Flowable;` @kind virtual;
  #L409bde.  v0:= temp @kind object;
  #L409be0.  v2:= v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.a` @type ^`io.reactivex.internal.operators.flowable.BlockingFlowableNext$b` @kind object;
  #L409be4.  call `subscribe`(v0, v2) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L409bea.  v0:= v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.a` @type ^`io.reactivex.internal.operators.flowable.BlockingFlowableNext$b` @kind object;
  #L409bee.  call temp:= `c`(v0) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$b;.c:()Lio/reactivex/Notification;` @kind virtual;
  #L409bf4.  v0:= temp @kind object;
  #L409bf6.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/Notification;.isOnNext:()Z` @kind virtual;
  #L409bfc.  v2:= temp;
  #L409bfe.  v3:= 0I;
  #L409c00.  if v2 == 0 then goto L409c16;
  #L409c04.  v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.e` @type ^`boolean` := v3 @kind boolean;
  #L409c08.  call temp:= `getValue`(v0) @signature `Lio/reactivex/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L409c0e.  v0:= temp @kind object;
  #L409c10.  v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.c` @type ^`java.lang.Object` := v0 @kind object;
  #L409c14.  return v1;
  #L409c16.  v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.d` @type ^`boolean` := v3 @kind boolean;
  #L409c1a.  call temp:= `isOnComplete`(v0) @signature `Lio/reactivex/Notification;.isOnComplete:()Z` @kind virtual;
  #L409c20.  v1:= temp;
  #L409c22.  if v1 == 0 then goto L409c28;
  #L409c26.  return v3;
  #L409c28.  call temp:= `isOnError`(v0) @signature `Lio/reactivex/Notification;.isOnError:()Z` @kind virtual;
  #L409c2e.  v1:= temp;
  #L409c30.  if v1 == 0 then goto L409c4a;
  #L409c34.  call temp:= `getError`(v0) @signature `Lio/reactivex/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L409c3a.  v0:= temp @kind object;
  #L409c3c.  v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.f` @type ^`java.lang.Throwable` := v0 @kind object;
  #L409c40.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L409c46.  v0:= temp @kind object;
  #L409c48.  throw v0;
  #L409c4a.  v0:= new `java.lang.IllegalStateException`;
  #L409c4e.  v1:= "Should not reach here" @kind object;
  #L409c52.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L409c58.  throw v0;
  #L409c5a.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L409c5c.  v1:= v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.a` @type ^`io.reactivex.internal.operators.flowable.BlockingFlowableNext$b` @kind object;
  #L409c60.  call `dispose`(v1) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.dispose:()V` @kind virtual;
  #L409c66.  v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.f` @type ^`java.lang.Throwable` := v0 @kind object;
  #L409c6a.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L409c70.  v0:= temp @kind object;
  #L409c72.  throw v0;
  catch `java.lang.InterruptedException` @[L409bb4..L409c5a] goto L409c5a;
}
procedure `boolean` `hasNext`(`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L409b6c.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.f` @type ^`java.lang.Throwable` @kind object;
  #L409b70.  if v0 != 0 then goto L409b98;
  #L409b74.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.d` @type ^`boolean` @kind boolean;
  #L409b78.  v1:= 0I;
  #L409b7a.  if v0 != 0 then goto L409b80;
  #L409b7e.  return v1;
  #L409b80.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.e` @type ^`boolean` @kind boolean;
  #L409b84.  if v0 == 0 then goto L409b94;
  #L409b88.  call temp:= `a`(v2) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$a;.a:()Z` @kind direct;
  #L409b8e.  v0:= temp;
  #L409b90.  if v0 == 0 then goto L409b96;
  #L409b94.  v1:= 1I;
  #L409b96.  return v1;
  #L409b98.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L409b9e.  v0:= temp @kind object;
  #L409ba0.  throw v0;
}
procedure `java.lang.Object` `next`(`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L409c94.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.f` @type ^`java.lang.Throwable` @kind object;
  #L409c98.  if v0 != 0 then goto L409cc4;
  #L409c9c.  call temp:= `hasNext`(v2) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$a;.hasNext:()Z` @kind virtual;
  #L409ca2.  v0:= temp;
  #L409ca4.  if v0 == 0 then goto L409cb4;
  #L409ca8.  v0:= 1I;
  #L409caa.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.e` @type ^`boolean` := v0 @kind boolean;
  #L409cae.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.c` @type ^`java.lang.Object` @kind object;
  #L409cb2.  return v0 @kind object;
  #L409cb4.  v0:= new `java.util.NoSuchElementException`;
  #L409cb8.  v1:= "No more elements" @kind object;
  #L409cbc.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L409cc2.  throw v0;
  #L409cc4.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L409cca.  v0:= temp @kind object;
  #L409ccc.  throw v0;
}
procedure `void` `remove`(`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L409d0c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L409d10.  v1:= "Read only iterator" @kind object;
  #L409d14.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L409d1a.  throw v0;
}
