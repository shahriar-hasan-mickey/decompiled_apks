record `io.reactivex.internal.operators.flowable.FlowableFlattenIterable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L415d60.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L415d66.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L415d6a.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable.c` @type ^`int` := v3;
  #L415d6e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable` v4 @kind this, `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L415d80.  v0:= v4.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L415d84.  v1:= instanceof @variable v0 @type ^`java.util.concurrent.Callable` @kind boolean;
  #L415d88.  if v1 == 0 then goto L415de4;
  #L415d8c.  v0:= (`java.util.concurrent.Callable`) v0 @kind object;
  #L415d90.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L415d96.  v0:= temp @kind object;
  #L415d98.  if v0 != 0 then goto L415da4;
  #L415d9c.  call `complete`(v5) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.complete:(Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L415da2.  return @kind void;
  #L415da4.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L415da8.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L415dae.  v0:= temp @kind object;
  #L415db0.  v0:= (`java.lang.Iterable`) v0 @kind object;
  #L415db4.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L415dba.  v0:= temp @kind object;
  #L415dbc.  call `subscribe`(v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable;.subscribe:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @kind static;
  #L415dc2.  return @kind void;
  #L415dc4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L415dc6.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L415dcc.  call `error`(v0, v5) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L415dd2.  return @kind void;
  #L415dd4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L415dd6.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L415ddc.  call `error`(v0, v5) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L415de2.  return @kind void;
  #L415de4.  v1:= new `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a`;
  #L415de8.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L415dec.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable.c` @type ^`int`;
  #L415df0.  call `<init>`(v1, v5, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;I)V` @kind direct;
  #L415df6.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L415dfc.  return @kind void;
  catch `java.lang.Throwable` @[L415d8c..L415d98] goto L415dd4;
  catch `java.lang.Throwable` @[L415da4..L415dbc] goto L415dc4;
}
