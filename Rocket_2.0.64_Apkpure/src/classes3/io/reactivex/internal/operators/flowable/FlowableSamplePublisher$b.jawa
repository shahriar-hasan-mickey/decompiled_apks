record `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c` @kind class {
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSamplePublisher$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$b;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L420368.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$c;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L42036e.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$b;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L420380.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L420384.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L42038a.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$b;.c:()V` @AccessFlag  {
    temp;
    v0;

  #L42039c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4203a0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4203a6.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$b` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$b;.f:()V` @AccessFlag  {
    temp;

  #L4203b8.  call `d`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$c;.d:()V` @kind virtual;
  #L4203be.  return @kind void;
}
