record `io.reactivex.internal.operators.flowable.FlowableBufferBoundary` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary.b` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary.c` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L40bd8c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L40bd92.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary.c` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L40bd96.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary.d` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L40bd9a.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary.b` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L40bd9e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary` v5 @kind this, `org.reactivestreams.Subscriber` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40bdb0.  v0:= v5.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L40bdb4.  v1:= new `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a`;
  #L40bdb8.  v2:= new `io.reactivex.subscribers.SerializedSubscriber`;
  #L40bdbc.  call `<init>`(v2, v6) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L40bdc2.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary.c` @type ^`org.reactivestreams.Publisher` @kind object;
  #L40bdc6.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary.d` @type ^`io.reactivex.functions.Function` @kind object;
  #L40bdca.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L40bdce.  call `<init>`(v1, v2, v6, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L40bdd4.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L40bdda.  return @kind void;
}
