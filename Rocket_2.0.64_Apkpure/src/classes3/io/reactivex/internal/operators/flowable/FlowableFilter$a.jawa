record `io.reactivex.internal.operators.flowable.FlowableFilter$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` @kind class {
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.flowable.FlowableFilter$a.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFilter$a` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$a;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L412ed0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;)V` @kind direct;
  #L412ed6.  v0.`io.reactivex.internal.operators.flowable.FlowableFilter$a.a` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L412eda.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFilter$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L412eec.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$a;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L412ef2.  v3:= temp;
  #L412ef4.  if v3 != 0 then goto L412f06;
  #L412ef8.  v3:= v2.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.s` @type ^`org.reactivestreams.Subscription` @kind object;
  #L412efc.  v0:= 1L;
  #L412f00.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L412f06.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableFilter$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L412e84.  v0:= v4.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L412e88.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableFilter$a.a` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L412e8c.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L412e92.  v2:= temp @kind object;
  #L412e94.  if v2 != 0 then goto L412e9c;
  #L412e98.  v0:= 0I;
  #L412e9a.  return v0 @kind object;
  #L412e9c.  call temp:= `test`(v1, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L412ea2.  v3:= temp;
  #L412ea4.  if v3 == 0 then goto L412eaa;
  #L412ea8.  return v2 @kind object;
  #L412eaa.  v2:= v4.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L412eae.  v3:= 2I;
  #L412eb0.  if v2 != v3 then goto L412e8c;
  #L412eb4.  v2:= 1L;
  #L412eb8.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L412ebe.  goto L412e8c;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableFilter$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L412e68.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L412e6e.  v1:= temp;
  #L412e70.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableFilter$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$a;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L412df8.  v0:= v3.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L412dfc.  v1:= 0I;
  #L412dfe.  if v0 == 0 then goto L412e04;
  #L412e02.  return v1;
  #L412e04.  v0:= v3.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L412e08.  if v0 == 0 then goto L412e1c;
  #L412e0c.  v4:= v3.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.actual` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L412e10.  v0:= 0I;
  #L412e12.  call temp:= `tryOnNext`(v4, v0) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L412e18.  v4:= temp;
  #L412e1a.  return v4;
  #L412e1c.  v0:= 1I;
  #L412e1e.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableFilter$a.a` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L412e22.  call temp:= `test`(v2, v4) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L412e28.  v2:= temp;
  #L412e2a.  if v2 == 0 then goto L412e40;
  #L412e2e.  v2:= v3.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.actual` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L412e32.  call temp:= `tryOnNext`(v2, v4) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L412e38.  v4:= temp;
  #L412e3a.  if v4 == 0 then goto L412e40;
  #L412e3e.  v1:= 1I;
  #L412e40.  return v1;
  #L412e42.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L412e44.  call `fail`(v3, v4) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L412e4a.  return v0;
  catch `java.lang.Throwable` @[L412e1e..L412e2a] goto L412e42;
}
