record `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.d` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.e` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.f` @AccessFlag FINAL;
  `io.reactivex.processors.UnicastProcessor` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.g` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.h` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.i` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4274d4.  v0:= new `java.lang.Object`;
  #L4274d8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4274de.  `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.i` @type ^`java.lang.Object` := v0 @kind object;
  #L4274e2.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/Callable;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4274f4.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L4274f8.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4274fe.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L427504.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L427508.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42750e.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L427512.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L427516.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L42751c.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.h` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L427520.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.c` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L427524.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.d` @type ^`int` := v4;
  #L427528.  v3:= 1L;
  #L42752c.  call `lazySet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L427532.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` v11 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L42755c.  v0:= v11.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L427560.  v1:= v11.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L427564.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.g` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L427568.  v3:= 1I;
  #L42756a.  v4:= 1I;
  #L42756c.  v5:= v11.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` @kind boolean;
  #L427570.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L427576.  v6:= temp @kind object;
  #L427578.  if v6 != 0 then goto L427580;
  #L42757c.  v7:= 1I;
  #L42757e.  goto L427582;
  #L427580.  v7:= 0I;
  #L427582.  if v5 == 0 then goto L4275ac;
  #L427586.  if v7 == 0 then goto L4275ac;
  #L42758a.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42758e.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L427594.  v0:= v11.`io.reactivex.internal.subscribers.QueueDrainSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L427598.  if v0 == 0 then goto L4275a4;
  #L42759c.  call `onError`(v2, v0) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4275a2.  goto L4275aa;
  #L4275a4.  call `onComplete`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4275aa.  return @kind void;
  #L4275ac.  if v7 == 0 then goto L4275c0;
  #L4275b0.  v4:= -v4 @kind int;
  #L4275b2.  call temp:= `leave`(v11, v4) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L4275b8.  v4:= temp;
  #L4275ba.  if v4 != 0 then goto L42756c;
  #L4275be.  return @kind void;
  #L4275c0.  v5:= `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.i` @type ^`java.lang.Object` @kind object;
  #L4275c4.  if v6 != v5 then goto L4276c6;
  #L4275c8.  call `onComplete`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4275ce.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4275d2.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L4275d8.  v5:= temp @kind wide;
  #L4275da.  v7:= 0L;
  #L4275de.  v9:= lcmp(v5, v7);
  #L4275e2.  if v9 != 0 then goto L4275f2;
  #L4275e6.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4275ea.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4275f0.  return @kind void;
  #L4275f2.  v5:= v11.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4275f6.  if v5 == 0 then goto L4275fc;
  #L4275fa.  goto L42756c;
  #L4275fc.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L427600.  call temp:= `call`(v2) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L427606.  v2:= temp @kind object;
  #L427608.  v5:= "The publisher supplied is null" @kind object;
  #L42760c.  call temp:= `requireNonNull`(v2, v5) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L427612.  v2:= temp @kind object;
  #L427614.  v2:= (`org.reactivestreams.Publisher`) v2 @kind object;
  #L427618.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.d` @type ^`int`;
  #L42761c.  call temp:= `create`(v5) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L427622.  v5:= temp @kind object;
  #L427624.  call temp:= `requested`(v11) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:()J` @kind virtual;
  #L42762a.  v9:= temp @kind wide;
  #L42762c.  v6:= lcmp(v9, v7);
  #L427630.  if v6 == 0 then goto L42768e;
  #L427634.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L427638.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndIncrement:()J` @kind virtual;
  #L42763e.  call `onNext`(v1, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L427644.  v6:= 9223372036854775807L;
  #L42764e.  v8:= lcmp(v9, v6);
  #L427652.  if v8 == 0 then goto L427660;
  #L427656.  v6:= 1L;
  #L42765a.  call temp:= `produced`(v11, v6) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L427660.  v11.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.g` @type ^`io.reactivex.processors.UnicastProcessor` := v5 @kind object;
  #L427664.  v6:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a`;
  #L427668.  call `<init>`(v6, v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;)V` @kind direct;
  #L42766e.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L427672.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L427678.  v8:= temp @kind object;
  #L42767a.  call temp:= `compareAndSet`(v7, v8, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L427680.  v7:= temp;
  #L427682.  if v7 == 0 then goto L4276a6;
  #L427686.  call `subscribe`(v2, v6) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L42768c.  goto L4276a6;
  #L42768e.  v11.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v3 @kind boolean;
  #L427692.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L427696.  v6:= "Could not deliver new window due to lack of requests" @kind object;
  #L42769a.  call `<init>`(v2, v6) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4276a0.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4276a6.  v2:= v5 @kind object;
  #L4276a8.  goto L42756c;
  #L4276ac.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4276ae.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4276b4.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4276b8.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4276be.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4276c4.  return @kind void;
  #L4276c6.  call temp:= `getValue`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4276cc.  v5:= temp @kind object;
  #L4276ce.  call `onNext`(v2, v5) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4276d4.  goto L42756c;
  catch `java.lang.Throwable` @[L4275fc..L427618] goto L4276ac;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4276f4.  v0:= v2.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4276f8.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.i` @type ^`java.lang.Object` @kind object;
  #L4276fc.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L427702.  call temp:= `enter`(v2) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L427708.  v0:= temp;
  #L42770a.  if v0 == 0 then goto L427714;
  #L42770e.  call `a`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.a:()V` @kind virtual;
  #L427714.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L427544.  v0:= 1I;
  #L427546.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L42754a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L427728.  v0:= v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` @kind boolean;
  #L42772c.  if v0 == 0 then goto L427732;
  #L427730.  return @kind void;
  #L427732.  v0:= 1I;
  #L427734.  v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L427738.  call temp:= `enter`(v5) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L42773e.  v0:= temp;
  #L427740.  if v0 == 0 then goto L42774a;
  #L427744.  call `a`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.a:()V` @kind virtual;
  #L42774a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L42774e.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L427754.  v0:= temp @kind wide;
  #L427756.  v2:= 0L;
  #L42775a.  v4:= lcmp(v0, v2);
  #L42775e.  if v4 != 0 then goto L42776c;
  #L427762.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L427766.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42776c.  v0:= v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L427770.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L427776.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L427788.  v0:= v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` @kind boolean;
  #L42778c.  if v0 == 0 then goto L427798;
  #L427790.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L427796.  return @kind void;
  #L427798.  v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.error` @type ^`java.lang.Throwable` := v6 @kind object;
  #L42779c.  v0:= 1I;
  #L42779e.  v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4277a2.  call temp:= `enter`(v5) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L4277a8.  v0:= temp;
  #L4277aa.  if v0 == 0 then goto L4277b4;
  #L4277ae.  call `a`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.a:()V` @kind virtual;
  #L4277b4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4277b8.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L4277be.  v0:= temp @kind wide;
  #L4277c0.  v2:= 0L;
  #L4277c4.  v4:= lcmp(v0, v2);
  #L4277c8.  if v4 != 0 then goto L4277d6;
  #L4277cc.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4277d0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4277d6.  v0:= v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4277da.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4277e0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4277f4.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` @kind boolean;
  #L4277f8.  if v0 == 0 then goto L4277fe;
  #L4277fc.  return @kind void;
  #L4277fe.  call temp:= `fastEnter`(v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastEnter:()Z` @kind virtual;
  #L427804.  v0:= temp;
  #L427806.  if v0 == 0 then goto L427824;
  #L42780a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.g` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L42780e.  call `onNext`(v0, v2) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L427814.  v2:= -1I;
  #L427816.  call temp:= `leave`(v1, v2) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L42781c.  v2:= temp;
  #L42781e.  if v2 != 0 then goto L427844;
  #L427822.  return @kind void;
  #L427824.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L427828.  call temp:= `next`(v2) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L42782e.  v2:= temp @kind object;
  #L427830.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L427836.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L42783c.  v2:= temp;
  #L42783e.  if v2 != 0 then goto L427844;
  #L427842.  return @kind void;
  #L427844.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.a:()V` @kind virtual;
  #L42784a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` v8 @kind this, `org.reactivestreams.Subscription` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L42785c.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L427860.  call temp:= `validate`(v0, v9) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L427866.  v0:= temp;
  #L427868.  if v0 == 0 then goto L42794a;
  #L42786c.  v8.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.e` @type ^`org.reactivestreams.Subscription` := v9 @kind object;
  #L427870.  v0:= v8.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L427874.  call `onSubscribe`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L42787a.  v1:= v8.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L42787e.  if v1 == 0 then goto L427884;
  #L427882.  return @kind void;
  #L427884.  v1:= v8.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L427888.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L42788e.  v1:= temp @kind object;
  #L427890.  v2:= "The first window publisher supplied is null" @kind object;
  #L427894.  call temp:= `requireNonNull`(v1, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L42789a.  v1:= temp @kind object;
  #L42789c.  v1:= (`org.reactivestreams.Publisher`) v1 @kind object;
  #L4278a0.  v2:= v8.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.d` @type ^`int`;
  #L4278a4.  call temp:= `create`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L4278aa.  v2:= temp @kind object;
  #L4278ac.  call temp:= `requested`(v8) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:()J` @kind virtual;
  #L4278b2.  v3:= temp @kind wide;
  #L4278b4.  v5:= 0L;
  #L4278b8.  v7:= lcmp(v3, v5);
  #L4278bc.  if v7 == 0 then goto L42791a;
  #L4278c0.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4278c6.  v5:= 9223372036854775807L;
  #L4278d0.  v0:= lcmp(v3, v5);
  #L4278d4.  if v0 == 0 then goto L4278e2;
  #L4278d8.  v3:= 1L;
  #L4278dc.  call temp:= `produced`(v8, v3) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L4278e2.  v8.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.g` @type ^`io.reactivex.processors.UnicastProcessor` := v2 @kind object;
  #L4278e6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a`;
  #L4278ea.  call `<init>`(v0, v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;)V` @kind direct;
  #L4278f0.  v2:= v8.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4278f4.  v3:= 0I;
  #L4278f6.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4278fc.  v2:= temp;
  #L4278fe.  if v2 == 0 then goto L42794a;
  #L427902.  v2:= v8.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L427906.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndIncrement:()J` @kind virtual;
  #L42790c.  call `request`(v9, v5) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L427912.  call `subscribe`(v1, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L427918.  goto L42794a;
  #L42791a.  call `cancel`(v9) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L427920.  v9:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L427924.  v1:= "Could not deliver first window due to lack of requests" @kind object;
  #L427928.  call `<init>`(v9, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42792e.  call `onError`(v0, v9) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L427934.  return @kind void;
  #L427936.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L427938.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42793e.  call `cancel`(v9) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L427944.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42794a.  return @kind void;
  catch `java.lang.Throwable` @[L427884..L4278a0] goto L427936;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L427968.  call `requested`(v0, v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @kind virtual;
  #L42796e.  return @kind void;
}
