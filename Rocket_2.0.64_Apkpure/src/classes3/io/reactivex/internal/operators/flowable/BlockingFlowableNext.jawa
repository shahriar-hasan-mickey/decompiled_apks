record `io.reactivex.internal.operators.flowable.BlockingFlowableNext` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Iterable` @kind interface {
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.BlockingFlowableNext.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.BlockingFlowableNext` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext;.<init>:(Lorg/reactivestreams/Publisher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L409e90.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L409e96.  v0.`io.reactivex.internal.operators.flowable.BlockingFlowableNext.a` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L409e9a.  return @kind void;
}
procedure `java.util.Iterator` `iterator`(`io.reactivex.internal.operators.flowable.BlockingFlowableNext` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L409e64.  v0:= new `io.reactivex.internal.operators.flowable.BlockingFlowableNext$b`;
  #L409e68.  call `<init>`(v0) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$b;.<init>:()V` @kind direct;
  #L409e6e.  v1:= new `io.reactivex.internal.operators.flowable.BlockingFlowableNext$a`;
  #L409e72.  v2:= v3.`io.reactivex.internal.operators.flowable.BlockingFlowableNext.a` @type ^`org.reactivestreams.Publisher` @kind object;
  #L409e76.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$a;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$b;)V` @kind direct;
  #L409e7c.  return v1 @kind object;
}
