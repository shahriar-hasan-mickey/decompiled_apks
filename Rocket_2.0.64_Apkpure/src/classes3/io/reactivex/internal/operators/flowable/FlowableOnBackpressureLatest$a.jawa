record `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.b` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.c` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.e` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.g` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L41ba94.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L41ba9a.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L41ba9e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L41baa4.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L41baa8.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L41baac.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L41bab2.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L41bab6.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L41baba.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a` v3 @kind this, `boolean` v4 , `boolean` v5 , `org.reactivestreams.Subscriber` v6 @kind object, `java.util.concurrent.atomic.AtomicReference` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.a:(ZZLorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicReference;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L41ba44.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.e` @type ^`boolean` @kind boolean;
  #L41ba48.  v1:= 0I;
  #L41ba4a.  v2:= 1I;
  #L41ba4c.  if v0 == 0 then goto L41ba58;
  #L41ba50.  call `lazySet`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L41ba56.  return v2;
  #L41ba58.  if v4 == 0 then goto L41ba7e;
  #L41ba5c.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.d` @type ^`java.lang.Throwable` @kind object;
  #L41ba60.  if v4 == 0 then goto L41ba72;
  #L41ba64.  call `lazySet`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L41ba6a.  call `onError`(v6, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41ba70.  return v2;
  #L41ba72.  if v5 == 0 then goto L41ba7e;
  #L41ba76.  call `onComplete`(v6) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41ba7c.  return v2;
  #L41ba7e.  v4:= 0I;
  #L41ba80.  return v4;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a` v13 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L41bb10.  call temp:= `getAndIncrement`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L41bb16.  v0:= temp;
  #L41bb18.  if v0 == 0 then goto L41bb1e;
  #L41bb1c.  return @kind void;
  #L41bb1e.  v0:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41bb22.  v1:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L41bb26.  v2:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41bb2a.  v3:= 1I;
  #L41bb2c.  v4:= 1I;
  #L41bb2e.  v5:= 0L;
  #L41bb32.  v7:= v5 @kind wide;
  #L41bb34.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L41bb3a.  v9:= temp @kind wide;
  #L41bb3c.  v11:= 0I;
  #L41bb3e.  v12:= lcmp(v7, v9);
  #L41bb42.  if v12 == 0 then goto L41bb80;
  #L41bb46.  v9:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.c` @type ^`boolean` @kind boolean;
  #L41bb4a.  v10:= 0I;
  #L41bb4c.  call temp:= `getAndSet`(v2, v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L41bb52.  v10:= temp @kind object;
  #L41bb54.  if v10 != 0 then goto L41bb5c;
  #L41bb58.  v12:= 1I;
  #L41bb5a.  goto L41bb5e;
  #L41bb5c.  v12:= 0I;
  #L41bb5e.  call temp:= `a`(v13, v9, v12, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.a:(ZZLorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind virtual;
  #L41bb64.  v9:= temp;
  #L41bb66.  if v9 == 0 then goto L41bb6c;
  #L41bb6a.  return @kind void;
  #L41bb6c.  if v12 == 0 then goto L41bb72;
  #L41bb70.  goto L41bb80;
  #L41bb72.  call `onNext`(v0, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41bb78.  v9:= 1L;
  #L41bb7c.  v7:= v7 + v9 @kind long;
  #L41bb7e.  goto L41bb34;
  #L41bb80.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L41bb86.  v9:= temp @kind wide;
  #L41bb88.  v12:= lcmp(v7, v9);
  #L41bb8c.  if v12 != 0 then goto L41bbb0;
  #L41bb90.  v9:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.c` @type ^`boolean` @kind boolean;
  #L41bb94.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41bb9a.  v10:= temp @kind object;
  #L41bb9c.  if v10 != 0 then goto L41bba2;
  #L41bba0.  v11:= 1I;
  #L41bba2.  call temp:= `a`(v13, v9, v11, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.a:(ZZLorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind virtual;
  #L41bba8.  v9:= temp;
  #L41bbaa.  if v9 == 0 then goto L41bbb0;
  #L41bbae.  return @kind void;
  #L41bbb0.  v9:= lcmp(v7, v5);
  #L41bbb4.  if v9 == 0 then goto L41bbbe;
  #L41bbb8.  call temp:= `produced`(v1, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L41bbbe.  v4:= -v4 @kind int;
  #L41bbc0.  call temp:= `addAndGet`(v13, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L41bbc6.  v4:= temp;
  #L41bbc8.  if v4 != 0 then goto L41bb2e;
  #L41bbcc.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41bacc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.e` @type ^`boolean` @kind boolean;
  #L41bad0.  if v0 != 0 then goto L41bafc;
  #L41bad4.  v0:= 1I;
  #L41bad6.  v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.e` @type ^`boolean` := v0 @kind boolean;
  #L41bada.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41bade.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L41bae4.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L41baea.  v0:= temp;
  #L41baec.  if v0 != 0 then goto L41bafc;
  #L41baf0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41baf4.  v1:= 0I;
  #L41baf6.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L41bafc.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41bbe0.  v0:= 1I;
  #L41bbe2.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.c` @type ^`boolean` := v0 @kind boolean;
  #L41bbe6.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.b:()V` @kind virtual;
  #L41bbec.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L41bc00.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.d` @type ^`java.lang.Throwable` := v1 @kind object;
  #L41bc04.  v1:= 1I;
  #L41bc06.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.c` @type ^`boolean` := v1 @kind boolean;
  #L41bc0a.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.b:()V` @kind virtual;
  #L41bc10.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41bc24.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41bc28.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L41bc2e.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.b:()V` @kind virtual;
  #L41bc34.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41bc48.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41bc4c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L41bc52.  v0:= temp;
  #L41bc54.  if v0 == 0 then goto L41bc76;
  #L41bc58.  v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.b` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L41bc5c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41bc60.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L41bc66.  v0:= 9223372036854775807L;
  #L41bc70.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L41bc76.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41bc88.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L41bc8e.  v0:= temp;
  #L41bc90.  if v0 == 0 then goto L41bca4;
  #L41bc94.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L41bc98.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L41bc9e.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.b:()V` @kind virtual;
  #L41bca4.  return @kind void;
}
