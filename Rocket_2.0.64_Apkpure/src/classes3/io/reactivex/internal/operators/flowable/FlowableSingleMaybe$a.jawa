record `io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.b` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.c` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleMaybe$a;.<init>:(Lio/reactivex/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L421d9c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L421da2.  v0.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L421da6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L421db8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L421dbc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L421dc2.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L421dc6.  v1.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L421dca.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L421d78.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L421d7c.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L421d80.  if v0 != v1 then goto L421d88;
  #L421d84.  v0:= 1I;
  #L421d86.  goto L421d8a;
  #L421d88.  v0:= 0I;
  #L421d8a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L421ddc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.c` @type ^`boolean` @kind boolean;
  #L421de0.  if v0 == 0 then goto L421de6;
  #L421de4.  return @kind void;
  #L421de6.  v0:= 1I;
  #L421de8.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.c` @type ^`boolean` := v0 @kind boolean;
  #L421dec.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L421df0.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L421df4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.d` @type ^`java.lang.Object` @kind object;
  #L421df8.  v1:= 0I;
  #L421dfa.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.d` @type ^`java.lang.Object` := v1 @kind object;
  #L421dfe.  if v0 != 0 then goto L421e0e;
  #L421e02.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L421e06.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L421e0c.  goto L421e18;
  #L421e0e.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L421e12.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L421e18.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L421e2c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.c` @type ^`boolean` @kind boolean;
  #L421e30.  if v0 == 0 then goto L421e3c;
  #L421e34.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L421e3a.  return @kind void;
  #L421e3c.  v0:= 1I;
  #L421e3e.  v1.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.c` @type ^`boolean` := v0 @kind boolean;
  #L421e42.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L421e46.  v1.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L421e4a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L421e4e.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L421e54.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L421e68.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.c` @type ^`boolean` @kind boolean;
  #L421e6c.  if v0 == 0 then goto L421e72;
  #L421e70.  return @kind void;
  #L421e72.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.d` @type ^`java.lang.Object` @kind object;
  #L421e76.  if v0 == 0 then goto L421eac;
  #L421e7a.  v3:= 1I;
  #L421e7c.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.c` @type ^`boolean` := v3 @kind boolean;
  #L421e80.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L421e84.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L421e8a.  v3:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L421e8e.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L421e92.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L421e96.  v0:= new `java.lang.IllegalArgumentException`;
  #L421e9a.  v1:= "Sequence contains more than one element!" @kind object;
  #L421e9e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L421ea4.  call `onError`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L421eaa.  return @kind void;
  #L421eac.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.d` @type ^`java.lang.Object` := v3 @kind object;
  #L421eb0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleMaybe$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L421ec4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L421ec8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L421ece.  v0:= temp;
  #L421ed0.  if v0 == 0 then goto L421ef2;
  #L421ed4.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L421ed8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L421edc.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L421ee2.  v0:= 9223372036854775807L;
  #L421eec.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L421ef2.  return @kind void;
}
