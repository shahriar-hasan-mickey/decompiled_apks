record `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a` @kind class @AccessFlag FINAL extends `io.reactivex.subscribers.DisposableSubscriber` @kind class {
  `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40b87c.  call `<init>`(v0) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.<init>:()V` @kind direct;
  #L40b882.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` := v1 @kind object;
  #L40b886.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40b898.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a.c` @type ^`boolean` @kind boolean;
  #L40b89c.  if v0 == 0 then goto L40b8a2;
  #L40b8a0.  return @kind void;
  #L40b8a2.  v0:= 1I;
  #L40b8a4.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a.c` @type ^`boolean` := v0 @kind boolean;
  #L40b8a8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` @kind object;
  #L40b8ac.  call `c`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.c:()V` @kind virtual;
  #L40b8b2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40b8c4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a.c` @type ^`boolean` @kind boolean;
  #L40b8c8.  if v0 == 0 then goto L40b8d4;
  #L40b8cc.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40b8d2.  return @kind void;
  #L40b8d4.  v0:= 1I;
  #L40b8d6.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a.c` @type ^`boolean` := v0 @kind boolean;
  #L40b8da.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` @kind object;
  #L40b8de.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40b8e4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L40b8f8.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a.c` @type ^`boolean` @kind boolean;
  #L40b8fc.  if v1 == 0 then goto L40b902;
  #L40b900.  return @kind void;
  #L40b902.  v1:= 1I;
  #L40b904.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a.c` @type ^`boolean` := v1 @kind boolean;
  #L40b908.  call `cancel`(v0) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.cancel:()V` @kind virtual;
  #L40b90e.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` @kind object;
  #L40b912.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.c:()V` @kind virtual;
  #L40b918.  return @kind void;
}
