record `io.reactivex.internal.operators.flowable.FlowableAnySingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.flowable.FlowableAnySingle$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.flowable.FlowableAnySingle$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableAnySingle$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableAnySingle$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableAnySingle$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAnySingle$a;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40a814.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40a81a.  v0.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L40a81e.  v0.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.b` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L40a822.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableAnySingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAnySingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40a834.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40a838.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40a83e.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L40a842.  v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L40a846.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableAnySingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAnySingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40a7f0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40a7f4.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L40a7f8.  if v0 != v1 then goto L40a800;
  #L40a7fc.  v0:= 1I;
  #L40a7fe.  goto L40a802;
  #L40a800.  v0:= 0I;
  #L40a802.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableAnySingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAnySingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40a858.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.d` @type ^`boolean` @kind boolean;
  #L40a85c.  if v0 != 0 then goto L40a87c;
  #L40a860.  v0:= 1I;
  #L40a862.  v2.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.d` @type ^`boolean` := v0 @kind boolean;
  #L40a866.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L40a86a.  v2.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L40a86e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L40a872.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L40a876.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L40a87c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableAnySingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAnySingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40a890.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.d` @type ^`boolean` @kind boolean;
  #L40a894.  if v0 == 0 then goto L40a8a0;
  #L40a898.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40a89e.  return @kind void;
  #L40a8a0.  v0:= 1I;
  #L40a8a2.  v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.d` @type ^`boolean` := v0 @kind boolean;
  #L40a8a6.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L40a8aa.  v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L40a8ae.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L40a8b2.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40a8b8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableAnySingle$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAnySingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40a8cc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.d` @type ^`boolean` @kind boolean;
  #L40a8d0.  if v0 == 0 then goto L40a8d6;
  #L40a8d4.  return @kind void;
  #L40a8d6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.b` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L40a8da.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L40a8e0.  v2:= temp;
  #L40a8e2.  if v2 == 0 then goto L40a90c;
  #L40a8e6.  v2:= 1I;
  #L40a8e8.  v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.d` @type ^`boolean` := v2 @kind boolean;
  #L40a8ec.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40a8f0.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40a8f6.  v2:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L40a8fa.  v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L40a8fe.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L40a902.  v0:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L40a906.  call `onSuccess`(v2, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L40a90c.  return @kind void;
  #L40a90e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40a910.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40a916.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40a91a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40a920.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L40a924.  v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L40a928.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableAnySingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40a92e.  return @kind void;
  catch `java.lang.Throwable` @[L40a8d6..L40a8e2] goto L40a90e;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableAnySingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAnySingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40a94c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40a950.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40a956.  v0:= temp;
  #L40a958.  if v0 == 0 then goto L40a97a;
  #L40a95c.  v2.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L40a960.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L40a964.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L40a96a.  v0:= 9223372036854775807L;
  #L40a974.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40a97a.  return @kind void;
}
