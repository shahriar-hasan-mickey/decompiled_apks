record `io.reactivex.internal.operators.flowable.FlowableObserveOn$a` @kind class @AccessFlag ABSTRACT extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableObserveOn$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableObserveOn$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableObserveOn$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableObserveOn$a.e` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @AccessFlag ;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableObserveOn$a.j` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableObserveOn$a.k` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableObserveOn$a.l` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableObserveOn$a.m` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableObserveOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$a` v0 @kind this, `io.reactivex.Scheduler$Worker` v1 @kind object, `boolean` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.<init>:(Lio/reactivex/Scheduler$Worker;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41a460.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L41a466.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` := v1 @kind object;
  #L41a46a.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.b` @type ^`boolean` := v2 @kind boolean;
  #L41a46e.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.c` @type ^`int` := v3;
  #L41a472.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L41a476.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L41a47c.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L41a480.  v1:= v3 ^> 2;
  #L41a484.  v3:= v3 - v1 @kind int;
  #L41a486.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.d` @type ^`int` := v3;
  #L41a48a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a49c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L41a4a0.  if v0 == 0 then goto L41a4a6;
  #L41a4a4.  return @kind void;
  #L41a4a6.  v0:= 1I;
  #L41a4a8.  v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v0 @kind boolean;
  #L41a4ac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41a4b0.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L41a4b6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L41a4ba.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41a4c0.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L41a4c6.  v0:= temp;
  #L41a4c8.  if v0 != 0 then goto L41a4d6;
  #L41a4cc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L41a4d0.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L41a4d6.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a4e8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L41a4ec.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L41a4f2.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$a` v2 @kind this, `boolean` v3 , `boolean` v4 , `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L41a38c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L41a390.  v1:= 1I;
  #L41a392.  if v0 == 0 then goto L41a39e;
  #L41a396.  call `clear`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.clear:()V` @kind virtual;
  #L41a39c.  return v1;
  #L41a39e.  if v3 == 0 then goto L41a406;
  #L41a3a2.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.b` @type ^`boolean` @kind boolean;
  #L41a3a6.  if v3 == 0 then goto L41a3d0;
  #L41a3aa.  if v4 == 0 then goto L41a406;
  #L41a3ae.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.j` @type ^`java.lang.Throwable` @kind object;
  #L41a3b2.  if v3 == 0 then goto L41a3be;
  #L41a3b6.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41a3bc.  goto L41a3c4;
  #L41a3be.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41a3c4.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L41a3c8.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41a3ce.  return v1;
  #L41a3d0.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.j` @type ^`java.lang.Throwable` @kind object;
  #L41a3d4.  if v3 == 0 then goto L41a3f0;
  #L41a3d8.  call `clear`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.clear:()V` @kind virtual;
  #L41a3de.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41a3e4.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L41a3e8.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41a3ee.  return v1;
  #L41a3f0.  if v4 == 0 then goto L41a406;
  #L41a3f4.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41a3fa.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L41a3fe.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41a404.  return v1;
  #L41a406.  v3:= 0I;
  #L41a408.  return v3;
}
procedure `void` `f`() @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.f:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `g`() @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.g:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `h`() @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.h:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `i`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.i:()V` @AccessFlag FINAL {
    temp;
    v0;

  #L41a634.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L41a63a.  v0:= temp;
  #L41a63c.  if v0 == 0 then goto L41a642;
  #L41a640.  return @kind void;
  #L41a642.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L41a646.  call temp:= `schedule`(v0, v1) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L41a64c.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a41c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L41a420.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L41a426.  v0:= temp;
  #L41a428.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.onComplete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a504.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L41a508.  if v0 != 0 then goto L41a518;
  #L41a50c.  v0:= 1I;
  #L41a50e.  v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` := v0 @kind boolean;
  #L41a512.  call `i`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.i:()V` @kind virtual;
  #L41a518.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a52c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L41a530.  if v0 == 0 then goto L41a53c;
  #L41a534.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41a53a.  return @kind void;
  #L41a53c.  v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.j` @type ^`java.lang.Throwable` := v2 @kind object;
  #L41a540.  v2:= 1I;
  #L41a542.  v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` := v2 @kind boolean;
  #L41a546.  call `i`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.i:()V` @kind virtual;
  #L41a54c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L41a560.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L41a564.  if v0 == 0 then goto L41a56a;
  #L41a568.  return @kind void;
  #L41a56a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int`;
  #L41a56e.  v1:= 2I;
  #L41a570.  if v0 != v1 then goto L41a57c;
  #L41a574.  call `i`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.i:()V` @kind virtual;
  #L41a57a.  return @kind void;
  #L41a57c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L41a580.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L41a586.  v3:= temp;
  #L41a588.  if v3 != 0 then goto L41a5ae;
  #L41a58c.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41a590.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L41a596.  v3:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L41a59a.  v0:= "Queue is full?!" @kind object;
  #L41a59e.  call `<init>`(v3, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41a5a4.  v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.j` @type ^`java.lang.Throwable` := v3 @kind object;
  #L41a5a8.  v3:= 1I;
  #L41a5aa.  v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` := v3 @kind boolean;
  #L41a5ae.  call `i`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.i:()V` @kind virtual;
  #L41a5b4.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a5c8.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L41a5ce.  v0:= temp;
  #L41a5d0.  if v0 == 0 then goto L41a5e4;
  #L41a5d4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L41a5d8.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L41a5de.  call `i`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.i:()V` @kind virtual;
  #L41a5e4.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a43c.  v0:= 2I;
  #L41a43e.  v2:= v2 ^& v0 @kind int;
  #L41a440.  if v2 == 0 then goto L41a44c;
  #L41a444.  v2:= 1I;
  #L41a446.  v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.m` @type ^`boolean` := v2 @kind boolean;
  #L41a44a.  return v0;
  #L41a44c.  v2:= 0I;
  #L41a44e.  return v2;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.run:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L41a5f8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.m` @type ^`boolean` @kind boolean;
  #L41a5fc.  if v0 == 0 then goto L41a608;
  #L41a600.  call `g`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.g:()V` @kind virtual;
  #L41a606.  goto L41a620;
  #L41a608.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int`;
  #L41a60c.  v1:= 1I;
  #L41a60e.  if v0 != v1 then goto L41a61a;
  #L41a612.  call `h`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.h:()V` @kind virtual;
  #L41a618.  goto L41a620;
  #L41a61a.  call `f`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.f:()V` @kind virtual;
  #L41a620.  return @kind void;
}
