record `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.internal.subscribers.InnerQueuedSubscriberSupport` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.e` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.g` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.h` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.i` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.k` @AccessFlag VOLATILE;
  `io.reactivex.internal.subscribers.InnerQueuedSubscriber` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.l` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `int` v4 , `io.reactivex.internal.util.ErrorMode` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;IILio/reactivex/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40edb4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L40edba.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L40edbe.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L40edc2.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.c` @type ^`int` := v3;
  #L40edc6.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.d` @type ^`int` := v4;
  #L40edca.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.e` @type ^`io.reactivex.internal.util.ErrorMode` := v5 @kind object;
  #L40edce.  v1:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L40edd2.  call temp:= `min`(v4, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L40edd8.  v2:= temp;
  #L40edda.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L40ede0.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.h` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v1 @kind object;
  #L40ede4.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L40ede8.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L40edee.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L40edf2.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L40edf6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L40edfc.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.g` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L40ee00.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L40ee48.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.h` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L40ee4c.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L40ee52.  v0:= temp @kind object;
  #L40ee54.  v0:= (`io.reactivex.internal.subscribers.InnerQueuedSubscriber`) v0 @kind object;
  #L40ee58.  if v0 == 0 then goto L40ee64;
  #L40ee5c.  call `cancel`(v0) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L40ee62.  goto L40ee48;
  #L40ee64.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L40f104.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L40f10a.  v0:= temp;
  #L40f10c.  if v0 != 0 then goto L40f122;
  #L40f110.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @kind virtual;
  #L40f116.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L40f11c.  v0:= temp;
  #L40f11e.  if v0 != 0 then goto L40f110;
  #L40f122.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40ee14.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.j` @type ^`boolean` @kind boolean;
  #L40ee18.  if v0 == 0 then goto L40ee1e;
  #L40ee1c.  return @kind void;
  #L40ee1e.  v0:= 1I;
  #L40ee20.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.j` @type ^`boolean` := v0 @kind boolean;
  #L40ee24.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40ee28.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40ee2e.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.b:()V` @kind virtual;
  #L40ee34.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a` v19 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.drain:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L40ee78.  v1:= v19 @kind object;
  #L40ee7c.  call temp:= `getAndIncrement`(v19) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L40ee82.  v0:= temp;
  #L40ee84.  if v0 == 0 then goto L40ee8a;
  #L40ee88.  return @kind void;
  #L40ee8a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.internal.subscribers.InnerQueuedSubscriber` @kind object;
  #L40ee8e.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40ee92.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.e` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L40ee96.  v5:= 1I;
  #L40ee98.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40ee9c.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L40eea2.  v6:= temp @kind wide;
  #L40eea4.  if v0 != 0 then goto L40ef24;
  #L40eea8.  v0:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L40eeac.  if v3 == v0 then goto L40eede;
  #L40eeb0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40eeb4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L40eeba.  v0:= temp @kind object;
  #L40eebc.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L40eec0.  if v0 == 0 then goto L40eede;
  #L40eec4.  call `a`(v19) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @kind virtual;
  #L40eeca.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40eece.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L40eed4.  v0:= temp @kind object;
  #L40eed6.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40eedc.  return @kind void;
  #L40eede.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.k` @type ^`boolean` @kind boolean;
  #L40eee2.  v8:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.h` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L40eee6.  call temp:= `poll`(v8) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L40eeec.  v8:= temp @kind object;
  #L40eeee.  v8:= (`io.reactivex.internal.subscribers.InnerQueuedSubscriber`) v8 @kind object;
  #L40eef2.  if v0 == 0 then goto L40ef1a;
  #L40eef6.  if v8 != 0 then goto L40ef1a;
  #L40eefa.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40eefe.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L40ef04.  v0:= temp @kind object;
  #L40ef06.  if v0 == 0 then goto L40ef12;
  #L40ef0a.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40ef10.  goto L40ef18;
  #L40ef12.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40ef18.  return @kind void;
  #L40ef1a.  if v8 == 0 then goto L40ef26;
  #L40ef1e.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.internal.subscribers.InnerQueuedSubscriber` := v8 @kind object;
  #L40ef22.  goto L40ef26;
  #L40ef24.  v8:= v0 @kind object;
  #L40ef26.  v9:= 0L;
  #L40ef2a.  v11:= 0I;
  #L40ef2c.  if v8 == 0 then goto L40f092;
  #L40ef30.  call temp:= `queue`(v8) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.queue:()Lio/reactivex/internal/fuseable/SimpleQueue;` @kind virtual;
  #L40ef36.  v12:= temp @kind object;
  #L40ef38.  if v12 == 0 then goto L40f092;
  #L40ef3c.  v16:= v5;
  #L40ef40.  v13:= v9 @kind wide;
  #L40ef42.  v4:= 1L;
  #L40ef46.  v17:= lcmp(v13, v6);
  #L40ef4a.  if v17 == 0 then goto L40f010;
  #L40ef4e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.j` @type ^`boolean` @kind boolean;
  #L40ef52.  if v0 == 0 then goto L40ef5e;
  #L40ef56.  call `a`(v19) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @kind virtual;
  #L40ef5c.  return @kind void;
  #L40ef5e.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L40ef62.  if v3 != v0 then goto L40ef9e;
  #L40ef66.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40ef6a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L40ef70.  v0:= temp @kind object;
  #L40ef72.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L40ef76.  if v0 == 0 then goto L40ef9e;
  #L40ef7a.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.internal.subscribers.InnerQueuedSubscriber` := v11 @kind object;
  #L40ef7e.  call `cancel`(v8) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L40ef84.  call `a`(v19) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @kind virtual;
  #L40ef8a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40ef8e.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L40ef94.  v0:= temp @kind object;
  #L40ef96.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40ef9c.  return @kind void;
  #L40ef9e.  call temp:= `isDone`(v8) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.isDone:()Z` @kind virtual;
  #L40efa4.  v0:= temp;
  #L40efa6.  call temp:= `poll`(v12) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L40efac.  v15:= temp @kind object;
  #L40efae.  if v15 != 0 then goto L40efb8;
  #L40efb2.  v18:= 1I;
  #L40efb6.  goto L40efbc;
  #L40efb8.  v18:= 0I;
  #L40efbc.  if v0 == 0 then goto L40efd8;
  #L40efc0.  if v18 == 0 then goto L40efd8;
  #L40efc4.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.internal.subscribers.InnerQueuedSubscriber` := v11 @kind object;
  #L40efc8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40efcc.  call `request`(v0, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40efd2.  v8:= v11 @kind object;
  #L40efd4.  v0:= 1I;
  #L40efd6.  goto L40f012;
  #L40efd8.  if v18 == 0 then goto L40efde;
  #L40efdc.  goto L40f010;
  #L40efde.  call `onNext`(v2, v15) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40efe4.  v13:= v13 + v4 @kind long;
  #L40efe6.  call `requestOne`(v8) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.requestOne:()V` @kind virtual;
  #L40efec.  goto L40ef42;
  #L40efee.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40eff0.  v3:= v0 @kind object;
  #L40eff2.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40eff8.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.internal.subscribers.InnerQueuedSubscriber` := v11 @kind object;
  #L40effc.  call `cancel`(v8) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L40f002.  call `a`(v19) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @kind virtual;
  #L40f008.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40f00e.  return @kind void;
  #L40f010.  v0:= 0I;
  #L40f012.  if v17 != 0 then goto L40f09a;
  #L40f016.  v15:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.j` @type ^`boolean` @kind boolean;
  #L40f01a.  if v15 == 0 then goto L40f026;
  #L40f01e.  call `a`(v19) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @kind virtual;
  #L40f024.  return @kind void;
  #L40f026.  v15:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L40f02a.  if v3 != v15 then goto L40f066;
  #L40f02e.  v15:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40f032.  call temp:= `get`(v15) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L40f038.  v15:= temp @kind object;
  #L40f03a.  v15:= (`java.lang.Throwable`) v15 @kind object;
  #L40f03e.  if v15 == 0 then goto L40f066;
  #L40f042.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.internal.subscribers.InnerQueuedSubscriber` := v11 @kind object;
  #L40f046.  call `cancel`(v8) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L40f04c.  call `a`(v19) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @kind virtual;
  #L40f052.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40f056.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L40f05c.  v0:= temp @kind object;
  #L40f05e.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40f064.  return @kind void;
  #L40f066.  call temp:= `isDone`(v8) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.isDone:()Z` @kind virtual;
  #L40f06c.  v15:= temp;
  #L40f06e.  call temp:= `isEmpty`(v12) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L40f074.  v12:= temp;
  #L40f076.  if v15 == 0 then goto L40f09a;
  #L40f07a.  if v12 == 0 then goto L40f09a;
  #L40f07e.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.internal.subscribers.InnerQueuedSubscriber` := v11 @kind object;
  #L40f082.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40f086.  call `request`(v0, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40f08c.  v8:= v11 @kind object;
  #L40f08e.  v0:= 1I;
  #L40f090.  goto L40f09a;
  #L40f092.  v16:= v5;
  #L40f096.  v13:= v9 @kind wide;
  #L40f098.  v0:= 0I;
  #L40f09a.  v4:= lcmp(v13, v9);
  #L40f09e.  if v4 == 0 then goto L40f0c0;
  #L40f0a2.  v4:= 9223372036854775807L;
  #L40f0ac.  v9:= lcmp(v6, v4);
  #L40f0b0.  if v9 == 0 then goto L40f0c0;
  #L40f0b4.  v4:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40f0b8.  v5:= -v13 @kind long;
  #L40f0ba.  call temp:= `addAndGet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L40f0c0.  if v0 == 0 then goto L40f0ce;
  #L40f0c4.  v0:= v8 @kind object;
  #L40f0c6.  v5:= v16;
  #L40f0ca.  goto L40ee98;
  #L40f0ce.  v4:= v16;
  #L40f0d2.  v0:= -v4 @kind int;
  #L40f0d4.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L40f0da.  v5:= temp;
  #L40f0dc.  if v5 != 0 then goto L40f0e2;
  #L40f0e0.  return @kind void;
  #L40f0e2.  v0:= v8 @kind object;
  #L40f0e4.  goto L40ee98;
  catch `java.lang.Throwable` @[L40efa6..L40efae] goto L40efee;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a` v0 @kind this, `io.reactivex.internal.subscribers.InnerQueuedSubscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.innerComplete:(Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;)V` @AccessFlag PUBLIC {
    temp;

  #L40f134.  call `setDone`(v1) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.setDone:()V` @kind virtual;
  #L40f13a.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.drain:()V` @kind virtual;
  #L40f140.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a` v1 @kind this, `io.reactivex.internal.subscribers.InnerQueuedSubscriber` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.innerError:(Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40f154.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40f158.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L40f15e.  v0:= temp;
  #L40f160.  if v0 == 0 then goto L40f188;
  #L40f164.  call `setDone`(v2) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.setDone:()V` @kind virtual;
  #L40f16a.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.e` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L40f16e.  v3:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L40f172.  if v2 == v3 then goto L40f180;
  #L40f176.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40f17a.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40f180.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.drain:()V` @kind virtual;
  #L40f186.  goto L40f18e;
  #L40f188.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40f18e.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a` v1 @kind this, `io.reactivex.internal.subscribers.InnerQueuedSubscriber` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.innerNext:(Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40f1a0.  call temp:= `queue`(v2) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.queue:()Lio/reactivex/internal/fuseable/SimpleQueue;` @kind virtual;
  #L40f1a6.  v0:= temp @kind object;
  #L40f1a8.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L40f1ae.  v3:= temp;
  #L40f1b0.  if v3 == 0 then goto L40f1bc;
  #L40f1b4.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.drain:()V` @kind virtual;
  #L40f1ba.  goto L40f1d2;
  #L40f1bc.  call `cancel`(v2) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L40f1c2.  v3:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L40f1c6.  call `<init>`(v3) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L40f1cc.  call `innerError`(v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.innerError:(Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;Ljava/lang/Throwable;)V` @kind virtual;
  #L40f1d2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40f1e4.  v0:= 1I;
  #L40f1e6.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.k` @type ^`boolean` := v0 @kind boolean;
  #L40f1ea.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.drain:()V` @kind virtual;
  #L40f1f0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40f204.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L40f208.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L40f20e.  v0:= temp;
  #L40f210.  if v0 == 0 then goto L40f222;
  #L40f214.  v2:= 1I;
  #L40f216.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.k` @type ^`boolean` := v2 @kind boolean;
  #L40f21a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.drain:()V` @kind virtual;
  #L40f220.  goto L40f228;
  #L40f222.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40f228.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40f23c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L40f240.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L40f246.  v3:= temp @kind object;
  #L40f248.  v0:= "The mapper returned a null Publisher" @kind object;
  #L40f24c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40f252.  v3:= temp @kind object;
  #L40f254.  v3:= (`org.reactivestreams.Publisher`) v3 @kind object;
  #L40f258.  v0:= new `io.reactivex.internal.subscribers.InnerQueuedSubscriber`;
  #L40f25c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.d` @type ^`int`;
  #L40f260.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.<init>:(Lio/reactivex/internal/subscribers/InnerQueuedSubscriberSupport;I)V` @kind direct;
  #L40f266.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.j` @type ^`boolean` @kind boolean;
  #L40f26a.  if v1 == 0 then goto L40f270;
  #L40f26e.  return @kind void;
  #L40f270.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.h` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L40f274.  call temp:= `offer`(v1, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L40f27a.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.j` @type ^`boolean` @kind boolean;
  #L40f27e.  if v1 == 0 then goto L40f284;
  #L40f282.  return @kind void;
  #L40f284.  call `subscribe`(v3, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40f28a.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.j` @type ^`boolean` @kind boolean;
  #L40f28e.  if v3 == 0 then goto L40f29e;
  #L40f292.  call `cancel`(v0) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L40f298.  call `b`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.b:()V` @kind virtual;
  #L40f29e.  return @kind void;
  #L40f2a0.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40f2a2.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40f2a8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40f2ac.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40f2b2.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40f2b8.  return @kind void;
  catch `java.lang.Throwable` @[L40f23c..L40f258] goto L40f2a0;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40f2d8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40f2dc.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40f2e2.  v0:= temp;
  #L40f2e4.  if v0 == 0 then goto L40f318;
  #L40f2e8.  v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.i` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L40f2ec.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40f2f0.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40f2f6.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.c` @type ^`int`;
  #L40f2fa.  v1:= 2147483647I;
  #L40f300.  if v0 != v1 then goto L40f310;
  #L40f304.  v0:= 9223372036854775807L;
  #L40f30e.  goto L40f312;
  #L40f310.  v0:= (`long`) v0 @kind i2l;
  #L40f312.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40f318.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40f32c.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L40f332.  v0:= temp;
  #L40f334.  if v0 == 0 then goto L40f348;
  #L40f338.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40f33c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L40f342.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.drain:()V` @kind virtual;
  #L40f348.  return @kind void;
}
