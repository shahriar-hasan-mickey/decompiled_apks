record `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.c` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.d` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.e` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.f` @AccessFlag FINAL;
  `java.util.Collection` `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.g` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/Callable;Ljava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L40b998.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L40b99c.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L40b9a2.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L40b9a8.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L40b9ac.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L40b9b2.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L40b9b6.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.c` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L40b9ba.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.d` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L40b9be.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L40b94c.  v1:= v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40b950.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40b956.  v1:= 1I;
  #L40b958.  return v1;
}
procedure `boolean` `accept`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L40b92c.  v2:= (`java.util.Collection`) v2 @kind object;
  #L40b930.  call temp:= `a`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @kind virtual;
  #L40b936.  v1:= temp;
  #L40b938.  return v1;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L40ba3c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40ba40.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40ba46.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40ba58.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L40ba5c.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L40ba62.  v0:= temp @kind object;
  #L40ba64.  v1:= "The buffer supplied is null" @kind object;
  #L40ba68.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40ba6e.  v0:= temp @kind object;
  #L40ba70.  v0:= (`java.util.Collection`) v0 @kind object;
  #L40ba74.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.d` @type ^`java.util.concurrent.Callable` @kind object;
  #L40ba78.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L40ba7e.  v1:= temp @kind object;
  #L40ba80.  v2:= "The boundary publisher supplied is null" @kind object;
  #L40ba84.  call temp:= `requireNonNull`(v1, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40ba8a.  v1:= temp @kind object;
  #L40ba8c.  v1:= (`org.reactivestreams.Publisher`) v1 @kind object;
  #L40ba90.  v2:= new `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a`;
  #L40ba94.  call `<init>`(v2, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;)V` @kind direct;
  #L40ba9a.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40ba9e.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L40baa4.  v3:= temp @kind object;
  #L40baa6.  v3:= (`io.reactivex.disposables.Disposable`) v3 @kind object;
  #L40baaa.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40baae.  call temp:= `compareAndSet`(v4, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L40bab4.  v3:= temp;
  #L40bab6.  if v3 != 0 then goto L40babc;
  #L40baba.  return @kind void;
  #L40babc.  @monitorenter v5
  #L40babe.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.g` @type ^`java.util.Collection` @kind object;
  #L40bac2.  if v3 != 0 then goto L40baca;
  #L40bac6.  @monitorexit v5
  #L40bac8.  return @kind void;
  #L40baca.  v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.g` @type ^`java.util.Collection` := v0 @kind object;
  #L40bace.  @monitorexit v5
  #L40bad0.  call `subscribe`(v1, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40bad6.  v0:= 0I;
  #L40bad8.  call `fastPathEmitMax`(v5, v3, v0, v5) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastPathEmitMax:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L40bade.  return @kind void;
  #L40bae0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40bae2.  @monitorexit v5
  #L40bae4.  throw v0;
  #L40bae6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40bae8.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40baee.  v1:= 1I;
  #L40baf0.  v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L40baf4.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40baf8.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40bafe.  v1:= v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40bb02.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40bb08.  return @kind void;
  #L40bb0a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40bb0c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40bb12.  call `cancel`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.cancel:()V` @kind virtual;
  #L40bb18.  v1:= v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40bb1c.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40bb22.  return @kind void;
  catch `java.lang.Throwable` @[L40ba58..L40ba74] goto L40bb0a;
  catch `java.lang.Throwable` @[L40ba74..L40ba90] goto L40bae6;
  catch `java.lang.Throwable` @[L40babe..L40bad0] goto L40bae0;
  catch `java.lang.Throwable` @[L40bae2..L40bae4] goto L40bae0;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40b9d0.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L40b9d4.  if v0 != 0 then goto L40ba04;
  #L40b9d8.  v0:= 1I;
  #L40b9da.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L40b9de.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40b9e2.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40b9e8.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.b:()V` @kind virtual;
  #L40b9ee.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L40b9f4.  v0:= temp;
  #L40b9f6.  if v0 == 0 then goto L40ba04;
  #L40b9fa.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L40b9fe.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L40ba04.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40ba18.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40ba1c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40ba22.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.b:()V` @kind virtual;
  #L40ba28.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40b96c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40b970.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L40b976.  v0:= temp @kind object;
  #L40b978.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L40b97c.  if v0 != v1 then goto L40b984;
  #L40b980.  v0:= 1I;
  #L40b982.  goto L40b986;
  #L40b984.  v0:= 0I;
  #L40b986.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40bb5c.  @monitorenter v3
  #L40bb5e.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.g` @type ^`java.util.Collection` @kind object;
  #L40bb62.  if v0 != 0 then goto L40bb6a;
  #L40bb66.  @monitorexit v3
  #L40bb68.  return @kind void;
  #L40bb6a.  v1:= 0I;
  #L40bb6c.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.g` @type ^`java.util.Collection` := v1 @kind object;
  #L40bb70.  @monitorexit v3
  #L40bb72.  v1:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L40bb76.  call temp:= `offer`(v1, v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L40bb7c.  v0:= 1I;
  #L40bb7e.  v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40bb82.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L40bb88.  v0:= temp;
  #L40bb8a.  if v0 == 0 then goto L40bb9e;
  #L40bb8e.  v0:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L40bb92.  v1:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40bb96.  v2:= 0I;
  #L40bb98.  call `drainMaxLoop`(v0, v1, v2, v3, v3) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/QueueDrain;)V` @kind static;
  #L40bb9e.  return @kind void;
  #L40bba0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40bba2.  @monitorexit v3
  #L40bba4.  throw v0;
  catch `java.lang.Throwable` @[L40bb5e..L40bb72] goto L40bba0;
  catch `java.lang.Throwable` @[L40bba2..L40bba4] goto L40bba0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40bbcc.  call `cancel`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.cancel:()V` @kind virtual;
  #L40bbd2.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40bbd6.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40bbdc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40bbf0.  @monitorenter v1
  #L40bbf2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.g` @type ^`java.util.Collection` @kind object;
  #L40bbf6.  if v0 != 0 then goto L40bbfe;
  #L40bbfa.  @monitorexit v1
  #L40bbfc.  return @kind void;
  #L40bbfe.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L40bc04.  @monitorexit v1
  #L40bc06.  return @kind void;
  #L40bc08.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40bc0a.  @monitorexit v1
  #L40bc0c.  throw v2;
  catch `java.lang.Throwable` @[L40bbf2..L40bc0c] goto L40bc08;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` v5 @kind this, `org.reactivestreams.Subscription` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40bc2c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40bc30.  call temp:= `validate`(v0, v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40bc36.  v0:= temp;
  #L40bc38.  if v0 != 0 then goto L40bc3e;
  #L40bc3c.  return @kind void;
  #L40bc3e.  v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.e` @type ^`org.reactivestreams.Subscription` := v6 @kind object;
  #L40bc42.  v0:= v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40bc46.  v1:= 1I;
  #L40bc48.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L40bc4c.  call temp:= `call`(v2) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L40bc52.  v2:= temp @kind object;
  #L40bc54.  v3:= "The buffer supplied is null" @kind object;
  #L40bc58.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40bc5e.  v2:= temp @kind object;
  #L40bc60.  v2:= (`java.util.Collection`) v2 @kind object;
  #L40bc64.  v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.g` @type ^`java.util.Collection` := v2 @kind object;
  #L40bc68.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.d` @type ^`java.util.concurrent.Callable` @kind object;
  #L40bc6c.  call temp:= `call`(v2) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L40bc72.  v2:= temp @kind object;
  #L40bc74.  v3:= "The boundary publisher supplied is null" @kind object;
  #L40bc78.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40bc7e.  v2:= temp @kind object;
  #L40bc80.  v2:= (`org.reactivestreams.Publisher`) v2 @kind object;
  #L40bc84.  v1:= new `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a`;
  #L40bc88.  call `<init>`(v1, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;)V` @kind direct;
  #L40bc8e.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40bc92.  call `set`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L40bc98.  call `onSubscribe`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40bc9e.  v0:= v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L40bca2.  if v0 != 0 then goto L40bcbc;
  #L40bca6.  v3:= 9223372036854775807L;
  #L40bcb0.  call `request`(v6, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40bcb6.  call `subscribe`(v2, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40bcbc.  return @kind void;
  #L40bcbe.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40bcc0.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40bcc6.  v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L40bcca.  call `cancel`(v6) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40bcd0.  call `error`(v2, v0) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L40bcd6.  return @kind void;
  #L40bcd8.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40bcda.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40bce0.  v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L40bce4.  call `cancel`(v6) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40bcea.  call `error`(v2, v0) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L40bcf0.  return @kind void;
  catch `java.lang.Throwable` @[L40bc48..L40bc64] goto L40bcd8;
  catch `java.lang.Throwable` @[L40bc68..L40bc84] goto L40bcbe;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L40bd1c.  call `requested`(v0, v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @kind virtual;
  #L40bd22.  return @kind void;
}
