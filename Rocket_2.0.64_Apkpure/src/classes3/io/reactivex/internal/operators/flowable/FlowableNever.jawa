record `io.reactivex.internal.operators.flowable.FlowableNever` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Flowable` @kind class {
}
global `io.reactivex.Flowable` `@@io.reactivex.internal.operators.flowable.FlowableNever.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableNever;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L41a338.  v0:= new `io.reactivex.internal.operators.flowable.FlowableNever`;
  #L41a33c.  call `<init>`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableNever;.<init>:()V` @kind direct;
  #L41a342.  `@@io.reactivex.internal.operators.flowable.FlowableNever.INSTANCE` @type ^`io.reactivex.Flowable` := v0 @kind object;
  #L41a346.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableNever` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableNever;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L41a358.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L41a35e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableNever` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableNever;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41a370.  v0:= `@@io.reactivex.internal.subscriptions.EmptySubscription.INSTANCE` @type ^`io.reactivex.internal.subscriptions.EmptySubscription` @kind object;
  #L41a374.  call `onSubscribe`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L41a37a.  return @kind void;
}
