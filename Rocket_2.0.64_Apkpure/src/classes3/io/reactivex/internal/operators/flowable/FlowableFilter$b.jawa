record `io.reactivex.internal.operators.flowable.FlowableFilter$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.BasicFuseableSubscriber` @kind class, `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface {
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.flowable.FlowableFilter$b.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFilter$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L412fe8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L412fee.  v0.`io.reactivex.internal.operators.flowable.FlowableFilter$b.a` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L412ff2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFilter$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L413004.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$b;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L41300a.  v3:= temp;
  #L41300c.  if v3 != 0 then goto L41301e;
  #L413010.  v3:= v2.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.s` @type ^`org.reactivestreams.Subscription` @kind object;
  #L413014.  v0:= 1L;
  #L413018.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L41301e.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableFilter$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$b;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L412f9c.  v0:= v4.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L412fa0.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableFilter$b.a` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L412fa4.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L412faa.  v2:= temp @kind object;
  #L412fac.  if v2 != 0 then goto L412fb4;
  #L412fb0.  v0:= 0I;
  #L412fb2.  return v0 @kind object;
  #L412fb4.  call temp:= `test`(v1, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L412fba.  v3:= temp;
  #L412fbc.  if v3 == 0 then goto L412fc2;
  #L412fc0.  return v2 @kind object;
  #L412fc2.  v2:= v4.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.sourceMode` @type ^`int`;
  #L412fc6.  v3:= 2I;
  #L412fc8.  if v2 != v3 then goto L412fa4;
  #L412fcc.  v2:= 1L;
  #L412fd0.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L412fd6.  goto L412fa4;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableFilter$b` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$b;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L412f80.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L412f86.  v1:= temp;
  #L412f88.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableFilter$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$b;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L412f18.  v0:= v2.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` @kind boolean;
  #L412f1c.  if v0 == 0 then goto L412f24;
  #L412f20.  v3:= 0I;
  #L412f22.  return v3;
  #L412f24.  v0:= v2.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.sourceMode` @type ^`int`;
  #L412f28.  v1:= 1I;
  #L412f2a.  if v0 == 0 then goto L412f3c;
  #L412f2e.  v3:= v2.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L412f32.  v0:= 0I;
  #L412f34.  call `onNext`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L412f3a.  return v1;
  #L412f3c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFilter$b.a` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L412f40.  call temp:= `test`(v0, v3) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L412f46.  v0:= temp;
  #L412f48.  if v0 == 0 then goto L412f56;
  #L412f4c.  v1:= v2.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L412f50.  call `onNext`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L412f56.  return v0;
  #L412f58.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L412f5a.  call `fail`(v2, v3) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L412f60.  return v1;
  catch `java.lang.Throwable` @[L412f3c..L412f48] goto L412f58;
}
