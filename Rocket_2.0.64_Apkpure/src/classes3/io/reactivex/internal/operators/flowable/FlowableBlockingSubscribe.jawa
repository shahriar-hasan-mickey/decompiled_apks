record `io.reactivex.internal.operators.flowable.FlowableBlockingSubscribe` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBlockingSubscribe` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBlockingSubscribe;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L40aac0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40aac6.  v0:= new `java.lang.IllegalStateException`;
  #L40aaca.  v1:= "No instances!" @kind object;
  #L40aace.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40aad4.  throw v0;
}
procedure `void` `subscribe`(`org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40aae8.  v0:= new `io.reactivex.internal.util.BlockingIgnoringReceiver`;
  #L40aaec.  call `<init>`(v0) @signature `Lio/reactivex/internal/util/BlockingIgnoringReceiver;.<init>:()V` @kind direct;
  #L40aaf2.  v1:= new `io.reactivex.internal.subscribers.LambdaSubscriber`;
  #L40aaf6.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L40aafc.  v2:= temp @kind object;
  #L40aafe.  v3:= `@@io.reactivex.internal.functions.Functions.REQUEST_MAX` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L40ab02.  call `<init>`(v1, v2, v0, v0, v3) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.<init>:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;)V` @kind direct;
  #L40ab08.  call `subscribe`(v4, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40ab0e.  call `awaitForComplete`(v0, v1) @signature `Lio/reactivex/internal/util/BlockingHelper;.awaitForComplete:(Ljava/util/concurrent/CountDownLatch;Lio/reactivex/disposables/Disposable;)V` @kind static;
  #L40ab14.  v4:= v0.`io.reactivex.internal.util.BlockingIgnoringReceiver.error` @type ^`java.lang.Throwable` @kind object;
  #L40ab18.  if v4 != 0 then goto L40ab1e;
  #L40ab1c.  return @kind void;
  #L40ab1e.  call temp:= `wrapOrThrow`(v4) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L40ab24.  v4:= temp @kind object;
  #L40ab26.  throw v4;
}
procedure `void` `subscribe`(`org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `io.reactivex.functions.Consumer` v4 @kind object, `io.reactivex.functions.Action` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L40ab38.  v0:= "onNext is null" @kind object;
  #L40ab3c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40ab42.  v0:= "onError is null" @kind object;
  #L40ab46.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40ab4c.  v0:= "onComplete is null" @kind object;
  #L40ab50.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40ab56.  v0:= new `io.reactivex.internal.subscribers.LambdaSubscriber`;
  #L40ab5a.  v1:= `@@io.reactivex.internal.functions.Functions.REQUEST_MAX` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L40ab5e.  call `<init>`(v0, v3, v4, v5, v1) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.<init>:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;)V` @kind direct;
  #L40ab64.  call `subscribe`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L40ab6a.  return @kind void;
}
procedure `void` `subscribe`(`org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40ab7c.  v0:= new `java.util.concurrent.LinkedBlockingQueue`;
  #L40ab80.  call `<init>`(v0) @signature `Ljava/util/concurrent/LinkedBlockingQueue;.<init>:()V` @kind direct;
  #L40ab86.  v1:= new `io.reactivex.internal.subscribers.BlockingSubscriber`;
  #L40ab8a.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.<init>:(Ljava/util/Queue;)V` @kind direct;
  #L40ab90.  call `subscribe`(v4, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40ab96.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.isCancelled:()Z` @kind virtual;
  #L40ab9c.  v2:= temp;
  #L40ab9e.  if v2 == 0 then goto L40aba4;
  #L40aba2.  goto L40abfe;
  #L40aba4.  call temp:= `poll`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L40abaa.  v2:= temp @kind object;
  #L40abac.  if v2 != 0 then goto L40abcc;
  #L40abb0.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.isCancelled:()Z` @kind virtual;
  #L40abb6.  v2:= temp;
  #L40abb8.  if v2 == 0 then goto L40abbe;
  #L40abbc.  goto L40abfe;
  #L40abbe.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L40abc4.  call temp:= `take`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.take:()Ljava/lang/Object;` @kind interface;
  #L40abca.  v2:= temp @kind object;
  #L40abcc.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.isCancelled:()Z` @kind virtual;
  #L40abd2.  v3:= temp;
  #L40abd4.  if v3 == 0 then goto L40abda;
  #L40abd8.  goto L40abfe;
  #L40abda.  v3:= `@@io.reactivex.internal.subscribers.BlockingSubscriber.TERMINATED` @type ^`java.lang.Object` @kind object;
  #L40abde.  if v4 == v3 then goto L40abfe;
  #L40abe2.  call temp:= `acceptFull`(v2, v5) @signature `Lio/reactivex/internal/util/NotificationLite;.acceptFull:(Ljava/lang/Object;Lorg/reactivestreams/Subscriber;)Z` @kind static;
  #L40abe8.  v2:= temp;
  #L40abea.  if v2 == 0 then goto L40ab96;
  #L40abee.  goto L40abfe;
  #L40abf0.  v4:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L40abf2.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.cancel:()V` @kind virtual;
  #L40abf8.  call `onError`(v5, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40abfe.  return @kind void;
  catch `java.lang.InterruptedException` @[L40ab96..L40abea] goto L40abf0;
}
