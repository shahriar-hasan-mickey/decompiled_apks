record `io.reactivex.internal.operators.flowable.FlowableGroupBy` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableGroupBy.b` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableGroupBy.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableGroupBy.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableGroupBy` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 , `boolean` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L417870.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L417876.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupBy.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L41787a.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupBy.c` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L41787e.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupBy.d` @type ^`int` := v4;
  #L417882.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupBy.e` @type ^`boolean` := v5 @kind boolean;
  #L417886.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableGroupBy` v8 @kind this, `org.reactivestreams.Subscriber` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L417898.  v0:= v8.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L41789c.  v7:= new `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber`;
  #L4178a0.  v3:= v8.`io.reactivex.internal.operators.flowable.FlowableGroupBy.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L4178a4.  v4:= v8.`io.reactivex.internal.operators.flowable.FlowableGroupBy.c` @type ^`io.reactivex.functions.Function` @kind object;
  #L4178a8.  v5:= v8.`io.reactivex.internal.operators.flowable.FlowableGroupBy.d` @type ^`int`;
  #L4178ac.  v6:= v8.`io.reactivex.internal.operators.flowable.FlowableGroupBy.e` @type ^`boolean` @kind boolean;
  #L4178b0.  v1:= v7 @kind object;
  #L4178b2.  v2:= v9 @kind object;
  #L4178b4.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L4178ba.  call `subscribe`(v0, v7) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L4178c0.  return @kind void;
}
