record `io.reactivex.internal.operators.flowable.FlowableScanSeed` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.flowable.FlowableScanSeed.b` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableScanSeed.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableScanSeed` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `java.util.concurrent.Callable` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4210c0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L4210c6.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed.b` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L4210ca.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed.c` @type ^`java.util.concurrent.Callable` := v2 @kind object;
  #L4210ce.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableScanSeed` v5 @kind this, `org.reactivestreams.Subscriber` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4210e0.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableScanSeed.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L4210e4.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L4210ea.  v0:= temp @kind object;
  #L4210ec.  v1:= "The seed supplied is null" @kind object;
  #L4210f0.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4210f6.  v0:= temp @kind object;
  #L4210f8.  v1:= v5.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L4210fc.  v2:= new `io.reactivex.internal.operators.flowable.FlowableScanSeed$a`;
  #L421100.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableScanSeed.b` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L421104.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L42110a.  v4:= temp;
  #L42110c.  call `<init>`(v2, v6, v3, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/BiFunction;Ljava/lang/Object;I)V` @kind direct;
  #L421112.  call `subscribe`(v1, v2) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L421118.  return @kind void;
  #L42111a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42111c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L421122.  call `error`(v0, v6) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L421128.  return @kind void;
  catch `java.lang.Throwable` @[L4210e0..L4210f8] goto L42111a;
}
