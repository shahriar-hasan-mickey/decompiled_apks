record `io.reactivex.internal.operators.flowable.FlowableAmb$a` @kind class @AccessFlag FINAL extends `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableAmb$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableAmb$b`[] `io.reactivex.internal.operators.flowable.FlowableAmb$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableAmb$a.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableAmb$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$a;.<init>:(Lorg/reactivestreams/Subscriber;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L40a2ac.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40a2b2.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L40a2b6.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L40a2bc.  v1.`io.reactivex.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L40a2c0.  v1.`io.reactivex.internal.operators.flowable.FlowableAmb$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L40a2c4.  v2:= new `io.reactivex.internal.operators.flowable.FlowableAmb$b`[v3];
  #L40a2c8.  v1.`io.reactivex.internal.operators.flowable.FlowableAmb$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$b`[] := v2 @kind object;
  #L40a2cc.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableAmb$a` v7 @kind this, `org.reactivestreams.Publisher`[] v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$a;.a:([Lorg/reactivestreams/Publisher;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L40a390.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableAmb$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$b`[] @kind object;
  #L40a394.  v1:= length @variable v0;
  #L40a396.  v2:= 0I;
  #L40a398.  v3:= 0I;
  #L40a39a.  if v3 >= v1 then goto L40a3b8;
  #L40a39e.  v4:= new `io.reactivex.internal.operators.flowable.FlowableAmb$b`;
  #L40a3a2.  v5:= v3 + 1;
  #L40a3a6.  v6:= v7.`io.reactivex.internal.operators.flowable.FlowableAmb$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40a3aa.  call `<init>`(v4, v7, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$b;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableAmb$a;ILorg/reactivestreams/Subscriber;)V` @kind direct;
  #L40a3b0.  v0[v3]:= v4 @kind object;
  #L40a3b4.  v3:= v5;
  #L40a3b6.  goto L40a39a;
  #L40a3b8.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40a3bc.  call `lazySet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L40a3c2.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableAmb$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40a3c6.  call `onSubscribe`(v3, v7) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40a3cc.  if v2 >= v1 then goto L40a3f6;
  #L40a3d0.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40a3d4.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L40a3da.  v3:= temp;
  #L40a3dc.  if v3 == 0 then goto L40a3e2;
  #L40a3e0.  return @kind void;
  #L40a3e2.  v3:= v8[v2] @kind object;
  #L40a3e6.  v4:= v0[v2] @kind object;
  #L40a3ea.  call `subscribe`(v3, v4) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40a3f0.  v2:= v2 + 1;
  #L40a3f4.  goto L40a3cc;
  #L40a3f6.  return @kind void;
}
procedure `boolean` `b`(`io.reactivex.internal.operators.flowable.FlowableAmb$a` v4 @kind this, `int` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$a;.b:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40a254.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40a258.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L40a25e.  v0:= temp;
  #L40a260.  v1:= 0I;
  #L40a262.  if v0 != 0 then goto L40a29a;
  #L40a266.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40a26a.  call temp:= `compareAndSet`(v0, v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L40a270.  v0:= temp;
  #L40a272.  if v0 == 0 then goto L40a29a;
  #L40a276.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableAmb$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$b`[] @kind object;
  #L40a27a.  v2:= length @variable v0;
  #L40a27c.  if v1 >= v2 then goto L40a296;
  #L40a280.  v3:= v1 + 1;
  #L40a284.  if v3 == v5 then goto L40a292;
  #L40a288.  v1:= v0[v1] @kind object;
  #L40a28c.  call `cancel`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$b;.cancel:()V` @kind virtual;
  #L40a292.  v1:= v3;
  #L40a294.  goto L40a27c;
  #L40a296.  v5:= 1I;
  #L40a298.  return v5;
  #L40a29a.  return v1;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableAmb$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40a2e0.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40a2e4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L40a2ea.  v0:= temp;
  #L40a2ec.  v1:= -1I;
  #L40a2ee.  if v0 == v1 then goto L40a318;
  #L40a2f2.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40a2f6.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L40a2fc.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableAmb$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$b`[] @kind object;
  #L40a300.  v1:= length @variable v0;
  #L40a302.  v2:= 0I;
  #L40a304.  if v2 >= v1 then goto L40a318;
  #L40a308.  v3:= v0[v2] @kind object;
  #L40a30c.  call `cancel`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$b;.cancel:()V` @kind virtual;
  #L40a312.  v2:= v2 + 1;
  #L40a316.  goto L40a304;
  #L40a318.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableAmb$a` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40a32c.  call temp:= `validate`(v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L40a332.  v0:= temp;
  #L40a334.  if v0 == 0 then goto L40a37c;
  #L40a338.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40a33c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L40a342.  v0:= temp;
  #L40a344.  if v0 <= 0 then goto L40a35c;
  #L40a348.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableAmb$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$b`[] @kind object;
  #L40a34c.  v0:= v0 + -1;
  #L40a350.  v0:= v1[v0] @kind object;
  #L40a354.  call `request`(v0, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$b;.request:(J)V` @kind virtual;
  #L40a35a.  goto L40a37c;
  #L40a35c.  if v0 != 0 then goto L40a37c;
  #L40a360.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableAmb$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$b`[] @kind object;
  #L40a364.  v1:= length @variable v0;
  #L40a366.  v2:= 0I;
  #L40a368.  if v2 >= v1 then goto L40a37c;
  #L40a36c.  v3:= v0[v2] @kind object;
  #L40a370.  call `request`(v3, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$b;.request:(J)V` @kind virtual;
  #L40a376.  v2:= v2 + 1;
  #L40a37a.  goto L40a368;
  #L40a37c.  return @kind void;
}
