record `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.internal.operators.flowable.FlowableGroupJoin$b` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.c` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.d` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.e` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.g` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.h` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.i` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.j` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.k` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.l` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.m` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.n` @AccessFlag VOLATILE;
}
global `java.lang.Integer` `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.o` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.p` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.q` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.r` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4178d4.  v0:= 1I;
  #L4178d6.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4178dc.  v0:= temp @kind object;
  #L4178de.  `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.o` @type ^`java.lang.Integer` := v0 @kind object;
  #L4178e2.  v0:= 2I;
  #L4178e4.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4178ea.  v0:= temp @kind object;
  #L4178ec.  `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.p` @type ^`java.lang.Integer` := v0 @kind object;
  #L4178f0.  v0:= 3I;
  #L4178f2.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4178f8.  v0:= temp @kind object;
  #L4178fa.  `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.q` @type ^`java.lang.Integer` := v0 @kind object;
  #L4178fe.  v0:= 4I;
  #L417900.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L417906.  v0:= temp @kind object;
  #L417908.  `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.r` @type ^`java.lang.Integer` := v0 @kind object;
  #L41790c.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object, `io.reactivex.functions.BiFunction` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L417920.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L417926.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L41792a.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L41792e.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L417934.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L417938.  v2:= new `io.reactivex.disposables.CompositeDisposable`;
  #L41793c.  call `<init>`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L417942.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` := v2 @kind object;
  #L417946.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L41794a.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L417950.  v0:= temp;
  #L417952.  call `<init>`(v2, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L417958.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L41795c.  v2:= new `java.util.LinkedHashMap`;
  #L417960.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L417966.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` := v2 @kind object;
  #L41796a.  v2:= new `java.util.LinkedHashMap`;
  #L41796e.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L417974.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.f` @type ^`java.util.Map` := v2 @kind object;
  #L417978.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L41797c.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L417982.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L417986.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.h` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L41798a.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.i` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L41798e.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.j` @type ^`io.reactivex.functions.BiFunction` := v5 @kind object;
  #L417992.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L417996.  v3:= 2I;
  #L417998.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L41799e.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L4179a2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L417eec.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L417ef0.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L417ef6.  v0:= temp;
  #L417ef8.  if v0 == 0 then goto L417f0e;
  #L417efc.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L417f00.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L417f06.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.g:()V` @kind virtual;
  #L417f0c.  goto L417f14;
  #L417f0e.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L417f14.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `boolean` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.b:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L417f28.  @monitorenter v1
  #L417f2a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L417f2e.  if v2 == 0 then goto L417f38;
  #L417f32.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L417f36.  goto L417f3c;
  #L417f38.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L417f3c.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L417f42.  @monitorexit v1
  #L417f44.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.g:()V` @kind virtual;
  #L417f4a.  return @kind void;
  #L417f4c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L417f4e.  @monitorexit v1
  #L417f50.  throw v2;
  catch `java.lang.Throwable` @[L417f2a..L417f44] goto L417f4c;
  catch `java.lang.Throwable` @[L417f4e..L417f50] goto L417f4c;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.c:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L417e90.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L417e94.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L417e9a.  v0:= temp;
  #L417e9c.  if v0 == 0 then goto L417ea8;
  #L417ea0.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.g:()V` @kind virtual;
  #L417ea6.  goto L417eae;
  #L417ea8.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L417eae.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4179b4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.n` @type ^`boolean` @kind boolean;
  #L4179b8.  if v0 == 0 then goto L4179be;
  #L4179bc.  return @kind void;
  #L4179be.  v0:= 1I;
  #L4179c0.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.n` @type ^`boolean` := v0 @kind boolean;
  #L4179c4.  call `f`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.f:()V` @kind virtual;
  #L4179ca.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4179d0.  v0:= temp;
  #L4179d2.  if v0 != 0 then goto L4179e0;
  #L4179d6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4179da.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4179e0.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `boolean` v2 , `io.reactivex.internal.operators.flowable.FlowableGroupJoin$c` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.d:(ZLio/reactivex/internal/operators/flowable/FlowableGroupJoin$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L417e40.  @monitorenter v1
  #L417e42.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L417e46.  if v2 == 0 then goto L417e50;
  #L417e4a.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.q` @type ^`java.lang.Integer` @kind object;
  #L417e4e.  goto L417e54;
  #L417e50.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.r` @type ^`java.lang.Integer` @kind object;
  #L417e54.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L417e5a.  @monitorexit v1
  #L417e5c.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.g:()V` @kind virtual;
  #L417e62.  return @kind void;
  #L417e64.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L417e66.  @monitorexit v1
  #L417e68.  throw v2;
  catch `java.lang.Throwable` @[L417e42..L417e5c] goto L417e64;
  catch `java.lang.Throwable` @[L417e66..L417e68] goto L417e64;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableGroupJoin$d` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.e:(Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L417ec0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L417ec4.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L417eca.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L417ece.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L417ed4.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.g:()V` @kind virtual;
  #L417eda.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.f:()V` @AccessFlag  {
    temp;
    v0;

  #L4179f4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4179f8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4179fe.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a` v11 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L417a10.  call temp:= `getAndIncrement`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L417a16.  v0:= temp;
  #L417a18.  if v0 == 0 then goto L417a1e;
  #L417a1c.  return @kind void;
  #L417a1e.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L417a22.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L417a26.  v2:= 1I;
  #L417a28.  v3:= 1I;
  #L417a2a.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.n` @type ^`boolean` @kind boolean;
  #L417a2e.  if v4 == 0 then goto L417a3a;
  #L417a32.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L417a38.  return @kind void;
  #L417a3a.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L417a3e.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L417a44.  v4:= temp @kind object;
  #L417a46.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L417a4a.  if v4 == 0 then goto L417a62;
  #L417a4e.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L417a54.  call `f`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.f:()V` @kind virtual;
  #L417a5a.  call `h`(v11, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L417a60.  return @kind void;
  #L417a62.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L417a66.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L417a6c.  v4:= temp;
  #L417a6e.  v5:= 0I;
  #L417a70.  if v4 != 0 then goto L417a78;
  #L417a74.  v4:= 1I;
  #L417a76.  goto L417a7a;
  #L417a78.  v4:= 0I;
  #L417a7a.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L417a80.  v6:= temp @kind object;
  #L417a82.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L417a86.  if v6 != 0 then goto L417a8e;
  #L417a8a.  v7:= 1I;
  #L417a8c.  goto L417a90;
  #L417a8e.  v7:= 0I;
  #L417a90.  if v4 == 0 then goto L417af2;
  #L417a94.  if v7 == 0 then goto L417af2;
  #L417a98.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L417a9c.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L417aa2.  v0:= temp @kind object;
  #L417aa4.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L417aaa.  v0:= temp @kind object;
  #L417aac.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L417ab2.  v2:= temp;
  #L417ab4.  if v2 == 0 then goto L417acc;
  #L417ab8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L417abe.  v2:= temp @kind object;
  #L417ac0.  v2:= (`io.reactivex.processors.UnicastProcessor`) v2 @kind object;
  #L417ac4.  call `onComplete`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L417aca.  goto L417aac;
  #L417acc.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L417ad0.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L417ad6.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.f` @type ^`java.util.Map` @kind object;
  #L417ada.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L417ae0.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L417ae4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L417aea.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L417af0.  return @kind void;
  #L417af2.  if v7 == 0 then goto L417b06;
  #L417af6.  v3:= -v3 @kind int;
  #L417af8.  call temp:= `addAndGet`(v11, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L417afe.  v3:= temp;
  #L417b00.  if v3 != 0 then goto L417a2a;
  #L417b04.  return @kind void;
  #L417b06.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L417b0c.  v4:= temp @kind object;
  #L417b0e.  v7:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L417b12.  if v6 != v7 then goto L417c38;
  #L417b16.  call temp:= `create`() @signature `Lio/reactivex/processors/UnicastProcessor;.create:()Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L417b1c.  v5:= temp @kind object;
  #L417b1e.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.l` @type ^`int`;
  #L417b22.  v7:= v6 + 1;
  #L417b26.  v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.l` @type ^`int` := v7;
  #L417b2a.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L417b2e.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L417b34.  v8:= temp @kind object;
  #L417b36.  call temp:= `put`(v7, v8, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L417b3c.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.h` @type ^`io.reactivex.functions.Function` @kind object;
  #L417b40.  call temp:= `apply`(v7, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L417b46.  v7:= temp @kind object;
  #L417b48.  v8:= "The leftEnd returned a null Publisher" @kind object;
  #L417b4c.  call temp:= `requireNonNull`(v7, v8) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417b52.  v7:= temp @kind object;
  #L417b54.  v7:= (`org.reactivestreams.Publisher`) v7 @kind object;
  #L417b58.  v8:= new `io.reactivex.internal.operators.flowable.FlowableGroupJoin$c`;
  #L417b5c.  call `<init>`(v8, v11, v2, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$c;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$b;ZI)V` @kind direct;
  #L417b62.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L417b66.  call temp:= `add`(v6, v8) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L417b6c.  call `subscribe`(v7, v8) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L417b72.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L417b76.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L417b7c.  v6:= temp @kind object;
  #L417b7e.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L417b82.  if v6 == 0 then goto L417b9a;
  #L417b86.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L417b8c.  call `f`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.f:()V` @kind virtual;
  #L417b92.  call `h`(v11, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L417b98.  return @kind void;
  #L417b9a.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.j` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L417b9e.  call temp:= `apply`(v6, v4, v5) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L417ba4.  v4:= temp @kind object;
  #L417ba6.  v6:= "The resultSelector returned a null value" @kind object;
  #L417baa.  call temp:= `requireNonNull`(v4, v6) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417bb0.  v4:= temp @kind object;
  #L417bb2.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L417bb6.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L417bbc.  v6:= temp @kind wide;
  #L417bbe.  v8:= 0L;
  #L417bc2.  v10:= lcmp(v6, v8);
  #L417bc6.  if v10 == 0 then goto L417c0e;
  #L417bca.  call `onNext`(v1, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L417bd0.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L417bd4.  v6:= 1L;
  #L417bd8.  call temp:= `produced`(v4, v6) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L417bde.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.f` @type ^`java.util.Map` @kind object;
  #L417be2.  call temp:= `values`(v4) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L417be8.  v4:= temp @kind object;
  #L417bea.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L417bf0.  v4:= temp @kind object;
  #L417bf2.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L417bf8.  v6:= temp;
  #L417bfa.  if v6 == 0 then goto L417a2a;
  #L417bfe.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L417c04.  v6:= temp @kind object;
  #L417c06.  call `onNext`(v5, v6) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L417c0c.  goto L417bf2;
  #L417c0e.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L417c12.  v3:= "Could not emit value due to lack of requests" @kind object;
  #L417c16.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L417c1c.  call `i`(v11, v2, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L417c22.  return @kind void;
  #L417c24.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L417c26.  call `i`(v11, v2, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L417c2c.  return @kind void;
  #L417c2e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L417c30.  call `i`(v11, v2, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L417c36.  return @kind void;
  #L417c38.  v7:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L417c3c.  if v6 != v7 then goto L417cfa;
  #L417c40.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.m` @type ^`int`;
  #L417c44.  v7:= v6 + 1;
  #L417c48.  v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.m` @type ^`int` := v7;
  #L417c4c.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.f` @type ^`java.util.Map` @kind object;
  #L417c50.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L417c56.  v8:= temp @kind object;
  #L417c58.  call temp:= `put`(v7, v8, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L417c5e.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.i` @type ^`io.reactivex.functions.Function` @kind object;
  #L417c62.  call temp:= `apply`(v7, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L417c68.  v7:= temp @kind object;
  #L417c6a.  v8:= "The rightEnd returned a null Publisher" @kind object;
  #L417c6e.  call temp:= `requireNonNull`(v7, v8) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417c74.  v7:= temp @kind object;
  #L417c76.  v7:= (`org.reactivestreams.Publisher`) v7 @kind object;
  #L417c7a.  v8:= new `io.reactivex.internal.operators.flowable.FlowableGroupJoin$c`;
  #L417c7e.  call `<init>`(v8, v11, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$c;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$b;ZI)V` @kind direct;
  #L417c84.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L417c88.  call temp:= `add`(v5, v8) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L417c8e.  call `subscribe`(v7, v8) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L417c94.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L417c98.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L417c9e.  v5:= temp @kind object;
  #L417ca0.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L417ca4.  if v5 == 0 then goto L417cbc;
  #L417ca8.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L417cae.  call `f`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.f:()V` @kind virtual;
  #L417cb4.  call `h`(v11, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L417cba.  return @kind void;
  #L417cbc.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L417cc0.  call temp:= `values`(v5) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L417cc6.  v5:= temp @kind object;
  #L417cc8.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L417cce.  v5:= temp @kind object;
  #L417cd0.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L417cd6.  v6:= temp;
  #L417cd8.  if v6 == 0 then goto L417a2a;
  #L417cdc.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L417ce2.  v6:= temp @kind object;
  #L417ce4.  v6:= (`io.reactivex.processors.UnicastProcessor`) v6 @kind object;
  #L417ce8.  call `onNext`(v6, v4) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L417cee.  goto L417cd0;
  #L417cf0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L417cf2.  call `i`(v11, v2, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L417cf8.  return @kind void;
  #L417cfa.  v5:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.q` @type ^`java.lang.Integer` @kind object;
  #L417cfe.  if v6 != v5 then goto L417d3a;
  #L417d02.  v4:= (`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c`) v4 @kind object;
  #L417d06.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L417d0a.  v6:= v4.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c.c` @type ^`int`;
  #L417d0e.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L417d14.  v6:= temp @kind object;
  #L417d16.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L417d1c.  v5:= temp @kind object;
  #L417d1e.  v5:= (`io.reactivex.processors.UnicastProcessor`) v5 @kind object;
  #L417d22.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L417d26.  call temp:= `remove`(v6, v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.remove:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L417d2c.  if v5 == 0 then goto L417a2a;
  #L417d30.  call `onComplete`(v5) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L417d36.  goto L417a2a;
  #L417d3a.  v5:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.r` @type ^`java.lang.Integer` @kind object;
  #L417d3e.  if v6 != v5 then goto L417a2a;
  #L417d42.  v4:= (`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c`) v4 @kind object;
  #L417d46.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.f` @type ^`java.util.Map` @kind object;
  #L417d4a.  v6:= v4.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c.c` @type ^`int`;
  #L417d4e.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L417d54.  v6:= temp @kind object;
  #L417d56.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L417d5c.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L417d60.  call temp:= `remove`(v5, v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.remove:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L417d66.  goto L417a2a;
  catch `java.lang.Throwable` @[L417b3c..L417b58] goto L417c2e;
  catch `java.lang.Throwable` @[L417b9a..L417bb2] goto L417c24;
  catch `java.lang.Throwable` @[L417c5e..L417c7a] goto L417cf0;
}
procedure `void` `h`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L417da0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L417da4.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L417daa.  v0:= temp @kind object;
  #L417dac.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L417db0.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L417db6.  v1:= temp @kind object;
  #L417db8.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L417dbe.  v1:= temp @kind object;
  #L417dc0.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L417dc6.  v2:= temp;
  #L417dc8.  if v2 == 0 then goto L417de0;
  #L417dcc.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L417dd2.  v2:= temp @kind object;
  #L417dd4.  v2:= (`io.reactivex.processors.UnicastProcessor`) v2 @kind object;
  #L417dd8.  call `onError`(v2, v0) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L417dde.  goto L417dc0;
  #L417de0.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L417de4.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L417dea.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.f` @type ^`java.util.Map` @kind object;
  #L417dee.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L417df4.  call `onError`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L417dfa.  return @kind void;
}
procedure `void` `i`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object, `org.reactivestreams.Subscriber` v3 @kind object, `io.reactivex.internal.fuseable.SimpleQueue` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)V` @AccessFlag  {
    temp;
    v0;

  #L417e0c.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L417e12.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L417e16.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L417e1c.  call `clear`(v4) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L417e22.  call `f`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.f:()V` @kind virtual;
  #L417e28.  call `h`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L417e2e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L417f78.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L417f7e.  v0:= temp;
  #L417f80.  if v0 == 0 then goto L417f8e;
  #L417f84.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L417f88.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L417f8e.  return @kind void;
}
