record `io.reactivex.internal.operators.flowable.FlowablePublish$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowablePublish$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowablePublish$c` `io.reactivex.internal.operators.flowable.FlowablePublish$b.b` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowablePublish$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowablePublish$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$b;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41c0c8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L41c0ce.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L41c0d2.  return @kind void;
}
procedure `long` `a`(`io.reactivex.internal.operators.flowable.FlowablePublish$b` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$b;.a:(J)J` @AccessFlag PUBLIC {
    temp;

  #L41c0ac.  call temp:= `producedCancel`(v0, v1) @signature `Lio/reactivex/internal/util/BackpressureHelper;.producedCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L41c0b2.  v1:= temp @kind wide;
  #L41c0b4.  return v1 @kind wide;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowablePublish$b` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L41c0e4.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L41c0ea.  v0:= temp @kind wide;
  #L41c0ec.  v2:= -9223372036854775808L;
  #L41c0f0.  v4:= lcmp(v0, v2);
  #L41c0f4.  if v4 == 0 then goto L41c11c;
  #L41c0f8.  call temp:= `getAndSet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L41c0fe.  v0:= temp @kind wide;
  #L41c100.  v4:= lcmp(v0, v2);
  #L41c104.  if v4 == 0 then goto L41c11c;
  #L41c108.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowablePublish$b.b` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$c` @kind object;
  #L41c10c.  if v0 == 0 then goto L41c11c;
  #L41c110.  call `d`(v0, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.d:(Lio/reactivex/internal/operators/flowable/FlowablePublish$b;)V` @kind virtual;
  #L41c116.  call `c`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.c:()V` @kind virtual;
  #L41c11c.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowablePublish$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41c130.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L41c136.  v0:= temp;
  #L41c138.  if v0 == 0 then goto L41c150;
  #L41c13c.  call temp:= `addCancel`(v1, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L41c142.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$b.b` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$c` @kind object;
  #L41c146.  if v2 == 0 then goto L41c150;
  #L41c14a.  call `c`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.c:()V` @kind virtual;
  #L41c150.  return @kind void;
}
