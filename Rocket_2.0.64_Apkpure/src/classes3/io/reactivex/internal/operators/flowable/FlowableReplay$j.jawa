record `io.reactivex.internal.operators.flowable.FlowableReplay$j` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableReplay$g` `io.reactivex.internal.operators.flowable.FlowableReplay$j.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableReplay$j.b` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableReplay$j.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableReplay$j.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableReplay$j.e` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableReplay$j.f` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableReplay$j.g` @AccessFlag ;
}
global `io.reactivex.internal.operators.flowable.FlowableReplay$d`[] `@@io.reactivex.internal.operators.flowable.FlowableReplay$j.h` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.flowable.FlowableReplay$d`[] `@@io.reactivex.internal.operators.flowable.FlowableReplay$j.i` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableReplay$j.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L41f258.  v0:= 0I;
  #L41f25a.  v1:= new `io.reactivex.internal.operators.flowable.FlowableReplay$d`[v0];
  #L41f25e.  `@@io.reactivex.internal.operators.flowable.FlowableReplay$j.h` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$d`[] := v1 @kind object;
  #L41f262.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReplay$d`[v0];
  #L41f266.  `@@io.reactivex.internal.operators.flowable.FlowableReplay$j.i` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$d`[] := v0 @kind object;
  #L41f26a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$j` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableReplay$g` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableReplay$g;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L41f27c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L41f282.  v1.`io.reactivex.internal.operators.flowable.FlowableReplay$j.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$g` := v2 @kind object;
  #L41f286.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L41f28a.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L41f290.  v1.`io.reactivex.internal.operators.flowable.FlowableReplay$j.e` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L41f294.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L41f298.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableReplay$j.h` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$d`[] @kind object;
  #L41f29c.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L41f2a2.  v1.`io.reactivex.internal.operators.flowable.FlowableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L41f2a6.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L41f2aa.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L41f2b0.  v1.`io.reactivex.internal.operators.flowable.FlowableReplay$j.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L41f2b4.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.flowable.FlowableReplay$j` v4 @kind this, `io.reactivex.internal.operators.flowable.FlowableReplay$d` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.a:(Lio/reactivex/internal/operators/flowable/FlowableReplay$d;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41f1d0.  call temp:= `requireNonNull`(v5) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L41f1d6.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41f1da.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41f1e0.  v0:= temp @kind object;
  #L41f1e2.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$d`[]) v0 @kind object;
  #L41f1e6.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableReplay$j.i` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$d`[] @kind object;
  #L41f1ea.  v2:= 0I;
  #L41f1ec.  if v0 != v1 then goto L41f1f2;
  #L41f1f0.  return v2;
  #L41f1f2.  v1:= length @variable v0;
  #L41f1f4.  v3:= v1 + 1;
  #L41f1f8.  v3:= new `io.reactivex.internal.operators.flowable.FlowableReplay$d`[v3];
  #L41f1fc.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L41f202.  v3[v1]:= v5 @kind object;
  #L41f206.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41f20a.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L41f210.  v0:= temp;
  #L41f212.  if v0 == 0 then goto L41f1d6;
  #L41f216.  v5:= 1I;
  #L41f218.  return v5;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableReplay$j` v11 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L41f2f0.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableReplay$j.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L41f2f4.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L41f2fa.  v0:= temp;
  #L41f2fc.  if v0 == 0 then goto L41f302;
  #L41f300.  return @kind void;
  #L41f302.  v0:= 1I;
  #L41f304.  call temp:= `isDisposed`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.isDisposed:()Z` @kind virtual;
  #L41f30a.  v1:= temp;
  #L41f30c.  if v1 == 0 then goto L41f312;
  #L41f310.  return @kind void;
  #L41f312.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41f316.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41f31c.  v1:= temp @kind object;
  #L41f31e.  v1:= (`io.reactivex.internal.operators.flowable.FlowableReplay$d`[]) v1 @kind object;
  #L41f322.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableReplay$j.f` @type ^`long` @kind wide;
  #L41f326.  v4:= length @variable v1;
  #L41f328.  v5:= 0I;
  #L41f32a.  v6:= v2 @kind wide;
  #L41f32c.  if v5 >= v4 then goto L41f34e;
  #L41f330.  v8:= v1[v5] @kind object;
  #L41f334.  v8:= v8.`io.reactivex.internal.operators.flowable.FlowableReplay$d.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L41f338.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L41f33e.  v8:= temp @kind wide;
  #L41f340.  call temp:= `max`(v6, v8) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L41f346.  v6:= temp @kind wide;
  #L41f348.  v5:= v5 + 1;
  #L41f34c.  goto L41f32c;
  #L41f34e.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableReplay$j.g` @type ^`long` @kind wide;
  #L41f352.  call temp:= `get`(v11) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41f358.  v1:= temp @kind object;
  #L41f35a.  v1:= (`org.reactivestreams.Subscription`) v1 @kind object;
  #L41f35e.  v2:= v6 - v2 @kind long;
  #L41f362.  v8:= 0L;
  #L41f366.  v10:= lcmp(v2, v8);
  #L41f36a.  if v10 == 0 then goto L41f3ae;
  #L41f36e.  v11.`io.reactivex.internal.operators.flowable.FlowableReplay$j.f` @type ^`long` := v6 @kind wide;
  #L41f372.  if v1 == 0 then goto L41f394;
  #L41f376.  v6:= lcmp(v4, v8);
  #L41f37a.  if v6 == 0 then goto L41f38c;
  #L41f37e.  v11.`io.reactivex.internal.operators.flowable.FlowableReplay$j.g` @type ^`long` := v8 @kind wide;
  #L41f382.  v4:= v4 + v2 @kind long;
  #L41f384.  call `request`(v1, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L41f38a.  goto L41f3c4;
  #L41f38c.  call `request`(v1, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L41f392.  goto L41f3c4;
  #L41f394.  v4:= v4 + v2 @kind long;
  #L41f396.  v1:= lcmp(v4, v8);
  #L41f39a.  if v1 >= 0 then goto L41f3a8;
  #L41f39e.  v4:= 9223372036854775807L;
  #L41f3a8.  v11.`io.reactivex.internal.operators.flowable.FlowableReplay$j.g` @type ^`long` := v4 @kind wide;
  #L41f3ac.  goto L41f3c4;
  #L41f3ae.  v2:= lcmp(v4, v8);
  #L41f3b2.  if v2 == 0 then goto L41f3c4;
  #L41f3b6.  if v1 == 0 then goto L41f3c4;
  #L41f3ba.  v11.`io.reactivex.internal.operators.flowable.FlowableReplay$j.g` @type ^`long` := v8 @kind wide;
  #L41f3be.  call `request`(v1, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L41f3c4.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableReplay$j.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L41f3c8.  v0:= -v0 @kind int;
  #L41f3ca.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L41f3d0.  v0:= temp;
  #L41f3d2.  if v0 != 0 then goto L41f304;
  #L41f3d6.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableReplay$j` v6 @kind this, `io.reactivex.internal.operators.flowable.FlowableReplay$d` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.c:(Lio/reactivex/internal/operators/flowable/FlowableReplay$d;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L41f544.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41f548.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41f54e.  v0:= temp @kind object;
  #L41f550.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$d`[]) v0 @kind object;
  #L41f554.  v1:= length @variable v0;
  #L41f556.  if v1 != 0 then goto L41f55c;
  #L41f55a.  return @kind void;
  #L41f55c.  v2:= -1I;
  #L41f55e.  v3:= 0I;
  #L41f560.  v4:= 0I;
  #L41f562.  if v4 >= v1 then goto L41f580;
  #L41f566.  v5:= v0[v4] @kind object;
  #L41f56a.  call temp:= `equals`(v5, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L41f570.  v5:= temp;
  #L41f572.  if v5 == 0 then goto L41f57a;
  #L41f576.  v2:= v4;
  #L41f578.  goto L41f580;
  #L41f57a.  v4:= v4 + 1;
  #L41f57e.  goto L41f562;
  #L41f580.  if v2 >= 0 then goto L41f586;
  #L41f584.  return @kind void;
  #L41f586.  v4:= 1I;
  #L41f588.  if v1 != v4 then goto L41f592;
  #L41f58c.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableReplay$j.h` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$d`[] @kind object;
  #L41f590.  goto L41f5b0;
  #L41f592.  v5:= v1 + -1;
  #L41f596.  v5:= new `io.reactivex.internal.operators.flowable.FlowableReplay$d`[v5];
  #L41f59a.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L41f5a0.  v3:= v2 + 1;
  #L41f5a4.  v1:= v1 - v2 @kind int;
  #L41f5a6.  v1:= v1 - v4 @kind int;
  #L41f5a8.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L41f5ae.  v1:= v5 @kind object;
  #L41f5b0.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41f5b4.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L41f5ba.  v0:= temp;
  #L41f5bc.  if v0 == 0 then goto L41f544;
  #L41f5c0.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableReplay$j` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41f2c8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41f2cc.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableReplay$j.i` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$d`[] @kind object;
  #L41f2d0.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L41f2d6.  call temp:= `cancel`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L41f2dc.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableReplay$j` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41f22c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41f230.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41f236.  v0:= temp @kind object;
  #L41f238.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableReplay$j.i` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$d`[] @kind object;
  #L41f23c.  if v0 != v1 then goto L41f244;
  #L41f240.  v0:= 1I;
  #L41f242.  goto L41f246;
  #L41f244.  v0:= 0I;
  #L41f246.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableReplay$j` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L41f3e8.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$j.b` @type ^`boolean` @kind boolean;
  #L41f3ec.  if v0 != 0 then goto L41f430;
  #L41f3f0.  v0:= 1I;
  #L41f3f2.  v5.`io.reactivex.internal.operators.flowable.FlowableReplay$j.b` @type ^`boolean` := v0 @kind boolean;
  #L41f3f6.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$j.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$g` @kind object;
  #L41f3fa.  call `complete`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$g;.complete:()V` @kind interface;
  #L41f400.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41f404.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableReplay$j.i` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$d`[] @kind object;
  #L41f408.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L41f40e.  v0:= temp @kind object;
  #L41f410.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$d`[]) v0 @kind object;
  #L41f414.  v1:= length @variable v0;
  #L41f416.  v2:= 0I;
  #L41f418.  if v2 >= v1 then goto L41f430;
  #L41f41c.  v3:= v0[v2] @kind object;
  #L41f420.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$j.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$g` @kind object;
  #L41f424.  call `c`(v4, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$g;.c:(Lio/reactivex/internal/operators/flowable/FlowableReplay$d;)V` @kind interface;
  #L41f42a.  v2:= v2 + 1;
  #L41f42e.  goto L41f418;
  #L41f430.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableReplay$j` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41f444.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$j.b` @type ^`boolean` @kind boolean;
  #L41f448.  if v0 != 0 then goto L41f48c;
  #L41f44c.  v0:= 1I;
  #L41f44e.  v4.`io.reactivex.internal.operators.flowable.FlowableReplay$j.b` @type ^`boolean` := v0 @kind boolean;
  #L41f452.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$j.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$g` @kind object;
  #L41f456.  call `a`(v0, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$g;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L41f45c.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41f460.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableReplay$j.i` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$d`[] @kind object;
  #L41f464.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L41f46a.  v5:= temp @kind object;
  #L41f46c.  v5:= (`io.reactivex.internal.operators.flowable.FlowableReplay$d`[]) v5 @kind object;
  #L41f470.  v0:= length @variable v5;
  #L41f472.  v1:= 0I;
  #L41f474.  if v1 >= v0 then goto L41f492;
  #L41f478.  v2:= v5[v1] @kind object;
  #L41f47c.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$j.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$g` @kind object;
  #L41f480.  call `c`(v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$g;.c:(Lio/reactivex/internal/operators/flowable/FlowableReplay$d;)V` @kind interface;
  #L41f486.  v1:= v1 + 1;
  #L41f48a.  goto L41f474;
  #L41f48c.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41f492.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableReplay$j` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41f4a4.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$j.b` @type ^`boolean` @kind boolean;
  #L41f4a8.  if v0 != 0 then goto L41f4e2;
  #L41f4ac.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$j.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$g` @kind object;
  #L41f4b0.  call `b`(v0, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$g;.b:(Ljava/lang/Object;)V` @kind interface;
  #L41f4b6.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41f4ba.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41f4c0.  v5:= temp @kind object;
  #L41f4c2.  v5:= (`io.reactivex.internal.operators.flowable.FlowableReplay$d`[]) v5 @kind object;
  #L41f4c6.  v0:= length @variable v5;
  #L41f4c8.  v1:= 0I;
  #L41f4ca.  if v1 >= v0 then goto L41f4e2;
  #L41f4ce.  v2:= v5[v1] @kind object;
  #L41f4d2.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$j.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$g` @kind object;
  #L41f4d6.  call `c`(v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$g;.c:(Lio/reactivex/internal/operators/flowable/FlowableReplay$d;)V` @kind interface;
  #L41f4dc.  v1:= v1 + 1;
  #L41f4e0.  goto L41f4ca;
  #L41f4e2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableReplay$j` v4 @kind this, `org.reactivestreams.Subscription` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41f4f4.  call temp:= `setOnce`(v4, v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L41f4fa.  v5:= temp;
  #L41f4fc.  if v5 == 0 then goto L41f532;
  #L41f500.  call `b`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.b:()V` @kind virtual;
  #L41f506.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41f50a.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41f510.  v5:= temp @kind object;
  #L41f512.  v5:= (`io.reactivex.internal.operators.flowable.FlowableReplay$d`[]) v5 @kind object;
  #L41f516.  v0:= length @variable v5;
  #L41f518.  v1:= 0I;
  #L41f51a.  if v1 >= v0 then goto L41f532;
  #L41f51e.  v2:= v5[v1] @kind object;
  #L41f522.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$j.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$g` @kind object;
  #L41f526.  call `c`(v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$g;.c:(Lio/reactivex/internal/operators/flowable/FlowableReplay$d;)V` @kind interface;
  #L41f52c.  v1:= v1 + 1;
  #L41f530.  goto L41f51a;
  #L41f532.  return @kind void;
}
