record `io.reactivex.internal.operators.flowable.FlowableReplay$l` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableReplay$a` @kind class {
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableReplay$l.d` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableReplay$l.e` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableReplay$l.f` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableReplay$l.g` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableReplay$l.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$l` v0 @kind this, `int` v1 , `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$l;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41f734.  call `<init>`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.<init>:()V` @kind direct;
  #L41f73a.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$l.d` @type ^`io.reactivex.Scheduler` := v5 @kind object;
  #L41f73e.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$l.g` @type ^`int` := v1;
  #L41f742.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$l.e` @type ^`long` := v2 @kind wide;
  #L41f746.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$l.f` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L41f74a.  return @kind void;
}
procedure `java.lang.Object` `e`(`io.reactivex.internal.operators.flowable.FlowableReplay$l` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$l;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41f6e4.  v0:= new `io.reactivex.schedulers.Timed`;
  #L41f6e8.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$l.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L41f6ec.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$l.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L41f6f0.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L41f6f6.  v1:= temp @kind wide;
  #L41f6f8.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$l.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L41f6fc.  call `<init>`(v0, v5, v1, v3) @signature `Lio/reactivex/schedulers/Timed;.<init>:(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L41f702.  return v0 @kind object;
}
procedure `io.reactivex.internal.operators.flowable.FlowableReplay$f` `f`(`io.reactivex.internal.operators.flowable.FlowableReplay$l` v8 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$l;.f:()Lio/reactivex/internal/operators/flowable/FlowableReplay$f;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L41f648.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableReplay$l.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L41f64c.  v1:= v8.`io.reactivex.internal.operators.flowable.FlowableReplay$l.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L41f650.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L41f656.  v0:= temp @kind wide;
  #L41f658.  v2:= v8.`io.reactivex.internal.operators.flowable.FlowableReplay$l.e` @type ^`long` @kind wide;
  #L41f65c.  v0:= v0 - v2 @kind long;
  #L41f65e.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41f664.  v2:= temp @kind object;
  #L41f666.  v2:= (`io.reactivex.internal.operators.flowable.FlowableReplay$f`) v2 @kind object;
  #L41f66a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41f670.  v3:= temp @kind object;
  #L41f672.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$f`) v3 @kind object;
  #L41f676.  v7:= v3 @kind object;
  #L41f678.  v3:= v2 @kind object;
  #L41f67a.  v2:= v7 @kind object;
  #L41f67c.  if v2 != 0 then goto L41f682;
  #L41f680.  goto L41f6d2;
  #L41f682.  v4:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$f.a` @type ^`java.lang.Object` @kind object;
  #L41f686.  v4:= (`io.reactivex.schedulers.Timed`) v4 @kind object;
  #L41f68a.  call temp:= `value`(v4) @signature `Lio/reactivex/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L41f690.  v5:= temp @kind object;
  #L41f692.  call temp:= `isComplete`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L41f698.  v5:= temp;
  #L41f69a.  if v5 != 0 then goto L41f6d2;
  #L41f69e.  call temp:= `value`(v4) @signature `Lio/reactivex/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L41f6a4.  v5:= temp @kind object;
  #L41f6a6.  call temp:= `isError`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L41f6ac.  v5:= temp;
  #L41f6ae.  if v5 == 0 then goto L41f6b4;
  #L41f6b2.  goto L41f6d2;
  #L41f6b4.  call temp:= `time`(v4) @signature `Lio/reactivex/schedulers/Timed;.time:()J` @kind virtual;
  #L41f6ba.  v4:= temp @kind wide;
  #L41f6bc.  v6:= lcmp(v4, v0);
  #L41f6c0.  if v6 > 0 then goto L41f6d2;
  #L41f6c4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41f6ca.  v3:= temp @kind object;
  #L41f6cc.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$f`) v3 @kind object;
  #L41f6d0.  goto L41f676;
  #L41f6d2.  return v3 @kind object;
}
procedure `java.lang.Object` `g`(`io.reactivex.internal.operators.flowable.FlowableReplay$l` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$l;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L41f714.  v1:= (`io.reactivex.schedulers.Timed`) v1 @kind object;
  #L41f718.  call temp:= `value`(v1) @signature `Lio/reactivex/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L41f71e.  v1:= temp @kind object;
  #L41f720.  return v1 @kind object;
}
procedure `void` `j`(`io.reactivex.internal.operators.flowable.FlowableReplay$l` v9 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$l;.j:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L41f75c.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableReplay$l.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L41f760.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableReplay$l.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L41f764.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L41f76a.  v0:= temp @kind wide;
  #L41f76c.  v2:= v9.`io.reactivex.internal.operators.flowable.FlowableReplay$l.e` @type ^`long` @kind wide;
  #L41f770.  v0:= v0 - v2 @kind long;
  #L41f772.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41f778.  v2:= temp @kind object;
  #L41f77a.  v2:= (`io.reactivex.internal.operators.flowable.FlowableReplay$f`) v2 @kind object;
  #L41f77e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41f784.  v3:= temp @kind object;
  #L41f786.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$f`) v3 @kind object;
  #L41f78a.  v4:= 0I;
  #L41f78c.  v8:= v3 @kind object;
  #L41f78e.  v3:= v2 @kind object;
  #L41f790.  v2:= v8 @kind object;
  #L41f792.  if v2 == 0 then goto L41f7f2;
  #L41f796.  v5:= v9.`io.reactivex.internal.operators.flowable.FlowableReplay$a.b` @type ^`int`;
  #L41f79a.  v6:= v9.`io.reactivex.internal.operators.flowable.FlowableReplay$l.g` @type ^`int`;
  #L41f79e.  if v5 <= v6 then goto L41f7bc;
  #L41f7a2.  v4:= v4 + 1;
  #L41f7a6.  v5:= v5 + -1;
  #L41f7aa.  v9.`io.reactivex.internal.operators.flowable.FlowableReplay$a.b` @type ^`int` := v5;
  #L41f7ae.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41f7b4.  v3:= temp @kind object;
  #L41f7b6.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$f`) v3 @kind object;
  #L41f7ba.  goto L41f78c;
  #L41f7bc.  v5:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$f.a` @type ^`java.lang.Object` @kind object;
  #L41f7c0.  v5:= (`io.reactivex.schedulers.Timed`) v5 @kind object;
  #L41f7c4.  call temp:= `time`(v5) @signature `Lio/reactivex/schedulers/Timed;.time:()J` @kind virtual;
  #L41f7ca.  v5:= temp @kind wide;
  #L41f7cc.  v7:= lcmp(v5, v0);
  #L41f7d0.  if v7 > 0 then goto L41f7f2;
  #L41f7d4.  v4:= v4 + 1;
  #L41f7d8.  v3:= v9.`io.reactivex.internal.operators.flowable.FlowableReplay$a.b` @type ^`int`;
  #L41f7dc.  v3:= v3 + -1;
  #L41f7e0.  v9.`io.reactivex.internal.operators.flowable.FlowableReplay$a.b` @type ^`int` := v3;
  #L41f7e4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41f7ea.  v3:= temp @kind object;
  #L41f7ec.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$f`) v3 @kind object;
  #L41f7f0.  goto L41f78c;
  #L41f7f2.  if v4 == 0 then goto L41f7fc;
  #L41f7f6.  call `i`(v9, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.i:(Lio/reactivex/internal/operators/flowable/FlowableReplay$f;)V` @kind virtual;
  #L41f7fc.  return @kind void;
}
procedure `void` `k`(`io.reactivex.internal.operators.flowable.FlowableReplay$l` v10 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$l;.k:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L41f810.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableReplay$l.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L41f814.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableReplay$l.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L41f818.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L41f81e.  v0:= temp @kind wide;
  #L41f820.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableReplay$l.e` @type ^`long` @kind wide;
  #L41f824.  v0:= v0 - v2 @kind long;
  #L41f826.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41f82c.  v2:= temp @kind object;
  #L41f82e.  v2:= (`io.reactivex.internal.operators.flowable.FlowableReplay$f`) v2 @kind object;
  #L41f832.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41f838.  v3:= temp @kind object;
  #L41f83a.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$f`) v3 @kind object;
  #L41f83e.  v4:= 0I;
  #L41f840.  v9:= v3 @kind object;
  #L41f842.  v3:= v2 @kind object;
  #L41f844.  v2:= v9 @kind object;
  #L41f846.  if v2 == 0 then goto L41f888;
  #L41f84a.  v5:= v10.`io.reactivex.internal.operators.flowable.FlowableReplay$a.b` @type ^`int`;
  #L41f84e.  v6:= 1I;
  #L41f850.  if v5 <= v6 then goto L41f888;
  #L41f854.  v5:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$f.a` @type ^`java.lang.Object` @kind object;
  #L41f858.  v5:= (`io.reactivex.schedulers.Timed`) v5 @kind object;
  #L41f85c.  call temp:= `time`(v5) @signature `Lio/reactivex/schedulers/Timed;.time:()J` @kind virtual;
  #L41f862.  v7:= temp @kind wide;
  #L41f864.  v5:= lcmp(v7, v0);
  #L41f868.  if v5 > 0 then goto L41f888;
  #L41f86c.  v4:= v4 + 1;
  #L41f870.  v3:= v10.`io.reactivex.internal.operators.flowable.FlowableReplay$a.b` @type ^`int`;
  #L41f874.  v3:= v3 - v6 @kind int;
  #L41f876.  v10.`io.reactivex.internal.operators.flowable.FlowableReplay$a.b` @type ^`int` := v3;
  #L41f87a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41f880.  v3:= temp @kind object;
  #L41f882.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$f`) v3 @kind object;
  #L41f886.  goto L41f840;
  #L41f888.  if v4 == 0 then goto L41f892;
  #L41f88c.  call `i`(v10, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.i:(Lio/reactivex/internal/operators/flowable/FlowableReplay$f;)V` @kind virtual;
  #L41f892.  return @kind void;
}
