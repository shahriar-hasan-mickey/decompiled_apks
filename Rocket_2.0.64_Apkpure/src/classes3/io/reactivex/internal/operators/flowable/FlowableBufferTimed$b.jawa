record `io.reactivex.internal.operators.flowable.FlowableBufferTimed$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.d` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.e` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.g` @AccessFlag ;
  `java.util.Collection` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.h` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.i` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `io.reactivex.Scheduler` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L40c688.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L40c68c.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L40c692.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L40c698.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L40c69c.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L40c6a2.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L40c6a6.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.c` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L40c6aa.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.d` @type ^`long` := v4 @kind wide;
  #L40c6ae.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.e` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L40c6b2.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.f` @type ^`io.reactivex.Scheduler` := v7 @kind object;
  #L40c6b6.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L40c63c.  v1:= v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40c640.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40c646.  v1:= 1I;
  #L40c648.  return v1;
}
procedure `boolean` `accept`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L40c61c.  v2:= (`java.util.Collection`) v2 @kind object;
  #L40c620.  call temp:= `a`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @kind virtual;
  #L40c626.  v1:= temp;
  #L40c628.  return v1;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40c6c8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40c6cc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40c6d2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40c6d6.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40c6dc.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L40c6f0.  call `cancel`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.cancel:()V` @kind virtual;
  #L40c6f6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40c65c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40c660.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L40c666.  v0:= temp @kind object;
  #L40c668.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L40c66c.  if v0 != v1 then goto L40c674;
  #L40c670.  v0:= 1I;
  #L40c672.  goto L40c676;
  #L40c674.  v0:= 0I;
  #L40c676.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40c708.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40c70c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40c712.  @monitorenter v3
  #L40c714.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.h` @type ^`java.util.Collection` @kind object;
  #L40c718.  if v0 != 0 then goto L40c720;
  #L40c71c.  @monitorexit v3
  #L40c71e.  return @kind void;
  #L40c720.  v1:= 0I;
  #L40c722.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.h` @type ^`java.util.Collection` := v1 @kind object;
  #L40c726.  @monitorexit v3
  #L40c728.  v1:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L40c72c.  call temp:= `offer`(v1, v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L40c732.  v0:= 1I;
  #L40c734.  v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40c738.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L40c73e.  v0:= temp;
  #L40c740.  if v0 == 0 then goto L40c754;
  #L40c744.  v0:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L40c748.  v1:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40c74c.  v2:= 0I;
  #L40c74e.  call `drainMaxLoop`(v0, v1, v2, v3, v3) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/QueueDrain;)V` @kind static;
  #L40c754.  return @kind void;
  #L40c756.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40c758.  @monitorexit v3
  #L40c75a.  throw v0;
  catch `java.lang.Throwable` @[L40c714..L40c728] goto L40c756;
  catch `java.lang.Throwable` @[L40c758..L40c75a] goto L40c756;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40c780.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40c784.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40c78a.  @monitorenter v1
  #L40c78c.  v0:= 0I;
  #L40c78e.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.h` @type ^`java.util.Collection` := v0 @kind object;
  #L40c792.  @monitorexit v1
  #L40c794.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40c798.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40c79e.  return @kind void;
  #L40c7a0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40c7a2.  @monitorexit v1
  #L40c7a4.  throw v2;
  catch `java.lang.Throwable` @[L40c78e..L40c794] goto L40c7a0;
  catch `java.lang.Throwable` @[L40c7a2..L40c7a4] goto L40c7a0;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40c7cc.  @monitorenter v1
  #L40c7ce.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.h` @type ^`java.util.Collection` @kind object;
  #L40c7d2.  if v0 == 0 then goto L40c7dc;
  #L40c7d6.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L40c7dc.  @monitorexit v1
  #L40c7de.  return @kind void;
  #L40c7e0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40c7e2.  @monitorexit v1
  #L40c7e4.  throw v2;
  catch `java.lang.Throwable` @[L40c7ce..L40c7e4] goto L40c7e0;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b` v9 @kind this, `org.reactivestreams.Subscription` v10 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L40c804.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40c808.  call temp:= `validate`(v0, v10) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40c80e.  v0:= temp;
  #L40c810.  if v0 == 0 then goto L40c8a4;
  #L40c814.  v9.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.g` @type ^`org.reactivestreams.Subscription` := v10 @kind object;
  #L40c818.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L40c81c.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L40c822.  v0:= temp @kind object;
  #L40c824.  v1:= "The supplied buffer is null" @kind object;
  #L40c828.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40c82e.  v0:= temp @kind object;
  #L40c830.  v0:= (`java.util.Collection`) v0 @kind object;
  #L40c834.  v9.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.h` @type ^`java.util.Collection` := v0 @kind object;
  #L40c838.  v0:= v9.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40c83c.  call `onSubscribe`(v0, v9) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40c842.  v0:= v9.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L40c846.  if v0 != 0 then goto L40c8a4;
  #L40c84a.  v0:= 9223372036854775807L;
  #L40c854.  call `request`(v10, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40c85a.  v2:= v9.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.f` @type ^`io.reactivex.Scheduler` @kind object;
  #L40c85e.  v6:= v9.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.d` @type ^`long` @kind wide;
  #L40c862.  v8:= v9.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L40c866.  v3:= v9 @kind object;
  #L40c868.  v4:= v6 @kind wide;
  #L40c86a.  call temp:= `schedulePeriodicallyDirect`(v2, v3, v4, v6, v8) @signature `Lio/reactivex/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L40c870.  v10:= temp @kind object;
  #L40c872.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40c876.  v1:= 0I;
  #L40c878.  call temp:= `compareAndSet`(v0, v1, v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L40c87e.  v0:= temp;
  #L40c880.  if v0 != 0 then goto L40c8a4;
  #L40c884.  call `dispose`(v10) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L40c88a.  goto L40c8a4;
  #L40c88c.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40c88e.  call `throwIfFatal`(v10) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40c894.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.cancel:()V` @kind virtual;
  #L40c89a.  v0:= v9.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40c89e.  call `error`(v10, v0) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L40c8a4.  return @kind void;
  catch `java.lang.Throwable` @[L40c818..L40c834] goto L40c88c;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L40c8c4.  call `requested`(v0, v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @kind virtual;
  #L40c8ca.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40c8dc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L40c8e0.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L40c8e6.  v0:= temp @kind object;
  #L40c8e8.  v1:= "The supplied buffer is null" @kind object;
  #L40c8ec.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40c8f2.  v0:= temp @kind object;
  #L40c8f4.  v0:= (`java.util.Collection`) v0 @kind object;
  #L40c8f8.  @monitorenter v2
  #L40c8fa.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.h` @type ^`java.util.Collection` @kind object;
  #L40c8fe.  if v1 == 0 then goto L40c906;
  #L40c902.  v2.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.h` @type ^`java.util.Collection` := v0 @kind object;
  #L40c906.  @monitorexit v2
  #L40c908.  if v1 != 0 then goto L40c918;
  #L40c90c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40c910.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40c916.  return @kind void;
  #L40c918.  v0:= 0I;
  #L40c91a.  call `fastPathEmitMax`(v2, v1, v0, v2) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastPathEmitMax:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L40c920.  return @kind void;
  #L40c922.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40c924.  @monitorexit v2
  #L40c926.  throw v0;
  #L40c928.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40c92a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40c930.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.cancel:()V` @kind virtual;
  #L40c936.  v1:= v2.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40c93a.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40c940.  return @kind void;
  catch `java.lang.Throwable` @[L40c8dc..L40c8f8] goto L40c928;
  catch `java.lang.Throwable` @[L40c8fa..L40c908] goto L40c922;
  catch `java.lang.Throwable` @[L40c924..L40c926] goto L40c922;
}
