record `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a$a` @kind class @AccessFlag FINAL extends `java.lang.Runnable` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a$a.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a$a` v0 @kind this, `long` v1 , `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a$a;.<init>:(JLio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L427a30.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L427a36.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a$a.a` @type ^`long` := v1 @kind wide;
  #L427a3a.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a` := v3 @kind object;
  #L427a3e.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L427a50.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a` @kind object;
  #L427a54.  call temp:= `a`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.a:(Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;)Z` @kind static;
  #L427a5a.  v1:= temp;
  #L427a5c.  if v1 != 0 then goto L427a70;
  #L427a60.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.b:(Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;)Lio/reactivex/internal/fuseable/SimplePlainQueue;` @kind static;
  #L427a66.  v1:= temp @kind object;
  #L427a68.  call temp:= `offer`(v1, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L427a6e.  goto L427a7c;
  #L427a70.  v1:= 1I;
  #L427a72.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.n` @type ^`boolean` := v1 @kind boolean;
  #L427a76.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.dispose:()V` @kind virtual;
  #L427a7c.  call temp:= `enter`(v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L427a82.  v1:= temp;
  #L427a84.  if v1 == 0 then goto L427a8e;
  #L427a88.  call `c`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.c:()V` @kind virtual;
  #L427a8e.  return @kind void;
}
