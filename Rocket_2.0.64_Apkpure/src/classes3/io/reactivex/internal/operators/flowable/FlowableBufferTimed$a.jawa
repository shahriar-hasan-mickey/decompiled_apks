record `io.reactivex.internal.operators.flowable.FlowableBufferTimed$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.d` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.g` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.h` @AccessFlag FINAL;
  `java.util.Collection` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.i` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.j` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.k` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.l` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.m` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `int` v7 , `boolean` v8 , `io.reactivex.Scheduler$Worker` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;IZLio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L40c21c.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L40c220.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L40c226.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L40c22c.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.c` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L40c230.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.d` @type ^`long` := v4 @kind wide;
  #L40c234.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.e` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L40c238.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.f` @type ^`int` := v7;
  #L40c23c.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.g` @type ^`boolean` := v8 @kind boolean;
  #L40c240.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.Scheduler$Worker` := v9 @kind object;
  #L40c244.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L40c1e0.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40c1e6.  v1:= 1I;
  #L40c1e8.  return v1;
}
procedure `boolean` `accept`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L40c1c0.  v2:= (`java.util.Collection`) v2 @kind object;
  #L40c1c4.  call temp:= `a`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @kind virtual;
  #L40c1ca.  v1:= temp;
  #L40c1cc.  return v1;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40c258.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L40c25c.  if v0 != 0 then goto L40c26c;
  #L40c260.  v0:= 1I;
  #L40c262.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L40c266.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.dispose:()V` @kind virtual;
  #L40c26c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40c280.  @monitorenter v1
  #L40c282.  v0:= 0I;
  #L40c284.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` := v0 @kind object;
  #L40c288.  @monitorexit v1
  #L40c28a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.k` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40c28e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40c294.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40c298.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L40c29e.  return @kind void;
  #L40c2a0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40c2a2.  @monitorexit v1
  #L40c2a4.  throw v0;
  catch `java.lang.Throwable` @[L40c284..L40c28a] goto L40c2a0;
  catch `java.lang.Throwable` @[L40c2a2..L40c2a4] goto L40c2a0;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40c1fc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40c200.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L40c206.  v0:= temp;
  #L40c208.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40c2cc.  @monitorenter v3
  #L40c2ce.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` @kind object;
  #L40c2d2.  v1:= 0I;
  #L40c2d4.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` := v1 @kind object;
  #L40c2d8.  @monitorexit v3
  #L40c2da.  v1:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L40c2de.  call temp:= `offer`(v1, v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L40c2e4.  v0:= 1I;
  #L40c2e6.  v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L40c2ea.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L40c2f0.  v0:= temp;
  #L40c2f2.  if v0 == 0 then goto L40c306;
  #L40c2f6.  v0:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L40c2fa.  v1:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40c2fe.  v2:= 0I;
  #L40c300.  call `drainMaxLoop`(v0, v1, v2, v3, v3) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/QueueDrain;)V` @kind static;
  #L40c306.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40c30a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L40c310.  return @kind void;
  #L40c312.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40c314.  @monitorexit v3
  #L40c316.  throw v0;
  catch `java.lang.Throwable` @[L40c2ce..L40c2da] goto L40c312;
  catch `java.lang.Throwable` @[L40c314..L40c316] goto L40c312;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40c33c.  @monitorenter v1
  #L40c33e.  v0:= 0I;
  #L40c340.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` := v0 @kind object;
  #L40c344.  @monitorexit v1
  #L40c346.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40c34a.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40c350.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40c354.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L40c35a.  return @kind void;
  #L40c35c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40c35e.  @monitorexit v1
  #L40c360.  throw v2;
  catch `java.lang.Throwable` @[L40c340..L40c346] goto L40c35c;
  catch `java.lang.Throwable` @[L40c35e..L40c360] goto L40c35c;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a` v12 @kind this, `java.lang.Object` v13 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L40c388.  @monitorenter v12
  #L40c38a.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` @kind object;
  #L40c38e.  if v0 != 0 then goto L40c396;
  #L40c392.  @monitorexit v12
  #L40c394.  return @kind void;
  #L40c396.  call temp:= `add`(v0, v13) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L40c39c.  call temp:= `size`(v0) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L40c3a2.  v13:= temp;
  #L40c3a4.  v1:= v12.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.f` @type ^`int`;
  #L40c3a8.  if v13 >= v1 then goto L40c3b0;
  #L40c3ac.  @monitorexit v12
  #L40c3ae.  return @kind void;
  #L40c3b0.  @monitorexit v12
  #L40c3b2.  v13:= v12.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.g` @type ^`boolean` @kind boolean;
  #L40c3b6.  v1:= 1L;
  #L40c3ba.  if v13 == 0 then goto L40c3d8;
  #L40c3be.  v13:= 0I;
  #L40c3c0.  v12.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` := v13 @kind object;
  #L40c3c4.  v3:= v12.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.l` @type ^`long` @kind wide;
  #L40c3c8.  v3:= v3 + v1 @kind long;
  #L40c3ca.  v12.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.l` @type ^`long` := v3 @kind wide;
  #L40c3ce.  v13:= v12.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.j` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L40c3d2.  call `dispose`(v13) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L40c3d8.  v13:= 0I;
  #L40c3da.  call `fastPathOrderedEmitMax`(v12, v0, v13, v12) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastPathOrderedEmitMax:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L40c3e0.  v13:= v12.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L40c3e4.  call temp:= `call`(v13) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L40c3ea.  v13:= temp @kind object;
  #L40c3ec.  v0:= "The supplied buffer is null" @kind object;
  #L40c3f0.  call temp:= `requireNonNull`(v13, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40c3f6.  v13:= temp @kind object;
  #L40c3f8.  v13:= (`java.util.Collection`) v13 @kind object;
  #L40c3fc.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.g` @type ^`boolean` @kind boolean;
  #L40c400.  if v0 == 0 then goto L40c43a;
  #L40c404.  @monitorenter v12
  #L40c406.  v12.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` := v13 @kind object;
  #L40c40a.  v3:= v12.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.m` @type ^`long` @kind wide;
  #L40c40e.  v3:= v3 + v1 @kind long;
  #L40c410.  v12.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.m` @type ^`long` := v3 @kind wide;
  #L40c414.  @monitorexit v12
  #L40c416.  v5:= v12.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40c41a.  v9:= v12.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.d` @type ^`long` @kind wide;
  #L40c41e.  v11:= v12.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L40c422.  v6:= v12 @kind object;
  #L40c424.  v7:= v9 @kind wide;
  #L40c426.  call temp:= `schedulePeriodically`(v5, v6, v7, v9, v11) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L40c42c.  v13:= temp @kind object;
  #L40c42e.  v12.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.j` @type ^`io.reactivex.disposables.Disposable` := v13 @kind object;
  #L40c432.  goto L40c442;
  #L40c434.  v13:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40c436.  @monitorexit v12
  #L40c438.  throw v13;
  #L40c43a.  @monitorenter v12
  #L40c43c.  v12.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` := v13 @kind object;
  #L40c440.  @monitorexit v12
  #L40c442.  return @kind void;
  #L40c444.  v13:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40c446.  @monitorexit v12
  #L40c448.  throw v13;
  #L40c44a.  v13:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40c44c.  call `throwIfFatal`(v13) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40c452.  call `cancel`(v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.cancel:()V` @kind virtual;
  #L40c458.  v0:= v12.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40c45c.  call `onError`(v0, v13) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40c462.  return @kind void;
  #L40c464.  v13:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40c466.  @monitorexit v12
  #L40c468.  throw v13;
  catch `java.lang.Throwable` @[L40c38a..L40c3b2] goto L40c464;
  catch `java.lang.Throwable` @[L40c3e0..L40c3fc] goto L40c44a;
  catch `java.lang.Throwable` @[L40c406..L40c416] goto L40c434;
  catch `java.lang.Throwable` @[L40c436..L40c438] goto L40c434;
  catch `java.lang.Throwable` @[L40c43c..L40c448] goto L40c444;
  catch `java.lang.Throwable` @[L40c466..L40c468] goto L40c464;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a` v8 @kind this, `org.reactivestreams.Subscription` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L40c4b8.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.k` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40c4bc.  call temp:= `validate`(v0, v9) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40c4c2.  v0:= temp;
  #L40c4c4.  if v0 != 0 then goto L40c4ca;
  #L40c4c8.  return @kind void;
  #L40c4ca.  v8.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.k` @type ^`org.reactivestreams.Subscription` := v9 @kind object;
  #L40c4ce.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L40c4d2.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L40c4d8.  v0:= temp @kind object;
  #L40c4da.  v1:= "The supplied buffer is null" @kind object;
  #L40c4de.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40c4e4.  v0:= temp @kind object;
  #L40c4e6.  v0:= (`java.util.Collection`) v0 @kind object;
  #L40c4ea.  v8.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` := v0 @kind object;
  #L40c4ee.  v0:= v8.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40c4f2.  call `onSubscribe`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40c4f8.  v1:= v8.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40c4fc.  v5:= v8.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.d` @type ^`long` @kind wide;
  #L40c500.  v7:= v8.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L40c504.  v2:= v8 @kind object;
  #L40c506.  v3:= v5 @kind wide;
  #L40c508.  call temp:= `schedulePeriodically`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L40c50e.  v0:= temp @kind object;
  #L40c510.  v8.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.j` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L40c514.  v0:= 9223372036854775807L;
  #L40c51e.  call `request`(v9, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40c524.  return @kind void;
  #L40c526.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40c528.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40c52e.  v1:= v8.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L40c532.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L40c538.  call `cancel`(v9) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40c53e.  v9:= v8.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40c542.  call `error`(v0, v9) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L40c548.  return @kind void;
  catch `java.lang.Throwable` @[L40c4ce..L40c4ea] goto L40c526;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L40c568.  call `requested`(v0, v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @kind virtual;
  #L40c56e.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a` v7 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L40c580.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L40c584.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L40c58a.  v0:= temp @kind object;
  #L40c58c.  v1:= "The supplied buffer is null" @kind object;
  #L40c590.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40c596.  v0:= temp @kind object;
  #L40c598.  v0:= (`java.util.Collection`) v0 @kind object;
  #L40c59c.  @monitorenter v7
  #L40c59e.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` @kind object;
  #L40c5a2.  if v1 == 0 then goto L40c5c8;
  #L40c5a6.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.l` @type ^`long` @kind wide;
  #L40c5aa.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.m` @type ^`long` @kind wide;
  #L40c5ae.  v6:= lcmp(v2, v4);
  #L40c5b2.  if v6 == 0 then goto L40c5b8;
  #L40c5b6.  goto L40c5c8;
  #L40c5b8.  v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` := v0 @kind object;
  #L40c5bc.  @monitorexit v7
  #L40c5be.  v0:= 0I;
  #L40c5c0.  call `fastPathOrderedEmitMax`(v7, v1, v0, v7) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastPathOrderedEmitMax:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L40c5c6.  return @kind void;
  #L40c5c8.  @monitorexit v7
  #L40c5ca.  return @kind void;
  #L40c5cc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40c5ce.  @monitorexit v7
  #L40c5d0.  throw v0;
  #L40c5d2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40c5d4.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40c5da.  call `cancel`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.cancel:()V` @kind virtual;
  #L40c5e0.  v1:= v7.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40c5e4.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40c5ea.  return @kind void;
  catch `java.lang.Throwable` @[L40c580..L40c59c] goto L40c5d2;
  catch `java.lang.Throwable` @[L40c59e..L40c5be] goto L40c5cc;
  catch `java.lang.Throwable` @[L40c5c8..L40c5d0] goto L40c5cc;
}
