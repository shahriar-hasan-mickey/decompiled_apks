record `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$c` @kind class {
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRepeatWhen$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.processors.FlowableProcessor` v2 @kind object, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/processors/FlowableProcessor;Lorg/reactivestreams/Subscription;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41e640.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/processors/FlowableProcessor;Lorg/reactivestreams/Subscription;)V` @kind direct;
  #L41e646.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41e658.  v0:= 0I;
  #L41e65a.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L41e660.  v0:= temp @kind object;
  #L41e662.  call `c`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$c;.c:(Ljava/lang/Object;)V` @kind virtual;
  #L41e668.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41e67c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$c.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41e680.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L41e686.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$c.g` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41e68a.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41e690.  return @kind void;
}
