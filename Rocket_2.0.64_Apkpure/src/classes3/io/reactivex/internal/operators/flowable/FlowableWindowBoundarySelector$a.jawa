record `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a` @kind class @AccessFlag FINAL extends `io.reactivex.subscribers.DisposableSubscriber` @kind class {
  `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a.b` @AccessFlag FINAL;
  `io.reactivex.processors.UnicastProcessor` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` v1 @kind object, `io.reactivex.processors.UnicastProcessor` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;Lio/reactivex/processors/UnicastProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L426cd4.  call `<init>`(v0) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.<init>:()V` @kind direct;
  #L426cda.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` := v1 @kind object;
  #L426cde.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a.c` @type ^`io.reactivex.processors.UnicastProcessor` := v2 @kind object;
  #L426ce2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L426cf4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a.d` @type ^`boolean` @kind boolean;
  #L426cf8.  if v0 == 0 then goto L426cfe;
  #L426cfc.  return @kind void;
  #L426cfe.  v0:= 1I;
  #L426d00.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a.d` @type ^`boolean` := v0 @kind boolean;
  #L426d04.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` @kind object;
  #L426d08.  call `a`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.a:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$a;)V` @kind virtual;
  #L426d0e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L426d20.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a.d` @type ^`boolean` @kind boolean;
  #L426d24.  if v0 == 0 then goto L426d30;
  #L426d28.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L426d2e.  return @kind void;
  #L426d30.  v0:= 1I;
  #L426d32.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a.d` @type ^`boolean` := v0 @kind boolean;
  #L426d36.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` @kind object;
  #L426d3a.  call `c`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.c:(Ljava/lang/Throwable;)V` @kind virtual;
  #L426d40.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L426d54.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a.d` @type ^`boolean` @kind boolean;
  #L426d58.  if v1 == 0 then goto L426d5e;
  #L426d5c.  return @kind void;
  #L426d5e.  v1:= 1I;
  #L426d60.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a.d` @type ^`boolean` := v1 @kind boolean;
  #L426d64.  call `cancel`(v0) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.cancel:()V` @kind virtual;
  #L426d6a.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` @kind object;
  #L426d6e.  call `a`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.a:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$a;)V` @kind virtual;
  #L426d74.  return @kind void;
}
