record `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.subscriptions.SubscriptionArbiter` `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.c` @AccessFlag FINAL;
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.BiPredicate` v2 @kind object, `io.reactivex.internal.subscriptions.SubscriptionArbiter` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/BiPredicate;Lio/reactivex/internal/subscriptions/SubscriptionArbiter;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41fdd0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L41fdd6.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L41fdda.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.b` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` := v3 @kind object;
  #L41fdde.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.c` @type ^`org.reactivestreams.Publisher` := v4 @kind object;
  #L41fde2.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.d` @type ^`io.reactivex.functions.BiPredicate` := v2 @kind object;
  #L41fde6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L41fee0.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L41fee6.  v0:= temp;
  #L41fee8.  if v0 != 0 then goto L41ff18;
  #L41feec.  v0:= 1I;
  #L41feee.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.b` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L41fef2.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.isCancelled:()Z` @kind virtual;
  #L41fef8.  v1:= temp;
  #L41fefa.  if v1 == 0 then goto L41ff00;
  #L41fefe.  return @kind void;
  #L41ff00.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.c` @type ^`org.reactivestreams.Publisher` @kind object;
  #L41ff04.  call `subscribe`(v1, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L41ff0a.  v0:= -v0 @kind int;
  #L41ff0c.  call temp:= `addAndGet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L41ff12.  v0:= temp;
  #L41ff14.  if v0 != 0 then goto L41feee;
  #L41ff18.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41fdf8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41fdfc.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41fe02.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L41fe14.  v0:= 1I;
  #L41fe16.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.d` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L41fe1a.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.e` @type ^`int`;
  #L41fe1e.  v2:= v2 + v0 @kind int;
  #L41fe20.  v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.e` @type ^`int` := v2;
  #L41fe24.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L41fe2a.  v2:= temp @kind object;
  #L41fe2c.  call temp:= `test`(v1, v2, v7) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L41fe32.  v0:= temp;
  #L41fe34.  if v0 != 0 then goto L41fe44;
  #L41fe38.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41fe3c.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41fe42.  return @kind void;
  #L41fe44.  call `a`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$a;.a:()V` @kind virtual;
  #L41fe4a.  return @kind void;
  #L41fe4c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41fe4e.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41fe54.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41fe58.  v3:= new `io.reactivex.exceptions.CompositeException`;
  #L41fe5c.  v4:= 2I;
  #L41fe5e.  v4:= new `java.lang.Throwable`[v4];
  #L41fe62.  v5:= 0I;
  #L41fe64.  v4[v5]:= v7 @kind object;
  #L41fe68.  v4[v0]:= v1 @kind object;
  #L41fe6c.  call `<init>`(v3, v4) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L41fe72.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41fe78.  return @kind void;
  catch `java.lang.Throwable` @[L41fe16..L41fe34] goto L41fe4c;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41fe98.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41fe9c.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41fea2.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.b` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L41fea6.  v0:= 1L;
  #L41feaa.  call `produced`(v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L41feb0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41fec4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.b` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L41fec8.  call `setSubscription`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L41fece.  return @kind void;
}
