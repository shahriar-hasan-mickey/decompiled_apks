record `io.reactivex.internal.operators.flowable.FlowableDelay$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableDelay$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableDelay$a.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableDelay$a.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.flowable.FlowableDelay$a.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableDelay$a.e` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableDelay$a.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDelay$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler$Worker` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay$a;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L410d1c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L410d22.  v0.`io.reactivex.internal.operators.flowable.FlowableDelay$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L410d26.  v0.`io.reactivex.internal.operators.flowable.FlowableDelay$a.b` @type ^`long` := v2 @kind wide;
  #L410d2a.  v0.`io.reactivex.internal.operators.flowable.FlowableDelay$a.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L410d2e.  v0.`io.reactivex.internal.operators.flowable.FlowableDelay$a.d` @type ^`io.reactivex.Scheduler$Worker` := v5 @kind object;
  #L410d32.  v0.`io.reactivex.internal.operators.flowable.FlowableDelay$a.e` @type ^`boolean` := v6 @kind boolean;
  #L410d36.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableDelay$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L410d48.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDelay$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L410d4c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L410d52.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDelay$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L410d56.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L410d5c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDelay$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L410d70.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDelay$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L410d74.  v1:= new `io.reactivex.internal.operators.flowable.FlowableDelay$a$a`;
  #L410d78.  call `<init>`(v1, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay$a$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableDelay$a;)V` @kind direct;
  #L410d7e.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableDelay$a.b` @type ^`long` @kind wide;
  #L410d82.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableDelay$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L410d86.  call temp:= `schedule`(v0, v1, v2, v4) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L410d8c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDelay$a` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L410da0.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableDelay$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L410da4.  v1:= new `io.reactivex.internal.operators.flowable.FlowableDelay$a$b`;
  #L410da8.  call `<init>`(v1, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay$a$b;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableDelay$a;Ljava/lang/Throwable;)V` @kind direct;
  #L410dae.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableDelay$a.e` @type ^`boolean` @kind boolean;
  #L410db2.  if v5 == 0 then goto L410dbc;
  #L410db6.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableDelay$a.b` @type ^`long` @kind wide;
  #L410dba.  goto L410dc0;
  #L410dbc.  v2:= 0L;
  #L410dc0.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableDelay$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L410dc4.  call temp:= `schedule`(v0, v1, v2, v5) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L410dca.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDelay$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L410ddc.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableDelay$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L410de0.  v1:= new `io.reactivex.internal.operators.flowable.FlowableDelay$a$c`;
  #L410de4.  call `<init>`(v1, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay$a$c;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableDelay$a;Ljava/lang/Object;)V` @kind direct;
  #L410dea.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableDelay$a.b` @type ^`long` @kind wide;
  #L410dee.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableDelay$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L410df2.  call temp:= `schedule`(v0, v1, v2, v5) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L410df8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableDelay$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L410e0c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDelay$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L410e10.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L410e16.  v0:= temp;
  #L410e18.  if v0 == 0 then goto L410e2a;
  #L410e1c.  v1.`io.reactivex.internal.operators.flowable.FlowableDelay$a.f` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L410e20.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableDelay$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L410e24.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L410e2a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableDelay$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L410e3c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDelay$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L410e40.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L410e46.  return @kind void;
}
