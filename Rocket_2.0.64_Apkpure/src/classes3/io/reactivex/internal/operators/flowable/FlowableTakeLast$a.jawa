record `io.reactivex.internal.operators.flowable.FlowableTakeLast$a` @kind class @AccessFlag FINAL extends `java.util.ArrayDeque` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableTakeLast$a.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableTakeLast$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableTakeLast$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTakeLast$a.d` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTakeLast$a.e` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableTakeLast$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableTakeLast$a.g` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTakeLast$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$a;.<init>:(Lorg/reactivestreams/Subscriber;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4238f8.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L4238fe.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L423902.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L423908.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L42390c.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L423910.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L423916.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.g` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L42391a.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L42391e.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.b` @type ^`int` := v3;
  #L423922.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$a` v9 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L423958.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.g` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L42395c.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L423962.  v0:= temp;
  #L423964.  if v0 != 0 then goto L4239fc;
  #L423968.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L42396c.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L423970.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L423976.  v1:= temp @kind wide;
  #L423978.  v3:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.e` @type ^`boolean` @kind boolean;
  #L42397c.  if v3 == 0 then goto L423982;
  #L423980.  return @kind void;
  #L423982.  v3:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.d` @type ^`boolean` @kind boolean;
  #L423986.  if v3 == 0 then goto L4239ec;
  #L42398a.  v3:= 0L;
  #L42398e.  v5:= v3 @kind wide;
  #L423990.  v7:= lcmp(v5, v1);
  #L423994.  if v7 == 0 then goto L4239c4;
  #L423998.  v7:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.e` @type ^`boolean` @kind boolean;
  #L42399c.  if v7 == 0 then goto L4239a2;
  #L4239a0.  return @kind void;
  #L4239a2.  call temp:= `poll`(v9) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4239a8.  v7:= temp @kind object;
  #L4239aa.  if v7 != 0 then goto L4239b6;
  #L4239ae.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4239b4.  return @kind void;
  #L4239b6.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4239bc.  v7:= 1L;
  #L4239c0.  v5:= v5 + v7 @kind long;
  #L4239c2.  goto L423990;
  #L4239c4.  v7:= lcmp(v5, v3);
  #L4239c8.  if v7 == 0 then goto L4239ec;
  #L4239cc.  v3:= 9223372036854775807L;
  #L4239d6.  v7:= lcmp(v1, v3);
  #L4239da.  if v7 == 0 then goto L4239ec;
  #L4239de.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4239e2.  v2:= -v5 @kind long;
  #L4239e4.  call temp:= `addAndGet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4239ea.  v1:= temp @kind wide;
  #L4239ec.  v3:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.g` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4239f0.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4239f6.  v3:= temp;
  #L4239f8.  if v3 != 0 then goto L423978;
  #L4239fc.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L423934.  v0:= 1I;
  #L423936.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.e` @type ^`boolean` := v0 @kind boolean;
  #L42393a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L42393e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L423944.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L423a10.  v0:= 1I;
  #L423a12.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.d` @type ^`boolean` := v0 @kind boolean;
  #L423a16.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$a;.a:()V` @kind virtual;
  #L423a1c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L423a30.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L423a34.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L423a3a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L423a4c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.b` @type ^`int`;
  #L423a50.  call temp:= `size`(v2) @signature `Ljava/util/ArrayDeque;.size:()I` @kind virtual;
  #L423a56.  v1:= temp;
  #L423a58.  if v0 != v1 then goto L423a62;
  #L423a5c.  call temp:= `poll`(v2) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L423a62.  call temp:= `offer`(v2, v3) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L423a68.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L423a7c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L423a80.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L423a86.  v0:= temp;
  #L423a88.  if v0 == 0 then goto L423aaa;
  #L423a8c.  v2.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L423a90.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L423a94.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L423a9a.  v0:= 9223372036854775807L;
  #L423aa4.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L423aaa.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L423abc.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L423ac2.  v0:= temp;
  #L423ac4.  if v0 == 0 then goto L423ad8;
  #L423ac8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L423acc.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L423ad2.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$a;.a:()V` @kind virtual;
  #L423ad8.  return @kind void;
}
