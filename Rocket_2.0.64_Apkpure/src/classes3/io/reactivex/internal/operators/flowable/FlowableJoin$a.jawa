record `io.reactivex.internal.operators.flowable.FlowableJoin$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.internal.operators.flowable.FlowableGroupJoin$b` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableJoin$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableJoin$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.flowable.FlowableJoin$a.c` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.flowable.FlowableJoin$a.d` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.internal.operators.flowable.FlowableJoin$a.e` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.internal.operators.flowable.FlowableJoin$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableJoin$a.g` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableJoin$a.h` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableJoin$a.i` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.flowable.FlowableJoin$a.j` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableJoin$a.k` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableJoin$a.l` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableJoin$a.m` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableJoin$a.n` @AccessFlag VOLATILE;
}
global `java.lang.Integer` `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.o` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.p` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.q` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.r` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L419224.  v0:= 1I;
  #L419226.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L41922c.  v0:= temp @kind object;
  #L41922e.  `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.o` @type ^`java.lang.Integer` := v0 @kind object;
  #L419232.  v0:= 2I;
  #L419234.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L41923a.  v0:= temp @kind object;
  #L41923c.  `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.p` @type ^`java.lang.Integer` := v0 @kind object;
  #L419240.  v0:= 3I;
  #L419242.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L419248.  v0:= temp @kind object;
  #L41924a.  `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.q` @type ^`java.lang.Integer` := v0 @kind object;
  #L41924e.  v0:= 4I;
  #L419250.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L419256.  v0:= temp @kind object;
  #L419258.  `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.r` @type ^`java.lang.Integer` := v0 @kind object;
  #L41925c.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object, `io.reactivex.functions.BiFunction` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L419270.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L419276.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L41927a.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L41927e.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L419284.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L419288.  v2:= new `io.reactivex.disposables.CompositeDisposable`;
  #L41928c.  call `<init>`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L419292.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` := v2 @kind object;
  #L419296.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L41929a.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L4192a0.  v0:= temp;
  #L4192a2.  call `<init>`(v2, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4192a8.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L4192ac.  v2:= new `java.util.LinkedHashMap`;
  #L4192b0.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L4192b6.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.e` @type ^`java.util.Map` := v2 @kind object;
  #L4192ba.  v2:= new `java.util.LinkedHashMap`;
  #L4192be.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L4192c4.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.f` @type ^`java.util.Map` := v2 @kind object;
  #L4192c8.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4192cc.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4192d2.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4192d6.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.h` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L4192da.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.i` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L4192de.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.j` @type ^`io.reactivex.functions.BiFunction` := v5 @kind object;
  #L4192e2.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4192e6.  v3:= 2I;
  #L4192e8.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4192ee.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L4192f2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L419864.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L419868.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L41986e.  v0:= temp;
  #L419870.  if v0 == 0 then goto L419886;
  #L419874.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L419878.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L41987e.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.g:()V` @kind virtual;
  #L419884.  goto L41988c;
  #L419886.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41988c.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `boolean` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.b:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4198a0.  @monitorenter v1
  #L4198a2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4198a6.  if v2 == 0 then goto L4198b0;
  #L4198aa.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L4198ae.  goto L4198b4;
  #L4198b0.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L4198b4.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4198ba.  @monitorexit v1
  #L4198bc.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.g:()V` @kind virtual;
  #L4198c2.  return @kind void;
  #L4198c4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4198c6.  @monitorexit v1
  #L4198c8.  throw v2;
  catch `java.lang.Throwable` @[L4198a2..L4198bc] goto L4198c4;
  catch `java.lang.Throwable` @[L4198c6..L4198c8] goto L4198c4;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.c:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L419808.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41980c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L419812.  v0:= temp;
  #L419814.  if v0 == 0 then goto L419820;
  #L419818.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.g:()V` @kind virtual;
  #L41981e.  goto L419826;
  #L419820.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L419826.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableJoin$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L419304.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.n` @type ^`boolean` @kind boolean;
  #L419308.  if v0 == 0 then goto L41930e;
  #L41930c.  return @kind void;
  #L41930e.  v0:= 1I;
  #L419310.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.n` @type ^`boolean` := v0 @kind boolean;
  #L419314.  call `f`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.f:()V` @kind virtual;
  #L41931a.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L419320.  v0:= temp;
  #L419322.  if v0 != 0 then goto L419330;
  #L419326.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L41932a.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L419330.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `boolean` v2 , `io.reactivex.internal.operators.flowable.FlowableGroupJoin$c` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.d:(ZLio/reactivex/internal/operators/flowable/FlowableGroupJoin$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4197b8.  @monitorenter v1
  #L4197ba.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4197be.  if v2 == 0 then goto L4197c8;
  #L4197c2.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.q` @type ^`java.lang.Integer` @kind object;
  #L4197c6.  goto L4197cc;
  #L4197c8.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.r` @type ^`java.lang.Integer` @kind object;
  #L4197cc.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4197d2.  @monitorexit v1
  #L4197d4.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.g:()V` @kind virtual;
  #L4197da.  return @kind void;
  #L4197dc.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4197de.  @monitorexit v1
  #L4197e0.  throw v2;
  catch `java.lang.Throwable` @[L4197ba..L4197d4] goto L4197dc;
  catch `java.lang.Throwable` @[L4197de..L4197e0] goto L4197dc;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableGroupJoin$d` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.e:(Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L419838.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L41983c.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L419842.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L419846.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L41984c.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.g:()V` @kind virtual;
  #L419852.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableJoin$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.f:()V` @AccessFlag  {
    temp;
    v0;

  #L419344.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L419348.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L41934e.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.flowable.FlowableJoin$a` v17 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L419360.  v1:= v17 @kind object;
  #L419364.  call temp:= `getAndIncrement`(v17) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L41936a.  v0:= temp;
  #L41936c.  if v0 == 0 then goto L419372;
  #L419370.  return @kind void;
  #L419372.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L419376.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41937a.  v0:= 1I;
  #L41937c.  v4:= 1I;
  #L41937e.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.n` @type ^`boolean` @kind boolean;
  #L419382.  if v5 == 0 then goto L41938e;
  #L419386.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L41938c.  return @kind void;
  #L41938e.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L419392.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L419398.  v5:= temp @kind object;
  #L41939a.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L41939e.  if v5 == 0 then goto L4193b6;
  #L4193a2.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4193a8.  call `f`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.f:()V` @kind virtual;
  #L4193ae.  call `h`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4193b4.  return @kind void;
  #L4193b6.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4193ba.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4193c0.  v5:= temp;
  #L4193c2.  v6:= 0I;
  #L4193c4.  if v5 != 0 then goto L4193cc;
  #L4193c8.  v5:= 1I;
  #L4193ca.  goto L4193ce;
  #L4193cc.  v5:= 0I;
  #L4193ce.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4193d4.  v7:= temp @kind object;
  #L4193d6.  v7:= (`java.lang.Integer`) v7 @kind object;
  #L4193da.  if v7 != 0 then goto L4193e2;
  #L4193de.  v8:= 1I;
  #L4193e0.  goto L4193e4;
  #L4193e2.  v8:= 0I;
  #L4193e4.  if v5 == 0 then goto L419412;
  #L4193e8.  if v8 == 0 then goto L419412;
  #L4193ec.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4193f0.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4193f6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.f` @type ^`java.util.Map` @kind object;
  #L4193fa.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L419400.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L419404.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L41940a.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L419410.  return @kind void;
  #L419412.  if v8 == 0 then goto L419426;
  #L419416.  v4:= -v4 @kind int;
  #L419418.  call temp:= `addAndGet`(v1, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L41941e.  v4:= temp;
  #L419420.  if v4 != 0 then goto L41937e;
  #L419424.  return @kind void;
  #L419426.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L41942c.  v5:= temp @kind object;
  #L41942e.  v8:= `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L419432.  v9:= 1L;
  #L419436.  v11:= "Could not emit value due to lack of requests" @kind object;
  #L41943a.  v12:= "The resultSelector returned a null value" @kind object;
  #L41943e.  if v7 != v8 then goto L419574;
  #L419442.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.l` @type ^`int`;
  #L419446.  v7:= v6 + 1;
  #L41944a.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.l` @type ^`int` := v7;
  #L41944e.  v7:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L419452.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L419458.  v8:= temp @kind object;
  #L41945a.  call temp:= `put`(v7, v8, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L419460.  v7:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.h` @type ^`io.reactivex.functions.Function` @kind object;
  #L419464.  call temp:= `apply`(v7, v5) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L41946a.  v7:= temp @kind object;
  #L41946c.  v8:= "The leftEnd returned a null Publisher" @kind object;
  #L419470.  call temp:= `requireNonNull`(v7, v8) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419476.  v7:= temp @kind object;
  #L419478.  v7:= (`org.reactivestreams.Publisher`) v7 @kind object;
  #L41947c.  v8:= new `io.reactivex.internal.operators.flowable.FlowableGroupJoin$c`;
  #L419480.  call `<init>`(v8, v1, v0, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$c;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$b;ZI)V` @kind direct;
  #L419486.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L41948a.  call temp:= `add`(v6, v8) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L419490.  call `subscribe`(v7, v8) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L419496.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41949a.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4194a0.  v6:= temp @kind object;
  #L4194a2.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L4194a6.  if v6 == 0 then goto L4194be;
  #L4194aa.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4194b0.  call `f`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.f:()V` @kind virtual;
  #L4194b6.  call `h`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4194bc.  return @kind void;
  #L4194be.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4194c2.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4194c8.  v6:= temp @kind wide;
  #L4194ca.  v8:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.f` @type ^`java.util.Map` @kind object;
  #L4194ce.  call temp:= `values`(v8) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4194d4.  v8:= temp @kind object;
  #L4194d6.  call temp:= `iterator`(v8) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4194dc.  v8:= temp @kind object;
  #L4194de.  v13:= 0L;
  #L4194e2.  call temp:= `hasNext`(v8) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4194e8.  v16:= temp;
  #L4194ea.  if v16 == 0 then goto L419550;
  #L4194ee.  call temp:= `next`(v8) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4194f4.  v0:= temp @kind object;
  #L4194f6.  v15:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.j` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L4194fa.  call temp:= `apply`(v15, v5, v0) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L419500.  v0:= temp @kind object;
  #L419502.  call temp:= `requireNonNull`(v0, v12) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419508.  v0:= temp @kind object;
  #L41950a.  v15:= lcmp(v13, v6);
  #L41950e.  if v15 == 0 then goto L41951e;
  #L419512.  call `onNext`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L419518.  v13:= v13 + v9 @kind long;
  #L41951a.  v0:= 1I;
  #L41951c.  goto L4194e2;
  #L41951e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L419522.  v4:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L419526.  call `<init>`(v4, v11) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41952c.  call temp:= `addThrowable`(v0, v4) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L419532.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L419538.  call `f`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.f:()V` @kind virtual;
  #L41953e.  call `h`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L419544.  return @kind void;
  #L419546.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L419548.  call `i`(v1, v0, v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L41954e.  return @kind void;
  #L419550.  v5:= 0L;
  #L419554.  v0:= lcmp(v13, v5);
  #L419558.  if v0 == 0 then goto L419704;
  #L41955c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L419560.  call temp:= `produced`(v0, v13) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L419566.  goto L419704;
  #L41956a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41956c.  call `i`(v1, v0, v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L419572.  return @kind void;
  #L419574.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L419578.  if v7 != v0 then goto L4196aa;
  #L41957c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.m` @type ^`int`;
  #L419580.  v7:= v0 + 1;
  #L419584.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.m` @type ^`int` := v7;
  #L419588.  v7:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.f` @type ^`java.util.Map` @kind object;
  #L41958c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L419592.  v8:= temp @kind object;
  #L419594.  call temp:= `put`(v7, v8, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L41959a.  v7:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.i` @type ^`io.reactivex.functions.Function` @kind object;
  #L41959e.  call temp:= `apply`(v7, v5) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4195a4.  v7:= temp @kind object;
  #L4195a6.  v8:= "The rightEnd returned a null Publisher" @kind object;
  #L4195aa.  call temp:= `requireNonNull`(v7, v8) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4195b0.  v7:= temp @kind object;
  #L4195b2.  v7:= (`org.reactivestreams.Publisher`) v7 @kind object;
  #L4195b6.  v8:= new `io.reactivex.internal.operators.flowable.FlowableGroupJoin$c`;
  #L4195ba.  call `<init>`(v8, v1, v6, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$c;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$b;ZI)V` @kind direct;
  #L4195c0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4195c4.  call temp:= `add`(v0, v8) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4195ca.  call `subscribe`(v7, v8) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4195d0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4195d4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4195da.  v0:= temp @kind object;
  #L4195dc.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L4195e0.  if v0 == 0 then goto L4195f8;
  #L4195e4.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4195ea.  call `f`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.f:()V` @kind virtual;
  #L4195f0.  call `h`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4195f6.  return @kind void;
  #L4195f8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4195fc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L419602.  v6:= temp @kind wide;
  #L419604.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L419608.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L41960e.  v0:= temp @kind object;
  #L419610.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L419616.  v0:= temp @kind object;
  #L419618.  v13:= 0L;
  #L41961c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L419622.  v8:= temp;
  #L419624.  if v8 == 0 then goto L419688;
  #L419628.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L41962e.  v8:= temp @kind object;
  #L419630.  v15:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.j` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L419634.  call temp:= `apply`(v15, v8, v5) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L41963a.  v8:= temp @kind object;
  #L41963c.  call temp:= `requireNonNull`(v8, v12) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419642.  v8:= temp @kind object;
  #L419644.  v15:= lcmp(v13, v6);
  #L419648.  if v15 == 0 then goto L419656;
  #L41964c.  call `onNext`(v3, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L419652.  v13:= v13 + v9 @kind long;
  #L419654.  goto L41961c;
  #L419656.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41965a.  v4:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L41965e.  call `<init>`(v4, v11) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L419664.  call temp:= `addThrowable`(v0, v4) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L41966a.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L419670.  call `f`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.f:()V` @kind virtual;
  #L419676.  call `h`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L41967c.  return @kind void;
  #L41967e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L419680.  call `i`(v1, v0, v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L419686.  return @kind void;
  #L419688.  v5:= 0L;
  #L41968c.  v0:= lcmp(v13, v5);
  #L419690.  if v0 == 0 then goto L419704;
  #L419694.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L419698.  call temp:= `produced`(v0, v13) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L41969e.  goto L419704;
  #L4196a0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4196a2.  call `i`(v1, v0, v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L4196a8.  return @kind void;
  #L4196aa.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.q` @type ^`java.lang.Integer` @kind object;
  #L4196ae.  if v7 != v0 then goto L4196d8;
  #L4196b2.  v5:= (`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c`) v5 @kind object;
  #L4196b6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4196ba.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c.c` @type ^`int`;
  #L4196be.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4196c4.  v6:= temp @kind object;
  #L4196c6.  call temp:= `remove`(v0, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4196cc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4196d0.  call temp:= `remove`(v0, v5) @signature `Lio/reactivex/disposables/CompositeDisposable;.remove:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4196d6.  goto L419704;
  #L4196d8.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.r` @type ^`java.lang.Integer` @kind object;
  #L4196dc.  if v7 != v0 then goto L419704;
  #L4196e0.  v5:= (`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c`) v5 @kind object;
  #L4196e4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.f` @type ^`java.util.Map` @kind object;
  #L4196e8.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c.c` @type ^`int`;
  #L4196ec.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4196f2.  v6:= temp @kind object;
  #L4196f4.  call temp:= `remove`(v0, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4196fa.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4196fe.  call temp:= `remove`(v0, v5) @signature `Lio/reactivex/disposables/CompositeDisposable;.remove:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L419704.  v0:= 1I;
  #L419706.  goto L41937e;
  catch `java.lang.Throwable` @[L419460..L41947c] goto L41956a;
  catch `java.lang.Throwable` @[L4194f6..L41950a] goto L419546;
  catch `java.lang.Throwable` @[L41959a..L4195b6] goto L4196a0;
  catch `java.lang.Throwable` @[L419630..L419644] goto L41967e;
}
procedure `void` `h`(`io.reactivex.internal.operators.flowable.FlowableJoin$a` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L41974c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L419750.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L419756.  v0:= temp @kind object;
  #L419758.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L41975c.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L419762.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableJoin$a.f` @type ^`java.util.Map` @kind object;
  #L419766.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L41976c.  call `onError`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L419772.  return @kind void;
}
procedure `void` `i`(`io.reactivex.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object, `org.reactivestreams.Subscriber` v3 @kind object, `io.reactivex.internal.fuseable.SimpleQueue` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)V` @AccessFlag  {
    temp;
    v0;

  #L419784.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41978a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41978e.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L419794.  call `clear`(v4) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L41979a.  call `f`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.f:()V` @kind virtual;
  #L4197a0.  call `h`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4197a6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4198f0.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4198f6.  v0:= temp;
  #L4198f8.  if v0 == 0 then goto L419906;
  #L4198fc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L419900.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L419906.  return @kind void;
}
