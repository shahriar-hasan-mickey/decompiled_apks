record `io.reactivex.internal.operators.flowable.FlowableSampleTimed$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableSampleTimed$c` @kind class {
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSampleTimed$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$b;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4207c0.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L4207c6.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$b;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4207d8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4207dc.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4207e2.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$b` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$b;.run:()V` @AccessFlag PUBLIC {
    temp;

  #L4207f4.  call `c`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.c:()V` @kind virtual;
  #L4207fa.  return @kind void;
}
