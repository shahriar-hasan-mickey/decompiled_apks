record `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.d` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.e` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.f` @AccessFlag ;
  `io.reactivex.internal.subscriptions.FullArbiter` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.g` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.h` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.i` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.j` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler$Worker` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$b;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L425088.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42508e.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L425092.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L425098.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L42509c.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4250a0.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.b` @type ^`long` := v3 @kind wide;
  #L4250a4.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.c` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L4250a8.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.d` @type ^`io.reactivex.Scheduler$Worker` := v6 @kind object;
  #L4250ac.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.e` @type ^`org.reactivestreams.Publisher` := v7 @kind object;
  #L4250b0.  v3:= new `io.reactivex.internal.subscriptions.FullArbiter`;
  #L4250b4.  v4:= 8I;
  #L4250b8.  call `<init>`(v3, v2, v1, v4) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/disposables/Disposable;I)V` @kind direct;
  #L4250be.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.g` @type ^`io.reactivex.internal.subscriptions.FullArbiter` := v3 @kind object;
  #L4250c2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$b;.a:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L42520c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L425210.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L425216.  v0:= temp @kind object;
  #L425218.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L42521c.  if v0 == 0 then goto L425226;
  #L425220.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L425226.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42522a.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableTimeoutTimed.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42522e.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L425234.  v0:= temp;
  #L425236.  if v0 == 0 then goto L425262;
  #L42523a.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L42523e.  v1:= new `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b$a`;
  #L425242.  call `<init>`(v1, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$b$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$b;J)V` @kind direct;
  #L425248.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.b` @type ^`long` @kind wide;
  #L42524c.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L425250.  call temp:= `schedule`(v0, v1, v4, v2) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L425256.  v4:= temp @kind object;
  #L425258.  v5:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42525c.  call temp:= `replace`(v5, v4) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L425262.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L425274.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.e` @type ^`org.reactivestreams.Publisher` @kind object;
  #L425278.  v1:= new `io.reactivex.internal.subscribers.FullArbiterSubscriber`;
  #L42527c.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.g` @type ^`io.reactivex.internal.subscriptions.FullArbiter` @kind object;
  #L425280.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/subscribers/FullArbiterSubscriber;.<init>:(Lio/reactivex/internal/subscriptions/FullArbiter;)V` @kind direct;
  #L425286.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L42528c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4250d4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4250d8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4250de.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4250e2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4250e8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L425068.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L42506c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L425072.  v0:= temp;
  #L425074.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4250fc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.j` @type ^`boolean` @kind boolean;
  #L425100.  if v0 == 0 then goto L425106;
  #L425104.  return @kind void;
  #L425106.  v0:= 1I;
  #L425108.  v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.j` @type ^`boolean` := v0 @kind boolean;
  #L42510c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.g` @type ^`io.reactivex.internal.subscriptions.FullArbiter` @kind object;
  #L425110.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L425114.  call `onComplete`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.onComplete:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L42511a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L42511e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L425124.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L425138.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.j` @type ^`boolean` @kind boolean;
  #L42513c.  if v0 == 0 then goto L425148;
  #L425140.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L425146.  return @kind void;
  #L425148.  v0:= 1I;
  #L42514a.  v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.j` @type ^`boolean` := v0 @kind boolean;
  #L42514e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.g` @type ^`io.reactivex.internal.subscriptions.FullArbiter` @kind object;
  #L425152.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L425156.  call `onError`(v0, v3, v1) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.onError:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L42515c.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L425160.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L425166.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L425178.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.j` @type ^`boolean` @kind boolean;
  #L42517c.  if v0 == 0 then goto L425182;
  #L425180.  return @kind void;
  #L425182.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.i` @type ^`long` @kind wide;
  #L425186.  v2:= 1L;
  #L42518a.  v0:= v0 + v2 @kind long;
  #L42518c.  v4.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.i` @type ^`long` := v0 @kind wide;
  #L425190.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.g` @type ^`io.reactivex.internal.subscriptions.FullArbiter` @kind object;
  #L425194.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L425198.  call temp:= `onNext`(v2, v5, v3) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.onNext:(Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z` @kind virtual;
  #L42519e.  v5:= temp;
  #L4251a0.  if v5 == 0 then goto L4251aa;
  #L4251a4.  call `a`(v4, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$b;.a:(J)V` @kind virtual;
  #L4251aa.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4251bc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4251c0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4251c6.  v0:= temp;
  #L4251c8.  if v0 == 0 then goto L4251f8;
  #L4251cc.  v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.f` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4251d0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.g` @type ^`io.reactivex.internal.subscriptions.FullArbiter` @kind object;
  #L4251d4.  call temp:= `setSubscription`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/FullArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)Z` @kind virtual;
  #L4251da.  v3:= temp;
  #L4251dc.  if v3 == 0 then goto L4251f8;
  #L4251e0.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4251e4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$b.g` @type ^`io.reactivex.internal.subscriptions.FullArbiter` @kind object;
  #L4251e8.  call `onSubscribe`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4251ee.  v0:= 0L;
  #L4251f2.  call `a`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$b;.a:(J)V` @kind virtual;
  #L4251f8.  return @kind void;
}
