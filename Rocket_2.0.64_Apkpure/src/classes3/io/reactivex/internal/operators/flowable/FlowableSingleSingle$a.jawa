record `io.reactivex.internal.operators.flowable.FlowableSingleSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.a` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.d` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle$a;.<init>:(Lio/reactivex/SingleObserver;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L421f98.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L421f9e.  v0.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L421fa2.  v0.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.b` @type ^`java.lang.Object` := v2 @kind object;
  #L421fa6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L421fb8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L421fbc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L421fc2.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L421fc6.  v1.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L421fca.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L421f74.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L421f78.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L421f7c.  if v0 != v1 then goto L421f84;
  #L421f80.  v0:= 1I;
  #L421f82.  goto L421f86;
  #L421f84.  v0:= 0I;
  #L421f86.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L421fdc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.d` @type ^`boolean` @kind boolean;
  #L421fe0.  if v0 == 0 then goto L421fe6;
  #L421fe4.  return @kind void;
  #L421fe6.  v0:= 1I;
  #L421fe8.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.d` @type ^`boolean` := v0 @kind boolean;
  #L421fec.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L421ff0.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L421ff4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.e` @type ^`java.lang.Object` @kind object;
  #L421ff8.  v1:= 0I;
  #L421ffa.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.e` @type ^`java.lang.Object` := v1 @kind object;
  #L421ffe.  if v0 != 0 then goto L422006;
  #L422002.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.b` @type ^`java.lang.Object` @kind object;
  #L422006.  if v0 == 0 then goto L422016;
  #L42200a.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42200e.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L422014.  goto L42202a;
  #L422016.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42201a.  v1:= new `java.util.NoSuchElementException`;
  #L42201e.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L422024.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42202a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42203c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.d` @type ^`boolean` @kind boolean;
  #L422040.  if v0 == 0 then goto L42204c;
  #L422044.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42204a.  return @kind void;
  #L42204c.  v0:= 1I;
  #L42204e.  v1.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.d` @type ^`boolean` := v0 @kind boolean;
  #L422052.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L422056.  v1.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L42205a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42205e.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L422064.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L422078.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.d` @type ^`boolean` @kind boolean;
  #L42207c.  if v0 == 0 then goto L422082;
  #L422080.  return @kind void;
  #L422082.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.e` @type ^`java.lang.Object` @kind object;
  #L422086.  if v0 == 0 then goto L4220bc;
  #L42208a.  v3:= 1I;
  #L42208c.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.d` @type ^`boolean` := v3 @kind boolean;
  #L422090.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L422094.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L42209a.  v3:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L42209e.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4220a2.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4220a6.  v0:= new `java.lang.IllegalArgumentException`;
  #L4220aa.  v1:= "Sequence contains more than one element!" @kind object;
  #L4220ae.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4220b4.  call `onError`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4220ba.  return @kind void;
  #L4220bc.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.e` @type ^`java.lang.Object` := v3 @kind object;
  #L4220c0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4220d4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4220d8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4220de.  v0:= temp;
  #L4220e0.  if v0 == 0 then goto L422102;
  #L4220e4.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4220e8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4220ec.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4220f2.  v0:= 9223372036854775807L;
  #L4220fc.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L422102.  return @kind void;
}
