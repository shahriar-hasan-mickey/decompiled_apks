record `io.reactivex.internal.operators.flowable.FlowableRange$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableRange$a` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableRange$c.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRange$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRange$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$c;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41d3d4.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$a;.<init>:(II)V` @kind direct;
  #L41d3da.  v0.`io.reactivex.internal.operators.flowable.FlowableRange$c.d` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L41d3de.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableRange$c` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$c;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41d3f0.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$a.a` @type ^`int`;
  #L41d3f4.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41d3f8.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$a.b` @type ^`int`;
  #L41d3fc.  if v2 == v0 then goto L41d41e;
  #L41d400.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$a.c` @type ^`boolean` @kind boolean;
  #L41d404.  if v3 == 0 then goto L41d40a;
  #L41d408.  return @kind void;
  #L41d40a.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L41d410.  v3:= temp @kind object;
  #L41d412.  call `onNext`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41d418.  v2:= v2 + 1;
  #L41d41c.  goto L41d3fc;
  #L41d41e.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$a.c` @type ^`boolean` @kind boolean;
  #L41d422.  if v0 == 0 then goto L41d428;
  #L41d426.  return @kind void;
  #L41d428.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41d42e.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableRange$c` v9 @kind this, `long` v10 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$c;.f:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L41d440.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$a.a` @type ^`int`;
  #L41d444.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$a.b` @type ^`int`;
  #L41d448.  v2:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41d44c.  v3:= 0L;
  #L41d450.  v5:= v3 @kind wide;
  #L41d452.  v7:= lcmp(v5, v10);
  #L41d456.  if v7 == 0 then goto L41d482;
  #L41d45a.  if v1 == v0 then goto L41d482;
  #L41d45e.  v7:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$a.c` @type ^`boolean` @kind boolean;
  #L41d462.  if v7 == 0 then goto L41d468;
  #L41d466.  return @kind void;
  #L41d468.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L41d46e.  v7:= temp @kind object;
  #L41d470.  call `onNext`(v2, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41d476.  v7:= 1L;
  #L41d47a.  v5:= v5 + v7 @kind long;
  #L41d47c.  v1:= v1 + 1;
  #L41d480.  goto L41d452;
  #L41d482.  if v1 != v0 then goto L41d496;
  #L41d486.  v10:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$a.c` @type ^`boolean` @kind boolean;
  #L41d48a.  if v10 != 0 then goto L41d494;
  #L41d48e.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41d494.  return @kind void;
  #L41d496.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L41d49c.  v10:= temp @kind wide;
  #L41d49e.  v7:= lcmp(v5, v10);
  #L41d4a2.  if v7 != 0 then goto L41d452;
  #L41d4a6.  v9.`io.reactivex.internal.operators.flowable.FlowableRange$a.b` @type ^`int` := v1;
  #L41d4aa.  v10:= -v5 @kind long;
  #L41d4ac.  call temp:= `addAndGet`(v9, v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L41d4b2.  v10:= temp @kind wide;
  #L41d4b4.  v5:= lcmp(v10, v3);
  #L41d4b8.  if v5 != 0 then goto L41d450;
  #L41d4bc.  return @kind void;
}
