record `io.reactivex.internal.operators.flowable.FlowableReplay$a` @kind class @AccessFlag  extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.internal.operators.flowable.FlowableReplay$g` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableReplay$f` `io.reactivex.internal.operators.flowable.FlowableReplay$a.a` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableReplay$a.b` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableReplay$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableReplay$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41ea30.  call `<init>`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L41ea36.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReplay$f`;
  #L41ea3a.  v1:= 0I;
  #L41ea3c.  v2:= 0L;
  #L41ea40.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L41ea46.  v4.`io.reactivex.internal.operators.flowable.FlowableReplay$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$f` := v0 @kind object;
  #L41ea4a.  call `set`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L41ea50.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableReplay$a` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L41ead8.  call temp:= `error`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L41eade.  v6:= temp @kind object;
  #L41eae0.  call temp:= `e`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L41eae6.  v6:= temp @kind object;
  #L41eae8.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReplay$f`;
  #L41eaec.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$a.c` @type ^`long` @kind wide;
  #L41eaf0.  v3:= 1L;
  #L41eaf4.  v1:= v1 + v3 @kind long;
  #L41eaf6.  v5.`io.reactivex.internal.operators.flowable.FlowableReplay$a.c` @type ^`long` := v1 @kind wide;
  #L41eafa.  call `<init>`(v0, v6, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L41eb00.  call `d`(v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.d:(Lio/reactivex/internal/operators/flowable/FlowableReplay$f;)V` @kind virtual;
  #L41eb06.  call `k`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.k:()V` @kind virtual;
  #L41eb0c.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableReplay$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.b:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L41eb20.  call temp:= `next`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L41eb26.  v6:= temp @kind object;
  #L41eb28.  call temp:= `e`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L41eb2e.  v6:= temp @kind object;
  #L41eb30.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReplay$f`;
  #L41eb34.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$a.c` @type ^`long` @kind wide;
  #L41eb38.  v3:= 1L;
  #L41eb3c.  v1:= v1 + v3 @kind long;
  #L41eb3e.  v5.`io.reactivex.internal.operators.flowable.FlowableReplay$a.c` @type ^`long` := v1 @kind wide;
  #L41eb42.  call `<init>`(v0, v6, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L41eb48.  call `d`(v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.d:(Lio/reactivex/internal/operators/flowable/FlowableReplay$f;)V` @kind virtual;
  #L41eb4e.  call `j`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.j:()V` @kind virtual;
  #L41eb54.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableReplay$a` v13 @kind this, `io.reactivex.internal.operators.flowable.FlowableReplay$d` v14 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.c:(Lio/reactivex/internal/operators/flowable/FlowableReplay$d;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L41ebb8.  @monitorenter v14
  #L41ebba.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableReplay$d.e` @type ^`boolean` @kind boolean;
  #L41ebbe.  v1:= 1I;
  #L41ebc0.  if v0 == 0 then goto L41ebcc;
  #L41ebc4.  v14.`io.reactivex.internal.operators.flowable.FlowableReplay$d.f` @type ^`boolean` := v1 @kind boolean;
  #L41ebc8.  @monitorexit v14
  #L41ebca.  return @kind void;
  #L41ebcc.  v14.`io.reactivex.internal.operators.flowable.FlowableReplay$d.e` @type ^`boolean` := v1 @kind boolean;
  #L41ebd0.  @monitorexit v14
  #L41ebd2.  call temp:= `isDisposed`(v14) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.isDisposed:()Z` @kind virtual;
  #L41ebd8.  v0:= temp;
  #L41ebda.  if v0 == 0 then goto L41ebe0;
  #L41ebde.  return @kind void;
  #L41ebe0.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L41ebe6.  v2:= temp @kind wide;
  #L41ebe8.  v4:= 9223372036854775807L;
  #L41ebf2.  v0:= 0I;
  #L41ebf4.  v6:= lcmp(v2, v4);
  #L41ebf8.  if v6 != 0 then goto L41ec00;
  #L41ebfc.  v4:= 1I;
  #L41ebfe.  goto L41ec02;
  #L41ec00.  v4:= 0I;
  #L41ec02.  call temp:= `a`(v14) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.a:()Ljava/lang/Object;` @kind virtual;
  #L41ec08.  v5:= temp @kind object;
  #L41ec0a.  v5:= (`io.reactivex.internal.operators.flowable.FlowableReplay$f`) v5 @kind object;
  #L41ec0e.  v6:= 0L;
  #L41ec12.  if v5 != 0 then goto L41ec30;
  #L41ec16.  call temp:= `f`(v13) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.f:()Lio/reactivex/internal/operators/flowable/FlowableReplay$f;` @kind virtual;
  #L41ec1c.  v5:= temp @kind object;
  #L41ec1e.  v14.`io.reactivex.internal.operators.flowable.FlowableReplay$d.c` @type ^`java.lang.Object` := v5 @kind object;
  #L41ec22.  v8:= v14.`io.reactivex.internal.operators.flowable.FlowableReplay$d.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L41ec26.  v9:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$f.b` @type ^`long` @kind wide;
  #L41ec2a.  call temp:= `add`(v8, v9) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L41ec30.  v8:= v6 @kind wide;
  #L41ec32.  v10:= lcmp(v2, v6);
  #L41ec36.  if v10 == 0 then goto L41ecbe;
  #L41ec3a.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41ec40.  v10:= temp @kind object;
  #L41ec42.  v10:= (`io.reactivex.internal.operators.flowable.FlowableReplay$f`) v10 @kind object;
  #L41ec46.  if v10 == 0 then goto L41ecbe;
  #L41ec4a.  v5:= v10.`io.reactivex.internal.operators.flowable.FlowableReplay$f.a` @type ^`java.lang.Object` @kind object;
  #L41ec4e.  call temp:= `g`(v13, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L41ec54.  v5:= temp @kind object;
  #L41ec56.  v11:= 0I;
  #L41ec58.  v12:= v14.`io.reactivex.internal.operators.flowable.FlowableReplay$d.b` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41ec5c.  call temp:= `accept`(v5, v12) @signature `Lio/reactivex/internal/util/NotificationLite;.accept:(Ljava/lang/Object;Lorg/reactivestreams/Subscriber;)Z` @kind static;
  #L41ec62.  v12:= temp;
  #L41ec64.  if v12 == 0 then goto L41ec6e;
  #L41ec68.  v14.`io.reactivex.internal.operators.flowable.FlowableReplay$d.c` @type ^`java.lang.Object` := v11 @kind object;
  #L41ec6c.  return @kind void;
  #L41ec6e.  v11:= 1L;
  #L41ec72.  v8:= v8 + v11 @kind long;
  #L41ec74.  v2:= v2 - v11 @kind long;
  #L41ec76.  call temp:= `isDisposed`(v14) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.isDisposed:()Z` @kind virtual;
  #L41ec7c.  v5:= temp;
  #L41ec7e.  if v5 == 0 then goto L41ec84;
  #L41ec82.  return @kind void;
  #L41ec84.  v5:= v10 @kind object;
  #L41ec86.  goto L41ec32;
  #L41ec88.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41ec8a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41ec90.  v14.`io.reactivex.internal.operators.flowable.FlowableReplay$d.c` @type ^`java.lang.Object` := v11 @kind object;
  #L41ec94.  call `dispose`(v14) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.dispose:()V` @kind virtual;
  #L41ec9a.  call temp:= `isError`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L41eca0.  v1:= temp;
  #L41eca2.  if v1 != 0 then goto L41ecbc;
  #L41eca6.  call temp:= `isComplete`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L41ecac.  v1:= temp;
  #L41ecae.  if v1 != 0 then goto L41ecbc;
  #L41ecb2.  v14:= v14.`io.reactivex.internal.operators.flowable.FlowableReplay$d.b` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41ecb6.  call `onError`(v14, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41ecbc.  return @kind void;
  #L41ecbe.  v2:= lcmp(v8, v6);
  #L41ecc2.  if v2 == 0 then goto L41ecd4;
  #L41ecc6.  v14.`io.reactivex.internal.operators.flowable.FlowableReplay$d.c` @type ^`java.lang.Object` := v5 @kind object;
  #L41ecca.  if v4 != 0 then goto L41ecd4;
  #L41ecce.  call temp:= `b`(v14, v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.b:(J)J` @kind virtual;
  #L41ecd4.  @monitorenter v14
  #L41ecd6.  v2:= v14.`io.reactivex.internal.operators.flowable.FlowableReplay$d.f` @type ^`boolean` @kind boolean;
  #L41ecda.  if v2 != 0 then goto L41ece6;
  #L41ecde.  v14.`io.reactivex.internal.operators.flowable.FlowableReplay$d.e` @type ^`boolean` := v0 @kind boolean;
  #L41ece2.  @monitorexit v14
  #L41ece4.  return @kind void;
  #L41ece6.  v14.`io.reactivex.internal.operators.flowable.FlowableReplay$d.f` @type ^`boolean` := v0 @kind boolean;
  #L41ecea.  @monitorexit v14
  #L41ecec.  goto L41ebd2;
  #L41ecf0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41ecf2.  @monitorexit v14
  #L41ecf4.  throw v0;
  #L41ecf6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41ecf8.  @monitorexit v14
  #L41ecfa.  throw v0;
  catch `java.lang.Throwable` @[L41ebba..L41ebd2] goto L41ecf6;
  catch `java.lang.Throwable` @[L41ec58..L41ec6c] goto L41ec88;
  catch `java.lang.Throwable` @[L41ecd6..L41ecf4] goto L41ecf0;
  catch `java.lang.Throwable` @[L41ecf8..L41ecfa] goto L41ecf6;
}
procedure `void` `complete`(`io.reactivex.internal.operators.flowable.FlowableReplay$a` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.complete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L41ea90.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L41ea96.  v0:= temp @kind object;
  #L41ea98.  call temp:= `e`(v6, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L41ea9e.  v0:= temp @kind object;
  #L41eaa0.  v1:= new `io.reactivex.internal.operators.flowable.FlowableReplay$f`;
  #L41eaa4.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableReplay$a.c` @type ^`long` @kind wide;
  #L41eaa8.  v4:= 1L;
  #L41eaac.  v2:= v2 + v4 @kind long;
  #L41eaae.  v6.`io.reactivex.internal.operators.flowable.FlowableReplay$a.c` @type ^`long` := v2 @kind wide;
  #L41eab2.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L41eab8.  call `d`(v6, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.d:(Lio/reactivex/internal/operators/flowable/FlowableReplay$f;)V` @kind virtual;
  #L41eabe.  call `k`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.k:()V` @kind virtual;
  #L41eac4.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowableReplay$a` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableReplay$f` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.d:(Lio/reactivex/internal/operators/flowable/FlowableReplay$f;)V` @AccessFlag FINAL {
    temp;
    v0;

  #L41ea64.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$f` @kind object;
  #L41ea68.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L41ea6e.  v1.`io.reactivex.internal.operators.flowable.FlowableReplay$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$f` := v2 @kind object;
  #L41ea72.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay$a.b` @type ^`int`;
  #L41ea76.  v2:= v2 + 1;
  #L41ea7a.  v1.`io.reactivex.internal.operators.flowable.FlowableReplay$a.b` @type ^`int` := v2;
  #L41ea7e.  return @kind void;
}
procedure `java.lang.Object` `e`(`io.reactivex.internal.operators.flowable.FlowableReplay$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L41ea08.  return v1 @kind object;
}
procedure `io.reactivex.internal.operators.flowable.FlowableReplay$f` `f`(`io.reactivex.internal.operators.flowable.FlowableReplay$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.f:()Lio/reactivex/internal/operators/flowable/FlowableReplay$f;` @AccessFlag  {
    temp;
    v0;

  #L41e9e8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41e9ee.  v0:= temp @kind object;
  #L41e9f0.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$f`) v0 @kind object;
  #L41e9f4.  return v0 @kind object;
}
procedure `java.lang.Object` `g`(`io.reactivex.internal.operators.flowable.FlowableReplay$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L41ea1c.  return v1 @kind object;
}
procedure `void` `h`(`io.reactivex.internal.operators.flowable.FlowableReplay$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.h:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L41eb68.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41eb6e.  v0:= temp @kind object;
  #L41eb70.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$f`) v0 @kind object;
  #L41eb74.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41eb7a.  v0:= temp @kind object;
  #L41eb7c.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$f`) v0 @kind object;
  #L41eb80.  if v0 == 0 then goto L41eb98;
  #L41eb84.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$a.b` @type ^`int`;
  #L41eb88.  v1:= v1 + -1;
  #L41eb8c.  v2.`io.reactivex.internal.operators.flowable.FlowableReplay$a.b` @type ^`int` := v1;
  #L41eb90.  call `i`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.i:(Lio/reactivex/internal/operators/flowable/FlowableReplay$f;)V` @kind virtual;
  #L41eb96.  return @kind void;
  #L41eb98.  v0:= new `java.lang.IllegalStateException`;
  #L41eb9c.  v1:= "Empty list!" @kind object;
  #L41eba0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41eba6.  throw v0;
}
procedure `void` `i`(`io.reactivex.internal.operators.flowable.FlowableReplay$a` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableReplay$f` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.i:(Lio/reactivex/internal/operators/flowable/FlowableReplay$f;)V` @AccessFlag FINAL {
    temp;

  #L41ed38.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L41ed3e.  return @kind void;
}
procedure `void` `j`(`io.reactivex.internal.operators.flowable.FlowableReplay$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.j:()V` @AccessFlag  {
    temp;

  #L41ed50.  v0:= 0I;
  #L41ed52.  throw v0;
}
procedure `void` `k`(`io.reactivex.internal.operators.flowable.FlowableReplay$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.k:()V` @AccessFlag  {
    temp;

  #L41ed64.  return @kind void;
}
