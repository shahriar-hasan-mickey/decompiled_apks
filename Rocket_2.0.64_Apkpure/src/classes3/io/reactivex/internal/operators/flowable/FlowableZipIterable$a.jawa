record `io.reactivex.internal.operators.flowable.FlowableZipIterable$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableZipIterable$a.a` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.internal.operators.flowable.FlowableZipIterable$a.b` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.flowable.FlowableZipIterable$a.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableZipIterable$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableZipIterable$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableZipIterable$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Iterator` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$a;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L429a10.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L429a16.  v0.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L429a1a.  v0.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.b` @type ^`java.util.Iterator` := v2 @kind object;
  #L429a1e.  v0.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.c` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L429a22.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableZipIterable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L429a50.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L429a56.  v0:= 1I;
  #L429a58.  v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L429a5c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L429a60.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L429a66.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L429a6a.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L429a70.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableZipIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L429a34.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L429a38.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L429a3e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableZipIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L429a84.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.e` @type ^`boolean` @kind boolean;
  #L429a88.  if v0 == 0 then goto L429a8e;
  #L429a8c.  return @kind void;
  #L429a8e.  v0:= 1I;
  #L429a90.  v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L429a94.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L429a98.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L429a9e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableZipIterable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L429ab0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.e` @type ^`boolean` @kind boolean;
  #L429ab4.  if v0 == 0 then goto L429ac0;
  #L429ab8.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L429abe.  return @kind void;
  #L429ac0.  v0:= 1I;
  #L429ac2.  v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L429ac6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L429aca.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L429ad0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableZipIterable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L429ae4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.e` @type ^`boolean` @kind boolean;
  #L429ae8.  if v0 == 0 then goto L429aee;
  #L429aec.  return @kind void;
  #L429aee.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.b` @type ^`java.util.Iterator` @kind object;
  #L429af2.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L429af8.  v0:= temp @kind object;
  #L429afa.  v1:= "The iterator returned a null value" @kind object;
  #L429afe.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L429b04.  v0:= temp @kind object;
  #L429b06.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.c` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L429b0a.  call temp:= `apply`(v1, v3, v0) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L429b10.  v3:= temp @kind object;
  #L429b12.  v0:= "The zipper function returned a null value" @kind object;
  #L429b16.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L429b1c.  v3:= temp @kind object;
  #L429b1e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L429b22.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L429b28.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.b` @type ^`java.util.Iterator` @kind object;
  #L429b2c.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L429b32.  v3:= temp;
  #L429b34.  if v3 != 0 then goto L429b52;
  #L429b38.  v3:= 1I;
  #L429b3a.  v2.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.e` @type ^`boolean` := v3 @kind boolean;
  #L429b3e.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L429b42.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L429b48.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L429b4c.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L429b52.  return @kind void;
  #L429b54.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L429b56.  call `a`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$a;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L429b5c.  return @kind void;
  #L429b5e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L429b60.  call `a`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$a;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L429b66.  return @kind void;
  #L429b68.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L429b6a.  call `a`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$a;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L429b70.  return @kind void;
  catch `java.lang.Throwable` @[L429aee..L429b06] goto L429b68;
  catch `java.lang.Throwable` @[L429b06..L429b1e] goto L429b5e;
  catch `java.lang.Throwable` @[L429b28..L429b34] goto L429b54;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableZipIterable$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L429ba4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L429ba8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L429bae.  v0:= temp;
  #L429bb0.  if v0 == 0 then goto L429bc2;
  #L429bb4.  v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.d` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L429bb8.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L429bbc.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L429bc2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableZipIterable$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L429bd4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L429bd8.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L429bde.  return @kind void;
}
