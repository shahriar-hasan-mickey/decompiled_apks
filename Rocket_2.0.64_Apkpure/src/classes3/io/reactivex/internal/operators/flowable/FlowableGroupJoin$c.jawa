record `io.reactivex.internal.operators.flowable.FlowableGroupJoin$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableGroupJoin$b` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$c.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$c.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$c.c` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableGroupJoin$b` v1 @kind object, `boolean` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$c;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$b;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L417fc8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L417fce.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c.a` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupJoin$b` := v1 @kind object;
  #L417fd2.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c.b` @type ^`boolean` := v2 @kind boolean;
  #L417fd6.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c.c` @type ^`int` := v3;
  #L417fda.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L417fec.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L417ff2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L417fa0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L417fa6.  v0:= temp @kind object;
  #L417fa8.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L417fac.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.isCancelled:(Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L417fb2.  v0:= temp;
  #L417fb4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L418004.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c.a` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupJoin$b` @kind object;
  #L418008.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c.b` @type ^`boolean` @kind boolean;
  #L41800c.  call `d`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$b;.d:(ZLio/reactivex/internal/operators/flowable/FlowableGroupJoin$c;)V` @kind interface;
  #L418012.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L418024.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c.a` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupJoin$b` @kind object;
  #L418028.  call `c`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$b;.c:(Ljava/lang/Throwable;)V` @kind interface;
  #L41802e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L418040.  call temp:= `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L418046.  v2:= temp;
  #L418048.  if v2 == 0 then goto L41805a;
  #L41804c.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c.a` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupJoin$b` @kind object;
  #L418050.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c.b` @type ^`boolean` @kind boolean;
  #L418054.  call `d`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$b;.d:(ZLio/reactivex/internal/operators/flowable/FlowableGroupJoin$c;)V` @kind interface;
  #L41805a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41806c.  call temp:= `setOnce`(v2, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L418072.  v0:= temp;
  #L418074.  if v0 == 0 then goto L418088;
  #L418078.  v0:= 9223372036854775807L;
  #L418082.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L418088.  return @kind void;
}
