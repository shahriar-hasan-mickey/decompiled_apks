record `io.reactivex.internal.operators.flowable.FlowableCache$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.util.LinkedArrayList` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `io.reactivex.Flowable` `io.reactivex.internal.operators.flowable.FlowableCache$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableCache$a.g` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableCache$a.h` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCache$a.i` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCache$a.j` @AccessFlag ;
}
global `io.reactivex.internal.operators.flowable.FlowableCache$b`[] `@@io.reactivex.internal.operators.flowable.FlowableCache$a.k` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.flowable.FlowableCache$b`[] `@@io.reactivex.internal.operators.flowable.FlowableCache$a.l` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L40cf5c.  v0:= 0I;
  #L40cf5e.  v1:= new `io.reactivex.internal.operators.flowable.FlowableCache$b`[v0];
  #L40cf62.  `@@io.reactivex.internal.operators.flowable.FlowableCache$a.k` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$b`[] := v1 @kind object;
  #L40cf66.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCache$b`[v0];
  #L40cf6a.  `@@io.reactivex.internal.operators.flowable.FlowableCache$a.l` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$b`[] := v0 @kind object;
  #L40cf6e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCache$a` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$a;.<init>:(Lio/reactivex/Flowable;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40cf80.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/util/LinkedArrayList;.<init>:(I)V` @kind direct;
  #L40cf86.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L40cf8a.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L40cf90.  v0.`io.reactivex.internal.operators.flowable.FlowableCache$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L40cf94.  v0.`io.reactivex.internal.operators.flowable.FlowableCache$a.f` @type ^`io.reactivex.Flowable` := v1 @kind object;
  #L40cf98.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L40cf9c.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableCache$a.k` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$b`[] @kind object;
  #L40cfa0.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L40cfa6.  v0.`io.reactivex.internal.operators.flowable.FlowableCache$a.h` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L40cfaa.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableCache$a` v4 @kind this, `io.reactivex.internal.operators.flowable.FlowableCache$b` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$a;.a:(Lio/reactivex/internal/operators/flowable/FlowableCache$b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40cfbc.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableCache$a.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40cfc0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L40cfc6.  v0:= temp @kind object;
  #L40cfc8.  v0:= (`io.reactivex.internal.operators.flowable.FlowableCache$b`[]) v0 @kind object;
  #L40cfcc.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableCache$a.l` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$b`[] @kind object;
  #L40cfd0.  if v0 != v1 then goto L40cfd6;
  #L40cfd4.  return @kind void;
  #L40cfd6.  v1:= length @variable v0;
  #L40cfd8.  v2:= v1 + 1;
  #L40cfdc.  v2:= new `io.reactivex.internal.operators.flowable.FlowableCache$b`[v2];
  #L40cfe0.  v3:= 0I;
  #L40cfe2.  call `arraycopy`(v0, v3, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L40cfe8.  v2[v1]:= v5 @kind object;
  #L40cfec.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableCache$a.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40cff0.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L40cff6.  v0:= temp;
  #L40cff8.  if v0 == 0 then goto L40cfbc;
  #L40cffc.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableCache$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$a;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40d010.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCache$a.f` @type ^`io.reactivex.Flowable` @kind object;
  #L40d014.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L40d01a.  v0:= 1I;
  #L40d01c.  v1.`io.reactivex.internal.operators.flowable.FlowableCache$a.i` @type ^`boolean` := v0 @kind boolean;
  #L40d020.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableCache$a` v6 @kind this, `io.reactivex.internal.operators.flowable.FlowableCache$b` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$a;.c:(Lio/reactivex/internal/operators/flowable/FlowableCache$b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L40d188.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableCache$a.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40d18c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L40d192.  v0:= temp @kind object;
  #L40d194.  v0:= (`io.reactivex.internal.operators.flowable.FlowableCache$b`[]) v0 @kind object;
  #L40d198.  v1:= length @variable v0;
  #L40d19a.  if v1 != 0 then goto L40d1a0;
  #L40d19e.  return @kind void;
  #L40d1a0.  v2:= -1I;
  #L40d1a2.  v3:= 0I;
  #L40d1a4.  v4:= 0I;
  #L40d1a6.  if v4 >= v1 then goto L40d1c4;
  #L40d1aa.  v5:= v0[v4] @kind object;
  #L40d1ae.  call temp:= `equals`(v5, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L40d1b4.  v5:= temp;
  #L40d1b6.  if v5 == 0 then goto L40d1be;
  #L40d1ba.  v2:= v4;
  #L40d1bc.  goto L40d1c4;
  #L40d1be.  v4:= v4 + 1;
  #L40d1c2.  goto L40d1a6;
  #L40d1c4.  if v2 >= 0 then goto L40d1ca;
  #L40d1c8.  return @kind void;
  #L40d1ca.  v4:= 1I;
  #L40d1cc.  if v1 != v4 then goto L40d1d6;
  #L40d1d0.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableCache$a.k` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$b`[] @kind object;
  #L40d1d4.  goto L40d1f4;
  #L40d1d6.  v5:= v1 + -1;
  #L40d1da.  v5:= new `io.reactivex.internal.operators.flowable.FlowableCache$b`[v5];
  #L40d1de.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L40d1e4.  v3:= v2 + 1;
  #L40d1e8.  v1:= v1 - v2 @kind int;
  #L40d1ea.  v1:= v1 - v4 @kind int;
  #L40d1ec.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L40d1f2.  v1:= v5 @kind object;
  #L40d1f4.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableCache$a.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40d1f8.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L40d1fe.  v0:= temp;
  #L40d200.  if v0 == 0 then goto L40d188;
  #L40d204.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCache$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40d034.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableCache$a.j` @type ^`boolean` @kind boolean;
  #L40d038.  if v0 != 0 then goto L40d086;
  #L40d03c.  v0:= 1I;
  #L40d03e.  v4.`io.reactivex.internal.operators.flowable.FlowableCache$a.j` @type ^`boolean` := v0 @kind boolean;
  #L40d042.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L40d048.  v0:= temp @kind object;
  #L40d04a.  call `add`(v4, v0) @signature `Lio/reactivex/internal/util/LinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L40d050.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableCache$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40d054.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40d05a.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableCache$a.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40d05e.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableCache$a.l` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$b`[] @kind object;
  #L40d062.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L40d068.  v0:= temp @kind object;
  #L40d06a.  v0:= (`io.reactivex.internal.operators.flowable.FlowableCache$b`[]) v0 @kind object;
  #L40d06e.  v1:= length @variable v0;
  #L40d070.  v2:= 0I;
  #L40d072.  if v2 >= v1 then goto L40d086;
  #L40d076.  v3:= v0[v2] @kind object;
  #L40d07a.  call `a`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$b;.a:()V` @kind virtual;
  #L40d080.  v2:= v2 + 1;
  #L40d084.  goto L40d072;
  #L40d086.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableCache$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40d098.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableCache$a.j` @type ^`boolean` @kind boolean;
  #L40d09c.  if v0 != 0 then goto L40d0ea;
  #L40d0a0.  v0:= 1I;
  #L40d0a2.  v3.`io.reactivex.internal.operators.flowable.FlowableCache$a.j` @type ^`boolean` := v0 @kind boolean;
  #L40d0a6.  call temp:= `error`(v4) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L40d0ac.  v4:= temp @kind object;
  #L40d0ae.  call `add`(v3, v4) @signature `Lio/reactivex/internal/util/LinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L40d0b4.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableCache$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40d0b8.  call temp:= `cancel`(v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40d0be.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableCache$a.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40d0c2.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableCache$a.l` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$b`[] @kind object;
  #L40d0c6.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L40d0cc.  v4:= temp @kind object;
  #L40d0ce.  v4:= (`io.reactivex.internal.operators.flowable.FlowableCache$b`[]) v4 @kind object;
  #L40d0d2.  v0:= length @variable v4;
  #L40d0d4.  v1:= 0I;
  #L40d0d6.  if v1 >= v0 then goto L40d0f0;
  #L40d0da.  v2:= v4[v1] @kind object;
  #L40d0de.  call `a`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$b;.a:()V` @kind virtual;
  #L40d0e4.  v1:= v1 + 1;
  #L40d0e8.  goto L40d0d6;
  #L40d0ea.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40d0f0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCache$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40d104.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableCache$a.j` @type ^`boolean` @kind boolean;
  #L40d108.  if v0 != 0 then goto L40d142;
  #L40d10c.  call temp:= `next`(v4) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L40d112.  v4:= temp @kind object;
  #L40d114.  call `add`(v3, v4) @signature `Lio/reactivex/internal/util/LinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L40d11a.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableCache$a.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40d11e.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L40d124.  v4:= temp @kind object;
  #L40d126.  v4:= (`io.reactivex.internal.operators.flowable.FlowableCache$b`[]) v4 @kind object;
  #L40d12a.  v0:= length @variable v4;
  #L40d12c.  v1:= 0I;
  #L40d12e.  if v1 >= v0 then goto L40d142;
  #L40d132.  v2:= v4[v1] @kind object;
  #L40d136.  call `a`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$b;.a:()V` @kind virtual;
  #L40d13c.  v1:= v1 + 1;
  #L40d140.  goto L40d12e;
  #L40d142.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableCache$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40d154.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCache$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40d158.  call temp:= `setOnce`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40d15e.  v0:= temp;
  #L40d160.  if v0 == 0 then goto L40d174;
  #L40d164.  v0:= 9223372036854775807L;
  #L40d16e.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40d174.  return @kind void;
}
