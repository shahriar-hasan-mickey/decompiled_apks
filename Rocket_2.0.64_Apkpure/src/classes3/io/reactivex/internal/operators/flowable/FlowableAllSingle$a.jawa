record `io.reactivex.internal.operators.flowable.FlowableAllSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.flowable.FlowableAllSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.flowable.FlowableAllSingle$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableAllSingle$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableAllSingle$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableAllSingle$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle$a;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40a01c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40a022.  v0.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L40a026.  v0.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.b` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L40a02a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableAllSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40a03c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40a040.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40a046.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L40a04a.  v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L40a04e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableAllSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L409ff8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L409ffc.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L40a000.  if v0 != v1 then goto L40a008;
  #L40a004.  v0:= 1I;
  #L40a006.  goto L40a00a;
  #L40a008.  v0:= 0I;
  #L40a00a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableAllSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40a060.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.d` @type ^`boolean` @kind boolean;
  #L40a064.  if v0 == 0 then goto L40a06a;
  #L40a068.  return @kind void;
  #L40a06a.  v0:= 1I;
  #L40a06c.  v2.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.d` @type ^`boolean` := v0 @kind boolean;
  #L40a070.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L40a074.  v2.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L40a078.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L40a07c.  v1:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L40a080.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L40a086.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableAllSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40a098.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.d` @type ^`boolean` @kind boolean;
  #L40a09c.  if v0 == 0 then goto L40a0a8;
  #L40a0a0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40a0a6.  return @kind void;
  #L40a0a8.  v0:= 1I;
  #L40a0aa.  v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.d` @type ^`boolean` := v0 @kind boolean;
  #L40a0ae.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L40a0b2.  v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L40a0b6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L40a0ba.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40a0c0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableAllSingle$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40a0d4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.d` @type ^`boolean` @kind boolean;
  #L40a0d8.  if v0 == 0 then goto L40a0de;
  #L40a0dc.  return @kind void;
  #L40a0de.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.b` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L40a0e2.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L40a0e8.  v2:= temp;
  #L40a0ea.  if v2 != 0 then goto L40a114;
  #L40a0ee.  v2:= 1I;
  #L40a0f0.  v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.d` @type ^`boolean` := v2 @kind boolean;
  #L40a0f4.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40a0f8.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40a0fe.  v2:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L40a102.  v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L40a106.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L40a10a.  v0:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L40a10e.  call `onSuccess`(v2, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L40a114.  return @kind void;
  #L40a116.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40a118.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40a11e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40a122.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40a128.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L40a12c.  v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L40a130.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40a136.  return @kind void;
  catch `java.lang.Throwable` @[L40a0de..L40a0ea] goto L40a116;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableAllSingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40a154.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40a158.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40a15e.  v0:= temp;
  #L40a160.  if v0 == 0 then goto L40a182;
  #L40a164.  v2.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L40a168.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L40a16c.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L40a172.  v0:= 9223372036854775807L;
  #L40a17c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40a182.  return @kind void;
}
