record `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c.c` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$c;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L429174.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42917a.  v0.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c.a` @type ^`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` := v1 @kind object;
  #L42917e.  v0.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c.b` @type ^`int` := v2;
  #L429182.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L429194.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42919a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42914c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L429152.  v0:= temp @kind object;
  #L429154.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L429158.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.isCancelled:(Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L42915e.  v0:= temp;
  #L429160.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4291ac.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c.a` @type ^`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` @kind object;
  #L4291b0.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c.b` @type ^`int`;
  #L4291b4.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c.c` @type ^`boolean` @kind boolean;
  #L4291b8.  call `b`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.b:(IZ)V` @kind virtual;
  #L4291be.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4291d0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c.a` @type ^`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` @kind object;
  #L4291d4.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c.b` @type ^`int`;
  #L4291d8.  call `c`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.c:(ILjava/lang/Throwable;)V` @kind virtual;
  #L4291de.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4291f0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c.c` @type ^`boolean` @kind boolean;
  #L4291f4.  if v0 != 0 then goto L4291fe;
  #L4291f8.  v0:= 1I;
  #L4291fa.  v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c.c` @type ^`boolean` := v0 @kind boolean;
  #L4291fe.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c.a` @type ^`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` @kind object;
  #L429202.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c.b` @type ^`int`;
  #L429206.  call `d`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.d:(ILjava/lang/Object;)V` @kind virtual;
  #L42920c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L429220.  call temp:= `setOnce`(v2, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L429226.  v0:= temp;
  #L429228.  if v0 == 0 then goto L42923c;
  #L42922c.  v0:= 9223372036854775807L;
  #L429236.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L42923c.  return @kind void;
}
