record `io.reactivex.internal.operators.flowable.FlowableAny$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.flowable.FlowableAny$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableAny$a.b` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableAny$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableAny$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableAny$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAny$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40a6a4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L40a6aa.  v0.`io.reactivex.internal.operators.flowable.FlowableAny$a.a` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L40a6ae.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableAny$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAny$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40a6c0.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @kind super;
  #L40a6c6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAny$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40a6ca.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40a6d0.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableAny$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAny$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40a6e4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAny$a.c` @type ^`boolean` @kind boolean;
  #L40a6e8.  if v0 != 0 then goto L40a6fc;
  #L40a6ec.  v0:= 1I;
  #L40a6ee.  v1.`io.reactivex.internal.operators.flowable.FlowableAny$a.c` @type ^`boolean` := v0 @kind boolean;
  #L40a6f2.  v0:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L40a6f6.  call `complete`(v1, v0) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L40a6fc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableAny$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAny$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40a710.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAny$a.c` @type ^`boolean` @kind boolean;
  #L40a714.  if v0 == 0 then goto L40a720;
  #L40a718.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40a71e.  return @kind void;
  #L40a720.  v0:= 1I;
  #L40a722.  v1.`io.reactivex.internal.operators.flowable.FlowableAny$a.c` @type ^`boolean` := v0 @kind boolean;
  #L40a726.  v0:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40a72a.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40a730.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableAny$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAny$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40a744.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAny$a.c` @type ^`boolean` @kind boolean;
  #L40a748.  if v0 == 0 then goto L40a74e;
  #L40a74c.  return @kind void;
  #L40a74e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAny$a.a` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L40a752.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L40a758.  v2:= temp;
  #L40a75a.  if v2 == 0 then goto L40a778;
  #L40a75e.  v2:= 1I;
  #L40a760.  v1.`io.reactivex.internal.operators.flowable.FlowableAny$a.c` @type ^`boolean` := v2 @kind boolean;
  #L40a764.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableAny$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40a768.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40a76e.  v2:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L40a772.  call `complete`(v1, v2) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L40a778.  return @kind void;
  #L40a77a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40a77c.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40a782.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAny$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40a786.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40a78c.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableAny$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40a792.  return @kind void;
  catch `java.lang.Throwable` @[L40a74e..L40a75a] goto L40a77a;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableAny$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAny$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40a7b0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAny$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40a7b4.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40a7ba.  v0:= temp;
  #L40a7bc.  if v0 == 0 then goto L40a7de;
  #L40a7c0.  v2.`io.reactivex.internal.operators.flowable.FlowableAny$a.b` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L40a7c4.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40a7c8.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40a7ce.  v0:= 9223372036854775807L;
  #L40a7d8.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40a7de.  return @kind void;
}
