record `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.CompletableObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a$a.a` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a$a` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L413e28.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` := v1 @kind object;
  #L413e2c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L413e32.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L413e44.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L413e4a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L413e00.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L413e06.  v0:= temp @kind object;
  #L413e08.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L413e0c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L413e12.  v0:= temp;
  #L413e14.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L413e5c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` @kind object;
  #L413e60.  call `e`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.e:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a$a;)V` @kind virtual;
  #L413e66.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L413e78.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` @kind object;
  #L413e7c.  call `f`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.f:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a$a;Ljava/lang/Throwable;)V` @kind virtual;
  #L413e82.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L413e94.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L413e9a.  return @kind void;
}
