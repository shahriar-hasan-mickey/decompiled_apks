record `io.reactivex.internal.operators.flowable.FlowableReplay$d` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableReplay$j` `io.reactivex.internal.operators.flowable.FlowableReplay$d.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableReplay$d.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableReplay$d.c` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableReplay$d.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableReplay$d.e` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableReplay$d.f` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableReplay$d.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$d` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableReplay$j` v1 @kind object, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableReplay$j;Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41ee68.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L41ee6e.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$d.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$j` := v1 @kind object;
  #L41ee72.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$d.b` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L41ee76.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L41ee7a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L41ee80.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$d.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L41ee84.  return @kind void;
}
procedure `java.lang.Object` `a`(`io.reactivex.internal.operators.flowable.FlowableReplay$d` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.a:()Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;

  #L41ee34.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay$d.c` @type ^`java.lang.Object` @kind object;
  #L41ee38.  return v0 @kind object;
}
procedure `long` `b`(`io.reactivex.internal.operators.flowable.FlowableReplay$d` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.b:(J)J` @AccessFlag PUBLIC {
    temp;

  #L41ee4c.  call temp:= `producedCancel`(v0, v1) @signature `Lio/reactivex/internal/util/BackpressureHelper;.producedCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L41ee52.  v1:= temp @kind wide;
  #L41ee54.  return v1 @kind wide;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableReplay$d` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L41ee98.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.dispose:()V` @kind virtual;
  #L41ee9e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableReplay$d` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L41eeb0.  v0:= -9223372036854775808L;
  #L41eeb4.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L41eeba.  v2:= temp @kind wide;
  #L41eebc.  v4:= lcmp(v2, v0);
  #L41eec0.  if v4 == 0 then goto L41eed8;
  #L41eec4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$d.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$j` @kind object;
  #L41eec8.  call `c`(v0, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.c:(Lio/reactivex/internal/operators/flowable/FlowableReplay$d;)V` @kind virtual;
  #L41eece.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$d.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$j` @kind object;
  #L41eed2.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.b:()V` @kind virtual;
  #L41eed8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableReplay$d` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L41ee08.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L41ee0e.  v0:= temp @kind wide;
  #L41ee10.  v2:= -9223372036854775808L;
  #L41ee14.  v4:= lcmp(v0, v2);
  #L41ee18.  if v4 != 0 then goto L41ee20;
  #L41ee1c.  v0:= 1I;
  #L41ee1e.  goto L41ee22;
  #L41ee20.  v0:= 0I;
  #L41ee22.  return v0;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableReplay$d` v5 @kind this, `long` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L41eeec.  call temp:= `validate`(v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L41eef2.  v0:= temp;
  #L41eef4.  if v0 == 0 then goto L41ef5a;
  #L41eef8.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L41eefe.  v0:= temp @kind wide;
  #L41ef00.  v2:= -9223372036854775808L;
  #L41ef04.  v4:= lcmp(v0, v2);
  #L41ef08.  if v4 != 0 then goto L41ef0e;
  #L41ef0c.  return @kind void;
  #L41ef0e.  v2:= 0L;
  #L41ef12.  v4:= lcmp(v0, v2);
  #L41ef16.  if v4 < 0 then goto L41ef24;
  #L41ef1a.  v4:= lcmp(v6, v2);
  #L41ef1e.  if v4 != 0 then goto L41ef24;
  #L41ef22.  return @kind void;
  #L41ef24.  call temp:= `addCap`(v0, v6) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L41ef2a.  v2:= temp @kind wide;
  #L41ef2c.  call temp:= `compareAndSet`(v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L41ef32.  v0:= temp;
  #L41ef34.  if v0 == 0 then goto L41eef8;
  #L41ef38.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$d.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L41ef3c.  call temp:= `add`(v0, v6) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L41ef42.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$d.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$j` @kind object;
  #L41ef46.  call `b`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.b:()V` @kind virtual;
  #L41ef4c.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$d.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$j` @kind object;
  #L41ef50.  v6:= v6.`io.reactivex.internal.operators.flowable.FlowableReplay$j.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$g` @kind object;
  #L41ef54.  call `c`(v6, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$g;.c:(Lio/reactivex/internal/operators/flowable/FlowableReplay$d;)V` @kind interface;
  #L41ef5a.  return @kind void;
}
