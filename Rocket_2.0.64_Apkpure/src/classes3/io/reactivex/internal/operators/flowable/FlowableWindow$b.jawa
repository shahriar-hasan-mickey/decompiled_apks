record `io.reactivex.internal.operators.flowable.FlowableWindow$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableWindow$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.flowable.FlowableWindow$b.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$b.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$b.d` @AccessFlag FINAL;
  `java.util.ArrayDeque` `io.reactivex.internal.operators.flowable.FlowableWindow$b.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableWindow$b.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableWindow$b.g` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableWindow$b.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableWindow$b.i` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableWindow$b.j` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$b.k` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$b.l` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableWindow$b.m` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindow$b.n` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableWindow$b.o` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindow$b.p` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableWindow$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindow$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `long` v5 , `int` v7 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.<init>:(Lorg/reactivestreams/Subscriber;JJI)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4261c0.  v0:= 1I;
  #L4261c2.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4261c8.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$b.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4261cc.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$b.c` @type ^`long` := v3 @kind wide;
  #L4261d0.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$b.d` @type ^`long` := v5 @kind wide;
  #L4261d4.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L4261d8.  call `<init>`(v2, v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4261de.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L4261e2.  v2:= new `java.util.ArrayDeque`;
  #L4261e6.  call `<init>`(v2) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L4261ec.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` := v2 @kind object;
  #L4261f0.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4261f4.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4261fa.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L4261fe.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L426202.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L426208.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L42620c.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L426210.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L426216.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$b.h` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L42621a.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L42621e.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L426224.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$b.i` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L426228.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$b.j` @type ^`int` := v7;
  #L42622c.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.flowable.FlowableWindow$b` v2 @kind this, `boolean` v3 , `boolean` v4 , `org.reactivestreams.Subscriber` v5 @kind object, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.a:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L426174.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$b.p` @type ^`boolean` @kind boolean;
  #L426178.  v1:= 1I;
  #L42617a.  if v0 == 0 then goto L426186;
  #L42617e.  call `clear`(v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L426184.  return v1;
  #L426186.  if v3 == 0 then goto L4261ac;
  #L42618a.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$b.o` @type ^`java.lang.Throwable` @kind object;
  #L42618e.  if v3 == 0 then goto L4261a0;
  #L426192.  call `clear`(v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L426198.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42619e.  return v1;
  #L4261a0.  if v4 == 0 then goto L4261ac;
  #L4261a4.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4261aa.  return v1;
  #L4261ac.  v3:= 0I;
  #L4261ae.  return v3;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableWindow$b` v14 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L426270.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableWindow$b.i` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L426274.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L42627a.  v0:= temp;
  #L42627c.  if v0 == 0 then goto L426282;
  #L426280.  return @kind void;
  #L426282.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableWindow$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L426286.  v1:= v14.`io.reactivex.internal.operators.flowable.FlowableWindow$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L42628a.  v2:= 1I;
  #L42628c.  v3:= 1I;
  #L42628e.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableWindow$b.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L426292.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L426298.  v4:= temp @kind wide;
  #L42629a.  v6:= 0L;
  #L42629e.  v8:= v6 @kind wide;
  #L4262a0.  v10:= lcmp(v8, v4);
  #L4262a4.  if v10 == 0 then goto L4262e4;
  #L4262a8.  v11:= v14.`io.reactivex.internal.operators.flowable.FlowableWindow$b.n` @type ^`boolean` @kind boolean;
  #L4262ac.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4262b2.  v12:= temp @kind object;
  #L4262b4.  v12:= (`io.reactivex.processors.UnicastProcessor`) v12 @kind object;
  #L4262b8.  if v12 != 0 then goto L4262c0;
  #L4262bc.  v13:= 1I;
  #L4262be.  goto L4262c2;
  #L4262c0.  v13:= 0I;
  #L4262c2.  call temp:= `a`(v14, v11, v13, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.a:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L4262c8.  v11:= temp;
  #L4262ca.  if v11 == 0 then goto L4262d0;
  #L4262ce.  return @kind void;
  #L4262d0.  if v13 == 0 then goto L4262d6;
  #L4262d4.  goto L4262e4;
  #L4262d6.  call `onNext`(v0, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4262dc.  v10:= 1L;
  #L4262e0.  v8:= v8 + v10 @kind long;
  #L4262e2.  goto L4262a0;
  #L4262e4.  if v10 != 0 then goto L426302;
  #L4262e8.  v10:= v14.`io.reactivex.internal.operators.flowable.FlowableWindow$b.n` @type ^`boolean` @kind boolean;
  #L4262ec.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4262f2.  v11:= temp;
  #L4262f4.  call temp:= `a`(v14, v10, v11, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.a:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L4262fa.  v10:= temp;
  #L4262fc.  if v10 == 0 then goto L426302;
  #L426300.  return @kind void;
  #L426302.  v10:= lcmp(v8, v6);
  #L426306.  if v10 == 0 then goto L426328;
  #L42630a.  v6:= 9223372036854775807L;
  #L426314.  v10:= lcmp(v4, v6);
  #L426318.  if v10 == 0 then goto L426328;
  #L42631c.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableWindow$b.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L426320.  v5:= -v8 @kind long;
  #L426322.  call temp:= `addAndGet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L426328.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableWindow$b.i` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L42632c.  v3:= -v3 @kind int;
  #L42632e.  call temp:= `addAndGet`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L426334.  v3:= temp;
  #L426336.  if v3 != 0 then goto L42628e;
  #L42633a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWindow$b` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L426240.  v0:= 1I;
  #L426242.  v3.`io.reactivex.internal.operators.flowable.FlowableWindow$b.p` @type ^`boolean` := v0 @kind boolean;
  #L426246.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableWindow$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L42624a.  v2:= 0I;
  #L42624c.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L426252.  v0:= temp;
  #L426254.  if v0 == 0 then goto L42625e;
  #L426258.  call `run`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.run:()V` @kind virtual;
  #L42625e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindow$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42634c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$b.n` @type ^`boolean` @kind boolean;
  #L426350.  if v0 == 0 then goto L426356;
  #L426354.  return @kind void;
  #L426356.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L42635a.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L426360.  v0:= temp @kind object;
  #L426362.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L426368.  v1:= temp;
  #L42636a.  if v1 == 0 then goto L426382;
  #L42636e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L426374.  v1:= temp @kind object;
  #L426376.  v1:= (`org.reactivestreams.Processor`) v1 @kind object;
  #L42637a.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L426380.  goto L426362;
  #L426382.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L426386.  call `clear`(v0) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L42638c.  v0:= 1I;
  #L42638e.  v2.`io.reactivex.internal.operators.flowable.FlowableWindow$b.n` @type ^`boolean` := v0 @kind boolean;
  #L426392.  call `b`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.b:()V` @kind virtual;
  #L426398.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindow$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4263ac.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$b.n` @type ^`boolean` @kind boolean;
  #L4263b0.  if v0 == 0 then goto L4263bc;
  #L4263b4.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4263ba.  return @kind void;
  #L4263bc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L4263c0.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L4263c6.  v0:= temp @kind object;
  #L4263c8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4263ce.  v1:= temp;
  #L4263d0.  if v1 == 0 then goto L4263e8;
  #L4263d4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4263da.  v1:= temp @kind object;
  #L4263dc.  v1:= (`org.reactivestreams.Processor`) v1 @kind object;
  #L4263e0.  call `onError`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4263e6.  goto L4263c8;
  #L4263e8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L4263ec.  call `clear`(v0) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L4263f2.  v2.`io.reactivex.internal.operators.flowable.FlowableWindow$b.o` @type ^`java.lang.Throwable` := v3 @kind object;
  #L4263f6.  v3:= 1I;
  #L4263f8.  v2.`io.reactivex.internal.operators.flowable.FlowableWindow$b.n` @type ^`boolean` := v3 @kind boolean;
  #L4263fc.  call `b`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.b:()V` @kind virtual;
  #L426402.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindow$b` v8 @kind this, `java.lang.Object` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L426414.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.n` @type ^`boolean` @kind boolean;
  #L426418.  if v0 == 0 then goto L42641e;
  #L42641c.  return @kind void;
  #L42641e.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.k` @type ^`long` @kind wide;
  #L426422.  v2:= 0L;
  #L426426.  v4:= lcmp(v0, v2);
  #L42642a.  if v4 != 0 then goto L426462;
  #L42642e.  v4:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.p` @type ^`boolean` @kind boolean;
  #L426432.  if v4 != 0 then goto L426462;
  #L426436.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L42643c.  v4:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.j` @type ^`int`;
  #L426440.  call temp:= `create`(v4, v8) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L426446.  v4:= temp @kind object;
  #L426448.  v5:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L42644c.  call temp:= `offer`(v5, v4) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L426452.  v5:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L426456.  call temp:= `offer`(v5, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L42645c.  call `b`(v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.b:()V` @kind virtual;
  #L426462.  v4:= 1L;
  #L426466.  v0:= v0 + v4 @kind long;
  #L426468.  v6:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L42646c.  call temp:= `iterator`(v6) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L426472.  v6:= temp @kind object;
  #L426474.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L42647a.  v7:= temp;
  #L42647c.  if v7 == 0 then goto L426494;
  #L426480.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L426486.  v7:= temp @kind object;
  #L426488.  v7:= (`org.reactivestreams.Processor`) v7 @kind object;
  #L42648c.  call `onNext`(v7, v9) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L426492.  goto L426474;
  #L426494.  v6:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.l` @type ^`long` @kind wide;
  #L426498.  v6:= v6 + v4 @kind long;
  #L42649a.  v4:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.c` @type ^`long` @kind wide;
  #L42649e.  v9:= lcmp(v6, v4);
  #L4264a2.  if v9 != 0 then goto L4264cc;
  #L4264a6.  v4:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.d` @type ^`long` @kind wide;
  #L4264aa.  v6:= v6 - v4 @kind long;
  #L4264ac.  v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.l` @type ^`long` := v6 @kind wide;
  #L4264b0.  v9:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L4264b4.  call temp:= `poll`(v9) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4264ba.  v9:= temp @kind object;
  #L4264bc.  v9:= (`org.reactivestreams.Processor`) v9 @kind object;
  #L4264c0.  if v9 == 0 then goto L4264d0;
  #L4264c4.  call `onComplete`(v9) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4264ca.  goto L4264d0;
  #L4264cc.  v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.l` @type ^`long` := v6 @kind wide;
  #L4264d0.  v4:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.d` @type ^`long` @kind wide;
  #L4264d4.  v9:= lcmp(v0, v4);
  #L4264d8.  if v9 != 0 then goto L4264e2;
  #L4264dc.  v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.k` @type ^`long` := v2 @kind wide;
  #L4264e0.  goto L4264e6;
  #L4264e2.  v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.k` @type ^`long` := v0 @kind wide;
  #L4264e6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWindow$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4264f8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$b.m` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4264fc.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L426502.  v0:= temp;
  #L426504.  if v0 == 0 then goto L426516;
  #L426508.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$b.m` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L42650c.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L426510.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L426516.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWindow$b` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L426528.  call temp:= `validate`(v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L42652e.  v0:= temp;
  #L426530.  if v0 == 0 then goto L4265a8;
  #L426534.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWindow$b.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L426538.  call temp:= `add`(v0, v5) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L42653e.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWindow$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L426542.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L426548.  v0:= temp;
  #L42654a.  if v0 != 0 then goto L42658c;
  #L42654e.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWindow$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L426552.  v1:= 0I;
  #L426554.  v2:= 1I;
  #L426556.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L42655c.  v0:= temp;
  #L42655e.  if v0 == 0 then goto L42658c;
  #L426562.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWindow$b.d` @type ^`long` @kind wide;
  #L426566.  v2:= 1L;
  #L42656a.  v5:= v5 - v2 @kind long;
  #L42656c.  call temp:= `multiplyCap`(v0, v5) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L426572.  v5:= temp @kind wide;
  #L426574.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWindow$b.c` @type ^`long` @kind wide;
  #L426578.  call temp:= `addCap`(v0, v5) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L42657e.  v5:= temp @kind wide;
  #L426580.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWindow$b.m` @type ^`org.reactivestreams.Subscription` @kind object;
  #L426584.  call `request`(v0, v5) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L42658a.  goto L4265a2;
  #L42658c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWindow$b.d` @type ^`long` @kind wide;
  #L426590.  call temp:= `multiplyCap`(v0, v5) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L426596.  v5:= temp @kind wide;
  #L426598.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWindow$b.m` @type ^`org.reactivestreams.Subscription` @kind object;
  #L42659c.  call `request`(v0, v5) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4265a2.  call `b`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.b:()V` @kind virtual;
  #L4265a8.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableWindow$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4265bc.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4265c2.  v0:= temp;
  #L4265c4.  if v0 != 0 then goto L4265d2;
  #L4265c8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$b.m` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4265cc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4265d2.  return @kind void;
}
