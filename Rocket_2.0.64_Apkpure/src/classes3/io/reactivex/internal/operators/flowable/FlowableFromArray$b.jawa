record `io.reactivex.internal.operators.flowable.FlowableFromArray$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableFromArray$c` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableFromArray$b.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFromArray$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromArray$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$b;.<init>:(Lorg/reactivestreams/Subscriber;[Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L415f58.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$c;.<init>:([Ljava/lang/Object;)V` @kind direct;
  #L415f5e.  v0.`io.reactivex.internal.operators.flowable.FlowableFromArray$b.d` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L415f62.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableFromArray$b` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L415f74.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.a` @type ^`java.lang.Object`[] @kind object;
  #L415f78.  v1:= length @variable v0;
  #L415f7a.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$b.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L415f7e.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int`;
  #L415f82.  if v3 == v1 then goto L415fba;
  #L415f86.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L415f8a.  if v4 == 0 then goto L415f90;
  #L415f8e.  return @kind void;
  #L415f90.  v4:= v0[v3] @kind object;
  #L415f94.  if v4 != 0 then goto L415fae;
  #L415f98.  v0:= new `java.lang.NullPointerException`;
  #L415f9c.  v1:= "array element is null" @kind object;
  #L415fa0.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L415fa6.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L415fac.  return @kind void;
  #L415fae.  call `onNext`(v2, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L415fb4.  v3:= v3 + 1;
  #L415fb8.  goto L415f82;
  #L415fba.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L415fbe.  if v0 == 0 then goto L415fc4;
  #L415fc2.  return @kind void;
  #L415fc4.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L415fca.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableFromArray$b` v10 @kind this, `long` v11 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$b;.e:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L415fdc.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.a` @type ^`java.lang.Object`[] @kind object;
  #L415fe0.  v1:= length @variable v0;
  #L415fe2.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int`;
  #L415fe6.  v3:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$b.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L415fea.  v4:= 0L;
  #L415fee.  v6:= v4 @kind wide;
  #L415ff0.  v8:= lcmp(v6, v11);
  #L415ff4.  if v8 == 0 then goto L416036;
  #L415ff8.  if v2 == v1 then goto L416036;
  #L415ffc.  v8:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L416000.  if v8 == 0 then goto L416006;
  #L416004.  return @kind void;
  #L416006.  v8:= v0[v2] @kind object;
  #L41600a.  if v8 != 0 then goto L416024;
  #L41600e.  v11:= new `java.lang.NullPointerException`;
  #L416012.  v12:= "array element is null" @kind object;
  #L416016.  call `<init>`(v11, v12) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41601c.  call `onError`(v3, v11) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L416022.  return @kind void;
  #L416024.  call `onNext`(v3, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41602a.  v8:= 1L;
  #L41602e.  v6:= v6 + v8 @kind long;
  #L416030.  v2:= v2 + 1;
  #L416034.  goto L415ff0;
  #L416036.  if v2 != v1 then goto L41604a;
  #L41603a.  v11:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L41603e.  if v11 != 0 then goto L416048;
  #L416042.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L416048.  return @kind void;
  #L41604a.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L416050.  v11:= temp @kind wide;
  #L416052.  v8:= lcmp(v6, v11);
  #L416056.  if v8 != 0 then goto L415ff0;
  #L41605a.  v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int` := v2;
  #L41605e.  v11:= -v6 @kind long;
  #L416060.  call temp:= `addAndGet`(v10, v11) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L416066.  v11:= temp @kind wide;
  #L416068.  v6:= lcmp(v11, v4);
  #L41606c.  if v6 != 0 then goto L415fee;
  #L416070.  return @kind void;
}
