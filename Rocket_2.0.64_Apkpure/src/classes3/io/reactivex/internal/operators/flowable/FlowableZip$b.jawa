record `io.reactivex.internal.operators.flowable.FlowableZip$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableZip$a` `io.reactivex.internal.operators.flowable.FlowableZip$b.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableZip$b.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableZip$b.c` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.flowable.FlowableZip$b.d` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableZip$b.e` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableZip$b.f` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableZip$b.g` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableZip$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableZip$b` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableZip$a` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$b;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableZip$a;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42987c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L429882.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$a` := v1 @kind object;
  #L429886.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$b.b` @type ^`int` := v2;
  #L42988a.  v1:= v2 ^> 2;
  #L42988e.  v2:= v2 - v1 @kind int;
  #L429890.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$b.c` @type ^`int` := v2;
  #L429894.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableZip$b` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L4298a8.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4298ae.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableZip$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4298c0.  v0:= 1I;
  #L4298c2.  v1.`io.reactivex.internal.operators.flowable.FlowableZip$b.f` @type ^`boolean` := v0 @kind boolean;
  #L4298c6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$a` @kind object;
  #L4298ca.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$a;.b:()V` @kind virtual;
  #L4298d0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableZip$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4298e4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$a` @kind object;
  #L4298e8.  call `c`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$a;.c:(Lio/reactivex/internal/operators/flowable/FlowableZip$b;Ljava/lang/Throwable;)V` @kind virtual;
  #L4298ee.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableZip$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L429900.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableZip$b.g` @type ^`int`;
  #L429904.  v1:= 2I;
  #L429906.  if v0 == v1 then goto L429914;
  #L42990a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableZip$b.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L42990e.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L429914.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableZip$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$a` @kind object;
  #L429918.  call `b`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$a;.b:()V` @kind virtual;
  #L42991e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableZip$b` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L429930.  call temp:= `setOnce`(v3, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L429936.  v0:= temp;
  #L429938.  if v0 == 0 then goto L4299ac;
  #L42993c.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L429940.  if v0 == 0 then goto L42998e;
  #L429944.  v0:= v4 @kind object;
  #L429946.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L42994a.  v1:= 7I;
  #L42994c.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L429952.  v1:= temp;
  #L429954.  v2:= 1I;
  #L429956.  if v1 != v2 then goto L429972;
  #L42995a.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.g` @type ^`int` := v1;
  #L42995e.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L429962.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.f` @type ^`boolean` := v2 @kind boolean;
  #L429966.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$a` @kind object;
  #L42996a.  call `b`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$a;.b:()V` @kind virtual;
  #L429970.  return @kind void;
  #L429972.  v2:= 2I;
  #L429974.  if v1 != v2 then goto L42998e;
  #L429978.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.g` @type ^`int` := v1;
  #L42997c.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L429980.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.b` @type ^`int`;
  #L429984.  v0:= (`long`) v0 @kind i2l;
  #L429986.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L42998c.  return @kind void;
  #L42998e.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L429992.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.b` @type ^`int`;
  #L429996.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L42999c.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4299a0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.b` @type ^`int`;
  #L4299a4.  v0:= (`long`) v0 @kind i2l;
  #L4299a6.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4299ac.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableZip$b` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4299c0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.g` @type ^`int`;
  #L4299c4.  v1:= 1I;
  #L4299c6.  if v0 == v1 then goto L4299fe;
  #L4299ca.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.e` @type ^`long` @kind wide;
  #L4299ce.  v0:= v0 + v4 @kind long;
  #L4299d0.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.c` @type ^`int`;
  #L4299d4.  v4:= (`long`) v4 @kind i2l;
  #L4299d6.  v2:= lcmp(v0, v4);
  #L4299da.  if v2 < 0 then goto L4299fa;
  #L4299de.  v4:= 0L;
  #L4299e2.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.e` @type ^`long` := v4 @kind wide;
  #L4299e6.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4299ec.  v4:= temp @kind object;
  #L4299ee.  v4:= (`org.reactivestreams.Subscription`) v4 @kind object;
  #L4299f2.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4299f8.  goto L4299fe;
  #L4299fa.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.e` @type ^`long` := v0 @kind wide;
  #L4299fe.  return @kind void;
}
