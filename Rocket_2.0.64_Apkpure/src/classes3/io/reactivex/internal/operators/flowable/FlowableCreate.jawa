record `io.reactivex.internal.operators.flowable.FlowableCreate` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Flowable` @kind class {
  `io.reactivex.FlowableOnSubscribe` `io.reactivex.internal.operators.flowable.FlowableCreate.b` @AccessFlag FINAL;
  `io.reactivex.BackpressureStrategy` `io.reactivex.internal.operators.flowable.FlowableCreate.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCreate` v0 @kind this, `io.reactivex.FlowableOnSubscribe` v1 @kind object, `io.reactivex.BackpressureStrategy` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate;.<init>:(Lio/reactivex/FlowableOnSubscribe;Lio/reactivex/BackpressureStrategy;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L410398.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L41039e.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate.b` @type ^`io.reactivex.FlowableOnSubscribe` := v1 @kind object;
  #L4103a2.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate.c` @type ^`io.reactivex.BackpressureStrategy` := v2 @kind object;
  #L4103a6.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableCreate` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4103b8.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableCreate$a.a` @type ^`int`[] @kind object;
  #L4103bc.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate.c` @type ^`io.reactivex.BackpressureStrategy` @kind object;
  #L4103c0.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L4103c6.  v1:= temp;
  #L4103c8.  v0:= v0[v1];
  #L4103cc.  v1:= 1I;
  #L4103ce.  if v0 == v1 then goto L41041c;
  #L4103d2.  v1:= 2I;
  #L4103d4.  if v0 == v1 then goto L410410;
  #L4103d8.  v1:= 3I;
  #L4103da.  if v0 == v1 then goto L410404;
  #L4103de.  v1:= 4I;
  #L4103e0.  if v0 == v1 then goto L4103f8;
  #L4103e4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCreate$c`;
  #L4103e8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L4103ee.  v1:= temp;
  #L4103f0.  call `<init>`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$c;.<init>:(Lorg/reactivestreams/Subscriber;I)V` @kind direct;
  #L4103f6.  goto L410426;
  #L4103f8.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCreate$f`;
  #L4103fc.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$f;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L410402.  goto L410426;
  #L410404.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCreate$d`;
  #L410408.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$d;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L41040e.  goto L410426;
  #L410410.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCreate$e`;
  #L410414.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$e;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L41041a.  goto L410426;
  #L41041c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCreate$g`;
  #L410420.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$g;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L410426.  call `onSubscribe`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L41042c.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate.b` @type ^`io.reactivex.FlowableOnSubscribe` @kind object;
  #L410430.  call `subscribe`(v3, v0) @signature `Lio/reactivex/FlowableOnSubscribe;.subscribe:(Lio/reactivex/FlowableEmitter;)V` @kind interface;
  #L410436.  goto L410446;
  #L410438.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41043a.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L410440.  call `onError`(v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L410446.  return @kind void;
  catch `java.lang.Throwable` @[L41042c..L410436] goto L410438;
}
