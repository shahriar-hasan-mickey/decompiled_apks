record `io.reactivex.internal.operators.flowable.FlowableOnErrorNext` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableOnErrorNext.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnErrorNext.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnErrorNext` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L41be80.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L41be86.  v0.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L41be8a.  v0.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext.c` @type ^`boolean` := v3 @kind boolean;
  #L41be8e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableOnErrorNext` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L41bea0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a`;
  #L41bea4.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L41bea8.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext.c` @type ^`boolean` @kind boolean;
  #L41beac.  call `<init>`(v0, v4, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L41beb2.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.d` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L41beb6.  call `onSubscribe`(v4, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L41bebc.  v4:= v3.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L41bec0.  call `subscribe`(v4, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L41bec6.  return @kind void;
}
