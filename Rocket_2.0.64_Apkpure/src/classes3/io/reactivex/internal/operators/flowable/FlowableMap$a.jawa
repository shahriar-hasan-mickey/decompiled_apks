record `io.reactivex.internal.operators.flowable.FlowableMap$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` @kind class {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableMap$a.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableMap$a` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap$a;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L419e80.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;)V` @kind direct;
  #L419e86.  v0.`io.reactivex.internal.operators.flowable.FlowableMap$a.a` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L419e8a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableMap$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L419e9c.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L419ea0.  if v0 == 0 then goto L419ea6;
  #L419ea4.  return @kind void;
  #L419ea6.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L419eaa.  if v0 == 0 then goto L419ebc;
  #L419eae.  v2:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.actual` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L419eb2.  v0:= 0I;
  #L419eb4.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L419eba.  return @kind void;
  #L419ebc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMap$a.a` @type ^`io.reactivex.functions.Function` @kind object;
  #L419ec0.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L419ec6.  v2:= temp @kind object;
  #L419ec8.  v0:= "The mapper function returned a null value." @kind object;
  #L419ecc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419ed2.  v2:= temp @kind object;
  #L419ed4.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.actual` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L419ed8.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L419ede.  return @kind void;
  #L419ee0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L419ee2.  call `fail`(v1, v2) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L419ee8.  return @kind void;
  catch `java.lang.Throwable` @[L419ebc..L419ed4] goto L419ee0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableMap$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L419e40.  v0:= v2.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L419e44.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L419e4a.  v0:= temp @kind object;
  #L419e4c.  if v0 == 0 then goto L419e6a;
  #L419e50.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableMap$a.a` @type ^`io.reactivex.functions.Function` @kind object;
  #L419e54.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L419e5a.  v0:= temp @kind object;
  #L419e5c.  v1:= "The mapper function returned a null value." @kind object;
  #L419e60.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419e66.  v0:= temp @kind object;
  #L419e68.  goto L419e6c;
  #L419e6a.  v0:= 0I;
  #L419e6c.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableMap$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L419e24.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L419e2a.  v1:= temp;
  #L419e2c.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableMap$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap$a;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L419dc8.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L419dcc.  if v0 == 0 then goto L419dd4;
  #L419dd0.  v2:= 0I;
  #L419dd2.  return v2;
  #L419dd4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMap$a.a` @type ^`io.reactivex.functions.Function` @kind object;
  #L419dd8.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L419dde.  v2:= temp @kind object;
  #L419de0.  v0:= "The mapper function returned a null value." @kind object;
  #L419de4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419dea.  v2:= temp @kind object;
  #L419dec.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.actual` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L419df0.  call temp:= `tryOnNext`(v0, v2) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L419df6.  v2:= temp;
  #L419df8.  return v2;
  #L419dfa.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L419dfc.  call `fail`(v1, v2) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L419e02.  v2:= 1I;
  #L419e04.  return v2;
  catch `java.lang.Throwable` @[L419dd4..L419dec] goto L419dfa;
}
