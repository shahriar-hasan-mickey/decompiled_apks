record `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.BasicFuseableSubscriber` @kind class, `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L411878.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L41187e.  v0.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.a` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L411882.  v0.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.b` @type ^`io.reactivex.functions.BiPredicate` := v3 @kind object;
  #L411886.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L411898.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$b;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L41189e.  v3:= temp;
  #L4118a0.  if v3 != 0 then goto L4118b2;
  #L4118a4.  v3:= v2.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.s` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4118a8.  v0:= 1L;
  #L4118ac.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4118b2.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$b;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4117fc.  v0:= v5.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L411800.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L411806.  v0:= temp @kind object;
  #L411808.  if v0 != 0 then goto L411810;
  #L41180c.  v0:= 0I;
  #L41180e.  return v0 @kind object;
  #L411810.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.a` @type ^`io.reactivex.functions.Function` @kind object;
  #L411814.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L41181a.  v1:= temp @kind object;
  #L41181c.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.d` @type ^`boolean` @kind boolean;
  #L411820.  v3:= 1I;
  #L411822.  if v2 != 0 then goto L411830;
  #L411826.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.d` @type ^`boolean` := v3 @kind boolean;
  #L41182a.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @type ^`java.lang.Object` := v1 @kind object;
  #L41182e.  return v0 @kind object;
  #L411830.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.b` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L411834.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @type ^`java.lang.Object` @kind object;
  #L411838.  call temp:= `test`(v2, v4, v1) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L41183e.  v2:= temp;
  #L411840.  if v2 != 0 then goto L41184a;
  #L411844.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @type ^`java.lang.Object` := v1 @kind object;
  #L411848.  return v0 @kind object;
  #L41184a.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @type ^`java.lang.Object` := v1 @kind object;
  #L41184e.  v0:= v5.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.sourceMode` @type ^`int`;
  #L411852.  if v0 == v3 then goto L4117fc;
  #L411856.  v0:= v5.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.s` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41185a.  v1:= 1L;
  #L41185e.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L411864.  goto L4117fc;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$b;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L4117e0.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L4117e6.  v1:= temp;
  #L4117e8.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$b;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L411754.  v0:= v5.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` @kind boolean;
  #L411758.  v1:= 0I;
  #L41175a.  if v0 == 0 then goto L411760;
  #L41175e.  return v1;
  #L411760.  v0:= v5.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.sourceMode` @type ^`int`;
  #L411764.  v2:= 1I;
  #L411766.  if v0 == 0 then goto L411776;
  #L41176a.  v0:= v5.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41176e.  call `onNext`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L411774.  return v2;
  #L411776.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.a` @type ^`io.reactivex.functions.Function` @kind object;
  #L41177a.  call temp:= `apply`(v0, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L411780.  v0:= temp @kind object;
  #L411782.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.d` @type ^`boolean` @kind boolean;
  #L411786.  if v3 == 0 then goto L4117a4;
  #L41178a.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.b` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L41178e.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @type ^`java.lang.Object` @kind object;
  #L411792.  call temp:= `test`(v3, v4, v0) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L411798.  v3:= temp;
  #L41179a.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @type ^`java.lang.Object` := v0 @kind object;
  #L41179e.  if v3 == 0 then goto L4117ac;
  #L4117a2.  return v1;
  #L4117a4.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.d` @type ^`boolean` := v2 @kind boolean;
  #L4117a8.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @type ^`java.lang.Object` := v0 @kind object;
  #L4117ac.  v0:= v5.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4117b0.  call `onNext`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4117b6.  return v2;
  #L4117b8.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4117ba.  call `fail`(v5, v6) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4117c0.  return v2;
  catch `java.lang.Throwable` @[L411776..L4117ac] goto L4117b8;
}
