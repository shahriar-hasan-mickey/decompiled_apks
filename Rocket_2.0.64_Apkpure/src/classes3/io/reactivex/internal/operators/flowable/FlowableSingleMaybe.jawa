record `io.reactivex.internal.operators.flowable.FlowableSingleMaybe` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class, `io.reactivex.internal.fuseable.FuseToFlowable` @kind interface {
  `io.reactivex.Flowable` `io.reactivex.internal.operators.flowable.FlowableSingleMaybe.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSingleMaybe` v0 @kind this, `io.reactivex.Flowable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleMaybe;.<init>:(Lio/reactivex/Flowable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L421f30.  call `<init>`(v0) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L421f36.  v0.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe.a` @type ^`io.reactivex.Flowable` := v1 @kind object;
  #L421f3a.  return @kind void;
}
procedure `io.reactivex.Flowable` `fuseToFlowable`(`io.reactivex.internal.operators.flowable.FlowableSingleMaybe` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleMaybe;.fuseToFlowable:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L421f04.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSingle`;
  #L421f08.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe.a` @type ^`io.reactivex.Flowable` @kind object;
  #L421f0c.  v2:= 0I;
  #L421f0e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingle;.<init>:(Lio/reactivex/Flowable;Ljava/lang/Object;)V` @kind direct;
  #L421f14.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L421f1a.  v0:= temp @kind object;
  #L421f1c.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableSingleMaybe` v2 @kind this, `io.reactivex.MaybeObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleMaybe;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L421f4c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe.a` @type ^`io.reactivex.Flowable` @kind object;
  #L421f50.  v1:= new `io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a`;
  #L421f54.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleMaybe$a;.<init>:(Lio/reactivex/MaybeObserver;)V` @kind direct;
  #L421f5a.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L421f60.  return @kind void;
}
