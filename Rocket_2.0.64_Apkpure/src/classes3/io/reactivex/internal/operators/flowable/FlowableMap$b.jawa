record `io.reactivex.internal.operators.flowable.FlowableMap$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.BasicFuseableSubscriber` @kind class {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableMap$b.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableMap$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L419f64.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L419f6a.  v0.`io.reactivex.internal.operators.flowable.FlowableMap$b.a` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L419f6e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableMap$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L419f80.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` @kind boolean;
  #L419f84.  if v0 == 0 then goto L419f8a;
  #L419f88.  return @kind void;
  #L419f8a.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.sourceMode` @type ^`int`;
  #L419f8e.  if v0 == 0 then goto L419fa0;
  #L419f92.  v2:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L419f96.  v0:= 0I;
  #L419f98.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L419f9e.  return @kind void;
  #L419fa0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMap$b.a` @type ^`io.reactivex.functions.Function` @kind object;
  #L419fa4.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L419faa.  v2:= temp @kind object;
  #L419fac.  v0:= "The mapper function returned a null value." @kind object;
  #L419fb0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419fb6.  v2:= temp @kind object;
  #L419fb8.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L419fbc.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L419fc2.  return @kind void;
  #L419fc4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L419fc6.  call `fail`(v1, v2) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L419fcc.  return @kind void;
  catch `java.lang.Throwable` @[L419fa0..L419fb8] goto L419fc4;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableMap$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap$b;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L419f24.  v0:= v2.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L419f28.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L419f2e.  v0:= temp @kind object;
  #L419f30.  if v0 == 0 then goto L419f4e;
  #L419f34.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableMap$b.a` @type ^`io.reactivex.functions.Function` @kind object;
  #L419f38.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L419f3e.  v0:= temp @kind object;
  #L419f40.  v1:= "The mapper function returned a null value." @kind object;
  #L419f44.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419f4a.  v0:= temp @kind object;
  #L419f4c.  goto L419f50;
  #L419f4e.  v0:= 0I;
  #L419f50.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableMap$b` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap$b;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L419f08.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L419f0e.  v1:= temp;
  #L419f10.  return v1;
}
