record `io.reactivex.internal.operators.flowable.FlowableDematerialize$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableDematerialize$a.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableDematerialize$a.b` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableDematerialize$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDematerialize$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$a;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L411100.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L411106.  v0.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L41110a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableDematerialize$a` v1 @kind this, `io.reactivex.Notification` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$a;.a:(Lio/reactivex/Notification;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411198.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.b` @type ^`boolean` @kind boolean;
  #L41119c.  if v0 == 0 then goto L4111bc;
  #L4111a0.  call temp:= `isOnError`(v2) @signature `Lio/reactivex/Notification;.isOnError:()Z` @kind virtual;
  #L4111a6.  v0:= temp;
  #L4111a8.  if v0 == 0 then goto L4111ba;
  #L4111ac.  call temp:= `getError`(v2) @signature `Lio/reactivex/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L4111b2.  v2:= temp @kind object;
  #L4111b4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4111ba.  return @kind void;
  #L4111bc.  call temp:= `isOnError`(v2) @signature `Lio/reactivex/Notification;.isOnError:()Z` @kind virtual;
  #L4111c2.  v0:= temp;
  #L4111c4.  if v0 == 0 then goto L4111e2;
  #L4111c8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4111cc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4111d2.  call temp:= `getError`(v2) @signature `Lio/reactivex/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L4111d8.  v2:= temp @kind object;
  #L4111da.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4111e0.  goto L411212;
  #L4111e2.  call temp:= `isOnComplete`(v2) @signature `Lio/reactivex/Notification;.isOnComplete:()Z` @kind virtual;
  #L4111e8.  v0:= temp;
  #L4111ea.  if v0 == 0 then goto L411200;
  #L4111ee.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4111f2.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4111f8.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$a;.onComplete:()V` @kind virtual;
  #L4111fe.  goto L411212;
  #L411200.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L411204.  call temp:= `getValue`(v2) @signature `Lio/reactivex/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L41120a.  v2:= temp @kind object;
  #L41120c.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L411212.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableDematerialize$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41111c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L411120.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L411126.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDematerialize$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411138.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.b` @type ^`boolean` @kind boolean;
  #L41113c.  if v0 == 0 then goto L411142;
  #L411140.  return @kind void;
  #L411142.  v0:= 1I;
  #L411144.  v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.b` @type ^`boolean` := v0 @kind boolean;
  #L411148.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41114c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L411152.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDematerialize$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411164.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.b` @type ^`boolean` @kind boolean;
  #L411168.  if v0 == 0 then goto L411174;
  #L41116c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L411172.  return @kind void;
  #L411174.  v0:= 1I;
  #L411176.  v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.b` @type ^`boolean` := v0 @kind boolean;
  #L41117a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41117e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L411184.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDematerialize$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L411224.  v1:= (`io.reactivex.Notification`) v1 @kind object;
  #L411228.  call `a`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$a;.a:(Lio/reactivex/Notification;)V` @kind virtual;
  #L41122e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableDematerialize$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411240.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L411244.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L41124a.  v0:= temp;
  #L41124c.  if v0 == 0 then goto L41125e;
  #L411250.  v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L411254.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L411258.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L41125e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableDematerialize$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411270.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L411274.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L41127a.  return @kind void;
}
