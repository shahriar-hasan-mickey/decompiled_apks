record `io.reactivex.internal.operators.flowable.FlowableCache$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableCache$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableCache$a` `io.reactivex.internal.operators.flowable.FlowableCache$b.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableCache$b.c` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.operators.flowable.FlowableCache$b.d` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableCache$b.e` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableCache$b.f` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCache$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCache$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.internal.operators.flowable.FlowableCache$a` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/operators/flowable/FlowableCache$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40d218.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L40d21e.  v0.`io.reactivex.internal.operators.flowable.FlowableCache$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L40d222.  v0.`io.reactivex.internal.operators.flowable.FlowableCache$b.b` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$a` := v2 @kind object;
  #L40d226.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L40d22a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L40d230.  v0.`io.reactivex.internal.operators.flowable.FlowableCache$b.c` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L40d234.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableCache$b` v21 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$b;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;

  #L40d27c.  v0:= v21 @kind object;
  #L40d280.  call temp:= `getAndIncrement`(v21) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L40d286.  v1:= temp;
  #L40d288.  if v1 == 0 then goto L40d28e;
  #L40d28c.  return @kind void;
  #L40d28e.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableCache$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40d292.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableCache$b.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40d296.  v3:= 1I;
  #L40d298.  v4:= 1I;
  #L40d29a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L40d2a0.  v5:= temp @kind wide;
  #L40d2a2.  v7:= 0L;
  #L40d2a6.  v9:= lcmp(v5, v7);
  #L40d2aa.  if v9 >= 0 then goto L40d2b0;
  #L40d2ae.  return @kind void;
  #L40d2b0.  v9:= v0.`io.reactivex.internal.operators.flowable.FlowableCache$b.b` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$a` @kind object;
  #L40d2b4.  call temp:= `size`(v9) @signature `Lio/reactivex/internal/util/LinkedArrayList;.size:()I` @kind virtual;
  #L40d2ba.  v9:= temp;
  #L40d2bc.  if v9 == 0 then goto L40d3a8;
  #L40d2c0.  v10:= v0.`io.reactivex.internal.operators.flowable.FlowableCache$b.d` @type ^`java.lang.Object`[] @kind object;
  #L40d2c4.  if v10 != 0 then goto L40d2d8;
  #L40d2c8.  v10:= v0.`io.reactivex.internal.operators.flowable.FlowableCache$b.b` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$a` @kind object;
  #L40d2cc.  call temp:= `head`(v10) @signature `Lio/reactivex/internal/util/LinkedArrayList;.head:()[Ljava/lang/Object;` @kind virtual;
  #L40d2d2.  v10:= temp @kind object;
  #L40d2d4.  v0.`io.reactivex.internal.operators.flowable.FlowableCache$b.d` @type ^`java.lang.Object`[] := v10 @kind object;
  #L40d2d8.  v11:= length @variable v10;
  #L40d2da.  v11:= v11 - v3 @kind int;
  #L40d2dc.  v12:= v0.`io.reactivex.internal.operators.flowable.FlowableCache$b.f` @type ^`int`;
  #L40d2e0.  v13:= v0.`io.reactivex.internal.operators.flowable.FlowableCache$b.e` @type ^`int`;
  #L40d2e4.  v14:= 0I;
  #L40d2e6.  v15:= 0I;
  #L40d2e8.  v16:= -1L;
  #L40d2ec.  if v12 >= v9 then goto L40d342;
  #L40d2f0.  v18:= lcmp(v5, v7);
  #L40d2f4.  if v18 <= 0 then goto L40d342;
  #L40d2f8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L40d2fe.  v18:= temp @kind wide;
  #L40d300.  v20:= lcmp(v18, v16);
  #L40d304.  if v20 != 0 then goto L40d30a;
  #L40d308.  return @kind void;
  #L40d30a.  if v13 != v11 then goto L40d318;
  #L40d30e.  v10:= v10[v11] @kind object;
  #L40d312.  v10:= (`java.lang.Object`[]) v10 @kind object;
  #L40d316.  v13:= 0I;
  #L40d318.  v3:= v10[v13] @kind object;
  #L40d31c.  call temp:= `accept`(v3, v1) @signature `Lio/reactivex/internal/util/NotificationLite;.accept:(Ljava/lang/Object;Lorg/reactivestreams/Subscriber;)Z` @kind static;
  #L40d322.  v3:= temp;
  #L40d324.  if v3 == 0 then goto L40d32a;
  #L40d328.  return @kind void;
  #L40d32a.  v13:= v13 + 1;
  #L40d32e.  v12:= v12 + 1;
  #L40d332.  v16:= 1L;
  #L40d336.  v5:= v5 - v16 @kind long;
  #L40d33a.  v15:= v15 + 1;
  #L40d33e.  v3:= 1I;
  #L40d340.  goto L40d2e8;
  #L40d342.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L40d348.  v19:= temp @kind wide;
  #L40d34a.  v3:= lcmp(v19, v16);
  #L40d34e.  if v3 != 0 then goto L40d354;
  #L40d352.  return @kind void;
  #L40d354.  v3:= lcmp(v5, v7);
  #L40d358.  if v3 != 0 then goto L40d390;
  #L40d35c.  v3:= v10[v13] @kind object;
  #L40d360.  call temp:= `isComplete`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L40d366.  v5:= temp;
  #L40d368.  if v5 == 0 then goto L40d374;
  #L40d36c.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40d372.  return @kind void;
  #L40d374.  call temp:= `isError`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L40d37a.  v5:= temp;
  #L40d37c.  if v5 == 0 then goto L40d390;
  #L40d380.  call temp:= `getError`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L40d386.  v2:= temp @kind object;
  #L40d388.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40d38e.  return @kind void;
  #L40d390.  if v15 == 0 then goto L40d39c;
  #L40d394.  v5:= (`long`) v15 @kind i2l;
  #L40d396.  call temp:= `producedCancel`(v2, v5) @signature `Lio/reactivex/internal/util/BackpressureHelper;.producedCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L40d39c.  v0.`io.reactivex.internal.operators.flowable.FlowableCache$b.f` @type ^`int` := v12;
  #L40d3a0.  v0.`io.reactivex.internal.operators.flowable.FlowableCache$b.e` @type ^`int` := v13;
  #L40d3a4.  v0.`io.reactivex.internal.operators.flowable.FlowableCache$b.d` @type ^`java.lang.Object`[] := v10 @kind object;
  #L40d3a8.  v3:= -v4 @kind int;
  #L40d3aa.  call temp:= `addAndGet`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L40d3b0.  v4:= temp;
  #L40d3b2.  if v4 != 0 then goto L40d3b8;
  #L40d3b6.  return @kind void;
  #L40d3b8.  v3:= 1I;
  #L40d3ba.  goto L40d29a;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableCache$b` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40d248.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableCache$b.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40d24c.  v1:= -1L;
  #L40d250.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L40d256.  v3:= temp @kind wide;
  #L40d258.  v0:= lcmp(v3, v1);
  #L40d25c.  if v0 == 0 then goto L40d26a;
  #L40d260.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableCache$b.b` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$a` @kind object;
  #L40d264.  call `c`(v0, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$a;.c:(Lio/reactivex/internal/operators/flowable/FlowableCache$b;)V` @kind virtual;
  #L40d26a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableCache$b` v5 @kind this, `long` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40d3d0.  call temp:= `validate`(v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L40d3d6.  v0:= temp;
  #L40d3d8.  if v0 == 0 then goto L40d414;
  #L40d3dc.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableCache$b.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40d3e0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L40d3e6.  v0:= temp @kind wide;
  #L40d3e8.  v2:= -1L;
  #L40d3ec.  v4:= lcmp(v0, v2);
  #L40d3f0.  if v4 != 0 then goto L40d3f6;
  #L40d3f4.  return @kind void;
  #L40d3f6.  call temp:= `addCap`(v0, v6) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L40d3fc.  v2:= temp @kind wide;
  #L40d3fe.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableCache$b.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40d402.  call temp:= `compareAndSet`(v4, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L40d408.  v0:= temp;
  #L40d40a.  if v0 == 0 then goto L40d3dc;
  #L40d40e.  call `a`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$b;.a:()V` @kind virtual;
  #L40d414.  return @kind void;
}
