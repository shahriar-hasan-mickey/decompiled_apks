record `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableCombineLatest$b`[] `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.d` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.g` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.h` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.i` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.j` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.k` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.l` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.m` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 , `int` v5 , `boolean` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;IIZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L40d9c4.  call `<init>`(v1) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L40d9ca.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L40d9ce.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.b` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L40d9d2.  v2:= new `io.reactivex.internal.operators.flowable.FlowableCombineLatest$b`[v4];
  #L40d9d6.  v3:= 0I;
  #L40d9d8.  if v3 >= v4 then goto L40d9f0;
  #L40d9dc.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCombineLatest$b`;
  #L40d9e0.  call `<init>`(v0, v1, v3, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$b;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;II)V` @kind direct;
  #L40d9e6.  v2[v3]:= v0 @kind object;
  #L40d9ea.  v3:= v3 + 1;
  #L40d9ee.  goto L40d9d8;
  #L40d9f0.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b`[] := v2 @kind object;
  #L40d9f4.  v2:= new `java.lang.Object`[v4];
  #L40d9f8.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.e` @type ^`java.lang.Object`[] := v2 @kind object;
  #L40d9fc.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L40da00.  call `<init>`(v2, v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L40da06.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L40da0a.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L40da0e.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L40da14.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.k` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L40da18.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L40da1c.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L40da22.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L40da26.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.f` @type ^`boolean` := v6 @kind boolean;
  #L40da2a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40da3c.  v0:= 1I;
  #L40da3e.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.j` @type ^`boolean` := v0 @kind boolean;
  #L40da42.  call `e`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @kind virtual;
  #L40da48.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40da8c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L40da90.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L40da96.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L40daa8.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L40daae.  v0:= temp;
  #L40dab0.  if v0 == 0 then goto L40dab6;
  #L40dab4.  return @kind void;
  #L40dab6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.g` @type ^`boolean` @kind boolean;
  #L40daba.  if v0 == 0 then goto L40dac6;
  #L40dabe.  call `h`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.h:()V` @kind virtual;
  #L40dac4.  goto L40dacc;
  #L40dac6.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.g:()V` @kind virtual;
  #L40dacc.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40da5c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b`[] @kind object;
  #L40da60.  v1:= length @variable v0;
  #L40da62.  v2:= 0I;
  #L40da64.  if v2 >= v1 then goto L40da78;
  #L40da68.  v3:= v0[v2] @kind object;
  #L40da6c.  call `a`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$b;.a:()V` @kind virtual;
  #L40da72.  v2:= v2 + 1;
  #L40da76.  goto L40da64;
  #L40da78.  return @kind void;
}
procedure `boolean` `f`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v2 @kind this, `boolean` v3 , `boolean` v4 , `org.reactivestreams.Subscriber` v5 @kind object, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.f:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L40d884.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.j` @type ^`boolean` @kind boolean;
  #L40d888.  v1:= 1I;
  #L40d88a.  if v0 == 0 then goto L40d89c;
  #L40d88e.  call `e`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @kind virtual;
  #L40d894.  call `clear`(v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L40d89a.  return v1;
  #L40d89c.  if v3 == 0 then goto L40d918;
  #L40d8a0.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.f` @type ^`boolean` @kind boolean;
  #L40d8a4.  if v3 == 0 then goto L40d8da;
  #L40d8a8.  if v4 == 0 then goto L40d918;
  #L40d8ac.  call `e`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @kind virtual;
  #L40d8b2.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40d8b6.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L40d8bc.  v3:= temp @kind object;
  #L40d8be.  if v3 == 0 then goto L40d8d2;
  #L40d8c2.  v4:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L40d8c6.  if v3 == v4 then goto L40d8d2;
  #L40d8ca.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40d8d0.  goto L40d8d8;
  #L40d8d2.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40d8d8.  return v1;
  #L40d8da.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40d8de.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L40d8e4.  v3:= temp @kind object;
  #L40d8e6.  if v3 == 0 then goto L40d906;
  #L40d8ea.  v0:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L40d8ee.  if v3 == v0 then goto L40d906;
  #L40d8f2.  call `e`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @kind virtual;
  #L40d8f8.  call `clear`(v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L40d8fe.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40d904.  return v1;
  #L40d906.  if v4 == 0 then goto L40d918;
  #L40d90a.  call `e`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @kind virtual;
  #L40d910.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40d916.  return v1;
  #L40d918.  v3:= 0I;
  #L40d91a.  return v3;
}
procedure `void` `g`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v14 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L40dae0.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40dae4.  v1:= v14.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L40dae8.  v2:= 1I;
  #L40daea.  v3:= 1I;
  #L40daec.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40daf0.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L40daf6.  v4:= temp @kind wide;
  #L40daf8.  v6:= 0L;
  #L40dafc.  v8:= v6 @kind wide;
  #L40dafe.  v10:= lcmp(v8, v4);
  #L40db02.  if v10 == 0 then goto L40db98;
  #L40db06.  v11:= v14.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.l` @type ^`boolean` @kind boolean;
  #L40db0a.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L40db10.  v12:= temp @kind object;
  #L40db12.  if v12 != 0 then goto L40db1a;
  #L40db16.  v13:= 1I;
  #L40db18.  goto L40db1c;
  #L40db1a.  v13:= 0I;
  #L40db1c.  call temp:= `f`(v14, v11, v13, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.f:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L40db22.  v11:= temp;
  #L40db24.  if v11 == 0 then goto L40db2a;
  #L40db28.  return @kind void;
  #L40db2a.  if v13 == 0 then goto L40db30;
  #L40db2e.  goto L40db98;
  #L40db30.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L40db36.  v10:= temp @kind object;
  #L40db38.  v10:= (`java.lang.Object`[]) v10 @kind object;
  #L40db3c.  v11:= v14.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L40db40.  call temp:= `apply`(v11, v10) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L40db46.  v10:= temp @kind object;
  #L40db48.  v11:= "The combiner returned a null value" @kind object;
  #L40db4c.  call temp:= `requireNonNull`(v10, v11) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40db52.  v10:= temp @kind object;
  #L40db54.  call `onNext`(v0, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40db5a.  v12:= (`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b`) v12 @kind object;
  #L40db5e.  call `b`(v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$b;.b:()V` @kind virtual;
  #L40db64.  v10:= 1L;
  #L40db68.  v8:= v8 + v10 @kind long;
  #L40db6a.  goto L40dafe;
  #L40db6c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40db6e.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40db74.  call `e`(v14) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @kind virtual;
  #L40db7a.  v2:= v14.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40db7e.  call temp:= `addThrowable`(v2, v1) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L40db84.  v1:= v14.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40db88.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L40db8e.  v1:= temp @kind object;
  #L40db90.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40db96.  return @kind void;
  #L40db98.  if v10 != 0 then goto L40dbb6;
  #L40db9c.  v10:= v14.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.l` @type ^`boolean` @kind boolean;
  #L40dba0.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L40dba6.  v11:= temp;
  #L40dba8.  call temp:= `f`(v14, v10, v11, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.f:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L40dbae.  v10:= temp;
  #L40dbb0.  if v10 == 0 then goto L40dbb6;
  #L40dbb4.  return @kind void;
  #L40dbb6.  v10:= lcmp(v8, v6);
  #L40dbba.  if v10 == 0 then goto L40dbdc;
  #L40dbbe.  v6:= 9223372036854775807L;
  #L40dbc8.  v10:= lcmp(v4, v6);
  #L40dbcc.  if v10 == 0 then goto L40dbdc;
  #L40dbd0.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40dbd4.  v5:= -v8 @kind long;
  #L40dbd6.  call temp:= `addAndGet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L40dbdc.  v3:= -v3 @kind int;
  #L40dbde.  call temp:= `addAndGet`(v14, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L40dbe4.  v3:= temp;
  #L40dbe6.  if v3 != 0 then goto L40daec;
  #L40dbea.  return @kind void;
  catch `java.lang.Throwable` @[L40db3c..L40db54] goto L40db6c;
}
procedure `void` `h`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.h:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L40dc08.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40dc0c.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L40dc10.  v2:= 1I;
  #L40dc12.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.j` @type ^`boolean` @kind boolean;
  #L40dc16.  if v3 == 0 then goto L40dc22;
  #L40dc1a.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L40dc20.  return @kind void;
  #L40dc22.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40dc26.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L40dc2c.  v3:= temp @kind object;
  #L40dc2e.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L40dc32.  if v3 == 0 then goto L40dc44;
  #L40dc36.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L40dc3c.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40dc42.  return @kind void;
  #L40dc44.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.l` @type ^`boolean` @kind boolean;
  #L40dc48.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L40dc4e.  v4:= temp;
  #L40dc50.  if v4 != 0 then goto L40dc5c;
  #L40dc54.  v5:= 0I;
  #L40dc56.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40dc5c.  if v3 == 0 then goto L40dc6c;
  #L40dc60.  if v4 == 0 then goto L40dc6c;
  #L40dc64.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40dc6a.  return @kind void;
  #L40dc6c.  v2:= -v2 @kind int;
  #L40dc6e.  call temp:= `addAndGet`(v6, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L40dc74.  v2:= temp;
  #L40dc76.  if v2 != 0 then goto L40dc12;
  #L40dc7a.  return @kind void;
}
procedure `void` `i`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.i:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L40dc8c.  @monitorenter v2
  #L40dc8e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.e` @type ^`java.lang.Object`[] @kind object;
  #L40dc92.  v3:= v0[v3] @kind object;
  #L40dc96.  v1:= 1I;
  #L40dc98.  if v3 == 0 then goto L40dcb6;
  #L40dc9c.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.i` @type ^`int`;
  #L40dca0.  v3:= v3 + v1 @kind int;
  #L40dca2.  v0:= length @variable v0;
  #L40dca4.  if v3 != v0 then goto L40dcae;
  #L40dca8.  v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.l` @type ^`boolean` := v1 @kind boolean;
  #L40dcac.  goto L40dcba;
  #L40dcae.  v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.i` @type ^`int` := v3;
  #L40dcb2.  @monitorexit v2
  #L40dcb4.  return @kind void;
  #L40dcb6.  v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.l` @type ^`boolean` := v1 @kind boolean;
  #L40dcba.  @monitorexit v2
  #L40dcbc.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.drain:()V` @kind virtual;
  #L40dcc2.  return @kind void;
  #L40dcc4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40dcc6.  @monitorexit v2
  #L40dcc8.  throw v3;
  catch `java.lang.Throwable` @[L40dc8e..L40dcbc] goto L40dcc4;
  catch `java.lang.Throwable` @[L40dcc6..L40dcc8] goto L40dcc4;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40d92c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L40d930.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L40d936.  v0:= temp;
  #L40d938.  return v0;
}
procedure `void` `j`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v1 @kind this, `int` v2 , `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.j:(ILjava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L40dcf0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40dcf4.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L40dcfa.  v0:= temp;
  #L40dcfc.  if v0 == 0 then goto L40dd24;
  #L40dd00.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.f` @type ^`boolean` @kind boolean;
  #L40dd04.  if v3 != 0 then goto L40dd1c;
  #L40dd08.  call `e`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @kind virtual;
  #L40dd0e.  v2:= 1I;
  #L40dd10.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.l` @type ^`boolean` := v2 @kind boolean;
  #L40dd14.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.drain:()V` @kind virtual;
  #L40dd1a.  goto L40dd2a;
  #L40dd1c.  call `i`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.i:(I)V` @kind virtual;
  #L40dd22.  goto L40dd2a;
  #L40dd24.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40dd2a.  return @kind void;
}
procedure `void` `k`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v3 @kind this, `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.k:(ILjava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L40dd3c.  @monitorenter v3
  #L40dd3e.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.e` @type ^`java.lang.Object`[] @kind object;
  #L40dd42.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.h` @type ^`int`;
  #L40dd46.  v2:= v0[v4] @kind object;
  #L40dd4a.  if v2 != 0 then goto L40dd56;
  #L40dd4e.  v1:= v1 + 1;
  #L40dd52.  v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.h` @type ^`int` := v1;
  #L40dd56.  v0[v4]:= v5 @kind object;
  #L40dd5a.  v5:= length @variable v0;
  #L40dd5c.  if v5 != v1 then goto L40dd7e;
  #L40dd60.  v5:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L40dd64.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b`[] @kind object;
  #L40dd68.  v1:= v1[v4] @kind object;
  #L40dd6c.  call temp:= `clone`(v0) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L40dd72.  v0:= temp @kind object;
  #L40dd74.  call temp:= `offer`(v5, v1, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L40dd7a.  v5:= 0I;
  #L40dd7c.  goto L40dd80;
  #L40dd7e.  v5:= 1I;
  #L40dd80.  @monitorexit v3
  #L40dd82.  if v5 == 0 then goto L40dd96;
  #L40dd86.  v5:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b`[] @kind object;
  #L40dd8a.  v4:= v5[v4] @kind object;
  #L40dd8e.  call `b`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$b;.b:()V` @kind virtual;
  #L40dd94.  goto L40dd9c;
  #L40dd96.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.drain:()V` @kind virtual;
  #L40dd9c.  return @kind void;
  #L40dd9e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40dda0.  @monitorexit v3
  #L40dda2.  throw v4;
  catch `java.lang.Throwable` @[L40dd3e..L40dd82] goto L40dd9e;
  catch `java.lang.Throwable` @[L40dda0..L40dda2] goto L40dd9e;
}
procedure `void` `l`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v4 @kind this, `org.reactivestreams.Publisher`[] v5 @kind object, `int` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.l:([Lorg/reactivestreams/Publisher;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40ddf8.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b`[] @kind object;
  #L40ddfc.  v1:= 0I;
  #L40ddfe.  if v1 >= v6 then goto L40de28;
  #L40de02.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.l` @type ^`boolean` @kind boolean;
  #L40de06.  if v2 != 0 then goto L40de28;
  #L40de0a.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.j` @type ^`boolean` @kind boolean;
  #L40de0e.  if v2 == 0 then goto L40de14;
  #L40de12.  goto L40de28;
  #L40de14.  v2:= v5[v1] @kind object;
  #L40de18.  v3:= v0[v1] @kind object;
  #L40de1c.  call `subscribe`(v2, v3) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40de22.  v1:= v1 + 1;
  #L40de26.  goto L40ddfe;
  #L40de28.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40d978.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L40d97c.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L40d982.  v0:= temp @kind object;
  #L40d984.  if v0 != 0 then goto L40d98c;
  #L40d988.  v0:= 0I;
  #L40d98a.  return v0 @kind object;
  #L40d98c.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L40d990.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L40d996.  v1:= temp @kind object;
  #L40d998.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L40d99c.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L40d9a0.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L40d9a6.  v1:= temp @kind object;
  #L40d9a8.  v0:= (`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b`) v0 @kind object;
  #L40d9ac.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$b;.b:()V` @kind virtual;
  #L40d9b2.  return v1 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40ddc8.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L40ddce.  v0:= temp;
  #L40ddd0.  if v0 == 0 then goto L40dde4;
  #L40ddd4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40ddd8.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L40ddde.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.drain:()V` @kind virtual;
  #L40dde4.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40d94c.  v0:= v3 ^& 4;
  #L40d950.  v1:= 0I;
  #L40d952.  if v0 == 0 then goto L40d958;
  #L40d956.  return v1;
  #L40d958.  v3:= v3 ^& 2;
  #L40d95c.  if v3 == 0 then goto L40d962;
  #L40d960.  v1:= 1I;
  #L40d962.  v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.g` @type ^`boolean` := v1 @kind boolean;
  #L40d966.  return v3;
}
