record `io.reactivex.internal.operators.flowable.FlowableFlatMap$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableFlatMap$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableFlatMap$b` `io.reactivex.internal.operators.flowable.FlowableFlatMap$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMap$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMap$a.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMap$a.e` @AccessFlag VOLATILE;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.flowable.FlowableFlatMap$a.f` @AccessFlag VOLATILE;
  `long` `io.reactivex.internal.operators.flowable.FlowableFlatMap$a.g` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMap$a.h` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFlatMap$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$a` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMap$b` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4130c4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4130ca.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.a` @type ^`long` := v2 @kind wide;
  #L4130ce.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` := v1 @kind object;
  #L4130d2.  v1:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.e` @type ^`int`;
  #L4130d6.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.d` @type ^`int` := v1;
  #L4130da.  v1:= v1 ^> 2;
  #L4130de.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.c` @type ^`int` := v1;
  #L4130e2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$a` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;.a:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4131fc.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.h` @type ^`int`;
  #L413200.  v1:= 1I;
  #L413202.  if v0 == v1 then goto L41323a;
  #L413206.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.g` @type ^`long` @kind wide;
  #L41320a.  v0:= v0 + v4 @kind long;
  #L41320c.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.c` @type ^`int`;
  #L413210.  v4:= (`long`) v4 @kind i2l;
  #L413212.  v2:= lcmp(v0, v4);
  #L413216.  if v2 < 0 then goto L413236;
  #L41321a.  v4:= 0L;
  #L41321e.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.g` @type ^`long` := v4 @kind wide;
  #L413222.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L413228.  v4:= temp @kind object;
  #L41322a.  v4:= (`org.reactivestreams.Subscription`) v4 @kind object;
  #L41322e.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L413234.  goto L41323a;
  #L413236.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.g` @type ^`long` := v0 @kind wide;
  #L41323a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4130f4.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4130fa.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41309c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4130a2.  v0:= temp @kind object;
  #L4130a4.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4130a8.  if v0 != v1 then goto L4130b0;
  #L4130ac.  v0:= 1I;
  #L4130ae.  goto L4130b2;
  #L4130b0.  v0:= 0I;
  #L4130b2.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41310c.  v0:= 1I;
  #L41310e.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.e` @type ^`boolean` := v0 @kind boolean;
  #L413112.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` @kind object;
  #L413116.  call `e`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @kind virtual;
  #L41311c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L413130.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L413134.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L41313a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` @kind object;
  #L41313e.  call `i`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.i:(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;Ljava/lang/Throwable;)V` @kind virtual;
  #L413144.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L413158.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.h` @type ^`int`;
  #L41315c.  v1:= 2I;
  #L41315e.  if v0 == v1 then goto L41316e;
  #L413162.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` @kind object;
  #L413166.  call `k`(v0, v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.k:(Ljava/lang/Object;Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;)V` @kind virtual;
  #L41316c.  goto L413178;
  #L41316e.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` @kind object;
  #L413172.  call `e`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @kind virtual;
  #L413178.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$a` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L41318c.  call temp:= `setOnce`(v3, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L413192.  v0:= temp;
  #L413194.  if v0 == 0 then goto L4131e8;
  #L413198.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L41319c.  if v0 == 0 then goto L4131dc;
  #L4131a0.  v0:= v4 @kind object;
  #L4131a2.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L4131a6.  v1:= 7I;
  #L4131a8.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4131ae.  v1:= temp;
  #L4131b0.  v2:= 1I;
  #L4131b2.  if v1 != v2 then goto L4131ce;
  #L4131b6.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.h` @type ^`int` := v1;
  #L4131ba.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.f` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4131be.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.e` @type ^`boolean` := v2 @kind boolean;
  #L4131c2.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` @kind object;
  #L4131c6.  call `e`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @kind virtual;
  #L4131cc.  return @kind void;
  #L4131ce.  v2:= 2I;
  #L4131d0.  if v1 != v2 then goto L4131dc;
  #L4131d4.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.h` @type ^`int` := v1;
  #L4131d8.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.f` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4131dc.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.d` @type ^`int`;
  #L4131e0.  v0:= (`long`) v0 @kind i2l;
  #L4131e2.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4131e8.  return @kind void;
}
