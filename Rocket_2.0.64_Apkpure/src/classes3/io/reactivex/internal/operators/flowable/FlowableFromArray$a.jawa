record `io.reactivex.internal.operators.flowable.FlowableFromArray$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableFromArray$c` @kind class {
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.flowable.FlowableFromArray$a.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFromArray$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromArray$a` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$a;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;[Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L415e28.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$c;.<init>:([Ljava/lang/Object;)V` @kind direct;
  #L415e2e.  v0.`io.reactivex.internal.operators.flowable.FlowableFromArray$a.d` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L415e32.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableFromArray$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L415e44.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.a` @type ^`java.lang.Object`[] @kind object;
  #L415e48.  v1:= length @variable v0;
  #L415e4a.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$a.d` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L415e4e.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int`;
  #L415e52.  if v3 == v1 then goto L415e8a;
  #L415e56.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L415e5a.  if v4 == 0 then goto L415e60;
  #L415e5e.  return @kind void;
  #L415e60.  v4:= v0[v3] @kind object;
  #L415e64.  if v4 != 0 then goto L415e7e;
  #L415e68.  v0:= new `java.lang.NullPointerException`;
  #L415e6c.  v1:= "array element is null" @kind object;
  #L415e70.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L415e76.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L415e7c.  return @kind void;
  #L415e7e.  call temp:= `tryOnNext`(v2, v4) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L415e84.  v3:= v3 + 1;
  #L415e88.  goto L415e52;
  #L415e8a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L415e8e.  if v0 == 0 then goto L415e94;
  #L415e92.  return @kind void;
  #L415e94.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L415e9a.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableFromArray$a` v10 @kind this, `long` v11 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$a;.e:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L415eac.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.a` @type ^`java.lang.Object`[] @kind object;
  #L415eb0.  v1:= length @variable v0;
  #L415eb2.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int`;
  #L415eb6.  v3:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$a.d` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L415eba.  v4:= 0L;
  #L415ebe.  v6:= v4 @kind wide;
  #L415ec0.  v8:= lcmp(v6, v11);
  #L415ec4.  if v8 == 0 then goto L415f0c;
  #L415ec8.  if v2 == v1 then goto L415f0c;
  #L415ecc.  v8:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L415ed0.  if v8 == 0 then goto L415ed6;
  #L415ed4.  return @kind void;
  #L415ed6.  v8:= v0[v2] @kind object;
  #L415eda.  if v8 != 0 then goto L415ef4;
  #L415ede.  v11:= new `java.lang.NullPointerException`;
  #L415ee2.  v12:= "array element is null" @kind object;
  #L415ee6.  call `<init>`(v11, v12) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L415eec.  call `onError`(v3, v11) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L415ef2.  return @kind void;
  #L415ef4.  call temp:= `tryOnNext`(v3, v8) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L415efa.  v8:= temp;
  #L415efc.  if v8 == 0 then goto L415f06;
  #L415f00.  v8:= 1L;
  #L415f04.  v6:= v6 + v8 @kind long;
  #L415f06.  v2:= v2 + 1;
  #L415f0a.  goto L415ec0;
  #L415f0c.  if v2 != v1 then goto L415f20;
  #L415f10.  v11:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L415f14.  if v11 != 0 then goto L415f1e;
  #L415f18.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L415f1e.  return @kind void;
  #L415f20.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L415f26.  v11:= temp @kind wide;
  #L415f28.  v8:= lcmp(v6, v11);
  #L415f2c.  if v8 != 0 then goto L415ec0;
  #L415f30.  v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int` := v2;
  #L415f34.  v11:= -v6 @kind long;
  #L415f36.  call temp:= `addAndGet`(v10, v11) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L415f3c.  v11:= temp @kind wide;
  #L415f3e.  v6:= lcmp(v11, v4);
  #L415f42.  if v6 != 0 then goto L415ebe;
  #L415f46.  return @kind void;
}
