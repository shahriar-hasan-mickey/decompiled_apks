record `io.reactivex.internal.operators.flowable.FlowableFromIterable$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableFromIterable$a` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableFromIterable$c.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFromIterable$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$c;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L416664.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$a;.<init>:(Ljava/util/Iterator;)V` @kind direct;
  #L41666a.  v0.`io.reactivex.internal.operators.flowable.FlowableFromIterable$c.d` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L41666e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$c` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$c;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L416680.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` @kind object;
  #L416684.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L416688.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L41668c.  if v2 == 0 then goto L416692;
  #L416690.  return @kind void;
  #L416692.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L416698.  v2:= temp @kind object;
  #L41669a.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L41669e.  if v3 == 0 then goto L4166a4;
  #L4166a2.  return @kind void;
  #L4166a4.  if v2 != 0 then goto L4166be;
  #L4166a8.  v0:= new `java.lang.NullPointerException`;
  #L4166ac.  v2:= "Iterator.next() returned a null value" @kind object;
  #L4166b0.  call `<init>`(v0, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4166b6.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4166bc.  return @kind void;
  #L4166be.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4166c4.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L4166c8.  if v2 == 0 then goto L4166ce;
  #L4166cc.  return @kind void;
  #L4166ce.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4166d4.  v2:= temp;
  #L4166d6.  if v2 != 0 then goto L416688;
  #L4166da.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L4166de.  if v0 != 0 then goto L4166e8;
  #L4166e2.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4166e8.  return @kind void;
  #L4166ea.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4166ec.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4166f2.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4166f8.  return @kind void;
  #L4166fa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4166fc.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L416702.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L416708.  return @kind void;
  catch `java.lang.Throwable` @[L416692..L41669a] goto L4166fa;
  catch `java.lang.Throwable` @[L4166ce..L4166d6] goto L4166ea;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$c` v8 @kind this, `long` v9 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$c;.e:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L416734.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` @kind object;
  #L416738.  v1:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41673c.  v2:= 0L;
  #L416740.  v4:= v2 @kind wide;
  #L416742.  v6:= lcmp(v4, v9);
  #L416746.  if v6 == 0 then goto L4167d4;
  #L41674a.  v6:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L41674e.  if v6 == 0 then goto L416754;
  #L416752.  return @kind void;
  #L416754.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L41675a.  v6:= temp @kind object;
  #L41675c.  v7:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L416760.  if v7 == 0 then goto L416766;
  #L416764.  return @kind void;
  #L416766.  if v6 != 0 then goto L416780;
  #L41676a.  v9:= new `java.lang.NullPointerException`;
  #L41676e.  v10:= "Iterator.next() returned a null value" @kind object;
  #L416772.  call `<init>`(v9, v10) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L416778.  call `onError`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41677e.  return @kind void;
  #L416780.  call `onNext`(v1, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L416786.  v6:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L41678a.  if v6 == 0 then goto L416790;
  #L41678e.  return @kind void;
  #L416790.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L416796.  v6:= temp;
  #L416798.  if v6 != 0 then goto L4167ac;
  #L41679c.  v9:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L4167a0.  if v9 != 0 then goto L4167aa;
  #L4167a4.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4167aa.  return @kind void;
  #L4167ac.  v6:= 1L;
  #L4167b0.  v4:= v4 + v6 @kind long;
  #L4167b2.  goto L416742;
  #L4167b4.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4167b6.  call `throwIfFatal`(v9) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4167bc.  call `onError`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4167c2.  return @kind void;
  #L4167c4.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4167c6.  call `throwIfFatal`(v9) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4167cc.  call `onError`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4167d2.  return @kind void;
  #L4167d4.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4167da.  v9:= temp @kind wide;
  #L4167dc.  v6:= lcmp(v4, v9);
  #L4167e0.  if v6 != 0 then goto L416742;
  #L4167e4.  v9:= -v4 @kind long;
  #L4167e6.  call temp:= `addAndGet`(v8, v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4167ec.  v9:= temp @kind wide;
  #L4167ee.  v4:= lcmp(v9, v2);
  #L4167f2.  if v4 != 0 then goto L416740;
  #L4167f6.  return @kind void;
  catch `java.lang.Throwable` @[L416754..L41675c] goto L4167c4;
  catch `java.lang.Throwable` @[L416790..L416798] goto L4167b4;
}
