record `io.reactivex.internal.operators.flowable.FlowableScanSeed$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableScanSeed$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.flowable.FlowableScanSeed$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.flowable.FlowableScanSeed$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableScanSeed$a.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableScanSeed$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableScanSeed$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableScanSeed$a.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableScanSeed$a.h` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableScanSeed$a.i` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableScanSeed$a.j` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableScanSeed$a.k` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableScanSeed$a.l` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableScanSeed$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object, `java.lang.Object` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/BiFunction;Ljava/lang/Object;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L420dc0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L420dc6.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L420dca.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.b` @type ^`io.reactivex.functions.BiFunction` := v2 @kind object;
  #L420dce.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.k` @type ^`java.lang.Object` := v3 @kind object;
  #L420dd2.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.e` @type ^`int` := v4;
  #L420dd6.  v1:= v4 ^> 2;
  #L420dda.  v1:= v4 - v1 @kind int;
  #L420dde.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.f` @type ^`int` := v1;
  #L420de2.  v1:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L420de6.  call `<init>`(v1, v4) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L420dec.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.c` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L420df0.  call temp:= `offer`(v1, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L420df6.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L420dfa.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L420e00.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L420e04.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$a` v18 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L420e50.  v0:= v18 @kind object;
  #L420e54.  call temp:= `getAndIncrement`(v18) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L420e5a.  v1:= temp;
  #L420e5c.  if v1 == 0 then goto L420e62;
  #L420e60.  return @kind void;
  #L420e62.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L420e66.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.c` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L420e6a.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.f` @type ^`int`;
  #L420e6e.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.l` @type ^`int`;
  #L420e72.  v5:= 1I;
  #L420e74.  v6:= 1I;
  #L420e76.  v7:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L420e7a.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L420e80.  v7:= temp @kind wide;
  #L420e82.  v9:= 0L;
  #L420e86.  v11:= v9 @kind wide;
  #L420e88.  v13:= lcmp(v11, v7);
  #L420e8c.  if v13 == 0 then goto L420f12;
  #L420e90.  v14:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.g` @type ^`boolean` @kind boolean;
  #L420e94.  if v14 == 0 then goto L420ea0;
  #L420e98.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L420e9e.  return @kind void;
  #L420ea0.  v14:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.h` @type ^`boolean` @kind boolean;
  #L420ea4.  if v14 == 0 then goto L420ebe;
  #L420ea8.  v15:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.i` @type ^`java.lang.Throwable` @kind object;
  #L420eac.  if v15 == 0 then goto L420ebe;
  #L420eb0.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L420eb6.  call `onError`(v1, v15) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L420ebc.  return @kind void;
  #L420ebe.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L420ec4.  v15:= temp @kind object;
  #L420ec6.  v16:= 0I;
  #L420eca.  if v15 != 0 then goto L420ed4;
  #L420ece.  v17:= 1I;
  #L420ed2.  goto L420ed8;
  #L420ed4.  v17:= 0I;
  #L420ed8.  if v14 == 0 then goto L420ee8;
  #L420edc.  if v17 == 0 then goto L420ee8;
  #L420ee0.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L420ee6.  return @kind void;
  #L420ee8.  if v17 == 0 then goto L420eee;
  #L420eec.  goto L420f12;
  #L420eee.  call `onNext`(v1, v15) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L420ef4.  v13:= 1L;
  #L420ef8.  v11:= v11 + v13 @kind long;
  #L420efa.  v4:= v4 + 1;
  #L420efe.  if v4 != v3 then goto L420e88;
  #L420f02.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L420f06.  v13:= (`long`) v3 @kind i2l;
  #L420f08.  call `request`(v4, v13) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L420f0e.  v4:= 0I;
  #L420f10.  goto L420e88;
  #L420f12.  if v13 != 0 then goto L420f48;
  #L420f16.  v7:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.h` @type ^`boolean` @kind boolean;
  #L420f1a.  if v7 == 0 then goto L420f48;
  #L420f1e.  v7:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.i` @type ^`java.lang.Throwable` @kind object;
  #L420f22.  if v7 == 0 then goto L420f34;
  #L420f26.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L420f2c.  call `onError`(v1, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L420f32.  return @kind void;
  #L420f34.  call temp:= `isEmpty`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L420f3a.  v7:= temp;
  #L420f3c.  if v7 == 0 then goto L420f48;
  #L420f40.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L420f46.  return @kind void;
  #L420f48.  v7:= lcmp(v11, v9);
  #L420f4c.  if v7 == 0 then goto L420f5a;
  #L420f50.  v7:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L420f54.  call temp:= `produced`(v7, v11) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L420f5a.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.l` @type ^`int` := v4;
  #L420f5e.  v6:= -v6 @kind int;
  #L420f60.  call temp:= `addAndGet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L420f66.  v6:= temp;
  #L420f68.  if v6 != 0 then goto L420e76;
  #L420f6c.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L420e18.  v0:= 1I;
  #L420e1a.  v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.g` @type ^`boolean` := v0 @kind boolean;
  #L420e1e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L420e22.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L420e28.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L420e2e.  v0:= temp;
  #L420e30.  if v0 != 0 then goto L420e3e;
  #L420e34.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.c` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L420e38.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L420e3e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L420f80.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.h` @type ^`boolean` @kind boolean;
  #L420f84.  if v0 == 0 then goto L420f8a;
  #L420f88.  return @kind void;
  #L420f8a.  v0:= 1I;
  #L420f8c.  v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.h` @type ^`boolean` := v0 @kind boolean;
  #L420f90.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$a;.a:()V` @kind virtual;
  #L420f96.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L420fa8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.h` @type ^`boolean` @kind boolean;
  #L420fac.  if v0 == 0 then goto L420fb8;
  #L420fb0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L420fb6.  return @kind void;
  #L420fb8.  v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.i` @type ^`java.lang.Throwable` := v2 @kind object;
  #L420fbc.  v2:= 1I;
  #L420fbe.  v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.h` @type ^`boolean` := v2 @kind boolean;
  #L420fc2.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$a;.a:()V` @kind virtual;
  #L420fc8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L420fdc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.h` @type ^`boolean` @kind boolean;
  #L420fe0.  if v0 == 0 then goto L420fe6;
  #L420fe4.  return @kind void;
  #L420fe6.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.k` @type ^`java.lang.Object` @kind object;
  #L420fea.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.b` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L420fee.  call temp:= `apply`(v1, v0, v3) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L420ff4.  v3:= temp @kind object;
  #L420ff6.  v0:= "The accumulator returned a null value" @kind object;
  #L420ffa.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L421000.  v3:= temp @kind object;
  #L421002.  v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.k` @type ^`java.lang.Object` := v3 @kind object;
  #L421006.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.c` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L42100a.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L421010.  call `a`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$a;.a:()V` @kind virtual;
  #L421016.  return @kind void;
  #L421018.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42101a.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L421020.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L421024.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L42102a.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L421030.  return @kind void;
  catch `java.lang.Throwable` @[L420fea..L421002] goto L421018;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L421050.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L421054.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L42105a.  v0:= temp;
  #L42105c.  if v0 == 0 then goto L42107e;
  #L421060.  v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.j` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L421064.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L421068.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L42106e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.e` @type ^`int`;
  #L421072.  v0:= v0 + -1;
  #L421076.  v0:= (`long`) v0 @kind i2l;
  #L421078.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L42107e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L421090.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L421096.  v0:= temp;
  #L421098.  if v0 == 0 then goto L4210ac;
  #L42109c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4210a0.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4210a6.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$a;.a:()V` @kind virtual;
  #L4210ac.  return @kind void;
}
