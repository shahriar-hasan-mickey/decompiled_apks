record `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.c` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.e` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.g` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.h` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.i` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.j` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object, `int` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L426e40.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L426e44.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L426e4a.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L426e50.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L426e54.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L426e5a.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.h` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L426e5e.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L426e62.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L426e68.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.j` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L426e6c.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.c` @type ^`org.reactivestreams.Publisher` := v3 @kind object;
  #L426e70.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.d` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L426e74.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.e` @type ^`int` := v5;
  #L426e78.  v3:= new `io.reactivex.disposables.CompositeDisposable`;
  #L426e7c.  call `<init>`(v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L426e82.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.f` @type ^`io.reactivex.disposables.CompositeDisposable` := v3 @kind object;
  #L426e86.  v3:= new `java.util.ArrayList`;
  #L426e8a.  call `<init>`(v3) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L426e90.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.i` @type ^`java.util.List` := v3 @kind object;
  #L426e94.  v3:= 1L;
  #L426e98.  call `lazySet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L426e9e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` v3 @kind this, `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.a:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L426ec8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.f` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L426ecc.  call temp:= `delete`(v0, v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L426ed2.  v0:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L426ed6.  v1:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$d`;
  #L426eda.  v4:= v4.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a.c` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L426ede.  v2:= 0I;
  #L426ee0.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$d;.<init>:(Lio/reactivex/processors/UnicastProcessor;Ljava/lang/Object;)V` @kind direct;
  #L426ee6.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L426eec.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L426ef2.  v4:= temp;
  #L426ef4.  if v4 == 0 then goto L426efe;
  #L426ef8.  call `b`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.b:()V` @kind virtual;
  #L426efe.  return @kind void;
}
procedure `boolean` `accept`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L426e2c.  v1:= 0I;
  #L426e2e.  return v1;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` v12 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L426f38.  v0:= v12.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L426f3c.  v1:= v12.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L426f40.  v2:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.i` @type ^`java.util.List` @kind object;
  #L426f44.  v3:= 1I;
  #L426f46.  v4:= 1I;
  #L426f48.  v5:= v12.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` @kind boolean;
  #L426f4c.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L426f52.  v6:= temp @kind object;
  #L426f54.  if v6 != 0 then goto L426f5c;
  #L426f58.  v7:= 1I;
  #L426f5a.  goto L426f5e;
  #L426f5c.  v7:= 0I;
  #L426f5e.  if v5 == 0 then goto L426fcc;
  #L426f62.  if v7 == 0 then goto L426fcc;
  #L426f66.  call `dispose`(v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.dispose:()V` @kind virtual;
  #L426f6c.  v0:= v12.`io.reactivex.internal.subscribers.QueueDrainSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L426f70.  if v0 == 0 then goto L426f9c;
  #L426f74.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L426f7a.  v1:= temp @kind object;
  #L426f7c.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L426f82.  v3:= temp;
  #L426f84.  if v3 == 0 then goto L426fc4;
  #L426f88.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L426f8e.  v3:= temp @kind object;
  #L426f90.  v3:= (`io.reactivex.processors.UnicastProcessor`) v3 @kind object;
  #L426f94.  call `onError`(v3, v0) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L426f9a.  goto L426f7c;
  #L426f9c.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L426fa2.  v0:= temp @kind object;
  #L426fa4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L426faa.  v1:= temp;
  #L426fac.  if v1 == 0 then goto L426fc4;
  #L426fb0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L426fb6.  v1:= temp @kind object;
  #L426fb8.  v1:= (`io.reactivex.processors.UnicastProcessor`) v1 @kind object;
  #L426fbc.  call `onComplete`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L426fc2.  goto L426fa4;
  #L426fc4.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L426fca.  return @kind void;
  #L426fcc.  if v7 == 0 then goto L426fe0;
  #L426fd0.  v4:= -v4 @kind int;
  #L426fd2.  call temp:= `leave`(v12, v4) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L426fd8.  v4:= temp;
  #L426fda.  if v4 != 0 then goto L426f48;
  #L426fde.  return @kind void;
  #L426fe0.  v5:= instanceof @variable v6 @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$d` @kind boolean;
  #L426fe4.  if v5 == 0 then goto L4270f2;
  #L426fe8.  v6:= (`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$d`) v6 @kind object;
  #L426fec.  v5:= v6.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$d.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L426ff0.  v7:= 0L;
  #L426ff4.  if v5 == 0 then goto L42702a;
  #L426ff8.  call temp:= `remove`(v2, v5) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L426ffe.  v5:= temp;
  #L427000.  if v5 == 0 then goto L426f48;
  #L427004.  v5:= v6.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$d.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L427008.  call `onComplete`(v5) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L42700e.  v5:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.j` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L427012.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L427018.  v5:= temp @kind wide;
  #L42701a.  v9:= lcmp(v5, v7);
  #L42701e.  if v9 != 0 then goto L426f48;
  #L427022.  call `dispose`(v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.dispose:()V` @kind virtual;
  #L427028.  return @kind void;
  #L42702a.  v5:= v12.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L42702e.  if v5 == 0 then goto L427034;
  #L427032.  goto L426f48;
  #L427034.  v5:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.e` @type ^`int`;
  #L427038.  call temp:= `create`(v5) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L42703e.  v5:= temp @kind object;
  #L427040.  call temp:= `requested`(v12) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:()J` @kind virtual;
  #L427046.  v9:= temp @kind wide;
  #L427048.  v11:= lcmp(v9, v7);
  #L42704c.  if v11 == 0 then goto L4270d6;
  #L427050.  call temp:= `add`(v2, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L427056.  call `onNext`(v1, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42705c.  v7:= 9223372036854775807L;
  #L427066.  v11:= lcmp(v9, v7);
  #L42706a.  if v11 == 0 then goto L427078;
  #L42706e.  v7:= 1L;
  #L427072.  call temp:= `produced`(v12, v7) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L427078.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.d` @type ^`io.reactivex.functions.Function` @kind object;
  #L42707c.  v6:= v6.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$d.b` @type ^`java.lang.Object` @kind object;
  #L427080.  call temp:= `apply`(v7, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L427086.  v6:= temp @kind object;
  #L427088.  v7:= "The publisher supplied is null" @kind object;
  #L42708c.  call temp:= `requireNonNull`(v6, v7) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L427092.  v6:= temp @kind object;
  #L427094.  v6:= (`org.reactivestreams.Publisher`) v6 @kind object;
  #L427098.  v7:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a`;
  #L42709c.  call `<init>`(v7, v12, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;Lio/reactivex/processors/UnicastProcessor;)V` @kind direct;
  #L4270a2.  v5:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.f` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4270a6.  call temp:= `add`(v5, v7) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4270ac.  v5:= temp;
  #L4270ae.  if v5 == 0 then goto L426f48;
  #L4270b2.  v5:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.j` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4270b6.  call temp:= `getAndIncrement`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndIncrement:()J` @kind virtual;
  #L4270bc.  call `subscribe`(v6, v7) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4270c2.  goto L426f48;
  #L4270c6.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4270c8.  v12.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v3 @kind boolean;
  #L4270cc.  call `onError`(v1, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4270d2.  goto L426f48;
  #L4270d6.  v12.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v3 @kind boolean;
  #L4270da.  v5:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L4270de.  v6:= "Could not deliver new window due to lack of requests" @kind object;
  #L4270e2.  call `<init>`(v5, v6) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4270e8.  call `onError`(v1, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4270ee.  goto L426f48;
  #L4270f2.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4270f8.  v5:= temp @kind object;
  #L4270fa.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L427100.  v7:= temp;
  #L427102.  if v7 == 0 then goto L426f48;
  #L427106.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L42710c.  v7:= temp @kind object;
  #L42710e.  v7:= (`io.reactivex.processors.UnicastProcessor`) v7 @kind object;
  #L427112.  call temp:= `getValue`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L427118.  v8:= temp @kind object;
  #L42711a.  call `onNext`(v7, v8) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L427120.  goto L4270fa;
  catch `java.lang.Throwable` @[L427078..L427098] goto L4270c6;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.c:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L427140.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L427144.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L42714a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.f` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L42714e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L427154.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L427158.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42715e.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L427162.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L427168.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L426eb0.  v0:= 1I;
  #L426eb2.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L426eb6.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.d:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L427350.  v0:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L427354.  v1:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$d`;
  #L427358.  v2:= 0I;
  #L42735a.  call `<init>`(v1, v2, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$d;.<init>:(Lio/reactivex/processors/UnicastProcessor;Ljava/lang/Object;)V` @kind direct;
  #L427360.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L427366.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L42736c.  v4:= temp;
  #L42736e.  if v4 == 0 then goto L427378;
  #L427372.  call `b`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.b:()V` @kind virtual;
  #L427378.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.dispose:()V` @AccessFlag  {
    temp;
    v0;

  #L426f10.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.f` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L426f14.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L426f1a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L426f1e.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L426f24.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42717c.  v0:= v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` @kind boolean;
  #L427180.  if v0 == 0 then goto L427186;
  #L427184.  return @kind void;
  #L427186.  v0:= 1I;
  #L427188.  v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L42718c.  call temp:= `enter`(v5) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L427192.  v0:= temp;
  #L427194.  if v0 == 0 then goto L42719e;
  #L427198.  call `b`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.b:()V` @kind virtual;
  #L42719e.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.j` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4271a2.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L4271a8.  v0:= temp @kind wide;
  #L4271aa.  v2:= 0L;
  #L4271ae.  v4:= lcmp(v0, v2);
  #L4271b2.  if v4 != 0 then goto L4271c0;
  #L4271b6.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.f` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4271ba.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4271c0.  v0:= v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4271c4.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4271ca.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4271dc.  v0:= v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` @kind boolean;
  #L4271e0.  if v0 == 0 then goto L4271ec;
  #L4271e4.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4271ea.  return @kind void;
  #L4271ec.  v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.error` @type ^`java.lang.Throwable` := v6 @kind object;
  #L4271f0.  v0:= 1I;
  #L4271f2.  v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4271f6.  call temp:= `enter`(v5) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L4271fc.  v0:= temp;
  #L4271fe.  if v0 == 0 then goto L427208;
  #L427202.  call `b`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.b:()V` @kind virtual;
  #L427208.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.j` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L42720c.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L427212.  v0:= temp @kind wide;
  #L427214.  v2:= 0L;
  #L427218.  v4:= lcmp(v0, v2);
  #L42721c.  if v4 != 0 then goto L42722a;
  #L427220.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.f` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L427224.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L42722a.  v0:= v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L42722e.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L427234.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L427248.  v0:= v2.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` @kind boolean;
  #L42724c.  if v0 == 0 then goto L427252;
  #L427250.  return @kind void;
  #L427252.  call temp:= `fastEnter`(v2) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastEnter:()Z` @kind virtual;
  #L427258.  v0:= temp;
  #L42725a.  if v0 == 0 then goto L42729a;
  #L42725e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.i` @type ^`java.util.List` @kind object;
  #L427262.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L427268.  v0:= temp @kind object;
  #L42726a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L427270.  v1:= temp;
  #L427272.  if v1 == 0 then goto L42728a;
  #L427276.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L42727c.  v1:= temp @kind object;
  #L42727e.  v1:= (`io.reactivex.processors.UnicastProcessor`) v1 @kind object;
  #L427282.  call `onNext`(v1, v3) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L427288.  goto L42726a;
  #L42728a.  v3:= -1I;
  #L42728c.  call temp:= `leave`(v2, v3) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L427292.  v3:= temp;
  #L427294.  if v3 != 0 then goto L4272ba;
  #L427298.  return @kind void;
  #L42729a.  v0:= v2.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L42729e.  call temp:= `next`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4272a4.  v3:= temp @kind object;
  #L4272a6.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4272ac.  call temp:= `enter`(v2) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L4272b2.  v3:= temp;
  #L4272b4.  if v3 != 0 then goto L4272ba;
  #L4272b8.  return @kind void;
  #L4272ba.  call `b`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.b:()V` @kind virtual;
  #L4272c0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4272d4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4272d8.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4272de.  v0:= temp;
  #L4272e0.  if v0 == 0 then goto L42733c;
  #L4272e4.  v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.g` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L4272e8.  v0:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4272ec.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4272f2.  v0:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4272f6.  if v0 == 0 then goto L4272fc;
  #L4272fa.  return @kind void;
  #L4272fc.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$b`;
  #L427300.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$b;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;)V` @kind direct;
  #L427306.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42730a.  v2:= 0I;
  #L42730c.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L427312.  v1:= temp;
  #L427314.  if v1 == 0 then goto L42733c;
  #L427318.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.j` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L42731c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndIncrement:()J` @kind virtual;
  #L427322.  v1:= 9223372036854775807L;
  #L42732c.  call `request`(v4, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L427332.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.c` @type ^`org.reactivestreams.Publisher` @kind object;
  #L427336.  call `subscribe`(v4, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L42733c.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L42738c.  call `requested`(v0, v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @kind virtual;
  #L427392.  return @kind void;
}
