record `io.reactivex.internal.operators.flowable.FlowableTakeWhile$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeWhile$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L424490.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L424496.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L42449a.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.b` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L42449e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeWhile$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4244b0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4244b4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4244ba.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeWhile$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4244cc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.d` @type ^`boolean` @kind boolean;
  #L4244d0.  if v0 == 0 then goto L4244d6;
  #L4244d4.  return @kind void;
  #L4244d6.  v0:= 1I;
  #L4244d8.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4244dc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4244e0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4244e6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeWhile$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4244f8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.d` @type ^`boolean` @kind boolean;
  #L4244fc.  if v0 == 0 then goto L424508;
  #L424500.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L424506.  return @kind void;
  #L424508.  v0:= 1I;
  #L42450a.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.d` @type ^`boolean` := v0 @kind boolean;
  #L42450e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L424512.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L424518.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeWhile$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42452c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.d` @type ^`boolean` @kind boolean;
  #L424530.  if v0 == 0 then goto L424536;
  #L424534.  return @kind void;
  #L424536.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.b` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L42453a.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L424540.  v0:= temp;
  #L424542.  if v0 != 0 then goto L424562;
  #L424546.  v2:= 1I;
  #L424548.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.d` @type ^`boolean` := v2 @kind boolean;
  #L42454c.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L424550.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L424556.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L42455a.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L424560.  return @kind void;
  #L424562.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L424566.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42456c.  return @kind void;
  #L42456e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L424570.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L424576.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L42457a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L424580.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeWhile$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L424586.  return @kind void;
  catch `java.lang.Throwable` @[L424536..L424542] goto L42456e;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeWhile$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4245a4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4245a8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4245ae.  v0:= temp;
  #L4245b0.  if v0 == 0 then goto L4245c2;
  #L4245b4.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4245b8.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4245bc.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4245c2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeWhile$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4245d4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4245d8.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4245de.  return @kind void;
}
