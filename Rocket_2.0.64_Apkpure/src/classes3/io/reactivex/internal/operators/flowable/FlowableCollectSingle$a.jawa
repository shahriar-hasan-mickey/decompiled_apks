record `io.reactivex.internal.operators.flowable.FlowableCollectSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiConsumer` `io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.functions.BiConsumer` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollectSingle$a;.<init>:(Lio/reactivex/SingleObserver;Ljava/lang/Object;Lio/reactivex/functions/BiConsumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40d614.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40d61a.  v0.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L40d61e.  v0.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.b` @type ^`io.reactivex.functions.BiConsumer` := v3 @kind object;
  #L40d622.  v0.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.c` @type ^`java.lang.Object` := v2 @kind object;
  #L40d626.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollectSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40d638.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40d63c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40d642.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L40d646.  v1.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L40d64a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollectSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40d5f0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40d5f4.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L40d5f8.  if v0 != v1 then goto L40d600;
  #L40d5fc.  v0:= 1I;
  #L40d5fe.  goto L40d602;
  #L40d600.  v0:= 0I;
  #L40d602.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollectSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40d65c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.e` @type ^`boolean` @kind boolean;
  #L40d660.  if v0 == 0 then goto L40d666;
  #L40d664.  return @kind void;
  #L40d666.  v0:= 1I;
  #L40d668.  v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.e` @type ^`boolean` := v0 @kind boolean;
  #L40d66c.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L40d670.  v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L40d674.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L40d678.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.c` @type ^`java.lang.Object` @kind object;
  #L40d67c.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L40d682.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollectSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40d694.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.e` @type ^`boolean` @kind boolean;
  #L40d698.  if v0 == 0 then goto L40d6a4;
  #L40d69c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40d6a2.  return @kind void;
  #L40d6a4.  v0:= 1I;
  #L40d6a6.  v1.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.e` @type ^`boolean` := v0 @kind boolean;
  #L40d6aa.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L40d6ae.  v1.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L40d6b2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L40d6b6.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40d6bc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollectSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40d6d0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.e` @type ^`boolean` @kind boolean;
  #L40d6d4.  if v0 == 0 then goto L40d6da;
  #L40d6d8.  return @kind void;
  #L40d6da.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.b` @type ^`io.reactivex.functions.BiConsumer` @kind object;
  #L40d6de.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.c` @type ^`java.lang.Object` @kind object;
  #L40d6e2.  call `accept`(v0, v1, v3) @signature `Lio/reactivex/functions/BiConsumer;.accept:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L40d6e8.  goto L40d702;
  #L40d6ea.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40d6ec.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40d6f2.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40d6f6.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40d6fc.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollectSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40d702.  return @kind void;
  catch `java.lang.Throwable` @[L40d6da..L40d6e8] goto L40d6ea;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollectSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40d720.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40d724.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40d72a.  v0:= temp;
  #L40d72c.  if v0 == 0 then goto L40d74e;
  #L40d730.  v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L40d734.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L40d738.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L40d73e.  v0:= 9223372036854775807L;
  #L40d748.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40d74e.  return @kind void;
}
