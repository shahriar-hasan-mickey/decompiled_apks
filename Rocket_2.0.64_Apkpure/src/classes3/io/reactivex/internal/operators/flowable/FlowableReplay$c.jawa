record `io.reactivex.internal.operators.flowable.FlowableReplay$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.Callable` @kind interface {
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$c` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$c;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41edf0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41edf6.  return @kind void;
}
procedure `java.lang.Object` `call`(`io.reactivex.internal.operators.flowable.FlowableReplay$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$c;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41edd0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReplay$n`;
  #L41edd4.  v1:= 16I;
  #L41edd8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$n;.<init>:(I)V` @kind direct;
  #L41edde.  return v0 @kind object;
}
