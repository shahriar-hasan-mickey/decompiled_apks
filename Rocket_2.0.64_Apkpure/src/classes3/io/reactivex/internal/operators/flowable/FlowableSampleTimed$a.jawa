record `io.reactivex.internal.operators.flowable.FlowableSampleTimed$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableSampleTimed$c` @kind class {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$a.h` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSampleTimed$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L420720.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L420726.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L42072a.  v2:= 1I;
  #L42072c.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L420732.  v0.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$a.h` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L420736.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L420748.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.c:()V` @kind virtual;
  #L42074e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$a.h` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L420752.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L420758.  v0:= temp;
  #L42075a.  if v0 != 0 then goto L420768;
  #L42075e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L420762.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L420768.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42077c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$a.h` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L420780.  call temp:= `incrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L420786.  v0:= temp;
  #L420788.  v1:= 2I;
  #L42078a.  if v0 != v1 then goto L4207ae;
  #L42078e.  call `c`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.c:()V` @kind virtual;
  #L420794.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$a.h` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L420798.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L42079e.  v0:= temp;
  #L4207a0.  if v0 != 0 then goto L4207ae;
  #L4207a4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4207a8.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4207ae.  return @kind void;
}
