record `io.reactivex.internal.operators.flowable.FlowableWindowTimed$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.d` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.g` @AccessFlag ;
  `io.reactivex.processors.UnicastProcessor` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.h` @AccessFlag ;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.i` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.j` @AccessFlag VOLATILE;
}
global `java.lang.Object` `@@io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.k` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4280cc.  v0:= new `java.lang.Object`;
  #L4280d0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4280d6.  `@@io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.k` @type ^`java.lang.Object` := v0 @kind object;
  #L4280da.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object, `int` v7 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4280ec.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L4280f0.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4280f6.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L4280fc.  v2:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L428100.  call `<init>`(v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L428106.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.i` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v2 @kind object;
  #L42810a.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.c` @type ^`long` := v3 @kind wide;
  #L42810e.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.d` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L428112.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.e` @type ^`io.reactivex.Scheduler` := v6 @kind object;
  #L428116.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.f` @type ^`int` := v7;
  #L42811a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b` v10 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L428160.  v0:= v10.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L428164.  v1:= v10.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L428168.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.h` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L42816c.  v3:= 1I;
  #L42816e.  v4:= v10.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.j` @type ^`boolean` @kind boolean;
  #L428172.  v5:= v10.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` @kind boolean;
  #L428176.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L42817c.  v6:= temp @kind object;
  #L42817e.  v7:= 0I;
  #L428180.  if v5 == 0 then goto L4281b8;
  #L428184.  if v6 == 0 then goto L428190;
  #L428188.  v5:= `@@io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.k` @type ^`java.lang.Object` @kind object;
  #L42818c.  if v6 != v5 then goto L4281b8;
  #L428190.  v10.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.h` @type ^`io.reactivex.processors.UnicastProcessor` := v7 @kind object;
  #L428194.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L42819a.  call `dispose`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.dispose:()V` @kind virtual;
  #L4281a0.  v0:= v10.`io.reactivex.internal.subscribers.QueueDrainSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L4281a4.  if v0 == 0 then goto L4281b0;
  #L4281a8.  call `onError`(v2, v0) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4281ae.  goto L4281b6;
  #L4281b0.  call `onComplete`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4281b6.  return @kind void;
  #L4281b8.  if v6 != 0 then goto L4281cc;
  #L4281bc.  v3:= -v3 @kind int;
  #L4281be.  call temp:= `leave`(v10, v3) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L4281c4.  v3:= temp;
  #L4281c6.  if v3 != 0 then goto L42816e;
  #L4281ca.  return @kind void;
  #L4281cc.  v5:= `@@io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.k` @type ^`java.lang.Object` @kind object;
  #L4281d0.  if v6 != v5 then goto L428266;
  #L4281d4.  call `onComplete`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4281da.  if v4 != 0 then goto L42825a;
  #L4281de.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.f` @type ^`int`;
  #L4281e2.  call temp:= `create`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L4281e8.  v2:= temp @kind object;
  #L4281ea.  v10.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.h` @type ^`io.reactivex.processors.UnicastProcessor` := v2 @kind object;
  #L4281ee.  call temp:= `requested`(v10) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:()J` @kind virtual;
  #L4281f4.  v4:= temp @kind wide;
  #L4281f6.  v8:= 0L;
  #L4281fa.  v6:= lcmp(v4, v8);
  #L4281fe.  if v6 == 0 then goto L428226;
  #L428202.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L428208.  v6:= 9223372036854775807L;
  #L428212.  v8:= lcmp(v4, v6);
  #L428216.  if v8 == 0 then goto L42816e;
  #L42821a.  v4:= 1L;
  #L42821e.  call temp:= `produced`(v10, v4) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L428224.  goto L42816e;
  #L428226.  v10.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.h` @type ^`io.reactivex.processors.UnicastProcessor` := v7 @kind object;
  #L42822a.  v0:= v10.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L42822e.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L428234.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L428238.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L42823e.  call `dispose`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.dispose:()V` @kind virtual;
  #L428244.  v0:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L428248.  v2:= "Could not deliver first window due to lack of requests." @kind object;
  #L42824c.  call `<init>`(v0, v2) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L428252.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L428258.  return @kind void;
  #L42825a.  v4:= v10.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L42825e.  call `cancel`(v4) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L428264.  goto L42816e;
  #L428266.  call temp:= `getValue`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L42826c.  v4:= temp @kind object;
  #L42826e.  call `onNext`(v2, v4) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L428274.  goto L42816e;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42812c.  v0:= 1I;
  #L42812e.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L428132.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L428144.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.i` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L428148.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42814e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L428288.  v0:= 1I;
  #L42828a.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L42828e.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L428294.  v0:= temp;
  #L428296.  if v0 == 0 then goto L4282a0;
  #L42829a.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.a:()V` @kind virtual;
  #L4282a0.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4282a4.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4282aa.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.dispose:()V` @kind virtual;
  #L4282b0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4282c4.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4282c8.  v0:= 1I;
  #L4282ca.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4282ce.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L4282d4.  v0:= temp;
  #L4282d6.  if v0 == 0 then goto L4282e0;
  #L4282da.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.a:()V` @kind virtual;
  #L4282e0.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4282e4.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4282ea.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.dispose:()V` @kind virtual;
  #L4282f0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L428304.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.j` @type ^`boolean` @kind boolean;
  #L428308.  if v0 == 0 then goto L42830e;
  #L42830c.  return @kind void;
  #L42830e.  call temp:= `fastEnter`(v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastEnter:()Z` @kind virtual;
  #L428314.  v0:= temp;
  #L428316.  if v0 == 0 then goto L428334;
  #L42831a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.h` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L42831e.  call `onNext`(v0, v2) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L428324.  v2:= -1I;
  #L428326.  call temp:= `leave`(v1, v2) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L42832c.  v2:= temp;
  #L42832e.  if v2 != 0 then goto L428354;
  #L428332.  return @kind void;
  #L428334.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L428338.  call temp:= `next`(v2) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L42833e.  v2:= temp @kind object;
  #L428340.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L428346.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L42834c.  v2:= temp;
  #L42834e.  if v2 != 0 then goto L428354;
  #L428352.  return @kind void;
  #L428354.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.a:()V` @kind virtual;
  #L42835a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b` v12 @kind this, `org.reactivestreams.Subscription` v13 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L42836c.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L428370.  call temp:= `validate`(v0, v13) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L428376.  v0:= temp;
  #L428378.  if v0 == 0 then goto L42842c;
  #L42837c.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.g` @type ^`org.reactivestreams.Subscription` := v13 @kind object;
  #L428380.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.f` @type ^`int`;
  #L428384.  call temp:= `create`(v0) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L42838a.  v0:= temp @kind object;
  #L42838c.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.h` @type ^`io.reactivex.processors.UnicastProcessor` := v0 @kind object;
  #L428390.  v0:= v12.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L428394.  call `onSubscribe`(v0, v12) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L42839a.  call temp:= `requested`(v12) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:()J` @kind virtual;
  #L4283a0.  v1:= temp @kind wide;
  #L4283a2.  v3:= 0L;
  #L4283a6.  v5:= lcmp(v1, v3);
  #L4283aa.  if v5 == 0 then goto L42840c;
  #L4283ae.  v3:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.h` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L4283b2.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4283b8.  v3:= 9223372036854775807L;
  #L4283c2.  v0:= lcmp(v1, v3);
  #L4283c6.  if v0 == 0 then goto L4283d4;
  #L4283ca.  v0:= 1L;
  #L4283ce.  call temp:= `produced`(v12, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L4283d4.  v0:= v12.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4283d8.  if v0 != 0 then goto L42842c;
  #L4283dc.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.i` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L4283e0.  v5:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.e` @type ^`io.reactivex.Scheduler` @kind object;
  #L4283e4.  v9:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.c` @type ^`long` @kind wide;
  #L4283e8.  v11:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4283ec.  v6:= v12 @kind object;
  #L4283ee.  v7:= v9 @kind wide;
  #L4283f0.  call temp:= `schedulePeriodicallyDirect`(v5, v6, v7, v9, v11) @signature `Lio/reactivex/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L4283f6.  v1:= temp @kind object;
  #L4283f8.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4283fe.  v0:= temp;
  #L428400.  if v0 == 0 then goto L42842c;
  #L428404.  call `request`(v13, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L42840a.  goto L42842c;
  #L42840c.  v1:= 1I;
  #L42840e.  v12.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L428412.  call `cancel`(v13) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L428418.  v13:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L42841c.  v1:= "Could not deliver first window due to lack of requests." @kind object;
  #L428420.  call `<init>`(v13, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L428426.  call `onError`(v0, v13) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42842c.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L428440.  call `requested`(v0, v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @kind virtual;
  #L428446.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L428458.  v0:= v2.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L42845c.  if v0 == 0 then goto L42846c;
  #L428460.  v0:= 1I;
  #L428462.  v2.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.j` @type ^`boolean` := v0 @kind boolean;
  #L428466.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.dispose:()V` @kind virtual;
  #L42846c.  v0:= v2.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L428470.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.k` @type ^`java.lang.Object` @kind object;
  #L428474.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L42847a.  call temp:= `enter`(v2) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L428480.  v0:= temp;
  #L428482.  if v0 == 0 then goto L42848c;
  #L428486.  call `a`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.a:()V` @kind virtual;
  #L42848c.  return @kind void;
}
