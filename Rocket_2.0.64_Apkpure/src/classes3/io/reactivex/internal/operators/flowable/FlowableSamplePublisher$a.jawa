record `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c` @kind class {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$a.g` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSamplePublisher$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$a;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L420284.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$c;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L42028a.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L42028e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L420294.  v0.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L420298.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4202ac.  v0:= 1I;
  #L4202ae.  v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4202b2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4202b6.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4202bc.  v0:= temp;
  #L4202be.  if v0 != 0 then goto L4202d2;
  #L4202c2.  call `d`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$c;.d:()V` @kind virtual;
  #L4202c8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4202cc.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4202d2.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$a;.c:()V` @AccessFlag  {
    temp;
    v0;

  #L4202e4.  v0:= 1I;
  #L4202e6.  v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4202ea.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4202ee.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4202f4.  v0:= temp;
  #L4202f6.  if v0 != 0 then goto L42030a;
  #L4202fa.  call `d`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$c;.d:()V` @kind virtual;
  #L420300.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L420304.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L42030a.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$a;.f:()V` @AccessFlag  {
    temp;
    v0;

  #L42031c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L420320.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L420326.  v0:= temp;
  #L420328.  if v0 != 0 then goto L420356;
  #L42032c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$a.g` @type ^`boolean` @kind boolean;
  #L420330.  call `d`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$c;.d:()V` @kind virtual;
  #L420336.  if v0 == 0 then goto L420346;
  #L42033a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L42033e.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L420344.  return @kind void;
  #L420346.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L42034a.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L420350.  v0:= temp;
  #L420352.  if v0 != 0 then goto L42032c;
  #L420356.  return @kind void;
}
