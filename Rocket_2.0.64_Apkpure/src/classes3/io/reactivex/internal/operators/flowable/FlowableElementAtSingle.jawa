record `io.reactivex.internal.operators.flowable.FlowableElementAtSingle` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class, `io.reactivex.internal.fuseable.FuseToFlowable` @kind interface {
  `io.reactivex.Flowable` `io.reactivex.internal.operators.flowable.FlowableElementAtSingle.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableElementAtSingle.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableElementAtSingle.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableElementAtSingle` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `long` v2 , `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle;.<init>:(Lio/reactivex/Flowable;JLjava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L412c7c.  call `<init>`(v0) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L412c82.  v0.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle.a` @type ^`io.reactivex.Flowable` := v1 @kind object;
  #L412c86.  v0.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle.b` @type ^`long` := v2 @kind wide;
  #L412c8a.  v0.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle.c` @type ^`java.lang.Object` := v4 @kind object;
  #L412c8e.  return @kind void;
}
procedure `io.reactivex.Flowable` `fuseToFlowable`(`io.reactivex.internal.operators.flowable.FlowableElementAtSingle` v7 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle;.fuseToFlowable:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L412c48.  v6:= new `io.reactivex.internal.operators.flowable.FlowableElementAt`;
  #L412c4c.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle.a` @type ^`io.reactivex.Flowable` @kind object;
  #L412c50.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle.b` @type ^`long` @kind wide;
  #L412c54.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle.c` @type ^`java.lang.Object` @kind object;
  #L412c58.  v5:= 1I;
  #L412c5a.  v0:= v6 @kind object;
  #L412c5c.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAt;.<init>:(Lio/reactivex/Flowable;JLjava/lang/Object;Z)V` @kind direct;
  #L412c62.  call temp:= `onAssembly`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L412c68.  v0:= temp @kind object;
  #L412c6a.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableElementAtSingle` v5 @kind this, `io.reactivex.SingleObserver` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L412ca0.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle.a` @type ^`io.reactivex.Flowable` @kind object;
  #L412ca4.  v1:= new `io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a`;
  #L412ca8.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle.b` @type ^`long` @kind wide;
  #L412cac.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle.c` @type ^`java.lang.Object` @kind object;
  #L412cb0.  call `<init>`(v1, v6, v2, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle$a;.<init>:(Lio/reactivex/SingleObserver;JLjava/lang/Object;)V` @kind direct;
  #L412cb6.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L412cbc.  return @kind void;
}
