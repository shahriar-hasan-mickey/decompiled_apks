record `io.reactivex.internal.operators.flowable.FlowableLastMaybe$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.flowable.FlowableLastMaybe$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableLastMaybe$a.b` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableLastMaybe$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableLastMaybe$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableLastMaybe$a;.<init>:(Lio/reactivex/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L419a30.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L419a36.  v0.`io.reactivex.internal.operators.flowable.FlowableLastMaybe$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L419a3a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableLastMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableLastMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L419a4c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableLastMaybe$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L419a50.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L419a56.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L419a5a.  v1.`io.reactivex.internal.operators.flowable.FlowableLastMaybe$a.b` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L419a5e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableLastMaybe$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableLastMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L419a0c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableLastMaybe$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L419a10.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L419a14.  if v0 != v1 then goto L419a1c;
  #L419a18.  v0:= 1I;
  #L419a1a.  goto L419a1e;
  #L419a1c.  v0:= 0I;
  #L419a1e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableLastMaybe$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableLastMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L419a70.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L419a74.  v2.`io.reactivex.internal.operators.flowable.FlowableLastMaybe$a.b` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L419a78.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableLastMaybe$a.c` @type ^`java.lang.Object` @kind object;
  #L419a7c.  if v0 == 0 then goto L419a92;
  #L419a80.  v1:= 0I;
  #L419a82.  v2.`io.reactivex.internal.operators.flowable.FlowableLastMaybe$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L419a86.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableLastMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L419a8a.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L419a90.  goto L419a9c;
  #L419a92.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableLastMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L419a96.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L419a9c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableLastMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableLastMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L419ab0.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L419ab4.  v1.`io.reactivex.internal.operators.flowable.FlowableLastMaybe$a.b` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L419ab8.  v0:= 0I;
  #L419aba.  v1.`io.reactivex.internal.operators.flowable.FlowableLastMaybe$a.c` @type ^`java.lang.Object` := v0 @kind object;
  #L419abe.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableLastMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L419ac2.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L419ac8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableLastMaybe$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableLastMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L419adc.  v0.`io.reactivex.internal.operators.flowable.FlowableLastMaybe$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L419ae0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableLastMaybe$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableLastMaybe$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L419af4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableLastMaybe$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L419af8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L419afe.  v0:= temp;
  #L419b00.  if v0 == 0 then goto L419b22;
  #L419b04.  v2.`io.reactivex.internal.operators.flowable.FlowableLastMaybe$a.b` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L419b08.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableLastMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L419b0c.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L419b12.  v0:= 9223372036854775807L;
  #L419b1c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L419b22.  return @kind void;
}
