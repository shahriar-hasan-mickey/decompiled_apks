record `io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntilPredicate$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L424294.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42429a.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L42429e.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.b` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L4242a2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntilPredicate$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4242b4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4242b8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4242be.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntilPredicate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4242d0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.d` @type ^`boolean` @kind boolean;
  #L4242d4.  if v0 != 0 then goto L4242e8;
  #L4242d8.  v0:= 1I;
  #L4242da.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4242de.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4242e2.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4242e8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntilPredicate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4242fc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.d` @type ^`boolean` @kind boolean;
  #L424300.  if v0 != 0 then goto L424316;
  #L424304.  v0:= 1I;
  #L424306.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.d` @type ^`boolean` := v0 @kind boolean;
  #L42430a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L42430e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L424314.  goto L42431c;
  #L424316.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42431c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntilPredicate$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L424330.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.d` @type ^`boolean` @kind boolean;
  #L424334.  if v0 != 0 then goto L424386;
  #L424338.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L42433c.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L424342.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.b` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L424346.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L42434c.  v2:= temp;
  #L42434e.  if v2 == 0 then goto L424386;
  #L424352.  v2:= 1I;
  #L424354.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.d` @type ^`boolean` := v2 @kind boolean;
  #L424358.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L42435c.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L424362.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L424366.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L42436c.  goto L424386;
  #L42436e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L424370.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L424376.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L42437a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L424380.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntilPredicate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L424386.  return @kind void;
  catch `java.lang.Throwable` @[L424342..L42434e] goto L42436e;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntilPredicate$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4243a4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4243a8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4243ae.  v0:= temp;
  #L4243b0.  if v0 == 0 then goto L4243c2;
  #L4243b4.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4243b8.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4243bc.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4243c2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntilPredicate$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4243d4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4243d8.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4243de.  return @kind void;
}
