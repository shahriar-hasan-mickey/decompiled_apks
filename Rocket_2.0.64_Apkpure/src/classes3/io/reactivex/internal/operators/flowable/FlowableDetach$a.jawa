record `io.reactivex.internal.operators.flowable.FlowableDetach$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableDetach$a.a` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableDetach$a.b` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDetach$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDetach$a;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4112cc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4112d2.  v0.`io.reactivex.internal.operators.flowable.FlowableDetach$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4112d6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableDetach$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDetach$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4112e8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDetach$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4112ec.  v1:= `@@io.reactivex.internal.util.EmptyComponent.INSTANCE` @type ^`io.reactivex.internal.util.EmptyComponent` @kind object;
  #L4112f0.  v2.`io.reactivex.internal.operators.flowable.FlowableDetach$a.b` @type ^`org.reactivestreams.Subscription` := v1 @kind object;
  #L4112f4.  call temp:= `asSubscriber`() @signature `Lio/reactivex/internal/util/EmptyComponent;.asSubscriber:()Lorg/reactivestreams/Subscriber;` @kind static;
  #L4112fa.  v1:= temp @kind object;
  #L4112fc.  v2.`io.reactivex.internal.operators.flowable.FlowableDetach$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L411300.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L411306.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDetach$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDetach$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L411318.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDetach$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41131c.  v1:= `@@io.reactivex.internal.util.EmptyComponent.INSTANCE` @type ^`io.reactivex.internal.util.EmptyComponent` @kind object;
  #L411320.  v2.`io.reactivex.internal.operators.flowable.FlowableDetach$a.b` @type ^`org.reactivestreams.Subscription` := v1 @kind object;
  #L411324.  call temp:= `asSubscriber`() @signature `Lio/reactivex/internal/util/EmptyComponent;.asSubscriber:()Lorg/reactivestreams/Subscriber;` @kind static;
  #L41132a.  v1:= temp @kind object;
  #L41132c.  v2.`io.reactivex.internal.operators.flowable.FlowableDetach$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L411330.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L411336.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDetach$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDetach$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L411348.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDetach$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41134c.  v1:= `@@io.reactivex.internal.util.EmptyComponent.INSTANCE` @type ^`io.reactivex.internal.util.EmptyComponent` @kind object;
  #L411350.  v2.`io.reactivex.internal.operators.flowable.FlowableDetach$a.b` @type ^`org.reactivestreams.Subscription` := v1 @kind object;
  #L411354.  call temp:= `asSubscriber`() @signature `Lio/reactivex/internal/util/EmptyComponent;.asSubscriber:()Lorg/reactivestreams/Subscriber;` @kind static;
  #L41135a.  v1:= temp @kind object;
  #L41135c.  v2.`io.reactivex.internal.operators.flowable.FlowableDetach$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L411360.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L411366.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDetach$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDetach$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411378.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDetach$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41137c.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L411382.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableDetach$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDetach$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411394.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDetach$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L411398.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L41139e.  v0:= temp;
  #L4113a0.  if v0 == 0 then goto L4113b2;
  #L4113a4.  v1.`io.reactivex.internal.operators.flowable.FlowableDetach$a.b` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4113a8.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableDetach$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4113ac.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4113b2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableDetach$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDetach$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4113c4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDetach$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4113c8.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4113ce.  return @kind void;
}
