record `io.reactivex.internal.operators.flowable.FlowableDoFinally$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableDoFinally$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.flowable.FlowableDoFinally$b.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableDoFinally$b.c` @AccessFlag ;
  `io.reactivex.internal.fuseable.QueueSubscription` `io.reactivex.internal.operators.flowable.FlowableDoFinally$b.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableDoFinally$b.e` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableDoFinally$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Action` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Action;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L411e70.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L411e76.  v0.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L411e7a.  v0.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.b` @type ^`io.reactivex.functions.Action` := v2 @kind object;
  #L411e7e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411e90.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L411e94.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L411e9a.  call `e`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.e:()V` @kind virtual;
  #L411ea0.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411eb4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.d` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L411eb8.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L411ebe.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L411f90.  v0:= 0I;
  #L411f92.  v1:= 1I;
  #L411f94.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L411f9a.  v0:= temp;
  #L411f9c.  if v0 == 0 then goto L411fba;
  #L411fa0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.b` @type ^`io.reactivex.functions.Action` @kind object;
  #L411fa4.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L411faa.  goto L411fba;
  #L411fac.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L411fae.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L411fb4.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L411fba.  return @kind void;
  catch `java.lang.Throwable` @[L411fa0..L411faa] goto L411fac;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411de0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.d` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L411de4.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L411dea.  v0:= temp;
  #L411dec.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411ed0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L411ed4.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L411eda.  call `e`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.e:()V` @kind virtual;
  #L411ee0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411ef4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L411ef8.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L411efe.  call `e`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.e:()V` @kind virtual;
  #L411f04.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411f18.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L411f1c.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L411f22.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411f34.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L411f38.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L411f3e.  v0:= temp;
  #L411f40.  if v0 == 0 then goto L411f62;
  #L411f44.  v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L411f48.  v0:= instanceof @variable v2 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L411f4c.  if v0 == 0 then goto L411f58;
  #L411f50.  v2:= (`io.reactivex.internal.fuseable.QueueSubscription`) v2 @kind object;
  #L411f54.  v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.d` @type ^`io.reactivex.internal.fuseable.QueueSubscription` := v2 @kind object;
  #L411f58.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L411f5c.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L411f62.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L411e40.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.d` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L411e44.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L411e4a.  v0:= temp @kind object;
  #L411e4c.  if v0 != 0 then goto L411e5e;
  #L411e50.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.e` @type ^`boolean` @kind boolean;
  #L411e54.  if v1 == 0 then goto L411e5e;
  #L411e58.  call `e`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.e:()V` @kind virtual;
  #L411e5e.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411f74.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L411f78.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L411f7e.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$b` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L411e00.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.d` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L411e04.  v1:= 0I;
  #L411e06.  if v0 == 0 then goto L411e2c;
  #L411e0a.  v2:= v4 ^& 4;
  #L411e0e.  if v2 != 0 then goto L411e2c;
  #L411e12.  call temp:= `requestFusion`(v0, v4) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L411e18.  v4:= temp;
  #L411e1a.  if v4 == 0 then goto L411e2a;
  #L411e1e.  v0:= 1I;
  #L411e20.  if v4 != v0 then goto L411e26;
  #L411e24.  v1:= 1I;
  #L411e26.  v3.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.e` @type ^`boolean` := v1 @kind boolean;
  #L411e2a.  return v4;
  #L411e2c.  return v1;
}
