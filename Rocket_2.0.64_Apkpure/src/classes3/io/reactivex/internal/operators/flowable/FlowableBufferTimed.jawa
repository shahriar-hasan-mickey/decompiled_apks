record `io.reactivex.internal.operators.flowable.FlowableBufferTimed` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferTimed.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferTimed.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableBufferTimed.d` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableBufferTimed.e` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBufferTimed.f` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableBufferTimed.g` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBufferTimed.h` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `long` v2 , `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `io.reactivex.Scheduler` v7 @kind object, `java.util.concurrent.Callable` v8 @kind object, `int` v9 , `boolean` v10 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed;.<init>:(Lio/reactivex/Flowable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Ljava/util/concurrent/Callable;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L40cda0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L40cda6.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.b` @type ^`long` := v2 @kind wide;
  #L40cdaa.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.c` @type ^`long` := v4 @kind wide;
  #L40cdae.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.d` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L40cdb2.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.e` @type ^`io.reactivex.Scheduler` := v7 @kind object;
  #L40cdb6.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.f` @type ^`java.util.concurrent.Callable` := v8 @kind object;
  #L40cdba.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.g` @type ^`int` := v9;
  #L40cdbe.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.h` @type ^`boolean` := v10 @kind boolean;
  #L40cdc2.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed` v11 @kind this, `org.reactivestreams.Subscriber` v12 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L40cdd4.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.b` @type ^`long` @kind wide;
  #L40cdd8.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.c` @type ^`long` @kind wide;
  #L40cddc.  v4:= lcmp(v0, v2);
  #L40cde0.  if v4 != 0 then goto L40ce24;
  #L40cde4.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.g` @type ^`int`;
  #L40cde8.  v1:= 2147483647I;
  #L40cdee.  if v0 != v1 then goto L40ce24;
  #L40cdf2.  v0:= v11.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L40cdf6.  v8:= new `io.reactivex.internal.operators.flowable.FlowableBufferTimed$b`;
  #L40cdfa.  v2:= new `io.reactivex.subscribers.SerializedSubscriber`;
  #L40cdfe.  call `<init>`(v2, v12) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L40ce04.  v3:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.f` @type ^`java.util.concurrent.Callable` @kind object;
  #L40ce08.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.b` @type ^`long` @kind wide;
  #L40ce0c.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L40ce10.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.e` @type ^`io.reactivex.Scheduler` @kind object;
  #L40ce14.  v1:= v8 @kind object;
  #L40ce16.  call `<init>`(v1, v2, v3, v4, v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L40ce1c.  call `subscribe`(v0, v8) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L40ce22.  return @kind void;
  #L40ce24.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.e` @type ^`io.reactivex.Scheduler` @kind object;
  #L40ce28.  call temp:= `createWorker`(v0) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L40ce2e.  v9:= temp @kind object;
  #L40ce30.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.b` @type ^`long` @kind wide;
  #L40ce34.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.c` @type ^`long` @kind wide;
  #L40ce38.  v4:= lcmp(v0, v2);
  #L40ce3c.  if v4 != 0 then goto L40ce76;
  #L40ce40.  v0:= v11.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L40ce44.  v10:= new `io.reactivex.internal.operators.flowable.FlowableBufferTimed$a`;
  #L40ce48.  v2:= new `io.reactivex.subscribers.SerializedSubscriber`;
  #L40ce4c.  call `<init>`(v2, v12) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L40ce52.  v3:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.f` @type ^`java.util.concurrent.Callable` @kind object;
  #L40ce56.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.b` @type ^`long` @kind wide;
  #L40ce5a.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L40ce5e.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.g` @type ^`int`;
  #L40ce62.  v8:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.h` @type ^`boolean` @kind boolean;
  #L40ce66.  v1:= v10 @kind object;
  #L40ce68.  call `<init>`(v1, v2, v3, v4, v6, v7, v8, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;IZLio/reactivex/Scheduler$Worker;)V` @kind direct;
  #L40ce6e.  call `subscribe`(v0, v10) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L40ce74.  return @kind void;
  #L40ce76.  v0:= v11.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L40ce7a.  v10:= new `io.reactivex.internal.operators.flowable.FlowableBufferTimed$c`;
  #L40ce7e.  v2:= new `io.reactivex.subscribers.SerializedSubscriber`;
  #L40ce82.  call `<init>`(v2, v12) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L40ce88.  v3:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.f` @type ^`java.util.concurrent.Callable` @kind object;
  #L40ce8c.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.b` @type ^`long` @kind wide;
  #L40ce90.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.c` @type ^`long` @kind wide;
  #L40ce94.  v8:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L40ce98.  v1:= v10 @kind object;
  #L40ce9a.  call `<init>`(v1, v2, v3, v4, v6, v8, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/Callable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;)V` @kind direct;
  #L40cea0.  call `subscribe`(v0, v10) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L40cea6.  return @kind void;
}
