record `io.reactivex.internal.operators.flowable.FlowablePublish$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowablePublish$c.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowablePublish$c.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowablePublish$c.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowablePublish$c.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowablePublish$c.e` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowablePublish$c.f` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowablePublish$c.g` @AccessFlag ;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.flowable.FlowablePublish$c.h` @AccessFlag VOLATILE;
}
global `io.reactivex.internal.operators.flowable.FlowablePublish$b`[] `@@io.reactivex.internal.operators.flowable.FlowablePublish$c.i` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.flowable.FlowablePublish$b`[] `@@io.reactivex.internal.operators.flowable.FlowablePublish$c.j` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowablePublish$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L41c298.  v0:= 0I;
  #L41c29a.  v1:= new `io.reactivex.internal.operators.flowable.FlowablePublish$b`[v0];
  #L41c29e.  `@@io.reactivex.internal.operators.flowable.FlowablePublish$c.i` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$b`[] := v1 @kind object;
  #L41c2a2.  v0:= new `io.reactivex.internal.operators.flowable.FlowablePublish$b`[v0];
  #L41c2a6.  `@@io.reactivex.internal.operators.flowable.FlowablePublish$c.j` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$b`[] := v0 @kind object;
  #L41c2aa.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowablePublish$c` v2 @kind this, `java.util.concurrent.atomic.AtomicReference` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L41c2bc.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L41c2c2.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L41c2c6.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L41c2cc.  v2.`io.reactivex.internal.operators.flowable.FlowablePublish$c.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L41c2d0.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L41c2d4.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublish$c.i` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$b`[] @kind object;
  #L41c2d8.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L41c2de.  v2.`io.reactivex.internal.operators.flowable.FlowablePublish$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L41c2e2.  v2.`io.reactivex.internal.operators.flowable.FlowablePublish$c.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L41c2e6.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L41c2ea.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L41c2f0.  v2.`io.reactivex.internal.operators.flowable.FlowablePublish$c.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L41c2f4.  v2.`io.reactivex.internal.operators.flowable.FlowablePublish$c.b` @type ^`int` := v4;
  #L41c2f8.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.flowable.FlowablePublish$c` v4 @kind this, `io.reactivex.internal.operators.flowable.FlowablePublish$b` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.a:(Lio/reactivex/internal/operators/flowable/FlowablePublish$b;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41c164.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41c168.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41c16e.  v0:= temp @kind object;
  #L41c170.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublish$b`[]) v0 @kind object;
  #L41c174.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublish$c.j` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$b`[] @kind object;
  #L41c178.  v2:= 0I;
  #L41c17a.  if v0 != v1 then goto L41c180;
  #L41c17e.  return v2;
  #L41c180.  v1:= length @variable v0;
  #L41c182.  v3:= v1 + 1;
  #L41c186.  v3:= new `io.reactivex.internal.operators.flowable.FlowablePublish$b`[v3];
  #L41c18a.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L41c190.  v3[v1]:= v5 @kind object;
  #L41c194.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41c198.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L41c19e.  v0:= temp;
  #L41c1a0.  if v0 == 0 then goto L41c164;
  #L41c1a4.  v5:= 1I;
  #L41c1a6.  return v5;
}
procedure `boolean` `b`(`io.reactivex.internal.operators.flowable.FlowablePublish$c` v4 @kind this, `java.lang.Object` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.b:(Ljava/lang/Object;Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41c1b8.  v0:= 0I;
  #L41c1ba.  if v5 == 0 then goto L41c25a;
  #L41c1be.  call temp:= `isComplete`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L41c1c4.  v1:= temp;
  #L41c1c6.  v2:= 0I;
  #L41c1c8.  v3:= 1I;
  #L41c1ca.  if v1 == 0 then goto L41c20c;
  #L41c1ce.  if v6 == 0 then goto L41c25a;
  #L41c1d2.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish$c.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41c1d6.  call temp:= `compareAndSet`(v5, v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L41c1dc.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41c1e0.  v6:= `@@io.reactivex.internal.operators.flowable.FlowablePublish$c.j` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$b`[] @kind object;
  #L41c1e4.  call temp:= `getAndSet`(v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L41c1ea.  v5:= temp @kind object;
  #L41c1ec.  v5:= (`io.reactivex.internal.operators.flowable.FlowablePublish$b`[]) v5 @kind object;
  #L41c1f0.  v6:= length @variable v5;
  #L41c1f2.  if v0 >= v6 then goto L41c20a;
  #L41c1f6.  v1:= v5[v0] @kind object;
  #L41c1fa.  v1:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41c1fe.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41c204.  v0:= v0 + 1;
  #L41c208.  goto L41c1f2;
  #L41c20a.  return v3;
  #L41c20c.  call temp:= `getError`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L41c212.  v5:= temp @kind object;
  #L41c214.  v6:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish$c.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41c218.  call temp:= `compareAndSet`(v6, v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L41c21e.  v6:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41c222.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublish$c.j` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$b`[] @kind object;
  #L41c226.  call temp:= `getAndSet`(v6, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L41c22c.  v6:= temp @kind object;
  #L41c22e.  v6:= (`io.reactivex.internal.operators.flowable.FlowablePublish$b`[]) v6 @kind object;
  #L41c232.  v1:= length @variable v6;
  #L41c234.  if v1 == 0 then goto L41c252;
  #L41c238.  v1:= length @variable v6;
  #L41c23a.  if v0 >= v1 then goto L41c258;
  #L41c23e.  v2:= v6[v0] @kind object;
  #L41c242.  v2:= v2.`io.reactivex.internal.operators.flowable.FlowablePublish$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41c246.  call `onError`(v2, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41c24c.  v0:= v0 + 1;
  #L41c250.  goto L41c23a;
  #L41c252.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41c258.  return v3;
  #L41c25a.  return v0;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowablePublish$c` v19 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L41c30c.  v1:= v19 @kind object;
  #L41c310.  call temp:= `getAndIncrement`(v19) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L41c316.  v0:= temp;
  #L41c318.  if v0 == 0 then goto L41c31e;
  #L41c31c.  return @kind void;
  #L41c31e.  v2:= 1I;
  #L41c320.  v3:= 1I;
  #L41c322.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.f` @type ^`java.lang.Object` @kind object;
  #L41c326.  v4:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L41c32a.  if v4 == 0 then goto L41c340;
  #L41c32e.  call temp:= `isEmpty`(v4) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L41c334.  v6:= temp;
  #L41c336.  if v6 == 0 then goto L41c33c;
  #L41c33a.  goto L41c340;
  #L41c33c.  v6:= 0I;
  #L41c33e.  goto L41c342;
  #L41c340.  v6:= 1I;
  #L41c342.  call temp:= `b`(v1, v0, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.b:(Ljava/lang/Object;Z)Z` @kind virtual;
  #L41c348.  v0:= temp;
  #L41c34a.  if v0 == 0 then goto L41c350;
  #L41c34e.  return @kind void;
  #L41c350.  if v6 != 0 then goto L41c53c;
  #L41c354.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41c358.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41c35e.  v0:= temp @kind object;
  #L41c360.  v7:= v0 @kind object;
  #L41c362.  v7:= (`io.reactivex.internal.operators.flowable.FlowablePublish$b`[]) v7 @kind object;
  #L41c366.  v0:= length @variable v7;
  #L41c368.  v8:= 9223372036854775807L;
  #L41c372.  v10:= length @variable v7;
  #L41c374.  v11:= 0I;
  #L41c376.  v12:= 0I;
  #L41c378.  v13:= 0L;
  #L41c37c.  if v11 >= v10 then goto L41c3be;
  #L41c380.  v15:= v7[v11] @kind object;
  #L41c384.  v16:= v6;
  #L41c388.  call temp:= `get`(v15) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L41c38e.  v5:= temp @kind wide;
  #L41c390.  v15:= lcmp(v5, v13);
  #L41c394.  if v15 < 0 then goto L41c3a4;
  #L41c398.  call temp:= `min`(v8, v5) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L41c39e.  v5:= temp @kind wide;
  #L41c3a0.  v8:= v5 @kind wide;
  #L41c3a2.  goto L41c3b4;
  #L41c3a4.  v13:= -9223372036854775808L;
  #L41c3a8.  v15:= lcmp(v5, v13);
  #L41c3ac.  if v15 != 0 then goto L41c3b4;
  #L41c3b0.  v12:= v12 + 1;
  #L41c3b4.  v11:= v11 + 1;
  #L41c3b8.  v6:= v16;
  #L41c3bc.  goto L41c378;
  #L41c3be.  v16:= v6;
  #L41c3c2.  v5:= 1L;
  #L41c3c6.  if v0 != v12 then goto L41c444;
  #L41c3ca.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.f` @type ^`java.lang.Object` @kind object;
  #L41c3ce.  call temp:= `poll`(v4) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L41c3d4.  v10:= temp @kind object;
  #L41c3d6.  goto L41c406;
  #L41c3d8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41c3da.  v4:= v0 @kind object;
  #L41c3dc.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41c3e2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41c3e6.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41c3ec.  v0:= temp @kind object;
  #L41c3ee.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L41c3f2.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L41c3f8.  call temp:= `error`(v4) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L41c3fe.  v0:= temp @kind object;
  #L41c400.  v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.f` @type ^`java.lang.Object` := v0 @kind object;
  #L41c404.  v10:= 0I;
  #L41c406.  if v10 != 0 then goto L41c40e;
  #L41c40a.  v4:= 1I;
  #L41c40c.  goto L41c410;
  #L41c40e.  v4:= 0I;
  #L41c410.  call temp:= `b`(v1, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.b:(Ljava/lang/Object;Z)Z` @kind virtual;
  #L41c416.  v0:= temp;
  #L41c418.  if v0 == 0 then goto L41c41e;
  #L41c41c.  return @kind void;
  #L41c41e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.g` @type ^`int`;
  #L41c422.  if v0 == v2 then goto L41c43c;
  #L41c426.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41c42a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41c430.  v0:= temp @kind object;
  #L41c432.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L41c436.  call `request`(v0, v5) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L41c43c.  v15:= v3;
  #L41c43e.  v4:= 1I;
  #L41c440.  goto L41c538;
  #L41c444.  v15:= v3;
  #L41c446.  v11:= 0I;
  #L41c448.  v2:= (`long`) v11 @kind i2l;
  #L41c44a.  v0:= lcmp(v2, v8);
  #L41c44e.  if v0 >= 0 then goto L41c500;
  #L41c452.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.f` @type ^`java.lang.Object` @kind object;
  #L41c456.  call temp:= `poll`(v4) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L41c45c.  v16:= temp @kind object;
  #L41c45e.  goto L41c492;
  #L41c460.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41c462.  v16:= v0 @kind object;
  #L41c466.  call `throwIfFatal`(v16) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41c46c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41c470.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41c476.  v0:= temp @kind object;
  #L41c478.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L41c47c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L41c482.  call temp:= `error`(v16) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L41c488.  v0:= temp @kind object;
  #L41c48a.  v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.f` @type ^`java.lang.Object` := v0 @kind object;
  #L41c48e.  v16:= 0I;
  #L41c492.  if v16 != 0 then goto L41c49a;
  #L41c496.  v10:= 1I;
  #L41c498.  goto L41c49c;
  #L41c49a.  v10:= 0I;
  #L41c49c.  call temp:= `b`(v1, v0, v10) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.b:(Ljava/lang/Object;Z)Z` @kind virtual;
  #L41c4a2.  v0:= temp;
  #L41c4a4.  if v0 == 0 then goto L41c4aa;
  #L41c4a8.  return @kind void;
  #L41c4aa.  if v10 == 0 then goto L41c4b4;
  #L41c4ae.  v16:= v10;
  #L41c4b2.  goto L41c500;
  #L41c4b4.  call temp:= `getValue`(v16) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L41c4ba.  v0:= temp @kind object;
  #L41c4bc.  v2:= length @variable v7;
  #L41c4be.  v3:= 0I;
  #L41c4c0.  if v3 >= v2 then goto L41c4f2;
  #L41c4c4.  v12:= v7[v3] @kind object;
  #L41c4c8.  call temp:= `get`(v12) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L41c4ce.  v17:= temp @kind wide;
  #L41c4d0.  v16:= lcmp(v17, v13);
  #L41c4d4.  if v16 <= 0 then goto L41c4e8;
  #L41c4d8.  v13:= v12.`io.reactivex.internal.operators.flowable.FlowablePublish$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41c4dc.  call `onNext`(v13, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41c4e2.  call temp:= `a`(v12, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$b;.a:(J)J` @kind virtual;
  #L41c4e8.  v3:= v3 + 1;
  #L41c4ec.  v13:= 0L;
  #L41c4f0.  goto L41c4c0;
  #L41c4f2.  v11:= v11 + 1;
  #L41c4f6.  v16:= v10;
  #L41c4fa.  v13:= 0L;
  #L41c4fe.  goto L41c448;
  #L41c500.  if v11 <= 0 then goto L41c526;
  #L41c504.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.g` @type ^`int`;
  #L41c508.  v4:= 1I;
  #L41c50a.  if v0 == v4 then goto L41c528;
  #L41c50e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41c512.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41c518.  v0:= temp @kind object;
  #L41c51a.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L41c51e.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L41c524.  goto L41c528;
  #L41c526.  v4:= 1I;
  #L41c528.  v2:= 0L;
  #L41c52c.  v0:= lcmp(v8, v2);
  #L41c530.  if v0 == 0 then goto L41c540;
  #L41c534.  if v16 != 0 then goto L41c540;
  #L41c538.  v3:= v15;
  #L41c53a.  goto L41c550;
  #L41c53c.  v4:= 1I;
  #L41c53e.  v15:= v3;
  #L41c540.  v0:= -v15 @kind int;
  #L41c542.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L41c548.  v3:= temp;
  #L41c54a.  if v3 != 0 then goto L41c550;
  #L41c54e.  return @kind void;
  #L41c550.  v2:= 1I;
  #L41c552.  goto L41c322;
  catch `java.lang.Throwable` @[L41c3ce..L41c3d6] goto L41c3d8;
  catch `java.lang.Throwable` @[L41c456..L41c45e] goto L41c460;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowablePublish$c` v6 @kind this, `io.reactivex.internal.operators.flowable.FlowablePublish$b` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.d:(Lio/reactivex/internal/operators/flowable/FlowablePublish$b;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L41c710.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowablePublish$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41c714.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41c71a.  v0:= temp @kind object;
  #L41c71c.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublish$b`[]) v0 @kind object;
  #L41c720.  v1:= length @variable v0;
  #L41c722.  if v1 != 0 then goto L41c728;
  #L41c726.  goto L41c78c;
  #L41c728.  v2:= -1I;
  #L41c72a.  v3:= 0I;
  #L41c72c.  v4:= 0I;
  #L41c72e.  if v4 >= v1 then goto L41c74c;
  #L41c732.  v5:= v0[v4] @kind object;
  #L41c736.  call temp:= `equals`(v5, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L41c73c.  v5:= temp;
  #L41c73e.  if v5 == 0 then goto L41c746;
  #L41c742.  v2:= v4;
  #L41c744.  goto L41c74c;
  #L41c746.  v4:= v4 + 1;
  #L41c74a.  goto L41c72e;
  #L41c74c.  if v2 >= 0 then goto L41c752;
  #L41c750.  return @kind void;
  #L41c752.  v4:= 1I;
  #L41c754.  if v1 != v4 then goto L41c75e;
  #L41c758.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublish$c.i` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$b`[] @kind object;
  #L41c75c.  goto L41c77c;
  #L41c75e.  v5:= v1 + -1;
  #L41c762.  v5:= new `io.reactivex.internal.operators.flowable.FlowablePublish$b`[v5];
  #L41c766.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L41c76c.  v3:= v2 + 1;
  #L41c770.  v1:= v1 - v2 @kind int;
  #L41c772.  v1:= v1 - v4 @kind int;
  #L41c774.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L41c77a.  v1:= v5 @kind object;
  #L41c77c.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowablePublish$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41c780.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L41c786.  v0:= temp;
  #L41c788.  if v0 == 0 then goto L41c710;
  #L41c78c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowablePublish$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41c580.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowablePublish$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41c584.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41c58a.  v0:= temp @kind object;
  #L41c58c.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublish$c.j` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$b`[] @kind object;
  #L41c590.  if v0 == v1 then goto L41c5be;
  #L41c594.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowablePublish$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41c598.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L41c59e.  v0:= temp @kind object;
  #L41c5a0.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublish$b`[]) v0 @kind object;
  #L41c5a4.  if v0 == v1 then goto L41c5be;
  #L41c5a8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowablePublish$c.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41c5ac.  v1:= 0I;
  #L41c5ae.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L41c5b4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowablePublish$c.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41c5b8.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L41c5be.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowablePublish$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41c26c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowablePublish$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41c270.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41c276.  v0:= temp @kind object;
  #L41c278.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublish$c.j` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$b`[] @kind object;
  #L41c27c.  if v0 != v1 then goto L41c284;
  #L41c280.  v0:= 1I;
  #L41c282.  goto L41c286;
  #L41c284.  v0:= 0I;
  #L41c286.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowablePublish$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41c5d0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.f` @type ^`java.lang.Object` @kind object;
  #L41c5d4.  if v0 != 0 then goto L41c5ea;
  #L41c5d8.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L41c5de.  v0:= temp @kind object;
  #L41c5e0.  v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.f` @type ^`java.lang.Object` := v0 @kind object;
  #L41c5e4.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.c:()V` @kind virtual;
  #L41c5ea.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowablePublish$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41c5fc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.f` @type ^`java.lang.Object` @kind object;
  #L41c600.  if v0 != 0 then goto L41c618;
  #L41c604.  call temp:= `error`(v2) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L41c60a.  v2:= temp @kind object;
  #L41c60c.  v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.f` @type ^`java.lang.Object` := v2 @kind object;
  #L41c610.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.c:()V` @kind virtual;
  #L41c616.  goto L41c61e;
  #L41c618.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41c61e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowablePublish$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41c630.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.g` @type ^`int`;
  #L41c634.  if v0 != 0 then goto L41c65e;
  #L41c638.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L41c63c.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L41c642.  v2:= temp;
  #L41c644.  if v2 != 0 then goto L41c65e;
  #L41c648.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L41c64c.  v0:= "Prefetch queue is full?!" @kind object;
  #L41c650.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41c656.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41c65c.  return @kind void;
  #L41c65e.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.c:()V` @kind virtual;
  #L41c664.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowablePublish$c` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L41c678.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowablePublish$c.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41c67c.  call temp:= `setOnce`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L41c682.  v0:= temp;
  #L41c684.  if v0 == 0 then goto L41c6fc;
  #L41c688.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L41c68c.  if v0 == 0 then goto L41c6de;
  #L41c690.  v0:= v4 @kind object;
  #L41c692.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L41c696.  v1:= 3I;
  #L41c698.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L41c69e.  v1:= temp;
  #L41c6a0.  v2:= 1I;
  #L41c6a2.  if v1 != v2 then goto L41c6c2;
  #L41c6a6.  v3.`io.reactivex.internal.operators.flowable.FlowablePublish$c.g` @type ^`int` := v1;
  #L41c6aa.  v3.`io.reactivex.internal.operators.flowable.FlowablePublish$c.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L41c6ae.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L41c6b4.  v4:= temp @kind object;
  #L41c6b6.  v3.`io.reactivex.internal.operators.flowable.FlowablePublish$c.f` @type ^`java.lang.Object` := v4 @kind object;
  #L41c6ba.  call `c`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.c:()V` @kind virtual;
  #L41c6c0.  return @kind void;
  #L41c6c2.  v2:= 2I;
  #L41c6c4.  if v1 != v2 then goto L41c6de;
  #L41c6c8.  v3.`io.reactivex.internal.operators.flowable.FlowablePublish$c.g` @type ^`int` := v1;
  #L41c6cc.  v3.`io.reactivex.internal.operators.flowable.FlowablePublish$c.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L41c6d0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowablePublish$c.b` @type ^`int`;
  #L41c6d4.  v0:= (`long`) v0 @kind i2l;
  #L41c6d6.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L41c6dc.  return @kind void;
  #L41c6de.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L41c6e2.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowablePublish$c.b` @type ^`int`;
  #L41c6e6.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L41c6ec.  v3.`io.reactivex.internal.operators.flowable.FlowablePublish$c.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L41c6f0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowablePublish$c.b` @type ^`int`;
  #L41c6f4.  v0:= (`long`) v0 @kind i2l;
  #L41c6f6.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L41c6fc.  return @kind void;
}
