record `io.reactivex.internal.operators.flowable.FlowablePublish$a` @kind class @AccessFlag FINAL extends `org.reactivestreams.Publisher` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowablePublish$a.a` @AccessFlag PRIVATE_FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowablePublish$a.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowablePublish$a` v0 @kind this, `java.util.concurrent.atomic.AtomicReference` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$a;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41bff0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41bff6.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish$a.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L41bffa.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish$a.b` @type ^`int` := v2;
  #L41bffe.  return @kind void;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.flowable.FlowablePublish$a` v6 @kind this, `org.reactivestreams.Subscriber` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$a;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L41c010.  v0:= new `io.reactivex.internal.operators.flowable.FlowablePublish$b`;
  #L41c014.  call `<init>`(v0, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$b;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L41c01a.  call `onSubscribe`(v7, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L41c020.  v7:= v6.`io.reactivex.internal.operators.flowable.FlowablePublish$a.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41c024.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41c02a.  v7:= temp @kind object;
  #L41c02c.  v7:= (`io.reactivex.internal.operators.flowable.FlowablePublish$c`) v7 @kind object;
  #L41c030.  if v7 == 0 then goto L41c040;
  #L41c034.  call temp:= `isDisposed`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.isDisposed:()Z` @kind virtual;
  #L41c03a.  v1:= temp;
  #L41c03c.  if v1 == 0 then goto L41c066;
  #L41c040.  v1:= new `io.reactivex.internal.operators.flowable.FlowablePublish$c`;
  #L41c044.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowablePublish$a.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41c048.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowablePublish$a.b` @type ^`int`;
  #L41c04c.  call `<init>`(v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;I)V` @kind direct;
  #L41c052.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowablePublish$a.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41c056.  call temp:= `compareAndSet`(v2, v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L41c05c.  v7:= temp;
  #L41c05e.  if v7 != 0 then goto L41c064;
  #L41c062.  goto L41c020;
  #L41c064.  v7:= v1 @kind object;
  #L41c066.  call temp:= `a`(v7, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.a:(Lio/reactivex/internal/operators/flowable/FlowablePublish$b;)Z` @kind virtual;
  #L41c06c.  v1:= temp;
  #L41c06e.  if v1 == 0 then goto L41c020;
  #L41c072.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L41c078.  v1:= temp @kind wide;
  #L41c07a.  v3:= -9223372036854775808L;
  #L41c07e.  v5:= lcmp(v1, v3);
  #L41c082.  if v5 != 0 then goto L41c08e;
  #L41c086.  call `d`(v7, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.d:(Lio/reactivex/internal/operators/flowable/FlowablePublish$b;)V` @kind virtual;
  #L41c08c.  goto L41c092;
  #L41c08e.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish$b.b` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$c` := v7 @kind object;
  #L41c092.  call `c`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.c:()V` @kind virtual;
  #L41c098.  return @kind void;
}
