record `io.reactivex.internal.operators.flowable.FlowableReplay$i` @kind class @AccessFlag FINAL extends `org.reactivestreams.Publisher` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableReplay$i.a` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableReplay$i.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$i` v0 @kind this, `java.util.concurrent.atomic.AtomicReference` v1 @kind object, `java.util.concurrent.Callable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$i;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41f100.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41f106.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$i.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L41f10a.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$i.b` @type ^`java.util.concurrent.Callable` := v2 @kind object;
  #L41f10e.  return @kind void;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.flowable.FlowableReplay$i` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$i;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L41f120.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableReplay$i.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41f124.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41f12a.  v0:= temp @kind object;
  #L41f12c.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$j`) v0 @kind object;
  #L41f130.  if v0 != 0 then goto L41f178;
  #L41f134.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableReplay$i.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L41f138.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L41f13e.  v0:= temp @kind object;
  #L41f140.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$g`) v0 @kind object;
  #L41f144.  v1:= new `io.reactivex.internal.operators.flowable.FlowableReplay$j`;
  #L41f148.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableReplay$g;)V` @kind direct;
  #L41f14e.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableReplay$i.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41f152.  v2:= 0I;
  #L41f154.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L41f15a.  v0:= temp;
  #L41f15c.  if v0 != 0 then goto L41f162;
  #L41f160.  goto L41f120;
  #L41f162.  v0:= v1 @kind object;
  #L41f164.  goto L41f178;
  #L41f166.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41f168.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41f16e.  call temp:= `wrapOrThrow`(v4) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L41f174.  v4:= temp @kind object;
  #L41f176.  throw v4;
  #L41f178.  v1:= new `io.reactivex.internal.operators.flowable.FlowableReplay$d`;
  #L41f17c.  call `<init>`(v1, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableReplay$j;Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L41f182.  call `onSubscribe`(v4, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L41f188.  call temp:= `a`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.a:(Lio/reactivex/internal/operators/flowable/FlowableReplay$d;)Z` @kind virtual;
  #L41f18e.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.isDisposed:()Z` @kind virtual;
  #L41f194.  v4:= temp;
  #L41f196.  if v4 == 0 then goto L41f1a2;
  #L41f19a.  call `c`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.c:(Lio/reactivex/internal/operators/flowable/FlowableReplay$d;)V` @kind virtual;
  #L41f1a0.  return @kind void;
  #L41f1a2.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.b:()V` @kind virtual;
  #L41f1a8.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$j.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$g` @kind object;
  #L41f1ac.  call `c`(v4, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$g;.c:(Lio/reactivex/internal/operators/flowable/FlowableReplay$d;)V` @kind interface;
  #L41f1b2.  return @kind void;
  catch `java.lang.Throwable` @[L41f134..L41f144] goto L41f166;
}
