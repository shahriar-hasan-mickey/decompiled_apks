record `io.reactivex.internal.operators.flowable.FlowableCreate$f` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableCreate$b` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableCreate$f.c` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableCreate$f.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCreate$f.e` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableCreate$f.f` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCreate$f.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCreate$f` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$f;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40fd4c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L40fd52.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L40fd56.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L40fd5c.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate$f.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L40fd60.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L40fd64.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L40fd6a.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate$f.f` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L40fd6e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableCreate$f` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$f;.a:()V` @AccessFlag  {
    temp;

  #L40ff68.  call `c`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$f;.c:()V` @kind virtual;
  #L40ff6e.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableCreate$f` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$f;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L40ff80.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$f.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40ff84.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L40ff8a.  v0:= temp;
  #L40ff8c.  if v0 != 0 then goto L40ff9c;
  #L40ff90.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$f.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40ff94.  v1:= 0I;
  #L40ff96.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L40ff9c.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableCreate$f` v17 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$f;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L40fd80.  v0:= v17 @kind object;
  #L40fd84.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableCreate$f.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40fd88.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L40fd8e.  v1:= temp;
  #L40fd90.  if v1 == 0 then goto L40fd96;
  #L40fd94.  return @kind void;
  #L40fd96.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableCreate$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40fd9a.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableCreate$f.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40fd9e.  v3:= 1I;
  #L40fda0.  v4:= 1I;
  #L40fda2.  call temp:= `get`(v17) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L40fda8.  v5:= temp @kind wide;
  #L40fdaa.  v7:= 0L;
  #L40fdae.  v9:= v7 @kind wide;
  #L40fdb0.  v11:= 0I;
  #L40fdb2.  v12:= 0I;
  #L40fdb4.  v13:= lcmp(v9, v5);
  #L40fdb8.  if v13 == 0 then goto L40fe1e;
  #L40fdbc.  call temp:= `isCancelled`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L40fdc2.  v14:= temp;
  #L40fdc4.  if v14 == 0 then goto L40fdd0;
  #L40fdc8.  call `lazySet`(v2, v12) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L40fdce.  return @kind void;
  #L40fdd0.  v14:= v0.`io.reactivex.internal.operators.flowable.FlowableCreate$f.e` @type ^`boolean` @kind boolean;
  #L40fdd4.  call temp:= `getAndSet`(v2, v12) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L40fdda.  v15:= temp @kind object;
  #L40fddc.  if v15 != 0 then goto L40fde6;
  #L40fde0.  v16:= 1I;
  #L40fde4.  goto L40fdea;
  #L40fde6.  v16:= 0I;
  #L40fdea.  if v14 == 0 then goto L40fe0a;
  #L40fdee.  if v16 == 0 then goto L40fe0a;
  #L40fdf2.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableCreate$f.d` @type ^`java.lang.Throwable` @kind object;
  #L40fdf6.  if v1 == 0 then goto L40fe02;
  #L40fdfa.  call `onError`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.onError:(Ljava/lang/Throwable;)V` @kind super;
  #L40fe00.  goto L40fe08;
  #L40fe02.  call `onComplete`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.onComplete:()V` @kind super;
  #L40fe08.  return @kind void;
  #L40fe0a.  if v16 == 0 then goto L40fe10;
  #L40fe0e.  goto L40fe1e;
  #L40fe10.  call `onNext`(v1, v15) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40fe16.  v11:= 1L;
  #L40fe1a.  v9:= v9 + v11 @kind long;
  #L40fe1c.  goto L40fdb0;
  #L40fe1e.  if v13 != 0 then goto L40fe68;
  #L40fe22.  call temp:= `isCancelled`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L40fe28.  v5:= temp;
  #L40fe2a.  if v5 == 0 then goto L40fe36;
  #L40fe2e.  call `lazySet`(v2, v12) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L40fe34.  return @kind void;
  #L40fe36.  v5:= v0.`io.reactivex.internal.operators.flowable.FlowableCreate$f.e` @type ^`boolean` @kind boolean;
  #L40fe3a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L40fe40.  v6:= temp @kind object;
  #L40fe42.  if v6 != 0 then goto L40fe48;
  #L40fe46.  v11:= 1I;
  #L40fe48.  if v5 == 0 then goto L40fe68;
  #L40fe4c.  if v11 == 0 then goto L40fe68;
  #L40fe50.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableCreate$f.d` @type ^`java.lang.Throwable` @kind object;
  #L40fe54.  if v1 == 0 then goto L40fe60;
  #L40fe58.  call `onError`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.onError:(Ljava/lang/Throwable;)V` @kind super;
  #L40fe5e.  goto L40fe66;
  #L40fe60.  call `onComplete`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.onComplete:()V` @kind super;
  #L40fe66.  return @kind void;
  #L40fe68.  v5:= lcmp(v9, v7);
  #L40fe6c.  if v5 == 0 then goto L40fe76;
  #L40fe70.  call temp:= `produced`(v0, v9) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L40fe76.  v5:= v0.`io.reactivex.internal.operators.flowable.FlowableCreate$f.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L40fe7a.  v4:= -v4 @kind int;
  #L40fe7c.  call temp:= `addAndGet`(v5, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L40fe82.  v4:= temp;
  #L40fe84.  if v4 != 0 then goto L40fda2;
  #L40fe88.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCreate$f` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$f;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40fe9c.  v0:= 1I;
  #L40fe9e.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$f.e` @type ^`boolean` := v0 @kind boolean;
  #L40fea2.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$f;.c:()V` @kind virtual;
  #L40fea8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableCreate$f` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$f;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40febc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$f.e` @type ^`boolean` @kind boolean;
  #L40fec0.  if v0 != 0 then goto L40fefc;
  #L40fec4.  call temp:= `isCancelled`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L40feca.  v0:= temp;
  #L40fecc.  if v0 == 0 then goto L40fed2;
  #L40fed0.  goto L40fefc;
  #L40fed2.  if v3 != 0 then goto L40feea;
  #L40fed6.  v0:= new `java.lang.NullPointerException`;
  #L40feda.  v1:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L40fede.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40fee4.  call `onError`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$f;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40feea.  v2.`io.reactivex.internal.operators.flowable.FlowableCreate$f.d` @type ^`java.lang.Throwable` := v3 @kind object;
  #L40feee.  v3:= 1I;
  #L40fef0.  v2.`io.reactivex.internal.operators.flowable.FlowableCreate$f.e` @type ^`boolean` := v3 @kind boolean;
  #L40fef4.  call `c`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$f;.c:()V` @kind virtual;
  #L40fefa.  return @kind void;
  #L40fefc.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40ff02.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCreate$f` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$f;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40ff14.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$f.e` @type ^`boolean` @kind boolean;
  #L40ff18.  if v0 != 0 then goto L40ff54;
  #L40ff1c.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L40ff22.  v0:= temp;
  #L40ff24.  if v0 == 0 then goto L40ff2a;
  #L40ff28.  goto L40ff54;
  #L40ff2a.  if v2 != 0 then goto L40ff44;
  #L40ff2e.  v2:= new `java.lang.NullPointerException`;
  #L40ff32.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L40ff36.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40ff3c.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$f;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40ff42.  return @kind void;
  #L40ff44.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$f.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40ff48.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L40ff4e.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$f;.c:()V` @kind virtual;
  #L40ff54.  return @kind void;
}
