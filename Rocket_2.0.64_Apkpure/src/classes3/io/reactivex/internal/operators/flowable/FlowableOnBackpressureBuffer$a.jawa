record `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.c` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.d` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.e` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.f` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.g` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.h` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.i` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.j` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `int` v3 , `boolean` v4 , `boolean` v5 , `io.reactivex.functions.Action` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.<init>:(Lorg/reactivestreams/Subscriber;IZZLio/reactivex/functions/Action;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L41aee4.  call `<init>`(v1) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L41aeea.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L41aeee.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L41aef4.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L41aef8.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L41aefc.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.d` @type ^`io.reactivex.functions.Action` := v6 @kind object;
  #L41af00.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.c` @type ^`boolean` := v5 @kind boolean;
  #L41af04.  if v4 == 0 then goto L41af14;
  #L41af08.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L41af0c.  call `<init>`(v2, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L41af12.  goto L41af1e;
  #L41af14.  v2:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L41af18.  call `<init>`(v2, v3) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L41af1e.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v2 @kind object;
  #L41af22.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41af34.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.f` @type ^`boolean` @kind boolean;
  #L41af38.  if v0 != 0 then goto L41af62;
  #L41af3c.  v0:= 1I;
  #L41af3e.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.f` @type ^`boolean` := v0 @kind boolean;
  #L41af42.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41af46.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L41af4c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L41af52.  v0:= temp;
  #L41af54.  if v0 != 0 then goto L41af62;
  #L41af58.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41af5c.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L41af62.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41af74.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41af78.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L41af7e.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v14 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L41af90.  call temp:= `getAndIncrement`(v14) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L41af96.  v0:= temp;
  #L41af98.  if v0 != 0 then goto L41b066;
  #L41af9c.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41afa0.  v1:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41afa4.  v2:= 1I;
  #L41afa6.  v3:= 1I;
  #L41afa8.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.g` @type ^`boolean` @kind boolean;
  #L41afac.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L41afb2.  v5:= temp;
  #L41afb4.  call temp:= `e`(v14, v4, v5, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L41afba.  v4:= temp;
  #L41afbc.  if v4 == 0 then goto L41afc2;
  #L41afc0.  return @kind void;
  #L41afc2.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L41afc6.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L41afcc.  v4:= temp @kind wide;
  #L41afce.  v6:= 0L;
  #L41afd2.  v8:= v6 @kind wide;
  #L41afd4.  v10:= lcmp(v8, v4);
  #L41afd8.  if v10 == 0 then goto L41b014;
  #L41afdc.  v11:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.g` @type ^`boolean` @kind boolean;
  #L41afe0.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L41afe6.  v12:= temp @kind object;
  #L41afe8.  if v12 != 0 then goto L41aff0;
  #L41afec.  v13:= 1I;
  #L41afee.  goto L41aff2;
  #L41aff0.  v13:= 0I;
  #L41aff2.  call temp:= `e`(v14, v11, v13, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L41aff8.  v11:= temp;
  #L41affa.  if v11 == 0 then goto L41b000;
  #L41affe.  return @kind void;
  #L41b000.  if v13 == 0 then goto L41b006;
  #L41b004.  goto L41b014;
  #L41b006.  call `onNext`(v1, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41b00c.  v10:= 1L;
  #L41b010.  v8:= v8 + v10 @kind long;
  #L41b012.  goto L41afd4;
  #L41b014.  if v10 != 0 then goto L41b032;
  #L41b018.  v10:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.g` @type ^`boolean` @kind boolean;
  #L41b01c.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L41b022.  v11:= temp;
  #L41b024.  call temp:= `e`(v14, v10, v11, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L41b02a.  v10:= temp;
  #L41b02c.  if v10 == 0 then goto L41b032;
  #L41b030.  return @kind void;
  #L41b032.  v10:= lcmp(v8, v6);
  #L41b036.  if v10 == 0 then goto L41b058;
  #L41b03a.  v6:= 9223372036854775807L;
  #L41b044.  v10:= lcmp(v4, v6);
  #L41b048.  if v10 == 0 then goto L41b058;
  #L41b04c.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L41b050.  v5:= -v8 @kind long;
  #L41b052.  call temp:= `addAndGet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L41b058.  v3:= -v3 @kind int;
  #L41b05a.  call temp:= `addAndGet`(v14, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L41b060.  v3:= temp;
  #L41b062.  if v3 != 0 then goto L41afa8;
  #L41b066.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v2 @kind this, `boolean` v3 , `boolean` v4 , `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L41ae08.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.f` @type ^`boolean` @kind boolean;
  #L41ae0c.  v1:= 1I;
  #L41ae0e.  if v0 == 0 then goto L41ae1e;
  #L41ae12.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41ae16.  call `clear`(v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L41ae1c.  return v1;
  #L41ae1e.  if v3 == 0 then goto L41ae6c;
  #L41ae22.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.c` @type ^`boolean` @kind boolean;
  #L41ae26.  if v3 == 0 then goto L41ae46;
  #L41ae2a.  if v4 == 0 then goto L41ae6c;
  #L41ae2e.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.h` @type ^`java.lang.Throwable` @kind object;
  #L41ae32.  if v3 == 0 then goto L41ae3e;
  #L41ae36.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41ae3c.  goto L41ae44;
  #L41ae3e.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41ae44.  return v1;
  #L41ae46.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.h` @type ^`java.lang.Throwable` @kind object;
  #L41ae4a.  if v3 == 0 then goto L41ae60;
  #L41ae4e.  v4:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41ae52.  call `clear`(v4) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L41ae58.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41ae5e.  return v1;
  #L41ae60.  if v4 == 0 then goto L41ae6c;
  #L41ae64.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41ae6a.  return v1;
  #L41ae6c.  v3:= 0I;
  #L41ae6e.  return v3;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41ae80.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41ae84.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L41ae8a.  v0:= temp;
  #L41ae8c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41b078.  v0:= 1I;
  #L41b07a.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.g` @type ^`boolean` := v0 @kind boolean;
  #L41b07e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.j` @type ^`boolean` @kind boolean;
  #L41b082.  if v0 == 0 then goto L41b092;
  #L41b086.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41b08a.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41b090.  goto L41b098;
  #L41b092.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.drain:()V` @kind virtual;
  #L41b098.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41b0ac.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.h` @type ^`java.lang.Throwable` := v2 @kind object;
  #L41b0b0.  v0:= 1I;
  #L41b0b2.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.g` @type ^`boolean` := v0 @kind boolean;
  #L41b0b6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.j` @type ^`boolean` @kind boolean;
  #L41b0ba.  if v0 == 0 then goto L41b0ca;
  #L41b0be.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41b0c2.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41b0c8.  goto L41b0d0;
  #L41b0ca.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.drain:()V` @kind virtual;
  #L41b0d0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41b0e4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41b0e8.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L41b0ee.  v2:= temp;
  #L41b0f0.  if v2 != 0 then goto L41b12e;
  #L41b0f4.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41b0f8.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L41b0fe.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L41b102.  v0:= "Buffer is full" @kind object;
  #L41b106.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41b10c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.d` @type ^`io.reactivex.functions.Action` @kind object;
  #L41b110.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L41b116.  goto L41b126;
  #L41b118.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41b11a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41b120.  call temp:= `initCause`(v2, v0) @signature `Ljava/lang/RuntimeException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L41b126.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41b12c.  return @kind void;
  #L41b12e.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.j` @type ^`boolean` @kind boolean;
  #L41b132.  if v2 == 0 then goto L41b144;
  #L41b136.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41b13a.  v0:= 0I;
  #L41b13c.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41b142.  goto L41b14a;
  #L41b144.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.drain:()V` @kind virtual;
  #L41b14a.  return @kind void;
  catch `java.lang.Throwable` @[L41b10c..L41b116] goto L41b118;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41b168.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41b16c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L41b172.  v0:= temp;
  #L41b174.  if v0 == 0 then goto L41b196;
  #L41b178.  v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.e` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L41b17c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41b180.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L41b186.  v0:= 9223372036854775807L;
  #L41b190.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L41b196.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41aec4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41aec8.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L41aece.  v0:= temp @kind object;
  #L41aed0.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41b1a8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.j` @type ^`boolean` @kind boolean;
  #L41b1ac.  if v0 != 0 then goto L41b1cc;
  #L41b1b0.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L41b1b6.  v0:= temp;
  #L41b1b8.  if v0 == 0 then goto L41b1cc;
  #L41b1bc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L41b1c0.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L41b1c6.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.drain:()V` @kind virtual;
  #L41b1cc.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41aea0.  v0:= 2I;
  #L41aea2.  v2:= v2 ^& v0 @kind int;
  #L41aea4.  if v2 == 0 then goto L41aeb0;
  #L41aea8.  v2:= 1I;
  #L41aeaa.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.j` @type ^`boolean` := v2 @kind boolean;
  #L41aeae.  return v0;
  #L41aeb0.  v2:= 0I;
  #L41aeb2.  return v2;
}
