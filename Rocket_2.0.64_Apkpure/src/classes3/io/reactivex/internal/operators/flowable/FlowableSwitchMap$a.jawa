record `io.reactivex.internal.operators.flowable.FlowableSwitchMap$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.d` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.e` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.f` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` v1 @kind object, `long` v2 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;JI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L422fac.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L422fb2.  v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` := v1 @kind object;
  #L422fb6.  v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.b` @type ^`long` := v2 @kind wide;
  #L422fba.  v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.c` @type ^`int` := v4;
  #L422fbe.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$a;.a:()V` @AccessFlag PUBLIC {
    temp;

  #L422fd0.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L422fd6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L422fe8.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` @kind object;
  #L422fec.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.b` @type ^`long` @kind wide;
  #L422ff0.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.k` @type ^`long` @kind wide;
  #L422ff4.  v5:= lcmp(v1, v3);
  #L422ff8.  if v5 != 0 then goto L423008;
  #L422ffc.  v1:= 1I;
  #L422ffe.  v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.e` @type ^`boolean` := v1 @kind boolean;
  #L423002.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @kind virtual;
  #L423008.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42301c.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` @kind object;
  #L423020.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.b` @type ^`long` @kind wide;
  #L423024.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.k` @type ^`long` @kind wide;
  #L423028.  v5:= lcmp(v1, v3);
  #L42302c.  if v5 != 0 then goto L423060;
  #L423030.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L423034.  call temp:= `addThrowable`(v1, v7) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L42303a.  v1:= temp;
  #L42303c.  if v1 == 0 then goto L423060;
  #L423040.  v7:= v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L423044.  if v7 != 0 then goto L423052;
  #L423048.  v7:= v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L42304c.  call `cancel`(v7) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L423052.  v7:= 1I;
  #L423054.  v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.e` @type ^`boolean` := v7 @kind boolean;
  #L423058.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @kind virtual;
  #L42305e.  goto L423066;
  #L423060.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L423066.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L423078.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` @kind object;
  #L42307c.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.b` @type ^`long` @kind wide;
  #L423080.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.k` @type ^`long` @kind wide;
  #L423084.  v5:= lcmp(v1, v3);
  #L423088.  if v5 != 0 then goto L4230c0;
  #L42308c.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.f` @type ^`int`;
  #L423090.  if v1 != 0 then goto L4230ba;
  #L423094.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L423098.  call temp:= `offer`(v1, v7) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L42309e.  v7:= temp;
  #L4230a0.  if v7 != 0 then goto L4230ba;
  #L4230a4.  v7:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L4230a8.  v0:= "Queue full?!" @kind object;
  #L4230ac.  call `<init>`(v7, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4230b2.  call `onError`(v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4230b8.  return @kind void;
  #L4230ba.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @kind virtual;
  #L4230c0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4230d4.  call temp:= `setOnce`(v3, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4230da.  v0:= temp;
  #L4230dc.  if v0 == 0 then goto L423150;
  #L4230e0.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L4230e4.  if v0 == 0 then goto L423132;
  #L4230e8.  v0:= v4 @kind object;
  #L4230ea.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L4230ee.  v1:= 3I;
  #L4230f0.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4230f6.  v1:= temp;
  #L4230f8.  v2:= 1I;
  #L4230fa.  if v1 != v2 then goto L423116;
  #L4230fe.  v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.f` @type ^`int` := v1;
  #L423102.  v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L423106.  v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.e` @type ^`boolean` := v2 @kind boolean;
  #L42310a.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` @kind object;
  #L42310e.  call `b`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @kind virtual;
  #L423114.  return @kind void;
  #L423116.  v2:= 2I;
  #L423118.  if v1 != v2 then goto L423132;
  #L42311c.  v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.f` @type ^`int` := v1;
  #L423120.  v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L423124.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.c` @type ^`int`;
  #L423128.  v0:= (`long`) v0 @kind i2l;
  #L42312a.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L423130.  return @kind void;
  #L423132.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L423136.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.c` @type ^`int`;
  #L42313a.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L423140.  v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L423144.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.c` @type ^`int`;
  #L423148.  v0:= (`long`) v0 @kind i2l;
  #L42314a.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L423150.  return @kind void;
}
