record `io.reactivex.internal.operators.flowable.FlowableScan$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableScan$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.flowable.FlowableScan$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableScan$a.c` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableScan$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableScan$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableScan$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableScan$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L420c5c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L420c62.  v0.`io.reactivex.internal.operators.flowable.FlowableScan$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L420c66.  v0.`io.reactivex.internal.operators.flowable.FlowableScan$a.b` @type ^`io.reactivex.functions.BiFunction` := v2 @kind object;
  #L420c6a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableScan$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableScan$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L420c7c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScan$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L420c80.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L420c86.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableScan$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableScan$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L420c98.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScan$a.e` @type ^`boolean` @kind boolean;
  #L420c9c.  if v0 == 0 then goto L420ca2;
  #L420ca0.  return @kind void;
  #L420ca2.  v0:= 1I;
  #L420ca4.  v1.`io.reactivex.internal.operators.flowable.FlowableScan$a.e` @type ^`boolean` := v0 @kind boolean;
  #L420ca8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScan$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L420cac.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L420cb2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableScan$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableScan$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L420cc4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScan$a.e` @type ^`boolean` @kind boolean;
  #L420cc8.  if v0 == 0 then goto L420cd4;
  #L420ccc.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L420cd2.  return @kind void;
  #L420cd4.  v0:= 1I;
  #L420cd6.  v1.`io.reactivex.internal.operators.flowable.FlowableScan$a.e` @type ^`boolean` := v0 @kind boolean;
  #L420cda.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScan$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L420cde.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L420ce4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableScan$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableScan$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L420cf8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableScan$a.e` @type ^`boolean` @kind boolean;
  #L420cfc.  if v0 == 0 then goto L420d02;
  #L420d00.  return @kind void;
  #L420d02.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableScan$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L420d06.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableScan$a.d` @type ^`java.lang.Object` @kind object;
  #L420d0a.  if v1 != 0 then goto L420d1a;
  #L420d0e.  v3.`io.reactivex.internal.operators.flowable.FlowableScan$a.d` @type ^`java.lang.Object` := v4 @kind object;
  #L420d12.  call `onNext`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L420d18.  goto L420d3c;
  #L420d1a.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableScan$a.b` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L420d1e.  call temp:= `apply`(v2, v1, v4) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L420d24.  v4:= temp @kind object;
  #L420d26.  v1:= "The value returned by the accumulator is null" @kind object;
  #L420d2a.  call temp:= `requireNonNull`(v4, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L420d30.  v4:= temp @kind object;
  #L420d32.  v3.`io.reactivex.internal.operators.flowable.FlowableScan$a.d` @type ^`java.lang.Object` := v4 @kind object;
  #L420d36.  call `onNext`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L420d3c.  return @kind void;
  #L420d3e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L420d40.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L420d46.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableScan$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L420d4a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L420d50.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableScan$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L420d56.  return @kind void;
  catch `java.lang.Throwable` @[L420d1a..L420d32] goto L420d3e;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableScan$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableScan$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L420d74.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScan$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L420d78.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L420d7e.  v0:= temp;
  #L420d80.  if v0 == 0 then goto L420d92;
  #L420d84.  v1.`io.reactivex.internal.operators.flowable.FlowableScan$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L420d88.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableScan$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L420d8c.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L420d92.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableScan$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableScan$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L420da4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScan$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L420da8.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L420dae.  return @kind void;
}
