record `io.reactivex.internal.operators.flowable.FlowableAmb$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableAmb$a` `io.reactivex.internal.operators.flowable.FlowableAmb$b.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableAmb$b.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableAmb$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableAmb$b.d` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableAmb$b.e` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableAmb$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableAmb$b` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableAmb$a` v2 @kind object, `int` v3 , `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$b;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableAmb$a;ILorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L40a408.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L40a40e.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L40a412.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L40a418.  v1.`io.reactivex.internal.operators.flowable.FlowableAmb$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L40a41c.  v1.`io.reactivex.internal.operators.flowable.FlowableAmb$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$a` := v2 @kind object;
  #L40a420.  v1.`io.reactivex.internal.operators.flowable.FlowableAmb$b.b` @type ^`int` := v3;
  #L40a424.  v1.`io.reactivex.internal.operators.flowable.FlowableAmb$b.c` @type ^`org.reactivestreams.Subscriber` := v4 @kind object;
  #L40a428.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableAmb$b` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L40a43c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L40a442.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableAmb$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40a454.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.d` @type ^`boolean` @kind boolean;
  #L40a458.  if v0 == 0 then goto L40a468;
  #L40a45c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40a460.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40a466.  goto L40a4a0;
  #L40a468.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$a` @kind object;
  #L40a46c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.b` @type ^`int`;
  #L40a470.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$a;.b:(I)Z` @kind virtual;
  #L40a476.  v0:= temp;
  #L40a478.  if v0 == 0 then goto L40a48e;
  #L40a47c.  v0:= 1I;
  #L40a47e.  v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.d` @type ^`boolean` := v0 @kind boolean;
  #L40a482.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40a486.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40a48c.  goto L40a4a0;
  #L40a48e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L40a494.  v0:= temp @kind object;
  #L40a496.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L40a49a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40a4a0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableAmb$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40a4b4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.d` @type ^`boolean` @kind boolean;
  #L40a4b8.  if v0 == 0 then goto L40a4c8;
  #L40a4bc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40a4c0.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40a4c6.  goto L40a506;
  #L40a4c8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$a` @kind object;
  #L40a4cc.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.b` @type ^`int`;
  #L40a4d0.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$a;.b:(I)Z` @kind virtual;
  #L40a4d6.  v0:= temp;
  #L40a4d8.  if v0 == 0 then goto L40a4ee;
  #L40a4dc.  v0:= 1I;
  #L40a4de.  v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.d` @type ^`boolean` := v0 @kind boolean;
  #L40a4e2.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40a4e6.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40a4ec.  goto L40a506;
  #L40a4ee.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L40a4f4.  v0:= temp @kind object;
  #L40a4f6.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L40a4fa.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40a500.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40a506.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableAmb$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40a518.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.d` @type ^`boolean` @kind boolean;
  #L40a51c.  if v0 == 0 then goto L40a52c;
  #L40a520.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40a524.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40a52a.  goto L40a564;
  #L40a52c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$a` @kind object;
  #L40a530.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.b` @type ^`int`;
  #L40a534.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$a;.b:(I)Z` @kind virtual;
  #L40a53a.  v0:= temp;
  #L40a53c.  if v0 == 0 then goto L40a552;
  #L40a540.  v0:= 1I;
  #L40a542.  v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.d` @type ^`boolean` := v0 @kind boolean;
  #L40a546.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40a54a.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40a550.  goto L40a564;
  #L40a552.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L40a558.  v3:= temp @kind object;
  #L40a55a.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L40a55e.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40a564.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableAmb$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40a578.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAmb$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40a57c.  call temp:= `deferredSetOnce`(v1, v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40a582.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableAmb$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40a594.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAmb$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40a598.  call `deferredRequest`(v1, v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L40a59e.  return @kind void;
}
