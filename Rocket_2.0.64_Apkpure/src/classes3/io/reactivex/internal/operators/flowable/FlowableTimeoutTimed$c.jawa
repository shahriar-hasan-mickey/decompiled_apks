record `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.d` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.e` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.f` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.h` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler$Worker` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$c;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L425334.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42533a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L42533e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L425344.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L425348.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L42534c.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.b` @type ^`long` := v3 @kind wide;
  #L425350.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.c` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L425354.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.d` @type ^`io.reactivex.Scheduler$Worker` := v6 @kind object;
  #L425358.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$c;.a:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4254b4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4254b8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4254be.  v0:= temp @kind object;
  #L4254c0.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L4254c4.  if v0 == 0 then goto L4254ce;
  #L4254c8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4254ce.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4254d2.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableTimeoutTimed.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4254d6.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4254dc.  v0:= temp;
  #L4254de.  if v0 == 0 then goto L42550a;
  #L4254e2.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4254e6.  v1:= new `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c$a`;
  #L4254ea.  call `<init>`(v1, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$c$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$c;J)V` @kind direct;
  #L4254f0.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.b` @type ^`long` @kind wide;
  #L4254f4.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4254f8.  call temp:= `schedule`(v0, v1, v4, v2) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L4254fe.  v4:= temp @kind object;
  #L425500.  v5:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L425504.  call temp:= `replace`(v5, v4) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42550a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L42536c.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$c;.dispose:()V` @kind virtual;
  #L425372.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L425384.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L425388.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L42538e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L425392.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L425398.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L425314.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L425318.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42531e.  v0:= temp;
  #L425320.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4253ac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.h` @type ^`boolean` @kind boolean;
  #L4253b0.  if v0 == 0 then goto L4253b6;
  #L4253b4.  return @kind void;
  #L4253b6.  v0:= 1I;
  #L4253b8.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.h` @type ^`boolean` := v0 @kind boolean;
  #L4253bc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4253c0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4253c6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4253ca.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4253d0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4253e4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.h` @type ^`boolean` @kind boolean;
  #L4253e8.  if v0 == 0 then goto L4253f4;
  #L4253ec.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4253f2.  return @kind void;
  #L4253f4.  v0:= 1I;
  #L4253f6.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.h` @type ^`boolean` := v0 @kind boolean;
  #L4253fa.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4253fe.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L425404.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L425408.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42540e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L425420.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.h` @type ^`boolean` @kind boolean;
  #L425424.  if v0 == 0 then goto L42542a;
  #L425428.  return @kind void;
  #L42542a.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.g` @type ^`long` @kind wide;
  #L42542e.  v2:= 1L;
  #L425432.  v0:= v0 + v2 @kind long;
  #L425434.  v4.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.g` @type ^`long` := v0 @kind wide;
  #L425438.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L42543c.  call `onNext`(v2, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L425442.  call `a`(v4, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$c;.a:(J)V` @kind virtual;
  #L425448.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42545c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L425460.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L425466.  v0:= temp;
  #L425468.  if v0 == 0 then goto L425484;
  #L42546c.  v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.e` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L425470.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L425474.  call `onSubscribe`(v3, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L42547a.  v0:= 0L;
  #L42547e.  call `a`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$c;.a:(J)V` @kind virtual;
  #L425484.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L425498.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L42549c.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4254a2.  return @kind void;
}
