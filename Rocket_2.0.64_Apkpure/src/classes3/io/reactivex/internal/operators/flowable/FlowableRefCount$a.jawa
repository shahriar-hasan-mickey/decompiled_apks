record `io.reactivex.internal.operators.flowable.FlowableRefCount$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableRefCount$a.a` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.flowable.FlowableRefCount$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.flowable.FlowableRefCount$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableRefCount$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableRefCount` `io.reactivex.internal.operators.flowable.FlowableRefCount$a.e` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRefCount$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRefCount$a` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableRefCount` v1 @kind object, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.disposables.CompositeDisposable` v3 @kind object, `io.reactivex.disposables.Disposable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableRefCount;Lorg/reactivestreams/Subscriber;Lio/reactivex/disposables/CompositeDisposable;Lio/reactivex/disposables/Disposable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41df10.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.e` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` := v1 @kind object;
  #L41df14.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L41df1a.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L41df1e.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.b` @type ^`io.reactivex.disposables.CompositeDisposable` := v3 @kind object;
  #L41df22.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.c` @type ^`io.reactivex.disposables.Disposable` := v4 @kind object;
  #L41df26.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L41df2a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L41df30.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L41df34.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableRefCount$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L41df6c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.e` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` @kind object;
  #L41df70.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableRefCount.e` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L41df74.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantLock;.lock:()V` @kind virtual;
  #L41df7a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.e` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` @kind object;
  #L41df7e.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableRefCount.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L41df82.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.b` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L41df86.  if v0 != v1 then goto L41dfd4;
  #L41df8a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.e` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` @kind object;
  #L41df8e.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableRefCount.b` @type ^`io.reactivex.flowables.ConnectableFlowable` @kind object;
  #L41df92.  v1:= instanceof @variable v0 @type ^`io.reactivex.disposables.Disposable` @kind boolean;
  #L41df96.  if v1 == 0 then goto L41dfa4;
  #L41df9a.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L41df9e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41dfa4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.e` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` @kind object;
  #L41dfa8.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableRefCount.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L41dfac.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L41dfb2.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.e` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` @kind object;
  #L41dfb6.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L41dfba.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L41dfc0.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount.c` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L41dfc4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.e` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` @kind object;
  #L41dfc8.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableRefCount.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L41dfcc.  v1:= 0I;
  #L41dfce.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L41dfd4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.e` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` @kind object;
  #L41dfd8.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableRefCount.e` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L41dfdc.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantLock;.unlock:()V` @kind virtual;
  #L41dfe2.  return @kind void;
  #L41dfe4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41dfe6.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.e` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` @kind object;
  #L41dfea.  v1:= v1.`io.reactivex.internal.operators.flowable.FlowableRefCount.e` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L41dfee.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantLock;.unlock:()V` @kind virtual;
  #L41dff4.  throw v0;
  catch `java.lang.Throwable` @[L41df7a..L41dfd4] goto L41dfe4;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableRefCount$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41df48.  call temp:= `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L41df4e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L41df52.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41df58.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableRefCount$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41e014.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;.a:()V` @kind virtual;
  #L41e01a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41e01e.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41e024.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableRefCount$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41e038.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;.a:()V` @kind virtual;
  #L41e03e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41e042.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41e048.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableRefCount$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41e05c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41e060.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41e066.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableRefCount$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41e078.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L41e07c.  call temp:= `deferredSetOnce`(v1, v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L41e082.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableRefCount$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41e094.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L41e098.  call `deferredRequest`(v1, v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L41e09e.  return @kind void;
}
