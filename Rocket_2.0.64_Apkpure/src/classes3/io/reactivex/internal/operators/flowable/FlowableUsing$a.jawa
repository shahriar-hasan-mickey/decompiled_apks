record `io.reactivex.internal.operators.flowable.FlowableUsing$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableUsing$a.a` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableUsing$a.b` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.flowable.FlowableUsing$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableUsing$a.d` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableUsing$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableUsing$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableUsing$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$a;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Lio/reactivex/functions/Consumer;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L425c9c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L425ca2.  v0.`io.reactivex.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L425ca6.  v0.`io.reactivex.internal.operators.flowable.FlowableUsing$a.b` @type ^`java.lang.Object` := v2 @kind object;
  #L425caa.  v0.`io.reactivex.internal.operators.flowable.FlowableUsing$a.c` @type ^`io.reactivex.functions.Consumer` := v3 @kind object;
  #L425cae.  v0.`io.reactivex.internal.operators.flowable.FlowableUsing$a.d` @type ^`boolean` := v4 @kind boolean;
  #L425cb2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableUsing$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L425ce8.  v0:= 0I;
  #L425cea.  v1:= 1I;
  #L425cec.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L425cf2.  v0:= temp;
  #L425cf4.  if v0 == 0 then goto L425d16;
  #L425cf8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$a.c` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L425cfc.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$a.b` @type ^`java.lang.Object` @kind object;
  #L425d00.  call `accept`(v0, v1) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L425d06.  goto L425d16;
  #L425d08.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L425d0a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L425d10.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L425d16.  return @kind void;
  catch `java.lang.Throwable` @[L425cf8..L425d06] goto L425d08;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableUsing$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L425cc4.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$a;.a:()V` @kind virtual;
  #L425cca.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L425cce.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L425cd4.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableUsing$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L425d34.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$a.d` @type ^`boolean` @kind boolean;
  #L425d38.  if v0 == 0 then goto L425d86;
  #L425d3c.  v0:= 0I;
  #L425d3e.  v1:= 1I;
  #L425d40.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L425d46.  v0:= temp;
  #L425d48.  if v0 == 0 then goto L425d70;
  #L425d4c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$a.c` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L425d50.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$a.b` @type ^`java.lang.Object` @kind object;
  #L425d54.  call `accept`(v0, v1) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L425d5a.  goto L425d70;
  #L425d5c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L425d5e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L425d64.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L425d68.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L425d6e.  return @kind void;
  #L425d70.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L425d74.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L425d7a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L425d7e.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L425d84.  goto L425da0;
  #L425d86.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L425d8a.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L425d90.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L425d94.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L425d9a.  call `a`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$a;.a:()V` @kind virtual;
  #L425da0.  return @kind void;
  catch `java.lang.Throwable` @[L425d4c..L425d5a] goto L425d5c;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableUsing$a` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L425dc0.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$a.d` @type ^`boolean` @kind boolean;
  #L425dc4.  if v0 == 0 then goto L425e30;
  #L425dc8.  v0:= 0I;
  #L425dca.  v1:= 0I;
  #L425dcc.  v2:= 1I;
  #L425dce.  call temp:= `compareAndSet`(v6, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L425dd4.  v3:= temp;
  #L425dd6.  if v3 == 0 then goto L425df2;
  #L425dda.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$a.c` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L425dde.  v4:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$a.b` @type ^`java.lang.Object` @kind object;
  #L425de2.  call `accept`(v3, v4) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L425de8.  goto L425df2;
  #L425dea.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L425dec.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L425df2.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L425df6.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L425dfc.  if v0 == 0 then goto L425e24;
  #L425e00.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L425e04.  v4:= new `io.reactivex.exceptions.CompositeException`;
  #L425e08.  v5:= 2I;
  #L425e0a.  v5:= new `java.lang.Throwable`[v5];
  #L425e0e.  v5[v1]:= v7 @kind object;
  #L425e12.  v5[v2]:= v0 @kind object;
  #L425e16.  call `<init>`(v4, v5) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L425e1c.  call `onError`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L425e22.  goto L425e4a;
  #L425e24.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L425e28.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L425e2e.  goto L425e4a;
  #L425e30.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L425e34.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L425e3a.  v7:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L425e3e.  call `cancel`(v7) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L425e44.  call `a`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$a;.a:()V` @kind virtual;
  #L425e4a.  return @kind void;
  catch `java.lang.Throwable` @[L425dda..L425de8] goto L425dea;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableUsing$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L425e68.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L425e6c.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L425e72.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableUsing$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L425e84.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L425e88.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L425e8e.  v0:= temp;
  #L425e90.  if v0 == 0 then goto L425ea2;
  #L425e94.  v1.`io.reactivex.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L425e98.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L425e9c.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L425ea2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableUsing$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L425eb4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L425eb8.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L425ebe.  return @kind void;
}
