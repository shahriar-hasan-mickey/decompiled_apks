record `io.reactivex.internal.operators.flowable.FlowableBuffer$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.functions.BooleanSupplier` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableBuffer$b.a` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBuffer$b.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$b.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$b.d` @AccessFlag FINAL;
  `java.util.ArrayDeque` `io.reactivex.internal.operators.flowable.FlowableBuffer$b.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableBuffer$b.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableBuffer$b.g` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBuffer$b.h` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$b.i` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBuffer$b.j` @AccessFlag VOLATILE;
  `long` `io.reactivex.internal.operators.flowable.FlowableBuffer$b.k` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableBuffer$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBuffer$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `int` v3 , `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$b;.<init>:(Lorg/reactivestreams/Subscriber;IILjava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40adfc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L40ae02.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L40ae06.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.c` @type ^`int` := v2;
  #L40ae0a.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.d` @type ^`int` := v3;
  #L40ae0e.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.b` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L40ae12.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L40ae16.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L40ae1c.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L40ae20.  v1:= new `java.util.ArrayDeque`;
  #L40ae24.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L40ae2a.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.e` @type ^`java.util.ArrayDeque` := v1 @kind object;
  #L40ae2e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBuffer$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40ae40.  v0:= 1I;
  #L40ae42.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.j` @type ^`boolean` := v0 @kind boolean;
  #L40ae46.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40ae4a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L40ae50.  return @kind void;
}
procedure `boolean` `getAsBoolean`(`io.reactivex.internal.operators.flowable.FlowableBuffer$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$b;.getAsBoolean:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40ade4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.j` @type ^`boolean` @kind boolean;
  #L40ade8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBuffer$b` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40ae64.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.h` @type ^`boolean` @kind boolean;
  #L40ae68.  if v0 == 0 then goto L40ae6e;
  #L40ae6c.  return @kind void;
  #L40ae6e.  v0:= 1I;
  #L40ae70.  v5.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.h` @type ^`boolean` := v0 @kind boolean;
  #L40ae74.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.k` @type ^`long` @kind wide;
  #L40ae78.  v2:= 0L;
  #L40ae7c.  v4:= lcmp(v0, v2);
  #L40ae80.  if v4 == 0 then goto L40ae8a;
  #L40ae84.  call temp:= `produced`(v5, v0) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L40ae8a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40ae8e.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L40ae92.  call `postComplete`(v0, v1, v5, v5) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.postComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLong;Lio/reactivex/functions/BooleanSupplier;)V` @kind static;
  #L40ae98.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBuffer$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40aeac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.h` @type ^`boolean` @kind boolean;
  #L40aeb0.  if v0 == 0 then goto L40aebc;
  #L40aeb4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40aeba.  return @kind void;
  #L40aebc.  v0:= 1I;
  #L40aebe.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.h` @type ^`boolean` := v0 @kind boolean;
  #L40aec2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L40aec6.  call `clear`(v0) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L40aecc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40aed0.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40aed6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBuffer$b` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L40aee8.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.h` @type ^`boolean` @kind boolean;
  #L40aeec.  if v0 == 0 then goto L40aef2;
  #L40aef0.  return @kind void;
  #L40aef2.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L40aef6.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.i` @type ^`int`;
  #L40aefa.  v2:= v1 + 1;
  #L40aefe.  if v1 != 0 then goto L40af3c;
  #L40af02.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L40af06.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L40af0c.  v1:= temp @kind object;
  #L40af0e.  v3:= "The bufferSupplier returned a null buffer" @kind object;
  #L40af12.  call temp:= `requireNonNull`(v1, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40af18.  v1:= temp @kind object;
  #L40af1a.  v1:= (`java.util.Collection`) v1 @kind object;
  #L40af1e.  call temp:= `offer`(v0, v1) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L40af24.  goto L40af3c;
  #L40af26.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40af28.  call `throwIfFatal`(v8) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40af2e.  call `cancel`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$b;.cancel:()V` @kind virtual;
  #L40af34.  call `onError`(v7, v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L40af3a.  return @kind void;
  #L40af3c.  call temp:= `peek`(v0) @signature `Ljava/util/ArrayDeque;.peek:()Ljava/lang/Object;` @kind virtual;
  #L40af42.  v1:= temp @kind object;
  #L40af44.  v1:= (`java.util.Collection`) v1 @kind object;
  #L40af48.  if v1 == 0 then goto L40af84;
  #L40af4c.  call temp:= `size`(v1) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L40af52.  v3:= temp;
  #L40af54.  v3:= v3 + 1;
  #L40af58.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.c` @type ^`int`;
  #L40af5c.  if v3 != v4 then goto L40af84;
  #L40af60.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L40af66.  call temp:= `add`(v1, v8) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L40af6c.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.k` @type ^`long` @kind wide;
  #L40af70.  v5:= 1L;
  #L40af74.  v3:= v3 + v5 @kind long;
  #L40af76.  v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.k` @type ^`long` := v3 @kind wide;
  #L40af7a.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40af7e.  call `onNext`(v3, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L40af84.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L40af8a.  v0:= temp @kind object;
  #L40af8c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40af92.  v1:= temp;
  #L40af94.  if v1 == 0 then goto L40afac;
  #L40af98.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40af9e.  v1:= temp @kind object;
  #L40afa0.  v1:= (`java.util.Collection`) v1 @kind object;
  #L40afa4.  call temp:= `add`(v1, v8) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L40afaa.  goto L40af8c;
  #L40afac.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.d` @type ^`int`;
  #L40afb0.  if v2 != v8 then goto L40afb6;
  #L40afb4.  v2:= 0I;
  #L40afb6.  v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.i` @type ^`int` := v2;
  #L40afba.  return @kind void;
  catch `java.lang.Throwable` @[L40af02..L40af1e] goto L40af26;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBuffer$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40afd8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40afdc.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L40afe2.  v0:= temp;
  #L40afe4.  if v0 == 0 then goto L40aff6;
  #L40afe8.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.g` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L40afec.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40aff0.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40aff6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBuffer$b` v7 @kind this, `long` v8 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L40b008.  call temp:= `validate`(v8) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L40b00e.  v0:= temp;
  #L40b010.  if v0 == 0 then goto L40b09a;
  #L40b014.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40b018.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L40b01c.  v1:= v8 @kind wide;
  #L40b01e.  v5:= v7 @kind object;
  #L40b020.  v6:= v7 @kind object;
  #L40b022.  call temp:= `postCompleteRequest`(v1, v3, v4, v5, v6) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.postCompleteRequest:(JLorg/reactivestreams/Subscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLong;Lio/reactivex/functions/BooleanSupplier;)Z` @kind static;
  #L40b028.  v0:= temp;
  #L40b02a.  if v0 == 0 then goto L40b030;
  #L40b02e.  return @kind void;
  #L40b030.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L40b034.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L40b03a.  v0:= temp;
  #L40b03c.  if v0 != 0 then goto L40b082;
  #L40b040.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L40b044.  v1:= 0I;
  #L40b046.  v2:= 1I;
  #L40b048.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L40b04e.  v0:= temp;
  #L40b050.  if v0 == 0 then goto L40b082;
  #L40b054.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.d` @type ^`int`;
  #L40b058.  v0:= (`long`) v0 @kind i2l;
  #L40b05a.  v2:= 1L;
  #L40b05e.  v8:= v8 - v2 @kind long;
  #L40b060.  call temp:= `multiplyCap`(v0, v8) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L40b066.  v8:= temp @kind wide;
  #L40b068.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.c` @type ^`int`;
  #L40b06c.  v0:= (`long`) v0 @kind i2l;
  #L40b06e.  call temp:= `addCap`(v0, v8) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L40b074.  v8:= temp @kind wide;
  #L40b076.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40b07a.  call `request`(v0, v8) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40b080.  goto L40b09a;
  #L40b082.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.d` @type ^`int`;
  #L40b086.  v0:= (`long`) v0 @kind i2l;
  #L40b088.  call temp:= `multiplyCap`(v0, v8) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L40b08e.  v8:= temp @kind wide;
  #L40b090.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L40b094.  call `request`(v0, v8) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L40b09a.  return @kind void;
}
