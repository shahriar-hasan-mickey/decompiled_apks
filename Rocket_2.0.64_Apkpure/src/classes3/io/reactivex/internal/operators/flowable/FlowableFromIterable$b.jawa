record `io.reactivex.internal.operators.flowable.FlowableFromIterable$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableFromIterable$a` @kind class {
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.flowable.FlowableFromIterable$b.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFromIterable$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$b` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$b;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4164a0.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$a;.<init>:(Ljava/util/Iterator;)V` @kind direct;
  #L4164a6.  v0.`io.reactivex.internal.operators.flowable.FlowableFromIterable$b.d` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L4164aa.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4164bc.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` @kind object;
  #L4164c0.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$b.d` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4164c4.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L4164c8.  if v2 == 0 then goto L4164ce;
  #L4164cc.  return @kind void;
  #L4164ce.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4164d4.  v2:= temp @kind object;
  #L4164d6.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L4164da.  if v3 == 0 then goto L4164e0;
  #L4164de.  return @kind void;
  #L4164e0.  if v2 != 0 then goto L4164fa;
  #L4164e4.  v0:= new `java.lang.NullPointerException`;
  #L4164e8.  v2:= "Iterator.next() returned a null value" @kind object;
  #L4164ec.  call `<init>`(v0, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4164f2.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4164f8.  return @kind void;
  #L4164fa.  call temp:= `tryOnNext`(v1, v2) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L416500.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L416504.  if v2 == 0 then goto L41650a;
  #L416508.  return @kind void;
  #L41650a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L416510.  v2:= temp;
  #L416512.  if v2 != 0 then goto L4164c4;
  #L416516.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L41651a.  if v0 != 0 then goto L416524;
  #L41651e.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L416524.  return @kind void;
  #L416526.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L416528.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41652e.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L416534.  return @kind void;
  #L416536.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L416538.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41653e.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L416544.  return @kind void;
  catch `java.lang.Throwable` @[L4164ce..L4164d6] goto L416536;
  catch `java.lang.Throwable` @[L41650a..L416512] goto L416526;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$b` v8 @kind this, `long` v9 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$b;.e:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L416570.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` @kind object;
  #L416574.  v1:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$b.d` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L416578.  v2:= 0L;
  #L41657c.  v4:= v2 @kind wide;
  #L41657e.  v6:= lcmp(v4, v9);
  #L416582.  if v6 == 0 then goto L416616;
  #L416586.  v6:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L41658a.  if v6 == 0 then goto L416590;
  #L41658e.  return @kind void;
  #L416590.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L416596.  v6:= temp @kind object;
  #L416598.  v7:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L41659c.  if v7 == 0 then goto L4165a2;
  #L4165a0.  return @kind void;
  #L4165a2.  if v6 != 0 then goto L4165bc;
  #L4165a6.  v9:= new `java.lang.NullPointerException`;
  #L4165aa.  v10:= "Iterator.next() returned a null value" @kind object;
  #L4165ae.  call `<init>`(v9, v10) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4165b4.  call `onError`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4165ba.  return @kind void;
  #L4165bc.  call temp:= `tryOnNext`(v1, v6) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4165c2.  v6:= temp;
  #L4165c4.  v7:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L4165c8.  if v7 == 0 then goto L4165ce;
  #L4165cc.  return @kind void;
  #L4165ce.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4165d4.  v7:= temp;
  #L4165d6.  if v7 != 0 then goto L4165ea;
  #L4165da.  v9:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L4165de.  if v9 != 0 then goto L4165e8;
  #L4165e2.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4165e8.  return @kind void;
  #L4165ea.  if v6 == 0 then goto L41657e;
  #L4165ee.  v6:= 1L;
  #L4165f2.  v4:= v4 + v6 @kind long;
  #L4165f4.  goto L41657e;
  #L4165f6.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4165f8.  call `throwIfFatal`(v9) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4165fe.  call `onError`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L416604.  return @kind void;
  #L416606.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L416608.  call `throwIfFatal`(v9) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41660e.  call `onError`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L416614.  return @kind void;
  #L416616.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L41661c.  v9:= temp @kind wide;
  #L41661e.  v6:= lcmp(v4, v9);
  #L416622.  if v6 != 0 then goto L41657e;
  #L416626.  v9:= -v4 @kind long;
  #L416628.  call temp:= `addAndGet`(v8, v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L41662e.  v9:= temp @kind wide;
  #L416630.  v4:= lcmp(v9, v2);
  #L416634.  if v4 != 0 then goto L41657c;
  #L416638.  return @kind void;
  catch `java.lang.Throwable` @[L416590..L416598] goto L416606;
  catch `java.lang.Throwable` @[L4165ce..L4165d6] goto L4165f6;
}
