record `io.reactivex.internal.operators.flowable.FlowableRefCount` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `io.reactivex.flowables.ConnectableFlowable` `io.reactivex.internal.operators.flowable.FlowableRefCount.b` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.flowable.FlowableRefCount.c` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableRefCount.d` @AccessFlag FINAL;
  `java.util.concurrent.locks.ReentrantLock` `io.reactivex.internal.operators.flowable.FlowableRefCount.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRefCount` v1 @kind this, `io.reactivex.flowables.ConnectableFlowable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.<init>:(Lio/reactivex/flowables/ConnectableFlowable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L41e270.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L41e276.  v0:= new `io.reactivex.disposables.CompositeDisposable`;
  #L41e27a.  call `<init>`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L41e280.  v1.`io.reactivex.internal.operators.flowable.FlowableRefCount.c` @type ^`io.reactivex.disposables.CompositeDisposable` := v0 @kind object;
  #L41e284.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L41e288.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L41e28e.  v1.`io.reactivex.internal.operators.flowable.FlowableRefCount.d` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L41e292.  v0:= new `java.util.concurrent.locks.ReentrantLock`;
  #L41e296.  call `<init>`(v0) @signature `Ljava/util/concurrent/locks/ReentrantLock;.<init>:()V` @kind direct;
  #L41e29c.  v1.`io.reactivex.internal.operators.flowable.FlowableRefCount.e` @type ^`java.util.concurrent.locks.ReentrantLock` := v0 @kind object;
  #L41e2a0.  v1.`io.reactivex.internal.operators.flowable.FlowableRefCount.b` @type ^`io.reactivex.flowables.ConnectableFlowable` := v2 @kind object;
  #L41e2a4.  return @kind void;
}
procedure `io.reactivex.disposables.Disposable` `e`(`io.reactivex.internal.operators.flowable.FlowableRefCount` v1 @kind this, `io.reactivex.disposables.CompositeDisposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.e:(Lio/reactivex/disposables/CompositeDisposable;)Lio/reactivex/disposables/Disposable;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L41e230.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRefCount$c`;
  #L41e234.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$c;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableRefCount;Lio/reactivex/disposables/CompositeDisposable;)V` @kind direct;
  #L41e23a.  call temp:= `fromRunnable`(v0) @signature `Lio/reactivex/disposables/Disposables;.fromRunnable:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind static;
  #L41e240.  v2:= temp @kind object;
  #L41e242.  return v2 @kind object;
}
procedure `io.reactivex.functions.Consumer` `g`(`io.reactivex.internal.operators.flowable.FlowableRefCount` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `java.util.concurrent.atomic.AtomicBoolean` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.g:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicBoolean;)Lio/reactivex/functions/Consumer;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L41e254.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRefCount$b`;
  #L41e258.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$b;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableRefCount;Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicBoolean;)V` @kind direct;
  #L41e25e.  return v0 @kind object;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableRefCount` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object, `io.reactivex.disposables.CompositeDisposable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.f:(Lorg/reactivestreams/Subscriber;Lio/reactivex/disposables/CompositeDisposable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L41e2b8.  call temp:= `e`(v2, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.e:(Lio/reactivex/disposables/CompositeDisposable;)Lio/reactivex/disposables/Disposable;` @kind direct;
  #L41e2be.  v0:= temp @kind object;
  #L41e2c0.  v1:= new `io.reactivex.internal.operators.flowable.FlowableRefCount$a`;
  #L41e2c4.  call `<init>`(v1, v2, v3, v4, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableRefCount;Lorg/reactivestreams/Subscriber;Lio/reactivex/disposables/CompositeDisposable;Lio/reactivex/disposables/Disposable;)V` @kind direct;
  #L41e2ca.  call `onSubscribe`(v3, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L41e2d0.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount.b` @type ^`io.reactivex.flowables.ConnectableFlowable` @kind object;
  #L41e2d4.  call `subscribe`(v3, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L41e2da.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableRefCount` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41e2ec.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount.e` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L41e2f0.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantLock;.lock:()V` @kind virtual;
  #L41e2f6.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L41e2fa.  call temp:= `incrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L41e300.  v0:= temp;
  #L41e302.  v1:= 1I;
  #L41e304.  if v0 != v1 then goto L41e356;
  #L41e308.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L41e30c.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:(Z)V` @kind direct;
  #L41e312.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount.b` @type ^`io.reactivex.flowables.ConnectableFlowable` @kind object;
  #L41e316.  call temp:= `g`(v2, v3, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.g:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicBoolean;)Lio/reactivex/functions/Consumer;` @kind direct;
  #L41e31c.  v3:= temp @kind object;
  #L41e31e.  call `connect`(v1, v3) @signature `Lio/reactivex/flowables/ConnectableFlowable;.connect:(Lio/reactivex/functions/Consumer;)V` @kind virtual;
  #L41e324.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L41e32a.  v3:= temp;
  #L41e32c.  if v3 == 0 then goto L41e36a;
  #L41e330.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount.e` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L41e334.  call `unlock`(v3) @signature `Ljava/util/concurrent/locks/ReentrantLock;.unlock:()V` @kind virtual;
  #L41e33a.  goto L41e36a;
  #L41e33c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41e33e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L41e344.  v0:= temp;
  #L41e346.  if v0 == 0 then goto L41e354;
  #L41e34a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount.e` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L41e34e.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantLock;.unlock:()V` @kind virtual;
  #L41e354.  throw v3;
  #L41e356.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L41e35a.  call `f`(v2, v3, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.f:(Lorg/reactivestreams/Subscriber;Lio/reactivex/disposables/CompositeDisposable;)V` @kind virtual;
  #L41e360.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount.e` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L41e364.  call `unlock`(v3) @signature `Ljava/util/concurrent/locks/ReentrantLock;.unlock:()V` @kind virtual;
  #L41e36a.  return @kind void;
  #L41e36c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41e36e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount.e` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L41e372.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantLock;.unlock:()V` @kind virtual;
  #L41e378.  throw v3;
  catch `java.lang.Throwable` @[L41e312..L41e324] goto L41e33c;
  catch `java.lang.Throwable` @[L41e356..L41e360] goto L41e36c;
}
