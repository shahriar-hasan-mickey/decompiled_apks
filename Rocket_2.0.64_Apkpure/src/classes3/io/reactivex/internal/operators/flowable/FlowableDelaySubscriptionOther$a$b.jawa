record `io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a$b` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a` `io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a$b.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a$b` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$a$b;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L410ea8.  v0.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a` := v1 @kind object;
  #L410eac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L410eb2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$a$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L410ec4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a` @kind object;
  #L410ec8.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a.b` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L410ecc.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L410ed2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$a$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L410ee4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a` @kind object;
  #L410ee8.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a.b` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L410eec.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L410ef2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$a$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L410f04.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a` @kind object;
  #L410f08.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a.b` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L410f0c.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L410f12.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$a$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L410f24.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a` @kind object;
  #L410f28.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a.a` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L410f2c.  call `setSubscription`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L410f32.  return @kind void;
}
