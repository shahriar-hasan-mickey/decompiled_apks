record `io.reactivex.internal.operators.flowable.FlowableInterval$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableInterval$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableInterval$a.b` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableInterval$a.c` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableInterval$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableInterval$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableInterval$a;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L418e78.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L418e7e.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L418e82.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L418e88.  v1.`io.reactivex.internal.operators.flowable.FlowableInterval$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L418e8c.  v1.`io.reactivex.internal.operators.flowable.FlowableInterval$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L418e90.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableInterval$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableInterval$a;.a:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L418f98.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableInterval$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L418f9c.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L418fa2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableInterval$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableInterval$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L418ea4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableInterval$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L418ea8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L418eae.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableInterval$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableInterval$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L418ec0.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L418ec6.  v0:= temp;
  #L418ec8.  if v0 == 0 then goto L418ed2;
  #L418ecc.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L418ed2.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableInterval$a` v7 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableInterval$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L418ee4.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableInterval$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L418ee8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L418eee.  v0:= temp @kind object;
  #L418ef0.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L418ef4.  if v0 == v1 then goto L418f84;
  #L418ef8.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L418efe.  v0:= temp @kind wide;
  #L418f00.  v2:= 0L;
  #L418f04.  v4:= lcmp(v0, v2);
  #L418f08.  if v4 == 0 then goto L418f36;
  #L418f0c.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableInterval$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L418f10.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableInterval$a.b` @type ^`long` @kind wide;
  #L418f14.  v3:= 1L;
  #L418f18.  v5:= v1 + v3 @kind long;
  #L418f1c.  v7.`io.reactivex.internal.operators.flowable.FlowableInterval$a.b` @type ^`long` := v5 @kind wide;
  #L418f20.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L418f26.  v1:= temp @kind object;
  #L418f28.  call `onNext`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L418f2e.  call temp:= `produced`(v7, v3) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L418f34.  goto L418f84;
  #L418f36.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableInterval$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L418f3a.  v1:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L418f3e.  v2:= new `java.lang.StringBuilder`;
  #L418f42.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L418f48.  v3:= "Can't deliver value " @kind object;
  #L418f4c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L418f52.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableInterval$a.b` @type ^`long` @kind wide;
  #L418f56.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L418f5c.  v3:= " due to lack of requests" @kind object;
  #L418f60.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L418f66.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L418f6c.  v2:= temp @kind object;
  #L418f6e.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L418f74.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L418f7a.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableInterval$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L418f7e.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L418f84.  return @kind void;
}
