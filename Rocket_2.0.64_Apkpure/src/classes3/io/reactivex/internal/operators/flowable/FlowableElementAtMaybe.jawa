record `io.reactivex.internal.operators.flowable.FlowableElementAtMaybe` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class, `io.reactivex.internal.fuseable.FuseToFlowable` @kind interface {
  `io.reactivex.Flowable` `io.reactivex.internal.operators.flowable.FlowableElementAtMaybe.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableElementAtMaybe.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtMaybe;.<init>:(Lio/reactivex/Flowable;J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L412a68.  call `<init>`(v0) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L412a6e.  v0.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe.a` @type ^`io.reactivex.Flowable` := v1 @kind object;
  #L412a72.  v0.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe.b` @type ^`long` := v2 @kind wide;
  #L412a76.  return @kind void;
}
procedure `io.reactivex.Flowable` `fuseToFlowable`(`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe` v7 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtMaybe;.fuseToFlowable:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L412a34.  v6:= new `io.reactivex.internal.operators.flowable.FlowableElementAt`;
  #L412a38.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe.a` @type ^`io.reactivex.Flowable` @kind object;
  #L412a3c.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe.b` @type ^`long` @kind wide;
  #L412a40.  v4:= 0I;
  #L412a42.  v5:= 0I;
  #L412a44.  v0:= v6 @kind object;
  #L412a46.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAt;.<init>:(Lio/reactivex/Flowable;JLjava/lang/Object;Z)V` @kind direct;
  #L412a4c.  call temp:= `onAssembly`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L412a52.  v0:= temp @kind object;
  #L412a54.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe` v4 @kind this, `io.reactivex.MaybeObserver` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtMaybe;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L412a88.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe.a` @type ^`io.reactivex.Flowable` @kind object;
  #L412a8c.  v1:= new `io.reactivex.internal.operators.flowable.FlowableElementAtMaybe$a`;
  #L412a90.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableElementAtMaybe.b` @type ^`long` @kind wide;
  #L412a94.  call `<init>`(v1, v5, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtMaybe$a;.<init>:(Lio/reactivex/MaybeObserver;J)V` @kind direct;
  #L412a9a.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L412aa0.  return @kind void;
}
