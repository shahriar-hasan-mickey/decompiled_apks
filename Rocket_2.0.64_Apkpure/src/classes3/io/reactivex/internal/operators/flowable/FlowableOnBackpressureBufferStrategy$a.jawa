record `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$a` @kind class @AccessFlag SYNTHETIC {
}
global `int`[] `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$a.a` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L41b1e0.  call temp:= `values`() @signature `Lio/reactivex/BackpressureOverflowStrategy;.values:()[Lio/reactivex/BackpressureOverflowStrategy;` @kind static;
  #L41b1e6.  v0:= temp @kind object;
  #L41b1e8.  v0:= length @variable v0;
  #L41b1ea.  v0:= new `int`[v0];
  #L41b1ee.  `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$a.a` @type ^`int`[] := v0 @kind object;
  #L41b1f2.  v1:= `@@io.reactivex.BackpressureOverflowStrategy.DROP_LATEST` @type ^`io.reactivex.BackpressureOverflowStrategy` @kind object;
  #L41b1f6.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L41b1fc.  v1:= temp;
  #L41b1fe.  v2:= 1I;
  #L41b200.  v0[v1]:= v2;
  #L41b204.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$a.a` @type ^`int`[] @kind object;
  #L41b208.  v1:= `@@io.reactivex.BackpressureOverflowStrategy.DROP_OLDEST` @type ^`io.reactivex.BackpressureOverflowStrategy` @kind object;
  #L41b20c.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L41b212.  v1:= temp;
  #L41b214.  v2:= 2I;
  #L41b216.  v0[v1]:= v2;
  #L41b21a.  return @kind void;
  catch `java.lang.NoSuchFieldError` @[L41b1f2..L41b204] goto L41b204;
  catch `java.lang.NoSuchFieldError` @[L41b204..L41b21a] goto L41b21a;
}
