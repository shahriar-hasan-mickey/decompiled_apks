record `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.d` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.e` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.g` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.h` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.i` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.k` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.l` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `long` v5 , `java.util.concurrent.TimeUnit` v7 @kind object, `io.reactivex.Scheduler` v8 @kind object, `int` v9 , `boolean` v10 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L423c80.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L423c86.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L423c8a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L423c90.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L423c94.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L423c98.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.b` @type ^`long` := v3 @kind wide;
  #L423c9c.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.c` @type ^`long` := v5 @kind wide;
  #L423ca0.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.d` @type ^`java.util.concurrent.TimeUnit` := v7 @kind object;
  #L423ca4.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.e` @type ^`io.reactivex.Scheduler` := v8 @kind object;
  #L423ca8.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L423cac.  call `<init>`(v2, v9) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L423cb2.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L423cb6.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.g` @type ^`boolean` := v10 @kind boolean;
  #L423cba.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a` v2 @kind this, `boolean` v3 , `org.reactivestreams.Subscriber` v4 @kind object, `boolean` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.a:(ZLorg/reactivestreams/Subscriber;Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L423c10.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.j` @type ^`boolean` @kind boolean;
  #L423c14.  v1:= 1I;
  #L423c16.  if v0 == 0 then goto L423c26;
  #L423c1a.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L423c1e.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L423c24.  return v1;
  #L423c26.  if v5 == 0 then goto L423c46;
  #L423c2a.  if v3 == 0 then goto L423c6c;
  #L423c2e.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.l` @type ^`java.lang.Throwable` @kind object;
  #L423c32.  if v3 == 0 then goto L423c3e;
  #L423c36.  call `onError`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L423c3c.  goto L423c44;
  #L423c3e.  call `onComplete`(v4) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L423c44.  return v1;
  #L423c46.  v5:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.l` @type ^`java.lang.Throwable` @kind object;
  #L423c4a.  if v5 == 0 then goto L423c60;
  #L423c4e.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L423c52.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L423c58.  call `onError`(v4, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L423c5e.  return v1;
  #L423c60.  if v3 == 0 then goto L423c6c;
  #L423c64.  call `onComplete`(v4) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L423c6a.  return v1;
  #L423c6c.  v3:= 0I;
  #L423c6e.  return v3;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a` v13 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L423d0c.  call temp:= `getAndIncrement`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L423d12.  v0:= temp;
  #L423d14.  if v0 == 0 then goto L423d1a;
  #L423d18.  return @kind void;
  #L423d1a.  v0:= v13.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L423d1e.  v1:= v13.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L423d22.  v2:= v13.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.g` @type ^`boolean` @kind boolean;
  #L423d26.  v3:= 1I;
  #L423d28.  v4:= 1I;
  #L423d2a.  v5:= v13.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.k` @type ^`boolean` @kind boolean;
  #L423d2e.  if v5 == 0 then goto L423db2;
  #L423d32.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L423d38.  v5:= temp;
  #L423d3a.  call temp:= `a`(v13, v5, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.a:(ZLorg/reactivestreams/Subscriber;Z)Z` @kind virtual;
  #L423d40.  v5:= temp;
  #L423d42.  if v5 == 0 then goto L423d48;
  #L423d46.  return @kind void;
  #L423d48.  v5:= v13.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L423d4c.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L423d52.  v5:= temp @kind wide;
  #L423d54.  v7:= 0L;
  #L423d58.  v9:= v7 @kind wide;
  #L423d5a.  call temp:= `peek`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.peek:()Ljava/lang/Object;` @kind virtual;
  #L423d60.  v11:= temp @kind object;
  #L423d62.  if v11 != 0 then goto L423d6a;
  #L423d66.  v11:= 1I;
  #L423d68.  goto L423d6c;
  #L423d6a.  v11:= 0I;
  #L423d6c.  call temp:= `a`(v13, v11, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.a:(ZLorg/reactivestreams/Subscriber;Z)Z` @kind virtual;
  #L423d72.  v11:= temp;
  #L423d74.  if v11 == 0 then goto L423d7a;
  #L423d78.  return @kind void;
  #L423d7a.  v11:= lcmp(v5, v9);
  #L423d7e.  if v11 != 0 then goto L423d96;
  #L423d82.  v5:= lcmp(v9, v7);
  #L423d86.  if v5 == 0 then goto L423db2;
  #L423d8a.  v5:= v13.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L423d8e.  call temp:= `produced`(v5, v9) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L423d94.  goto L423db2;
  #L423d96.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L423d9c.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L423da2.  v11:= temp @kind object;
  #L423da4.  call `onNext`(v0, v11) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L423daa.  v11:= 1L;
  #L423dae.  v9:= v9 + v11 @kind long;
  #L423db0.  goto L423d5a;
  #L423db2.  v4:= -v4 @kind int;
  #L423db4.  call temp:= `addAndGet`(v13, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L423dba.  v4:= temp;
  #L423dbc.  if v4 != 0 then goto L423d2a;
  #L423dc0.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a` v11 @kind this, `long` v12 , `io.reactivex.internal.queue.SpscLinkedArrayQueue` v14 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.c:(JLio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L423efc.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.c` @type ^`long` @kind wide;
  #L423f00.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.b` @type ^`long` @kind wide;
  #L423f04.  v4:= 1I;
  #L423f06.  v5:= 9223372036854775807L;
  #L423f10.  v7:= lcmp(v2, v5);
  #L423f14.  if v7 != 0 then goto L423f1c;
  #L423f18.  v5:= 1I;
  #L423f1a.  goto L423f1e;
  #L423f1c.  v5:= 0I;
  #L423f1e.  call temp:= `isEmpty`(v14) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L423f24.  v6:= temp;
  #L423f26.  if v6 != 0 then goto L423f70;
  #L423f2a.  call temp:= `peek`(v14) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.peek:()Ljava/lang/Object;` @kind virtual;
  #L423f30.  v6:= temp @kind object;
  #L423f32.  v6:= (`java.lang.Long`) v6 @kind object;
  #L423f36.  call temp:= `longValue`(v6) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L423f3c.  v6:= temp @kind wide;
  #L423f3e.  v8:= v12 - v0 @kind long;
  #L423f42.  v10:= lcmp(v6, v8);
  #L423f46.  if v10 < 0 then goto L423f62;
  #L423f4a.  if v5 != 0 then goto L423f70;
  #L423f4e.  call temp:= `size`(v14) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.size:()I` @kind virtual;
  #L423f54.  v6:= temp;
  #L423f56.  v6:= v6 ^> v4 @kind int;
  #L423f58.  v6:= (`long`) v6 @kind i2l;
  #L423f5a.  v8:= lcmp(v6, v2);
  #L423f5e.  if v8 <= 0 then goto L423f70;
  #L423f62.  call temp:= `poll`(v14) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L423f68.  call temp:= `poll`(v14) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L423f6e.  goto L423f1e;
  #L423f70.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L423ccc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.j` @type ^`boolean` @kind boolean;
  #L423cd0.  if v0 != 0 then goto L423cfa;
  #L423cd4.  v0:= 1I;
  #L423cd6.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.j` @type ^`boolean` := v0 @kind boolean;
  #L423cda.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L423cde.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L423ce4.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L423cea.  v0:= temp;
  #L423cec.  if v0 != 0 then goto L423cfa;
  #L423cf0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L423cf4.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L423cfa.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L423dd4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.e` @type ^`io.reactivex.Scheduler` @kind object;
  #L423dd8.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L423ddc.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L423de2.  v0:= temp @kind wide;
  #L423de4.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L423de8.  call `c`(v3, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.c:(JLio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L423dee.  v0:= 1I;
  #L423df0.  v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.k` @type ^`boolean` := v0 @kind boolean;
  #L423df4.  call `b`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.b:()V` @kind virtual;
  #L423dfa.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L423e0c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.g` @type ^`boolean` @kind boolean;
  #L423e10.  if v0 == 0 then goto L423e2e;
  #L423e14.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.e` @type ^`io.reactivex.Scheduler` @kind object;
  #L423e18.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L423e1c.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L423e22.  v0:= temp @kind wide;
  #L423e24.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L423e28.  call `c`(v3, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.c:(JLio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L423e2e.  v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.l` @type ^`java.lang.Throwable` := v4 @kind object;
  #L423e32.  v4:= 1I;
  #L423e34.  v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.k` @type ^`boolean` := v4 @kind boolean;
  #L423e38.  call `b`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.b:()V` @kind virtual;
  #L423e3e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L423e50.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L423e54.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.e` @type ^`io.reactivex.Scheduler` @kind object;
  #L423e58.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L423e5c.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L423e62.  v1:= temp @kind wide;
  #L423e64.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L423e6a.  v3:= temp @kind object;
  #L423e6c.  call temp:= `offer`(v0, v3, v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L423e72.  call `c`(v4, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.c:(JLio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L423e78.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L423e8c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L423e90.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L423e96.  v0:= temp;
  #L423e98.  if v0 == 0 then goto L423eba;
  #L423e9c.  v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.h` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L423ea0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L423ea4.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L423eaa.  v0:= 9223372036854775807L;
  #L423eb4.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L423eba.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L423ecc.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L423ed2.  v0:= temp;
  #L423ed4.  if v0 == 0 then goto L423ee8;
  #L423ed8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L423edc.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L423ee2.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.b:()V` @kind virtual;
  #L423ee8.  return @kind void;
}
