record `io.reactivex.internal.operators.flowable.FlowableConcatMap$a` @kind class @AccessFlag SYNTHETIC {
}
global `int`[] `@@io.reactivex.internal.operators.flowable.FlowableConcatMap$a.a` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L40e368.  call temp:= `values`() @signature `Lio/reactivex/internal/util/ErrorMode;.values:()[Lio/reactivex/internal/util/ErrorMode;` @kind static;
  #L40e36e.  v0:= temp @kind object;
  #L40e370.  v0:= length @variable v0;
  #L40e372.  v0:= new `int`[v0];
  #L40e376.  `@@io.reactivex.internal.operators.flowable.FlowableConcatMap$a.a` @type ^`int`[] := v0 @kind object;
  #L40e37a.  v1:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L40e37e.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L40e384.  v1:= temp;
  #L40e386.  v2:= 1I;
  #L40e388.  v0[v1]:= v2;
  #L40e38c.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableConcatMap$a.a` @type ^`int`[] @kind object;
  #L40e390.  v1:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L40e394.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L40e39a.  v1:= temp;
  #L40e39c.  v2:= 2I;
  #L40e39e.  v0[v1]:= v2;
  #L40e3a2.  return @kind void;
  catch `java.lang.NoSuchFieldError` @[L40e37a..L40e38c] goto L40e38c;
  catch `java.lang.NoSuchFieldError` @[L40e38c..L40e3a2] goto L40e3a2;
}
