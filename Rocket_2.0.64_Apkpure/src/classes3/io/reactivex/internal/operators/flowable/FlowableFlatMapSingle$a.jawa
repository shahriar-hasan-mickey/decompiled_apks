record `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.d` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.f` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.g` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.i` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.j` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.k` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L414fdc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L414fe2.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L414fe6.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.h` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L414fea.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.b` @type ^`boolean` := v3 @kind boolean;
  #L414fee.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.c` @type ^`int` := v4;
  #L414ff2.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L414ff6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L414ffc.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L415000.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L415004.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L41500a.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L41500e.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L415012.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L415018.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L41501c.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L415020.  v2:= 1I;
  #L415022.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L415028.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L41502c.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L415030.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L415036.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L41503a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L415078.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41507c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L415082.  v0:= temp @kind object;
  #L415084.  v0:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L415088.  if v0 == 0 then goto L415092;
  #L41508c.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L415092.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4150a4.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4150aa.  v0:= temp;
  #L4150ac.  if v0 != 0 then goto L4150b6;
  #L4150b0.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.c:()V` @kind virtual;
  #L4150b6.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a` v17 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L4150c8.  v0:= v17 @kind object;
  #L4150cc.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4150d0.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4150d4.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4150d8.  v4:= 1I;
  #L4150da.  v5:= 1I;
  #L4150dc.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4150e0.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4150e6.  v6:= temp @kind wide;
  #L4150e8.  v8:= 0L;
  #L4150ec.  v10:= v8 @kind wide;
  #L4150ee.  v12:= 0I;
  #L4150f0.  v13:= lcmp(v10, v6);
  #L4150f4.  if v13 == 0 then goto L4151b6;
  #L4150f8.  v14:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.k` @type ^`boolean` @kind boolean;
  #L4150fc.  if v14 == 0 then goto L415108;
  #L415100.  call `a`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.a:()V` @kind virtual;
  #L415106.  return @kind void;
  #L415108.  v14:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.b` @type ^`boolean` @kind boolean;
  #L41510c.  if v14 != 0 then goto L41513e;
  #L415110.  v14:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L415114.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41511a.  v14:= temp @kind object;
  #L41511c.  v14:= (`java.lang.Throwable`) v14 @kind object;
  #L415120.  if v14 == 0 then goto L41513e;
  #L415124.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L415128.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L41512e.  v2:= temp @kind object;
  #L415130.  call `a`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.a:()V` @kind virtual;
  #L415136.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41513c.  return @kind void;
  #L41513e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L415144.  v14:= temp;
  #L415146.  if v14 != 0 then goto L41514e;
  #L41514a.  v14:= 1I;
  #L41514c.  goto L415150;
  #L41514e.  v14:= 0I;
  #L415150.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L415156.  v15:= temp @kind object;
  #L415158.  v15:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v15 @kind object;
  #L41515c.  if v15 == 0 then goto L41516a;
  #L415160.  call temp:= `poll`(v15) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L415166.  v15:= temp @kind object;
  #L415168.  goto L41516c;
  #L41516a.  v15:= 0I;
  #L41516c.  if v15 != 0 then goto L415176;
  #L415170.  v16:= 1I;
  #L415174.  goto L41517a;
  #L415176.  v16:= 0I;
  #L41517a.  if v14 == 0 then goto L4151a2;
  #L41517e.  if v16 == 0 then goto L4151a2;
  #L415182.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L415186.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L41518c.  v2:= temp @kind object;
  #L41518e.  if v2 == 0 then goto L41519a;
  #L415192.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L415198.  goto L4151a0;
  #L41519a.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4151a0.  return @kind void;
  #L4151a2.  if v16 == 0 then goto L4151a8;
  #L4151a6.  goto L4151b6;
  #L4151a8.  call `onNext`(v1, v15) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4151ae.  v12:= 1L;
  #L4151b2.  v10:= v10 + v12 @kind long;
  #L4151b4.  goto L4150ee;
  #L4151b6.  if v13 != 0 then goto L415258;
  #L4151ba.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.k` @type ^`boolean` @kind boolean;
  #L4151be.  if v6 == 0 then goto L4151ca;
  #L4151c2.  call `a`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.a:()V` @kind virtual;
  #L4151c8.  return @kind void;
  #L4151ca.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.b` @type ^`boolean` @kind boolean;
  #L4151ce.  if v6 != 0 then goto L415200;
  #L4151d2.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4151d6.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4151dc.  v6:= temp @kind object;
  #L4151de.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L4151e2.  if v6 == 0 then goto L415200;
  #L4151e6.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4151ea.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4151f0.  v2:= temp @kind object;
  #L4151f2.  call `a`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.a:()V` @kind virtual;
  #L4151f8.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4151fe.  return @kind void;
  #L415200.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L415206.  v6:= temp;
  #L415208.  if v6 != 0 then goto L415210;
  #L41520c.  v6:= 1I;
  #L41520e.  goto L415212;
  #L415210.  v6:= 0I;
  #L415212.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L415218.  v7:= temp @kind object;
  #L41521a.  v7:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v7 @kind object;
  #L41521e.  if v7 == 0 then goto L41522e;
  #L415222.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L415228.  v7:= temp;
  #L41522a.  if v7 == 0 then goto L415230;
  #L41522e.  v12:= 1I;
  #L415230.  if v6 == 0 then goto L415258;
  #L415234.  if v12 == 0 then goto L415258;
  #L415238.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L41523c.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L415242.  v2:= temp @kind object;
  #L415244.  if v2 == 0 then goto L415250;
  #L415248.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41524e.  goto L415256;
  #L415250.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L415256.  return @kind void;
  #L415258.  v6:= lcmp(v10, v8);
  #L41525c.  if v6 == 0 then goto L415282;
  #L415260.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L415264.  call temp:= `produced`(v6, v10) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L41526a.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.c` @type ^`int`;
  #L41526e.  v7:= 2147483647I;
  #L415274.  if v6 == v7 then goto L415282;
  #L415278.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41527c.  call `request`(v6, v10) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L415282.  v5:= -v5 @kind int;
  #L415284.  call temp:= `addAndGet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L41528a.  v5:= temp;
  #L41528c.  if v5 != 0 then goto L4150dc;
  #L415290.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41504c.  v0:= 1I;
  #L41504e.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.k` @type ^`boolean` := v0 @kind boolean;
  #L415052.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L415056.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L41505c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L415060.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L415066.  return @kind void;
}
procedure `io.reactivex.internal.queue.SpscLinkedArrayQueue` `d`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.d:()Lio/reactivex/internal/queue/SpscLinkedArrayQueue;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L414f90.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L414f94.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L414f9a.  v0:= temp @kind object;
  #L414f9c.  v0:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L414fa0.  if v0 == 0 then goto L414fa6;
  #L414fa4.  return v0 @kind object;
  #L414fa6.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L414faa.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L414fb0.  v1:= temp;
  #L414fb2.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L414fb8.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L414fbc.  v2:= 0I;
  #L414fbe.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L414fc4.  v1:= temp;
  #L414fc6.  if v1 == 0 then goto L414f90;
  #L414fca.  return v0 @kind object;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a` v2 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.e:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4152a4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4152a8.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4152ae.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4152b2.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4152b8.  v3:= temp;
  #L4152ba.  if v3 == 0 then goto L41530a;
  #L4152be.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.b` @type ^`boolean` @kind boolean;
  #L4152c2.  if v3 != 0 then goto L4152dc;
  #L4152c6.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4152ca.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4152d0.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4152d4.  call `dispose`(v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4152da.  goto L4152f8;
  #L4152dc.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.c` @type ^`int`;
  #L4152e0.  v4:= 2147483647I;
  #L4152e6.  if v3 == v4 then goto L4152f8;
  #L4152ea.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4152ee.  v0:= 1L;
  #L4152f2.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4152f8.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4152fc.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L415302.  call `b`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.b:()V` @kind virtual;
  #L415308.  goto L415310;
  #L41530a.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L415310.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a` v5 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a$a` v6 @kind object, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.f:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a$a;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L415324.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L415328.  call temp:= `delete`(v0, v6) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L41532e.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L415334.  v6:= temp;
  #L415336.  if v6 != 0 then goto L415418;
  #L41533a.  v6:= 0I;
  #L41533c.  v0:= 1I;
  #L41533e.  call temp:= `compareAndSet`(v5, v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L415344.  v1:= temp;
  #L415346.  if v1 == 0 then goto L415418;
  #L41534a.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L41534e.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L415354.  v1:= temp;
  #L415356.  if v1 != 0 then goto L41535c;
  #L41535a.  v6:= 1I;
  #L41535c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L415360.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L415366.  v0:= temp @kind wide;
  #L415368.  v2:= 0L;
  #L41536c.  v4:= lcmp(v0, v2);
  #L415370.  if v4 == 0 then goto L4153f2;
  #L415374.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L415378.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41537e.  v7:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L415382.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L415388.  v7:= temp @kind object;
  #L41538a.  v7:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v7 @kind object;
  #L41538e.  if v6 == 0 then goto L4153ca;
  #L415392.  if v7 == 0 then goto L4153a2;
  #L415396.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L41539c.  v6:= temp;
  #L41539e.  if v6 == 0 then goto L4153ca;
  #L4153a2.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4153a6.  call temp:= `terminate`(v6) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4153ac.  v6:= temp @kind object;
  #L4153ae.  if v6 == 0 then goto L4153be;
  #L4153b2.  v7:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4153b6.  call `onError`(v7, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4153bc.  goto L4153c8;
  #L4153be.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4153c2.  call `onComplete`(v6) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4153c8.  return @kind void;
  #L4153ca.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4153ce.  v0:= 1L;
  #L4153d2.  call temp:= `produced`(v6, v0) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4153d8.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.c` @type ^`int`;
  #L4153dc.  v7:= 2147483647I;
  #L4153e2.  if v6 == v7 then goto L415404;
  #L4153e6.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4153ea.  call `request`(v6, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4153f0.  goto L415404;
  #L4153f2.  call temp:= `d`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.d:()Lio/reactivex/internal/queue/SpscLinkedArrayQueue;` @kind virtual;
  #L4153f8.  v6:= temp @kind object;
  #L4153fa.  @monitorenter v6
  #L4153fc.  call temp:= `offer`(v6, v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L415402.  @monitorexit v6
  #L415404.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L41540a.  v6:= temp;
  #L41540c.  if v6 != 0 then goto L415442;
  #L415410.  return @kind void;
  #L415412.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L415414.  @monitorexit v6
  #L415416.  throw v7;
  #L415418.  call temp:= `d`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.d:()Lio/reactivex/internal/queue/SpscLinkedArrayQueue;` @kind virtual;
  #L41541e.  v6:= temp @kind object;
  #L415420.  @monitorenter v6
  #L415422.  call temp:= `offer`(v6, v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L415428.  @monitorexit v6
  #L41542a.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L41542e.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L415434.  call temp:= `getAndIncrement`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L41543a.  v6:= temp;
  #L41543c.  if v6 == 0 then goto L415442;
  #L415440.  return @kind void;
  #L415442.  call `c`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.c:()V` @kind virtual;
  #L415448.  return @kind void;
  #L41544a.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41544c.  @monitorexit v6
  #L41544e.  throw v7;
  catch `java.lang.Throwable` @[L4153fc..L415404] goto L415412;
  catch `java.lang.Throwable` @[L415414..L415416] goto L415412;
  catch `java.lang.Throwable` @[L415422..L41542a] goto L41544a;
  catch `java.lang.Throwable` @[L41544c..L41544e] goto L41544a;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L415488.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L41548c.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L415492.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.b:()V` @kind virtual;
  #L415498.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4154ac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4154b0.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4154b6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4154ba.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4154c0.  v0:= temp;
  #L4154c2.  if v0 == 0 then goto L4154e0;
  #L4154c6.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.b` @type ^`boolean` @kind boolean;
  #L4154ca.  if v2 != 0 then goto L4154d8;
  #L4154ce.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4154d2.  call `dispose`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4154d8.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.b:()V` @kind virtual;
  #L4154de.  goto L4154e6;
  #L4154e0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4154e6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4154f8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.h` @type ^`io.reactivex.functions.Function` @kind object;
  #L4154fc.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L415502.  v3:= temp @kind object;
  #L415504.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L415508.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41550e.  v3:= temp @kind object;
  #L415510.  v3:= (`io.reactivex.SingleSource`) v3 @kind object;
  #L415514.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L415518.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L41551e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a$a`;
  #L415522.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;)V` @kind direct;
  #L415528.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L41552c.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L415532.  v1:= temp;
  #L415534.  if v1 == 0 then goto L41553e;
  #L415538.  call `subscribe`(v3, v0) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L41553e.  return @kind void;
  #L415540.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L415542.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L415548.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41554c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L415552.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L415558.  return @kind void;
  catch `java.lang.Throwable` @[L4154f8..L415514] goto L415540;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L415578.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41557c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L415582.  v0:= temp;
  #L415584.  if v0 == 0 then goto L4155be;
  #L415588.  v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L41558c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L415590.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L415596.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.c` @type ^`int`;
  #L41559a.  v1:= 2147483647I;
  #L4155a0.  if v0 != v1 then goto L4155b6;
  #L4155a4.  v0:= 9223372036854775807L;
  #L4155ae.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4155b4.  goto L4155be;
  #L4155b6.  v0:= (`long`) v0 @kind i2l;
  #L4155b8.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4155be.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4155d0.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4155d6.  v0:= temp;
  #L4155d8.  if v0 == 0 then goto L4155ec;
  #L4155dc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4155e0.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4155e6.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.b:()V` @kind virtual;
  #L4155ec.  return @kind void;
}
