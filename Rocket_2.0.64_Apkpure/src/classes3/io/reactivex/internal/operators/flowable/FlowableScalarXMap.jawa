record `io.reactivex.internal.operators.flowable.FlowableScalarXMap` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableScalarXMap` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableScalarXMap;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L420c34.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L420c3a.  v0:= new `java.lang.IllegalStateException`;
  #L420c3e.  v1:= "No instances!" @kind object;
  #L420c42.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L420c48.  throw v0;
}
procedure `io.reactivex.Flowable` `scalarXMap`(`java.lang.Object` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableScalarXMap;.scalarXMap:(Ljava/lang/Object;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L420c10.  v0:= new `io.reactivex.internal.operators.flowable.FlowableScalarXMap$a`;
  #L420c14.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableScalarXMap$a;.<init>:(Ljava/lang/Object;Lio/reactivex/functions/Function;)V` @kind direct;
  #L420c1a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L420c20.  v1:= temp @kind object;
  #L420c22.  return v1 @kind object;
}
procedure `boolean` `tryScalarXMapSubscribe`(`org.reactivestreams.Publisher` v1 @kind object, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableScalarXMap;.tryScalarXMapSubscribe:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L420b38.  v0:= instanceof @variable v1 @type ^`java.util.concurrent.Callable` @kind boolean;
  #L420b3c.  if v0 == 0 then goto L420bdc;
  #L420b40.  v0:= 1I;
  #L420b42.  v1:= (`java.util.concurrent.Callable`) v1 @kind object;
  #L420b46.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L420b4c.  v1:= temp @kind object;
  #L420b4e.  if v1 != 0 then goto L420b5a;
  #L420b52.  call `complete`(v2) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.complete:(Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L420b58.  return v0;
  #L420b5a.  call temp:= `apply`(v3, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L420b60.  v1:= temp @kind object;
  #L420b62.  v3:= "The mapper returned a null Publisher" @kind object;
  #L420b66.  call temp:= `requireNonNull`(v1, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L420b6c.  v1:= temp @kind object;
  #L420b6e.  v1:= (`org.reactivestreams.Publisher`) v1 @kind object;
  #L420b72.  v3:= instanceof @variable v1 @type ^`java.util.concurrent.Callable` @kind boolean;
  #L420b76.  if v3 == 0 then goto L420bb4;
  #L420b7a.  v1:= (`java.util.concurrent.Callable`) v1 @kind object;
  #L420b7e.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L420b84.  v1:= temp @kind object;
  #L420b86.  if v1 != 0 then goto L420b92;
  #L420b8a.  call `complete`(v2) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.complete:(Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L420b90.  return v0;
  #L420b92.  v3:= new `io.reactivex.internal.subscriptions.ScalarSubscription`;
  #L420b96.  call `<init>`(v3, v2, v1) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)V` @kind direct;
  #L420b9c.  call `onSubscribe`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L420ba2.  goto L420bba;
  #L420ba4.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L420ba6.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L420bac.  call `error`(v1, v2) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L420bb2.  return v0;
  #L420bb4.  call `subscribe`(v1, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L420bba.  return v0;
  #L420bbc.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L420bbe.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L420bc4.  call `error`(v1, v2) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L420bca.  return v0;
  #L420bcc.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L420bce.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L420bd4.  call `error`(v1, v2) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L420bda.  return v0;
  #L420bdc.  v1:= 0I;
  #L420bde.  return v1;
  catch `java.lang.Throwable` @[L420b42..L420b4e] goto L420bcc;
  catch `java.lang.Throwable` @[L420b5a..L420b72] goto L420bbc;
  catch `java.lang.Throwable` @[L420b7a..L420b86] goto L420ba4;
}
