record `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.e` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.f` @AccessFlag ;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.g` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.i` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.j` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.k` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.l` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.m` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L415840.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L415846.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L41584a.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L41584e.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.c` @type ^`int` := v3;
  #L415852.  v1:= v3 ^> 2;
  #L415856.  v3:= v3 - v1 @kind int;
  #L415858.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.d` @type ^`int` := v3;
  #L41585c.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L415860.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L415866.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L41586a.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L41586e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L415874.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L415878.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41588c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.i` @type ^`boolean` @kind boolean;
  #L415890.  if v0 != 0 then goto L4158ba;
  #L415894.  v0:= 1I;
  #L415896.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.i` @type ^`boolean` := v0 @kind boolean;
  #L41589a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41589e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4158a4.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4158aa.  v0:= temp;
  #L4158ac.  if v0 != 0 then goto L4158ba;
  #L4158b0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L4158b4.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4158ba.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4158cc.  v0:= 0I;
  #L4158ce.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v0 @kind object;
  #L4158d2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L4158d6.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4158dc.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` v18 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L415930.  v1:= v18 @kind object;
  #L415934.  call temp:= `getAndIncrement`(v18) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L41593a.  v0:= temp;
  #L41593c.  if v0 == 0 then goto L415942;
  #L415940.  return @kind void;
  #L415942.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L415946.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L41594a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.m` @type ^`int`;
  #L41594e.  v4:= 0I;
  #L415950.  v5:= 1I;
  #L415952.  if v0 == v5 then goto L41595a;
  #L415956.  v0:= 1I;
  #L415958.  goto L41595c;
  #L41595a.  v0:= 0I;
  #L41595c.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` @kind object;
  #L415960.  v7:= 0I;
  #L415962.  v8:= 1I;
  #L415964.  if v6 != 0 then goto L415a30;
  #L415968.  v9:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` @kind boolean;
  #L41596c.  call temp:= `poll`(v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L415972.  v10:= temp @kind object;
  #L415974.  if v10 != 0 then goto L41597c;
  #L415978.  v11:= 1I;
  #L41597a.  goto L41597e;
  #L41597c.  v11:= 0I;
  #L41597e.  call temp:= `e`(v1, v9, v11, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.e:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)Z` @kind virtual;
  #L415984.  v9:= temp;
  #L415986.  if v9 == 0 then goto L41598c;
  #L41598a.  return @kind void;
  #L41598c.  if v10 == 0 then goto L415a30;
  #L415990.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L415994.  call temp:= `apply`(v6, v10) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L41599a.  v6:= temp @kind object;
  #L41599c.  v6:= (`java.lang.Iterable`) v6 @kind object;
  #L4159a0.  call temp:= `iterator`(v6) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4159a6.  v6:= temp @kind object;
  #L4159a8.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4159ae.  v9:= temp;
  #L4159b0.  if v9 != 0 then goto L4159be;
  #L4159b4.  call `f`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.f:(Z)V` @kind virtual;
  #L4159ba.  v6:= v7 @kind object;
  #L4159bc.  goto L415964;
  #L4159be.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v6 @kind object;
  #L4159c2.  goto L415a30;
  #L4159c4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4159c6.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4159cc.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4159d0.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4159d6.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4159da.  call temp:= `addThrowable`(v3, v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4159e0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4159e4.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L4159ea.  v0:= temp @kind object;
  #L4159ec.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4159f2.  return @kind void;
  #L4159f4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4159f6.  v4:= v0 @kind object;
  #L4159f8.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4159fe.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L415a02.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L415a08.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L415a0c.  call temp:= `addThrowable`(v0, v4) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L415a12.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L415a16.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L415a1c.  v0:= temp @kind object;
  #L415a1e.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v7 @kind object;
  #L415a22.  call `clear`(v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L415a28.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L415a2e.  return @kind void;
  #L415a30.  if v6 == 0 then goto L415b78;
  #L415a34.  v9:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L415a38.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L415a3e.  v9:= temp @kind wide;
  #L415a40.  v11:= 0L;
  #L415a44.  v13:= v11 @kind wide;
  #L415a46.  v15:= lcmp(v13, v9);
  #L415a4a.  if v15 == 0 then goto L415b1c;
  #L415a4e.  v15:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` @kind boolean;
  #L415a52.  call temp:= `e`(v1, v15, v4, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.e:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)Z` @kind virtual;
  #L415a58.  v15:= temp;
  #L415a5a.  if v15 == 0 then goto L415a60;
  #L415a5e.  return @kind void;
  #L415a60.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L415a66.  v15:= temp @kind object;
  #L415a68.  v5:= "The iterator returned a null value" @kind object;
  #L415a6c.  call temp:= `requireNonNull`(v15, v5) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415a72.  v5:= temp @kind object;
  #L415a74.  call `onNext`(v2, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L415a7a.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` @kind boolean;
  #L415a7e.  call temp:= `e`(v1, v5, v4, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.e:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)Z` @kind virtual;
  #L415a84.  v5:= temp;
  #L415a86.  if v5 == 0 then goto L415a8c;
  #L415a8a.  return @kind void;
  #L415a8c.  v16:= 1L;
  #L415a90.  v13:= v13 + v16 @kind long;
  #L415a94.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L415a9a.  v5:= temp;
  #L415a9c.  if v5 != 0 then goto L415aae;
  #L415aa0.  call `f`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.f:(Z)V` @kind virtual;
  #L415aa6.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v7 @kind object;
  #L415aaa.  v6:= v7 @kind object;
  #L415aac.  goto L415b1c;
  #L415aae.  v5:= 1I;
  #L415ab0.  goto L415a46;
  #L415ab2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L415ab4.  v3:= v0 @kind object;
  #L415ab6.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L415abc.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v7 @kind object;
  #L415ac0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L415ac4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L415aca.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L415ace.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L415ad4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L415ad8.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L415ade.  v0:= temp @kind object;
  #L415ae0.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L415ae6.  return @kind void;
  #L415ae8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L415aea.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L415af0.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v7 @kind object;
  #L415af4.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L415af8.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L415afe.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L415b02.  call temp:= `addThrowable`(v3, v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L415b08.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L415b0c.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L415b12.  v0:= temp @kind object;
  #L415b14.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L415b1a.  return @kind void;
  #L415b1c.  v5:= lcmp(v13, v9);
  #L415b20.  if v5 != 0 then goto L415b4c;
  #L415b24.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` @kind boolean;
  #L415b28.  call temp:= `isEmpty`(v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L415b2e.  v15:= temp;
  #L415b30.  if v15 == 0 then goto L415b3c;
  #L415b34.  if v6 != 0 then goto L415b3c;
  #L415b38.  v15:= 1I;
  #L415b3a.  goto L415b3e;
  #L415b3c.  v15:= 0I;
  #L415b3e.  call temp:= `e`(v1, v5, v15, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.e:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)Z` @kind virtual;
  #L415b44.  v5:= temp;
  #L415b46.  if v5 == 0 then goto L415b4c;
  #L415b4a.  return @kind void;
  #L415b4c.  v5:= lcmp(v13, v11);
  #L415b50.  if v5 == 0 then goto L415b72;
  #L415b54.  v11:= 9223372036854775807L;
  #L415b5e.  v5:= lcmp(v9, v11);
  #L415b62.  if v5 == 0 then goto L415b72;
  #L415b66.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L415b6a.  v9:= -v13 @kind long;
  #L415b6c.  call temp:= `addAndGet`(v5, v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L415b72.  if v6 != 0 then goto L415b78;
  #L415b76.  goto L415b88;
  #L415b78.  v5:= -v8 @kind int;
  #L415b7a.  call temp:= `addAndGet`(v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L415b80.  v8:= temp;
  #L415b82.  if v8 != 0 then goto L415b88;
  #L415b86.  return @kind void;
  #L415b88.  v5:= 1I;
  #L415b8a.  goto L415964;
  catch `java.lang.Throwable` @[L41596c..L415974] goto L4159f4;
  catch `java.lang.Throwable` @[L415990..L4159b0] goto L4159c4;
  catch `java.lang.Throwable` @[L415a60..L415a74] goto L415ae8;
  catch `java.lang.Throwable` @[L415a94..L415a9c] goto L415ab2;
}
procedure `boolean` `e`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` v3 @kind this, `boolean` v4 , `boolean` v5 , `org.reactivestreams.Subscriber` v6 @kind object, `io.reactivex.internal.fuseable.SimpleQueue` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.e:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4156f4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.i` @type ^`boolean` @kind boolean;
  #L4156f8.  v1:= 0I;
  #L4156fa.  v2:= 1I;
  #L4156fc.  if v0 == 0 then goto L41570c;
  #L415700.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v1 @kind object;
  #L415704.  call `clear`(v7) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L41570a.  return v2;
  #L41570c.  if v4 == 0 then goto L41574e;
  #L415710.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L415714.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41571a.  v4:= temp @kind object;
  #L41571c.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L415720.  if v4 == 0 then goto L415742;
  #L415724.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L415728.  call temp:= `terminate`(v4) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L41572e.  v4:= temp @kind object;
  #L415730.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v1 @kind object;
  #L415734.  call `clear`(v7) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L41573a.  call `onError`(v6, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L415740.  return v2;
  #L415742.  if v5 == 0 then goto L41574e;
  #L415746.  call `onComplete`(v6) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41574c.  return v2;
  #L41574e.  v4:= 0I;
  #L415750.  return v4;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` v3 @kind this, `boolean` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.f:(Z)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4158f0.  if v4 == 0 then goto L41591c;
  #L4158f4.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.l` @type ^`int`;
  #L4158f8.  v4:= v4 + 1;
  #L4158fc.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.d` @type ^`int`;
  #L415900.  if v4 != v0 then goto L415918;
  #L415904.  v0:= 0I;
  #L415906.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.l` @type ^`int` := v0;
  #L41590a.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41590e.  v1:= (`long`) v4 @kind i2l;
  #L415910.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L415916.  goto L41591c;
  #L415918.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.l` @type ^`int` := v4;
  #L41591c.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L415764.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` @kind object;
  #L415768.  if v0 != 0 then goto L41577a;
  #L41576c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L415770.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L415776.  v0:= temp;
  #L415778.  return v0;
  #L41577a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L415780.  v0:= temp;
  #L415782.  v0:= v0 ^~ 1;
  #L415786.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L415bcc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` @kind boolean;
  #L415bd0.  if v0 == 0 then goto L415bd6;
  #L415bd4.  return @kind void;
  #L415bd6.  v0:= 1I;
  #L415bd8.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` := v0 @kind boolean;
  #L415bdc.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.drain:()V` @kind virtual;
  #L415be2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L415bf4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` @kind boolean;
  #L415bf8.  if v0 != 0 then goto L415c1a;
  #L415bfc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L415c00.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L415c06.  v0:= temp;
  #L415c08.  if v0 == 0 then goto L415c1a;
  #L415c0c.  v2:= 1I;
  #L415c0e.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` := v2 @kind boolean;
  #L415c12.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.drain:()V` @kind virtual;
  #L415c18.  goto L415c20;
  #L415c1a.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L415c20.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L415c34.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` @kind boolean;
  #L415c38.  if v0 == 0 then goto L415c3e;
  #L415c3c.  return @kind void;
  #L415c3e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.m` @type ^`int`;
  #L415c42.  if v0 != 0 then goto L415c6c;
  #L415c46.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L415c4a.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L415c50.  v2:= temp;
  #L415c52.  if v2 != 0 then goto L415c6c;
  #L415c56.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L415c5a.  v0:= "Queue is full?!" @kind object;
  #L415c5e.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L415c64.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L415c6a.  return @kind void;
  #L415c6c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.drain:()V` @kind virtual;
  #L415c72.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L415c84.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L415c88.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L415c8e.  v0:= temp;
  #L415c90.  if v0 == 0 then goto L415d1c;
  #L415c94.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L415c98.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L415c9c.  if v0 == 0 then goto L415cf4;
  #L415ca0.  v0:= v4 @kind object;
  #L415ca2.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L415ca6.  v1:= 3I;
  #L415ca8.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L415cae.  v1:= temp;
  #L415cb0.  v2:= 1I;
  #L415cb2.  if v1 != v2 then goto L415cce;
  #L415cb6.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.m` @type ^`int` := v1;
  #L415cba.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L415cbe.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` := v2 @kind boolean;
  #L415cc2.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L415cc6.  call `onSubscribe`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L415ccc.  return @kind void;
  #L415cce.  v2:= 2I;
  #L415cd0.  if v1 != v2 then goto L415cf4;
  #L415cd4.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.m` @type ^`int` := v1;
  #L415cd8.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L415cdc.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L415ce0.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L415ce6.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.c` @type ^`int`;
  #L415cea.  v0:= (`long`) v0 @kind i2l;
  #L415cec.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L415cf2.  return @kind void;
  #L415cf4.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L415cf8.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.c` @type ^`int`;
  #L415cfc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L415d02.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L415d06.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L415d0a.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L415d10.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.c` @type ^`int`;
  #L415d14.  v0:= (`long`) v0 @kind i2l;
  #L415d16.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L415d1c.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4157c0.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` @kind object;
  #L4157c4.  v1:= 0I;
  #L4157c6.  if v0 != 0 then goto L415808;
  #L4157ca.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L4157ce.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4157d4.  v0:= temp @kind object;
  #L4157d6.  if v0 != 0 then goto L4157dc;
  #L4157da.  return v1 @kind object;
  #L4157dc.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L4157e0.  call temp:= `apply`(v2, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4157e6.  v0:= temp @kind object;
  #L4157e8.  v0:= (`java.lang.Iterable`) v0 @kind object;
  #L4157ec.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4157f2.  v0:= temp @kind object;
  #L4157f4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4157fa.  v2:= temp;
  #L4157fc.  if v2 != 0 then goto L415804;
  #L415800.  v0:= v1 @kind object;
  #L415802.  goto L4157c6;
  #L415804.  v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v0 @kind object;
  #L415808.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L41580e.  v2:= temp @kind object;
  #L415810.  v3:= "The iterator returned a null value" @kind object;
  #L415814.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41581a.  v2:= temp @kind object;
  #L41581c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L415822.  v0:= temp;
  #L415824.  if v0 != 0 then goto L41582c;
  #L415828.  v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v1 @kind object;
  #L41582c.  return v2 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L415d30.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L415d36.  v0:= temp;
  #L415d38.  if v0 == 0 then goto L415d4c;
  #L415d3c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L415d40.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L415d46.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.drain:()V` @kind virtual;
  #L415d4c.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L415798.  v0:= 1I;
  #L41579a.  v2:= v2 ^& v0 @kind int;
  #L41579c.  if v2 == 0 then goto L4157aa;
  #L4157a0.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.m` @type ^`int`;
  #L4157a4.  if v2 != v0 then goto L4157aa;
  #L4157a8.  return v0;
  #L4157aa.  v2:= 0I;
  #L4157ac.  return v2;
}
