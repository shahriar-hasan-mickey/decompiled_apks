record `io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.d` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.e` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `long` v2 , `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle$a;.<init>:(Lio/reactivex/SingleObserver;JLjava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L412ad8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L412ade.  v0.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L412ae2.  v0.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.b` @type ^`long` := v2 @kind wide;
  #L412ae6.  v0.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.c` @type ^`java.lang.Object` := v4 @kind object;
  #L412aea.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L412afc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L412b00.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L412b06.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L412b0a.  v1.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.d` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L412b0e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L412ab4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L412ab8.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L412abc.  if v0 != v1 then goto L412ac4;
  #L412ac0.  v0:= 1I;
  #L412ac2.  goto L412ac6;
  #L412ac4.  v0:= 0I;
  #L412ac6.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L412b20.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L412b24.  v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.d` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L412b28.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.f` @type ^`boolean` @kind boolean;
  #L412b2c.  if v0 != 0 then goto L412b5e;
  #L412b30.  v0:= 1I;
  #L412b32.  v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.f` @type ^`boolean` := v0 @kind boolean;
  #L412b36.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.c` @type ^`java.lang.Object` @kind object;
  #L412b3a.  if v0 == 0 then goto L412b4a;
  #L412b3e.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L412b42.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L412b48.  goto L412b5e;
  #L412b4a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L412b4e.  v1:= new `java.util.NoSuchElementException`;
  #L412b52.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L412b58.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L412b5e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L412b70.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.f` @type ^`boolean` @kind boolean;
  #L412b74.  if v0 == 0 then goto L412b80;
  #L412b78.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L412b7e.  return @kind void;
  #L412b80.  v0:= 1I;
  #L412b82.  v1.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.f` @type ^`boolean` := v0 @kind boolean;
  #L412b86.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L412b8a.  v1.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.d` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L412b8e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L412b92.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L412b98.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L412bac.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.f` @type ^`boolean` @kind boolean;
  #L412bb0.  if v0 == 0 then goto L412bb6;
  #L412bb4.  return @kind void;
  #L412bb6.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.e` @type ^`long` @kind wide;
  #L412bba.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.b` @type ^`long` @kind wide;
  #L412bbe.  v4:= lcmp(v0, v2);
  #L412bc2.  if v4 != 0 then goto L412bea;
  #L412bc6.  v0:= 1I;
  #L412bc8.  v5.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.f` @type ^`boolean` := v0 @kind boolean;
  #L412bcc.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L412bd0.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L412bd6.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L412bda.  v5.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.d` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L412bde.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L412be2.  call `onSuccess`(v0, v6) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L412be8.  return @kind void;
  #L412bea.  v2:= 1L;
  #L412bee.  v0:= v0 + v2 @kind long;
  #L412bf0.  v5.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.e` @type ^`long` := v0 @kind wide;
  #L412bf4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L412c08.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L412c0c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L412c12.  v0:= temp;
  #L412c14.  if v0 == 0 then goto L412c36;
  #L412c18.  v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.d` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L412c1c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L412c20.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L412c26.  v0:= 9223372036854775807L;
  #L412c30.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L412c36.  return @kind void;
}
