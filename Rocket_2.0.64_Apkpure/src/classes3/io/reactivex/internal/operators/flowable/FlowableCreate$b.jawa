record `io.reactivex.internal.operators.flowable.FlowableCreate$b` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.FlowableEmitter` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableCreate$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.flowable.FlowableCreate$b.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCreate$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCreate$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40f8fc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L40f902.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L40f906.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L40f90a.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L40f910.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate$b.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L40f914.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableCreate$b` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.a:()V` @AccessFlag  {
    temp;

  #L40fa04.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableCreate$b` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.b:()V` @AccessFlag  {
    temp;

  #L40fa18.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableCreate$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L40f928.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$b.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40f92c.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L40f932.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.b:()V` @kind virtual;
  #L40f938.  return @kind void;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.operators.flowable.FlowableCreate$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L40f8a4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$b.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40f8a8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.isDisposed:()Z` @kind virtual;
  #L40f8ae.  v0:= temp;
  #L40f8b0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCreate$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40f94c.  call temp:= `isCancelled`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L40f952.  v0:= temp;
  #L40f954.  if v0 == 0 then goto L40f95a;
  #L40f958.  return @kind void;
  #L40f95a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40f95e.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L40f964.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$b.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40f968.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L40f96e.  return @kind void;
  #L40f970.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40f972.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$b.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40f976.  call `dispose`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L40f97c.  throw v0;
  catch `java.lang.Throwable` @[L40f95a..L40f964] goto L40f970;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableCreate$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40f99c.  if v2 != 0 then goto L40f9ae;
  #L40f9a0.  v2:= new `java.lang.NullPointerException`;
  #L40f9a4.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L40f9a8.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40f9ae.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L40f9b4.  v0:= temp;
  #L40f9b6.  if v0 == 0 then goto L40f9c2;
  #L40f9ba.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40f9c0.  return @kind void;
  #L40f9c2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L40f9c6.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L40f9cc.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$b.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40f9d0.  call `dispose`(v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L40f9d6.  return @kind void;
  #L40f9d8.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40f9da.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$b.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40f9de.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L40f9e4.  throw v2;
  catch `java.lang.Throwable` @[L40f9c2..L40f9cc] goto L40f9d8;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableCreate$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L40fa2c.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L40fa32.  v0:= temp;
  #L40fa34.  if v0 == 0 then goto L40fa44;
  #L40fa38.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L40fa3e.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.a:()V` @kind virtual;
  #L40fa44.  return @kind void;
}
procedure `long` `requested`(`io.reactivex.internal.operators.flowable.FlowableCreate$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.requested:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L40f8e0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L40f8e6.  v0:= temp @kind wide;
  #L40f8e8.  return v0 @kind wide;
}
procedure `io.reactivex.FlowableEmitter` `serialize`(`io.reactivex.internal.operators.flowable.FlowableCreate$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.serialize:()Lio/reactivex/FlowableEmitter;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L40f8c4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCreate$i`;
  #L40f8c8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableCreate$b;)V` @kind direct;
  #L40f8ce.  return v0 @kind object;
}
procedure `void` `setCancellable`(`io.reactivex.internal.operators.flowable.FlowableCreate$b` v1 @kind this, `io.reactivex.functions.Cancellable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.setCancellable:(Lio/reactivex/functions/Cancellable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L40fa58.  v0:= new `io.reactivex.internal.disposables.CancellableDisposable`;
  #L40fa5c.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/disposables/CancellableDisposable;.<init>:(Lio/reactivex/functions/Cancellable;)V` @kind direct;
  #L40fa62.  call `setDisposable`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L40fa68.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.internal.operators.flowable.FlowableCreate$b` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L40fa7c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$b.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L40fa80.  call temp:= `update`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.update:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L40fa86.  return @kind void;
}
