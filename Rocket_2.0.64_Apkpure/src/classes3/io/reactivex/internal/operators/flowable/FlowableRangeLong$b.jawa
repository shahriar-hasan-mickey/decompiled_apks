record `io.reactivex.internal.operators.flowable.FlowableRangeLong$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableRangeLong$a` @kind class {
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.flowable.FlowableRangeLong$b.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRangeLong$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$b` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `long` v2 , `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$b;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;JJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41d60c.  call `<init>`(v0, v2, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$a;.<init>:(JJ)V` @kind direct;
  #L41d612.  v0.`io.reactivex.internal.operators.flowable.FlowableRangeLong$b.d` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L41d616.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$b` v7 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L41d628.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$a.a` @type ^`long` @kind wide;
  #L41d62c.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$b.d` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L41d630.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$a.b` @type ^`long` @kind wide;
  #L41d634.  v5:= lcmp(v3, v0);
  #L41d638.  if v5 == 0 then goto L41d65c;
  #L41d63c.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$a.c` @type ^`boolean` @kind boolean;
  #L41d640.  if v5 == 0 then goto L41d646;
  #L41d644.  return @kind void;
  #L41d646.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L41d64c.  v5:= temp @kind object;
  #L41d64e.  call temp:= `tryOnNext`(v2, v5) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L41d654.  v5:= 1L;
  #L41d658.  v3:= v3 + v5 @kind long;
  #L41d65a.  goto L41d634;
  #L41d65c.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$a.c` @type ^`boolean` @kind boolean;
  #L41d660.  if v0 == 0 then goto L41d666;
  #L41d664.  return @kind void;
  #L41d666.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41d66c.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$b` v12 @kind this, `long` v13 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$b;.f:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L41d680.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableRangeLong$a.a` @type ^`long` @kind wide;
  #L41d684.  v2:= v12.`io.reactivex.internal.operators.flowable.FlowableRangeLong$a.b` @type ^`long` @kind wide;
  #L41d688.  v4:= v12.`io.reactivex.internal.operators.flowable.FlowableRangeLong$b.d` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L41d68c.  v5:= 0L;
  #L41d690.  v7:= v5 @kind wide;
  #L41d692.  v9:= lcmp(v7, v13);
  #L41d696.  if v9 == 0 then goto L41d6ca;
  #L41d69a.  v9:= lcmp(v2, v0);
  #L41d69e.  if v9 == 0 then goto L41d6ca;
  #L41d6a2.  v9:= v12.`io.reactivex.internal.operators.flowable.FlowableRangeLong$a.c` @type ^`boolean` @kind boolean;
  #L41d6a6.  if v9 == 0 then goto L41d6ac;
  #L41d6aa.  return @kind void;
  #L41d6ac.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L41d6b2.  v9:= temp @kind object;
  #L41d6b4.  call temp:= `tryOnNext`(v4, v9) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L41d6ba.  v9:= temp;
  #L41d6bc.  v10:= 1L;
  #L41d6c0.  if v9 == 0 then goto L41d6c6;
  #L41d6c4.  v7:= v7 + v10 @kind long;
  #L41d6c6.  v2:= v2 + v10 @kind long;
  #L41d6c8.  goto L41d692;
  #L41d6ca.  v13:= lcmp(v2, v0);
  #L41d6ce.  if v13 != 0 then goto L41d6e2;
  #L41d6d2.  v13:= v12.`io.reactivex.internal.operators.flowable.FlowableRangeLong$a.c` @type ^`boolean` @kind boolean;
  #L41d6d6.  if v13 != 0 then goto L41d6e0;
  #L41d6da.  call `onComplete`(v4) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41d6e0.  return @kind void;
  #L41d6e2.  call temp:= `get`(v12) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L41d6e8.  v13:= temp @kind wide;
  #L41d6ea.  v9:= lcmp(v7, v13);
  #L41d6ee.  if v9 != 0 then goto L41d692;
  #L41d6f2.  v12.`io.reactivex.internal.operators.flowable.FlowableRangeLong$a.b` @type ^`long` := v2 @kind wide;
  #L41d6f6.  v13:= -v7 @kind long;
  #L41d6f8.  call temp:= `addAndGet`(v12, v13) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L41d6fe.  v13:= temp @kind wide;
  #L41d700.  v7:= lcmp(v13, v5);
  #L41d704.  if v7 != 0 then goto L41d690;
  #L41d708.  return @kind void;
}
