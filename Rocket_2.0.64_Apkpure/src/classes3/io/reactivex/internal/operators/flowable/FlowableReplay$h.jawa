record `io.reactivex.internal.operators.flowable.FlowableReplay$h` @kind class @AccessFlag FINAL extends `java.util.concurrent.Callable` @kind interface {
  `int` `io.reactivex.internal.operators.flowable.FlowableReplay$h.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$h` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$h;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41f0e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41f0ea.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$h.a` @type ^`int` := v1;
  #L41f0ee.  return @kind void;
}
procedure `io.reactivex.internal.operators.flowable.FlowableReplay$g` `a`(`io.reactivex.internal.operators.flowable.FlowableReplay$h` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$h;.a:()Lio/reactivex/internal/operators/flowable/FlowableReplay$g;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41f0a8.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReplay$m`;
  #L41f0ac.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$h.a` @type ^`int`;
  #L41f0b0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$m;.<init>:(I)V` @kind direct;
  #L41f0b6.  return v0 @kind object;
}
procedure `java.lang.Object` `call`(`io.reactivex.internal.operators.flowable.FlowableReplay$h` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$h;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L41f0c8.  call temp:= `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$h;.a:()Lio/reactivex/internal/operators/flowable/FlowableReplay$g;` @kind virtual;
  #L41f0ce.  v0:= temp @kind object;
  #L41f0d0.  return v0 @kind object;
}
