record `io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.subscriptions.SubscriptionArbiter` `io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchIfEmpty$a;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L422e8c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L422e92.  v0.`io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L422e96.  v0.`io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty$a.b` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L422e9a.  v1:= 1I;
  #L422e9c.  v0.`io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty$a.d` @type ^`boolean` := v1 @kind boolean;
  #L422ea0.  v1:= new `io.reactivex.internal.subscriptions.SubscriptionArbiter`;
  #L422ea4.  call `<init>`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.<init>:()V` @kind direct;
  #L422eaa.  v0.`io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty$a.c` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` := v1 @kind object;
  #L422eae.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchIfEmpty$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L422ec0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty$a.d` @type ^`boolean` @kind boolean;
  #L422ec4.  if v0 == 0 then goto L422eda;
  #L422ec8.  v0:= 0I;
  #L422eca.  v1.`io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty$a.d` @type ^`boolean` := v0 @kind boolean;
  #L422ece.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty$a.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L422ed2.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L422ed8.  goto L422ee4;
  #L422eda.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L422ede.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L422ee4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchIfEmpty$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L422ef8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L422efc.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L422f02.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchIfEmpty$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L422f14.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty$a.d` @type ^`boolean` @kind boolean;
  #L422f18.  if v0 == 0 then goto L422f22;
  #L422f1c.  v0:= 0I;
  #L422f1e.  v1.`io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty$a.d` @type ^`boolean` := v0 @kind boolean;
  #L422f22.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L422f26.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L422f2c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchIfEmpty$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L422f40.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty$a.c` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L422f44.  call `setSubscription`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L422f4a.  return @kind void;
}
