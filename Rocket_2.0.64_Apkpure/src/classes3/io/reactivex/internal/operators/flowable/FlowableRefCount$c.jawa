record `io.reactivex.internal.operators.flowable.FlowableRefCount$c` @kind class @AccessFlag FINAL extends `java.lang.Runnable` @kind interface {
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.flowable.FlowableRefCount$c.a` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.internal.operators.flowable.FlowableRefCount` `io.reactivex.internal.operators.flowable.FlowableRefCount$c.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRefCount$c` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableRefCount` v1 @kind object, `io.reactivex.disposables.CompositeDisposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$c;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableRefCount;Lio/reactivex/disposables/CompositeDisposable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41e164.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$c.b` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` := v1 @kind object;
  #L41e168.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41e16e.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$c.a` @type ^`io.reactivex.disposables.CompositeDisposable` := v2 @kind object;
  #L41e172.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableRefCount$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41e184.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$c.b` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` @kind object;
  #L41e188.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableRefCount.e` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L41e18c.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantLock;.lock:()V` @kind virtual;
  #L41e192.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$c.b` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` @kind object;
  #L41e196.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableRefCount.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L41e19a.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$c.a` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L41e19e.  if v0 != v1 then goto L41e1f0;
  #L41e1a2.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$c.b` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` @kind object;
  #L41e1a6.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableRefCount.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L41e1aa.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L41e1b0.  v0:= temp;
  #L41e1b2.  if v0 != 0 then goto L41e1f0;
  #L41e1b6.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$c.b` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` @kind object;
  #L41e1ba.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableRefCount.b` @type ^`io.reactivex.flowables.ConnectableFlowable` @kind object;
  #L41e1be.  v1:= instanceof @variable v0 @type ^`io.reactivex.disposables.Disposable` @kind boolean;
  #L41e1c2.  if v1 == 0 then goto L41e1d0;
  #L41e1c6.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L41e1ca.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41e1d0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$c.b` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` @kind object;
  #L41e1d4.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableRefCount.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L41e1d8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L41e1de.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$c.b` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` @kind object;
  #L41e1e2.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L41e1e6.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L41e1ec.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount.c` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L41e1f0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$c.b` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` @kind object;
  #L41e1f4.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableRefCount.e` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L41e1f8.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantLock;.unlock:()V` @kind virtual;
  #L41e1fe.  return @kind void;
  #L41e200.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41e202.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$c.b` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` @kind object;
  #L41e206.  v1:= v1.`io.reactivex.internal.operators.flowable.FlowableRefCount.e` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L41e20a.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantLock;.unlock:()V` @kind virtual;
  #L41e210.  throw v0;
  catch `java.lang.Throwable` @[L41e192..L41e1f0] goto L41e200;
}
