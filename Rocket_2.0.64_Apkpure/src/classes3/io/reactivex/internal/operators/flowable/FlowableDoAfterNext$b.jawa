record `io.reactivex.internal.operators.flowable.FlowableDoAfterNext$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.BasicFuseableSubscriber` @kind class {
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.flowable.FlowableDoAfterNext$b.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Consumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L411af0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L411af6.  v0.`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$b.a` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L411afa.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411b0c.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` @kind boolean;
  #L411b10.  if v0 == 0 then goto L411b16;
  #L411b14.  return @kind void;
  #L411b16.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L411b1a.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L411b20.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.sourceMode` @type ^`int`;
  #L411b24.  if v0 != 0 then goto L411b3c;
  #L411b28.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$b.a` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L411b2c.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L411b32.  goto L411b3c;
  #L411b34.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L411b36.  call `fail`(v1, v2) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L411b3c.  return @kind void;
  catch `java.lang.Throwable` @[L411b28..L411b32] goto L411b34;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext$b;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L411ac4.  v0:= v2.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L411ac8.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L411ace.  v0:= temp @kind object;
  #L411ad0.  if v0 == 0 then goto L411ade;
  #L411ad4.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$b.a` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L411ad8.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L411ade.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$b` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext$b;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L411aa8.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L411aae.  v1:= temp;
  #L411ab0.  return v1;
}
