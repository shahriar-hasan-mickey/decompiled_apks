record `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a` @kind class @AccessFlag FINAL extends `io.reactivex.subscribers.DisposableSubscriber` @kind class {
  `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L427424.  call `<init>`(v0) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.<init>:()V` @kind direct;
  #L42742a.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` := v1 @kind object;
  #L42742e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L427440.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a.c` @type ^`boolean` @kind boolean;
  #L427444.  if v0 == 0 then goto L42744a;
  #L427448.  return @kind void;
  #L42744a.  v0:= 1I;
  #L42744c.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a.c` @type ^`boolean` := v0 @kind boolean;
  #L427450.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` @kind object;
  #L427454.  call `onComplete`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.onComplete:()V` @kind virtual;
  #L42745a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42746c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a.c` @type ^`boolean` @kind boolean;
  #L427470.  if v0 == 0 then goto L42747c;
  #L427474.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42747a.  return @kind void;
  #L42747c.  v0:= 1I;
  #L42747e.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a.c` @type ^`boolean` := v0 @kind boolean;
  #L427482.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` @kind object;
  #L427486.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L42748c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4274a0.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a.c` @type ^`boolean` @kind boolean;
  #L4274a4.  if v1 == 0 then goto L4274aa;
  #L4274a8.  return @kind void;
  #L4274aa.  v1:= 1I;
  #L4274ac.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a.c` @type ^`boolean` := v1 @kind boolean;
  #L4274b0.  call `cancel`(v0) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.cancel:()V` @kind virtual;
  #L4274b6.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` @kind object;
  #L4274ba.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.b:()V` @kind virtual;
  #L4274c0.  return @kind void;
}
