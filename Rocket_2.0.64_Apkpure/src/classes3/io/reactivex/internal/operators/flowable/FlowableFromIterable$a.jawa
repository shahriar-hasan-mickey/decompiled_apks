record `io.reactivex.internal.operators.flowable.FlowableFromIterable$a` @kind class @AccessFlag ABSTRACT extends `io.reactivex.internal.subscriptions.BasicQueueSubscription` @kind class {
  `java.util.Iterator` `io.reactivex.internal.operators.flowable.FlowableFromIterable$a.a` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFromIterable$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFromIterable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$a` v0 @kind this, `java.util.Iterator` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$a;.<init>:(Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L416400.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicQueueSubscription;.<init>:()V` @kind direct;
  #L416406.  v0.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` := v1 @kind object;
  #L41640a.  return @kind void;
}
procedure `void` `a`() @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$a;.a:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$a;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41641c.  v0:= 1I;
  #L41641e.  v1.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` := v0 @kind boolean;
  #L416422.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$a;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L416434.  v0:= 0I;
  #L416436.  v1.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` := v0 @kind object;
  #L41643a.  return @kind void;
}
procedure `void` `e`(`long` v0 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$a;.e:(J)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$a;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L416364.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` @kind object;
  #L416368.  if v0 == 0 then goto L41637e;
  #L41636c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L416372.  v0:= temp;
  #L416374.  if v0 != 0 then goto L41637a;
  #L416378.  goto L41637e;
  #L41637a.  v0:= 0I;
  #L41637c.  goto L416380;
  #L41637e.  v0:= 1I;
  #L416380.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4163ac.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` @kind object;
  #L4163b0.  v1:= 0I;
  #L4163b2.  if v0 != 0 then goto L4163b8;
  #L4163b6.  return v1 @kind object;
  #L4163b8.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.c` @type ^`boolean` @kind boolean;
  #L4163bc.  if v2 != 0 then goto L4163c8;
  #L4163c0.  v0:= 1I;
  #L4163c2.  v3.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4163c6.  goto L4163d6;
  #L4163c8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4163ce.  v0:= temp;
  #L4163d0.  if v0 != 0 then goto L4163d6;
  #L4163d4.  return v1 @kind object;
  #L4163d6.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` @kind object;
  #L4163da.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4163e0.  v0:= temp @kind object;
  #L4163e2.  v1:= "Iterator.next() returned a null value" @kind object;
  #L4163e6.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4163ec.  v0:= temp @kind object;
  #L4163ee.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$a` v5 @kind this, `long` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$a;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L41644c.  call temp:= `validate`(v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L416452.  v0:= temp;
  #L416454.  if v0 == 0 then goto L41648c;
  #L416458.  call temp:= `add`(v5, v6) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L41645e.  v0:= temp @kind wide;
  #L416460.  v2:= 0L;
  #L416464.  v4:= lcmp(v0, v2);
  #L416468.  if v4 != 0 then goto L41648c;
  #L41646c.  v0:= 9223372036854775807L;
  #L416476.  v2:= lcmp(v6, v0);
  #L41647a.  if v2 != 0 then goto L416486;
  #L41647e.  call `a`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$a;.a:()V` @kind virtual;
  #L416484.  goto L41648c;
  #L416486.  call `e`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$a;.e:(J)V` @kind virtual;
  #L41648c.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$a;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;

  #L416394.  v1:= v1 ^& 1;
  #L416398.  return v1;
}
