record `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.d` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.e` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.f` @AccessFlag FINAL;
  `io.reactivex.processors.UnicastProcessor` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.g` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.h` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.i` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4268dc.  v0:= new `java.lang.Object`;
  #L4268e0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4268e6.  `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.i` @type ^`java.lang.Object` := v0 @kind object;
  #L4268ea.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4268fc.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L426900.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L426906.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L42690c.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L426910.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L426916.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L42691a.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L42691e.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L426924.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.h` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L426928.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.c` @type ^`org.reactivestreams.Publisher` := v3 @kind object;
  #L42692c.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.d` @type ^`int` := v4;
  #L426930.  v3:= 1L;
  #L426934.  call `lazySet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L42693a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` v10 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L426964.  v0:= v10.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L426968.  v1:= v10.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L42696c.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.g` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L426970.  v3:= 1I;
  #L426972.  v4:= 1I;
  #L426974.  v5:= v10.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` @kind boolean;
  #L426978.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L42697e.  v6:= temp @kind object;
  #L426980.  if v6 != 0 then goto L426988;
  #L426984.  v7:= 1I;
  #L426986.  goto L42698a;
  #L426988.  v7:= 0I;
  #L42698a.  if v5 == 0 then goto L4269b4;
  #L42698e.  if v7 == 0 then goto L4269b4;
  #L426992.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L426996.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42699c.  v0:= v10.`io.reactivex.internal.subscribers.QueueDrainSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L4269a0.  if v0 == 0 then goto L4269ac;
  #L4269a4.  call `onError`(v2, v0) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4269aa.  goto L4269b2;
  #L4269ac.  call `onComplete`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4269b2.  return @kind void;
  #L4269b4.  if v7 == 0 then goto L4269c8;
  #L4269b8.  v4:= -v4 @kind int;
  #L4269ba.  call temp:= `leave`(v10, v4) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L4269c0.  v4:= temp;
  #L4269c2.  if v4 != 0 then goto L426974;
  #L4269c6.  return @kind void;
  #L4269c8.  v5:= `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.i` @type ^`java.lang.Object` @kind object;
  #L4269cc.  if v6 != v5 then goto L426a6c;
  #L4269d0.  call `onComplete`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4269d6.  v5:= v10.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4269da.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L4269e0.  v5:= temp @kind wide;
  #L4269e2.  v7:= 0L;
  #L4269e6.  v9:= lcmp(v5, v7);
  #L4269ea.  if v9 != 0 then goto L4269fa;
  #L4269ee.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4269f2.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4269f8.  return @kind void;
  #L4269fa.  v5:= v10.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4269fe.  if v5 == 0 then goto L426a04;
  #L426a02.  goto L426974;
  #L426a04.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.d` @type ^`int`;
  #L426a08.  call temp:= `create`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L426a0e.  v2:= temp @kind object;
  #L426a10.  call temp:= `requested`(v10) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:()J` @kind virtual;
  #L426a16.  v5:= temp @kind wide;
  #L426a18.  v9:= lcmp(v5, v7);
  #L426a1c.  if v9 == 0 then goto L426a52;
  #L426a20.  v7:= v10.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L426a24.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndIncrement:()J` @kind virtual;
  #L426a2a.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L426a30.  v7:= 9223372036854775807L;
  #L426a3a.  v9:= lcmp(v5, v7);
  #L426a3e.  if v9 == 0 then goto L426a4c;
  #L426a42.  v5:= 1L;
  #L426a46.  call temp:= `produced`(v10, v5) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L426a4c.  v10.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.g` @type ^`io.reactivex.processors.UnicastProcessor` := v2 @kind object;
  #L426a50.  goto L426974;
  #L426a52.  v10.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v3 @kind boolean;
  #L426a56.  v5:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L426a5a.  v6:= "Could not deliver new window due to lack of requests" @kind object;
  #L426a5e.  call `<init>`(v5, v6) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L426a64.  call `onError`(v1, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L426a6a.  goto L426974;
  #L426a6c.  call temp:= `getValue`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L426a72.  v5:= temp @kind object;
  #L426a74.  call `onNext`(v2, v5) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L426a7a.  goto L426974;
}
procedure `boolean` `accept`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L4268c8.  v1:= 0I;
  #L4268ca.  return v1;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L426a90.  v0:= v2.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L426a94.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.i` @type ^`java.lang.Object` @kind object;
  #L426a98.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L426a9e.  call temp:= `enter`(v2) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L426aa4.  v0:= temp;
  #L426aa6.  if v0 == 0 then goto L426ab0;
  #L426aaa.  call `a`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.a:()V` @kind virtual;
  #L426ab0.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42694c.  v0:= 1I;
  #L42694e.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L426952.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L426ac4.  v0:= v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` @kind boolean;
  #L426ac8.  if v0 == 0 then goto L426ace;
  #L426acc.  return @kind void;
  #L426ace.  v0:= 1I;
  #L426ad0.  v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L426ad4.  call temp:= `enter`(v5) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L426ada.  v0:= temp;
  #L426adc.  if v0 == 0 then goto L426ae6;
  #L426ae0.  call `a`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.a:()V` @kind virtual;
  #L426ae6.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L426aea.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L426af0.  v0:= temp @kind wide;
  #L426af2.  v2:= 0L;
  #L426af6.  v4:= lcmp(v0, v2);
  #L426afa.  if v4 != 0 then goto L426b08;
  #L426afe.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L426b02.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L426b08.  v0:= v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L426b0c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L426b12.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L426b24.  v0:= v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` @kind boolean;
  #L426b28.  if v0 == 0 then goto L426b34;
  #L426b2c.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L426b32.  return @kind void;
  #L426b34.  v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.error` @type ^`java.lang.Throwable` := v6 @kind object;
  #L426b38.  v0:= 1I;
  #L426b3a.  v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L426b3e.  call temp:= `enter`(v5) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L426b44.  v0:= temp;
  #L426b46.  if v0 == 0 then goto L426b50;
  #L426b4a.  call `a`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.a:()V` @kind virtual;
  #L426b50.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L426b54.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L426b5a.  v0:= temp @kind wide;
  #L426b5c.  v2:= 0L;
  #L426b60.  v4:= lcmp(v0, v2);
  #L426b64.  if v4 != 0 then goto L426b72;
  #L426b68.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L426b6c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L426b72.  v0:= v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L426b76.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L426b7c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L426b90.  call temp:= `fastEnter`(v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastEnter:()Z` @kind virtual;
  #L426b96.  v0:= temp;
  #L426b98.  if v0 == 0 then goto L426bb6;
  #L426b9c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.g` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L426ba0.  call `onNext`(v0, v2) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L426ba6.  v2:= -1I;
  #L426ba8.  call temp:= `leave`(v1, v2) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L426bae.  v2:= temp;
  #L426bb0.  if v2 != 0 then goto L426bd6;
  #L426bb4.  return @kind void;
  #L426bb6.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L426bba.  call temp:= `next`(v2) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L426bc0.  v2:= temp @kind object;
  #L426bc2.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L426bc8.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L426bce.  v2:= temp;
  #L426bd0.  if v2 != 0 then goto L426bd6;
  #L426bd4.  return @kind void;
  #L426bd6.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.a:()V` @kind virtual;
  #L426bdc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` v7 @kind this, `org.reactivestreams.Subscription` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L426bf0.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L426bf4.  call temp:= `validate`(v0, v8) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L426bfa.  v0:= temp;
  #L426bfc.  if v0 == 0 then goto L426caa;
  #L426c00.  v7.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.e` @type ^`org.reactivestreams.Subscription` := v8 @kind object;
  #L426c04.  v0:= v7.`io.reactivex.internal.subscribers.QueueDrainSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L426c08.  call `onSubscribe`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L426c0e.  v1:= v7.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L426c12.  if v1 == 0 then goto L426c18;
  #L426c16.  return @kind void;
  #L426c18.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.d` @type ^`int`;
  #L426c1c.  call temp:= `create`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L426c22.  v1:= temp @kind object;
  #L426c24.  call temp:= `requested`(v7) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:()J` @kind virtual;
  #L426c2a.  v2:= temp @kind wide;
  #L426c2c.  v4:= 0L;
  #L426c30.  v6:= lcmp(v2, v4);
  #L426c34.  if v6 == 0 then goto L426c96;
  #L426c38.  call `onNext`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L426c3e.  v4:= 9223372036854775807L;
  #L426c48.  v0:= lcmp(v2, v4);
  #L426c4c.  if v0 == 0 then goto L426c5a;
  #L426c50.  v2:= 1L;
  #L426c54.  call temp:= `produced`(v7, v2) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L426c5a.  v7.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.g` @type ^`io.reactivex.processors.UnicastProcessor` := v1 @kind object;
  #L426c5e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$a`;
  #L426c62.  call `<init>`(v0, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;)V` @kind direct;
  #L426c68.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L426c6c.  v2:= 0I;
  #L426c6e.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L426c74.  v1:= temp;
  #L426c76.  if v1 == 0 then goto L426caa;
  #L426c7a.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L426c7e.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndIncrement:()J` @kind virtual;
  #L426c84.  call `request`(v8, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L426c8a.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.c` @type ^`org.reactivestreams.Publisher` @kind object;
  #L426c8e.  call `subscribe`(v8, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L426c94.  goto L426caa;
  #L426c96.  v8:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L426c9a.  v1:= "Could not deliver first window due to lack of requests" @kind object;
  #L426c9e.  call `<init>`(v8, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L426ca4.  call `onError`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L426caa.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L426cbc.  call `requested`(v0, v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @kind virtual;
  #L426cc2.  return @kind void;
}
