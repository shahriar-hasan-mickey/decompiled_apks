record `io.reactivex.internal.operators.flowable.FlowableRepeat$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableRepeat$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.subscriptions.SubscriptionArbiter` `io.reactivex.internal.operators.flowable.FlowableRepeat$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableRepeat$a.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableRepeat$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRepeat$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRepeat$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `io.reactivex.internal.subscriptions.SubscriptionArbiter` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$a;.<init>:(Lorg/reactivestreams/Subscriber;JLio/reactivex/internal/subscriptions/SubscriptionArbiter;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41e3a4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L41e3aa.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L41e3ae.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.b` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` := v4 @kind object;
  #L41e3b2.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.c` @type ^`org.reactivestreams.Publisher` := v5 @kind object;
  #L41e3b6.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.d` @type ^`long` := v2 @kind wide;
  #L41e3ba.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableRepeat$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L41e484.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L41e48a.  v0:= temp;
  #L41e48c.  if v0 != 0 then goto L41e4bc;
  #L41e490.  v0:= 1I;
  #L41e492.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.b` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L41e496.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.isCancelled:()Z` @kind virtual;
  #L41e49c.  v1:= temp;
  #L41e49e.  if v1 == 0 then goto L41e4a4;
  #L41e4a2.  return @kind void;
  #L41e4a4.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.c` @type ^`org.reactivestreams.Publisher` @kind object;
  #L41e4a8.  call `subscribe`(v1, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L41e4ae.  v0:= -v0 @kind int;
  #L41e4b0.  call temp:= `addAndGet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L41e4b6.  v0:= temp;
  #L41e4b8.  if v0 != 0 then goto L41e492;
  #L41e4bc.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableRepeat$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L41e3cc.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.d` @type ^`long` @kind wide;
  #L41e3d0.  v2:= 9223372036854775807L;
  #L41e3da.  v4:= lcmp(v0, v2);
  #L41e3de.  if v4 == 0 then goto L41e3ee;
  #L41e3e2.  v2:= 1L;
  #L41e3e6.  v2:= v0 - v2 @kind long;
  #L41e3ea.  v5.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.d` @type ^`long` := v2 @kind wide;
  #L41e3ee.  v2:= 0L;
  #L41e3f2.  v4:= lcmp(v0, v2);
  #L41e3f6.  if v4 == 0 then goto L41e402;
  #L41e3fa.  call `a`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$a;.a:()V` @kind virtual;
  #L41e400.  goto L41e40c;
  #L41e402.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41e406.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41e40c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableRepeat$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41e420.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41e424.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41e42a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableRepeat$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41e43c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41e440.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41e446.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.b` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L41e44a.  v0:= 1L;
  #L41e44e.  call `produced`(v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L41e454.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableRepeat$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41e468.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.b` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L41e46c.  call `setSubscription`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L41e472.  return @kind void;
}
