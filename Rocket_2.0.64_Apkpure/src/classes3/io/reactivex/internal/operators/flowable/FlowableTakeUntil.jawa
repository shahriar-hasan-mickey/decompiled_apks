record `io.reactivex.internal.operators.flowable.FlowableTakeUntil` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableTakeUntil.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L424438.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L42443e.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil.b` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L424442.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L424454.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTakeUntil$a`;
  #L424458.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$a;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L42445e.  call `onSubscribe`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L424464.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeUntil.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L424468.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$a.e` @type ^`io.reactivex.internal.operators.flowable.FlowableTakeUntil$a$a` @kind object;
  #L42446c.  call `subscribe`(v3, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L424472.  v3:= v2.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L424476.  call `subscribe`(v3, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L42447c.  return @kind void;
}
