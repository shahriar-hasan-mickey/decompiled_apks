record `io.reactivex.internal.operators.flowable.FlowableConcatArray` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Flowable` @kind class {
  `org.reactivestreams.Publisher`[] `io.reactivex.internal.operators.flowable.FlowableConcatArray.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableConcatArray.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableConcatArray` v0 @kind this, `org.reactivestreams.Publisher`[] v1 @kind object, `boolean` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray;.<init>:([Lorg/reactivestreams/Publisher;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L40e318.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L40e31e.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatArray.b` @type ^`org.reactivestreams.Publisher`[] := v1 @kind object;
  #L40e322.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatArray.c` @type ^`boolean` := v2 @kind boolean;
  #L40e326.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableConcatArray` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L40e338.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatArray$a`;
  #L40e33c.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatArray.b` @type ^`org.reactivestreams.Publisher`[] @kind object;
  #L40e340.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatArray.c` @type ^`boolean` @kind boolean;
  #L40e344.  call `<init>`(v0, v1, v2, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray$a;.<init>:([Lorg/reactivestreams/Publisher;ZLorg/reactivestreams/Subscriber;)V` @kind direct;
  #L40e34a.  call `onSubscribe`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L40e350.  call `onComplete`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray$a;.onComplete:()V` @kind virtual;
  #L40e356.  return @kind void;
}
