record `io.reactivex.internal.operators.flowable.FlowableObserveOn$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableObserveOn$a` @kind class {
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.flowable.FlowableObserveOn$b.n` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableObserveOn$b.o` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableObserveOn$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$b` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.Scheduler$Worker` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$b;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/Scheduler$Worker;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41a6bc.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.<init>:(Lio/reactivex/Scheduler$Worker;ZI)V` @kind direct;
  #L41a6c2.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L41a6c6.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$b` v14 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$b;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L41a784.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L41a788.  v1:= v14.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L41a78c.  v2:= v14.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` @kind wide;
  #L41a790.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableObserveOn$b.o` @type ^`long` @kind wide;
  #L41a794.  v6:= 1I;
  #L41a796.  v7:= 1I;
  #L41a798.  v8:= v14.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L41a79c.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L41a7a2.  v8:= temp @kind wide;
  #L41a7a4.  v10:= lcmp(v2, v8);
  #L41a7a8.  if v10 == 0 then goto L41a832;
  #L41a7ac.  v11:= v14.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L41a7b0.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L41a7b6.  v12:= temp @kind object;
  #L41a7b8.  if v12 != 0 then goto L41a7c0;
  #L41a7bc.  v13:= 1I;
  #L41a7be.  goto L41a7c2;
  #L41a7c0.  v13:= 0I;
  #L41a7c2.  call temp:= `e`(v14, v11, v13, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L41a7c8.  v11:= temp;
  #L41a7ca.  if v11 == 0 then goto L41a7d0;
  #L41a7ce.  return @kind void;
  #L41a7d0.  if v13 == 0 then goto L41a7d6;
  #L41a7d4.  goto L41a832;
  #L41a7d6.  call temp:= `tryOnNext`(v0, v12) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L41a7dc.  v10:= temp;
  #L41a7de.  v11:= 1L;
  #L41a7e2.  if v10 == 0 then goto L41a7e8;
  #L41a7e6.  v2:= v2 + v11 @kind long;
  #L41a7e8.  v4:= v4 + v11 @kind long;
  #L41a7ea.  v10:= v14.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.d` @type ^`int`;
  #L41a7ee.  v10:= (`long`) v10 @kind i2l;
  #L41a7f0.  v12:= lcmp(v4, v10);
  #L41a7f4.  if v12 != 0 then goto L41a7a4;
  #L41a7f8.  v10:= v14.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41a7fc.  call `request`(v10, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L41a802.  v4:= 0L;
  #L41a806.  goto L41a7a4;
  #L41a808.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41a80a.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41a810.  v3:= v14.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41a814.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L41a81a.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L41a820.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41a826.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L41a82a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41a830.  return @kind void;
  #L41a832.  if v10 != 0 then goto L41a850;
  #L41a836.  v8:= v14.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L41a83a.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L41a840.  v9:= temp;
  #L41a842.  call temp:= `e`(v14, v8, v9, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L41a848.  v8:= temp;
  #L41a84a.  if v8 == 0 then goto L41a850;
  #L41a84e.  return @kind void;
  #L41a850.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L41a856.  v8:= temp;
  #L41a858.  if v7 != v8 then goto L41a874;
  #L41a85c.  v14.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` := v2 @kind wide;
  #L41a860.  v14.`io.reactivex.internal.operators.flowable.FlowableObserveOn$b.o` @type ^`long` := v4 @kind wide;
  #L41a864.  v7:= -v7 @kind int;
  #L41a866.  call temp:= `addAndGet`(v14, v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L41a86c.  v7:= temp;
  #L41a86e.  if v7 != 0 then goto L41a798;
  #L41a872.  return @kind void;
  #L41a874.  v7:= v8;
  #L41a876.  goto L41a798;
  catch `java.lang.Throwable` @[L41a7b0..L41a7b8] goto L41a808;
}
procedure `void` `g`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$b;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41a894.  v0:= 1I;
  #L41a896.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L41a89a.  if v1 == 0 then goto L41a8a0;
  #L41a89e.  return @kind void;
  #L41a8a0.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L41a8a4.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L41a8a8.  v3:= 0I;
  #L41a8aa.  call `onNext`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41a8b0.  if v1 == 0 then goto L41a8de;
  #L41a8b4.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.j` @type ^`java.lang.Throwable` @kind object;
  #L41a8b8.  if v0 == 0 then goto L41a8c8;
  #L41a8bc.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L41a8c0.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41a8c6.  goto L41a8d2;
  #L41a8c8.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L41a8cc.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41a8d2.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L41a8d6.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41a8dc.  return @kind void;
  #L41a8de.  v0:= -v0 @kind int;
  #L41a8e0.  call temp:= `addAndGet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L41a8e6.  v0:= temp;
  #L41a8e8.  if v0 != 0 then goto L41a896;
  #L41a8ec.  return @kind void;
}
procedure `void` `h`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$b` v9 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$b;.h:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L41a900.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L41a904.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L41a908.  v2:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` @kind wide;
  #L41a90c.  v4:= 1I;
  #L41a90e.  v5:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L41a912.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L41a918.  v5:= temp @kind wide;
  #L41a91a.  v7:= lcmp(v2, v5);
  #L41a91e.  if v7 == 0 then goto L41a982;
  #L41a922.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L41a928.  v7:= temp @kind object;
  #L41a92a.  v8:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L41a92e.  if v8 == 0 then goto L41a934;
  #L41a932.  return @kind void;
  #L41a934.  if v7 != 0 then goto L41a94a;
  #L41a938.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41a93e.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L41a942.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41a948.  return @kind void;
  #L41a94a.  call temp:= `tryOnNext`(v0, v7) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L41a950.  v7:= temp;
  #L41a952.  if v7 == 0 then goto L41a91a;
  #L41a956.  v7:= 1L;
  #L41a95a.  v2:= v2 + v7 @kind long;
  #L41a95c.  goto L41a91a;
  #L41a95e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41a960.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41a966.  v2:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41a96a.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L41a970.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41a976.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L41a97a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41a980.  return @kind void;
  #L41a982.  v5:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L41a986.  if v5 == 0 then goto L41a98c;
  #L41a98a.  return @kind void;
  #L41a98c.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L41a992.  v5:= temp;
  #L41a994.  if v5 == 0 then goto L41a9aa;
  #L41a998.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41a99e.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L41a9a2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41a9a8.  return @kind void;
  #L41a9aa.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L41a9b0.  v5:= temp;
  #L41a9b2.  if v4 != v5 then goto L41a9ca;
  #L41a9b6.  v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` := v2 @kind wide;
  #L41a9ba.  v4:= -v4 @kind int;
  #L41a9bc.  call temp:= `addAndGet`(v9, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L41a9c2.  v4:= temp;
  #L41a9c4.  if v4 != 0 then goto L41a90e;
  #L41a9c8.  return @kind void;
  #L41a9ca.  v4:= v5;
  #L41a9cc.  goto L41a90e;
  catch `java.lang.Throwable` @[L41a922..L41a92a] goto L41a95e;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$b` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L41a6d8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41a6dc.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L41a6e2.  v0:= temp;
  #L41a6e4.  if v0 == 0 then goto L41a770;
  #L41a6e8.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L41a6ec.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L41a6f0.  if v0 == 0 then goto L41a748;
  #L41a6f4.  v0:= v4 @kind object;
  #L41a6f6.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L41a6fa.  v1:= 7I;
  #L41a6fc.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L41a702.  v1:= temp;
  #L41a704.  v2:= 1I;
  #L41a706.  if v1 != v2 then goto L41a722;
  #L41a70a.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int` := v2;
  #L41a70e.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L41a712.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` := v2 @kind boolean;
  #L41a716.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L41a71a.  call `onSubscribe`(v4, v3) @signature `Lio/reactivex/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L41a720.  return @kind void;
  #L41a722.  v2:= 2I;
  #L41a724.  if v1 != v2 then goto L41a748;
  #L41a728.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int` := v2;
  #L41a72c.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L41a730.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L41a734.  call `onSubscribe`(v0, v3) @signature `Lio/reactivex/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L41a73a.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.c` @type ^`int`;
  #L41a73e.  v0:= (`long`) v0 @kind i2l;
  #L41a740.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L41a746.  return @kind void;
  #L41a748.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L41a74c.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.c` @type ^`int`;
  #L41a750.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L41a756.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L41a75a.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L41a75e.  call `onSubscribe`(v0, v3) @signature `Lio/reactivex/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L41a764.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.c` @type ^`int`;
  #L41a768.  v0:= (`long`) v0 @kind i2l;
  #L41a76a.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L41a770.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$b` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$b;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L41a660.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L41a664.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L41a66a.  v0:= temp @kind object;
  #L41a66c.  if v0 == 0 then goto L41a6aa;
  #L41a670.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int`;
  #L41a674.  v2:= 1I;
  #L41a676.  if v1 == v2 then goto L41a6aa;
  #L41a67a.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$b.o` @type ^`long` @kind wide;
  #L41a67e.  v3:= 1L;
  #L41a682.  v1:= v1 + v3 @kind long;
  #L41a684.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.d` @type ^`int`;
  #L41a688.  v3:= (`long`) v3 @kind i2l;
  #L41a68a.  v5:= lcmp(v1, v3);
  #L41a68e.  if v5 != 0 then goto L41a6a6;
  #L41a692.  v3:= 0L;
  #L41a696.  v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$b.o` @type ^`long` := v3 @kind wide;
  #L41a69a.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41a69e.  call `request`(v3, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L41a6a4.  goto L41a6aa;
  #L41a6a6.  v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$b.o` @type ^`long` := v1 @kind wide;
  #L41a6aa.  return v0 @kind object;
}
