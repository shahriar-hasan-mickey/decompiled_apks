record `io.reactivex.internal.operators.flowable.FlowableZip$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableZip$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableZip$b`[] `io.reactivex.internal.operators.flowable.FlowableZip$a.b` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableZip$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableZip$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableZip$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableZip$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableZip$a.g` @AccessFlag VOLATILE;
  `java.lang.Object`[] `io.reactivex.internal.operators.flowable.FlowableZip$a.h` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableZip$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableZip$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `int` v4 , `boolean` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;IIZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4293e4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4293ea.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4293ee.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$a.c` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L4293f2.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$a.f` @type ^`boolean` := v5 @kind boolean;
  #L4293f6.  v1:= new `io.reactivex.internal.operators.flowable.FlowableZip$b`[v3];
  #L4293fa.  v2:= 0I;
  #L4293fc.  if v2 >= v3 then goto L429414;
  #L429400.  v5:= new `io.reactivex.internal.operators.flowable.FlowableZip$b`;
  #L429404.  call `<init>`(v5, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$b;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableZip$a;I)V` @kind direct;
  #L42940a.  v1[v2]:= v5 @kind object;
  #L42940e.  v2:= v2 + 1;
  #L429412.  goto L4293fc;
  #L429414.  v2:= new `java.lang.Object`[v3];
  #L429418.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$a.h` @type ^`java.lang.Object`[] := v2 @kind object;
  #L42941c.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$b`[] := v1 @kind object;
  #L429420.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L429424.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L42942a.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L42942e.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L429432.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L429438.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L42943c.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableZip$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L429478.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableZip$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$b`[] @kind object;
  #L42947c.  v1:= length @variable v0;
  #L42947e.  v2:= 0I;
  #L429480.  if v2 >= v1 then goto L429494;
  #L429484.  v3:= v0[v2] @kind object;
  #L429488.  call `cancel`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$b;.cancel:()V` @kind virtual;
  #L42948e.  v2:= v2 + 1;
  #L429492.  goto L429480;
  #L429494.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableZip$a` v18 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L4294a8.  v1:= v18 @kind object;
  #L4294ac.  call temp:= `getAndIncrement`(v18) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4294b2.  v0:= temp;
  #L4294b4.  if v0 == 0 then goto L4294ba;
  #L4294b8.  return @kind void;
  #L4294ba.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4294be.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$b`[] @kind object;
  #L4294c2.  v4:= length @variable v3;
  #L4294c4.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.h` @type ^`java.lang.Object`[] @kind object;
  #L4294c8.  v7:= 1I;
  #L4294ca.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4294ce.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4294d4.  v8:= temp @kind wide;
  #L4294d6.  v12:= 0L;
  #L4294da.  v14:= 0I;
  #L4294dc.  v16:= lcmp(v8, v12);
  #L4294e0.  if v16 == 0 then goto L429642;
  #L4294e4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.g` @type ^`boolean` @kind boolean;
  #L4294e8.  if v0 == 0 then goto L4294ee;
  #L4294ec.  return @kind void;
  #L4294ee.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.f` @type ^`boolean` @kind boolean;
  #L4294f2.  if v0 != 0 then goto L429520;
  #L4294f6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4294fa.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L429500.  v0:= temp @kind object;
  #L429502.  if v0 == 0 then goto L429520;
  #L429506.  call `a`(v18) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$a;.a:()V` @kind virtual;
  #L42950c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L429510.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L429516.  v0:= temp @kind object;
  #L429518.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42951e.  return @kind void;
  #L429520.  v0:= 0I;
  #L429522.  v6:= 0I;
  #L429524.  if v6 >= v4 then goto L4295da;
  #L429528.  v15:= v3[v6] @kind object;
  #L42952c.  v17:= v5[v6] @kind object;
  #L429530.  if v17 != 0 then goto L4295d4;
  #L429534.  v10:= v15.`io.reactivex.internal.operators.flowable.FlowableZip$b.f` @type ^`boolean` @kind boolean;
  #L429538.  v11:= v15.`io.reactivex.internal.operators.flowable.FlowableZip$b.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L42953c.  if v11 == 0 then goto L42954a;
  #L429540.  call temp:= `poll`(v11) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L429546.  v11:= temp @kind object;
  #L429548.  goto L42954c;
  #L42954a.  v11:= v14 @kind object;
  #L42954c.  if v11 != 0 then goto L429554;
  #L429550.  v15:= 1I;
  #L429552.  goto L429556;
  #L429554.  v15:= 0I;
  #L429556.  if v10 == 0 then goto L429594;
  #L42955a.  if v15 == 0 then goto L429594;
  #L42955e.  call `a`(v18) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$a;.a:()V` @kind virtual;
  #L429564.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L429568.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42956e.  v0:= temp @kind object;
  #L429570.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L429574.  if v0 == 0 then goto L42958c;
  #L429578.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42957c.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L429582.  v0:= temp @kind object;
  #L429584.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42958a.  goto L429592;
  #L42958c.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L429592.  return @kind void;
  #L429594.  if v15 != 0 then goto L4295d2;
  #L429598.  v5[v6]:= v11 @kind object;
  #L42959c.  goto L4295d4;
  #L42959e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4295a0.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4295a6.  v10:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4295aa.  call temp:= `addThrowable`(v10, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4295b0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.f` @type ^`boolean` @kind boolean;
  #L4295b4.  if v0 != 0 then goto L4295d2;
  #L4295b8.  call `a`(v18) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$a;.a:()V` @kind virtual;
  #L4295be.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4295c2.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4295c8.  v0:= temp @kind object;
  #L4295ca.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4295d0.  return @kind void;
  #L4295d2.  v0:= 1I;
  #L4295d4.  v6:= v6 + 1;
  #L4295d8.  goto L429524;
  #L4295da.  if v0 == 0 then goto L4295e0;
  #L4295de.  goto L429642;
  #L4295e0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.c` @type ^`io.reactivex.functions.Function` @kind object;
  #L4295e4.  call temp:= `clone`(v5) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L4295ea.  v6:= temp @kind object;
  #L4295ec.  call temp:= `apply`(v0, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4295f2.  v0:= temp @kind object;
  #L4295f4.  v6:= "The zipper returned a null value" @kind object;
  #L4295f8.  call temp:= `requireNonNull`(v0, v6) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4295fe.  v0:= temp @kind object;
  #L429600.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L429606.  v10:= 1L;
  #L42960a.  v12:= v12 + v10 @kind long;
  #L42960c.  call `fill`(v5, v14) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L429612.  goto L4294da;
  #L429616.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L429618.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42961e.  call `a`(v18) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$a;.a:()V` @kind virtual;
  #L429624.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L429628.  call temp:= `addThrowable`(v3, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L42962e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L429632.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L429638.  v0:= temp @kind object;
  #L42963a.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L429640.  return @kind void;
  #L429642.  if v16 != 0 then goto L429738;
  #L429646.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.g` @type ^`boolean` @kind boolean;
  #L42964a.  if v0 == 0 then goto L429650;
  #L42964e.  return @kind void;
  #L429650.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.f` @type ^`boolean` @kind boolean;
  #L429654.  if v0 != 0 then goto L429682;
  #L429658.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42965c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L429662.  v0:= temp @kind object;
  #L429664.  if v0 == 0 then goto L429682;
  #L429668.  call `a`(v18) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$a;.a:()V` @kind virtual;
  #L42966e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L429672.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L429678.  v0:= temp @kind object;
  #L42967a.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L429680.  return @kind void;
  #L429682.  v6:= 0I;
  #L429684.  if v6 >= v4 then goto L429738;
  #L429688.  v0:= v3[v6] @kind object;
  #L42968c.  v10:= v5[v6] @kind object;
  #L429690.  if v10 != 0 then goto L429732;
  #L429694.  v10:= v0.`io.reactivex.internal.operators.flowable.FlowableZip$b.f` @type ^`boolean` @kind boolean;
  #L429698.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableZip$b.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L42969c.  if v0 == 0 then goto L4296aa;
  #L4296a0.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4296a6.  v0:= temp @kind object;
  #L4296a8.  goto L4296ac;
  #L4296aa.  v0:= v14 @kind object;
  #L4296ac.  if v0 != 0 then goto L4296b4;
  #L4296b0.  v11:= 1I;
  #L4296b2.  goto L4296b6;
  #L4296b4.  v11:= 0I;
  #L4296b6.  if v10 == 0 then goto L4296f4;
  #L4296ba.  if v11 == 0 then goto L4296f4;
  #L4296be.  call `a`(v18) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$a;.a:()V` @kind virtual;
  #L4296c4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4296c8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4296ce.  v0:= temp @kind object;
  #L4296d0.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L4296d4.  if v0 == 0 then goto L4296ec;
  #L4296d8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4296dc.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4296e2.  v0:= temp @kind object;
  #L4296e4.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4296ea.  goto L4296f2;
  #L4296ec.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4296f2.  return @kind void;
  #L4296f4.  if v11 != 0 then goto L429732;
  #L4296f8.  v5[v6]:= v0 @kind object;
  #L4296fc.  goto L429732;
  #L4296fe.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L429700.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L429706.  v10:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42970a.  call temp:= `addThrowable`(v10, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L429710.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.f` @type ^`boolean` @kind boolean;
  #L429714.  if v0 != 0 then goto L429732;
  #L429718.  call `a`(v18) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$a;.a:()V` @kind virtual;
  #L42971e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L429722.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L429728.  v0:= temp @kind object;
  #L42972a.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L429730.  return @kind void;
  #L429732.  v6:= v6 + 1;
  #L429736.  goto L429684;
  #L429738.  v10:= 0L;
  #L42973c.  v0:= lcmp(v12, v10);
  #L429740.  if v0 == 0 then goto L42977a;
  #L429744.  v0:= length @variable v3;
  #L429746.  v15:= 0I;
  #L429748.  if v15 >= v0 then goto L42975c;
  #L42974c.  v6:= v3[v15] @kind object;
  #L429750.  call `request`(v6, v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$b;.request:(J)V` @kind virtual;
  #L429756.  v15:= v15 + 1;
  #L42975a.  goto L429748;
  #L42975c.  v10:= 9223372036854775807L;
  #L429766.  v0:= lcmp(v8, v10);
  #L42976a.  if v0 == 0 then goto L42977a;
  #L42976e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L429772.  v8:= -v12 @kind long;
  #L429774.  call temp:= `addAndGet`(v0, v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L42977a.  v0:= -v7 @kind int;
  #L42977c.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L429782.  v7:= temp;
  #L429784.  if v7 != 0 then goto L4294ca;
  #L429788.  return @kind void;
  catch `java.lang.Throwable` @[L429534..L42959c] goto L42959e;
  catch `java.lang.Throwable` @[L4295e0..L429600] goto L429616;
  catch `java.lang.Throwable` @[L429694..L4296fc] goto L4296fe;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableZip$a` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableZip$b` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$a;.c:(Lio/reactivex/internal/operators/flowable/FlowableZip$b;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4297c0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4297c4.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4297ca.  v0:= temp;
  #L4297cc.  if v0 == 0 then goto L4297de;
  #L4297d0.  v3:= 1I;
  #L4297d2.  v2.`io.reactivex.internal.operators.flowable.FlowableZip$b.f` @type ^`boolean` := v3 @kind boolean;
  #L4297d6.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$a;.b:()V` @kind virtual;
  #L4297dc.  goto L4297e4;
  #L4297de.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4297e4.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableZip$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L429450.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.g` @type ^`boolean` @kind boolean;
  #L429454.  if v0 != 0 then goto L429464;
  #L429458.  v0:= 1I;
  #L42945a.  v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.g` @type ^`boolean` := v0 @kind boolean;
  #L42945e.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$a;.a:()V` @kind virtual;
  #L429464.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowableZip$a` v4 @kind this, `org.reactivestreams.Publisher`[] v5 @kind object, `int` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$a;.d:([Lorg/reactivestreams/Publisher;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L429828.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableZip$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$b`[] @kind object;
  #L42982c.  v1:= 0I;
  #L42982e.  if v1 >= v6 then goto L429868;
  #L429832.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableZip$a.g` @type ^`boolean` @kind boolean;
  #L429836.  if v2 != 0 then goto L429868;
  #L42983a.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableZip$a.f` @type ^`boolean` @kind boolean;
  #L42983e.  if v2 != 0 then goto L429854;
  #L429842.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L429846.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42984c.  v2:= temp @kind object;
  #L42984e.  if v2 == 0 then goto L429854;
  #L429852.  goto L429868;
  #L429854.  v2:= v5[v1] @kind object;
  #L429858.  v3:= v0[v1] @kind object;
  #L42985c.  call `subscribe`(v2, v3) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L429862.  v1:= v1 + 1;
  #L429866.  goto L42982e;
  #L429868.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableZip$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4297f8.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4297fe.  v0:= temp;
  #L429800.  if v0 == 0 then goto L429814;
  #L429804.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L429808.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L42980e.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$a;.b:()V` @kind virtual;
  #L429814.  return @kind void;
}
