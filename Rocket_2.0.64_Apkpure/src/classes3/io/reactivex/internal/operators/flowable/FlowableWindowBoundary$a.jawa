record `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$a` @kind class @AccessFlag FINAL extends `io.reactivex.subscribers.DisposableSubscriber` @kind class {
  `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$a` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L426824.  call `<init>`(v0) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.<init>:()V` @kind direct;
  #L42682a.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` := v1 @kind object;
  #L42682e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L426840.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$a.c` @type ^`boolean` @kind boolean;
  #L426844.  if v0 == 0 then goto L42684a;
  #L426848.  return @kind void;
  #L42684a.  v0:= 1I;
  #L42684c.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$a.c` @type ^`boolean` := v0 @kind boolean;
  #L426850.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` @kind object;
  #L426854.  call `onComplete`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.onComplete:()V` @kind virtual;
  #L42685a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42686c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$a.c` @type ^`boolean` @kind boolean;
  #L426870.  if v0 == 0 then goto L42687c;
  #L426874.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42687a.  return @kind void;
  #L42687c.  v0:= 1I;
  #L42687e.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$a.c` @type ^`boolean` := v0 @kind boolean;
  #L426882.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` @kind object;
  #L426886.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L42688c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4268a0.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$a.c` @type ^`boolean` @kind boolean;
  #L4268a4.  if v1 == 0 then goto L4268aa;
  #L4268a8.  return @kind void;
  #L4268aa.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` @kind object;
  #L4268ae.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.b:()V` @kind virtual;
  #L4268b4.  return @kind void;
}
