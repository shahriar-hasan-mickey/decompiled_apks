record `io.reactivex.internal.operators.flowable.FlowableFlatMap$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableFlatMap$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableFlatMap$b.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMap$b.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMap$b.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMap$b.e` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.flowable.FlowableFlatMap$b.f` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMap$b.g` @AccessFlag VOLATILE;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableFlatMap$b.h` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMap$b.i` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableFlatMap$b.j` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableFlatMap$b.k` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableFlatMap$b.l` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableFlatMap$b.m` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableFlatMap$b.n` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMap$b.o` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMap$b.p` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMap$b.q` @AccessFlag FINAL;
}
global `io.reactivex.internal.operators.flowable.FlowableFlatMap$a`[] `@@io.reactivex.internal.operators.flowable.FlowableFlatMap$b.r` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.flowable.FlowableFlatMap$a`[] `@@io.reactivex.internal.operators.flowable.FlowableFlatMap$b.s` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFlatMap$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L413384.  v0:= 0I;
  #L413386.  v1:= new `io.reactivex.internal.operators.flowable.FlowableFlatMap$a`[v0];
  #L41338a.  `@@io.reactivex.internal.operators.flowable.FlowableFlatMap$b.r` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$a`[] := v1 @kind object;
  #L41338e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMap$a`[v0];
  #L413392.  `@@io.reactivex.internal.operators.flowable.FlowableFlatMap$b.s` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$a`[] := v0 @kind object;
  #L413396.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object, `boolean` v5 , `int` v6 , `int` v7 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;ZII)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4133a8.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4133ae.  v0:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L4133b2.  call `<init>`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4133b8.  v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.h` @type ^`io.reactivex.internal.util.AtomicThrowable` := v0 @kind object;
  #L4133bc.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4133c0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4133c6.  v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4133ca.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4133ce.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4133d4.  v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.k` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4133d8.  v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.a` @type ^`org.reactivestreams.Subscriber` := v3 @kind object;
  #L4133dc.  v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.b` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L4133e0.  v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.c` @type ^`boolean` := v5 @kind boolean;
  #L4133e4.  v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.d` @type ^`int` := v6;
  #L4133e8.  v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.e` @type ^`int` := v7;
  #L4133ec.  v3:= 1I;
  #L4133ee.  v4:= v6 ^> 1;
  #L4133f2.  call temp:= `max`(v3, v4) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L4133f8.  v3:= temp;
  #L4133fa.  v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.q` @type ^`int` := v3;
  #L4133fe.  v3:= `@@io.reactivex.internal.operators.flowable.FlowableFlatMap$b.r` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$a`[] @kind object;
  #L413402.  call `lazySet`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L413408.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` v4 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMap$a` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.a:(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41324c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L413250.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L413256.  v0:= temp @kind object;
  #L413258.  v0:= (`io.reactivex.internal.operators.flowable.FlowableFlatMap$a`[]) v0 @kind object;
  #L41325c.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableFlatMap$b.s` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$a`[] @kind object;
  #L413260.  v2:= 0I;
  #L413262.  if v0 != v1 then goto L41326e;
  #L413266.  call `dispose`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;.dispose:()V` @kind virtual;
  #L41326c.  return v2;
  #L41326e.  v1:= length @variable v0;
  #L413270.  v3:= v1 + 1;
  #L413274.  v3:= new `io.reactivex.internal.operators.flowable.FlowableFlatMap$a`[v3];
  #L413278.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L41327e.  v3[v1]:= v5 @kind object;
  #L413282.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L413286.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L41328c.  v0:= temp;
  #L41328e.  if v0 == 0 then goto L41324c;
  #L413292.  v5:= 1I;
  #L413294.  return v5;
}
procedure `boolean` `b`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.b:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4132a8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.i` @type ^`boolean` @kind boolean;
  #L4132ac.  v1:= 1I;
  #L4132ae.  if v0 == 0 then goto L4132ba;
  #L4132b2.  call `c`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.c:()V` @kind virtual;
  #L4132b8.  return v1;
  #L4132ba.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.c` @type ^`boolean` @kind boolean;
  #L4132be.  if v0 != 0 then goto L4132f8;
  #L4132c2.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.h` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4132c6.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4132cc.  v0:= temp @kind object;
  #L4132ce.  if v0 == 0 then goto L4132f8;
  #L4132d2.  call `c`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.c:()V` @kind virtual;
  #L4132d8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.h` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4132dc.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4132e2.  v0:= temp @kind object;
  #L4132e4.  v2:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L4132e8.  if v0 == v2 then goto L4132f6;
  #L4132ec.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4132f0.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4132f6.  return v1;
  #L4132f8.  v0:= 0I;
  #L4132fa.  return v0;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.c:()V` @AccessFlag  {
    temp;
    v0;

  #L413468.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.f` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41346c.  if v0 == 0 then goto L413476;
  #L413470.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L413476.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41341c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.i` @type ^`boolean` @kind boolean;
  #L413420.  if v0 != 0 then goto L413454;
  #L413424.  v0:= 1I;
  #L413426.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.i` @type ^`boolean` := v0 @kind boolean;
  #L41342a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41342e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L413434.  call `d`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.d:()V` @kind virtual;
  #L41343a.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L413440.  v0:= temp;
  #L413442.  if v0 != 0 then goto L413454;
  #L413446.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.f` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41344a.  if v0 == 0 then goto L413454;
  #L41344e.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L413454.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L413488.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L41348c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L413492.  v0:= temp @kind object;
  #L413494.  v0:= (`io.reactivex.internal.operators.flowable.FlowableFlatMap$a`[]) v0 @kind object;
  #L413498.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableFlatMap$b.s` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$a`[] @kind object;
  #L41349c.  if v0 == v1 then goto L4134ea;
  #L4134a0.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4134a4.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4134aa.  v0:= temp @kind object;
  #L4134ac.  v0:= (`io.reactivex.internal.operators.flowable.FlowableFlatMap$a`[]) v0 @kind object;
  #L4134b0.  if v0 == v1 then goto L4134ea;
  #L4134b4.  v1:= length @variable v0;
  #L4134b6.  v2:= 0I;
  #L4134b8.  if v2 >= v1 then goto L4134cc;
  #L4134bc.  v3:= v0[v2] @kind object;
  #L4134c0.  call `dispose`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;.dispose:()V` @kind virtual;
  #L4134c6.  v2:= v2 + 1;
  #L4134ca.  goto L4134b8;
  #L4134cc.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.h` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4134d0.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4134d6.  v0:= temp @kind object;
  #L4134d8.  if v0 == 0 then goto L4134ea;
  #L4134dc.  v1:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L4134e0.  if v0 == v1 then goto L4134ea;
  #L4134e4.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4134ea.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @AccessFlag  {
    temp;
    v0;

  #L4134fc.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L413502.  v0:= temp;
  #L413504.  if v0 != 0 then goto L41350e;
  #L413508.  call `f`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.f:()V` @kind virtual;
  #L41350e.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` v24 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;
    v23;

  #L413520.  v1:= v24 @kind object;
  #L413524.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L413528.  v4:= 1I;
  #L41352a.  call temp:= `b`(v24) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.b:()Z` @kind virtual;
  #L413530.  v0:= temp;
  #L413532.  if v0 == 0 then goto L413538;
  #L413536.  return @kind void;
  #L413538.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.f` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41353c.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L413540.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L413546.  v5:= temp @kind wide;
  #L413548.  v7:= 9223372036854775807L;
  #L413552.  v10:= lcmp(v5, v7);
  #L413556.  if v10 != 0 then goto L41355e;
  #L41355a.  v10:= 1I;
  #L41355c.  goto L413560;
  #L41355e.  v10:= 0I;
  #L413560.  v12:= 1L;
  #L413564.  v14:= 0L;
  #L413568.  v16:= v14 @kind wide;
  #L41356c.  if v0 == 0 then goto L4135f2;
  #L413570.  v7:= v14 @kind wide;
  #L413572.  v18:= 0I;
  #L413576.  v19:= lcmp(v5, v14);
  #L41357a.  if v19 == 0 then goto L4135b2;
  #L41357e.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L413584.  v9:= temp @kind object;
  #L413586.  call temp:= `b`(v24) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.b:()Z` @kind virtual;
  #L41358c.  v18:= temp;
  #L41358e.  if v18 == 0 then goto L413594;
  #L413592.  return @kind void;
  #L413594.  if v9 != 0 then goto L41359e;
  #L413598.  v18:= v9 @kind object;
  #L41359c.  goto L4135b2;
  #L41359e.  call `onNext`(v2, v9) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4135a4.  v16:= v16 + v12 @kind long;
  #L4135a8.  v7:= v7 + v12 @kind long;
  #L4135aa.  v5:= v5 - v12 @kind long;
  #L4135ac.  v18:= v9 @kind object;
  #L4135b0.  goto L413576;
  #L4135b2.  v9:= lcmp(v7, v14);
  #L4135b6.  if v9 == 0 then goto L4135d8;
  #L4135ba.  if v10 == 0 then goto L4135ca;
  #L4135be.  v5:= 9223372036854775807L;
  #L4135c8.  goto L4135d8;
  #L4135ca.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4135ce.  v6:= -v7 @kind long;
  #L4135d0.  call temp:= `addAndGet`(v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4135d6.  v5:= temp @kind wide;
  #L4135d8.  v7:= lcmp(v5, v14);
  #L4135dc.  if v7 == 0 then goto L4135f2;
  #L4135e0.  if v18 != 0 then goto L4135e6;
  #L4135e4.  goto L4135f2;
  #L4135e6.  v7:= 9223372036854775807L;
  #L4135f0.  goto L413570;
  #L4135f2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.g` @type ^`boolean` @kind boolean;
  #L4135f6.  v7:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.f` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4135fa.  v8:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4135fe.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L413604.  v8:= temp @kind object;
  #L413606.  v8:= (`io.reactivex.internal.operators.flowable.FlowableFlatMap$a`[]) v8 @kind object;
  #L41360a.  v9:= length @variable v8;
  #L41360c.  if v0 == 0 then goto L41364c;
  #L413610.  if v7 == 0 then goto L413620;
  #L413614.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L41361a.  v0:= temp;
  #L41361c.  if v0 == 0 then goto L41364c;
  #L413620.  if v9 != 0 then goto L41364c;
  #L413624.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.h` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L413628.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L41362e.  v0:= temp @kind object;
  #L413630.  v3:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L413634.  if v0 == v3 then goto L41364a;
  #L413638.  if v0 != 0 then goto L413644;
  #L41363c.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L413642.  goto L41364a;
  #L413644.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41364a.  return @kind void;
  #L41364c.  v18:= v4;
  #L413650.  if v9 == 0 then goto L413846;
  #L413654.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.n` @type ^`long` @kind wide;
  #L413658.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.o` @type ^`int`;
  #L41365c.  if v9 <= v0 then goto L413670;
  #L413660.  v7:= v8[v0] @kind object;
  #L413664.  v11:= v7.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.a` @type ^`long` @kind wide;
  #L413668.  v7:= lcmp(v11, v3);
  #L41366c.  if v7 == 0 then goto L4136ae;
  #L413670.  if v9 > v0 then goto L413676;
  #L413674.  v0:= 0I;
  #L413676.  v7:= 0I;
  #L413678.  if v7 >= v9 then goto L41369e;
  #L41367c.  v11:= v8[v0] @kind object;
  #L413680.  v11:= v11.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.a` @type ^`long` @kind wide;
  #L413684.  v13:= lcmp(v11, v3);
  #L413688.  if v13 != 0 then goto L41368e;
  #L41368c.  goto L41369e;
  #L41368e.  v0:= v0 + 1;
  #L413692.  if v0 != v9 then goto L413698;
  #L413696.  v0:= 0I;
  #L413698.  v7:= v7 + 1;
  #L41369c.  goto L413678;
  #L41369e.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.o` @type ^`int` := v0;
  #L4136a2.  v3:= v8[v0] @kind object;
  #L4136a6.  v3:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.a` @type ^`long` @kind wide;
  #L4136aa.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.n` @type ^`long` := v3 @kind wide;
  #L4136ae.  v3:= v0;
  #L4136b0.  v0:= 0I;
  #L4136b2.  v4:= 0I;
  #L4136b4.  if v4 >= v9 then goto L413826;
  #L4136b8.  call temp:= `b`(v24) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.b:()Z` @kind virtual;
  #L4136be.  v7:= temp;
  #L4136c0.  if v7 == 0 then goto L4136c6;
  #L4136c4.  return @kind void;
  #L4136c6.  v7:= v8[v3] @kind object;
  #L4136ca.  v11:= 0I;
  #L4136cc.  call temp:= `b`(v24) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.b:()Z` @kind virtual;
  #L4136d2.  v12:= temp;
  #L4136d4.  if v12 == 0 then goto L4136da;
  #L4136d8.  return @kind void;
  #L4136da.  v12:= v7.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.f` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L4136de.  if v12 != 0 then goto L4136ec;
  #L4136e2.  v13:= v8 @kind object;
  #L4136e4.  v22:= v9;
  #L4136e8.  goto L4137b8;
  #L4136ec.  v13:= v8 @kind object;
  #L4136ee.  v22:= v9;
  #L4136f2.  v8:= v14 @kind wide;
  #L4136f4.  v23:= lcmp(v5, v14);
  #L4136f8.  if v23 == 0 then goto L41376a;
  #L4136fc.  call temp:= `poll`(v12) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L413702.  v11:= temp @kind object;
  #L413704.  if v11 != 0 then goto L41370a;
  #L413708.  goto L41376a;
  #L41370a.  call `onNext`(v2, v11) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L413710.  call temp:= `b`(v24) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.b:()Z` @kind virtual;
  #L413716.  v23:= temp;
  #L413718.  if v23 == 0 then goto L41371e;
  #L41371c.  return @kind void;
  #L41371e.  v20:= 1L;
  #L413722.  v5:= v5 - v20 @kind long;
  #L413726.  v8:= v8 + v20 @kind long;
  #L41372a.  goto L4136f4;
  #L41372c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41372e.  v8:= v0 @kind object;
  #L413730.  call `throwIfFatal`(v8) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L413736.  call `dispose`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;.dispose:()V` @kind virtual;
  #L41373c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.h` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L413740.  call temp:= `addThrowable`(v0, v8) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L413746.  call temp:= `b`(v24) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.b:()Z` @kind virtual;
  #L41374c.  v0:= temp;
  #L41374e.  if v0 == 0 then goto L413754;
  #L413752.  return @kind void;
  #L413754.  call `j`(v1, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.j:(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;)V` @kind virtual;
  #L41375a.  v4:= v4 + 1;
  #L41375e.  v9:= v22;
  #L413762.  v0:= 1I;
  #L413764.  v7:= 1L;
  #L413768.  goto L413818;
  #L41376a.  v12:= lcmp(v8, v14);
  #L41376e.  if v12 == 0 then goto L41379c;
  #L413772.  if v10 != 0 then goto L413786;
  #L413776.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L41377a.  v14:= -v8 @kind long;
  #L41377c.  call temp:= `addAndGet`(v5, v14) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L413782.  v5:= temp @kind wide;
  #L413784.  goto L413790;
  #L413786.  v5:= 9223372036854775807L;
  #L413790.  call `a`(v7, v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;.a:(J)V` @kind virtual;
  #L413796.  v8:= 0L;
  #L41379a.  goto L41379e;
  #L41379c.  v8:= v14 @kind wide;
  #L41379e.  v12:= lcmp(v5, v8);
  #L4137a2.  if v12 == 0 then goto L4137b8;
  #L4137a6.  if v11 != 0 then goto L4137ac;
  #L4137aa.  goto L4137b8;
  #L4137ac.  v8:= v13 @kind object;
  #L4137ae.  v9:= v22;
  #L4137b2.  v14:= 0L;
  #L4137b6.  goto L4136cc;
  #L4137b8.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.e` @type ^`boolean` @kind boolean;
  #L4137bc.  v9:= v7.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.f` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L4137c0.  if v8 == 0 then goto L4137f4;
  #L4137c4.  if v9 == 0 then goto L4137d4;
  #L4137c8.  call temp:= `isEmpty`(v9) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4137ce.  v8:= temp;
  #L4137d0.  if v8 == 0 then goto L4137f4;
  #L4137d4.  call `j`(v1, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.j:(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;)V` @kind virtual;
  #L4137da.  call temp:= `b`(v24) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.b:()Z` @kind virtual;
  #L4137e0.  v0:= temp;
  #L4137e2.  if v0 == 0 then goto L4137e8;
  #L4137e6.  return @kind void;
  #L4137e8.  v7:= 1L;
  #L4137ec.  v16:= v16 + v7 @kind long;
  #L4137f0.  v0:= 1I;
  #L4137f2.  goto L4137f8;
  #L4137f4.  v7:= 1L;
  #L4137f8.  v11:= 0L;
  #L4137fc.  v9:= lcmp(v5, v11);
  #L413800.  if v9 != 0 then goto L41380a;
  #L413804.  v9:= v0;
  #L413806.  v11:= 1I;
  #L413808.  goto L41382c;
  #L41380a.  v3:= v3 + 1;
  #L41380e.  v9:= v22;
  #L413812.  if v3 != v9 then goto L413818;
  #L413816.  v3:= 0I;
  #L413818.  v11:= 1I;
  #L41381a.  v4:= v4 + v11 @kind int;
  #L41381c.  v8:= v13 @kind object;
  #L41381e.  v14:= 0L;
  #L413822.  goto L4136b4;
  #L413826.  v13:= v8 @kind object;
  #L413828.  v11:= 1I;
  #L41382a.  v9:= v0;
  #L41382c.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.o` @type ^`int` := v3;
  #L413830.  v0:= v13[v3] @kind object;
  #L413834.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.a` @type ^`long` @kind wide;
  #L413838.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.n` @type ^`long` := v3 @kind wide;
  #L41383c.  v3:= v16 @kind wide;
  #L413840.  v5:= 0L;
  #L413844.  goto L413850;
  #L413846.  v11:= 1I;
  #L413848.  v5:= v14 @kind wide;
  #L41384a.  v3:= v16 @kind wide;
  #L41384e.  v9:= 0I;
  #L413850.  v0:= lcmp(v3, v5);
  #L413854.  if v0 == 0 then goto L41386a;
  #L413858.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.i` @type ^`boolean` @kind boolean;
  #L41385c.  if v0 != 0 then goto L41386a;
  #L413860.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L413864.  call `request`(v0, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L41386a.  if v9 == 0 then goto L413876;
  #L41386e.  v4:= v18;
  #L413872.  goto L41352a;
  #L413876.  v3:= v18;
  #L41387a.  v0:= -v3 @kind int;
  #L41387c.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L413882.  v4:= temp;
  #L413884.  if v4 != 0 then goto L41352a;
  #L413888.  return @kind void;
  catch `java.lang.Throwable` @[L4136fc..L413704] goto L41372c;
}
procedure `io.reactivex.internal.fuseable.SimpleQueue` `g`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` v2 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMap$a` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.g:(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;)Lio/reactivex/internal/fuseable/SimpleQueue;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L41330c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.f` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L413310.  if v0 != 0 then goto L413326;
  #L413314.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L413318.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.e` @type ^`int`;
  #L41331c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L413322.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.f` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L413326.  return v0 @kind object;
}
procedure `io.reactivex.internal.fuseable.SimpleQueue` `h`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.h:()Lio/reactivex/internal/fuseable/SimpleQueue;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L413338.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.f` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L41333c.  if v0 != 0 then goto L413370;
  #L413340.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.d` @type ^`int`;
  #L413344.  v1:= 2147483647I;
  #L41334a.  if v0 != v1 then goto L41335e;
  #L41334e.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L413352.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.e` @type ^`int`;
  #L413356.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L41335c.  goto L41336c;
  #L41335e.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L413362.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.d` @type ^`int`;
  #L413366.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L41336c.  v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.f` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L413370.  return v0 @kind object;
}
procedure `void` `i`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` v2 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMap$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.i:(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4138a8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.h` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4138ac.  call temp:= `addThrowable`(v0, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4138b2.  v0:= temp;
  #L4138b4.  if v0 == 0 then goto L413904;
  #L4138b8.  v4:= 1I;
  #L4138ba.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.e` @type ^`boolean` := v4 @kind boolean;
  #L4138be.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.c` @type ^`boolean` @kind boolean;
  #L4138c2.  if v3 != 0 then goto L4138fc;
  #L4138c6.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4138ca.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4138d0.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4138d4.  v4:= `@@io.reactivex.internal.operators.flowable.FlowableFlatMap$b.s` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$a`[] @kind object;
  #L4138d8.  call temp:= `getAndSet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4138de.  v3:= temp @kind object;
  #L4138e0.  v3:= (`io.reactivex.internal.operators.flowable.FlowableFlatMap$a`[]) v3 @kind object;
  #L4138e4.  v4:= length @variable v3;
  #L4138e6.  v0:= 0I;
  #L4138e8.  if v0 >= v4 then goto L4138fc;
  #L4138ec.  v1:= v3[v0] @kind object;
  #L4138f0.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;.dispose:()V` @kind virtual;
  #L4138f6.  v0:= v0 + 1;
  #L4138fa.  goto L4138e8;
  #L4138fc.  call `e`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @kind virtual;
  #L413902.  goto L41390a;
  #L413904.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41390a.  return @kind void;
}
procedure `void` `j`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` v6 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMap$a` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.j:(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L413af8.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L413afc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L413b02.  v0:= temp @kind object;
  #L413b04.  v0:= (`io.reactivex.internal.operators.flowable.FlowableFlatMap$a`[]) v0 @kind object;
  #L413b08.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableFlatMap$b.s` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$a`[] @kind object;
  #L413b0c.  if v0 == v1 then goto L413b78;
  #L413b10.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableFlatMap$b.r` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$a`[] @kind object;
  #L413b14.  if v0 != v1 then goto L413b1a;
  #L413b18.  goto L413b78;
  #L413b1a.  v1:= length @variable v0;
  #L413b1c.  v2:= -1I;
  #L413b1e.  v3:= 0I;
  #L413b20.  v4:= 0I;
  #L413b22.  if v4 >= v1 then goto L413b38;
  #L413b26.  v5:= v0[v4] @kind object;
  #L413b2a.  if v5 != v7 then goto L413b32;
  #L413b2e.  v2:= v4;
  #L413b30.  goto L413b38;
  #L413b32.  v4:= v4 + 1;
  #L413b36.  goto L413b22;
  #L413b38.  if v2 >= 0 then goto L413b3e;
  #L413b3c.  return @kind void;
  #L413b3e.  v4:= 1I;
  #L413b40.  if v1 != v4 then goto L413b4a;
  #L413b44.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableFlatMap$b.r` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$a`[] @kind object;
  #L413b48.  goto L413b68;
  #L413b4a.  v5:= v1 + -1;
  #L413b4e.  v5:= new `io.reactivex.internal.operators.flowable.FlowableFlatMap$a`[v5];
  #L413b52.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L413b58.  v3:= v2 + 1;
  #L413b5c.  v1:= v1 - v2 @kind int;
  #L413b5e.  v1:= v1 - v4 @kind int;
  #L413b60.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L413b66.  v1:= v5 @kind object;
  #L413b68.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L413b6c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L413b72.  v0:= temp;
  #L413b74.  if v0 == 0 then goto L413af8;
  #L413b78.  return @kind void;
}
procedure `void` `k`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` v7 @kind this, `java.lang.Object` v8 @kind object, `io.reactivex.internal.operators.flowable.FlowableFlatMap$a` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.k:(Ljava/lang/Object;Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L413bbc.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L413bc2.  v0:= temp;
  #L413bc4.  v1:= "Inner queue full?!" @kind object;
  #L413bc8.  if v0 != 0 then goto L413c72;
  #L413bcc.  v0:= 0I;
  #L413bce.  v2:= 1I;
  #L413bd0.  call temp:= `compareAndSet`(v7, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L413bd6.  v0:= temp;
  #L413bd8.  if v0 == 0 then goto L413c72;
  #L413bdc.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L413be0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L413be6.  v2:= temp @kind wide;
  #L413be8.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.f` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L413bec.  v4:= 0L;
  #L413bf0.  v6:= lcmp(v2, v4);
  #L413bf4.  if v6 == 0 then goto L413c3a;
  #L413bf8.  if v0 == 0 then goto L413c08;
  #L413bfc.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L413c02.  v4:= temp;
  #L413c04.  if v4 == 0 then goto L413c3a;
  #L413c08.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L413c0c.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L413c12.  v0:= 9223372036854775807L;
  #L413c1c.  v8:= lcmp(v2, v0);
  #L413c20.  if v8 == 0 then goto L413c2e;
  #L413c24.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L413c28.  call temp:= `decrementAndGet`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L413c2e.  v0:= 1L;
  #L413c32.  call `a`(v9, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;.a:(J)V` @kind virtual;
  #L413c38.  goto L413c64;
  #L413c3a.  if v0 != 0 then goto L413c46;
  #L413c3e.  call temp:= `g`(v7, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.g:(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;)Lio/reactivex/internal/fuseable/SimpleQueue;` @kind virtual;
  #L413c44.  v0:= temp @kind object;
  #L413c46.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L413c4c.  v8:= temp;
  #L413c4e.  if v8 != 0 then goto L413c64;
  #L413c52.  v8:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L413c56.  call `<init>`(v8, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L413c5c.  call `onError`(v7, v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L413c62.  return @kind void;
  #L413c64.  call temp:= `decrementAndGet`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L413c6a.  v8:= temp;
  #L413c6c.  if v8 != 0 then goto L413cb8;
  #L413c70.  return @kind void;
  #L413c72.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.f` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L413c76.  if v0 != 0 then goto L413c8c;
  #L413c7a.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L413c7e.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.e` @type ^`int`;
  #L413c82.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L413c88.  v9.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.f` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L413c8c.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L413c92.  v8:= temp;
  #L413c94.  if v8 != 0 then goto L413caa;
  #L413c98.  v8:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L413c9c.  call `<init>`(v8, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L413ca2.  call `onError`(v7, v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L413ca8.  return @kind void;
  #L413caa.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L413cb0.  v8:= temp;
  #L413cb2.  if v8 == 0 then goto L413cb8;
  #L413cb6.  return @kind void;
  #L413cb8.  call `f`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.f:()V` @kind virtual;
  #L413cbe.  return @kind void;
}
procedure `void` `l`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.l:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L413cd0.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L413cd6.  v0:= temp;
  #L413cd8.  v1:= "Scalar queue full?!" @kind object;
  #L413cdc.  if v0 != 0 then goto L413db4;
  #L413ce0.  v0:= 0I;
  #L413ce2.  v2:= 1I;
  #L413ce4.  call temp:= `compareAndSet`(v9, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L413cea.  v3:= temp;
  #L413cec.  if v3 == 0 then goto L413db4;
  #L413cf0.  v3:= v9.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L413cf4.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L413cfa.  v3:= temp @kind wide;
  #L413cfc.  v5:= v9.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.f` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L413d00.  v6:= 0L;
  #L413d04.  v8:= lcmp(v3, v6);
  #L413d08.  if v8 == 0 then goto L413d7c;
  #L413d0c.  if v5 == 0 then goto L413d1c;
  #L413d10.  call temp:= `isEmpty`(v5) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L413d16.  v6:= temp;
  #L413d18.  if v6 == 0 then goto L413d7c;
  #L413d1c.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L413d20.  call `onNext`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L413d26.  v5:= 9223372036854775807L;
  #L413d30.  v10:= lcmp(v3, v5);
  #L413d34.  if v10 == 0 then goto L413d42;
  #L413d38.  v10:= v9.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L413d3c.  call temp:= `decrementAndGet`(v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L413d42.  v10:= v9.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.d` @type ^`int`;
  #L413d46.  v1:= 2147483647I;
  #L413d4c.  if v10 == v1 then goto L413da6;
  #L413d50.  v10:= v9.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.i` @type ^`boolean` @kind boolean;
  #L413d54.  if v10 != 0 then goto L413da6;
  #L413d58.  v10:= v9.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.p` @type ^`int`;
  #L413d5c.  v10:= v10 + v2 @kind int;
  #L413d5e.  v9.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.p` @type ^`int` := v10;
  #L413d62.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.q` @type ^`int`;
  #L413d66.  if v10 != v1 then goto L413da6;
  #L413d6a.  v9.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.p` @type ^`int` := v0;
  #L413d6e.  v10:= v9.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L413d72.  v0:= (`long`) v1 @kind i2l;
  #L413d74.  call `request`(v10, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L413d7a.  goto L413da6;
  #L413d7c.  if v5 != 0 then goto L413d88;
  #L413d80.  call temp:= `h`(v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.h:()Lio/reactivex/internal/fuseable/SimpleQueue;` @kind virtual;
  #L413d86.  v5:= temp @kind object;
  #L413d88.  call temp:= `offer`(v5, v10) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L413d8e.  v10:= temp;
  #L413d90.  if v10 != 0 then goto L413da6;
  #L413d94.  v10:= new `java.lang.IllegalStateException`;
  #L413d98.  call `<init>`(v10, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L413d9e.  call `onError`(v9, v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L413da4.  return @kind void;
  #L413da6.  call temp:= `decrementAndGet`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L413dac.  v10:= temp;
  #L413dae.  if v10 != 0 then goto L413de8;
  #L413db2.  return @kind void;
  #L413db4.  call temp:= `h`(v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.h:()Lio/reactivex/internal/fuseable/SimpleQueue;` @kind virtual;
  #L413dba.  v0:= temp @kind object;
  #L413dbc.  call temp:= `offer`(v0, v10) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L413dc2.  v10:= temp;
  #L413dc4.  if v10 != 0 then goto L413dda;
  #L413dc8.  v10:= new `java.lang.IllegalStateException`;
  #L413dcc.  call `<init>`(v10, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L413dd2.  call `onError`(v9, v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L413dd8.  return @kind void;
  #L413dda.  call temp:= `getAndIncrement`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L413de0.  v10:= temp;
  #L413de2.  if v10 == 0 then goto L413de8;
  #L413de6.  return @kind void;
  #L413de8.  call `f`(v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.f:()V` @kind virtual;
  #L413dee.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41391c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.g` @type ^`boolean` @kind boolean;
  #L413920.  if v0 == 0 then goto L413926;
  #L413924.  return @kind void;
  #L413926.  v0:= 1I;
  #L413928.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.g` @type ^`boolean` := v0 @kind boolean;
  #L41392c.  call `e`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @kind virtual;
  #L413932.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L413944.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.g` @type ^`boolean` @kind boolean;
  #L413948.  if v0 == 0 then goto L413954;
  #L41394c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L413952.  return @kind void;
  #L413954.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.h` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L413958.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L41395e.  v0:= temp;
  #L413960.  if v0 == 0 then goto L413972;
  #L413964.  v2:= 1I;
  #L413966.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.g` @type ^`boolean` := v2 @kind boolean;
  #L41396a.  call `e`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @kind virtual;
  #L413970.  goto L413978;
  #L413972.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L413978.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L41398c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.g` @type ^`boolean` @kind boolean;
  #L413990.  if v0 == 0 then goto L413996;
  #L413994.  return @kind void;
  #L413996.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L41399a.  call temp:= `apply`(v0, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4139a0.  v6:= temp @kind object;
  #L4139a2.  v0:= "The mapper returned a null Publisher" @kind object;
  #L4139a6.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4139ac.  v6:= temp @kind object;
  #L4139ae.  v6:= (`org.reactivestreams.Publisher`) v6 @kind object;
  #L4139b2.  v0:= instanceof @variable v6 @type ^`java.util.concurrent.Callable` @kind boolean;
  #L4139b6.  if v0 == 0 then goto L413a2a;
  #L4139ba.  v6:= (`java.util.concurrent.Callable`) v6 @kind object;
  #L4139be.  call temp:= `call`(v6) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L4139c4.  v6:= temp @kind object;
  #L4139c6.  if v6 == 0 then goto L4139d2;
  #L4139ca.  call `l`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.l:(Ljava/lang/Object;)V` @kind virtual;
  #L4139d0.  goto L413a54;
  #L4139d2.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.d` @type ^`int`;
  #L4139d6.  v0:= 2147483647I;
  #L4139dc.  if v6 == v0 then goto L413a54;
  #L4139e0.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.i` @type ^`boolean` @kind boolean;
  #L4139e4.  if v6 != 0 then goto L413a54;
  #L4139e8.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.p` @type ^`int`;
  #L4139ec.  v6:= v6 + 1;
  #L4139f0.  v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.p` @type ^`int` := v6;
  #L4139f4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.q` @type ^`int`;
  #L4139f8.  if v6 != v0 then goto L413a54;
  #L4139fc.  v6:= 0I;
  #L4139fe.  v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.p` @type ^`int` := v6;
  #L413a02.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L413a06.  v0:= (`long`) v0 @kind i2l;
  #L413a08.  call `request`(v6, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L413a0e.  goto L413a54;
  #L413a10.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L413a12.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L413a18.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.h` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L413a1c.  call temp:= `addThrowable`(v0, v6) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L413a22.  call `e`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @kind virtual;
  #L413a28.  return @kind void;
  #L413a2a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMap$a`;
  #L413a2e.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.m` @type ^`long` @kind wide;
  #L413a32.  v3:= 1L;
  #L413a36.  v3:= v3 + v1 @kind long;
  #L413a38.  v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.m` @type ^`long` := v3 @kind wide;
  #L413a3c.  call `<init>`(v0, v5, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;J)V` @kind direct;
  #L413a42.  call temp:= `a`(v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.a:(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;)Z` @kind virtual;
  #L413a48.  v1:= temp;
  #L413a4a.  if v1 == 0 then goto L413a54;
  #L413a4e.  call `subscribe`(v6, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L413a54.  return @kind void;
  #L413a56.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L413a58.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L413a5e.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L413a62.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L413a68.  call `onError`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L413a6e.  return @kind void;
  catch `java.lang.Throwable` @[L413996..L4139b2] goto L413a56;
  catch `java.lang.Throwable` @[L4139ba..L4139c6] goto L413a10;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L413a98.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L413a9c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L413aa2.  v0:= temp;
  #L413aa4.  if v0 == 0 then goto L413ae6;
  #L413aa8.  v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.l` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L413aac.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L413ab0.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L413ab6.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.i` @type ^`boolean` @kind boolean;
  #L413aba.  if v0 != 0 then goto L413ae6;
  #L413abe.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.d` @type ^`int`;
  #L413ac2.  v1:= 2147483647I;
  #L413ac8.  if v0 != v1 then goto L413ade;
  #L413acc.  v0:= 9223372036854775807L;
  #L413ad6.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L413adc.  goto L413ae6;
  #L413ade.  v0:= (`long`) v0 @kind i2l;
  #L413ae0.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L413ae6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L413b8c.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L413b92.  v0:= temp;
  #L413b94.  if v0 == 0 then goto L413ba8;
  #L413b98.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L413b9c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L413ba2.  call `e`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @kind virtual;
  #L413ba8.  return @kind void;
}
