record `io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.c` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceMaybe$a;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41da9c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41daa2.  v0.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L41daa6.  v0.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.b` @type ^`io.reactivex.functions.BiFunction` := v2 @kind object;
  #L41daaa.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41dabc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41dac0.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L41dac6.  v0:= 1I;
  #L41dac8.  v1.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.e` @type ^`boolean` := v0 @kind boolean;
  #L41dacc.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41da84.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.e` @type ^`boolean` @kind boolean;
  #L41da88.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41dae0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.e` @type ^`boolean` @kind boolean;
  #L41dae4.  if v0 == 0 then goto L41daea;
  #L41dae8.  return @kind void;
  #L41daea.  v0:= 1I;
  #L41daec.  v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.e` @type ^`boolean` := v0 @kind boolean;
  #L41daf0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.c` @type ^`java.lang.Object` @kind object;
  #L41daf4.  if v0 == 0 then goto L41db04;
  #L41daf8.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L41dafc.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L41db02.  goto L41db0e;
  #L41db04.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L41db08.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L41db0e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41db20.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.e` @type ^`boolean` @kind boolean;
  #L41db24.  if v0 == 0 then goto L41db30;
  #L41db28.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41db2e.  return @kind void;
  #L41db30.  v0:= 1I;
  #L41db32.  v1.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.e` @type ^`boolean` := v0 @kind boolean;
  #L41db36.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L41db3a.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41db40.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41db54.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.e` @type ^`boolean` @kind boolean;
  #L41db58.  if v0 == 0 then goto L41db5e;
  #L41db5c.  return @kind void;
  #L41db5e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.c` @type ^`java.lang.Object` @kind object;
  #L41db62.  if v0 != 0 then goto L41db6c;
  #L41db66.  v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.c` @type ^`java.lang.Object` := v3 @kind object;
  #L41db6a.  goto L41dba2;
  #L41db6c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.b` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L41db70.  call temp:= `apply`(v1, v0, v3) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L41db76.  v3:= temp @kind object;
  #L41db78.  v0:= "The reducer returned a null value" @kind object;
  #L41db7c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41db82.  v3:= temp @kind object;
  #L41db84.  v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.c` @type ^`java.lang.Object` := v3 @kind object;
  #L41db88.  goto L41dba2;
  #L41db8a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41db8c.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41db92.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41db96.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L41db9c.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceMaybe$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41dba2.  return @kind void;
  catch `java.lang.Throwable` @[L41db6c..L41db88] goto L41db8a;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceMaybe$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41dbc0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41dbc4.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L41dbca.  v0:= temp;
  #L41dbcc.  if v0 == 0 then goto L41dbee;
  #L41dbd0.  v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.d` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L41dbd4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L41dbd8.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L41dbde.  v0:= 9223372036854775807L;
  #L41dbe8.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L41dbee.  return @kind void;
}
