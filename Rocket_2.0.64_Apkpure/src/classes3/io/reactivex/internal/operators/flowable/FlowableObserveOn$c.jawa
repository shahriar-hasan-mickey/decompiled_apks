record `io.reactivex.internal.operators.flowable.FlowableObserveOn$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableObserveOn$a` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableObserveOn$c.n` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableObserveOn$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.Scheduler$Worker` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/Scheduler$Worker;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41aa48.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.<init>:(Lio/reactivex/Scheduler$Worker;ZI)V` @kind direct;
  #L41aa4e.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L41aa52.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$c` v12 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$c;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L41ab10.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41ab14.  v1:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L41ab18.  v2:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` @kind wide;
  #L41ab1c.  v4:= 1I;
  #L41ab1e.  v5:= 1I;
  #L41ab20.  v6:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L41ab24.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L41ab2a.  v6:= temp @kind wide;
  #L41ab2c.  v8:= lcmp(v2, v6);
  #L41ab30.  if v8 == 0 then goto L41abd2;
  #L41ab34.  v9:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L41ab38.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L41ab3e.  v10:= temp @kind object;
  #L41ab40.  if v10 != 0 then goto L41ab48;
  #L41ab44.  v11:= 1I;
  #L41ab46.  goto L41ab4a;
  #L41ab48.  v11:= 0I;
  #L41ab4a.  call temp:= `e`(v12, v9, v11, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L41ab50.  v9:= temp;
  #L41ab52.  if v9 == 0 then goto L41ab58;
  #L41ab56.  return @kind void;
  #L41ab58.  if v11 == 0 then goto L41ab5e;
  #L41ab5c.  goto L41abd2;
  #L41ab5e.  call `onNext`(v0, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41ab64.  v8:= 1L;
  #L41ab68.  v2:= v2 + v8 @kind long;
  #L41ab6a.  v8:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.d` @type ^`int`;
  #L41ab6e.  v8:= (`long`) v8 @kind i2l;
  #L41ab70.  v10:= lcmp(v2, v8);
  #L41ab74.  if v10 != 0 then goto L41ab2c;
  #L41ab78.  v8:= 9223372036854775807L;
  #L41ab82.  v10:= lcmp(v6, v8);
  #L41ab86.  if v10 == 0 then goto L41ab98;
  #L41ab8a.  v6:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L41ab8e.  v7:= -v2 @kind long;
  #L41ab90.  call temp:= `addAndGet`(v6, v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L41ab96.  v6:= temp @kind wide;
  #L41ab98.  v8:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41ab9c.  call `request`(v8, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L41aba2.  v2:= 0L;
  #L41aba6.  goto L41ab2c;
  #L41aba8.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41abaa.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41abb0.  v3:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41abb4.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L41abba.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L41abc0.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41abc6.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L41abca.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41abd0.  return @kind void;
  #L41abd2.  if v8 != 0 then goto L41abf0;
  #L41abd6.  v6:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L41abda.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L41abe0.  v7:= temp;
  #L41abe2.  call temp:= `e`(v12, v6, v7, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L41abe8.  v6:= temp;
  #L41abea.  if v6 == 0 then goto L41abf0;
  #L41abee.  return @kind void;
  #L41abf0.  call temp:= `get`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L41abf6.  v6:= temp;
  #L41abf8.  if v5 != v6 then goto L41ac10;
  #L41abfc.  v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` := v2 @kind wide;
  #L41ac00.  v5:= -v5 @kind int;
  #L41ac02.  call temp:= `addAndGet`(v12, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L41ac08.  v5:= temp;
  #L41ac0a.  if v5 != 0 then goto L41ab20;
  #L41ac0e.  return @kind void;
  #L41ac10.  v5:= v6;
  #L41ac12.  goto L41ab20;
  catch `java.lang.Throwable` @[L41ab38..L41ab40] goto L41aba8;
}
procedure `void` `g`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$c` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$c;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41ac30.  v0:= 1I;
  #L41ac32.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L41ac36.  if v1 == 0 then goto L41ac3c;
  #L41ac3a.  return @kind void;
  #L41ac3c.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L41ac40.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41ac44.  v3:= 0I;
  #L41ac46.  call `onNext`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41ac4c.  if v1 == 0 then goto L41ac7a;
  #L41ac50.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.j` @type ^`java.lang.Throwable` @kind object;
  #L41ac54.  if v0 == 0 then goto L41ac64;
  #L41ac58.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41ac5c.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41ac62.  goto L41ac6e;
  #L41ac64.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41ac68.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41ac6e.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L41ac72.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41ac78.  return @kind void;
  #L41ac7a.  v0:= -v0 @kind int;
  #L41ac7c.  call temp:= `addAndGet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L41ac82.  v0:= temp;
  #L41ac84.  if v0 != 0 then goto L41ac32;
  #L41ac88.  return @kind void;
}
procedure `void` `h`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$c` v9 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$c;.h:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L41ac9c.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41aca0.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L41aca4.  v2:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` @kind wide;
  #L41aca8.  v4:= 1I;
  #L41acaa.  v5:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L41acae.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L41acb4.  v5:= temp @kind wide;
  #L41acb6.  v7:= lcmp(v2, v5);
  #L41acba.  if v7 == 0 then goto L41ad18;
  #L41acbe.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L41acc4.  v7:= temp @kind object;
  #L41acc6.  v8:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L41acca.  if v8 == 0 then goto L41acd0;
  #L41acce.  return @kind void;
  #L41acd0.  if v7 != 0 then goto L41ace6;
  #L41acd4.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41acda.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L41acde.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41ace4.  return @kind void;
  #L41ace6.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41acec.  v7:= 1L;
  #L41acf0.  v2:= v2 + v7 @kind long;
  #L41acf2.  goto L41acb6;
  #L41acf4.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41acf6.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41acfc.  v2:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41ad00.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L41ad06.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41ad0c.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L41ad10.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41ad16.  return @kind void;
  #L41ad18.  v5:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L41ad1c.  if v5 == 0 then goto L41ad22;
  #L41ad20.  return @kind void;
  #L41ad22.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L41ad28.  v5:= temp;
  #L41ad2a.  if v5 == 0 then goto L41ad40;
  #L41ad2e.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L41ad34.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L41ad38.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41ad3e.  return @kind void;
  #L41ad40.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L41ad46.  v5:= temp;
  #L41ad48.  if v4 != v5 then goto L41ad60;
  #L41ad4c.  v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` := v2 @kind wide;
  #L41ad50.  v4:= -v4 @kind int;
  #L41ad52.  call temp:= `addAndGet`(v9, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L41ad58.  v4:= temp;
  #L41ad5a.  if v4 != 0 then goto L41acaa;
  #L41ad5e.  return @kind void;
  #L41ad60.  v4:= v5;
  #L41ad62.  goto L41acaa;
  catch `java.lang.Throwable` @[L41acbe..L41acc6] goto L41acf4;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$c` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L41aa64.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41aa68.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L41aa6e.  v0:= temp;
  #L41aa70.  if v0 == 0 then goto L41aafc;
  #L41aa74.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L41aa78.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L41aa7c.  if v0 == 0 then goto L41aad4;
  #L41aa80.  v0:= v4 @kind object;
  #L41aa82.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L41aa86.  v1:= 7I;
  #L41aa88.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L41aa8e.  v1:= temp;
  #L41aa90.  v2:= 1I;
  #L41aa92.  if v1 != v2 then goto L41aaae;
  #L41aa96.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int` := v2;
  #L41aa9a.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L41aa9e.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` := v2 @kind boolean;
  #L41aaa2.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41aaa6.  call `onSubscribe`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L41aaac.  return @kind void;
  #L41aaae.  v2:= 2I;
  #L41aab0.  if v1 != v2 then goto L41aad4;
  #L41aab4.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int` := v2;
  #L41aab8.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L41aabc.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41aac0.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L41aac6.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.c` @type ^`int`;
  #L41aaca.  v0:= (`long`) v0 @kind i2l;
  #L41aacc.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L41aad2.  return @kind void;
  #L41aad4.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L41aad8.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.c` @type ^`int`;
  #L41aadc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L41aae2.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L41aae6.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41aaea.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L41aaf0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.c` @type ^`int`;
  #L41aaf4.  v0:= (`long`) v0 @kind i2l;
  #L41aaf6.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L41aafc.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$c` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$c;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L41a9ec.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L41a9f0.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L41a9f6.  v0:= temp @kind object;
  #L41a9f8.  if v0 == 0 then goto L41aa36;
  #L41a9fc.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int`;
  #L41aa00.  v2:= 1I;
  #L41aa02.  if v1 == v2 then goto L41aa36;
  #L41aa06.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` @kind wide;
  #L41aa0a.  v3:= 1L;
  #L41aa0e.  v1:= v1 + v3 @kind long;
  #L41aa10.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.d` @type ^`int`;
  #L41aa14.  v3:= (`long`) v3 @kind i2l;
  #L41aa16.  v5:= lcmp(v1, v3);
  #L41aa1a.  if v5 != 0 then goto L41aa32;
  #L41aa1e.  v3:= 0L;
  #L41aa22.  v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` := v3 @kind wide;
  #L41aa26.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L41aa2a.  call `request`(v3, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L41aa30.  goto L41aa36;
  #L41aa32.  v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` := v1 @kind wide;
  #L41aa36.  return v0 @kind object;
}
