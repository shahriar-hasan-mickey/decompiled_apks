record `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.d` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.e` @AccessFlag ;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.f` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.h` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler$Worker` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$b;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L410888.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L41088e.  v0:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L410892.  call `<init>`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L410898.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.f` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v0 @kind object;
  #L41089c.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4108a0.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.b` @type ^`long` := v3 @kind wide;
  #L4108a4.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.c` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L4108a8.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.d` @type ^`io.reactivex.Scheduler$Worker` := v6 @kind object;
  #L4108ac.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b` v3 @kind this, `long` v4 , `java.lang.Object` v6 @kind object, `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$a` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$b;.a:(JLjava/lang/Object;Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4108e8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.g` @type ^`long` @kind wide;
  #L4108ec.  v2:= lcmp(v4, v0);
  #L4108f0.  if v2 != 0 then goto L410942;
  #L4108f4.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4108fa.  v4:= temp @kind wide;
  #L4108fc.  v0:= 0L;
  #L410900.  v2:= lcmp(v4, v0);
  #L410904.  if v2 == 0 then goto L410924;
  #L410908.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41090c.  call `onNext`(v4, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L410912.  v4:= 1L;
  #L410916.  call temp:= `produced`(v3, v4) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L41091c.  call `dispose`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$a;.dispose:()V` @kind virtual;
  #L410922.  goto L410942;
  #L410924.  call `cancel`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$b;.cancel:()V` @kind virtual;
  #L41092a.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41092e.  v5:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L410932.  v6:= "Could not deliver value due to lack of requests" @kind object;
  #L410936.  call `<init>`(v5, v6) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41093c.  call `onError`(v4, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L410942.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4108c0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4108c4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4108ca.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4108ce.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4108d4.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L410954.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.h` @type ^`boolean` @kind boolean;
  #L410958.  if v0 == 0 then goto L41095e;
  #L41095c.  return @kind void;
  #L41095e.  v0:= 1I;
  #L410960.  v2.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.h` @type ^`boolean` := v0 @kind boolean;
  #L410964.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.f` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L410968.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L41096e.  v0:= temp @kind object;
  #L410970.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L410974.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L41097a.  v1:= temp;
  #L41097c.  if v1 != 0 then goto L4109ac;
  #L410980.  v0:= (`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$a`) v0 @kind object;
  #L410984.  if v0 == 0 then goto L41098e;
  #L410988.  call `a`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$a;.a:()V` @kind virtual;
  #L41098e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.f` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L410992.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L410998.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41099c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4109a2.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4109a6.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4109ac.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4109c0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.h` @type ^`boolean` @kind boolean;
  #L4109c4.  if v0 == 0 then goto L4109d0;
  #L4109c8.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4109ce.  return @kind void;
  #L4109d0.  v0:= 1I;
  #L4109d2.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.h` @type ^`boolean` := v0 @kind boolean;
  #L4109d6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4109da.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4109e0.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4109e4.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4109ea.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4109fc.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.h` @type ^`boolean` @kind boolean;
  #L410a00.  if v0 == 0 then goto L410a06;
  #L410a04.  return @kind void;
  #L410a06.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.g` @type ^`long` @kind wide;
  #L410a0a.  v2:= 1L;
  #L410a0e.  v0:= v0 + v2 @kind long;
  #L410a10.  v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.g` @type ^`long` := v0 @kind wide;
  #L410a14.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.f` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L410a18.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L410a1e.  v2:= temp @kind object;
  #L410a20.  v2:= (`io.reactivex.disposables.Disposable`) v2 @kind object;
  #L410a24.  if v2 == 0 then goto L410a2e;
  #L410a28.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L410a2e.  v2:= new `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$a`;
  #L410a32.  call `<init>`(v2, v5, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$a;.<init>:(Ljava/lang/Object;JLio/reactivex/internal/operators/flowable/FlowableDebounceTimed$b;)V` @kind direct;
  #L410a38.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.f` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L410a3c.  call temp:= `replace`(v5, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L410a42.  v5:= temp;
  #L410a44.  if v5 == 0 then goto L410a62;
  #L410a48.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L410a4c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.b` @type ^`long` @kind wide;
  #L410a50.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L410a54.  call temp:= `schedule`(v5, v2, v0, v3) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L410a5a.  v5:= temp @kind object;
  #L410a5c.  call `b`(v2, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$a;.b:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L410a62.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L410a74.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L410a78.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L410a7e.  v0:= temp;
  #L410a80.  if v0 == 0 then goto L410aa2;
  #L410a84.  v2.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.e` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L410a88.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L410a8c.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L410a92.  v0:= 9223372036854775807L;
  #L410a9c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L410aa2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L410ab4.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L410aba.  v0:= temp;
  #L410abc.  if v0 == 0 then goto L410ac6;
  #L410ac0.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L410ac6.  return @kind void;
}
