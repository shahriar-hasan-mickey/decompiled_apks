record `io.reactivex.internal.operators.flowable.FlowableDoOnEach$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.BasicFuseableSubscriber` @kind class {
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.b` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.c` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `io.reactivex.functions.Action` v4 @kind object, `io.reactivex.functions.Action` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L412344.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L41234a.  v0.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.a` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L41234e.  v0.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.b` @type ^`io.reactivex.functions.Consumer` := v3 @kind object;
  #L412352.  v0.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.c` @type ^`io.reactivex.functions.Action` := v4 @kind object;
  #L412356.  v0.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.d` @type ^`io.reactivex.functions.Action` := v5 @kind object;
  #L41235a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41236c.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` @kind boolean;
  #L412370.  if v0 == 0 then goto L412376;
  #L412374.  return @kind void;
  #L412376.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.c` @type ^`io.reactivex.functions.Action` @kind object;
  #L41237a.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L412380.  v0:= 1I;
  #L412382.  v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L412386.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41238a.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L412390.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.d` @type ^`io.reactivex.functions.Action` @kind object;
  #L412394.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L41239a.  goto L4123aa;
  #L41239c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41239e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4123a4.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4123aa.  return @kind void;
  #L4123ac.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4123ae.  call `fail`(v1, v0) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4123b4.  return @kind void;
  catch `java.lang.Throwable` @[L412376..L412380] goto L4123ac;
  catch `java.lang.Throwable` @[L412390..L41239a] goto L41239c;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4123e0.  v0:= v6.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` @kind boolean;
  #L4123e4.  if v0 == 0 then goto L4123f0;
  #L4123e8.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4123ee.  return @kind void;
  #L4123f0.  v0:= 1I;
  #L4123f2.  v6.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4123f6.  v1:= 0I;
  #L4123f8.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4123fc.  call `accept`(v2, v7) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L412402.  goto L412430;
  #L412404.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L412406.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41240c.  v3:= v6.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L412410.  v4:= new `io.reactivex.exceptions.CompositeException`;
  #L412414.  v5:= 2I;
  #L412416.  v5:= new `java.lang.Throwable`[v5];
  #L41241a.  v5[v1]:= v7 @kind object;
  #L41241e.  v5[v0]:= v2 @kind object;
  #L412422.  call `<init>`(v4, v5) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L412428.  call `onError`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41242e.  v0:= 0I;
  #L412430.  if v0 == 0 then goto L41243e;
  #L412434.  v0:= v6.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L412438.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L41243e.  v7:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.d` @type ^`io.reactivex.functions.Action` @kind object;
  #L412442.  call `run`(v7) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L412448.  goto L412458;
  #L41244a.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41244c.  call `throwIfFatal`(v7) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L412452.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L412458.  return @kind void;
  catch `java.lang.Throwable` @[L4123f8..L412402] goto L412404;
  catch `java.lang.Throwable` @[L41243e..L412448] goto L41244a;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L412484.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` @kind boolean;
  #L412488.  if v0 == 0 then goto L41248e;
  #L41248c.  return @kind void;
  #L41248e.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.sourceMode` @type ^`int`;
  #L412492.  if v0 == 0 then goto L4124a4;
  #L412496.  v2:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L41249a.  v0:= 0I;
  #L41249c.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4124a2.  return @kind void;
  #L4124a4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.a` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4124a8.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4124ae.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4124b2.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4124b8.  return @kind void;
  #L4124ba.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4124bc.  call `fail`(v1, v2) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4124c2.  return @kind void;
  catch `java.lang.Throwable` @[L4124a4..L4124ae] goto L4124ba;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$b;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4122d4.  v0:= v3.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L4122d8.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4122de.  v0:= temp @kind object;
  #L4122e0.  if v0 == 0 then goto L412308;
  #L4122e4.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.a` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4122e8.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4122ee.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.d` @type ^`io.reactivex.functions.Action` @kind object;
  #L4122f2.  call `run`(v1) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L4122f8.  goto L412326;
  #L4122fa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4122fc.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.d` @type ^`io.reactivex.functions.Action` @kind object;
  #L412300.  call `run`(v1) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L412306.  throw v0;
  #L412308.  v1:= v3.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.sourceMode` @type ^`int`;
  #L41230c.  v2:= 1I;
  #L41230e.  if v1 != v2 then goto L412326;
  #L412312.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.c` @type ^`io.reactivex.functions.Action` @kind object;
  #L412316.  call `run`(v1) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L41231c.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.d` @type ^`io.reactivex.functions.Action` @kind object;
  #L412320.  call `run`(v1) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L412326.  return v0 @kind object;
  catch `java.lang.Throwable` @[L4122e4..L4122ee] goto L4122fa;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$b;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L4122b8.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L4122be.  v1:= temp;
  #L4122c0.  return v1;
}
