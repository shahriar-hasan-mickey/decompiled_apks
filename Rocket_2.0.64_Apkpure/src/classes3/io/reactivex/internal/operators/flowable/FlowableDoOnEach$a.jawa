record `io.reactivex.internal.operators.flowable.FlowableDoOnEach$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` @kind class {
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.b` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.c` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `io.reactivex.functions.Action` v4 @kind object, `io.reactivex.functions.Action` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$a;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41211c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;)V` @kind direct;
  #L412122.  v0.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.a` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L412126.  v0.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.b` @type ^`io.reactivex.functions.Consumer` := v3 @kind object;
  #L41212a.  v0.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.c` @type ^`io.reactivex.functions.Action` := v4 @kind object;
  #L41212e.  v0.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.d` @type ^`io.reactivex.functions.Action` := v5 @kind object;
  #L412132.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L412144.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L412148.  if v0 == 0 then goto L41214e;
  #L41214c.  return @kind void;
  #L41214e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.c` @type ^`io.reactivex.functions.Action` @kind object;
  #L412152.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L412158.  v0:= 1I;
  #L41215a.  v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L41215e.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.actual` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L412162.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L412168.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.d` @type ^`io.reactivex.functions.Action` @kind object;
  #L41216c.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L412172.  goto L412182;
  #L412174.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L412176.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41217c.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L412182.  return @kind void;
  #L412184.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L412186.  call `fail`(v1, v0) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41218c.  return @kind void;
  catch `java.lang.Throwable` @[L41214e..L412158] goto L412184;
  catch `java.lang.Throwable` @[L412168..L412172] goto L412174;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4121b8.  v0:= v6.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L4121bc.  if v0 == 0 then goto L4121c8;
  #L4121c0.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4121c6.  return @kind void;
  #L4121c8.  v0:= 1I;
  #L4121ca.  v6.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4121ce.  v1:= 0I;
  #L4121d0.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4121d4.  call `accept`(v2, v7) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4121da.  goto L412208;
  #L4121dc.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4121de.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4121e4.  v3:= v6.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.actual` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4121e8.  v4:= new `io.reactivex.exceptions.CompositeException`;
  #L4121ec.  v5:= 2I;
  #L4121ee.  v5:= new `java.lang.Throwable`[v5];
  #L4121f2.  v5[v1]:= v7 @kind object;
  #L4121f6.  v5[v0]:= v2 @kind object;
  #L4121fa.  call `<init>`(v4, v5) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L412200.  call `onError`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L412206.  v0:= 0I;
  #L412208.  if v0 == 0 then goto L412216;
  #L41220c.  v0:= v6.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.actual` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L412210.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L412216.  v7:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.d` @type ^`io.reactivex.functions.Action` @kind object;
  #L41221a.  call `run`(v7) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L412220.  goto L412230;
  #L412222.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L412224.  call `throwIfFatal`(v7) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41222a.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L412230.  return @kind void;
  catch `java.lang.Throwable` @[L4121d0..L4121da] goto L4121dc;
  catch `java.lang.Throwable` @[L412216..L412220] goto L412222;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41225c.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L412260.  if v0 == 0 then goto L412266;
  #L412264.  return @kind void;
  #L412266.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L41226a.  if v0 == 0 then goto L41227c;
  #L41226e.  v2:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.actual` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L412272.  v0:= 0I;
  #L412274.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L41227a.  return @kind void;
  #L41227c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.a` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L412280.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L412286.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.actual` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L41228a.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L412290.  return @kind void;
  #L412292.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L412294.  call `fail`(v1, v2) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L41229a.  return @kind void;
  catch `java.lang.Throwable` @[L41227c..L412286] goto L412292;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4120ac.  v0:= v3.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L4120b0.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4120b6.  v0:= temp @kind object;
  #L4120b8.  if v0 == 0 then goto L4120e0;
  #L4120bc.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.a` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4120c0.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4120c6.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.d` @type ^`io.reactivex.functions.Action` @kind object;
  #L4120ca.  call `run`(v1) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L4120d0.  goto L4120fe;
  #L4120d2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4120d4.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.d` @type ^`io.reactivex.functions.Action` @kind object;
  #L4120d8.  call `run`(v1) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L4120de.  throw v0;
  #L4120e0.  v1:= v3.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L4120e4.  v2:= 1I;
  #L4120e6.  if v1 != v2 then goto L4120fe;
  #L4120ea.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.c` @type ^`io.reactivex.functions.Action` @kind object;
  #L4120ee.  call `run`(v1) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L4120f4.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.d` @type ^`io.reactivex.functions.Action` @kind object;
  #L4120f8.  call `run`(v1) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L4120fe.  return v0 @kind object;
  catch `java.lang.Throwable` @[L4120bc..L4120c6] goto L4120d2;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L412090.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L412096.  v1:= temp;
  #L412098.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$a;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L412044.  v0:= v2.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L412048.  v1:= 0I;
  #L41204a.  if v0 == 0 then goto L412050;
  #L41204e.  return v1;
  #L412050.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.a` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L412054.  call `accept`(v0, v3) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L41205a.  v0:= v2.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.actual` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L41205e.  call temp:= `tryOnNext`(v0, v3) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L412064.  v3:= temp;
  #L412066.  return v3;
  #L412068.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41206a.  call `fail`(v2, v3) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L412070.  return v1;
  catch `java.lang.Throwable` @[L412050..L41205a] goto L412068;
}
