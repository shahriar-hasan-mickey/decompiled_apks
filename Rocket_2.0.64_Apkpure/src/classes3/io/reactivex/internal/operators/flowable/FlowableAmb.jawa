record `io.reactivex.internal.operators.flowable.FlowableAmb` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Flowable` @kind class {
  `org.reactivestreams.Publisher`[] `io.reactivex.internal.operators.flowable.FlowableAmb.b` @AccessFlag FINAL;
  `java.lang.Iterable` `io.reactivex.internal.operators.flowable.FlowableAmb.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableAmb` v0 @kind this, `org.reactivestreams.Publisher`[] v1 @kind object, `java.lang.Iterable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb;.<init>:([Lorg/reactivestreams/Publisher;Ljava/lang/Iterable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L40a5b0.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L40a5b6.  v0.`io.reactivex.internal.operators.flowable.FlowableAmb.b` @type ^`org.reactivestreams.Publisher`[] := v1 @kind object;
  #L40a5ba.  v0.`io.reactivex.internal.operators.flowable.FlowableAmb.c` @type ^`java.lang.Iterable` := v2 @kind object;
  #L40a5be.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableAmb` v6 @kind this, `org.reactivestreams.Subscriber` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L40a5d0.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableAmb.b` @type ^`org.reactivestreams.Publisher`[] @kind object;
  #L40a5d4.  v1:= 0I;
  #L40a5d6.  if v0 != 0 then goto L40a656;
  #L40a5da.  v0:= 8I;
  #L40a5de.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L40a5e2.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableAmb.c` @type ^`java.lang.Iterable` @kind object;
  #L40a5e6.  call temp:= `iterator`(v2) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L40a5ec.  v2:= temp @kind object;
  #L40a5ee.  v3:= 0I;
  #L40a5f0.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40a5f6.  v4:= temp;
  #L40a5f8.  if v4 == 0 then goto L40a658;
  #L40a5fc.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40a602.  v4:= temp @kind object;
  #L40a604.  v4:= (`org.reactivestreams.Publisher`) v4 @kind object;
  #L40a608.  if v4 != 0 then goto L40a622;
  #L40a60c.  v0:= new `java.lang.NullPointerException`;
  #L40a610.  v1:= "One of the sources is null" @kind object;
  #L40a614.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40a61a.  call `error`(v0, v7) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L40a620.  return @kind void;
  #L40a622.  v5:= length @variable v0;
  #L40a624.  if v3 != v5 then goto L40a63a;
  #L40a628.  v5:= v3 ^> 2;
  #L40a62c.  v5:= v5 + v3 @kind int;
  #L40a62e.  v5:= new `org.reactivestreams.Publisher`[v5];
  #L40a632.  call `arraycopy`(v0, v1, v5, v1, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L40a638.  v0:= v5 @kind object;
  #L40a63a.  v5:= v3 + 1;
  #L40a63e.  v0[v3]:= v4 @kind object;
  #L40a642.  v3:= v5;
  #L40a644.  goto L40a5f0;
  #L40a646.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L40a648.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L40a64e.  call `error`(v0, v7) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L40a654.  return @kind void;
  #L40a656.  v3:= length @variable v0;
  #L40a658.  if v3 != 0 then goto L40a664;
  #L40a65c.  call `complete`(v7) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.complete:(Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L40a662.  return @kind void;
  #L40a664.  v2:= 1I;
  #L40a666.  if v3 != v2 then goto L40a676;
  #L40a66a.  v0:= v0[v1] @kind object;
  #L40a66e.  call `subscribe`(v0, v7) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L40a674.  return @kind void;
  #L40a676.  v1:= new `io.reactivex.internal.operators.flowable.FlowableAmb$a`;
  #L40a67a.  call `<init>`(v1, v7, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$a;.<init>:(Lorg/reactivestreams/Subscriber;I)V` @kind direct;
  #L40a680.  call `a`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$a;.a:([Lorg/reactivestreams/Publisher;)V` @kind virtual;
  #L40a686.  return @kind void;
  catch `java.lang.Throwable` @[L40a5e2..L40a642] goto L40a646;
}
