record `io.reactivex.internal.operators.flowable.FlowableDoFinally$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface {
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.flowable.FlowableDoFinally$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.flowable.FlowableDoFinally$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableDoFinally$a.c` @AccessFlag ;
  `io.reactivex.internal.fuseable.QueueSubscription` `io.reactivex.internal.operators.flowable.FlowableDoFinally$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableDoFinally$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableDoFinally$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$a` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Action` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$a;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Action;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L411c78.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L411c7e.  v0.`io.reactivex.internal.operators.flowable.FlowableDoFinally$a.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L411c82.  v0.`io.reactivex.internal.operators.flowable.FlowableDoFinally$a.b` @type ^`io.reactivex.functions.Action` := v2 @kind object;
  #L411c86.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411c98.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L411c9c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L411ca2.  call `e`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$a;.e:()V` @kind virtual;
  #L411ca8.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411cbc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$a.d` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L411cc0.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L411cc6.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$a;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L411d98.  v0:= 0I;
  #L411d9a.  v1:= 1I;
  #L411d9c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L411da2.  v0:= temp;
  #L411da4.  if v0 == 0 then goto L411dc2;
  #L411da8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDoFinally$a.b` @type ^`io.reactivex.functions.Action` @kind object;
  #L411dac.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L411db2.  goto L411dc2;
  #L411db4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L411db6.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L411dbc.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L411dc2.  return @kind void;
  catch `java.lang.Throwable` @[L411da8..L411db2] goto L411db4;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411bc8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$a.d` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L411bcc.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L411bd2.  v0:= temp;
  #L411bd4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411cd8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$a.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L411cdc.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L411ce2.  call `e`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$a;.e:()V` @kind virtual;
  #L411ce8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411cfc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$a.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L411d00.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L411d06.  call `e`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$a;.e:()V` @kind virtual;
  #L411d0c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411d20.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$a.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L411d24.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L411d2a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411d3c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L411d40.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L411d46.  v0:= temp;
  #L411d48.  if v0 == 0 then goto L411d6a;
  #L411d4c.  v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L411d50.  v0:= instanceof @variable v2 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L411d54.  if v0 == 0 then goto L411d60;
  #L411d58.  v2:= (`io.reactivex.internal.fuseable.QueueSubscription`) v2 @kind object;
  #L411d5c.  v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$a.d` @type ^`io.reactivex.internal.fuseable.QueueSubscription` := v2 @kind object;
  #L411d60.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$a.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L411d64.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L411d6a.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L411c48.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDoFinally$a.d` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L411c4c.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L411c52.  v0:= temp @kind object;
  #L411c54.  if v0 != 0 then goto L411c66;
  #L411c58.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableDoFinally$a.e` @type ^`boolean` @kind boolean;
  #L411c5c.  if v1 == 0 then goto L411c66;
  #L411c60.  call `e`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$a;.e:()V` @kind virtual;
  #L411c66.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411d7c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L411d80.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L411d86.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$a` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L411c08.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableDoFinally$a.d` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L411c0c.  v1:= 0I;
  #L411c0e.  if v0 == 0 then goto L411c34;
  #L411c12.  v2:= v4 ^& 4;
  #L411c16.  if v2 != 0 then goto L411c34;
  #L411c1a.  call temp:= `requestFusion`(v0, v4) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L411c20.  v4:= temp;
  #L411c22.  if v4 == 0 then goto L411c32;
  #L411c26.  v0:= 1I;
  #L411c28.  if v4 != v0 then goto L411c2e;
  #L411c2c.  v1:= 1I;
  #L411c2e.  v3.`io.reactivex.internal.operators.flowable.FlowableDoFinally$a.e` @type ^`boolean` := v1 @kind boolean;
  #L411c32.  return v4;
  #L411c34.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$a;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411be8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$a.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L411bec.  call temp:= `tryOnNext`(v0, v2) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L411bf2.  v2:= temp;
  #L411bf4.  return v2;
}
