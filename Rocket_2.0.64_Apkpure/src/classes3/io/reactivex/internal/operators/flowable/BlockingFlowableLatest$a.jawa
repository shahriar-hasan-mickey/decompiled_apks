record `io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a` @kind class @AccessFlag FINAL extends `io.reactivex.subscribers.DisposableSubscriber` @kind class, `java.util.Iterator` @kind interface {
  `java.util.concurrent.Semaphore` `io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.c` @AccessFlag FINAL;
  `io.reactivex.Notification` `io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L40984c.  call `<init>`(v2) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.<init>:()V` @kind direct;
  #L409852.  v0:= new `java.util.concurrent.Semaphore`;
  #L409856.  v1:= 0I;
  #L409858.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/Semaphore;.<init>:(I)V` @kind direct;
  #L40985e.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.b` @type ^`java.util.concurrent.Semaphore` := v0 @kind object;
  #L409862.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L409866.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L40986c.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L409870.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a` v1 @kind this, `io.reactivex.Notification` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$a;.a:(Lio/reactivex/Notification;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4098b0.  v0:= v1.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4098b4.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4098ba.  v2:= temp @kind object;
  #L4098bc.  if v2 != 0 then goto L4098c4;
  #L4098c0.  v2:= 1I;
  #L4098c2.  goto L4098c6;
  #L4098c4.  v2:= 0I;
  #L4098c6.  if v2 == 0 then goto L4098d4;
  #L4098ca.  v2:= v1.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.b` @type ^`java.util.concurrent.Semaphore` @kind object;
  #L4098ce.  call `release`(v2) @signature `Ljava/util/concurrent/Semaphore;.release:()V` @kind virtual;
  #L4098d4.  return @kind void;
}
procedure `boolean` `hasNext`(`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L409724.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.Notification` @kind object;
  #L409728.  if v0 == 0 then goto L409750;
  #L40972c.  call temp:= `isOnError`(v0) @signature `Lio/reactivex/Notification;.isOnError:()Z` @kind virtual;
  #L409732.  v0:= temp;
  #L409734.  if v0 != 0 then goto L40973a;
  #L409738.  goto L409750;
  #L40973a.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.Notification` @kind object;
  #L40973e.  call temp:= `getError`(v0) @signature `Lio/reactivex/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L409744.  v0:= temp @kind object;
  #L409746.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L40974c.  v0:= temp @kind object;
  #L40974e.  throw v0;
  #L409750.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.Notification` @kind object;
  #L409754.  if v0 == 0 then goto L409764;
  #L409758.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/Notification;.isOnNext:()Z` @kind virtual;
  #L40975e.  v0:= temp;
  #L409760.  if v0 == 0 then goto L4097d0;
  #L409764.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.Notification` @kind object;
  #L409768.  if v0 != 0 then goto L4097d0;
  #L40976c.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L409772.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.b` @type ^`java.util.concurrent.Semaphore` @kind object;
  #L409776.  call `acquire`(v0) @signature `Ljava/util/concurrent/Semaphore;.acquire:()V` @kind virtual;
  #L40977c.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L409780.  v1:= 0I;
  #L409782.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L409788.  v0:= temp @kind object;
  #L40978a.  v0:= (`io.reactivex.Notification`) v0 @kind object;
  #L40978e.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.Notification` := v0 @kind object;
  #L409792.  call temp:= `isOnError`(v0) @signature `Lio/reactivex/Notification;.isOnError:()Z` @kind virtual;
  #L409798.  v1:= temp;
  #L40979a.  if v1 != 0 then goto L4097a0;
  #L40979e.  goto L4097d0;
  #L4097a0.  call temp:= `getError`(v0) @signature `Lio/reactivex/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L4097a6.  v0:= temp @kind object;
  #L4097a8.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4097ae.  v0:= temp @kind object;
  #L4097b0.  throw v0;
  #L4097b2.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L4097b4.  call `dispose`(v2) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.dispose:()V` @kind virtual;
  #L4097ba.  call temp:= `createOnError`(v0) @signature `Lio/reactivex/Notification;.createOnError:(Ljava/lang/Throwable;)Lio/reactivex/Notification;` @kind static;
  #L4097c0.  v1:= temp @kind object;
  #L4097c2.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.Notification` := v1 @kind object;
  #L4097c6.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4097cc.  v0:= temp @kind object;
  #L4097ce.  throw v0;
  #L4097d0.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.Notification` @kind object;
  #L4097d4.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/Notification;.isOnNext:()Z` @kind virtual;
  #L4097da.  v0:= temp;
  #L4097dc.  return v0;
  catch `java.lang.InterruptedException` @[L40976c..L40977c] goto L4097b2;
}
procedure `java.lang.Object` `next`(`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L409800.  call temp:= `hasNext`(v2) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$a;.hasNext:()Z` @kind virtual;
  #L409806.  v0:= temp;
  #L409808.  if v0 == 0 then goto L409830;
  #L40980c.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.Notification` @kind object;
  #L409810.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/Notification;.isOnNext:()Z` @kind virtual;
  #L409816.  v0:= temp;
  #L409818.  if v0 == 0 then goto L409830;
  #L40981c.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.Notification` @kind object;
  #L409820.  call temp:= `getValue`(v0) @signature `Lio/reactivex/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L409826.  v0:= temp @kind object;
  #L409828.  v1:= 0I;
  #L40982a.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.Notification` := v1 @kind object;
  #L40982e.  return v0 @kind object;
  #L409830.  v0:= new `java.util.NoSuchElementException`;
  #L409834.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L40983a.  throw v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L409884.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L409898.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L40989e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4098e8.  v1:= (`io.reactivex.Notification`) v1 @kind object;
  #L4098ec.  call `a`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$a;.a:(Lio/reactivex/Notification;)V` @kind virtual;
  #L4098f2.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L409904.  v0:= new `java.lang.UnsupportedOperationException`;
  #L409908.  v1:= "Read-only iterator." @kind object;
  #L40990c.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L409912.  throw v0;
}
