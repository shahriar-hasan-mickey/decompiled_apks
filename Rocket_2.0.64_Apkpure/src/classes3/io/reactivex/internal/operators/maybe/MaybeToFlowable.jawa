record `io.reactivex.internal.operators.maybe.MaybeToFlowable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Flowable` @kind class, `io.reactivex.internal.fuseable.HasUpstreamMaybeSource` @kind interface {
  `io.reactivex.MaybeSource` `io.reactivex.internal.operators.maybe.MaybeToFlowable.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeToFlowable` v0 @kind this, `io.reactivex.MaybeSource` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToFlowable;.<init>:(Lio/reactivex/MaybeSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L430abc.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L430ac2.  v0.`io.reactivex.internal.operators.maybe.MaybeToFlowable.b` @type ^`io.reactivex.MaybeSource` := v1 @kind object;
  #L430ac6.  return @kind void;
}
procedure `io.reactivex.MaybeSource` `source`(`io.reactivex.internal.operators.maybe.MaybeToFlowable` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeToFlowable;.source:()Lio/reactivex/MaybeSource;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430aa4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeToFlowable.b` @type ^`io.reactivex.MaybeSource` @kind object;
  #L430aa8.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeToFlowable` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToFlowable;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L430ad8.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeToFlowable.b` @type ^`io.reactivex.MaybeSource` @kind object;
  #L430adc.  v1:= new `io.reactivex.internal.operators.maybe.MaybeToFlowable$a`;
  #L430ae0.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeToFlowable$a;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L430ae6.  call `subscribe`(v0, v1) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L430aec.  return @kind void;
}
