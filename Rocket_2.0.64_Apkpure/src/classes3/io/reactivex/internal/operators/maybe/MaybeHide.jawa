record `io.reactivex.internal.operators.maybe.MaybeHide` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.maybe.a` @kind class {
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeHide` v0 @kind this, `io.reactivex.MaybeSource` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeHide;.<init>:(Lio/reactivex/MaybeSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42e09c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/a;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L42e0a2.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeHide` v2 @kind this, `io.reactivex.MaybeObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeHide;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L42e0b4.  v0:= v2.`io.reactivex.internal.operators.maybe.a.source` @type ^`io.reactivex.MaybeSource` @kind object;
  #L42e0b8.  v1:= new `io.reactivex.internal.operators.maybe.MaybeHide$a`;
  #L42e0bc.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeHide$a;.<init>:(Lio/reactivex/MaybeObserver;)V` @kind direct;
  #L42e0c2.  call `subscribe`(v0, v1) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L42e0c8.  return @kind void;
}
