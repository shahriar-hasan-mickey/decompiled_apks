record `io.reactivex.internal.operators.maybe.MaybeFromAction` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class, `java.util.concurrent.Callable` @kind interface {
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.maybe.MaybeFromAction.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFromAction` v0 @kind this, `io.reactivex.functions.Action` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromAction;.<init>:(Lio/reactivex/functions/Action;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42da48.  call `<init>`(v0) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L42da4e.  v0.`io.reactivex.internal.operators.maybe.MaybeFromAction.a` @type ^`io.reactivex.functions.Action` := v1 @kind object;
  #L42da52.  return @kind void;
}
procedure `java.lang.Object` `call`(`io.reactivex.internal.operators.maybe.MaybeFromAction` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromAction;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42da28.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFromAction.a` @type ^`io.reactivex.functions.Action` @kind object;
  #L42da2c.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L42da32.  v0:= 0I;
  #L42da34.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeFromAction` v2 @kind this, `io.reactivex.MaybeObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromAction;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L42da64.  call temp:= `empty`() @signature `Lio/reactivex/disposables/Disposables;.empty:()Lio/reactivex/disposables/Disposable;` @kind static;
  #L42da6a.  v0:= temp @kind object;
  #L42da6c.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42da72.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42da78.  v1:= temp;
  #L42da7a.  if v1 != 0 then goto L42dabe;
  #L42da7e.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeFromAction.a` @type ^`io.reactivex.functions.Action` @kind object;
  #L42da82.  call `run`(v1) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L42da88.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42da8e.  v0:= temp;
  #L42da90.  if v0 != 0 then goto L42dabe;
  #L42da94.  call `onComplete`(v3) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L42da9a.  goto L42dabe;
  #L42da9c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42da9e.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42daa4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42daaa.  v0:= temp;
  #L42daac.  if v0 != 0 then goto L42dab8;
  #L42dab0.  call `onError`(v3, v1) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42dab6.  goto L42dabe;
  #L42dab8.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42dabe.  return @kind void;
  catch `java.lang.Throwable` @[L42da7e..L42da88] goto L42da9c;
}
