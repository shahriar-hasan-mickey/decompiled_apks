record `io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a` `io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a$a.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` v0 @kind this, `io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a$a;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42ff98.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42ff9e.  v0.`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a$a.a` @type ^`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a` := v1 @kind object;
  #L42ffa2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42ffb4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a$a.a` @type ^`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a` @kind object;
  #L42ffb8.  call `a`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a;.a:()V` @kind virtual;
  #L42ffbe.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42ffd0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a$a.a` @type ^`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a` @kind object;
  #L42ffd4.  call `b`(v0, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a;.b:(Ljava/lang/Throwable;)V` @kind virtual;
  #L42ffda.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L42ffec.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a$a.a` @type ^`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a` @kind object;
  #L42fff0.  call `a`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a;.a:()V` @kind virtual;
  #L42fff6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L430008.  call temp:= `setOnce`(v2, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L43000e.  v0:= temp;
  #L430010.  if v0 == 0 then goto L430024;
  #L430014.  v0:= 9223372036854775807L;
  #L43001e.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L430024.  return @kind void;
}
