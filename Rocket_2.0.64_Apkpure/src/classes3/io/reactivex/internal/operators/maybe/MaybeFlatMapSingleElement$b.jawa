record `io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$b` @kind class @AccessFlag FINAL extends `io.reactivex.SingleObserver` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$b.a` @AccessFlag FINAL;
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$b.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$b` v0 @kind this, `java.util.concurrent.atomic.AtomicReference` v1 @kind object, `io.reactivex.MaybeObserver` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42d6f8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42d6fe.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$b.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L42d702.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$b.b` @type ^`io.reactivex.MaybeObserver` := v2 @kind object;
  #L42d706.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d718.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$b.b` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42d71c.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42d722.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$b` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d734.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$b.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42d738.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42d73e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement$b;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d750.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$b.b` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42d754.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L42d75a.  return @kind void;
}
