record `io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.c` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$a;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42f3c0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42f3c6.  v0.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L42f3ca.  v0.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L42f3ce.  v0.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.c` @type ^`boolean` := v3 @kind boolean;
  #L42f3d2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L42f3e4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42f3ea.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f398.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42f39e.  v0:= temp @kind object;
  #L42f3a0.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L42f3a4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42f3aa.  v0:= temp;
  #L42f3ac.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f3fc.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42f400.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L42f406.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42f418.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.c` @type ^`boolean` @kind boolean;
  #L42f41c.  if v0 != 0 then goto L42f434;
  #L42f420.  v0:= instanceof @variable v6 @type ^`java.lang.Exception` @kind boolean;
  #L42f424.  if v0 != 0 then goto L42f434;
  #L42f428.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42f42c.  call `onError`(v0, v6) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42f432.  return @kind void;
  #L42f434.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L42f438.  call temp:= `apply`(v0, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42f43e.  v0:= temp @kind object;
  #L42f440.  v1:= "The resumeFunction returned a null MaybeSource" @kind object;
  #L42f444.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L42f44a.  v0:= temp @kind object;
  #L42f44c.  v0:= (`io.reactivex.MaybeSource`) v0 @kind object;
  #L42f450.  v6:= 0I;
  #L42f452.  call temp:= `replace`(v5, v6) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42f458.  v6:= new `io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a$a`;
  #L42f45c.  v1:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42f460.  call `<init>`(v6, v1, v5) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$a$a;.<init>:(Lio/reactivex/MaybeObserver;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L42f466.  call `subscribe`(v0, v6) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L42f46c.  return @kind void;
  #L42f46e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42f470.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42f476.  v1:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42f47a.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L42f47e.  v3:= 2I;
  #L42f480.  v3:= new `java.lang.Throwable`[v3];
  #L42f484.  v4:= 0I;
  #L42f486.  v3[v4]:= v6 @kind object;
  #L42f48a.  v6:= 1I;
  #L42f48c.  v3[v6]:= v0 @kind object;
  #L42f490.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L42f496.  call `onError`(v1, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42f49c.  return @kind void;
  catch `java.lang.Throwable` @[L42f434..L42f450] goto L42f46e;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L42f4bc.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42f4c2.  v1:= temp;
  #L42f4c4.  if v1 == 0 then goto L42f4d2;
  #L42f4c8.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42f4cc.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42f4d2.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f4e4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42f4e8.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L42f4ee.  return @kind void;
}
