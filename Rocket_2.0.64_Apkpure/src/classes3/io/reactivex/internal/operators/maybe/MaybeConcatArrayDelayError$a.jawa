record `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.MaybeObserver` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.d` @AccessFlag FINAL;
  `io.reactivex.MaybeSource`[] `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.e` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.f` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.g` @AccessFlag ;
  `long` `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.h` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.MaybeSource`[] v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$a;.<init>:(Lorg/reactivestreams/Subscriber;[Lio/reactivex/MaybeSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42a6a8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L42a6ae.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L42a6b2.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.e` @type ^`io.reactivex.MaybeSource`[] := v2 @kind object;
  #L42a6b6.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L42a6ba.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L42a6c0.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L42a6c4.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L42a6c8.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L42a6ce.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.d` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L42a6d2.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L42a6d6.  v2:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L42a6da.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L42a6e0.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L42a6e4.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L42a6e8.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L42a6ee.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L42a6f2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a` v11 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L42a720.  call temp:= `getAndIncrement`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L42a726.  v0:= temp;
  #L42a728.  if v0 == 0 then goto L42a72e;
  #L42a72c.  return @kind void;
  #L42a72e.  v0:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a732.  v1:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L42a736.  v2:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.d` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L42a73a.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42a740.  v3:= temp;
  #L42a742.  v4:= 0I;
  #L42a744.  if v3 == 0 then goto L42a750;
  #L42a748.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L42a74e.  return @kind void;
  #L42a750.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42a756.  v3:= temp @kind object;
  #L42a758.  if v3 == 0 then goto L42a802;
  #L42a75c.  v5:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L42a760.  v6:= 1I;
  #L42a762.  if v3 == v5 then goto L42a79c;
  #L42a766.  v7:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.h` @type ^`long` @kind wide;
  #L42a76a.  v5:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L42a76e.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L42a774.  v9:= temp @kind wide;
  #L42a776.  v5:= lcmp(v7, v9);
  #L42a77a.  if v5 == 0 then goto L42a796;
  #L42a77e.  v9:= 1L;
  #L42a782.  v7:= v7 + v9 @kind long;
  #L42a784.  v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.h` @type ^`long` := v7 @kind wide;
  #L42a788.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L42a78e.  call `onNext`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42a794.  goto L42a7a2;
  #L42a796.  v3:= 0I;
  #L42a798.  v6:= 0I;
  #L42a79a.  goto L42a7a2;
  #L42a79c.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L42a7a2.  if v6 == 0 then goto L42a802;
  #L42a7a6.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42a7ac.  v3:= temp;
  #L42a7ae.  if v3 != 0 then goto L42a802;
  #L42a7b2.  v3:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.g` @type ^`int`;
  #L42a7b6.  v4:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.e` @type ^`io.reactivex.MaybeSource`[] @kind object;
  #L42a7ba.  v5:= length @variable v4;
  #L42a7bc.  if v3 != v5 then goto L42a7f0;
  #L42a7c0.  v0:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42a7c4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42a7ca.  v0:= temp @kind object;
  #L42a7cc.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L42a7d0.  if v0 == 0 then goto L42a7e8;
  #L42a7d4.  v0:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42a7d8.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L42a7de.  v0:= temp @kind object;
  #L42a7e0.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42a7e6.  goto L42a7ee;
  #L42a7e8.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L42a7ee.  return @kind void;
  #L42a7f0.  v5:= v3 + 1;
  #L42a7f4.  v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.g` @type ^`int` := v5;
  #L42a7f8.  v3:= v4[v3] @kind object;
  #L42a7fc.  call `subscribe`(v3, v11) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L42a802.  call temp:= `decrementAndGet`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L42a808.  v3:= temp;
  #L42a80a.  if v3 != 0 then goto L42a73a;
  #L42a80e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a704.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.d` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L42a708.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L42a70e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42a820.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a824.  v1:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L42a828.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L42a82e.  call `a`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$a;.a:()V` @kind virtual;
  #L42a834.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42a848.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a84c.  v1:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L42a850.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L42a856.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42a85a.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L42a860.  v0:= temp;
  #L42a862.  if v0 == 0 then goto L42a86e;
  #L42a866.  call `a`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$a;.a:()V` @kind virtual;
  #L42a86c.  goto L42a874;
  #L42a86e.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42a874.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a888.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.d` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L42a88c.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L42a892.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a8a4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a8a8.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L42a8ae.  call `a`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$a;.a:()V` @kind virtual;
  #L42a8b4.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a8c8.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L42a8ce.  v0:= temp;
  #L42a8d0.  if v0 == 0 then goto L42a8e4;
  #L42a8d4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L42a8d8.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L42a8de.  call `a`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$a;.a:()V` @kind virtual;
  #L42a8e4.  return @kind void;
}
