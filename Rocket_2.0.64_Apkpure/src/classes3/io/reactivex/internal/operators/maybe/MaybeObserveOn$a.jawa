record `io.reactivex.internal.operators.maybe.MaybeObserveOn$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeObserveOn$a.a` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.maybe.MaybeObserveOn$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.maybe.MaybeObserveOn$a.c` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.internal.operators.maybe.MaybeObserveOn$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeObserveOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$a;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42f01c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42f022.  v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L42f026.  v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.b` @type ^`io.reactivex.Scheduler` := v2 @kind object;
  #L42f02a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L42f03c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42f042.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42eff4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42effa.  v0:= temp @kind object;
  #L42effc.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L42f000.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42f006.  v0:= temp;
  #L42f008.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f054.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.b` @type ^`io.reactivex.Scheduler` @kind object;
  #L42f058.  call temp:= `scheduleDirect`(v0, v1) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L42f05e.  v0:= temp @kind object;
  #L42f060.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42f066.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L42f078.  v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.d` @type ^`java.lang.Throwable` := v1 @kind object;
  #L42f07c.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.b` @type ^`io.reactivex.Scheduler` @kind object;
  #L42f080.  call temp:= `scheduleDirect`(v1, v0) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L42f086.  v1:= temp @kind object;
  #L42f088.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42f08e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L42f0a0.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42f0a6.  v1:= temp;
  #L42f0a8.  if v1 == 0 then goto L42f0b6;
  #L42f0ac.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42f0b0.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42f0b6.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L42f0c8.  v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L42f0cc.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.b` @type ^`io.reactivex.Scheduler` @kind object;
  #L42f0d0.  call temp:= `scheduleDirect`(v1, v0) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L42f0d6.  v1:= temp @kind object;
  #L42f0d8.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42f0de.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42f0f0.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.d` @type ^`java.lang.Throwable` @kind object;
  #L42f0f4.  v1:= 0I;
  #L42f0f6.  if v0 == 0 then goto L42f10a;
  #L42f0fa.  v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.d` @type ^`java.lang.Throwable` := v1 @kind object;
  #L42f0fe.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42f102.  call `onError`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42f108.  goto L42f12c;
  #L42f10a.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.c` @type ^`java.lang.Object` @kind object;
  #L42f10e.  if v0 == 0 then goto L42f122;
  #L42f112.  v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L42f116.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42f11a.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L42f120.  goto L42f12c;
  #L42f122.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42f126.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L42f12c.  return @kind void;
}
