record `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a.b` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a.c` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a.d` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$a;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42d210.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42d216.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L42d21a.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L42d21e.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a.c` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L42d222.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a.d` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L42d226.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d238.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42d23e.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42d242.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42d248.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d1e8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42d1ee.  v0:= temp @kind object;
  #L42d1f0.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L42d1f4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42d1fa.  v0:= temp;
  #L42d1fc.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42d25c.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a.d` @type ^`java.util.concurrent.Callable` @kind object;
  #L42d260.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L42d266.  v0:= temp @kind object;
  #L42d268.  v1:= "The onCompleteSupplier returned a null MaybeSource" @kind object;
  #L42d26c.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L42d272.  v0:= temp @kind object;
  #L42d274.  v0:= (`io.reactivex.MaybeSource`) v0 @kind object;
  #L42d278.  v1:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a$a`;
  #L42d27c.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$a$a;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$a;)V` @kind direct;
  #L42d282.  call `subscribe`(v0, v1) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L42d288.  return @kind void;
  #L42d28a.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L42d28c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42d292.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42d296.  call `onError`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42d29c.  return @kind void;
  catch `java.lang.Exception` @[L42d25c..L42d278] goto L42d28a;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42d2c0.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a.c` @type ^`io.reactivex.functions.Function` @kind object;
  #L42d2c4.  call temp:= `apply`(v0, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42d2ca.  v0:= temp @kind object;
  #L42d2cc.  v1:= "The onErrorMapper returned a null MaybeSource" @kind object;
  #L42d2d0.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L42d2d6.  v0:= temp @kind object;
  #L42d2d8.  v0:= (`io.reactivex.MaybeSource`) v0 @kind object;
  #L42d2dc.  v6:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a$a`;
  #L42d2e0.  call `<init>`(v6, v5) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$a$a;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$a;)V` @kind direct;
  #L42d2e6.  call `subscribe`(v0, v6) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L42d2ec.  return @kind void;
  #L42d2ee.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L42d2f0.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42d2f6.  v1:= v5.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42d2fa.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L42d2fe.  v3:= 2I;
  #L42d300.  v3:= new `java.lang.Throwable`[v3];
  #L42d304.  v4:= 0I;
  #L42d306.  v3[v4]:= v6 @kind object;
  #L42d30a.  v6:= 1I;
  #L42d30c.  v3[v6]:= v0 @kind object;
  #L42d310.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L42d316.  call `onError`(v1, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42d31c.  return @kind void;
  catch `java.lang.Exception` @[L42d2c0..L42d2dc] goto L42d2ee;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d340.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42d344.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42d34a.  v0:= temp;
  #L42d34c.  if v0 == 0 then goto L42d35e;
  #L42d350.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a.e` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L42d354.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42d358.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42d35e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d370.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L42d374.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42d37a.  v2:= temp @kind object;
  #L42d37c.  v0:= "The onSuccessMapper returned a null MaybeSource" @kind object;
  #L42d380.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L42d386.  v2:= temp @kind object;
  #L42d388.  v2:= (`io.reactivex.MaybeSource`) v2 @kind object;
  #L42d38c.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a$a`;
  #L42d390.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$a$a;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$a;)V` @kind direct;
  #L42d396.  call `subscribe`(v2, v0) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L42d39c.  return @kind void;
  #L42d39e.  v2:= Exception @type ^`java.lang.Exception` @kind object;
  #L42d3a0.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42d3a6.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42d3aa.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42d3b0.  return @kind void;
  catch `java.lang.Exception` @[L42d370..L42d38c] goto L42d39e;
}
