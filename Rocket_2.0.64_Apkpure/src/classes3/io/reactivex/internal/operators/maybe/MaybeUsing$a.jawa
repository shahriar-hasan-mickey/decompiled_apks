record `io.reactivex.internal.operators.maybe.MaybeUsing$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeUsing$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.maybe.MaybeUsing$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.maybe.MaybeUsing$a.c` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeUsing$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeUsing$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeUsing$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$a;.<init>:(Lio/reactivex/MaybeObserver;Ljava/lang/Object;Lio/reactivex/functions/Consumer;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L431030.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L431036.  v0.`io.reactivex.internal.operators.maybe.MaybeUsing$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L43103a.  v0.`io.reactivex.internal.operators.maybe.MaybeUsing$a.b` @type ^`io.reactivex.functions.Consumer` := v3 @kind object;
  #L43103e.  v0.`io.reactivex.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` := v4 @kind boolean;
  #L431042.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.maybe.MaybeUsing$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L431080.  call temp:= `getAndSet`(v2, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L431086.  v0:= temp @kind object;
  #L431088.  if v0 == v2 then goto L4310a6;
  #L43108c.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$a.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L431090.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L431096.  goto L4310a6;
  #L431098.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43109a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4310a0.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4310a6.  return @kind void;
  catch `java.lang.Throwable` @[L43108c..L431096] goto L431098;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeUsing$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431054.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L431058.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43105e.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L431062.  v1.`io.reactivex.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L431066.  call `a`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$a;.a:()V` @kind virtual;
  #L43106c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeUsing$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431010.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L431014.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L43101a.  v0:= temp;
  #L43101c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeUsing$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4310c4.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4310c8.  v2.`io.reactivex.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L4310cc.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` @kind boolean;
  #L4310d0.  if v0 == 0 then goto L431100;
  #L4310d4.  call temp:= `getAndSet`(v2, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4310da.  v0:= temp @kind object;
  #L4310dc.  if v0 == v2 then goto L4310fe;
  #L4310e0.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$a.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4310e4.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4310ea.  goto L431100;
  #L4310ec.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4310ee.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4310f4.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4310f8.  call `onError`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4310fe.  return @kind void;
  #L431100.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L431104.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L43110a.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` @kind boolean;
  #L43110e.  if v0 != 0 then goto L431118;
  #L431112.  call `a`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$a;.a:()V` @kind virtual;
  #L431118.  return @kind void;
  catch `java.lang.Throwable` @[L4310e0..L4310ea] goto L4310ec;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeUsing$a` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L431138.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43113c.  v4.`io.reactivex.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L431140.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` @kind boolean;
  #L431144.  if v0 == 0 then goto L43118a;
  #L431148.  call temp:= `getAndSet`(v4, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L43114e.  v0:= temp @kind object;
  #L431150.  if v0 == v4 then goto L431188;
  #L431154.  v1:= v4.`io.reactivex.internal.operators.maybe.MaybeUsing$a.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L431158.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L43115e.  goto L43118a;
  #L431160.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L431162.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L431168.  v1:= new `io.reactivex.exceptions.CompositeException`;
  #L43116c.  v2:= 2I;
  #L43116e.  v2:= new `java.lang.Throwable`[v2];
  #L431172.  v3:= 0I;
  #L431174.  v2[v3]:= v5 @kind object;
  #L431178.  v5:= 1I;
  #L43117a.  v2[v5]:= v0 @kind object;
  #L43117e.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L431184.  v5:= v1 @kind object;
  #L431186.  goto L43118a;
  #L431188.  return @kind void;
  #L43118a.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeUsing$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L43118e.  call `onError`(v0, v5) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L431194.  v5:= v4.`io.reactivex.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` @kind boolean;
  #L431198.  if v5 != 0 then goto L4311a2;
  #L43119c.  call `a`(v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$a;.a:()V` @kind virtual;
  #L4311a2.  return @kind void;
  catch `java.lang.Throwable` @[L431154..L43115e] goto L431160;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeUsing$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4311c0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4311c4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4311ca.  v0:= temp;
  #L4311cc.  if v0 == 0 then goto L4311de;
  #L4311d0.  v1.`io.reactivex.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L4311d4.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeUsing$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4311d8.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4311de.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeUsing$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4311f0.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4311f4.  v2.`io.reactivex.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L4311f8.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` @kind boolean;
  #L4311fc.  if v0 == 0 then goto L43122c;
  #L431200.  call temp:= `getAndSet`(v2, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L431206.  v0:= temp @kind object;
  #L431208.  if v0 == v2 then goto L43122a;
  #L43120c.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$a.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L431210.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L431216.  goto L43122c;
  #L431218.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43121a.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L431220.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L431224.  call `onError`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43122a.  return @kind void;
  #L43122c.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L431230.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L431236.  v3:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` @kind boolean;
  #L43123a.  if v3 != 0 then goto L431244;
  #L43123e.  call `a`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$a;.a:()V` @kind virtual;
  #L431244.  return @kind void;
  catch `java.lang.Throwable` @[L43120c..L431216] goto L431218;
}
