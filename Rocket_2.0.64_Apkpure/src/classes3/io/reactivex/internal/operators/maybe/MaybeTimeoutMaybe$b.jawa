record `io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$c` `io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.b` @AccessFlag FINAL;
  `io.reactivex.MaybeSource` `io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.c` @AccessFlag FINAL;
  `io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$a` `io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b` v1 @kind this, `io.reactivex.MaybeObserver` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe$b;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/MaybeSource;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4302d8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4302de.  v1.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.a` @type ^`io.reactivex.MaybeObserver` := v2 @kind object;
  #L4302e2.  v0:= new `io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$c`;
  #L4302e6.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe$c;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe$b;)V` @kind direct;
  #L4302ec.  v1.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$c` := v0 @kind object;
  #L4302f0.  v1.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.c` @type ^`io.reactivex.MaybeSource` := v3 @kind object;
  #L4302f4.  if v3 == 0 then goto L430304;
  #L4302f8.  v3:= new `io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$a`;
  #L4302fc.  call `<init>`(v3, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe$a;.<init>:(Lio/reactivex/MaybeObserver;)V` @kind direct;
  #L430302.  goto L430306;
  #L430304.  v3:= 0I;
  #L430306.  v1.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$a` := v3 @kind object;
  #L43030a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe$b;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L430414.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43041a.  v0:= temp;
  #L43041c.  if v0 == 0 then goto L430448;
  #L430420.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.c` @type ^`io.reactivex.MaybeSource` @kind object;
  #L430424.  if v0 != 0 then goto L43043e;
  #L430428.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L43042c.  v1:= new `java.util.concurrent.TimeoutException`;
  #L430430.  call `<init>`(v1) @signature `Ljava/util/concurrent/TimeoutException;.<init>:()V` @kind direct;
  #L430436.  call `onError`(v0, v1) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43043c.  goto L430448;
  #L43043e.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$a` @kind object;
  #L430442.  call `subscribe`(v0, v1) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L430448.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe$b;.b:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43045c.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L430462.  v0:= temp;
  #L430464.  if v0 == 0 then goto L430474;
  #L430468.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L43046c.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L430472.  goto L43047a;
  #L430474.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43047a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43031c.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L430322.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$c` @kind object;
  #L430326.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43032c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$a` @kind object;
  #L430330.  if v0 == 0 then goto L43033a;
  #L430334.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43033a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4302b0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4302b6.  v0:= temp @kind object;
  #L4302b8.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L4302bc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4302c2.  v0:= temp;
  #L4302c4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43034c.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$c` @kind object;
  #L430350.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L430356.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43035a.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L430360.  v1:= temp @kind object;
  #L430362.  if v1 == v0 then goto L430370;
  #L430366.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L43036a.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L430370.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L430384.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$c` @kind object;
  #L430388.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43038e.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L430392.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L430398.  v1:= temp @kind object;
  #L43039a.  if v1 == v0 then goto L4303aa;
  #L43039e.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4303a2.  call `onError`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4303a8.  goto L4303b0;
  #L4303aa.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4303b0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4303c4.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4303ca.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe$b;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4303dc.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$c` @kind object;
  #L4303e0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4303e6.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4303ea.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4303f0.  v1:= temp @kind object;
  #L4303f2.  if v1 == v0 then goto L430400;
  #L4303f6.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4303fa.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L430400.  return @kind void;
}
