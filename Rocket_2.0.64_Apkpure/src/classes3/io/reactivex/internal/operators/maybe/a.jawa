record `io.reactivex.internal.operators.maybe.a` @kind class @AccessFlag ABSTRACT extends `io.reactivex.Maybe` @kind class, `io.reactivex.internal.fuseable.HasUpstreamMaybeSource` @kind interface {
  `io.reactivex.MaybeSource` `io.reactivex.internal.operators.maybe.a.source` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.a` v0 @kind this, `io.reactivex.MaybeSource` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/a;.<init>:(Lio/reactivex/MaybeSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L429d90.  call `<init>`(v0) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L429d96.  v0.`io.reactivex.internal.operators.maybe.a.source` @type ^`io.reactivex.MaybeSource` := v1 @kind object;
  #L429d9a.  return @kind void;
}
procedure `io.reactivex.MaybeSource` `source`(`io.reactivex.internal.operators.maybe.a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/a;.source:()Lio/reactivex/MaybeSource;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L429d78.  v0:= v1.`io.reactivex.internal.operators.maybe.a.source` @type ^`io.reactivex.MaybeSource` @kind object;
  #L429d7c.  return v0 @kind object;
}
