record `io.reactivex.internal.operators.maybe.MaybeFlatten$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeFlatten$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeFlatten$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeFlatten$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeFlatten$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFlatten$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatten$a;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42d8c4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42d8ca.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatten$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L42d8ce.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatten$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L42d8d2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeFlatten$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatten$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d8e4.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42d8ea.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatten$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42d8ee.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42d8f4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeFlatten$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatten$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d89c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42d8a2.  v0:= temp @kind object;
  #L42d8a4.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L42d8a8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42d8ae.  v0:= temp;
  #L42d8b0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeFlatten$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatten$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d908.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatten$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42d90c.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L42d912.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeFlatten$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatten$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d924.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatten$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42d928.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42d92e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeFlatten$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatten$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d940.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatten$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42d944.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42d94a.  v0:= temp;
  #L42d94c.  if v0 == 0 then goto L42d95e;
  #L42d950.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatten$a.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L42d954.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatten$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42d958.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42d95e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeFlatten$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatten$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d970.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatten$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L42d974.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42d97a.  v2:= temp @kind object;
  #L42d97c.  v0:= "The mapper returned a null MaybeSource" @kind object;
  #L42d980.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L42d986.  v2:= temp @kind object;
  #L42d988.  v2:= (`io.reactivex.MaybeSource`) v2 @kind object;
  #L42d98c.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatten$a;.isDisposed:()Z` @kind virtual;
  #L42d992.  v0:= temp;
  #L42d994.  if v0 != 0 then goto L42d9a8;
  #L42d998.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatten$a$a`;
  #L42d99c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatten$a$a;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeFlatten$a;)V` @kind direct;
  #L42d9a2.  call `subscribe`(v2, v0) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L42d9a8.  return @kind void;
  #L42d9aa.  v2:= Exception @type ^`java.lang.Exception` @kind object;
  #L42d9ac.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42d9b2.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatten$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42d9b6.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42d9bc.  return @kind void;
  catch `java.lang.Exception` @[L42d970..L42d98c] goto L42d9aa;
}
