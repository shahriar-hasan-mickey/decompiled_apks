record `io.reactivex.internal.operators.maybe.MaybeEqualSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.maybe.MaybeEqualSingle$b` `io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.maybe.MaybeEqualSingle$b` `io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.c` @AccessFlag FINAL;
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a` v1 @kind this, `io.reactivex.SingleObserver` v2 @kind object, `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$a;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L42c0f0.  v0:= 2I;
  #L42c0f2.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L42c0f8.  v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` := v2 @kind object;
  #L42c0fc.  v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.d` @type ^`io.reactivex.functions.BiPredicate` := v3 @kind object;
  #L42c100.  v2:= new `io.reactivex.internal.operators.maybe.MaybeEqualSingle$b`;
  #L42c104.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$b;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$a;)V` @kind direct;
  #L42c10a.  v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$b` := v2 @kind object;
  #L42c10e.  v2:= new `io.reactivex.internal.operators.maybe.MaybeEqualSingle$b`;
  #L42c112.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$b;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$a;)V` @kind direct;
  #L42c118.  v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.c` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$b` := v2 @kind object;
  #L42c11c.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L42c158.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L42c15e.  v0:= temp;
  #L42c160.  if v0 != 0 then goto L42c1d0;
  #L42c164.  v0:= v3.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L42c168.  v0:= v0.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$b.b` @type ^`java.lang.Object` @kind object;
  #L42c16c.  v1:= v3.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.c` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L42c170.  v1:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$b.b` @type ^`java.lang.Object` @kind object;
  #L42c174.  if v0 == 0 then goto L42c1b0;
  #L42c178.  if v1 == 0 then goto L42c1b0;
  #L42c17c.  v2:= v3.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.d` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L42c180.  call temp:= `test`(v2, v0, v1) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L42c186.  v0:= temp;
  #L42c188.  v1:= v3.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42c18c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L42c192.  v0:= temp @kind object;
  #L42c194.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L42c19a.  goto L42c1d0;
  #L42c19c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42c19e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42c1a4.  v1:= v3.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42c1a8.  call `onError`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42c1ae.  return @kind void;
  #L42c1b0.  v2:= v3.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42c1b4.  if v0 != 0 then goto L42c1c0;
  #L42c1b8.  if v1 != 0 then goto L42c1c0;
  #L42c1bc.  v0:= 1I;
  #L42c1be.  goto L42c1c2;
  #L42c1c0.  v0:= 0I;
  #L42c1c2.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L42c1c8.  v0:= temp @kind object;
  #L42c1ca.  call `onSuccess`(v2, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L42c1d0.  return @kind void;
  catch `java.lang.Throwable` @[L42c17c..L42c188] goto L42c19c;
}
procedure `void` `b`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a` v1 @kind this, `io.reactivex.internal.operators.maybe.MaybeEqualSingle$b` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$a;.b:(Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$b;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L42c1f0.  v0:= 0I;
  #L42c1f2.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L42c1f8.  v0:= temp;
  #L42c1fa.  if v0 <= 0 then goto L42c224;
  #L42c1fe.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L42c202.  if v2 != v0 then goto L42c212;
  #L42c206.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.c` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L42c20a.  call `a`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$b;.a:()V` @kind virtual;
  #L42c210.  goto L42c218;
  #L42c212.  call `a`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$b;.a:()V` @kind virtual;
  #L42c218.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42c21c.  call `onError`(v2, v3) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42c222.  goto L42c22a;
  #L42c224.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42c22a.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$a;.c:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)V` @AccessFlag  {
    temp;
    v0;

  #L42c23c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L42c240.  call `subscribe`(v2, v0) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L42c246.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.c` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L42c24a.  call `subscribe`(v3, v2) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L42c250.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c130.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L42c134.  call `a`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$b;.a:()V` @kind virtual;
  #L42c13a.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.c` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L42c13e.  call `a`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$b;.a:()V` @kind virtual;
  #L42c144.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c0c4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L42c0c8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42c0ce.  v0:= temp @kind object;
  #L42c0d0.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L42c0d4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42c0da.  v0:= temp;
  #L42c0dc.  return v0;
}
