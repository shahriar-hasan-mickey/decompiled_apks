record `io.reactivex.internal.operators.maybe.MaybeIsEmptySingle` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class, `io.reactivex.internal.fuseable.HasUpstreamMaybeSource` @kind interface, `io.reactivex.internal.fuseable.FuseToMaybe` @kind interface {
  `io.reactivex.MaybeSource` `io.reactivex.internal.operators.maybe.MaybeIsEmptySingle.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeIsEmptySingle` v0 @kind this, `io.reactivex.MaybeSource` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeIsEmptySingle;.<init>:(Lio/reactivex/MaybeSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42e5a8.  call `<init>`(v0) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L42e5ae.  v0.`io.reactivex.internal.operators.maybe.MaybeIsEmptySingle.a` @type ^`io.reactivex.MaybeSource` := v1 @kind object;
  #L42e5b2.  return @kind void;
}
procedure `io.reactivex.Maybe` `fuseToMaybe`(`io.reactivex.internal.operators.maybe.MaybeIsEmptySingle` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeIsEmptySingle;.fuseToMaybe:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42e568.  v0:= new `io.reactivex.internal.operators.maybe.MaybeIsEmpty`;
  #L42e56c.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeIsEmptySingle.a` @type ^`io.reactivex.MaybeSource` @kind object;
  #L42e570.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeIsEmpty;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L42e576.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L42e57c.  v0:= temp @kind object;
  #L42e57e.  return v0 @kind object;
}
procedure `io.reactivex.MaybeSource` `source`(`io.reactivex.internal.operators.maybe.MaybeIsEmptySingle` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeIsEmptySingle;.source:()Lio/reactivex/MaybeSource;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e590.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeIsEmptySingle.a` @type ^`io.reactivex.MaybeSource` @kind object;
  #L42e594.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeIsEmptySingle` v2 @kind this, `io.reactivex.SingleObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeIsEmptySingle;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L42e5c4.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeIsEmptySingle.a` @type ^`io.reactivex.MaybeSource` @kind object;
  #L42e5c8.  v1:= new `io.reactivex.internal.operators.maybe.MaybeIsEmptySingle$a`;
  #L42e5cc.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeIsEmptySingle$a;.<init>:(Lio/reactivex/SingleObserver;)V` @kind direct;
  #L42e5d2.  call `subscribe`(v0, v1) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L42e5d8.  return @kind void;
}
