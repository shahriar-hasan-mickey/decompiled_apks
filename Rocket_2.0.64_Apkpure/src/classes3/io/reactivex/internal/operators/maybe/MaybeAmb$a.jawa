record `io.reactivex.internal.operators.maybe.MaybeAmb$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeAmb$a.a` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.maybe.MaybeAmb$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeAmb$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeAmb$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$a;.<init>:(Lio/reactivex/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L429dc8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L429dce.  v0.`io.reactivex.internal.operators.maybe.MaybeAmb$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L429dd2.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L429dd6.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L429ddc.  v0.`io.reactivex.internal.operators.maybe.MaybeAmb$a.b` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L429de0.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeAmb$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L429df4.  v0:= 0I;
  #L429df6.  v1:= 1I;
  #L429df8.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L429dfe.  v0:= temp;
  #L429e00.  if v0 == 0 then goto L429e0e;
  #L429e04.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeAmb$a.b` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L429e08.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L429e0e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeAmb$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L429dac.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L429db2.  v0:= temp;
  #L429db4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeAmb$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L429e20.  v0:= 0I;
  #L429e22.  v1:= 1I;
  #L429e24.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L429e2a.  v0:= temp;
  #L429e2c.  if v0 == 0 then goto L429e44;
  #L429e30.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeAmb$a.b` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L429e34.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L429e3a.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeAmb$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L429e3e.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L429e44.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeAmb$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L429e58.  v0:= 0I;
  #L429e5a.  v1:= 1I;
  #L429e5c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L429e62.  v0:= temp;
  #L429e64.  if v0 == 0 then goto L429e7e;
  #L429e68.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeAmb$a.b` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L429e6c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L429e72.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeAmb$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L429e76.  call `onError`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L429e7c.  goto L429e84;
  #L429e7e.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L429e84.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeAmb$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L429e98.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeAmb$a.b` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L429e9c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L429ea2.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeAmb$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L429eb4.  v0:= 0I;
  #L429eb6.  v1:= 1I;
  #L429eb8.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L429ebe.  v0:= temp;
  #L429ec0.  if v0 == 0 then goto L429ed8;
  #L429ec4.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeAmb$a.b` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L429ec8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L429ece.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeAmb$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L429ed2.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L429ed8.  return @kind void;
}
