record `io.reactivex.internal.operators.maybe.MaybeCreate` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class {
  `io.reactivex.MaybeOnSubscribe` `io.reactivex.internal.operators.maybe.MaybeCreate.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeCreate` v0 @kind this, `io.reactivex.MaybeOnSubscribe` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate;.<init>:(Lio/reactivex/MaybeOnSubscribe;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42b12c.  call `<init>`(v0) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L42b132.  v0.`io.reactivex.internal.operators.maybe.MaybeCreate.a` @type ^`io.reactivex.MaybeOnSubscribe` := v1 @kind object;
  #L42b136.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeCreate` v1 @kind this, `io.reactivex.MaybeObserver` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L42b148.  v0:= new `io.reactivex.internal.operators.maybe.MaybeCreate$a`;
  #L42b14c.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$a;.<init>:(Lio/reactivex/MaybeObserver;)V` @kind direct;
  #L42b152.  call `onSubscribe`(v2, v0) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42b158.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeCreate.a` @type ^`io.reactivex.MaybeOnSubscribe` @kind object;
  #L42b15c.  call `subscribe`(v2, v0) @signature `Lio/reactivex/MaybeOnSubscribe;.subscribe:(Lio/reactivex/MaybeEmitter;)V` @kind interface;
  #L42b162.  goto L42b172;
  #L42b164.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42b166.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42b16c.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L42b172.  return @kind void;
  catch `java.lang.Throwable` @[L42b158..L42b162] goto L42b164;
}
