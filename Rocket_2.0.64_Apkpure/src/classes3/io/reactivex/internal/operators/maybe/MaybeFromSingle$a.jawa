record `io.reactivex.internal.operators.maybe.MaybeFromSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.SingleObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeFromSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeFromSingle$a.b` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFromSingle$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromSingle$a;.<init>:(Lio/reactivex/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42dea4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42deaa.  v0.`io.reactivex.internal.operators.maybe.MaybeFromSingle$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L42deae.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeFromSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42dec0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42dec4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42deca.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42dece.  v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$a.b` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L42ded2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeFromSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42de84.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42de88.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42de8e.  v0:= temp;
  #L42de90.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeFromSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42dee4.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42dee8.  v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$a.b` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L42deec.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42def0.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42def6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeFromSingle$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromSingle$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42df08.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42df0c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42df12.  v0:= temp;
  #L42df14.  if v0 == 0 then goto L42df26;
  #L42df18.  v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$a.b` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L42df1c.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42df20.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42df26.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeFromSingle$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromSingle$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42df38.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42df3c.  v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$a.b` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L42df40.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42df44.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L42df4a.  return @kind void;
}
