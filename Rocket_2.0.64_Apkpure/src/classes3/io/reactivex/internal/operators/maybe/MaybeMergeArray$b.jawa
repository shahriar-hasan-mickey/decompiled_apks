record `io.reactivex.internal.operators.maybe.MaybeMergeArray$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.MaybeObserver` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.maybe.MaybeMergeArray$b.a` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.maybe.MaybeMergeArray$b.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.maybe.MaybeMergeArray$b.c` @AccessFlag FINAL;
  `io.reactivex.internal.operators.maybe.MaybeMergeArray$d` `io.reactivex.internal.operators.maybe.MaybeMergeArray$b.d` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.maybe.MaybeMergeArray$b.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.maybe.MaybeMergeArray$b.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.maybe.MaybeMergeArray$b.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.maybe.MaybeMergeArray$b.h` @AccessFlag ;
  `long` `io.reactivex.internal.operators.maybe.MaybeMergeArray$b.i` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeMergeArray$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `io.reactivex.internal.operators.maybe.MaybeMergeArray$d` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.<init>:(Lorg/reactivestreams/Subscriber;ILio/reactivex/internal/operators/maybe/MaybeMergeArray$d;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42e9cc.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L42e9d2.  v0.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L42e9d6.  v0.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.f` @type ^`int` := v2;
  #L42e9da.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L42e9de.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L42e9e4.  v0.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.b` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L42e9e8.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L42e9ec.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L42e9f2.  v0.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.c` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L42e9f6.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L42e9fa.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L42ea00.  v0.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L42ea04.  v0.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$d` := v3 @kind object;
  #L42ea08.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42ea1c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.g` @type ^`boolean` @kind boolean;
  #L42ea20.  if v0 != 0 then goto L42ea4a;
  #L42ea24.  v0:= 1I;
  #L42ea26.  v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.g` @type ^`boolean` := v0 @kind boolean;
  #L42ea2a.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.b` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L42ea2e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L42ea34.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L42ea3a.  v0:= temp;
  #L42ea3c.  if v0 != 0 then goto L42ea4a;
  #L42ea40.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L42ea44.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L42ea4a.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42ea5c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L42ea60.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L42ea66.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L42ea78.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L42ea7e.  v0:= temp;
  #L42ea80.  if v0 == 0 then goto L42ea86;
  #L42ea84.  return @kind void;
  #L42ea86.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.h` @type ^`boolean` @kind boolean;
  #L42ea8a.  if v0 == 0 then goto L42ea96;
  #L42ea8e.  call `e`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.e:()V` @kind virtual;
  #L42ea94.  goto L42ea9c;
  #L42ea96.  call `f`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.f:()V` @kind virtual;
  #L42ea9c.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v6 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42eab0.  v0:= v6.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L42eab4.  v1:= v6.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L42eab8.  v2:= 1I;
  #L42eaba.  v3:= 1I;
  #L42eabc.  v4:= v6.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.g` @type ^`boolean` @kind boolean;
  #L42eac0.  if v4 == 0 then goto L42eacc;
  #L42eac4.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L42eaca.  return @kind void;
  #L42eacc.  v4:= v6.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42ead0.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42ead6.  v4:= temp @kind object;
  #L42ead8.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L42eadc.  if v4 == 0 then goto L42eaee;
  #L42eae0.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L42eae6.  call `onError`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42eaec.  return @kind void;
  #L42eaee.  call temp:= `d`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$d;.d:()I` @kind interface;
  #L42eaf4.  v4:= temp;
  #L42eaf6.  v5:= v6.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.f` @type ^`int`;
  #L42eafa.  if v4 != v5 then goto L42eb02;
  #L42eafe.  v4:= 1I;
  #L42eb00.  goto L42eb04;
  #L42eb02.  v4:= 0I;
  #L42eb04.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L42eb0a.  v5:= temp;
  #L42eb0c.  if v5 != 0 then goto L42eb18;
  #L42eb10.  v5:= 0I;
  #L42eb12.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42eb18.  if v4 == 0 then goto L42eb24;
  #L42eb1c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L42eb22.  return @kind void;
  #L42eb24.  v3:= -v3 @kind int;
  #L42eb26.  call temp:= `addAndGet`(v6, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L42eb2c.  v3:= temp;
  #L42eb2e.  if v3 != 0 then goto L42eabc;
  #L42eb32.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v10 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L42eb44.  v0:= v10.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L42eb48.  v1:= v10.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L42eb4c.  v2:= v10.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.i` @type ^`long` @kind wide;
  #L42eb50.  v4:= 1I;
  #L42eb52.  v5:= v10.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L42eb56.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L42eb5c.  v5:= temp @kind wide;
  #L42eb5e.  v7:= lcmp(v2, v5);
  #L42eb62.  if v7 == 0 then goto L42ebe0;
  #L42eb66.  v8:= v10.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.g` @type ^`boolean` @kind boolean;
  #L42eb6a.  if v8 == 0 then goto L42eb76;
  #L42eb6e.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L42eb74.  return @kind void;
  #L42eb76.  v8:= v10.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42eb7a.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42eb80.  v8:= temp @kind object;
  #L42eb82.  v8:= (`java.lang.Throwable`) v8 @kind object;
  #L42eb86.  if v8 == 0 then goto L42eba4;
  #L42eb8a.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L42eb90.  v1:= v10.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42eb94.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L42eb9a.  v1:= temp @kind object;
  #L42eb9c.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42eba2.  return @kind void;
  #L42eba4.  call temp:= `c`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$d;.c:()I` @kind interface;
  #L42ebaa.  v8:= temp;
  #L42ebac.  v9:= v10.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.f` @type ^`int`;
  #L42ebb0.  if v8 != v9 then goto L42ebbc;
  #L42ebb4.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L42ebba.  return @kind void;
  #L42ebbc.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$d;.poll:()Ljava/lang/Object;` @kind interface;
  #L42ebc2.  v8:= temp @kind object;
  #L42ebc4.  if v8 != 0 then goto L42ebca;
  #L42ebc8.  goto L42ebe0;
  #L42ebca.  v7:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L42ebce.  if v8 == v7 then goto L42eb5e;
  #L42ebd2.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42ebd8.  v7:= 1L;
  #L42ebdc.  v2:= v2 + v7 @kind long;
  #L42ebde.  goto L42eb5e;
  #L42ebe0.  if v7 != 0 then goto L42ec42;
  #L42ebe4.  v5:= v10.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42ebe8.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42ebee.  v5:= temp @kind object;
  #L42ebf0.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L42ebf4.  if v5 == 0 then goto L42ec12;
  #L42ebf8.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L42ebfe.  v1:= v10.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42ec02.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L42ec08.  v1:= temp @kind object;
  #L42ec0a.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42ec10.  return @kind void;
  #L42ec12.  call temp:= `peek`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$d;.peek:()Ljava/lang/Object;` @kind interface;
  #L42ec18.  v5:= temp @kind object;
  #L42ec1a.  v6:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L42ec1e.  if v5 != v6 then goto L42ec2a;
  #L42ec22.  call `b`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$d;.b:()V` @kind interface;
  #L42ec28.  goto L42ec12;
  #L42ec2a.  call temp:= `c`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$d;.c:()I` @kind interface;
  #L42ec30.  v5:= temp;
  #L42ec32.  v6:= v10.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.f` @type ^`int`;
  #L42ec36.  if v5 != v6 then goto L42ec42;
  #L42ec3a.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L42ec40.  return @kind void;
  #L42ec42.  v10.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.i` @type ^`long` := v2 @kind wide;
  #L42ec46.  v4:= -v4 @kind int;
  #L42ec48.  call temp:= `addAndGet`(v10, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L42ec4e.  v4:= temp;
  #L42ec50.  if v4 != 0 then goto L42eb52;
  #L42ec54.  return @kind void;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.isCancelled:()Z` @AccessFlag  {
    temp;
    v0;

  #L42e948.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.g` @type ^`boolean` @kind boolean;
  #L42e94c.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e960.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L42e964.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L42e96a.  v0:= temp;
  #L42e96c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42ec68.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L42ec6c.  v1:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L42ec70.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L42ec76.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.drain:()V` @kind virtual;
  #L42ec7c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42ec90.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42ec94.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L42ec9a.  v0:= temp;
  #L42ec9c.  if v0 == 0 then goto L42ecc0;
  #L42eca0.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.b` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L42eca4.  call `dispose`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L42ecaa.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L42ecae.  v0:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L42ecb2.  call temp:= `offer`(v2, v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L42ecb8.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.drain:()V` @kind virtual;
  #L42ecbe.  goto L42ecc6;
  #L42ecc0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42ecc6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42ecd8.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.b` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L42ecdc.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L42ece2.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42ecf4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L42ecf8.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L42ecfe.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.drain:()V` @kind virtual;
  #L42ed04.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42e9a4.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L42e9a8.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$d;.poll:()Ljava/lang/Object;` @kind interface;
  #L42e9ae.  v0:= temp @kind object;
  #L42e9b0.  v1:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L42e9b4.  if v0 == v1 then goto L42e9a4;
  #L42e9b8.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42ed18.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L42ed1e.  v0:= temp;
  #L42ed20.  if v0 == 0 then goto L42ed34;
  #L42ed24.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L42ed28.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L42ed2e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.drain:()V` @kind virtual;
  #L42ed34.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e980.  v0:= 2I;
  #L42e982.  v2:= v2 ^& v0 @kind int;
  #L42e984.  if v2 == 0 then goto L42e990;
  #L42e988.  v2:= 1I;
  #L42e98a.  v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.h` @type ^`boolean` := v2 @kind boolean;
  #L42e98e.  return v0;
  #L42e990.  v2:= 0I;
  #L42e992.  return v2;
}
