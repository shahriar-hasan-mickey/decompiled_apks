record `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicQueueDisposable` @kind class, `io.reactivex.MaybeObserver` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.c` @AccessFlag ;
  `java.util.Iterator` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.d` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42cf4c.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicQueueDisposable;.<init>:()V` @kind direct;
  #L42cf52.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42cf56.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L42cf5a.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cf6c.  v0:= 0I;
  #L42cf6e.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` := v0 @kind object;
  #L42cf72.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cf84.  v0:= 1I;
  #L42cf86.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L42cf8a.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42cf8e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42cf94.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42cf98.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.c` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L42cf9c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42ceac.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.e` @type ^`boolean` @kind boolean;
  #L42ceb0.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cec4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` @kind object;
  #L42cec8.  if v0 != 0 then goto L42ced0;
  #L42cecc.  v0:= 1I;
  #L42cece.  goto L42ced2;
  #L42ced0.  v0:= 0I;
  #L42ced2.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cfb0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L42cfb4.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42cfba.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cfcc.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42cfd0.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.c` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L42cfd4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L42cfd8.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42cfde.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cff0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42cff4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42cffa.  v0:= temp;
  #L42cffc.  if v0 == 0 then goto L42d00e;
  #L42d000.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L42d004.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L42d008.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42d00e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42d020.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L42d024.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L42d028.  call temp:= `apply`(v1, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42d02e.  v3:= temp @kind object;
  #L42d030.  v3:= (`java.lang.Iterable`) v3 @kind object;
  #L42d034.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L42d03a.  v3:= temp @kind object;
  #L42d03c.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L42d042.  v1:= temp;
  #L42d044.  if v1 != 0 then goto L42d050;
  #L42d048.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42d04e.  return @kind void;
  #L42d050.  v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` := v3 @kind object;
  #L42d054.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.f` @type ^`boolean` @kind boolean;
  #L42d058.  if v1 == 0 then goto L42d06c;
  #L42d05c.  v3:= 0I;
  #L42d05e.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42d064.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42d06a.  return @kind void;
  #L42d06c.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.e` @type ^`boolean` @kind boolean;
  #L42d070.  if v1 == 0 then goto L42d076;
  #L42d074.  return @kind void;
  #L42d076.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L42d07c.  v1:= temp @kind object;
  #L42d07e.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42d084.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.e` @type ^`boolean` @kind boolean;
  #L42d088.  if v1 == 0 then goto L42d08e;
  #L42d08c.  return @kind void;
  #L42d08e.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L42d094.  v1:= temp;
  #L42d096.  if v1 != 0 then goto L42d06c;
  #L42d09a.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42d0a0.  return @kind void;
  #L42d0a2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42d0a4.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42d0aa.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42d0b0.  return @kind void;
  #L42d0b2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42d0b4.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42d0ba.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42d0c0.  return @kind void;
  #L42d0c2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42d0c4.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42d0ca.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42d0d0.  return @kind void;
  catch `java.lang.Throwable` @[L42d024..L42d044] goto L42d0c2;
  catch `java.lang.Throwable` @[L42d076..L42d07e] goto L42d0b2;
  catch `java.lang.Throwable` @[L42d08e..L42d096] goto L42d0a2;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42cf08.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` @kind object;
  #L42cf0c.  v1:= 0I;
  #L42cf0e.  if v0 == 0 then goto L42cf38;
  #L42cf12.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L42cf18.  v2:= temp @kind object;
  #L42cf1a.  v3:= "The iterator returned a null value" @kind object;
  #L42cf1e.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L42cf24.  v2:= temp @kind object;
  #L42cf26.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L42cf2c.  v0:= temp;
  #L42cf2e.  if v0 != 0 then goto L42cf36;
  #L42cf32.  v4.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` := v1 @kind object;
  #L42cf36.  return v2 @kind object;
  #L42cf38.  return v1 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cee4.  v0:= 2I;
  #L42cee6.  v2:= v2 ^& v0 @kind int;
  #L42cee8.  if v2 == 0 then goto L42cef4;
  #L42ceec.  v2:= 1I;
  #L42ceee.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.f` @type ^`boolean` := v2 @kind boolean;
  #L42cef2.  return v0;
  #L42cef4.  v2:= 0I;
  #L42cef6.  return v2;
}
