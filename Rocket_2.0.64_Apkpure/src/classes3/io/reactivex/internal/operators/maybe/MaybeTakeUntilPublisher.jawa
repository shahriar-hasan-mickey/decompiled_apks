record `io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.maybe.a` @kind class {
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher` v0 @kind this, `io.reactivex.MaybeSource` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher;.<init>:(Lio/reactivex/MaybeSource;Lorg/reactivestreams/Publisher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4301d0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/a;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L4301d6.  v0.`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher.a` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L4301da.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher` v2 @kind this, `io.reactivex.MaybeObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4301ec.  v0:= new `io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a`;
  #L4301f0.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a;.<init>:(Lio/reactivex/MaybeObserver;)V` @kind direct;
  #L4301f6.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4301fc.  v3:= v2.`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher.a` @type ^`org.reactivestreams.Publisher` @kind object;
  #L430200.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` @kind object;
  #L430204.  call `subscribe`(v3, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L43020a.  v3:= v2.`io.reactivex.internal.operators.maybe.a.source` @type ^`io.reactivex.MaybeSource` @kind object;
  #L43020e.  call `subscribe`(v3, v0) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L430214.  return @kind void;
}
