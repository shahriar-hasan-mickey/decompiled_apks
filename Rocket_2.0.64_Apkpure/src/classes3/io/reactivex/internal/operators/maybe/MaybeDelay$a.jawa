record `io.reactivex.internal.operators.maybe.MaybeDelay$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeDelay$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.maybe.MaybeDelay$a.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.maybe.MaybeDelay$a.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.maybe.MaybeDelay$a.d` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.maybe.MaybeDelay$a.e` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.internal.operators.maybe.MaybeDelay$a.f` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeDelay$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeDelay$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelay$a;.<init>:(Lio/reactivex/MaybeObserver;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42b224.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42b22a.  v0.`io.reactivex.internal.operators.maybe.MaybeDelay$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L42b22e.  v0.`io.reactivex.internal.operators.maybe.MaybeDelay$a.b` @type ^`long` := v2 @kind wide;
  #L42b232.  v0.`io.reactivex.internal.operators.maybe.MaybeDelay$a.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L42b236.  v0.`io.reactivex.internal.operators.maybe.MaybeDelay$a.d` @type ^`io.reactivex.Scheduler` := v5 @kind object;
  #L42b23a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.maybe.MaybeDelay$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelay$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42b320.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeDelay$a.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L42b324.  v1:= v4.`io.reactivex.internal.operators.maybe.MaybeDelay$a.b` @type ^`long` @kind wide;
  #L42b328.  v3:= v4.`io.reactivex.internal.operators.maybe.MaybeDelay$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L42b32c.  call temp:= `scheduleDirect`(v0, v4, v1, v3) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L42b332.  v0:= temp @kind object;
  #L42b334.  call temp:= `replace`(v4, v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42b33a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeDelay$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelay$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L42b24c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42b252.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeDelay$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelay$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b1fc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42b202.  v0:= temp @kind object;
  #L42b204.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L42b208.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42b20e.  v0:= temp;
  #L42b210.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeDelay$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelay$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L42b264.  call `a`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelay$a;.a:()V` @kind virtual;
  #L42b26a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeDelay$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelay$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L42b27c.  v0.`io.reactivex.internal.operators.maybe.MaybeDelay$a.f` @type ^`java.lang.Throwable` := v1 @kind object;
  #L42b280.  call `a`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelay$a;.a:()V` @kind virtual;
  #L42b286.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeDelay$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelay$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L42b298.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42b29e.  v1:= temp;
  #L42b2a0.  if v1 == 0 then goto L42b2ae;
  #L42b2a4.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeDelay$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42b2a8.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42b2ae.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeDelay$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelay$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L42b2c0.  v0.`io.reactivex.internal.operators.maybe.MaybeDelay$a.e` @type ^`java.lang.Object` := v1 @kind object;
  #L42b2c4.  call `a`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelay$a;.a:()V` @kind virtual;
  #L42b2ca.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.maybe.MaybeDelay$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelay$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42b2dc.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeDelay$a.f` @type ^`java.lang.Throwable` @kind object;
  #L42b2e0.  if v0 == 0 then goto L42b2f0;
  #L42b2e4.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeDelay$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42b2e8.  call `onError`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42b2ee.  goto L42b30e;
  #L42b2f0.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeDelay$a.e` @type ^`java.lang.Object` @kind object;
  #L42b2f4.  if v0 == 0 then goto L42b304;
  #L42b2f8.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeDelay$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42b2fc.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L42b302.  goto L42b30e;
  #L42b304.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeDelay$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42b308.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L42b30e.  return @kind void;
}
