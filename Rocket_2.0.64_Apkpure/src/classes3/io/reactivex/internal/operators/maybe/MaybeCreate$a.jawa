record `io.reactivex.internal.operators.maybe.MaybeCreate$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeEmitter` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeCreate$a.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeCreate$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeCreate$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$a;.<init>:(Lio/reactivex/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42af5c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42af62.  v0.`io.reactivex.internal.operators.maybe.MaybeCreate$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L42af66.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeCreate$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L42af78.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42af7e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeCreate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42af34.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42af3a.  v0:= temp @kind object;
  #L42af3c.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L42af40.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42af46.  v0:= temp;
  #L42af48.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeCreate$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42af90.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42af96.  v0:= temp @kind object;
  #L42af98.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42af9c.  if v0 == v1 then goto L42afd4;
  #L42afa0.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L42afa6.  v0:= temp @kind object;
  #L42afa8.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L42afac.  if v0 == v1 then goto L42afd4;
  #L42afb0.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeCreate$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42afb4.  call `onComplete`(v1) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L42afba.  if v0 == 0 then goto L42afd4;
  #L42afbe.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42afc4.  goto L42afd4;
  #L42afc6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42afc8.  if v0 == 0 then goto L42afd2;
  #L42afcc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42afd2.  throw v1;
  #L42afd4.  return @kind void;
  catch `java.lang.Throwable` @[L42afb0..L42afba] goto L42afc6;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeCreate$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42aff4.  if v3 != 0 then goto L42b006;
  #L42aff8.  v3:= new `java.lang.NullPointerException`;
  #L42affc.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L42b000.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42b006.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42b00c.  v0:= temp @kind object;
  #L42b00e.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42b012.  if v0 == v1 then goto L42b04a;
  #L42b016.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L42b01c.  v0:= temp @kind object;
  #L42b01e.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L42b022.  if v0 == v1 then goto L42b04a;
  #L42b026.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeCreate$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42b02a.  call `onError`(v1, v3) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42b030.  if v0 == 0 then goto L42b03a;
  #L42b034.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42b03a.  return @kind void;
  #L42b03c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42b03e.  if v0 == 0 then goto L42b048;
  #L42b042.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42b048.  throw v3;
  #L42b04a.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42b050.  return @kind void;
  catch `java.lang.Throwable` @[L42b026..L42b030] goto L42b03c;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeCreate$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42b070.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42b076.  v0:= temp @kind object;
  #L42b078.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42b07c.  if v0 == v1 then goto L42b0d2;
  #L42b080.  call temp:= `getAndSet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L42b086.  v0:= temp @kind object;
  #L42b088.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L42b08c.  if v0 == v1 then goto L42b0d2;
  #L42b090.  if v4 != 0 then goto L42b0ae;
  #L42b094.  v4:= v3.`io.reactivex.internal.operators.maybe.MaybeCreate$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42b098.  v1:= new `java.lang.NullPointerException`;
  #L42b09c.  v2:= "onSuccess called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L42b0a0.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42b0a6.  call `onError`(v4, v1) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42b0ac.  goto L42b0b8;
  #L42b0ae.  v1:= v3.`io.reactivex.internal.operators.maybe.MaybeCreate$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42b0b2.  call `onSuccess`(v1, v4) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L42b0b8.  if v0 == 0 then goto L42b0d2;
  #L42b0bc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42b0c2.  goto L42b0d2;
  #L42b0c4.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42b0c6.  if v0 == 0 then goto L42b0d0;
  #L42b0ca.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42b0d0.  throw v4;
  #L42b0d2.  return @kind void;
  catch `java.lang.Throwable` @[L42b094..L42b0b8] goto L42b0c4;
}
procedure `void` `setCancellable`(`io.reactivex.internal.operators.maybe.MaybeCreate$a` v1 @kind this, `io.reactivex.functions.Cancellable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$a;.setCancellable:(Lio/reactivex/functions/Cancellable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b0f0.  v0:= new `io.reactivex.internal.disposables.CancellableDisposable`;
  #L42b0f4.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/disposables/CancellableDisposable;.<init>:(Lio/reactivex/functions/Cancellable;)V` @kind direct;
  #L42b0fa.  call `setDisposable`(v1, v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$a;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L42b100.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.internal.operators.maybe.MaybeCreate$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$a;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L42b114.  call temp:= `set`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42b11a.  return @kind void;
}
