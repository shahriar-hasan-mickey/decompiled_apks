record `io.reactivex.internal.operators.maybe.MaybeAmb` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class {
  `io.reactivex.MaybeSource`[] `io.reactivex.internal.operators.maybe.MaybeAmb.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.Iterable` `io.reactivex.internal.operators.maybe.MaybeAmb.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeAmb` v0 @kind this, `io.reactivex.MaybeSource`[] v1 @kind object, `java.lang.Iterable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb;.<init>:([Lio/reactivex/MaybeSource;Ljava/lang/Iterable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L429eec.  call `<init>`(v0) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L429ef2.  v0.`io.reactivex.internal.operators.maybe.MaybeAmb.a` @type ^`io.reactivex.MaybeSource`[] := v1 @kind object;
  #L429ef6.  v0.`io.reactivex.internal.operators.maybe.MaybeAmb.b` @type ^`java.lang.Iterable` := v2 @kind object;
  #L429efa.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeAmb` v6 @kind this, `io.reactivex.MaybeObserver` v7 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L429f0c.  v0:= v6.`io.reactivex.internal.operators.maybe.MaybeAmb.a` @type ^`io.reactivex.MaybeSource`[] @kind object;
  #L429f10.  v1:= 0I;
  #L429f12.  if v0 != 0 then goto L429f92;
  #L429f16.  v0:= 8I;
  #L429f1a.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L429f1e.  v2:= v6.`io.reactivex.internal.operators.maybe.MaybeAmb.b` @type ^`java.lang.Iterable` @kind object;
  #L429f22.  call temp:= `iterator`(v2) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L429f28.  v2:= temp @kind object;
  #L429f2a.  v3:= 0I;
  #L429f2c.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L429f32.  v4:= temp;
  #L429f34.  if v4 == 0 then goto L429f94;
  #L429f38.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L429f3e.  v4:= temp @kind object;
  #L429f40.  v4:= (`io.reactivex.MaybeSource`) v4 @kind object;
  #L429f44.  if v4 != 0 then goto L429f5e;
  #L429f48.  v0:= new `java.lang.NullPointerException`;
  #L429f4c.  v1:= "One of the sources is null" @kind object;
  #L429f50.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L429f56.  call `error`(v0, v7) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/MaybeObserver;)V` @kind static;
  #L429f5c.  return @kind void;
  #L429f5e.  v5:= length @variable v0;
  #L429f60.  if v3 != v5 then goto L429f76;
  #L429f64.  v5:= v3 ^> 2;
  #L429f68.  v5:= v5 + v3 @kind int;
  #L429f6a.  v5:= new `io.reactivex.MaybeSource`[v5];
  #L429f6e.  call `arraycopy`(v0, v1, v5, v1, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L429f74.  v0:= v5 @kind object;
  #L429f76.  v5:= v3 + 1;
  #L429f7a.  v0[v3]:= v4 @kind object;
  #L429f7e.  v3:= v5;
  #L429f80.  goto L429f2c;
  #L429f82.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L429f84.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L429f8a.  call `error`(v0, v7) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/MaybeObserver;)V` @kind static;
  #L429f90.  return @kind void;
  #L429f92.  v3:= length @variable v0;
  #L429f94.  v2:= new `io.reactivex.internal.operators.maybe.MaybeAmb$a`;
  #L429f98.  call `<init>`(v2, v7) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$a;.<init>:(Lio/reactivex/MaybeObserver;)V` @kind direct;
  #L429f9e.  call `onSubscribe`(v7, v2) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L429fa4.  if v1 >= v3 then goto L429fe0;
  #L429fa8.  v4:= v0[v1] @kind object;
  #L429fac.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$a;.isDisposed:()Z` @kind virtual;
  #L429fb2.  v5:= temp;
  #L429fb4.  if v5 == 0 then goto L429fba;
  #L429fb8.  return @kind void;
  #L429fba.  if v4 != 0 then goto L429fd4;
  #L429fbe.  v7:= new `java.lang.NullPointerException`;
  #L429fc2.  v0:= "One of the MaybeSources is null" @kind object;
  #L429fc6.  call `<init>`(v7, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L429fcc.  call `onError`(v2, v7) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L429fd2.  return @kind void;
  #L429fd4.  call `subscribe`(v4, v2) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L429fda.  v1:= v1 + 1;
  #L429fde.  goto L429fa4;
  #L429fe0.  if v3 != 0 then goto L429fea;
  #L429fe4.  call `onComplete`(v7) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L429fea.  return @kind void;
  catch `java.lang.Throwable` @[L429f1e..L429f7e] goto L429f82;
}
