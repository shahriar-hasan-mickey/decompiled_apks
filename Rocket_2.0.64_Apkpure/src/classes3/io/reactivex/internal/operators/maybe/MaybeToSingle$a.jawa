record `io.reactivex.internal.operators.maybe.MaybeToSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.maybe.MaybeToSingle$a.a` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.maybe.MaybeToSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeToSingle$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeToSingle$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToSingle$a;.<init>:(Lio/reactivex/SingleObserver;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L430d18.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L430d1e.  v0.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L430d22.  v0.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.b` @type ^`java.lang.Object` := v2 @kind object;
  #L430d26.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeToSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeToSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430d38.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L430d3c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L430d42.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L430d46.  v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.c` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L430d4a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeToSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeToSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430cf8.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L430cfc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L430d02.  v0:= temp;
  #L430d04.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeToSingle$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeToSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L430d5c.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L430d60.  v3.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.c` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L430d64.  v0:= v3.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.b` @type ^`java.lang.Object` @kind object;
  #L430d68.  if v0 == 0 then goto L430d78;
  #L430d6c.  v1:= v3.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L430d70.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L430d76.  goto L430d90;
  #L430d78.  v0:= v3.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L430d7c.  v1:= new `java.util.NoSuchElementException`;
  #L430d80.  v2:= "The MaybeSource is empty" @kind object;
  #L430d84.  call `<init>`(v1, v2) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L430d8a.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L430d90.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeToSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430da4.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L430da8.  v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.c` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L430dac.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L430db0.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L430db6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeToSingle$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToSingle$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430dc8.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L430dcc.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L430dd2.  v0:= temp;
  #L430dd4.  if v0 == 0 then goto L430de6;
  #L430dd8.  v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L430ddc.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L430de0.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L430de6.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeToSingle$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToSingle$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430df8.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L430dfc.  v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.c` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L430e00.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L430e04.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L430e0a.  return @kind void;
}
