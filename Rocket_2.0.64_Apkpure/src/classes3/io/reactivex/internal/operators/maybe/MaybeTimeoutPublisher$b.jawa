record `io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$c` `io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.b` @AccessFlag FINAL;
  `io.reactivex.MaybeSource` `io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.c` @AccessFlag FINAL;
  `io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$a` `io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b` v1 @kind this, `io.reactivex.MaybeObserver` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher$b;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/MaybeSource;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L430624.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43062a.  v1.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.a` @type ^`io.reactivex.MaybeObserver` := v2 @kind object;
  #L43062e.  v0:= new `io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$c`;
  #L430632.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher$c;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher$b;)V` @kind direct;
  #L430638.  v1.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$c` := v0 @kind object;
  #L43063c.  v1.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.c` @type ^`io.reactivex.MaybeSource` := v3 @kind object;
  #L430640.  if v3 == 0 then goto L430650;
  #L430644.  v3:= new `io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$a`;
  #L430648.  call `<init>`(v3, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher$a;.<init>:(Lio/reactivex/MaybeObserver;)V` @kind direct;
  #L43064e.  goto L430652;
  #L430650.  v3:= 0I;
  #L430652.  v1.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$a` := v3 @kind object;
  #L430656.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher$b;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L430760.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L430766.  v0:= temp;
  #L430768.  if v0 == 0 then goto L430794;
  #L43076c.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.c` @type ^`io.reactivex.MaybeSource` @kind object;
  #L430770.  if v0 != 0 then goto L43078a;
  #L430774.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L430778.  v1:= new `java.util.concurrent.TimeoutException`;
  #L43077c.  call `<init>`(v1) @signature `Ljava/util/concurrent/TimeoutException;.<init>:()V` @kind direct;
  #L430782.  call `onError`(v0, v1) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L430788.  goto L430794;
  #L43078a.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$a` @kind object;
  #L43078e.  call `subscribe`(v0, v1) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L430794.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher$b;.b:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4307a8.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4307ae.  v0:= temp;
  #L4307b0.  if v0 == 0 then goto L4307c0;
  #L4307b4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4307b8.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4307be.  goto L4307c6;
  #L4307c0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4307c6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430668.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43066e.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$c` @kind object;
  #L430672.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L430678.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$a` @kind object;
  #L43067c.  if v0 == 0 then goto L430686;
  #L430680.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L430686.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4305fc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L430602.  v0:= temp @kind object;
  #L430604.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L430608.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43060e.  v0:= temp;
  #L430610.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L430698.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$c` @kind object;
  #L43069c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4306a2.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4306a6.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4306ac.  v1:= temp @kind object;
  #L4306ae.  if v1 == v0 then goto L4306bc;
  #L4306b2.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4306b6.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L4306bc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4306d0.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$c` @kind object;
  #L4306d4.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4306da.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4306de.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4306e4.  v1:= temp @kind object;
  #L4306e6.  if v1 == v0 then goto L4306f6;
  #L4306ea.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4306ee.  call `onError`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4306f4.  goto L4306fc;
  #L4306f6.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4306fc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L430710.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L430716.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher$b;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L430728.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$c` @kind object;
  #L43072c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L430732.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L430736.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L43073c.  v1:= temp @kind object;
  #L43073e.  if v1 == v0 then goto L43074c;
  #L430742.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L430746.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L43074c.  return @kind void;
}
