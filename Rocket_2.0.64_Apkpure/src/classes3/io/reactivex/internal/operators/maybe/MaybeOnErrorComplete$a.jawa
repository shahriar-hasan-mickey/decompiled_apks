record `io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a` @kind class @AccessFlag FINAL extends `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorComplete$a;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42f1a8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42f1ae.  v0.`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L42f1b2.  v0.`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.b` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L42f1b6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorComplete$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f1c8.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42f1cc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42f1d2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorComplete$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f188.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42f18c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42f192.  v0:= temp;
  #L42f194.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorComplete$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f1e4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42f1e8.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L42f1ee.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorComplete$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42f200.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.b` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L42f204.  call temp:= `test`(v0, v6) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L42f20a.  v0:= temp;
  #L42f20c.  if v0 == 0 then goto L42f21c;
  #L42f210.  v6:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42f214.  call `onComplete`(v6) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L42f21a.  goto L42f226;
  #L42f21c.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42f220.  call `onError`(v0, v6) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42f226.  return @kind void;
  #L42f228.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42f22a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42f230.  v1:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42f234.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L42f238.  v3:= 2I;
  #L42f23a.  v3:= new `java.lang.Throwable`[v3];
  #L42f23e.  v4:= 0I;
  #L42f240.  v3[v4]:= v6 @kind object;
  #L42f244.  v6:= 1I;
  #L42f246.  v3[v6]:= v0 @kind object;
  #L42f24a.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L42f250.  call `onError`(v1, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42f256.  return @kind void;
  catch `java.lang.Throwable` @[L42f200..L42f20c] goto L42f228;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorComplete$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f274.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42f278.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42f27e.  v0:= temp;
  #L42f280.  if v0 == 0 then goto L42f292;
  #L42f284.  v1.`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L42f288.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42f28c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42f292.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorComplete$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f2a4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42f2a8.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L42f2ae.  return @kind void;
}
