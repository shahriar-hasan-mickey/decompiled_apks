record `io.reactivex.internal.operators.maybe.MaybeZipArray$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeZipArray$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeZipArray$b.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.maybe.MaybeZipArray$c`[] `io.reactivex.internal.operators.maybe.MaybeZipArray$b.c` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.operators.maybe.MaybeZipArray$b.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeZipArray$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeZipArray$b` v1 @kind this, `io.reactivex.MaybeObserver` v2 @kind object, `int` v3 , `io.reactivex.functions.Function` v4 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$b;.<init>:(Lio/reactivex/MaybeObserver;ILio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4313fc.  call `<init>`(v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L431402.  v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$b.a` @type ^`io.reactivex.MaybeObserver` := v2 @kind object;
  #L431406.  v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$b.b` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L43140a.  v2:= new `io.reactivex.internal.operators.maybe.MaybeZipArray$c`[v3];
  #L43140e.  v4:= 0I;
  #L431410.  if v4 >= v3 then goto L431428;
  #L431414.  v0:= new `io.reactivex.internal.operators.maybe.MaybeZipArray$c`;
  #L431418.  call `<init>`(v0, v1, v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$c;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeZipArray$b;I)V` @kind direct;
  #L43141e.  v2[v4]:= v0 @kind object;
  #L431422.  v4:= v4 + 1;
  #L431426.  goto L431410;
  #L431428.  v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$b.c` @type ^`io.reactivex.internal.operators.maybe.MaybeZipArray$c`[] := v2 @kind object;
  #L43142c.  v2:= new `java.lang.Object`[v3];
  #L431430.  v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$b.d` @type ^`java.lang.Object`[] := v2 @kind object;
  #L431434.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.maybe.MaybeZipArray$b` v4 @kind this, `int` v5 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$b;.a:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L431484.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeZipArray$b.c` @type ^`io.reactivex.internal.operators.maybe.MaybeZipArray$c`[] @kind object;
  #L431488.  v1:= length @variable v0;
  #L43148a.  v2:= 0I;
  #L43148c.  if v2 >= v5 then goto L4314a0;
  #L431490.  v3:= v0[v2] @kind object;
  #L431494.  call `a`(v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$c;.a:()V` @kind virtual;
  #L43149a.  v2:= v2 + 1;
  #L43149e.  goto L43148c;
  #L4314a0.  v5:= v5 + 1;
  #L4314a4.  if v5 >= v1 then goto L4314b4;
  #L4314a8.  v2:= v0[v5] @kind object;
  #L4314ac.  call `a`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$c;.a:()V` @kind virtual;
  #L4314b2.  goto L4314a0;
  #L4314b4.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.maybe.MaybeZipArray$b` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$b;.b:(I)V` @AccessFlag  {
    temp;
    v0;

  #L4314c8.  v0:= 0I;
  #L4314ca.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L4314d0.  v0:= temp;
  #L4314d2.  if v0 <= 0 then goto L4314e6;
  #L4314d6.  call `a`(v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$b;.a:(I)V` @kind virtual;
  #L4314dc.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4314e0.  call `onComplete`(v2) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L4314e6.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.maybe.MaybeZipArray$b` v1 @kind this, `java.lang.Throwable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$b;.c:(Ljava/lang/Throwable;I)V` @AccessFlag  {
    temp;
    v0;

  #L4314f8.  v0:= 0I;
  #L4314fa.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L431500.  v0:= temp;
  #L431502.  if v0 <= 0 then goto L431518;
  #L431506.  call `a`(v1, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$b;.a:(I)V` @kind virtual;
  #L43150c.  v3:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L431510.  call `onError`(v3, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L431516.  goto L43151e;
  #L431518.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43151e.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.maybe.MaybeZipArray$b` v1 @kind this, `java.lang.Object` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$b;.d:(Ljava/lang/Object;I)V` @AccessFlag  {
    temp;
    v0;

  #L431530.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$b.d` @type ^`java.lang.Object`[] @kind object;
  #L431534.  v0[v3]:= v2 @kind object;
  #L431538.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43153e.  v2:= temp;
  #L431540.  if v2 != 0 then goto L43157e;
  #L431544.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$b.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L431548.  v3:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$b.d` @type ^`java.lang.Object`[] @kind object;
  #L43154c.  call temp:= `apply`(v2, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L431552.  v2:= temp @kind object;
  #L431554.  v3:= "The zipper returned a null value" @kind object;
  #L431558.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43155e.  v2:= temp @kind object;
  #L431560.  v3:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L431564.  call `onSuccess`(v3, v2) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L43156a.  goto L43157e;
  #L43156c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43156e.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L431574.  v3:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L431578.  call `onError`(v3, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43157e.  return @kind void;
  catch `java.lang.Throwable` @[L431544..L431560] goto L43156c;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeZipArray$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L431448.  v0:= 0I;
  #L43144a.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L431450.  v1:= temp;
  #L431452.  if v1 <= 0 then goto L431470;
  #L431456.  v1:= v4.`io.reactivex.internal.operators.maybe.MaybeZipArray$b.c` @type ^`io.reactivex.internal.operators.maybe.MaybeZipArray$c`[] @kind object;
  #L43145a.  v2:= length @variable v1;
  #L43145c.  if v0 >= v2 then goto L431470;
  #L431460.  v3:= v1[v0] @kind object;
  #L431464.  call `a`(v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$c;.a:()V` @kind virtual;
  #L43146a.  v0:= v0 + 1;
  #L43146e.  goto L43145c;
  #L431470.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeZipArray$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4313d8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4313de.  v0:= temp;
  #L4313e0.  if v0 > 0 then goto L4313e8;
  #L4313e4.  v0:= 1I;
  #L4313e6.  goto L4313ea;
  #L4313e8.  v0:= 0I;
  #L4313ea.  return v0;
}
