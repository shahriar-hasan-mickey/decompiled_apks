record `io.reactivex.internal.operators.maybe.MaybeMergeArray$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReferenceArray` @kind class, `io.reactivex.internal.operators.maybe.MaybeMergeArray$d` @kind interface {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.maybe.MaybeMergeArray$c.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.maybe.MaybeMergeArray$c.b` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeMergeArray$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$c` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$c;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42ee88.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L42ee8e.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L42ee92.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L42ee98.  v0.`io.reactivex.internal.operators.maybe.MaybeMergeArray$c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L42ee9c.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$c;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42eedc.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$c.b` @type ^`int`;
  #L42eee0.  v1:= 0I;
  #L42eee2.  call `lazySet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L42eee8.  v0:= v0 + 1;
  #L42eeec.  v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$c.b` @type ^`int` := v0;
  #L42eef0.  return @kind void;
}
procedure `int` `c`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$c;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42edcc.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$c.b` @type ^`int`;
  #L42edd0.  return v0;
}
procedure `void` `clear`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$c;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42eeb0.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$c;.poll:()Ljava/lang/Object;` @kind virtual;
  #L42eeb6.  v0:= temp @kind object;
  #L42eeb8.  if v0 == 0 then goto L42eeca;
  #L42eebc.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$c;.isEmpty:()Z` @kind virtual;
  #L42eec2.  v0:= temp;
  #L42eec4.  if v0 != 0 then goto L42eeca;
  #L42eec8.  goto L42eeb0;
  #L42eeca.  return @kind void;
}
procedure `int` `d`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$c;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42ede4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L42ede8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L42edee.  v0:= temp;
  #L42edf0.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$c;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42ed48.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$c.b` @type ^`int`;
  #L42ed4c.  call temp:= `d`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$c;.d:()I` @kind virtual;
  #L42ed52.  v1:= temp;
  #L42ed54.  if v0 != v1 then goto L42ed5c;
  #L42ed58.  v0:= 1I;
  #L42ed5a.  goto L42ed5e;
  #L42ed5c.  v0:= 0I;
  #L42ed5e.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$c;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42ed70.  v0:= "value is null" @kind object;
  #L42ed74.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L42ed7a.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L42ed7e.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L42ed84.  v0:= temp;
  #L42ed86.  call temp:= `length`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L42ed8c.  v1:= temp;
  #L42ed8e.  if v0 >= v1 then goto L42ed9c;
  #L42ed92.  call `lazySet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L42ed98.  v3:= 1I;
  #L42ed9a.  return v3;
  #L42ed9c.  v3:= 0I;
  #L42ed9e.  return v3;
}
procedure `boolean` `offer`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$c` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$c;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L42edb0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L42edb4.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L42edba.  throw v1;
}
procedure `java.lang.Object` `peek`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$c;.peek:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42ee04.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$c.b` @type ^`int`;
  #L42ee08.  call temp:= `length`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L42ee0e.  v1:= temp;
  #L42ee10.  if v0 != v1 then goto L42ee18;
  #L42ee14.  v0:= 0I;
  #L42ee16.  return v0 @kind object;
  #L42ee18.  call temp:= `get`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L42ee1e.  v0:= temp @kind object;
  #L42ee20.  return v0 @kind object;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$c` v4 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$c;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42ee34.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeMergeArray$c.b` @type ^`int`;
  #L42ee38.  call temp:= `length`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L42ee3e.  v1:= temp;
  #L42ee40.  v2:= 0I;
  #L42ee42.  if v0 != v1 then goto L42ee48;
  #L42ee46.  return v2 @kind object;
  #L42ee48.  v1:= v4.`io.reactivex.internal.operators.maybe.MaybeMergeArray$c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L42ee4c.  call temp:= `get`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L42ee52.  v3:= temp @kind object;
  #L42ee54.  if v3 == 0 then goto L42ee68;
  #L42ee58.  v1:= v0 + 1;
  #L42ee5c.  v4.`io.reactivex.internal.operators.maybe.MaybeMergeArray$c.b` @type ^`int` := v1;
  #L42ee60.  call `lazySet`(v4, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L42ee66.  return v3 @kind object;
  #L42ee68.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L42ee6e.  v3:= temp;
  #L42ee70.  if v3 != v0 then goto L42ee4c;
  #L42ee74.  return v2 @kind object;
}
