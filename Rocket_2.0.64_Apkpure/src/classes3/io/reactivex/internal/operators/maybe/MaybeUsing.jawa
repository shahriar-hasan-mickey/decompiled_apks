record `io.reactivex.internal.operators.maybe.MaybeUsing` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.maybe.MaybeUsing.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeUsing.b` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.maybe.MaybeUsing.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.maybe.MaybeUsing.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeUsing` v0 @kind this, `java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing;.<init>:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Consumer;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L431264.  call `<init>`(v0) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L43126a.  v0.`io.reactivex.internal.operators.maybe.MaybeUsing.a` @type ^`java.util.concurrent.Callable` := v1 @kind object;
  #L43126e.  v0.`io.reactivex.internal.operators.maybe.MaybeUsing.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L431272.  v0.`io.reactivex.internal.operators.maybe.MaybeUsing.c` @type ^`io.reactivex.functions.Consumer` := v3 @kind object;
  #L431276.  v0.`io.reactivex.internal.operators.maybe.MaybeUsing.d` @type ^`boolean` := v4 @kind boolean;
  #L43127a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeUsing` v5 @kind this, `io.reactivex.MaybeObserver` v6 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43128c.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeUsing.a` @type ^`java.util.concurrent.Callable` @kind object;
  #L431290.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L431296.  v0:= temp @kind object;
  #L431298.  v1:= v5.`io.reactivex.internal.operators.maybe.MaybeUsing.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L43129c.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4312a2.  v1:= temp @kind object;
  #L4312a4.  v2:= "The sourceSupplier returned a null MaybeSource" @kind object;
  #L4312a8.  call temp:= `requireNonNull`(v1, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4312ae.  v1:= temp @kind object;
  #L4312b0.  v1:= (`io.reactivex.MaybeSource`) v1 @kind object;
  #L4312b4.  v2:= new `io.reactivex.internal.operators.maybe.MaybeUsing$a`;
  #L4312b8.  v3:= v5.`io.reactivex.internal.operators.maybe.MaybeUsing.c` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4312bc.  v4:= v5.`io.reactivex.internal.operators.maybe.MaybeUsing.d` @type ^`boolean` @kind boolean;
  #L4312c0.  call `<init>`(v2, v6, v0, v3, v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$a;.<init>:(Lio/reactivex/MaybeObserver;Ljava/lang/Object;Lio/reactivex/functions/Consumer;Z)V` @kind direct;
  #L4312c6.  call `subscribe`(v1, v2) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L4312cc.  return @kind void;
  #L4312ce.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4312d0.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4312d6.  v2:= v5.`io.reactivex.internal.operators.maybe.MaybeUsing.d` @type ^`boolean` @kind boolean;
  #L4312da.  if v2 == 0 then goto L431316;
  #L4312de.  v2:= v5.`io.reactivex.internal.operators.maybe.MaybeUsing.c` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4312e2.  call `accept`(v2, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4312e8.  goto L431316;
  #L4312ea.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4312ec.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4312f2.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L4312f6.  v3:= 2I;
  #L4312f8.  v3:= new `java.lang.Throwable`[v3];
  #L4312fc.  v4:= 0I;
  #L4312fe.  v3[v4]:= v1 @kind object;
  #L431302.  v1:= 1I;
  #L431304.  v3[v1]:= v0 @kind object;
  #L431308.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L43130e.  call `error`(v2, v6) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/MaybeObserver;)V` @kind static;
  #L431314.  return @kind void;
  #L431316.  call `error`(v1, v6) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/MaybeObserver;)V` @kind static;
  #L43131c.  v6:= v5.`io.reactivex.internal.operators.maybe.MaybeUsing.d` @type ^`boolean` @kind boolean;
  #L431320.  if v6 != 0 then goto L43133e;
  #L431324.  v6:= v5.`io.reactivex.internal.operators.maybe.MaybeUsing.c` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L431328.  call `accept`(v6, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L43132e.  goto L43133e;
  #L431330.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L431332.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L431338.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43133e.  return @kind void;
  #L431340.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L431342.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L431348.  call `error`(v0, v6) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/MaybeObserver;)V` @kind static;
  #L43134e.  return @kind void;
  catch `java.lang.Throwable` @[L43128c..L431298] goto L431340;
  catch `java.lang.Throwable` @[L431298..L4312b4] goto L4312ce;
  catch `java.lang.Throwable` @[L4312de..L4312e8] goto L4312ea;
  catch `java.lang.Throwable` @[L431324..L43132e] goto L431330;
}
