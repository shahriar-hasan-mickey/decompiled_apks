record `io.reactivex.internal.operators.maybe.MaybeZipIterable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class {
  `java.lang.Iterable` `io.reactivex.internal.operators.maybe.MaybeZipIterable.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeZipIterable.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeZipIterable` v0 @kind this, `java.lang.Iterable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipIterable;.<init>:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L431750.  call `<init>`(v0) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L431756.  v0.`io.reactivex.internal.operators.maybe.MaybeZipIterable.a` @type ^`java.lang.Iterable` := v1 @kind object;
  #L43175a.  v0.`io.reactivex.internal.operators.maybe.MaybeZipIterable.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L43175e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeZipIterable` v6 @kind this, `io.reactivex.MaybeObserver` v7 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipIterable;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L431770.  v0:= 8I;
  #L431774.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L431778.  v1:= v6.`io.reactivex.internal.operators.maybe.MaybeZipIterable.a` @type ^`java.lang.Iterable` @kind object;
  #L43177c.  call temp:= `iterator`(v1) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L431782.  v1:= temp @kind object;
  #L431784.  v2:= 0I;
  #L431786.  v3:= 0I;
  #L431788.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43178e.  v4:= temp;
  #L431790.  if v4 == 0 then goto L4317de;
  #L431794.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43179a.  v4:= temp @kind object;
  #L43179c.  v4:= (`io.reactivex.MaybeSource`) v4 @kind object;
  #L4317a0.  if v4 != 0 then goto L4317ba;
  #L4317a4.  v0:= new `java.lang.NullPointerException`;
  #L4317a8.  v1:= "One of the sources is null" @kind object;
  #L4317ac.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4317b2.  call `error`(v0, v7) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/MaybeObserver;)V` @kind static;
  #L4317b8.  return @kind void;
  #L4317ba.  v5:= length @variable v0;
  #L4317bc.  if v3 != v5 then goto L4317d2;
  #L4317c0.  v5:= v3 ^> 2;
  #L4317c4.  v5:= v5 + v3 @kind int;
  #L4317c6.  call temp:= `copyOf`(v0, v5) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L4317cc.  v0:= temp @kind object;
  #L4317ce.  v0:= (`io.reactivex.MaybeSource`[]) v0 @kind object;
  #L4317d2.  v5:= v3 + 1;
  #L4317d6.  v0[v3]:= v4 @kind object;
  #L4317da.  v3:= v5;
  #L4317dc.  goto L431788;
  #L4317de.  if v3 != 0 then goto L4317ea;
  #L4317e2.  call `complete`(v7) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.complete:(Lio/reactivex/MaybeObserver;)V` @kind static;
  #L4317e8.  return @kind void;
  #L4317ea.  v1:= 1I;
  #L4317ec.  if v3 != v1 then goto L431810;
  #L4317f0.  v0:= v0[v2] @kind object;
  #L4317f4.  v1:= new `io.reactivex.internal.operators.maybe.MaybeMap$a`;
  #L4317f8.  v2:= new `io.reactivex.internal.operators.maybe.MaybeZipIterable$a`;
  #L4317fc.  call `<init>`(v2, v6) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipIterable$a;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeZipIterable;)V` @kind direct;
  #L431802.  call `<init>`(v1, v7, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeMap$a;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/Function;)V` @kind direct;
  #L431808.  call `subscribe`(v0, v1) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L43180e.  return @kind void;
  #L431810.  v1:= new `io.reactivex.internal.operators.maybe.MaybeZipArray$b`;
  #L431814.  v4:= v6.`io.reactivex.internal.operators.maybe.MaybeZipIterable.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L431818.  call `<init>`(v1, v7, v3, v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$b;.<init>:(Lio/reactivex/MaybeObserver;ILio/reactivex/functions/Function;)V` @kind direct;
  #L43181e.  call `onSubscribe`(v7, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L431824.  if v2 >= v3 then goto L43184e;
  #L431828.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$b;.isDisposed:()Z` @kind virtual;
  #L43182e.  v7:= temp;
  #L431830.  if v7 == 0 then goto L431836;
  #L431834.  return @kind void;
  #L431836.  v7:= v0[v2] @kind object;
  #L43183a.  v4:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$b.c` @type ^`io.reactivex.internal.operators.maybe.MaybeZipArray$c`[] @kind object;
  #L43183e.  v4:= v4[v2] @kind object;
  #L431842.  call `subscribe`(v7, v4) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L431848.  v2:= v2 + 1;
  #L43184c.  goto L431824;
  #L43184e.  return @kind void;
  #L431850.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L431852.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L431858.  call `error`(v0, v7) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/MaybeObserver;)V` @kind static;
  #L43185e.  return @kind void;
  catch `java.lang.Throwable` @[L431778..L4317da] goto L431850;
}
