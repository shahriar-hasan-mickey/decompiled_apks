record `io.reactivex.internal.operators.maybe.MaybeConcatIterable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Flowable` @kind class {
  `java.lang.Iterable` `io.reactivex.internal.operators.maybe.MaybeConcatIterable.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeConcatIterable` v0 @kind this, `java.lang.Iterable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable;.<init>:(Ljava/lang/Iterable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42abcc.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L42abd2.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatIterable.b` @type ^`java.lang.Iterable` := v1 @kind object;
  #L42abd6.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeConcatIterable` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L42abe8.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeConcatIterable.b` @type ^`java.lang.Iterable` @kind object;
  #L42abec.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L42abf2.  v0:= temp @kind object;
  #L42abf4.  v1:= "The sources Iterable returned a null Iterator" @kind object;
  #L42abf8.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L42abfe.  v0:= temp @kind object;
  #L42ac00.  v0:= (`java.util.Iterator`) v0 @kind object;
  #L42ac04.  v1:= new `io.reactivex.internal.operators.maybe.MaybeConcatIterable$a`;
  #L42ac08.  call `<init>`(v1, v3, v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$a;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @kind direct;
  #L42ac0e.  call `onSubscribe`(v3, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L42ac14.  call `a`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$a;.a:()V` @kind virtual;
  #L42ac1a.  return @kind void;
  #L42ac1c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42ac1e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42ac24.  call `error`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L42ac2a.  return @kind void;
  catch `java.lang.Throwable` @[L42abe8..L42ac04] goto L42ac1c;
}
