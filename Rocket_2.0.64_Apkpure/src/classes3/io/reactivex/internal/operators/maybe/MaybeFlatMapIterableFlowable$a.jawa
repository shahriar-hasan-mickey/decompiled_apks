record `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.MaybeObserver` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.c` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.d` @AccessFlag ;
  `java.util.Iterator` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.f` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.g` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42cb38.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L42cb3e.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L42cb42.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L42cb46.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L42cb4a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L42cb50.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L42cb54.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cb68.  v0:= 1I;
  #L42cb6a.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.f` @type ^`boolean` := v0 @kind boolean;
  #L42cb6e.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42cb72.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42cb78.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42cb7c.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.d` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L42cb80.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cb94.  v0:= 0I;
  #L42cb96.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` := v0 @kind object;
  #L42cb9a.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v11 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L42cbac.  call temp:= `getAndIncrement`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L42cbb2.  v0:= temp;
  #L42cbb4.  if v0 == 0 then goto L42cbba;
  #L42cbb8.  return @kind void;
  #L42cbba.  v0:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L42cbbe.  v1:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L42cbc2.  v2:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.g` @type ^`boolean` @kind boolean;
  #L42cbc6.  if v2 == 0 then goto L42cbde;
  #L42cbca.  if v1 == 0 then goto L42cbde;
  #L42cbce.  v1:= 0I;
  #L42cbd0.  call `onNext`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42cbd6.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L42cbdc.  return @kind void;
  #L42cbde.  v2:= 1I;
  #L42cbe0.  if v1 == 0 then goto L42cc92;
  #L42cbe4.  v3:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L42cbe8.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L42cbee.  v3:= temp @kind wide;
  #L42cbf0.  v5:= 9223372036854775807L;
  #L42cbfa.  v7:= lcmp(v3, v5);
  #L42cbfe.  if v7 != 0 then goto L42cc0a;
  #L42cc02.  call `e`(v11, v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.e:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @kind virtual;
  #L42cc08.  return @kind void;
  #L42cc0a.  v5:= 0L;
  #L42cc0e.  v7:= v5 @kind wide;
  #L42cc10.  v9:= lcmp(v7, v3);
  #L42cc14.  if v9 == 0 then goto L42cc80;
  #L42cc18.  v9:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L42cc1c.  if v9 == 0 then goto L42cc22;
  #L42cc20.  return @kind void;
  #L42cc22.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L42cc28.  v9:= temp @kind object;
  #L42cc2a.  v10:= "The iterator returned a null value" @kind object;
  #L42cc2e.  call temp:= `requireNonNull`(v9, v10) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L42cc34.  v9:= temp @kind object;
  #L42cc36.  call `onNext`(v0, v9) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42cc3c.  v9:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L42cc40.  if v9 == 0 then goto L42cc46;
  #L42cc44.  return @kind void;
  #L42cc46.  v9:= 1L;
  #L42cc4a.  v7:= v7 + v9 @kind long;
  #L42cc4c.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L42cc52.  v9:= temp;
  #L42cc54.  if v9 != 0 then goto L42cc10;
  #L42cc58.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L42cc5e.  return @kind void;
  #L42cc60.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42cc62.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42cc68.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42cc6e.  return @kind void;
  #L42cc70.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42cc72.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42cc78.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42cc7e.  return @kind void;
  #L42cc80.  v3:= lcmp(v7, v5);
  #L42cc84.  if v3 == 0 then goto L42cc92;
  #L42cc88.  v3:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L42cc8c.  call temp:= `produced`(v3, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L42cc92.  v2:= -v2 @kind int;
  #L42cc94.  call temp:= `addAndGet`(v11, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L42cc9a.  v2:= temp;
  #L42cc9c.  if v2 != 0 then goto L42cca2;
  #L42cca0.  return @kind void;
  #L42cca2.  if v1 != 0 then goto L42cbe0;
  #L42cca6.  v1:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L42ccaa.  goto L42cbe0;
  catch `java.lang.Throwable` @[L42cc22..L42cc36] goto L42cc70;
  catch `java.lang.Throwable` @[L42cc4c..L42cc54] goto L42cc60;
}
procedure `void` `e`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `java.util.Iterator` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.e:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @AccessFlag  {
    temp;
    v0;

  #L42ccd4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L42ccd8.  if v0 == 0 then goto L42ccde;
  #L42ccdc.  return @kind void;
  #L42ccde.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L42cce4.  v0:= temp @kind object;
  #L42cce6.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42ccec.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L42ccf0.  if v0 == 0 then goto L42ccf6;
  #L42ccf4.  return @kind void;
  #L42ccf6.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L42ccfc.  v0:= temp;
  #L42ccfe.  if v0 != 0 then goto L42ccd4;
  #L42cd02.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L42cd08.  return @kind void;
  #L42cd0a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42cd0c.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42cd12.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42cd18.  return @kind void;
  #L42cd1a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42cd1c.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42cd22.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42cd28.  return @kind void;
  catch `java.lang.Throwable` @[L42ccde..L42cce6] goto L42cd1a;
  catch `java.lang.Throwable` @[L42ccf6..L42ccfe] goto L42cd0a;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cab0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L42cab4.  if v0 != 0 then goto L42cabc;
  #L42cab8.  v0:= 1I;
  #L42caba.  goto L42cabe;
  #L42cabc.  v0:= 0I;
  #L42cabe.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cd54.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L42cd58.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L42cd5e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cd70.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42cd74.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.d` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L42cd78.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L42cd7c.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42cd82.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cd94.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42cd98.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42cd9e.  v0:= temp;
  #L42cda0.  if v0 == 0 then goto L42cdb2;
  #L42cda4.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.d` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L42cda8.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L42cdac.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L42cdb2.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cdc4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L42cdc8.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42cdce.  v2:= temp @kind object;
  #L42cdd0.  v2:= (`java.lang.Iterable`) v2 @kind object;
  #L42cdd4.  call temp:= `iterator`(v2) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L42cdda.  v2:= temp @kind object;
  #L42cddc.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L42cde2.  v0:= temp;
  #L42cde4.  if v0 != 0 then goto L42cdf4;
  #L42cde8.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L42cdec.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L42cdf2.  return @kind void;
  #L42cdf4.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` := v2 @kind object;
  #L42cdf8.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.drain:()V` @kind virtual;
  #L42cdfe.  return @kind void;
  #L42ce00.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42ce02.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42ce08.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L42ce0c.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42ce12.  return @kind void;
  catch `java.lang.Throwable` @[L42cdc4..L42cde4] goto L42ce00;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42caf4.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L42caf8.  v1:= 0I;
  #L42cafa.  if v0 == 0 then goto L42cb24;
  #L42cafe.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L42cb04.  v2:= temp @kind object;
  #L42cb06.  v3:= "The iterator returned a null value" @kind object;
  #L42cb0a.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L42cb10.  v2:= temp @kind object;
  #L42cb12.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L42cb18.  v0:= temp;
  #L42cb1a.  if v0 != 0 then goto L42cb22;
  #L42cb1e.  v4.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` := v1 @kind object;
  #L42cb22.  return v2 @kind object;
  #L42cb24.  return v1 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42ce30.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L42ce36.  v0:= temp;
  #L42ce38.  if v0 == 0 then goto L42ce4c;
  #L42ce3c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L42ce40.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L42ce46.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.drain:()V` @kind virtual;
  #L42ce4c.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cad0.  v0:= 2I;
  #L42cad2.  v2:= v2 ^& v0 @kind int;
  #L42cad4.  if v2 == 0 then goto L42cae0;
  #L42cad8.  v2:= 1I;
  #L42cada.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.g` @type ^`boolean` := v2 @kind boolean;
  #L42cade.  return v0;
  #L42cae0.  v2:= 0I;
  #L42cae2.  return v2;
}
