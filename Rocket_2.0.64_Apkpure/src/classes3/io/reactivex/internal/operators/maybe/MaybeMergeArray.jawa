record `io.reactivex.internal.operators.maybe.MaybeMergeArray` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Flowable` @kind class {
  `io.reactivex.MaybeSource`[] `io.reactivex.internal.operators.maybe.MaybeMergeArray.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeMergeArray` v0 @kind this, `io.reactivex.MaybeSource`[] v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray;.<init>:([Lio/reactivex/MaybeSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42ef04.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L42ef0a.  v0.`io.reactivex.internal.operators.maybe.MaybeMergeArray.b` @type ^`io.reactivex.MaybeSource`[] := v1 @kind object;
  #L42ef0e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeMergeArray` v6 @kind this, `org.reactivestreams.Subscriber` v7 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42ef20.  v0:= v6.`io.reactivex.internal.operators.maybe.MaybeMergeArray.b` @type ^`io.reactivex.MaybeSource`[] @kind object;
  #L42ef24.  v1:= length @variable v0;
  #L42ef26.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L42ef2c.  v2:= temp;
  #L42ef2e.  if v1 > v2 then goto L42ef3e;
  #L42ef32.  v2:= new `io.reactivex.internal.operators.maybe.MaybeMergeArray$c`;
  #L42ef36.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$c;.<init>:(I)V` @kind direct;
  #L42ef3c.  goto L42ef48;
  #L42ef3e.  v2:= new `io.reactivex.internal.operators.maybe.MaybeMergeArray$a`;
  #L42ef42.  call `<init>`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$a;.<init>:()V` @kind direct;
  #L42ef48.  v3:= new `io.reactivex.internal.operators.maybe.MaybeMergeArray$b`;
  #L42ef4c.  call `<init>`(v3, v7, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.<init>:(Lorg/reactivestreams/Subscriber;ILio/reactivex/internal/operators/maybe/MaybeMergeArray$d;)V` @kind direct;
  #L42ef52.  call `onSubscribe`(v7, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L42ef58.  v7:= v3.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42ef5c.  v1:= length @variable v0;
  #L42ef5e.  v2:= 0I;
  #L42ef60.  if v2 >= v1 then goto L42ef8e;
  #L42ef64.  v4:= v0[v2] @kind object;
  #L42ef68.  call temp:= `isCancelled`(v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.isCancelled:()Z` @kind virtual;
  #L42ef6e.  v5:= temp;
  #L42ef70.  if v5 != 0 then goto L42ef8e;
  #L42ef74.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42ef7a.  v5:= temp @kind object;
  #L42ef7c.  if v5 == 0 then goto L42ef82;
  #L42ef80.  goto L42ef8e;
  #L42ef82.  call `subscribe`(v4, v3) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L42ef88.  v2:= v2 + 1;
  #L42ef8c.  goto L42ef60;
  #L42ef8e.  return @kind void;
}
