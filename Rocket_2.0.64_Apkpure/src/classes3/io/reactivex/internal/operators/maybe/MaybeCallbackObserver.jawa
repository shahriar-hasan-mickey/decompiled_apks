record `io.reactivex.internal.operators.maybe.MaybeCallbackObserver` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.maybe.MaybeCallbackObserver.a` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.maybe.MaybeCallbackObserver.b` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.maybe.MaybeCallbackObserver.c` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeCallbackObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeCallbackObserver` v0 @kind this, `io.reactivex.functions.Consumer` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Action` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCallbackObserver;.<init>:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42a374.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42a37a.  v0.`io.reactivex.internal.operators.maybe.MaybeCallbackObserver.a` @type ^`io.reactivex.functions.Consumer` := v1 @kind object;
  #L42a37e.  v0.`io.reactivex.internal.operators.maybe.MaybeCallbackObserver.b` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L42a382.  v0.`io.reactivex.internal.operators.maybe.MaybeCallbackObserver.c` @type ^`io.reactivex.functions.Action` := v3 @kind object;
  #L42a386.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeCallbackObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCallbackObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L42a398.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42a39e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeCallbackObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCallbackObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a34c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42a352.  v0:= temp @kind object;
  #L42a354.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L42a358.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42a35e.  v0:= temp;
  #L42a360.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeCallbackObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCallbackObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a3b0.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42a3b4.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L42a3ba.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeCallbackObserver.c` @type ^`io.reactivex.functions.Action` @kind object;
  #L42a3be.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L42a3c4.  goto L42a3d4;
  #L42a3c6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42a3c8.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42a3ce.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42a3d4.  return @kind void;
  catch `java.lang.Throwable` @[L42a3ba..L42a3c4] goto L42a3c6;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeCallbackObserver` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCallbackObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42a3f4.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42a3f8.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L42a3fe.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeCallbackObserver.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L42a402.  call `accept`(v0, v5) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L42a408.  goto L42a434;
  #L42a40a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42a40c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42a412.  v1:= new `io.reactivex.exceptions.CompositeException`;
  #L42a416.  v2:= 2I;
  #L42a418.  v2:= new `java.lang.Throwable`[v2];
  #L42a41c.  v3:= 0I;
  #L42a41e.  v2[v3]:= v5 @kind object;
  #L42a422.  v5:= 1I;
  #L42a424.  v2[v5]:= v0 @kind object;
  #L42a428.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L42a42e.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42a434.  return @kind void;
  catch `java.lang.Throwable` @[L42a3fe..L42a408] goto L42a40a;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeCallbackObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCallbackObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L42a454.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42a45a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeCallbackObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCallbackObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a46c.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42a470.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L42a476.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeCallbackObserver.a` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L42a47a.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L42a480.  goto L42a490;
  #L42a482.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42a484.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42a48a.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42a490.  return @kind void;
  catch `java.lang.Throwable` @[L42a476..L42a480] goto L42a482;
}
