record `io.reactivex.internal.operators.maybe.MaybeFromRunnable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class, `java.util.concurrent.Callable` @kind interface {
  `java.lang.Runnable` `io.reactivex.internal.operators.maybe.MaybeFromRunnable.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFromRunnable` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromRunnable;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42ddf0.  call `<init>`(v0) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L42ddf6.  v0.`io.reactivex.internal.operators.maybe.MaybeFromRunnable.a` @type ^`java.lang.Runnable` := v1 @kind object;
  #L42ddfa.  return @kind void;
}
procedure `java.lang.Object` `call`(`io.reactivex.internal.operators.maybe.MaybeFromRunnable` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromRunnable;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42ddd0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFromRunnable.a` @type ^`java.lang.Runnable` @kind object;
  #L42ddd4.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L42ddda.  v0:= 0I;
  #L42dddc.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeFromRunnable` v2 @kind this, `io.reactivex.MaybeObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromRunnable;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L42de0c.  call temp:= `empty`() @signature `Lio/reactivex/disposables/Disposables;.empty:()Lio/reactivex/disposables/Disposable;` @kind static;
  #L42de12.  v0:= temp @kind object;
  #L42de14.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42de1a.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42de20.  v1:= temp;
  #L42de22.  if v1 != 0 then goto L42de66;
  #L42de26.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeFromRunnable.a` @type ^`java.lang.Runnable` @kind object;
  #L42de2a.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L42de30.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42de36.  v0:= temp;
  #L42de38.  if v0 != 0 then goto L42de66;
  #L42de3c.  call `onComplete`(v3) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L42de42.  goto L42de66;
  #L42de44.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42de46.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42de4c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42de52.  v0:= temp;
  #L42de54.  if v0 != 0 then goto L42de60;
  #L42de58.  call `onError`(v3, v1) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42de5e.  goto L42de66;
  #L42de60.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42de66.  return @kind void;
  catch `java.lang.Throwable` @[L42de26..L42de30] goto L42de44;
}
