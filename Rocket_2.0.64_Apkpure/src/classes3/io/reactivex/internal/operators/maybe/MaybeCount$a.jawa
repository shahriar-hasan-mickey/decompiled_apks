record `io.reactivex.internal.operators.maybe.MaybeCount$a` @kind class @AccessFlag FINAL extends `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.maybe.MaybeCount$a.a` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeCount$a.b` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeCount$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCount$a;.<init>:(Lio/reactivex/SingleObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42ade4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42adea.  v0.`io.reactivex.internal.operators.maybe.MaybeCount$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L42adee.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeCount$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCount$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42ae00.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeCount$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42ae04.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42ae0a.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42ae0e.  v1.`io.reactivex.internal.operators.maybe.MaybeCount$a.b` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L42ae12.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeCount$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCount$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42adc4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeCount$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42adc8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42adce.  v0:= temp;
  #L42add0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeCount$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCount$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42ae24.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42ae28.  v3.`io.reactivex.internal.operators.maybe.MaybeCount$a.b` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L42ae2c.  v0:= v3.`io.reactivex.internal.operators.maybe.MaybeCount$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42ae30.  v1:= 0L;
  #L42ae34.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L42ae3a.  v1:= temp @kind object;
  #L42ae3c.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L42ae42.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeCount$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCount$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42ae54.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42ae58.  v1.`io.reactivex.internal.operators.maybe.MaybeCount$a.b` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L42ae5c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeCount$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42ae60.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42ae66.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeCount$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCount$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42ae78.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeCount$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42ae7c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42ae82.  v0:= temp;
  #L42ae84.  if v0 == 0 then goto L42ae96;
  #L42ae88.  v1.`io.reactivex.internal.operators.maybe.MaybeCount$a.b` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L42ae8c.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeCount$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42ae90.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42ae96.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeCount$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCount$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42aea8.  v3:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42aeac.  v2.`io.reactivex.internal.operators.maybe.MaybeCount$a.b` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L42aeb0.  v3:= v2.`io.reactivex.internal.operators.maybe.MaybeCount$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42aeb4.  v0:= 1L;
  #L42aeb8.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L42aebe.  v0:= temp @kind object;
  #L42aec0.  call `onSuccess`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L42aec6.  return @kind void;
}
