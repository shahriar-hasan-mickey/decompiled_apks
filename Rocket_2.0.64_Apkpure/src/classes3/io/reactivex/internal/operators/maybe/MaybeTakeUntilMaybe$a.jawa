record `io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a$a` `io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilMaybe$a;.<init>:(Lio/reactivex/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42fdd0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42fdd6.  v0.`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L42fdda.  v1:= new `io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a$a`;
  #L42fdde.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilMaybe$a$a;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeTakeUntilMaybe$a;)V` @kind direct;
  #L42fde4.  v0.`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a$a` := v1 @kind object;
  #L42fde8.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilMaybe$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L42fee8.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42feee.  v0:= temp;
  #L42fef0.  if v0 == 0 then goto L42fefe;
  #L42fef4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42fef8.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L42fefe.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilMaybe$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L42ff10.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42ff16.  v0:= temp;
  #L42ff18.  if v0 == 0 then goto L42ff28;
  #L42ff1c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42ff20.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42ff26.  goto L42ff2e;
  #L42ff28.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42ff2e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fdfc.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42fe02.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a$a` @kind object;
  #L42fe06.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42fe0c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fda8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42fdae.  v0:= temp @kind object;
  #L42fdb0.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L42fdb4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42fdba.  v0:= temp;
  #L42fdbc.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42fe20.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a$a` @kind object;
  #L42fe24.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42fe2a.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42fe2e.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L42fe34.  v1:= temp @kind object;
  #L42fe36.  if v1 == v0 then goto L42fe44;
  #L42fe3a.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42fe3e.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L42fe44.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42fe58.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a$a` @kind object;
  #L42fe5c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42fe62.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42fe66.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L42fe6c.  v1:= temp @kind object;
  #L42fe6e.  if v1 == v0 then goto L42fe7e;
  #L42fe72.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42fe76.  call `onError`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42fe7c.  goto L42fe84;
  #L42fe7e.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42fe84.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilMaybe$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L42fe98.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42fe9e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilMaybe$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42feb0.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a$a` @kind object;
  #L42feb4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42feba.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42febe.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L42fec4.  v1:= temp @kind object;
  #L42fec6.  if v1 == v0 then goto L42fed4;
  #L42feca.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42fece.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L42fed4.  return @kind void;
}
