record `io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` `io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a;.<init>:(Lio/reactivex/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L430060.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L430066.  v0.`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L43006a.  v1:= new `io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a$a`;
  #L43006e.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a$a;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a;)V` @kind direct;
  #L430074.  v0.`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` := v1 @kind object;
  #L430078.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L430178.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43017e.  v0:= temp;
  #L430180.  if v0 == 0 then goto L43018e;
  #L430184.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L430188.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L43018e.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4301a0.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4301a6.  v0:= temp;
  #L4301a8.  if v0 == 0 then goto L4301b8;
  #L4301ac.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4301b0.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4301b6.  goto L4301be;
  #L4301b8.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4301be.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43008c.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L430092.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` @kind object;
  #L430096.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43009c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430038.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43003e.  v0:= temp @kind object;
  #L430040.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L430044.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43004a.  v0:= temp;
  #L43004c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4300b0.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` @kind object;
  #L4300b4.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4300ba.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4300be.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4300c4.  v1:= temp @kind object;
  #L4300c6.  if v1 == v0 then goto L4300d4;
  #L4300ca.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4300ce.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L4300d4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4300e8.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` @kind object;
  #L4300ec.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4300f2.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4300f6.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4300fc.  v1:= temp @kind object;
  #L4300fe.  if v1 == v0 then goto L43010e;
  #L430102.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L430106.  call `onError`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43010c.  goto L430114;
  #L43010e.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L430114.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L430128.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L43012e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L430140.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` @kind object;
  #L430144.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43014a.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43014e.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L430154.  v1:= temp @kind object;
  #L430156.  if v1 == v0 then goto L430164;
  #L43015a.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L43015e.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L430164.  return @kind void;
}
