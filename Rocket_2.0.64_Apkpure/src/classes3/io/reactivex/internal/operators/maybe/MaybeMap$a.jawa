record `io.reactivex.internal.operators.maybe.MaybeMap$a` @kind class @AccessFlag FINAL extends `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeMap$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeMap$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeMap$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeMap$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMap$a;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42e71c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42e722.  v0.`io.reactivex.internal.operators.maybe.MaybeMap$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L42e726.  v0.`io.reactivex.internal.operators.maybe.MaybeMap$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L42e72a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeMap$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMap$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42e73c.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeMap$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42e740.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42e744.  v2.`io.reactivex.internal.operators.maybe.MaybeMap$a.c` @type ^`io.reactivex.disposables.Disposable` := v1 @kind object;
  #L42e748.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42e74e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeMap$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMap$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e6fc.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMap$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42e700.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42e706.  v0:= temp;
  #L42e708.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeMap$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMap$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e760.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMap$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42e764.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L42e76a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeMap$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMap$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e77c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMap$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42e780.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42e786.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeMap$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMap$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e798.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMap$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42e79c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42e7a2.  v0:= temp;
  #L42e7a4.  if v0 == 0 then goto L42e7b6;
  #L42e7a8.  v1.`io.reactivex.internal.operators.maybe.MaybeMap$a.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L42e7ac.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeMap$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42e7b0.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42e7b6.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeMap$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMap$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e7c8.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMap$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L42e7cc.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42e7d2.  v2:= temp @kind object;
  #L42e7d4.  v0:= "The mapper returned a null item" @kind object;
  #L42e7d8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L42e7de.  v2:= temp @kind object;
  #L42e7e0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMap$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42e7e4.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L42e7ea.  return @kind void;
  #L42e7ec.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42e7ee.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42e7f4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMap$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42e7f8.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42e7fe.  return @kind void;
  catch `java.lang.Throwable` @[L42e7c8..L42e7e0] goto L42e7ec;
}
