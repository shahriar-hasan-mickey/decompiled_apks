record `io.reactivex.internal.operators.maybe.MaybeFromFuture` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class {
  `java.util.concurrent.Future` `io.reactivex.internal.operators.maybe.MaybeFromFuture.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.maybe.MaybeFromFuture.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.maybe.MaybeFromFuture.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFromFuture` v0 @kind this, `java.util.concurrent.Future` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromFuture;.<init>:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42dcd4.  call `<init>`(v0) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L42dcda.  v0.`io.reactivex.internal.operators.maybe.MaybeFromFuture.a` @type ^`java.util.concurrent.Future` := v1 @kind object;
  #L42dcde.  v0.`io.reactivex.internal.operators.maybe.MaybeFromFuture.b` @type ^`long` := v2 @kind wide;
  #L42dce2.  v0.`io.reactivex.internal.operators.maybe.MaybeFromFuture.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L42dce6.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeFromFuture` v6 @kind this, `io.reactivex.MaybeObserver` v7 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromFuture;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42dcf8.  call temp:= `empty`() @signature `Lio/reactivex/disposables/Disposables;.empty:()Lio/reactivex/disposables/Disposable;` @kind static;
  #L42dcfe.  v0:= temp @kind object;
  #L42dd00.  call `onSubscribe`(v7, v0) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42dd06.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42dd0c.  v1:= temp;
  #L42dd0e.  if v1 != 0 then goto L42dda8;
  #L42dd12.  v1:= v6.`io.reactivex.internal.operators.maybe.MaybeFromFuture.b` @type ^`long` @kind wide;
  #L42dd16.  v3:= 0L;
  #L42dd1a.  v5:= lcmp(v1, v3);
  #L42dd1e.  if v5 > 0 then goto L42dd30;
  #L42dd22.  v1:= v6.`io.reactivex.internal.operators.maybe.MaybeFromFuture.a` @type ^`java.util.concurrent.Future` @kind object;
  #L42dd26.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/Future;.get:()Ljava/lang/Object;` @kind interface;
  #L42dd2c.  v1:= temp @kind object;
  #L42dd2e.  goto L42dd40;
  #L42dd30.  v3:= v6.`io.reactivex.internal.operators.maybe.MaybeFromFuture.a` @type ^`java.util.concurrent.Future` @kind object;
  #L42dd34.  v4:= v6.`io.reactivex.internal.operators.maybe.MaybeFromFuture.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L42dd38.  call temp:= `get`(v3, v1, v4) @signature `Ljava/util/concurrent/Future;.get:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @kind interface;
  #L42dd3e.  v1:= temp @kind object;
  #L42dd40.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42dd46.  v0:= temp;
  #L42dd48.  if v0 != 0 then goto L42dda8;
  #L42dd4c.  if v1 != 0 then goto L42dd58;
  #L42dd50.  call `onComplete`(v7) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L42dd56.  goto L42dda8;
  #L42dd58.  call `onSuccess`(v7, v1) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L42dd5e.  goto L42dda8;
  #L42dd60.  v1:= Exception @type ^`java.util.concurrent.TimeoutException` @kind object;
  #L42dd62.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42dd68.  v0:= temp;
  #L42dd6a.  if v0 != 0 then goto L42dd74;
  #L42dd6e.  call `onError`(v7, v1) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42dd74.  return @kind void;
  #L42dd76.  v1:= Exception @type ^`java.util.concurrent.ExecutionException` @kind object;
  #L42dd78.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42dd7e.  v0:= temp;
  #L42dd80.  if v0 != 0 then goto L42dd92;
  #L42dd84.  call temp:= `getCause`(v1) @signature `Ljava/util/concurrent/ExecutionException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L42dd8a.  v0:= temp @kind object;
  #L42dd8c.  call `onError`(v7, v0) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42dd92.  return @kind void;
  #L42dd94.  v1:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L42dd96.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42dd9c.  v0:= temp;
  #L42dd9e.  if v0 != 0 then goto L42dda8;
  #L42dda2.  call `onError`(v7, v1) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42dda8.  return @kind void;
  catch `java.lang.InterruptedException` @[L42dd12..L42dd40] goto L42dd94;
  catch `java.util.concurrent.ExecutionException` @[L42dd12..L42dd40] goto L42dd76;
  catch `java.util.concurrent.TimeoutException` @[L42dd12..L42dd40] goto L42dd60;
}
