record `io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$a` @kind class @AccessFlag FINAL extends `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoAfterSuccess$a;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/Consumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42bbc0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42bbc6.  v0.`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L42bbca.  v0.`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$a.b` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L42bbce.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoAfterSuccess$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42bbe0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42bbe4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42bbea.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoAfterSuccess$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42bba0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42bba4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42bbaa.  v0:= temp;
  #L42bbac.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoAfterSuccess$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42bbfc.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42bc00.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L42bc06.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoAfterSuccess$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42bc18.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42bc1c.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42bc22.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoAfterSuccess$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42bc34.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42bc38.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42bc3e.  v0:= temp;
  #L42bc40.  if v0 == 0 then goto L42bc52;
  #L42bc44.  v1.`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$a.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L42bc48.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42bc4c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42bc52.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoAfterSuccess$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42bc64.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42bc68.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L42bc6e.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess$a.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L42bc72.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L42bc78.  goto L42bc88;
  #L42bc7a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42bc7c.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42bc82.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42bc88.  return @kind void;
  catch `java.lang.Throwable` @[L42bc6e..L42bc78] goto L42bc7a;
}
