record `io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$a;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42d454.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42d45a.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L42d45e.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L42d462.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L42d474.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42d47a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d42c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42d432.  v0:= temp @kind object;
  #L42d434.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L42d438.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42d43e.  v0:= temp;
  #L42d440.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42d48c.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42d490.  v1:= new `java.util.NoSuchElementException`;
  #L42d494.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L42d49a.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42d4a0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d4b4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42d4b8.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42d4be.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L42d4d0.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42d4d6.  v1:= temp;
  #L42d4d8.  if v1 == 0 then goto L42d4e6;
  #L42d4dc.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42d4e0.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42d4e6.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42d4f8.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L42d4fc.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42d502.  v3:= temp @kind object;
  #L42d504.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L42d508.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L42d50e.  v3:= temp @kind object;
  #L42d510.  v3:= (`io.reactivex.SingleSource`) v3 @kind object;
  #L42d514.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$a;.isDisposed:()Z` @kind virtual;
  #L42d51a.  v0:= temp;
  #L42d51c.  if v0 != 0 then goto L42d534;
  #L42d520.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$b`;
  #L42d524.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L42d528.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/SingleObserver;)V` @kind direct;
  #L42d52e.  call `subscribe`(v3, v0) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L42d534.  return @kind void;
  #L42d536.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42d538.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42d53e.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L42d544.  return @kind void;
  catch `java.lang.Throwable` @[L42d4f8..L42d514] goto L42d536;
}
