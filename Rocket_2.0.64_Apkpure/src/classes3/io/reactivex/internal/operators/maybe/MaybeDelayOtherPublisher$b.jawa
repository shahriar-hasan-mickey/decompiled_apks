record `io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b.a` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b.b` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b.c` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$b;.<init>:(Lio/reactivex/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42b498.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42b49e.  v0.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L42b4a2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42b4b4.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b.c` @type ^`java.lang.Throwable` @kind object;
  #L42b4b8.  if v0 == 0 then goto L42b4c8;
  #L42b4bc.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42b4c0.  call `onError`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42b4c6.  goto L42b4e6;
  #L42b4c8.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b.b` @type ^`java.lang.Object` @kind object;
  #L42b4cc.  if v0 == 0 then goto L42b4dc;
  #L42b4d0.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42b4d4.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L42b4da.  goto L42b4e6;
  #L42b4dc.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42b4e0.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L42b4e6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42b4f8.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b.c` @type ^`java.lang.Throwable` @kind object;
  #L42b4fc.  if v0 != 0 then goto L42b50c;
  #L42b500.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42b504.  call `onError`(v0, v6) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42b50a.  goto L42b532;
  #L42b50c.  v1:= v5.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42b510.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L42b514.  v3:= 2I;
  #L42b516.  v3:= new `java.lang.Throwable`[v3];
  #L42b51a.  v4:= 0I;
  #L42b51c.  v3[v4]:= v0 @kind object;
  #L42b520.  v0:= 1I;
  #L42b522.  v3[v0]:= v6 @kind object;
  #L42b526.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L42b52c.  call `onError`(v1, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42b532.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b544.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42b54a.  v2:= temp @kind object;
  #L42b54c.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L42b550.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L42b554.  if v2 == v0 then goto L42b56a;
  #L42b558.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L42b55e.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L42b564.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$b;.onComplete:()V` @kind virtual;
  #L42b56a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42b57c.  call temp:= `setOnce`(v2, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L42b582.  v0:= temp;
  #L42b584.  if v0 == 0 then goto L42b598;
  #L42b588.  v0:= 9223372036854775807L;
  #L42b592.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L42b598.  return @kind void;
}
