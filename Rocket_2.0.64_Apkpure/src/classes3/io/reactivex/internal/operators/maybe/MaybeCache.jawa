record `io.reactivex.internal.operators.maybe.MaybeCache` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class, `io.reactivex.MaybeObserver` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.maybe.MaybeCache.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.maybe.MaybeCache.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.maybe.MaybeCache.c` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.internal.operators.maybe.MaybeCache.d` @AccessFlag ;
}
global `io.reactivex.internal.operators.maybe.MaybeCache$a`[] `@@io.reactivex.internal.operators.maybe.MaybeCache.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.maybe.MaybeCache$a`[] `@@io.reactivex.internal.operators.maybe.MaybeCache.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L42a0c8.  v0:= 0I;
  #L42a0ca.  v1:= new `io.reactivex.internal.operators.maybe.MaybeCache$a`[v0];
  #L42a0ce.  `@@io.reactivex.internal.operators.maybe.MaybeCache.e` @type ^`io.reactivex.internal.operators.maybe.MaybeCache$a`[] := v1 @kind object;
  #L42a0d2.  v0:= new `io.reactivex.internal.operators.maybe.MaybeCache$a`[v0];
  #L42a0d6.  `@@io.reactivex.internal.operators.maybe.MaybeCache.f` @type ^`io.reactivex.internal.operators.maybe.MaybeCache$a`[] := v0 @kind object;
  #L42a0da.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeCache` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.<init>:(Lio/reactivex/MaybeSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L42a0ec.  call `<init>`(v1) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L42a0f2.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L42a0f6.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L42a0fc.  v1.`io.reactivex.internal.operators.maybe.MaybeCache.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L42a100.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L42a104.  v0:= `@@io.reactivex.internal.operators.maybe.MaybeCache.e` @type ^`io.reactivex.internal.operators.maybe.MaybeCache$a`[] @kind object;
  #L42a108.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L42a10e.  v1.`io.reactivex.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L42a112.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.maybe.MaybeCache` v4 @kind this, `io.reactivex.internal.operators.maybe.MaybeCache$a` v5 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.a:(Lio/reactivex/internal/operators/maybe/MaybeCache$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42a074.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a078.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42a07e.  v0:= temp @kind object;
  #L42a080.  v0:= (`io.reactivex.internal.operators.maybe.MaybeCache$a`[]) v0 @kind object;
  #L42a084.  v1:= `@@io.reactivex.internal.operators.maybe.MaybeCache.f` @type ^`io.reactivex.internal.operators.maybe.MaybeCache$a`[] @kind object;
  #L42a088.  v2:= 0I;
  #L42a08a.  if v0 != v1 then goto L42a090;
  #L42a08e.  return v2;
  #L42a090.  v1:= length @variable v0;
  #L42a092.  v3:= v1 + 1;
  #L42a096.  v3:= new `io.reactivex.internal.operators.maybe.MaybeCache$a`[v3];
  #L42a09a.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L42a0a0.  v3[v1]:= v5 @kind object;
  #L42a0a4.  v1:= v4.`io.reactivex.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a0a8.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L42a0ae.  v0:= temp;
  #L42a0b0.  if v0 == 0 then goto L42a074;
  #L42a0b4.  v5:= 1I;
  #L42a0b6.  return v5;
}
procedure `void` `b`(`io.reactivex.internal.operators.maybe.MaybeCache` v6 @kind this, `io.reactivex.internal.operators.maybe.MaybeCache$a` v7 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.b:(Lio/reactivex/internal/operators/maybe/MaybeCache$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42a230.  v0:= v6.`io.reactivex.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a234.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42a23a.  v0:= temp @kind object;
  #L42a23c.  v0:= (`io.reactivex.internal.operators.maybe.MaybeCache$a`[]) v0 @kind object;
  #L42a240.  v1:= length @variable v0;
  #L42a242.  if v1 != 0 then goto L42a248;
  #L42a246.  return @kind void;
  #L42a248.  v2:= -1I;
  #L42a24a.  v3:= 0I;
  #L42a24c.  v4:= 0I;
  #L42a24e.  if v4 >= v1 then goto L42a264;
  #L42a252.  v5:= v0[v4] @kind object;
  #L42a256.  if v5 != v7 then goto L42a25e;
  #L42a25a.  v2:= v4;
  #L42a25c.  goto L42a264;
  #L42a25e.  v4:= v4 + 1;
  #L42a262.  goto L42a24e;
  #L42a264.  if v2 >= 0 then goto L42a26a;
  #L42a268.  return @kind void;
  #L42a26a.  v4:= 1I;
  #L42a26c.  if v1 != v4 then goto L42a276;
  #L42a270.  v1:= `@@io.reactivex.internal.operators.maybe.MaybeCache.e` @type ^`io.reactivex.internal.operators.maybe.MaybeCache$a`[] @kind object;
  #L42a274.  goto L42a294;
  #L42a276.  v5:= v1 + -1;
  #L42a27a.  v5:= new `io.reactivex.internal.operators.maybe.MaybeCache$a`[v5];
  #L42a27e.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L42a284.  v3:= v2 + 1;
  #L42a288.  v1:= v1 - v2 @kind int;
  #L42a28a.  v1:= v1 - v4 @kind int;
  #L42a28c.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L42a292.  v1:= v5 @kind object;
  #L42a294.  v2:= v6.`io.reactivex.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a298.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L42a29e.  v0:= temp;
  #L42a2a0.  if v0 == 0 then goto L42a230;
  #L42a2a4.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeCache` v5 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42a124.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a128.  v1:= `@@io.reactivex.internal.operators.maybe.MaybeCache.f` @type ^`io.reactivex.internal.operators.maybe.MaybeCache$a`[] @kind object;
  #L42a12c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L42a132.  v0:= temp @kind object;
  #L42a134.  v0:= (`io.reactivex.internal.operators.maybe.MaybeCache$a`[]) v0 @kind object;
  #L42a138.  v1:= length @variable v0;
  #L42a13a.  v2:= 0I;
  #L42a13c.  if v2 >= v1 then goto L42a160;
  #L42a140.  v3:= v0[v2] @kind object;
  #L42a144.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache$a;.isDisposed:()Z` @kind virtual;
  #L42a14a.  v4:= temp;
  #L42a14c.  if v4 != 0 then goto L42a15a;
  #L42a150.  v3:= v3.`io.reactivex.internal.operators.maybe.MaybeCache$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42a154.  call `onComplete`(v3) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L42a15a.  v2:= v2 + 1;
  #L42a15e.  goto L42a13c;
  #L42a160.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeCache` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42a174.  v5.`io.reactivex.internal.operators.maybe.MaybeCache.d` @type ^`java.lang.Throwable` := v6 @kind object;
  #L42a178.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a17c.  v1:= `@@io.reactivex.internal.operators.maybe.MaybeCache.f` @type ^`io.reactivex.internal.operators.maybe.MaybeCache$a`[] @kind object;
  #L42a180.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L42a186.  v0:= temp @kind object;
  #L42a188.  v0:= (`io.reactivex.internal.operators.maybe.MaybeCache$a`[]) v0 @kind object;
  #L42a18c.  v1:= length @variable v0;
  #L42a18e.  v2:= 0I;
  #L42a190.  if v2 >= v1 then goto L42a1b4;
  #L42a194.  v3:= v0[v2] @kind object;
  #L42a198.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache$a;.isDisposed:()Z` @kind virtual;
  #L42a19e.  v4:= temp;
  #L42a1a0.  if v4 != 0 then goto L42a1ae;
  #L42a1a4.  v3:= v3.`io.reactivex.internal.operators.maybe.MaybeCache$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42a1a8.  call `onError`(v3, v6) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42a1ae.  v2:= v2 + 1;
  #L42a1b2.  goto L42a190;
  #L42a1b4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeCache` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L42a1c8.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeCache` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42a1dc.  v5.`io.reactivex.internal.operators.maybe.MaybeCache.c` @type ^`java.lang.Object` := v6 @kind object;
  #L42a1e0.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a1e4.  v1:= `@@io.reactivex.internal.operators.maybe.MaybeCache.f` @type ^`io.reactivex.internal.operators.maybe.MaybeCache$a`[] @kind object;
  #L42a1e8.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L42a1ee.  v0:= temp @kind object;
  #L42a1f0.  v0:= (`io.reactivex.internal.operators.maybe.MaybeCache$a`[]) v0 @kind object;
  #L42a1f4.  v1:= length @variable v0;
  #L42a1f6.  v2:= 0I;
  #L42a1f8.  if v2 >= v1 then goto L42a21c;
  #L42a1fc.  v3:= v0[v2] @kind object;
  #L42a200.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache$a;.isDisposed:()Z` @kind virtual;
  #L42a206.  v4:= temp;
  #L42a208.  if v4 != 0 then goto L42a216;
  #L42a20c.  v3:= v3.`io.reactivex.internal.operators.maybe.MaybeCache$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L42a210.  call `onSuccess`(v3, v6) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L42a216.  v2:= v2 + 1;
  #L42a21a.  goto L42a1f8;
  #L42a21c.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeCache` v2 @kind this, `io.reactivex.MaybeObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L42a2b8.  v0:= new `io.reactivex.internal.operators.maybe.MaybeCache$a`;
  #L42a2bc.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache$a;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/internal/operators/maybe/MaybeCache;)V` @kind direct;
  #L42a2c2.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42a2c8.  call temp:= `a`(v2, v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.a:(Lio/reactivex/internal/operators/maybe/MaybeCache$a;)Z` @kind virtual;
  #L42a2ce.  v1:= temp;
  #L42a2d0.  if v1 == 0 then goto L42a306;
  #L42a2d4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache$a;.isDisposed:()Z` @kind virtual;
  #L42a2da.  v3:= temp;
  #L42a2dc.  if v3 == 0 then goto L42a2e8;
  #L42a2e0.  call `b`(v2, v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.b:(Lio/reactivex/internal/operators/maybe/MaybeCache$a;)V` @kind virtual;
  #L42a2e6.  return @kind void;
  #L42a2e8.  v3:= v2.`io.reactivex.internal.operators.maybe.MaybeCache.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42a2ec.  v0:= 0I;
  #L42a2ee.  call temp:= `getAndSet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L42a2f4.  v3:= temp @kind object;
  #L42a2f6.  v3:= (`io.reactivex.MaybeSource`) v3 @kind object;
  #L42a2fa.  if v3 == 0 then goto L42a304;
  #L42a2fe.  call `subscribe`(v3, v2) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L42a304.  return @kind void;
  #L42a306.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache$a;.isDisposed:()Z` @kind virtual;
  #L42a30c.  v0:= temp;
  #L42a30e.  if v0 != 0 then goto L42a338;
  #L42a312.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeCache.d` @type ^`java.lang.Throwable` @kind object;
  #L42a316.  if v0 == 0 then goto L42a322;
  #L42a31a.  call `onError`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42a320.  goto L42a338;
  #L42a322.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeCache.c` @type ^`java.lang.Object` @kind object;
  #L42a326.  if v0 == 0 then goto L42a332;
  #L42a32a.  call `onSuccess`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L42a330.  goto L42a338;
  #L42a332.  call `onComplete`(v3) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L42a338.  return @kind void;
}
