record `io.reactivex.internal.operators.single.SingleTimeout$b` @kind class @AccessFlag FINAL extends `io.reactivex.SingleObserver` @kind interface {
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.single.SingleTimeout$b.a` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.single.SingleTimeout$b.b` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleTimeout$b.c` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.internal.operators.single.SingleTimeout` `io.reactivex.internal.operators.single.SingleTimeout$b.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleTimeout$b` v0 @kind this, `io.reactivex.internal.operators.single.SingleTimeout` v1 @kind object, `java.util.concurrent.atomic.AtomicBoolean` v2 @kind object, `io.reactivex.disposables.CompositeDisposable` v3 @kind object, `io.reactivex.SingleObserver` v4 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$b;.<init>:(Lio/reactivex/internal/operators/single/SingleTimeout;Ljava/util/concurrent/atomic/AtomicBoolean;Lio/reactivex/disposables/CompositeDisposable;Lio/reactivex/SingleObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L451fa8.  v0.`io.reactivex.internal.operators.single.SingleTimeout$b.d` @type ^`io.reactivex.internal.operators.single.SingleTimeout` := v1 @kind object;
  #L451fac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L451fb2.  v0.`io.reactivex.internal.operators.single.SingleTimeout$b.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L451fb6.  v0.`io.reactivex.internal.operators.single.SingleTimeout$b.b` @type ^`io.reactivex.disposables.CompositeDisposable` := v3 @kind object;
  #L451fba.  v0.`io.reactivex.internal.operators.single.SingleTimeout$b.c` @type ^`io.reactivex.SingleObserver` := v4 @kind object;
  #L451fbe.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleTimeout$b` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L451fd0.  v0:= v3.`io.reactivex.internal.operators.single.SingleTimeout$b.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L451fd4.  v1:= 0I;
  #L451fd6.  v2:= 1I;
  #L451fd8.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L451fde.  v0:= temp;
  #L451fe0.  if v0 == 0 then goto L451ff8;
  #L451fe4.  v0:= v3.`io.reactivex.internal.operators.single.SingleTimeout$b.b` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L451fe8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L451fee.  v0:= v3.`io.reactivex.internal.operators.single.SingleTimeout$b.c` @type ^`io.reactivex.SingleObserver` @kind object;
  #L451ff2.  call `onError`(v0, v4) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L451ff8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleTimeout$b` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45200c.  v0:= v1.`io.reactivex.internal.operators.single.SingleTimeout$b.b` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L452010.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L452016.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleTimeout$b` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$b;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L452028.  v0:= v3.`io.reactivex.internal.operators.single.SingleTimeout$b.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L45202c.  v1:= 0I;
  #L45202e.  v2:= 1I;
  #L452030.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L452036.  v0:= temp;
  #L452038.  if v0 == 0 then goto L452050;
  #L45203c.  v0:= v3.`io.reactivex.internal.operators.single.SingleTimeout$b.b` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L452040.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L452046.  v0:= v3.`io.reactivex.internal.operators.single.SingleTimeout$b.c` @type ^`io.reactivex.SingleObserver` @kind object;
  #L45204a.  call `onSuccess`(v0, v4) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L452050.  return @kind void;
}
