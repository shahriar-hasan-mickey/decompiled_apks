record `io.reactivex.internal.operators.single.SingleZipArray$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.SingleObserver` @kind interface {
  `io.reactivex.internal.operators.single.SingleZipArray$b` `io.reactivex.internal.operators.single.SingleZipArray$c.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.single.SingleZipArray$c.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleZipArray$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleZipArray$c` v0 @kind this, `io.reactivex.internal.operators.single.SingleZipArray$b` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$c;.<init>:(Lio/reactivex/internal/operators/single/SingleZipArray$b;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L452a0c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L452a12.  v0.`io.reactivex.internal.operators.single.SingleZipArray$c.a` @type ^`io.reactivex.internal.operators.single.SingleZipArray$b` := v1 @kind object;
  #L452a16.  v0.`io.reactivex.internal.operators.single.SingleZipArray$c.b` @type ^`int` := v2;
  #L452a1a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.single.SingleZipArray$c` v0 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$c;.a:()V` @AccessFlag PUBLIC {
    temp;

  #L452a2c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L452a32.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleZipArray$c` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L452a44.  v0:= v2.`io.reactivex.internal.operators.single.SingleZipArray$c.a` @type ^`io.reactivex.internal.operators.single.SingleZipArray$b` @kind object;
  #L452a48.  v1:= v2.`io.reactivex.internal.operators.single.SingleZipArray$c.b` @type ^`int`;
  #L452a4c.  call `b`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$b;.b:(Ljava/lang/Throwable;I)V` @kind virtual;
  #L452a52.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleZipArray$c` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$c;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L452a64.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L452a6a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleZipArray$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$c;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L452a7c.  v0:= v2.`io.reactivex.internal.operators.single.SingleZipArray$c.a` @type ^`io.reactivex.internal.operators.single.SingleZipArray$b` @kind object;
  #L452a80.  v1:= v2.`io.reactivex.internal.operators.single.SingleZipArray$c.b` @type ^`int`;
  #L452a84.  call `c`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$b;.c:(Ljava/lang/Object;I)V` @kind virtual;
  #L452a8a.  return @kind void;
}
