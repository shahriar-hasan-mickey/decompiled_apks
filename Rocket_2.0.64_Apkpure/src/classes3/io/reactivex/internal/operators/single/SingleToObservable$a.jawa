record `io.reactivex.internal.operators.single.SingleToObservable$a` @kind class @AccessFlag FINAL extends `io.reactivex.SingleObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.single.SingleToObservable$a.a` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.single.SingleToObservable$a.b` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleToObservable$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToObservable$a;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4522f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4522fa.  v0.`io.reactivex.internal.operators.single.SingleToObservable$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4522fe.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleToObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleToObservable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L452310.  v0:= v1.`io.reactivex.internal.operators.single.SingleToObservable$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L452314.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45231a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleToObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleToObservable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4522d4.  v0:= v1.`io.reactivex.internal.operators.single.SingleToObservable$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4522d8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4522de.  v0:= temp;
  #L4522e0.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleToObservable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToObservable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45232c.  v0:= v1.`io.reactivex.internal.operators.single.SingleToObservable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L452330.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L452336.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleToObservable$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToObservable$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L452348.  v0:= v1.`io.reactivex.internal.operators.single.SingleToObservable$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45234c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L452352.  v0:= temp;
  #L452354.  if v0 == 0 then goto L452366;
  #L452358.  v1.`io.reactivex.internal.operators.single.SingleToObservable$a.b` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L45235c.  v2:= v1.`io.reactivex.internal.operators.single.SingleToObservable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L452360.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L452366.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleToObservable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToObservable$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L452378.  v0:= v1.`io.reactivex.internal.operators.single.SingleToObservable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L45237c.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L452382.  v2:= v1.`io.reactivex.internal.operators.single.SingleToObservable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L452386.  call `onComplete`(v2) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L45238c.  return @kind void;
}
