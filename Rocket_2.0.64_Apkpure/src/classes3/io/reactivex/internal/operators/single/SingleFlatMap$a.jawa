record `io.reactivex.internal.operators.single.SingleFlatMap$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.SingleObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleFlatMap$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.single.SingleFlatMap$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleFlatMap$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleFlatMap$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMap$a;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L450228.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L45022e.  v0.`io.reactivex.internal.operators.single.SingleFlatMap$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L450232.  v0.`io.reactivex.internal.operators.single.SingleFlatMap$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L450236.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleFlatMap$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMap$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L450248.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L45024e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleFlatMap$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMap$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450200.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L450206.  v0:= temp @kind object;
  #L450208.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L45020c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L450212.  v0:= temp;
  #L450214.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleFlatMap$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMap$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450260.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMap$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L450264.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45026a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleFlatMap$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMap$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L45027c.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L450282.  v1:= temp;
  #L450284.  if v1 == 0 then goto L450292;
  #L450288.  v1:= v0.`io.reactivex.internal.operators.single.SingleFlatMap$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L45028c.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L450292.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleFlatMap$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMap$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4502a4.  v0:= v2.`io.reactivex.internal.operators.single.SingleFlatMap$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L4502a8.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4502ae.  v3:= temp @kind object;
  #L4502b0.  v0:= "The single returned by the mapper is null" @kind object;
  #L4502b4.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4502ba.  v3:= temp @kind object;
  #L4502bc.  v3:= (`io.reactivex.SingleSource`) v3 @kind object;
  #L4502c0.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/internal/operators/single/SingleFlatMap$a;.isDisposed:()Z` @kind virtual;
  #L4502c6.  v0:= temp;
  #L4502c8.  if v0 != 0 then goto L4502e0;
  #L4502cc.  v0:= new `io.reactivex.internal.operators.single.SingleFlatMap$a$a`;
  #L4502d0.  v1:= v2.`io.reactivex.internal.operators.single.SingleFlatMap$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4502d4.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/single/SingleFlatMap$a$a;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/SingleObserver;)V` @kind direct;
  #L4502da.  call `subscribe`(v3, v0) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L4502e0.  return @kind void;
  #L4502e2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4502e4.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4502ea.  v0:= v2.`io.reactivex.internal.operators.single.SingleFlatMap$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4502ee.  call `onError`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4502f4.  return @kind void;
  catch `java.lang.Throwable` @[L4502a4..L4502c0] goto L4502e2;
}
