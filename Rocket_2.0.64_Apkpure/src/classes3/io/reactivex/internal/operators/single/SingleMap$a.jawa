record `io.reactivex.internal.operators.single.SingleMap$a` @kind class @AccessFlag FINAL extends `io.reactivex.SingleObserver` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleMap$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.single.SingleMap$a.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleMap$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleMap$a;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L451528.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45152e.  v0.`io.reactivex.internal.operators.single.SingleMap$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L451532.  v0.`io.reactivex.internal.operators.single.SingleMap$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L451536.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleMap$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleMap$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L451548.  v0:= v1.`io.reactivex.internal.operators.single.SingleMap$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L45154c.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L451552.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleMap$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleMap$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L451564.  v0:= v1.`io.reactivex.internal.operators.single.SingleMap$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L451568.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L45156e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleMap$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleMap$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L451580.  v0:= v1.`io.reactivex.internal.operators.single.SingleMap$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L451584.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L45158a.  v2:= temp @kind object;
  #L45158c.  v0:= v1.`io.reactivex.internal.operators.single.SingleMap$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L451590.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L451596.  return @kind void;
  #L451598.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45159a.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4515a0.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/single/SingleMap$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4515a6.  return @kind void;
  catch `java.lang.Throwable` @[L451580..L45158c] goto L451598;
}
