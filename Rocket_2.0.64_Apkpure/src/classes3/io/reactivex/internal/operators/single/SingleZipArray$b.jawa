record `io.reactivex.internal.operators.single.SingleZipArray$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleZipArray$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.single.SingleZipArray$b.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.single.SingleZipArray$c`[] `io.reactivex.internal.operators.single.SingleZipArray$b.c` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.operators.single.SingleZipArray$b.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleZipArray$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleZipArray$b` v1 @kind this, `io.reactivex.SingleObserver` v2 @kind object, `int` v3 , `io.reactivex.functions.Function` v4 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$b;.<init>:(Lio/reactivex/SingleObserver;ILio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L45289c.  call `<init>`(v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4528a2.  v1.`io.reactivex.internal.operators.single.SingleZipArray$b.a` @type ^`io.reactivex.SingleObserver` := v2 @kind object;
  #L4528a6.  v1.`io.reactivex.internal.operators.single.SingleZipArray$b.b` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L4528aa.  v2:= new `io.reactivex.internal.operators.single.SingleZipArray$c`[v3];
  #L4528ae.  v4:= 0I;
  #L4528b0.  if v4 >= v3 then goto L4528c8;
  #L4528b4.  v0:= new `io.reactivex.internal.operators.single.SingleZipArray$c`;
  #L4528b8.  call `<init>`(v0, v1, v4) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$c;.<init>:(Lio/reactivex/internal/operators/single/SingleZipArray$b;I)V` @kind direct;
  #L4528be.  v2[v4]:= v0 @kind object;
  #L4528c2.  v4:= v4 + 1;
  #L4528c6.  goto L4528b0;
  #L4528c8.  v1.`io.reactivex.internal.operators.single.SingleZipArray$b.c` @type ^`io.reactivex.internal.operators.single.SingleZipArray$c`[] := v2 @kind object;
  #L4528cc.  v2:= new `java.lang.Object`[v3];
  #L4528d0.  v1.`io.reactivex.internal.operators.single.SingleZipArray$b.d` @type ^`java.lang.Object`[] := v2 @kind object;
  #L4528d4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.single.SingleZipArray$b` v4 @kind this, `int` v5 ) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$b;.a:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L452924.  v0:= v4.`io.reactivex.internal.operators.single.SingleZipArray$b.c` @type ^`io.reactivex.internal.operators.single.SingleZipArray$c`[] @kind object;
  #L452928.  v1:= length @variable v0;
  #L45292a.  v2:= 0I;
  #L45292c.  if v2 >= v5 then goto L452940;
  #L452930.  v3:= v0[v2] @kind object;
  #L452934.  call `a`(v3) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$c;.a:()V` @kind virtual;
  #L45293a.  v2:= v2 + 1;
  #L45293e.  goto L45292c;
  #L452940.  v5:= v5 + 1;
  #L452944.  if v5 >= v1 then goto L452954;
  #L452948.  v2:= v0[v5] @kind object;
  #L45294c.  call `a`(v2) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$c;.a:()V` @kind virtual;
  #L452952.  goto L452940;
  #L452954.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.single.SingleZipArray$b` v1 @kind this, `java.lang.Throwable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$b;.b:(Ljava/lang/Throwable;I)V` @AccessFlag  {
    temp;
    v0;

  #L452968.  v0:= 0I;
  #L45296a.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L452970.  v0:= temp;
  #L452972.  if v0 <= 0 then goto L452988;
  #L452976.  call `a`(v1, v3) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$b;.a:(I)V` @kind virtual;
  #L45297c.  v3:= v1.`io.reactivex.internal.operators.single.SingleZipArray$b.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L452980.  call `onError`(v3, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L452986.  goto L45298e;
  #L452988.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45298e.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.single.SingleZipArray$b` v1 @kind this, `java.lang.Object` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$b;.c:(Ljava/lang/Object;I)V` @AccessFlag  {
    temp;
    v0;

  #L4529a0.  v0:= v1.`io.reactivex.internal.operators.single.SingleZipArray$b.d` @type ^`java.lang.Object`[] @kind object;
  #L4529a4.  v0[v3]:= v2 @kind object;
  #L4529a8.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4529ae.  v2:= temp;
  #L4529b0.  if v2 != 0 then goto L4529ee;
  #L4529b4.  v2:= v1.`io.reactivex.internal.operators.single.SingleZipArray$b.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L4529b8.  v3:= v1.`io.reactivex.internal.operators.single.SingleZipArray$b.d` @type ^`java.lang.Object`[] @kind object;
  #L4529bc.  call temp:= `apply`(v2, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4529c2.  v2:= temp @kind object;
  #L4529c4.  v3:= "The zipper returned a null value" @kind object;
  #L4529c8.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4529ce.  v2:= temp @kind object;
  #L4529d0.  v3:= v1.`io.reactivex.internal.operators.single.SingleZipArray$b.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4529d4.  call `onSuccess`(v3, v2) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4529da.  goto L4529ee;
  #L4529dc.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4529de.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4529e4.  v3:= v1.`io.reactivex.internal.operators.single.SingleZipArray$b.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4529e8.  call `onError`(v3, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4529ee.  return @kind void;
  catch `java.lang.Throwable` @[L4529b4..L4529d0] goto L4529dc;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleZipArray$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4528e8.  v0:= 0I;
  #L4528ea.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L4528f0.  v1:= temp;
  #L4528f2.  if v1 <= 0 then goto L452910;
  #L4528f6.  v1:= v4.`io.reactivex.internal.operators.single.SingleZipArray$b.c` @type ^`io.reactivex.internal.operators.single.SingleZipArray$c`[] @kind object;
  #L4528fa.  v2:= length @variable v1;
  #L4528fc.  if v0 >= v2 then goto L452910;
  #L452900.  v3:= v1[v0] @kind object;
  #L452904.  call `a`(v3) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$c;.a:()V` @kind virtual;
  #L45290a.  v0:= v0 + 1;
  #L45290e.  goto L4528fc;
  #L452910.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleZipArray$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L452878.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L45287e.  v0:= temp;
  #L452880.  if v0 > 0 then goto L452888;
  #L452884.  v0:= 1I;
  #L452886.  goto L45288a;
  #L452888.  v0:= 0I;
  #L45288a.  return v0;
}
