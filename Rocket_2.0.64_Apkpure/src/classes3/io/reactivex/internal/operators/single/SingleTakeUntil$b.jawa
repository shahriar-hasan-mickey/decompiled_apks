record `io.reactivex.internal.operators.single.SingleTakeUntil$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `io.reactivex.internal.operators.single.SingleTakeUntil$a` `io.reactivex.internal.operators.single.SingleTakeUntil$b.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleTakeUntil$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleTakeUntil$b` v0 @kind this, `io.reactivex.internal.operators.single.SingleTakeUntil$a` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$b;.<init>:(Lio/reactivex/internal/operators/single/SingleTakeUntil$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L451d24.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L451d2a.  v0.`io.reactivex.internal.operators.single.SingleTakeUntil$b.a` @type ^`io.reactivex.internal.operators.single.SingleTakeUntil$a` := v1 @kind object;
  #L451d2e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.single.SingleTakeUntil$b` v0 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$b;.a:()V` @AccessFlag PUBLIC {
    temp;

  #L451d40.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L451d46.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.single.SingleTakeUntil$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L451d58.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L451d5e.  v0:= temp @kind object;
  #L451d60.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L451d64.  if v0 == v1 then goto L451d82;
  #L451d68.  call `lazySet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L451d6e.  v0:= v2.`io.reactivex.internal.operators.single.SingleTakeUntil$b.a` @type ^`io.reactivex.internal.operators.single.SingleTakeUntil$a` @kind object;
  #L451d72.  v1:= new `java.util.concurrent.CancellationException`;
  #L451d76.  call `<init>`(v1) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L451d7c.  call `a`(v0, v1) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$a;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L451d82.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleTakeUntil$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L451d94.  v0:= v1.`io.reactivex.internal.operators.single.SingleTakeUntil$b.a` @type ^`io.reactivex.internal.operators.single.SingleTakeUntil$a` @kind object;
  #L451d98.  call `a`(v0, v2) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$a;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L451d9e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.single.SingleTakeUntil$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L451db0.  call temp:= `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L451db6.  v2:= temp;
  #L451db8.  if v2 == 0 then goto L451dd0;
  #L451dbc.  v2:= v1.`io.reactivex.internal.operators.single.SingleTakeUntil$b.a` @type ^`io.reactivex.internal.operators.single.SingleTakeUntil$a` @kind object;
  #L451dc0.  v0:= new `java.util.concurrent.CancellationException`;
  #L451dc4.  call `<init>`(v0) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L451dca.  call `a`(v2, v0) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$a;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L451dd0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleTakeUntil$b` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L451de4.  call temp:= `setOnce`(v2, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L451dea.  v0:= temp;
  #L451dec.  if v0 == 0 then goto L451e00;
  #L451df0.  v0:= 9223372036854775807L;
  #L451dfa.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L451e00.  return @kind void;
}
