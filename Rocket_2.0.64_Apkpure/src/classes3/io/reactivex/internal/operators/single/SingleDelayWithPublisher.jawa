record `io.reactivex.internal.operators.single.SingleDelayWithPublisher` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class {
  `io.reactivex.SingleSource` `io.reactivex.internal.operators.single.SingleDelayWithPublisher.a` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.single.SingleDelayWithPublisher.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleDelayWithPublisher` v0 @kind this, `io.reactivex.SingleSource` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithPublisher;.<init>:(Lio/reactivex/SingleSource;Lorg/reactivestreams/Publisher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L44f458.  call `<init>`(v0) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L44f45e.  v0.`io.reactivex.internal.operators.single.SingleDelayWithPublisher.a` @type ^`io.reactivex.SingleSource` := v1 @kind object;
  #L44f462.  v0.`io.reactivex.internal.operators.single.SingleDelayWithPublisher.b` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L44f466.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.single.SingleDelayWithPublisher` v3 @kind this, `io.reactivex.SingleObserver` v4 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithPublisher;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L44f478.  v0:= v3.`io.reactivex.internal.operators.single.SingleDelayWithPublisher.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L44f47c.  v1:= new `io.reactivex.internal.operators.single.SingleDelayWithPublisher$a`;
  #L44f480.  v2:= v3.`io.reactivex.internal.operators.single.SingleDelayWithPublisher.a` @type ^`io.reactivex.SingleSource` @kind object;
  #L44f484.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithPublisher$a;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/SingleSource;)V` @kind direct;
  #L44f48a.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L44f490.  return @kind void;
}
