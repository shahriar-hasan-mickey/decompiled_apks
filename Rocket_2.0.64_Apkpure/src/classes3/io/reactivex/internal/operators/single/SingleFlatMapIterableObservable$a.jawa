record `io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicIntQueueDisposable` @kind class, `io.reactivex.SingleObserver` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.c` @AccessFlag ;
  `java.util.Iterator` `io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.d` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.f` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4508f0.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L4508f6.  v0.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4508fa.  v0.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L4508fe.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450910.  v0:= 0I;
  #L450912.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` := v0 @kind object;
  #L450916.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450928.  v0:= 1I;
  #L45092a.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L45092e.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L450932.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L450938.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45093c.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.c` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L450940.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450850.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.e` @type ^`boolean` @kind boolean;
  #L450854.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450868.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` @kind object;
  #L45086c.  if v0 != 0 then goto L450874;
  #L450870.  v0:= 1I;
  #L450872.  goto L450876;
  #L450874.  v0:= 0I;
  #L450876.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450954.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L450958.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.c` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L45095c.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L450960.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L450966.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450978.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45097c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L450982.  v0:= temp;
  #L450984.  if v0 == 0 then goto L450996;
  #L450988.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L45098c.  v2:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L450990.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L450996.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4509a8.  v0:= v2.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4509ac.  v1:= v2.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L4509b0.  call temp:= `apply`(v1, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4509b6.  v3:= temp @kind object;
  #L4509b8.  v3:= (`java.lang.Iterable`) v3 @kind object;
  #L4509bc.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4509c2.  v3:= temp @kind object;
  #L4509c4.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4509ca.  v1:= temp;
  #L4509cc.  if v1 != 0 then goto L4509d8;
  #L4509d0.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4509d6.  return @kind void;
  #L4509d8.  v1:= v2.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.f` @type ^`boolean` @kind boolean;
  #L4509dc.  if v1 == 0 then goto L4509f4;
  #L4509e0.  v2.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` := v3 @kind object;
  #L4509e4.  v3:= 0I;
  #L4509e6.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4509ec.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4509f2.  return @kind void;
  #L4509f4.  v1:= v2.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.e` @type ^`boolean` @kind boolean;
  #L4509f8.  if v1 == 0 then goto L4509fe;
  #L4509fc.  return @kind void;
  #L4509fe.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L450a04.  v1:= temp @kind object;
  #L450a06.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L450a0c.  v1:= v2.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.e` @type ^`boolean` @kind boolean;
  #L450a10.  if v1 == 0 then goto L450a16;
  #L450a14.  return @kind void;
  #L450a16.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L450a1c.  v1:= temp;
  #L450a1e.  if v1 != 0 then goto L4509f4;
  #L450a22.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L450a28.  return @kind void;
  #L450a2a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L450a2c.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L450a32.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L450a38.  return @kind void;
  #L450a3a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L450a3c.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L450a42.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L450a48.  return @kind void;
  #L450a4a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L450a4c.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L450a52.  v0:= v2.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L450a56.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L450a5c.  return @kind void;
  catch `java.lang.Throwable` @[L4509ac..L4509cc] goto L450a4a;
  catch `java.lang.Throwable` @[L4509fe..L450a06] goto L450a3a;
  catch `java.lang.Throwable` @[L450a16..L450a1e] goto L450a2a;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4508ac.  v0:= v4.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` @kind object;
  #L4508b0.  v1:= 0I;
  #L4508b2.  if v0 == 0 then goto L4508dc;
  #L4508b6.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4508bc.  v2:= temp @kind object;
  #L4508be.  v3:= "The iterator returned a null value" @kind object;
  #L4508c2.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4508c8.  v2:= temp @kind object;
  #L4508ca.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4508d0.  v0:= temp;
  #L4508d2.  if v0 != 0 then goto L4508da;
  #L4508d6.  v4.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` := v1 @kind object;
  #L4508da.  return v2 @kind object;
  #L4508dc.  return v1 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450888.  v0:= 2I;
  #L45088a.  v2:= v2 ^& v0 @kind int;
  #L45088c.  if v2 == 0 then goto L450898;
  #L450890.  v2:= 1I;
  #L450892.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.f` @type ^`boolean` := v2 @kind boolean;
  #L450896.  return v0;
  #L450898.  v2:= 0I;
  #L45089a.  return v2;
}
