record `io.reactivex.internal.operators.single.SingleCache` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class, `io.reactivex.SingleObserver` @kind interface {
  `io.reactivex.SingleSource` `io.reactivex.internal.operators.single.SingleCache.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.single.SingleCache.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.single.SingleCache.c` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.single.SingleCache.d` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.internal.operators.single.SingleCache.e` @AccessFlag ;
}
global `io.reactivex.internal.operators.single.SingleCache$a`[] `@@io.reactivex.internal.operators.single.SingleCache.f` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.single.SingleCache$a`[] `@@io.reactivex.internal.operators.single.SingleCache.g` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/single/SingleCache;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L44e9c0.  v0:= 0I;
  #L44e9c2.  v1:= new `io.reactivex.internal.operators.single.SingleCache$a`[v0];
  #L44e9c6.  `@@io.reactivex.internal.operators.single.SingleCache.f` @type ^`io.reactivex.internal.operators.single.SingleCache$a`[] := v1 @kind object;
  #L44e9ca.  v0:= new `io.reactivex.internal.operators.single.SingleCache$a`[v0];
  #L44e9ce.  `@@io.reactivex.internal.operators.single.SingleCache.g` @type ^`io.reactivex.internal.operators.single.SingleCache$a`[] := v0 @kind object;
  #L44e9d2.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleCache` v1 @kind this, `io.reactivex.SingleSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCache;.<init>:(Lio/reactivex/SingleSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L44e9e4.  call `<init>`(v1) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L44e9ea.  v1.`io.reactivex.internal.operators.single.SingleCache.a` @type ^`io.reactivex.SingleSource` := v2 @kind object;
  #L44e9ee.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L44e9f2.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L44e9f8.  v1.`io.reactivex.internal.operators.single.SingleCache.b` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L44e9fc.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L44ea00.  v0:= `@@io.reactivex.internal.operators.single.SingleCache.f` @type ^`io.reactivex.internal.operators.single.SingleCache$a`[] @kind object;
  #L44ea04.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L44ea0a.  v1.`io.reactivex.internal.operators.single.SingleCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L44ea0e.  return @kind void;
}
procedure `boolean` `c`(`io.reactivex.internal.operators.single.SingleCache` v4 @kind this, `io.reactivex.internal.operators.single.SingleCache$a` v5 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCache;.c:(Lio/reactivex/internal/operators/single/SingleCache$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44e96c.  v0:= v4.`io.reactivex.internal.operators.single.SingleCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44e970.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e976.  v0:= temp @kind object;
  #L44e978.  v0:= (`io.reactivex.internal.operators.single.SingleCache$a`[]) v0 @kind object;
  #L44e97c.  v1:= `@@io.reactivex.internal.operators.single.SingleCache.g` @type ^`io.reactivex.internal.operators.single.SingleCache$a`[] @kind object;
  #L44e980.  v2:= 0I;
  #L44e982.  if v0 != v1 then goto L44e988;
  #L44e986.  return v2;
  #L44e988.  v1:= length @variable v0;
  #L44e98a.  v3:= v1 + 1;
  #L44e98e.  v3:= new `io.reactivex.internal.operators.single.SingleCache$a`[v3];
  #L44e992.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L44e998.  v3[v1]:= v5 @kind object;
  #L44e99c.  v1:= v4.`io.reactivex.internal.operators.single.SingleCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44e9a0.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44e9a6.  v0:= temp;
  #L44e9a8.  if v0 == 0 then goto L44e96c;
  #L44e9ac.  v5:= 1I;
  #L44e9ae.  return v5;
}
procedure `void` `d`(`io.reactivex.internal.operators.single.SingleCache` v6 @kind this, `io.reactivex.internal.operators.single.SingleCache$a` v7 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCache;.d:(Lio/reactivex/internal/operators/single/SingleCache$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L44eadc.  v0:= v6.`io.reactivex.internal.operators.single.SingleCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44eae0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44eae6.  v0:= temp @kind object;
  #L44eae8.  v0:= (`io.reactivex.internal.operators.single.SingleCache$a`[]) v0 @kind object;
  #L44eaec.  v1:= length @variable v0;
  #L44eaee.  if v1 != 0 then goto L44eaf4;
  #L44eaf2.  return @kind void;
  #L44eaf4.  v2:= -1I;
  #L44eaf6.  v3:= 0I;
  #L44eaf8.  v4:= 0I;
  #L44eafa.  if v4 >= v1 then goto L44eb10;
  #L44eafe.  v5:= v0[v4] @kind object;
  #L44eb02.  if v5 != v7 then goto L44eb0a;
  #L44eb06.  v2:= v4;
  #L44eb08.  goto L44eb10;
  #L44eb0a.  v4:= v4 + 1;
  #L44eb0e.  goto L44eafa;
  #L44eb10.  if v2 >= 0 then goto L44eb16;
  #L44eb14.  return @kind void;
  #L44eb16.  v4:= 1I;
  #L44eb18.  if v1 != v4 then goto L44eb22;
  #L44eb1c.  v1:= `@@io.reactivex.internal.operators.single.SingleCache.f` @type ^`io.reactivex.internal.operators.single.SingleCache$a`[] @kind object;
  #L44eb20.  goto L44eb40;
  #L44eb22.  v5:= v1 + -1;
  #L44eb26.  v5:= new `io.reactivex.internal.operators.single.SingleCache$a`[v5];
  #L44eb2a.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L44eb30.  v3:= v2 + 1;
  #L44eb34.  v1:= v1 - v2 @kind int;
  #L44eb36.  v1:= v1 - v4 @kind int;
  #L44eb38.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L44eb3e.  v1:= v5 @kind object;
  #L44eb40.  v2:= v6.`io.reactivex.internal.operators.single.SingleCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44eb44.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44eb4a.  v0:= temp;
  #L44eb4c.  if v0 == 0 then goto L44eadc;
  #L44eb50.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleCache` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCache;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44ea20.  v5.`io.reactivex.internal.operators.single.SingleCache.e` @type ^`java.lang.Throwable` := v6 @kind object;
  #L44ea24.  v0:= v5.`io.reactivex.internal.operators.single.SingleCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44ea28.  v1:= `@@io.reactivex.internal.operators.single.SingleCache.g` @type ^`io.reactivex.internal.operators.single.SingleCache$a`[] @kind object;
  #L44ea2c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L44ea32.  v0:= temp @kind object;
  #L44ea34.  v0:= (`io.reactivex.internal.operators.single.SingleCache$a`[]) v0 @kind object;
  #L44ea38.  v1:= length @variable v0;
  #L44ea3a.  v2:= 0I;
  #L44ea3c.  if v2 >= v1 then goto L44ea60;
  #L44ea40.  v3:= v0[v2] @kind object;
  #L44ea44.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/operators/single/SingleCache$a;.isDisposed:()Z` @kind virtual;
  #L44ea4a.  v4:= temp;
  #L44ea4c.  if v4 != 0 then goto L44ea5a;
  #L44ea50.  v3:= v3.`io.reactivex.internal.operators.single.SingleCache$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L44ea54.  call `onError`(v3, v6) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44ea5a.  v2:= v2 + 1;
  #L44ea5e.  goto L44ea3c;
  #L44ea60.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleCache` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCache;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L44ea74.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleCache` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCache;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44ea88.  v5.`io.reactivex.internal.operators.single.SingleCache.d` @type ^`java.lang.Object` := v6 @kind object;
  #L44ea8c.  v0:= v5.`io.reactivex.internal.operators.single.SingleCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44ea90.  v1:= `@@io.reactivex.internal.operators.single.SingleCache.g` @type ^`io.reactivex.internal.operators.single.SingleCache$a`[] @kind object;
  #L44ea94.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L44ea9a.  v0:= temp @kind object;
  #L44ea9c.  v0:= (`io.reactivex.internal.operators.single.SingleCache$a`[]) v0 @kind object;
  #L44eaa0.  v1:= length @variable v0;
  #L44eaa2.  v2:= 0I;
  #L44eaa4.  if v2 >= v1 then goto L44eac8;
  #L44eaa8.  v3:= v0[v2] @kind object;
  #L44eaac.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/operators/single/SingleCache$a;.isDisposed:()Z` @kind virtual;
  #L44eab2.  v4:= temp;
  #L44eab4.  if v4 != 0 then goto L44eac2;
  #L44eab8.  v3:= v3.`io.reactivex.internal.operators.single.SingleCache$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L44eabc.  call `onSuccess`(v3, v6) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L44eac2.  v2:= v2 + 1;
  #L44eac6.  goto L44eaa4;
  #L44eac8.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.single.SingleCache` v2 @kind this, `io.reactivex.SingleObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCache;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L44eb64.  v0:= new `io.reactivex.internal.operators.single.SingleCache$a`;
  #L44eb68.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/internal/operators/single/SingleCache$a;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/internal/operators/single/SingleCache;)V` @kind direct;
  #L44eb6e.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L44eb74.  call temp:= `c`(v2, v0) @signature `Lio/reactivex/internal/operators/single/SingleCache;.c:(Lio/reactivex/internal/operators/single/SingleCache$a;)Z` @kind virtual;
  #L44eb7a.  v1:= temp;
  #L44eb7c.  if v1 == 0 then goto L44ebae;
  #L44eb80.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/operators/single/SingleCache$a;.isDisposed:()Z` @kind virtual;
  #L44eb86.  v3:= temp;
  #L44eb88.  if v3 == 0 then goto L44eb92;
  #L44eb8c.  call `d`(v2, v0) @signature `Lio/reactivex/internal/operators/single/SingleCache;.d:(Lio/reactivex/internal/operators/single/SingleCache$a;)V` @kind virtual;
  #L44eb92.  v3:= v2.`io.reactivex.internal.operators.single.SingleCache.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L44eb96.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44eb9c.  v3:= temp;
  #L44eb9e.  if v3 != 0 then goto L44ebac;
  #L44eba2.  v3:= v2.`io.reactivex.internal.operators.single.SingleCache.a` @type ^`io.reactivex.SingleSource` @kind object;
  #L44eba6.  call `subscribe`(v3, v2) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L44ebac.  return @kind void;
  #L44ebae.  v0:= v2.`io.reactivex.internal.operators.single.SingleCache.e` @type ^`java.lang.Throwable` @kind object;
  #L44ebb2.  if v0 == 0 then goto L44ebbe;
  #L44ebb6.  call `onError`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44ebbc.  goto L44ebc8;
  #L44ebbe.  v0:= v2.`io.reactivex.internal.operators.single.SingleCache.d` @type ^`java.lang.Object` @kind object;
  #L44ebc2.  call `onSuccess`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L44ebc8.  return @kind void;
}
