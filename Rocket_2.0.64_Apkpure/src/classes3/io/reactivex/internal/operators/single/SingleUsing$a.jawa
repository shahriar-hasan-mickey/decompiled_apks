record `io.reactivex.internal.operators.single.SingleUsing$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.SingleObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleUsing$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.single.SingleUsing$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.single.SingleUsing$a.c` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.single.SingleUsing$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.single.SingleUsing$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleUsing$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `java.lang.Object` v2 @kind object, `boolean` v3 , `io.reactivex.functions.Consumer` v4 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleUsing$a;.<init>:(Lio/reactivex/SingleObserver;Ljava/lang/Object;ZLio/reactivex/functions/Consumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L452548.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L45254e.  v0.`io.reactivex.internal.operators.single.SingleUsing$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L452552.  v0.`io.reactivex.internal.operators.single.SingleUsing$a.c` @type ^`boolean` := v3 @kind boolean;
  #L452556.  v0.`io.reactivex.internal.operators.single.SingleUsing$a.b` @type ^`io.reactivex.functions.Consumer` := v4 @kind object;
  #L45255a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.single.SingleUsing$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleUsing$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L452598.  call temp:= `getAndSet`(v2, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L45259e.  v0:= temp @kind object;
  #L4525a0.  if v0 == v2 then goto L4525be;
  #L4525a4.  v1:= v2.`io.reactivex.internal.operators.single.SingleUsing$a.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4525a8.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4525ae.  goto L4525be;
  #L4525b0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4525b2.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4525b8.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4525be.  return @kind void;
  catch `java.lang.Throwable` @[L4525a4..L4525ae] goto L4525b0;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleUsing$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleUsing$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45256c.  v0:= v1.`io.reactivex.internal.operators.single.SingleUsing$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L452570.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L452576.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45257a.  v1.`io.reactivex.internal.operators.single.SingleUsing$a.d` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L45257e.  call `a`(v1) @signature `Lio/reactivex/internal/operators/single/SingleUsing$a;.a:()V` @kind virtual;
  #L452584.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleUsing$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleUsing$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L452528.  v0:= v1.`io.reactivex.internal.operators.single.SingleUsing$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45252c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L452532.  v0:= temp;
  #L452534.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleUsing$a` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleUsing$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4525dc.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4525e0.  v4.`io.reactivex.internal.operators.single.SingleUsing$a.d` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L4525e4.  v0:= v4.`io.reactivex.internal.operators.single.SingleUsing$a.c` @type ^`boolean` @kind boolean;
  #L4525e8.  if v0 == 0 then goto L45262e;
  #L4525ec.  call temp:= `getAndSet`(v4, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4525f2.  v0:= temp @kind object;
  #L4525f4.  if v0 == v4 then goto L45262c;
  #L4525f8.  v1:= v4.`io.reactivex.internal.operators.single.SingleUsing$a.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4525fc.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L452602.  goto L45262e;
  #L452604.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L452606.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45260c.  v1:= new `io.reactivex.exceptions.CompositeException`;
  #L452610.  v2:= 2I;
  #L452612.  v2:= new `java.lang.Throwable`[v2];
  #L452616.  v3:= 0I;
  #L452618.  v2[v3]:= v5 @kind object;
  #L45261c.  v5:= 1I;
  #L45261e.  v2[v5]:= v0 @kind object;
  #L452622.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L452628.  v5:= v1 @kind object;
  #L45262a.  goto L45262e;
  #L45262c.  return @kind void;
  #L45262e.  v0:= v4.`io.reactivex.internal.operators.single.SingleUsing$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L452632.  call `onError`(v0, v5) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L452638.  v5:= v4.`io.reactivex.internal.operators.single.SingleUsing$a.c` @type ^`boolean` @kind boolean;
  #L45263c.  if v5 != 0 then goto L452646;
  #L452640.  call `a`(v4) @signature `Lio/reactivex/internal/operators/single/SingleUsing$a;.a:()V` @kind virtual;
  #L452646.  return @kind void;
  catch `java.lang.Throwable` @[L4525f8..L452602] goto L452604;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleUsing$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleUsing$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L452664.  v0:= v1.`io.reactivex.internal.operators.single.SingleUsing$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L452668.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L45266e.  v0:= temp;
  #L452670.  if v0 == 0 then goto L452682;
  #L452674.  v1.`io.reactivex.internal.operators.single.SingleUsing$a.d` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L452678.  v2:= v1.`io.reactivex.internal.operators.single.SingleUsing$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L45267c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L452682.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleUsing$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleUsing$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L452694.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L452698.  v2.`io.reactivex.internal.operators.single.SingleUsing$a.d` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L45269c.  v0:= v2.`io.reactivex.internal.operators.single.SingleUsing$a.c` @type ^`boolean` @kind boolean;
  #L4526a0.  if v0 == 0 then goto L4526d0;
  #L4526a4.  call temp:= `getAndSet`(v2, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4526aa.  v0:= temp @kind object;
  #L4526ac.  if v0 == v2 then goto L4526ce;
  #L4526b0.  v1:= v2.`io.reactivex.internal.operators.single.SingleUsing$a.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4526b4.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4526ba.  goto L4526d0;
  #L4526bc.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4526be.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4526c4.  v0:= v2.`io.reactivex.internal.operators.single.SingleUsing$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4526c8.  call `onError`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4526ce.  return @kind void;
  #L4526d0.  v0:= v2.`io.reactivex.internal.operators.single.SingleUsing$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4526d4.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4526da.  v3:= v2.`io.reactivex.internal.operators.single.SingleUsing$a.c` @type ^`boolean` @kind boolean;
  #L4526de.  if v3 != 0 then goto L4526e8;
  #L4526e2.  call `a`(v2) @signature `Lio/reactivex/internal/operators/single/SingleUsing$a;.a:()V` @kind virtual;
  #L4526e8.  return @kind void;
  catch `java.lang.Throwable` @[L4526b0..L4526ba] goto L4526bc;
}
