record `io.reactivex.internal.operators.single.SingleAmb$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.SingleObserver` @kind interface {
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.single.SingleAmb$a.a` @AccessFlag FINAL;
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleAmb$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleAmb$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleAmb$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `io.reactivex.disposables.CompositeDisposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleAmb$a;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/disposables/CompositeDisposable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44e718.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L44e71e.  v0.`io.reactivex.internal.operators.single.SingleAmb$a.b` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L44e722.  v0.`io.reactivex.internal.operators.single.SingleAmb$a.a` @type ^`io.reactivex.disposables.CompositeDisposable` := v2 @kind object;
  #L44e726.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleAmb$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleAmb$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44e738.  v0:= 0I;
  #L44e73a.  v1:= 1I;
  #L44e73c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L44e742.  v0:= temp;
  #L44e744.  if v0 == 0 then goto L44e75e;
  #L44e748.  v0:= v2.`io.reactivex.internal.operators.single.SingleAmb$a.a` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L44e74c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L44e752.  v0:= v2.`io.reactivex.internal.operators.single.SingleAmb$a.b` @type ^`io.reactivex.SingleObserver` @kind object;
  #L44e756.  call `onError`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44e75c.  goto L44e764;
  #L44e75e.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44e764.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleAmb$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleAmb$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44e778.  v0:= v1.`io.reactivex.internal.operators.single.SingleAmb$a.a` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L44e77c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L44e782.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleAmb$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleAmb$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44e794.  v0:= 0I;
  #L44e796.  v1:= 1I;
  #L44e798.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L44e79e.  v0:= temp;
  #L44e7a0.  if v0 == 0 then goto L44e7b8;
  #L44e7a4.  v0:= v2.`io.reactivex.internal.operators.single.SingleAmb$a.a` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L44e7a8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L44e7ae.  v0:= v2.`io.reactivex.internal.operators.single.SingleAmb$a.b` @type ^`io.reactivex.SingleObserver` @kind object;
  #L44e7b2.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L44e7b8.  return @kind void;
}
