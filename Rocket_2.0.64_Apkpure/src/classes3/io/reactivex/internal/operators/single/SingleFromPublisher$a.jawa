record `io.reactivex.internal.operators.single.SingleFromPublisher$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleFromPublisher$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.single.SingleFromPublisher$a.b` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.single.SingleFromPublisher$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.single.SingleFromPublisher$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.single.SingleFromPublisher$a.e` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleFromPublisher$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFromPublisher$a;.<init>:(Lio/reactivex/SingleObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L450dac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L450db2.  v0.`io.reactivex.internal.operators.single.SingleFromPublisher$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L450db6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleFromPublisher$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFromPublisher$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450dc8.  v0:= 1I;
  #L450dca.  v1.`io.reactivex.internal.operators.single.SingleFromPublisher$a.e` @type ^`boolean` := v0 @kind boolean;
  #L450dce.  v0:= v1.`io.reactivex.internal.operators.single.SingleFromPublisher$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L450dd2.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L450dd8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleFromPublisher$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFromPublisher$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450d94.  v0:= v1.`io.reactivex.internal.operators.single.SingleFromPublisher$a.e` @type ^`boolean` @kind boolean;
  #L450d98.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.single.SingleFromPublisher$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFromPublisher$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L450dec.  v0:= v3.`io.reactivex.internal.operators.single.SingleFromPublisher$a.d` @type ^`boolean` @kind boolean;
  #L450df0.  if v0 == 0 then goto L450df6;
  #L450df4.  return @kind void;
  #L450df6.  v0:= 1I;
  #L450df8.  v3.`io.reactivex.internal.operators.single.SingleFromPublisher$a.d` @type ^`boolean` := v0 @kind boolean;
  #L450dfc.  v0:= v3.`io.reactivex.internal.operators.single.SingleFromPublisher$a.c` @type ^`java.lang.Object` @kind object;
  #L450e00.  v1:= 0I;
  #L450e02.  v3.`io.reactivex.internal.operators.single.SingleFromPublisher$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L450e06.  if v0 != 0 then goto L450e24;
  #L450e0a.  v0:= v3.`io.reactivex.internal.operators.single.SingleFromPublisher$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L450e0e.  v1:= new `java.util.NoSuchElementException`;
  #L450e12.  v2:= "The source Publisher is empty" @kind object;
  #L450e16.  call `<init>`(v1, v2) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L450e1c.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L450e22.  goto L450e2e;
  #L450e24.  v1:= v3.`io.reactivex.internal.operators.single.SingleFromPublisher$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L450e28.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L450e2e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleFromPublisher$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFromPublisher$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450e40.  v0:= v1.`io.reactivex.internal.operators.single.SingleFromPublisher$a.d` @type ^`boolean` @kind boolean;
  #L450e44.  if v0 == 0 then goto L450e50;
  #L450e48.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L450e4e.  return @kind void;
  #L450e50.  v0:= 1I;
  #L450e52.  v1.`io.reactivex.internal.operators.single.SingleFromPublisher$a.d` @type ^`boolean` := v0 @kind boolean;
  #L450e56.  v0:= 0I;
  #L450e58.  v1.`io.reactivex.internal.operators.single.SingleFromPublisher$a.c` @type ^`java.lang.Object` := v0 @kind object;
  #L450e5c.  v0:= v1.`io.reactivex.internal.operators.single.SingleFromPublisher$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L450e60.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L450e66.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.single.SingleFromPublisher$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFromPublisher$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L450e78.  v0:= v2.`io.reactivex.internal.operators.single.SingleFromPublisher$a.d` @type ^`boolean` @kind boolean;
  #L450e7c.  if v0 == 0 then goto L450e82;
  #L450e80.  return @kind void;
  #L450e82.  v0:= v2.`io.reactivex.internal.operators.single.SingleFromPublisher$a.c` @type ^`java.lang.Object` @kind object;
  #L450e86.  if v0 == 0 then goto L450eba;
  #L450e8a.  v3:= v2.`io.reactivex.internal.operators.single.SingleFromPublisher$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L450e8e.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L450e94.  v3:= 1I;
  #L450e96.  v2.`io.reactivex.internal.operators.single.SingleFromPublisher$a.d` @type ^`boolean` := v3 @kind boolean;
  #L450e9a.  v3:= 0I;
  #L450e9c.  v2.`io.reactivex.internal.operators.single.SingleFromPublisher$a.c` @type ^`java.lang.Object` := v3 @kind object;
  #L450ea0.  v3:= v2.`io.reactivex.internal.operators.single.SingleFromPublisher$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L450ea4.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L450ea8.  v1:= "Too many elements in the Publisher" @kind object;
  #L450eac.  call `<init>`(v0, v1) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L450eb2.  call `onError`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L450eb8.  goto L450ebe;
  #L450eba.  v2.`io.reactivex.internal.operators.single.SingleFromPublisher$a.c` @type ^`java.lang.Object` := v3 @kind object;
  #L450ebe.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleFromPublisher$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFromPublisher$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L450ed0.  v0:= v2.`io.reactivex.internal.operators.single.SingleFromPublisher$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L450ed4.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L450eda.  v0:= temp;
  #L450edc.  if v0 == 0 then goto L450efe;
  #L450ee0.  v2.`io.reactivex.internal.operators.single.SingleFromPublisher$a.b` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L450ee4.  v0:= v2.`io.reactivex.internal.operators.single.SingleFromPublisher$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L450ee8.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L450eee.  v0:= 9223372036854775807L;
  #L450ef8.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L450efe.  return @kind void;
}
