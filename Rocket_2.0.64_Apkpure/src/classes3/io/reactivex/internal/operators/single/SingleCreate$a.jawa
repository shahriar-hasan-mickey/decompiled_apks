record `io.reactivex.internal.operators.single.SingleCreate$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.SingleEmitter` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleCreate$a.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleCreate$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleCreate$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCreate$a;.<init>:(Lio/reactivex/SingleObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44ed00.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L44ed06.  v0.`io.reactivex.internal.operators.single.SingleCreate$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L44ed0a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleCreate$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleCreate$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L44ed1c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44ed22.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleCreate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleCreate$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44ecd8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44ecde.  v0:= temp @kind object;
  #L44ece0.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L44ece4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L44ecea.  v0:= temp;
  #L44ecec.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleCreate$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCreate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44ed34.  if v3 != 0 then goto L44ed46;
  #L44ed38.  v3:= new `java.lang.NullPointerException`;
  #L44ed3c.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L44ed40.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44ed46.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44ed4c.  v0:= temp @kind object;
  #L44ed4e.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L44ed52.  if v0 == v1 then goto L44ed8a;
  #L44ed56.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L44ed5c.  v0:= temp @kind object;
  #L44ed5e.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L44ed62.  if v0 == v1 then goto L44ed8a;
  #L44ed66.  v1:= v2.`io.reactivex.internal.operators.single.SingleCreate$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L44ed6a.  call `onError`(v1, v3) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44ed70.  if v0 == 0 then goto L44ed7a;
  #L44ed74.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44ed7a.  return @kind void;
  #L44ed7c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44ed7e.  if v0 == 0 then goto L44ed88;
  #L44ed82.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44ed88.  throw v3;
  #L44ed8a.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44ed90.  return @kind void;
  catch `java.lang.Throwable` @[L44ed66..L44ed70] goto L44ed7c;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleCreate$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCreate$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44edb0.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44edb6.  v0:= temp @kind object;
  #L44edb8.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L44edbc.  if v0 == v1 then goto L44ee12;
  #L44edc0.  call temp:= `getAndSet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L44edc6.  v0:= temp @kind object;
  #L44edc8.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L44edcc.  if v0 == v1 then goto L44ee12;
  #L44edd0.  if v4 != 0 then goto L44edee;
  #L44edd4.  v4:= v3.`io.reactivex.internal.operators.single.SingleCreate$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L44edd8.  v1:= new `java.lang.NullPointerException`;
  #L44eddc.  v2:= "onSuccess called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L44ede0.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44ede6.  call `onError`(v4, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44edec.  goto L44edf8;
  #L44edee.  v1:= v3.`io.reactivex.internal.operators.single.SingleCreate$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L44edf2.  call `onSuccess`(v1, v4) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L44edf8.  if v0 == 0 then goto L44ee12;
  #L44edfc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44ee02.  goto L44ee12;
  #L44ee04.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44ee06.  if v0 == 0 then goto L44ee10;
  #L44ee0a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44ee10.  throw v4;
  #L44ee12.  return @kind void;
  catch `java.lang.Throwable` @[L44edd4..L44edf8] goto L44ee04;
}
procedure `void` `setCancellable`(`io.reactivex.internal.operators.single.SingleCreate$a` v1 @kind this, `io.reactivex.functions.Cancellable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCreate$a;.setCancellable:(Lio/reactivex/functions/Cancellable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44ee30.  v0:= new `io.reactivex.internal.disposables.CancellableDisposable`;
  #L44ee34.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/disposables/CancellableDisposable;.<init>:(Lio/reactivex/functions/Cancellable;)V` @kind direct;
  #L44ee3a.  call `setDisposable`(v1, v0) @signature `Lio/reactivex/internal/operators/single/SingleCreate$a;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L44ee40.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.internal.operators.single.SingleCreate$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCreate$a;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L44ee54.  call temp:= `set`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L44ee5a.  return @kind void;
}
