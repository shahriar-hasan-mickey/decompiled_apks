record `io.reactivex.internal.operators.single.SingleTakeUntil$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.SingleObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleTakeUntil$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.single.SingleTakeUntil$b` `io.reactivex.internal.operators.single.SingleTakeUntil$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleTakeUntil$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleTakeUntil$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$a;.<init>:(Lio/reactivex/SingleObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L451bd4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L451bda.  v0.`io.reactivex.internal.operators.single.SingleTakeUntil$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L451bde.  v1:= new `io.reactivex.internal.operators.single.SingleTakeUntil$b`;
  #L451be2.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$b;.<init>:(Lio/reactivex/internal/operators/single/SingleTakeUntil$a;)V` @kind direct;
  #L451be8.  v0.`io.reactivex.internal.operators.single.SingleTakeUntil$a.b` @type ^`io.reactivex.internal.operators.single.SingleTakeUntil$b` := v1 @kind object;
  #L451bec.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.single.SingleTakeUntil$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L451cd0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L451cd6.  v0:= temp @kind object;
  #L451cd8.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L451cdc.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L451ce0.  if v0 == v1 then goto L451d0a;
  #L451ce4.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L451cea.  v0:= temp @kind object;
  #L451cec.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L451cf0.  if v0 == v1 then goto L451d0a;
  #L451cf4.  if v0 == 0 then goto L451cfe;
  #L451cf8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L451cfe.  v0:= v2.`io.reactivex.internal.operators.single.SingleTakeUntil$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L451d02.  call `onError`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L451d08.  return @kind void;
  #L451d0a.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L451d10.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleTakeUntil$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L451c00.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L451c06.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleTakeUntil$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L451bac.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L451bb2.  v0:= temp @kind object;
  #L451bb4.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L451bb8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L451bbe.  v0:= temp;
  #L451bc0.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleTakeUntil$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L451c18.  v0:= v2.`io.reactivex.internal.operators.single.SingleTakeUntil$a.b` @type ^`io.reactivex.internal.operators.single.SingleTakeUntil$b` @kind object;
  #L451c1c.  call `a`(v0) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$b;.a:()V` @kind virtual;
  #L451c22.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L451c28.  v0:= temp @kind object;
  #L451c2a.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L451c2e.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L451c32.  if v0 == v1 then goto L451c52;
  #L451c36.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L451c3c.  v0:= temp @kind object;
  #L451c3e.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L451c42.  if v0 == v1 then goto L451c52;
  #L451c46.  v0:= v2.`io.reactivex.internal.operators.single.SingleTakeUntil$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L451c4a.  call `onError`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L451c50.  return @kind void;
  #L451c52.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L451c58.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleTakeUntil$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L451c6c.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L451c72.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleTakeUntil$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L451c84.  v0:= v2.`io.reactivex.internal.operators.single.SingleTakeUntil$a.b` @type ^`io.reactivex.internal.operators.single.SingleTakeUntil$b` @kind object;
  #L451c88.  call `a`(v0) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$b;.a:()V` @kind virtual;
  #L451c8e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L451c94.  v0:= temp @kind object;
  #L451c96.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L451c9a.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L451c9e.  if v0 == v1 then goto L451cbc;
  #L451ca2.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L451ca8.  v0:= temp @kind object;
  #L451caa.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L451cae.  if v0 == v1 then goto L451cbc;
  #L451cb2.  v0:= v2.`io.reactivex.internal.operators.single.SingleTakeUntil$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L451cb6.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L451cbc.  return @kind void;
}
