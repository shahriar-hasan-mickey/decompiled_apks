record `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.SingleObserver` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.c` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.d` @AccessFlag ;
  `java.util.Iterator` `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.f` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.g` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4504f8.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L4504fe.  v0.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L450502.  v0.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L450506.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L45050a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L450510.  v0.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L450514.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450528.  v0:= 1I;
  #L45052a.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.f` @type ^`boolean` := v0 @kind boolean;
  #L45052e.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L450532.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L450538.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45053c.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.d` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L450540.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450554.  v0:= 0I;
  #L450556.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` := v0 @kind object;
  #L45055a.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a` v11 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L45056c.  call temp:= `getAndIncrement`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L450572.  v0:= temp;
  #L450574.  if v0 == 0 then goto L45057a;
  #L450578.  return @kind void;
  #L45057a.  v0:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45057e.  v1:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L450582.  v2:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.g` @type ^`boolean` @kind boolean;
  #L450586.  if v2 == 0 then goto L45059e;
  #L45058a.  if v1 == 0 then goto L45059e;
  #L45058e.  v1:= 0I;
  #L450590.  call `onNext`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L450596.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L45059c.  return @kind void;
  #L45059e.  v2:= 1I;
  #L4505a0.  if v1 == 0 then goto L450652;
  #L4505a4.  v3:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4505a8.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4505ae.  v3:= temp @kind wide;
  #L4505b0.  v5:= 9223372036854775807L;
  #L4505ba.  v7:= lcmp(v3, v5);
  #L4505be.  if v7 != 0 then goto L4505ca;
  #L4505c2.  call `e`(v11, v0, v1) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.e:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @kind virtual;
  #L4505c8.  return @kind void;
  #L4505ca.  v5:= 0L;
  #L4505ce.  v7:= v5 @kind wide;
  #L4505d0.  v9:= lcmp(v7, v3);
  #L4505d4.  if v9 == 0 then goto L450640;
  #L4505d8.  v9:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L4505dc.  if v9 == 0 then goto L4505e2;
  #L4505e0.  return @kind void;
  #L4505e2.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4505e8.  v9:= temp @kind object;
  #L4505ea.  v10:= "The iterator returned a null value" @kind object;
  #L4505ee.  call temp:= `requireNonNull`(v9, v10) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4505f4.  v9:= temp @kind object;
  #L4505f6.  call `onNext`(v0, v9) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4505fc.  v9:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L450600.  if v9 == 0 then goto L450606;
  #L450604.  return @kind void;
  #L450606.  v9:= 1L;
  #L45060a.  v7:= v7 + v9 @kind long;
  #L45060c.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L450612.  v9:= temp;
  #L450614.  if v9 != 0 then goto L4505d0;
  #L450618.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L45061e.  return @kind void;
  #L450620.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L450622.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L450628.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45062e.  return @kind void;
  #L450630.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L450632.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L450638.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45063e.  return @kind void;
  #L450640.  v3:= lcmp(v7, v5);
  #L450644.  if v3 == 0 then goto L450652;
  #L450648.  v3:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L45064c.  call temp:= `produced`(v3, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L450652.  v2:= -v2 @kind int;
  #L450654.  call temp:= `addAndGet`(v11, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L45065a.  v2:= temp;
  #L45065c.  if v2 != 0 then goto L450662;
  #L450660.  return @kind void;
  #L450662.  if v1 != 0 then goto L4505a0;
  #L450666.  v1:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L45066a.  goto L4505a0;
  catch `java.lang.Throwable` @[L4505e2..L4505f6] goto L450630;
  catch `java.lang.Throwable` @[L45060c..L450614] goto L450620;
}
procedure `void` `e`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `java.util.Iterator` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.e:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @AccessFlag  {
    temp;
    v0;

  #L450784.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L450788.  if v0 == 0 then goto L45078e;
  #L45078c.  return @kind void;
  #L45078e.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L450794.  v0:= temp @kind object;
  #L450796.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L45079c.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L4507a0.  if v0 == 0 then goto L4507a6;
  #L4507a4.  return @kind void;
  #L4507a6.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4507ac.  v0:= temp;
  #L4507ae.  if v0 != 0 then goto L450784;
  #L4507b2.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4507b8.  return @kind void;
  #L4507ba.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4507bc.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4507c2.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4507c8.  return @kind void;
  #L4507ca.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4507cc.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4507d2.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4507d8.  return @kind void;
  catch `java.lang.Throwable` @[L45078e..L450796] goto L4507ca;
  catch `java.lang.Throwable` @[L4507a6..L4507ae] goto L4507ba;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450470.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L450474.  if v0 != 0 then goto L45047c;
  #L450478.  v0:= 1I;
  #L45047a.  goto L45047e;
  #L45047c.  v0:= 0I;
  #L45047e.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450694.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L450698.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.d` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L45069c.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4506a0.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4506a6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4506b8.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4506bc.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4506c2.  v0:= temp;
  #L4506c4.  if v0 == 0 then goto L4506d6;
  #L4506c8.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.d` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L4506cc.  v2:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4506d0.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4506d6.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4506e8.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L4506ec.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4506f2.  v2:= temp @kind object;
  #L4506f4.  v2:= (`java.lang.Iterable`) v2 @kind object;
  #L4506f8.  call temp:= `iterator`(v2) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4506fe.  v2:= temp @kind object;
  #L450700.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L450706.  v0:= temp;
  #L450708.  if v0 != 0 then goto L450718;
  #L45070c.  v2:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L450710.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L450716.  return @kind void;
  #L450718.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` := v2 @kind object;
  #L45071c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.drain:()V` @kind virtual;
  #L450722.  return @kind void;
  #L450724.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L450726.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45072c.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L450730.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L450736.  return @kind void;
  catch `java.lang.Throwable` @[L4506e8..L450708] goto L450724;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4504b4.  v0:= v4.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L4504b8.  v1:= 0I;
  #L4504ba.  if v0 == 0 then goto L4504e4;
  #L4504be.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4504c4.  v2:= temp @kind object;
  #L4504c6.  v3:= "The iterator returned a null value" @kind object;
  #L4504ca.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4504d0.  v2:= temp @kind object;
  #L4504d2.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4504d8.  v0:= temp;
  #L4504da.  if v0 != 0 then goto L4504e2;
  #L4504de.  v4.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` := v1 @kind object;
  #L4504e2.  return v2 @kind object;
  #L4504e4.  return v1 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450754.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L45075a.  v0:= temp;
  #L45075c.  if v0 == 0 then goto L450770;
  #L450760.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L450764.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L45076a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.drain:()V` @kind virtual;
  #L450770.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450490.  v0:= 2I;
  #L450492.  v2:= v2 ^& v0 @kind int;
  #L450494.  if v2 == 0 then goto L4504a0;
  #L450498.  v2:= 1I;
  #L45049a.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.g` @type ^`boolean` := v2 @kind boolean;
  #L45049e.  return v0;
  #L4504a0.  v2:= 0I;
  #L4504a2.  return v2;
}
