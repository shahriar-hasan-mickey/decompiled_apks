record `io.reactivex.internal.operators.single.SingleDoOnDispose$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.SingleObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleDoOnDispose$a.a` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.single.SingleDoOnDispose$a.b` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.single.SingleDoOnDispose$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleDoOnDispose$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `io.reactivex.functions.Action` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDoOnDispose$a;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/functions/Action;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44fa40.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L44fa46.  v0.`io.reactivex.internal.operators.single.SingleDoOnDispose$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L44fa4a.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L44fa50.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleDoOnDispose$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleDoOnDispose$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44fa64.  v0:= 0I;
  #L44fa66.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L44fa6c.  v0:= temp @kind object;
  #L44fa6e.  v0:= (`io.reactivex.functions.Action`) v0 @kind object;
  #L44fa72.  if v0 == 0 then goto L44fa96;
  #L44fa76.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L44fa7c.  goto L44fa8c;
  #L44fa7e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44fa80.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44fa86.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44fa8c.  v0:= v1.`io.reactivex.internal.operators.single.SingleDoOnDispose$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L44fa90.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44fa96.  return @kind void;
  catch `java.lang.Throwable` @[L44fa76..L44fa7c] goto L44fa7e;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleDoOnDispose$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleDoOnDispose$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44fa20.  v0:= v1.`io.reactivex.internal.operators.single.SingleDoOnDispose$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L44fa24.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L44fa2a.  v0:= temp;
  #L44fa2c.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleDoOnDispose$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDoOnDispose$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44fab4.  v0:= v1.`io.reactivex.internal.operators.single.SingleDoOnDispose$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L44fab8.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44fabe.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleDoOnDispose$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDoOnDispose$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44fad0.  v0:= v1.`io.reactivex.internal.operators.single.SingleDoOnDispose$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L44fad4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L44fada.  v0:= temp;
  #L44fadc.  if v0 == 0 then goto L44faee;
  #L44fae0.  v1.`io.reactivex.internal.operators.single.SingleDoOnDispose$a.b` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L44fae4.  v2:= v1.`io.reactivex.internal.operators.single.SingleDoOnDispose$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L44fae8.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L44faee.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleDoOnDispose$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDoOnDispose$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44fb00.  v0:= v1.`io.reactivex.internal.operators.single.SingleDoOnDispose$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L44fb04.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L44fb0a.  return @kind void;
}
