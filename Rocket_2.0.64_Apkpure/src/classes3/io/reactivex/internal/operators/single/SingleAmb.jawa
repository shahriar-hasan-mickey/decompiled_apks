record `io.reactivex.internal.operators.single.SingleAmb` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class {
  `io.reactivex.SingleSource`[] `io.reactivex.internal.operators.single.SingleAmb.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.Iterable` `io.reactivex.internal.operators.single.SingleAmb.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleAmb` v0 @kind this, `io.reactivex.SingleSource`[] v1 @kind object, `java.lang.Iterable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleAmb;.<init>:([Lio/reactivex/SingleSource;Ljava/lang/Iterable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L44e7cc.  call `<init>`(v0) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L44e7d2.  v0.`io.reactivex.internal.operators.single.SingleAmb.a` @type ^`io.reactivex.SingleSource`[] := v1 @kind object;
  #L44e7d6.  v0.`io.reactivex.internal.operators.single.SingleAmb.b` @type ^`java.lang.Iterable` := v2 @kind object;
  #L44e7da.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.single.SingleAmb` v9 @kind this, `io.reactivex.SingleObserver` v10 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleAmb;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L44e7ec.  v0:= v9.`io.reactivex.internal.operators.single.SingleAmb.a` @type ^`io.reactivex.SingleSource`[] @kind object;
  #L44e7f0.  v1:= "One of the sources is null" @kind object;
  #L44e7f4.  v2:= 0I;
  #L44e7f6.  if v0 != 0 then goto L44e872;
  #L44e7fa.  v0:= 8I;
  #L44e7fe.  v0:= new `io.reactivex.SingleSource`[v0];
  #L44e802.  v3:= v9.`io.reactivex.internal.operators.single.SingleAmb.b` @type ^`java.lang.Iterable` @kind object;
  #L44e806.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L44e80c.  v3:= temp @kind object;
  #L44e80e.  v4:= 0I;
  #L44e810.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L44e816.  v5:= temp;
  #L44e818.  if v5 == 0 then goto L44e874;
  #L44e81c.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L44e822.  v5:= temp @kind object;
  #L44e824.  v5:= (`io.reactivex.SingleSource`) v5 @kind object;
  #L44e828.  if v5 != 0 then goto L44e83e;
  #L44e82c.  v0:= new `java.lang.NullPointerException`;
  #L44e830.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44e836.  call `error`(v0, v10) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/SingleObserver;)V` @kind static;
  #L44e83c.  return @kind void;
  #L44e83e.  v6:= length @variable v0;
  #L44e840.  if v4 != v6 then goto L44e856;
  #L44e844.  v6:= v4 ^> 2;
  #L44e848.  v6:= v6 + v4 @kind int;
  #L44e84a.  v6:= new `io.reactivex.SingleSource`[v6];
  #L44e84e.  call `arraycopy`(v0, v2, v6, v2, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L44e854.  v0:= v6 @kind object;
  #L44e856.  v6:= v4 + 1;
  #L44e85a.  v0[v4]:= v5 @kind object;
  #L44e85e.  v4:= v6;
  #L44e860.  goto L44e810;
  #L44e862.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44e864.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44e86a.  call `error`(v0, v10) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/SingleObserver;)V` @kind static;
  #L44e870.  return @kind void;
  #L44e872.  v4:= length @variable v0;
  #L44e874.  v3:= new `io.reactivex.disposables.CompositeDisposable`;
  #L44e878.  call `<init>`(v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L44e87e.  v5:= new `io.reactivex.internal.operators.single.SingleAmb$a`;
  #L44e882.  call `<init>`(v5, v10, v3) @signature `Lio/reactivex/internal/operators/single/SingleAmb$a;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/disposables/CompositeDisposable;)V` @kind direct;
  #L44e888.  call `onSubscribe`(v10, v3) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L44e88e.  v6:= 0I;
  #L44e890.  if v6 >= v4 then goto L44e8e4;
  #L44e894.  v7:= v0[v6] @kind object;
  #L44e898.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L44e89e.  v8:= temp;
  #L44e8a0.  if v8 == 0 then goto L44e8a6;
  #L44e8a4.  return @kind void;
  #L44e8a6.  if v7 != 0 then goto L44e8d8;
  #L44e8aa.  call `dispose`(v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L44e8b0.  v0:= new `java.lang.NullPointerException`;
  #L44e8b4.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44e8ba.  v1:= 1I;
  #L44e8bc.  call temp:= `compareAndSet`(v5, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L44e8c2.  v1:= temp;
  #L44e8c4.  if v1 == 0 then goto L44e8d0;
  #L44e8c8.  call `onError`(v10, v0) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44e8ce.  goto L44e8d6;
  #L44e8d0.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44e8d6.  return @kind void;
  #L44e8d8.  call `subscribe`(v7, v5) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L44e8de.  v6:= v6 + 1;
  #L44e8e2.  goto L44e890;
  #L44e8e4.  return @kind void;
  catch `java.lang.Throwable` @[L44e802..L44e85e] goto L44e862;
}
