record `io.reactivex.internal.util.QueueDrainHelper` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`io.reactivex.internal.util.QueueDrainHelper` v2 @kind this) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L45ae4c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45ae52.  v0:= new `java.lang.IllegalStateException`;
  #L45ae56.  v1:= "No instances!" @kind object;
  #L45ae5a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45ae60.  throw v0;
}
procedure `boolean` `a`(`io.reactivex.functions.BooleanSupplier` v0 @kind object) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.a:(Lio/reactivex/functions/BooleanSupplier;)Z` @AccessFlag STATIC {
    temp;

  #L45acbc.  call temp:= `getAsBoolean`(v0) @signature `Lio/reactivex/functions/BooleanSupplier;.getAsBoolean:()Z` @kind interface;
  #L45acc2.  v0:= temp;
  #L45acc4.  return v0;
  #L45acc6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45acc8.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45acce.  v0:= 1I;
  #L45acd0.  return v0;
  catch `java.lang.Throwable` @[L45acbc..L45acc4] goto L45acc6;
}
procedure `boolean` `b`(`long` v9 , `org.reactivestreams.Subscriber` v11 @kind object, `java.util.Queue` v12 @kind object, `java.util.concurrent.atomic.AtomicLong` v13 @kind object, `io.reactivex.functions.BooleanSupplier` v14 @kind object) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.b:(JLorg/reactivestreams/Subscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLong;Lio/reactivex/functions/BooleanSupplier;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L45acf0.  v0:= -9223372036854775808L;
  #L45acf4.  v2:= v9 ^& v0 @kind long;
  #L45acf8.  v4:= 1I;
  #L45acfa.  v5:= lcmp(v2, v9);
  #L45acfe.  if v5 == 0 then goto L45ad32;
  #L45ad02.  call temp:= `a`(v14) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.a:(Lio/reactivex/functions/BooleanSupplier;)Z` @kind static;
  #L45ad08.  v5:= temp;
  #L45ad0a.  if v5 == 0 then goto L45ad10;
  #L45ad0e.  return v4;
  #L45ad10.  call temp:= `poll`(v12) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L45ad16.  v5:= temp @kind object;
  #L45ad18.  if v5 != 0 then goto L45ad24;
  #L45ad1c.  call `onComplete`(v11) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L45ad22.  return v4;
  #L45ad24.  call `onNext`(v11, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L45ad2a.  v4:= 1L;
  #L45ad2e.  v2:= v2 + v4 @kind long;
  #L45ad30.  goto L45acf8;
  #L45ad32.  call temp:= `a`(v14) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.a:(Lio/reactivex/functions/BooleanSupplier;)Z` @kind static;
  #L45ad38.  v9:= temp;
  #L45ad3a.  if v9 == 0 then goto L45ad40;
  #L45ad3e.  return v4;
  #L45ad40.  call temp:= `isEmpty`(v12) @signature `Ljava/util/Queue;.isEmpty:()Z` @kind interface;
  #L45ad46.  v9:= temp;
  #L45ad48.  if v9 == 0 then goto L45ad54;
  #L45ad4c.  call `onComplete`(v11) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L45ad52.  return v4;
  #L45ad54.  call temp:= `get`(v13) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L45ad5a.  v9:= temp @kind wide;
  #L45ad5c.  v4:= lcmp(v9, v2);
  #L45ad60.  if v4 != 0 then goto L45acf8;
  #L45ad64.  v9:= 9223372036854775807L;
  #L45ad6e.  v2:= v2 ^& v9 @kind long;
  #L45ad70.  v2:= -v2 @kind long;
  #L45ad72.  call temp:= `addAndGet`(v13, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L45ad78.  v2:= temp @kind wide;
  #L45ad7a.  v9:= v9 ^& v2 @kind long;
  #L45ad7c.  v4:= 0L;
  #L45ad80.  v6:= lcmp(v9, v4);
  #L45ad84.  if v6 != 0 then goto L45ad8c;
  #L45ad88.  v9:= 0I;
  #L45ad8a.  return v9;
  #L45ad8c.  v9:= v2 ^& v0 @kind long;
  #L45ad90.  v7:= v9 @kind wide;
  #L45ad92.  v9:= v2 @kind wide;
  #L45ad94.  v2:= v7 @kind wide;
  #L45ad96.  goto L45acf8;
}
procedure `boolean` `checkTerminated`(`boolean` v2 , `boolean` v3 , `io.reactivex.Observer` v4 @kind object, `boolean` v5 , `io.reactivex.internal.fuseable.SimpleQueue` v6 @kind object, `io.reactivex.disposables.Disposable` v7 @kind object, `io.reactivex.internal.util.ObservableQueueDrain` v8 @kind object) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.checkTerminated:(ZZLio/reactivex/Observer;ZLio/reactivex/internal/fuseable/SimpleQueue;Lio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L45abb4.  call temp:= `cancelled`(v8) @signature `Lio/reactivex/internal/util/ObservableQueueDrain;.cancelled:()Z` @kind interface;
  #L45abba.  v0:= temp;
  #L45abbc.  v1:= 1I;
  #L45abbe.  if v0 == 0 then goto L45abd0;
  #L45abc2.  call `clear`(v6) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45abc8.  call `dispose`(v7) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45abce.  return v1;
  #L45abd0.  if v2 == 0 then goto L45ac30;
  #L45abd4.  if v5 == 0 then goto L45abfe;
  #L45abd8.  if v3 == 0 then goto L45ac30;
  #L45abdc.  call `dispose`(v7) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45abe2.  call temp:= `error`(v8) @signature `Lio/reactivex/internal/util/ObservableQueueDrain;.error:()Ljava/lang/Throwable;` @kind interface;
  #L45abe8.  v2:= temp @kind object;
  #L45abea.  if v2 == 0 then goto L45abf6;
  #L45abee.  call `onError`(v4, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45abf4.  goto L45abfc;
  #L45abf6.  call `onComplete`(v4) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L45abfc.  return v1;
  #L45abfe.  call temp:= `error`(v8) @signature `Lio/reactivex/internal/util/ObservableQueueDrain;.error:()Ljava/lang/Throwable;` @kind interface;
  #L45ac04.  v2:= temp @kind object;
  #L45ac06.  if v2 == 0 then goto L45ac1e;
  #L45ac0a.  call `clear`(v6) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45ac10.  call `dispose`(v7) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45ac16.  call `onError`(v4, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45ac1c.  return v1;
  #L45ac1e.  if v3 == 0 then goto L45ac30;
  #L45ac22.  call `dispose`(v7) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45ac28.  call `onComplete`(v4) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L45ac2e.  return v1;
  #L45ac30.  v2:= 0I;
  #L45ac32.  return v2;
}
procedure `boolean` `checkTerminated`(`boolean` v2 , `boolean` v3 , `org.reactivestreams.Subscriber` v4 @kind object, `boolean` v5 , `io.reactivex.internal.fuseable.SimpleQueue` v6 @kind object, `io.reactivex.internal.util.QueueDrain` v7 @kind object) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;ZLio/reactivex/internal/fuseable/SimpleQueue;Lio/reactivex/internal/util/QueueDrain;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L45ac44.  call temp:= `cancelled`(v7) @signature `Lio/reactivex/internal/util/QueueDrain;.cancelled:()Z` @kind interface;
  #L45ac4a.  v0:= temp;
  #L45ac4c.  v1:= 1I;
  #L45ac4e.  if v0 == 0 then goto L45ac5a;
  #L45ac52.  call `clear`(v6) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45ac58.  return v1;
  #L45ac5a.  if v2 == 0 then goto L45aca8;
  #L45ac5e.  if v5 == 0 then goto L45ac82;
  #L45ac62.  if v3 == 0 then goto L45aca8;
  #L45ac66.  call temp:= `error`(v7) @signature `Lio/reactivex/internal/util/QueueDrain;.error:()Ljava/lang/Throwable;` @kind interface;
  #L45ac6c.  v2:= temp @kind object;
  #L45ac6e.  if v2 == 0 then goto L45ac7a;
  #L45ac72.  call `onError`(v4, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45ac78.  goto L45ac80;
  #L45ac7a.  call `onComplete`(v4) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L45ac80.  return v1;
  #L45ac82.  call temp:= `error`(v7) @signature `Lio/reactivex/internal/util/QueueDrain;.error:()Ljava/lang/Throwable;` @kind interface;
  #L45ac88.  v2:= temp @kind object;
  #L45ac8a.  if v2 == 0 then goto L45ac9c;
  #L45ac8e.  call `clear`(v6) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45ac94.  call `onError`(v4, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45ac9a.  return v1;
  #L45ac9c.  if v3 == 0 then goto L45aca8;
  #L45aca0.  call `onComplete`(v4) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L45aca6.  return v1;
  #L45aca8.  v2:= 0I;
  #L45acaa.  return v2;
}
procedure `io.reactivex.internal.fuseable.SimpleQueue` `createQueue`(`int` v1 ) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.createQueue:(I)Lio/reactivex/internal/fuseable/SimpleQueue;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L45ae1c.  if v1 >= 0 then goto L45ae2e;
  #L45ae20.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L45ae24.  v1:= -v1 @kind int;
  #L45ae26.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L45ae2c.  return v0 @kind object;
  #L45ae2e.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L45ae32.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L45ae38.  return v0 @kind object;
}
procedure `void` `drainLoop`(`io.reactivex.internal.fuseable.SimplePlainQueue` v11 @kind object, `io.reactivex.Observer` v12 @kind object, `boolean` v13 , `io.reactivex.disposables.Disposable` v14 @kind object, `io.reactivex.internal.util.ObservableQueueDrain` v15 @kind object) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lio/reactivex/Observer;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L45ae74.  v0:= 1I;
  #L45ae76.  v1:= 1I;
  #L45ae78.  call temp:= `done`(v15) @signature `Lio/reactivex/internal/util/ObservableQueueDrain;.done:()Z` @kind interface;
  #L45ae7e.  v2:= temp;
  #L45ae80.  call temp:= `isEmpty`(v11) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L45ae86.  v3:= temp;
  #L45ae88.  v4:= v12 @kind object;
  #L45ae8a.  v5:= v13;
  #L45ae8c.  v6:= v11 @kind object;
  #L45ae8e.  v7:= v14 @kind object;
  #L45ae90.  v8:= v15 @kind object;
  #L45ae92.  call temp:= `checkTerminated`(v2, v3, v4, v5, v6, v7, v8) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.checkTerminated:(ZZLio/reactivex/Observer;ZLio/reactivex/internal/fuseable/SimpleQueue;Lio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain;)Z` @kind static;
  #L45ae98.  v2:= temp;
  #L45ae9a.  if v2 == 0 then goto L45aea0;
  #L45ae9e.  return @kind void;
  #L45aea0.  call temp:= `done`(v15) @signature `Lio/reactivex/internal/util/ObservableQueueDrain;.done:()Z` @kind interface;
  #L45aea6.  v3:= temp;
  #L45aea8.  call temp:= `poll`(v11) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L45aeae.  v2:= temp @kind object;
  #L45aeb0.  if v2 != 0 then goto L45aeb8;
  #L45aeb4.  v10:= 1I;
  #L45aeb6.  goto L45aebc;
  #L45aeb8.  v4:= 0I;
  #L45aeba.  v10:= 0I;
  #L45aebc.  v4:= v10;
  #L45aebe.  v5:= v12 @kind object;
  #L45aec0.  v6:= v13;
  #L45aec2.  v7:= v11 @kind object;
  #L45aec4.  v8:= v14 @kind object;
  #L45aec6.  v9:= v15 @kind object;
  #L45aec8.  call temp:= `checkTerminated`(v3, v4, v5, v6, v7, v8, v9) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.checkTerminated:(ZZLio/reactivex/Observer;ZLio/reactivex/internal/fuseable/SimpleQueue;Lio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain;)Z` @kind static;
  #L45aece.  v3:= temp;
  #L45aed0.  if v3 == 0 then goto L45aed6;
  #L45aed4.  return @kind void;
  #L45aed6.  if v10 == 0 then goto L45aeea;
  #L45aeda.  v1:= -v1 @kind int;
  #L45aedc.  call temp:= `leave`(v15, v1) @signature `Lio/reactivex/internal/util/ObservableQueueDrain;.leave:(I)I` @kind interface;
  #L45aee2.  v1:= temp;
  #L45aee4.  if v1 != 0 then goto L45ae78;
  #L45aee8.  return @kind void;
  #L45aeea.  call `accept`(v15, v12, v2) @signature `Lio/reactivex/internal/util/ObservableQueueDrain;.accept:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @kind interface;
  #L45aef0.  goto L45aea0;
}
procedure `void` `drainMaxLoop`(`io.reactivex.internal.fuseable.SimplePlainQueue` v10 @kind object, `org.reactivestreams.Subscriber` v11 @kind object, `boolean` v12 , `io.reactivex.disposables.Disposable` v13 @kind object, `io.reactivex.internal.util.QueueDrain` v14 @kind object) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/QueueDrain;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L45af04.  v0:= 1I;
  #L45af06.  v1:= 1I;
  #L45af08.  call temp:= `done`(v14) @signature `Lio/reactivex/internal/util/QueueDrain;.done:()Z` @kind interface;
  #L45af0e.  v2:= temp;
  #L45af10.  call temp:= `poll`(v10) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L45af16.  v8:= temp @kind object;
  #L45af18.  if v8 != 0 then goto L45af20;
  #L45af1c.  v9:= 1I;
  #L45af1e.  goto L45af24;
  #L45af20.  v3:= 0I;
  #L45af22.  v9:= 0I;
  #L45af24.  v3:= v9;
  #L45af26.  v4:= v11 @kind object;
  #L45af28.  v5:= v12;
  #L45af2a.  v6:= v10 @kind object;
  #L45af2c.  v7:= v14 @kind object;
  #L45af2e.  call temp:= `checkTerminated`(v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;ZLio/reactivex/internal/fuseable/SimpleQueue;Lio/reactivex/internal/util/QueueDrain;)Z` @kind static;
  #L45af34.  v2:= temp;
  #L45af36.  if v2 == 0 then goto L45af46;
  #L45af3a.  if v13 == 0 then goto L45af44;
  #L45af3e.  call `dispose`(v13) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45af44.  return @kind void;
  #L45af46.  if v9 == 0 then goto L45af5a;
  #L45af4a.  v1:= -v1 @kind int;
  #L45af4c.  call temp:= `leave`(v14, v1) @signature `Lio/reactivex/internal/util/QueueDrain;.leave:(I)I` @kind interface;
  #L45af52.  v1:= temp;
  #L45af54.  if v1 != 0 then goto L45af08;
  #L45af58.  return @kind void;
  #L45af5a.  call temp:= `requested`(v14) @signature `Lio/reactivex/internal/util/QueueDrain;.requested:()J` @kind interface;
  #L45af60.  v2:= temp @kind wide;
  #L45af62.  v4:= 0L;
  #L45af66.  v6:= lcmp(v2, v4);
  #L45af6a.  if v6 == 0 then goto L45af98;
  #L45af6e.  call temp:= `accept`(v14, v11, v8) @signature `Lio/reactivex/internal/util/QueueDrain;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @kind interface;
  #L45af74.  v4:= temp;
  #L45af76.  if v4 == 0 then goto L45af08;
  #L45af7a.  v4:= 9223372036854775807L;
  #L45af84.  v6:= lcmp(v2, v4);
  #L45af88.  if v6 == 0 then goto L45af08;
  #L45af8c.  v2:= 1L;
  #L45af90.  call temp:= `produced`(v14, v2) @signature `Lio/reactivex/internal/util/QueueDrain;.produced:(J)J` @kind interface;
  #L45af96.  goto L45af08;
  #L45af98.  call `clear`(v10) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45af9e.  if v13 == 0 then goto L45afa8;
  #L45afa2.  call `dispose`(v13) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45afa8.  v10:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L45afac.  v12:= "Could not emit value due to lack of requests." @kind object;
  #L45afb0.  call `<init>`(v10, v12) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45afb6.  call `onError`(v11, v10) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45afbc.  return @kind void;
}
procedure `void` `postComplete`(`org.reactivestreams.Subscriber` v15 @kind object, `java.util.Queue` v16 @kind object, `java.util.concurrent.atomic.AtomicLong` v17 @kind object, `io.reactivex.functions.BooleanSupplier` v18 @kind object) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.postComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLong;Lio/reactivex/functions/BooleanSupplier;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L45afd0.  call temp:= `isEmpty`(v16) @signature `Ljava/util/Queue;.isEmpty:()Z` @kind interface;
  #L45afd6.  v0:= temp;
  #L45afd8.  if v0 == 0 then goto L45afe4;
  #L45afdc.  call `onComplete`(v15) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L45afe2.  return @kind void;
  #L45afe4.  call temp:= `get`(v17) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L45afea.  v1:= temp @kind wide;
  #L45afec.  v3:= v15 @kind object;
  #L45afee.  v4:= v16 @kind object;
  #L45aff2.  v5:= v17 @kind object;
  #L45aff6.  v6:= v18 @kind object;
  #L45affa.  call temp:= `b`(v1, v3, v4, v5, v6) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.b:(JLorg/reactivestreams/Subscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLong;Lio/reactivex/functions/BooleanSupplier;)Z` @kind static;
  #L45b000.  v0:= temp;
  #L45b002.  if v0 == 0 then goto L45b008;
  #L45b006.  return @kind void;
  #L45b008.  call temp:= `get`(v17) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L45b00e.  v0:= temp @kind wide;
  #L45b010.  v2:= -9223372036854775808L;
  #L45b014.  v4:= v0 ^& v2 @kind long;
  #L45b018.  v6:= 0L;
  #L45b01c.  v8:= lcmp(v4, v6);
  #L45b020.  if v8 == 0 then goto L45b026;
  #L45b024.  return @kind void;
  #L45b026.  v9:= v0 ^| v2 @kind long;
  #L45b02a.  v2:= v17 @kind object;
  #L45b02e.  call temp:= `compareAndSet`(v2, v0, v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L45b034.  v3:= temp;
  #L45b036.  if v3 == 0 then goto L45b008;
  #L45b03a.  v3:= lcmp(v0, v6);
  #L45b03e.  if v3 == 0 then goto L45b056;
  #L45b042.  v11:= v15 @kind object;
  #L45b044.  v12:= v16 @kind object;
  #L45b048.  v13:= v17 @kind object;
  #L45b04c.  v14:= v18 @kind object;
  #L45b050.  call temp:= `b`(v9, v11, v12, v13, v14) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.b:(JLorg/reactivestreams/Subscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLong;Lio/reactivex/functions/BooleanSupplier;)Z` @kind static;
  #L45b056.  return @kind void;
}
procedure `boolean` `postCompleteRequest`(`long` v14 , `org.reactivestreams.Subscriber` v16 @kind object, `java.util.Queue` v17 @kind object, `java.util.concurrent.atomic.AtomicLong` v18 @kind object, `io.reactivex.functions.BooleanSupplier` v19 @kind object) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.postCompleteRequest:(JLorg/reactivestreams/Subscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLong;Lio/reactivex/functions/BooleanSupplier;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L45ada8.  v0:= v14 @kind wide;
  #L45adaa.  call temp:= `get`(v18) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L45adb0.  v2:= temp @kind wide;
  #L45adb2.  v4:= 9223372036854775807L;
  #L45adbc.  v4:= v4 ^& v2 @kind long;
  #L45adbe.  v6:= -9223372036854775808L;
  #L45adc2.  v8:= v2 ^& v6 @kind long;
  #L45adc6.  call temp:= `addCap`(v4, v14) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L45adcc.  v4:= temp @kind wide;
  #L45adce.  v4:= v4 ^| v8 @kind long;
  #L45add0.  v12:= v18 @kind object;
  #L45add4.  call temp:= `compareAndSet`(v12, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L45adda.  v4:= temp;
  #L45addc.  if v4 == 0 then goto L45adaa;
  #L45ade0.  v4:= lcmp(v2, v6);
  #L45ade4.  if v4 != 0 then goto L45ae06;
  #L45ade8.  v8:= v0 ^| v6 @kind long;
  #L45adec.  v10:= v16 @kind object;
  #L45adf0.  v11:= v17 @kind object;
  #L45adf4.  v12:= v18 @kind object;
  #L45adf8.  v13:= v19 @kind object;
  #L45adfc.  call temp:= `b`(v8, v10, v11, v12, v13) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.b:(JLorg/reactivestreams/Subscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLong;Lio/reactivex/functions/BooleanSupplier;)Z` @kind static;
  #L45ae02.  v0:= 1I;
  #L45ae04.  return v0;
  #L45ae06.  v0:= 0I;
  #L45ae08.  return v0;
}
procedure `void` `request`(`org.reactivestreams.Subscription` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.request:(Lorg/reactivestreams/Subscription;I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L45b068.  if v3 >= 0 then goto L45b078;
  #L45b06c.  v0:= 9223372036854775807L;
  #L45b076.  goto L45b07a;
  #L45b078.  v0:= (`long`) v3 @kind i2l;
  #L45b07a.  call `request`(v2, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L45b080.  return @kind void;
}
