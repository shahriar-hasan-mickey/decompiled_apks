record `io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind class @AccessFlag PUBLIC {
  `int` `io.reactivex.internal.util.AppendOnlyLinkedArrayList.a` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.util.AppendOnlyLinkedArrayList.b` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.util.AppendOnlyLinkedArrayList.c` @AccessFlag ;
  `int` `io.reactivex.internal.util.AppendOnlyLinkedArrayList.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.util.AppendOnlyLinkedArrayList` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4590ec.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4590f2.  v0.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.a` @type ^`int` := v1;
  #L4590f6.  v1:= v1 + 1;
  #L4590fa.  v1:= new `java.lang.Object`[v1];
  #L4590fe.  v0.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.b` @type ^`java.lang.Object`[] := v1 @kind object;
  #L459102.  v0.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.c` @type ^`java.lang.Object`[] := v1 @kind object;
  #L459106.  return @kind void;
}
procedure `boolean` `accept`(`io.reactivex.internal.util.AppendOnlyLinkedArrayList` v4 @kind this, `io.reactivex.Observer` v5 @kind object) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.accept:(Lio/reactivex/Observer;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45904c.  v0:= v4.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.b` @type ^`java.lang.Object`[] @kind object;
  #L459050.  v1:= v4.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.a` @type ^`int`;
  #L459054.  v2:= 0I;
  #L459056.  if v0 == 0 then goto L459088;
  #L45905a.  if v2 >= v1 then goto L45907e;
  #L45905e.  v3:= v0[v2] @kind object;
  #L459062.  if v3 != 0 then goto L459068;
  #L459066.  goto L45907e;
  #L459068.  call temp:= `acceptFull`(v3, v5) @signature `Lio/reactivex/internal/util/NotificationLite;.acceptFull:(Ljava/lang/Object;Lio/reactivex/Observer;)Z` @kind static;
  #L45906e.  v3:= temp;
  #L459070.  if v3 == 0 then goto L459078;
  #L459074.  v5:= 1I;
  #L459076.  return v5;
  #L459078.  v2:= v2 + 1;
  #L45907c.  goto L45905a;
  #L45907e.  v0:= v0[v1] @kind object;
  #L459082.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L459086.  goto L459054;
  #L459088.  return v2;
}
procedure `boolean` `accept`(`io.reactivex.internal.util.AppendOnlyLinkedArrayList` v4 @kind this, `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.accept:(Lorg/reactivestreams/Subscriber;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45909c.  v0:= v4.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.b` @type ^`java.lang.Object`[] @kind object;
  #L4590a0.  v1:= v4.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.a` @type ^`int`;
  #L4590a4.  v2:= 0I;
  #L4590a6.  if v0 == 0 then goto L4590d8;
  #L4590aa.  if v2 >= v1 then goto L4590ce;
  #L4590ae.  v3:= v0[v2] @kind object;
  #L4590b2.  if v3 != 0 then goto L4590b8;
  #L4590b6.  goto L4590ce;
  #L4590b8.  call temp:= `acceptFull`(v3, v5) @signature `Lio/reactivex/internal/util/NotificationLite;.acceptFull:(Ljava/lang/Object;Lorg/reactivestreams/Subscriber;)Z` @kind static;
  #L4590be.  v3:= temp;
  #L4590c0.  if v3 == 0 then goto L4590c8;
  #L4590c4.  v5:= 1I;
  #L4590c6.  return v5;
  #L4590c8.  v2:= v2 + 1;
  #L4590cc.  goto L4590aa;
  #L4590ce.  v0:= v0[v1] @kind object;
  #L4590d2.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L4590d6.  goto L4590a4;
  #L4590d8.  return v2;
}
procedure `void` `add`(`io.reactivex.internal.util.AppendOnlyLinkedArrayList` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L459118.  v0:= v3.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.a` @type ^`int`;
  #L45911c.  v1:= v3.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.d` @type ^`int`;
  #L459120.  if v1 != v0 then goto L45913a;
  #L459124.  v1:= v0 + 1;
  #L459128.  v1:= new `java.lang.Object`[v1];
  #L45912c.  v2:= v3.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.c` @type ^`java.lang.Object`[] @kind object;
  #L459130.  v2[v0]:= v1 @kind object;
  #L459134.  v3.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.c` @type ^`java.lang.Object`[] := v1 @kind object;
  #L459138.  v1:= 0I;
  #L45913a.  v0:= v3.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.c` @type ^`java.lang.Object`[] @kind object;
  #L45913e.  v0[v1]:= v4 @kind object;
  #L459142.  v1:= v1 + 1;
  #L459146.  v3.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.d` @type ^`int` := v1;
  #L45914a.  return @kind void;
}
procedure `void` `forEachWhile`(`io.reactivex.internal.util.AppendOnlyLinkedArrayList` v4 @kind this, `io.reactivex.internal.util.AppendOnlyLinkedArrayList$NonThrowingPredicate` v5 @kind object) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.forEachWhile:(Lio/reactivex/internal/util/AppendOnlyLinkedArrayList$NonThrowingPredicate;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45915c.  v0:= v4.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.b` @type ^`java.lang.Object`[] @kind object;
  #L459160.  v1:= v4.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.a` @type ^`int`;
  #L459164.  if v0 == 0 then goto L459196;
  #L459168.  v2:= 0I;
  #L45916a.  if v2 >= v1 then goto L45918c;
  #L45916e.  v3:= v0[v2] @kind object;
  #L459172.  if v3 != 0 then goto L459178;
  #L459176.  goto L45918c;
  #L459178.  call temp:= `test`(v5, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList$NonThrowingPredicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L45917e.  v3:= temp;
  #L459180.  if v3 == 0 then goto L459186;
  #L459184.  goto L45918c;
  #L459186.  v2:= v2 + 1;
  #L45918a.  goto L45916a;
  #L45918c.  v0:= v0[v1] @kind object;
  #L459190.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L459194.  goto L459164;
  #L459196.  return @kind void;
}
procedure `void` `forEachWhile`(`io.reactivex.internal.util.AppendOnlyLinkedArrayList` v4 @kind this, `java.lang.Object` v5 @kind object, `io.reactivex.functions.BiPredicate` v6 @kind object) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.forEachWhile:(Ljava/lang/Object;Lio/reactivex/functions/BiPredicate;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4591a8.  v0:= v4.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.b` @type ^`java.lang.Object`[] @kind object;
  #L4591ac.  v1:= v4.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.a` @type ^`int`;
  #L4591b0.  v2:= 0I;
  #L4591b2.  if v2 >= v1 then goto L4591d4;
  #L4591b6.  v3:= v0[v2] @kind object;
  #L4591ba.  if v3 != 0 then goto L4591c0;
  #L4591be.  return @kind void;
  #L4591c0.  call temp:= `test`(v6, v5, v3) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L4591c6.  v3:= temp;
  #L4591c8.  if v3 == 0 then goto L4591ce;
  #L4591cc.  return @kind void;
  #L4591ce.  v2:= v2 + 1;
  #L4591d2.  goto L4591b2;
  #L4591d4.  v0:= v0[v1] @kind object;
  #L4591d8.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L4591dc.  goto L4591b0;
}
procedure `void` `setFirst`(`io.reactivex.internal.util.AppendOnlyLinkedArrayList` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.setFirst:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4591f0.  v0:= v2.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.b` @type ^`java.lang.Object`[] @kind object;
  #L4591f4.  v1:= 0I;
  #L4591f6.  v0[v1]:= v3 @kind object;
  #L4591fa.  return @kind void;
}
