record `io.reactivex.internal.util.ExceptionHelper` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.lang.Throwable` `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/util/ExceptionHelper;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L459d58.  v0:= new `io.reactivex.internal.util.ExceptionHelper$a`;
  #L459d5c.  call `<init>`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper$a;.<init>:()V` @kind direct;
  #L459d62.  `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` := v0 @kind object;
  #L459d66.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.util.ExceptionHelper` v2 @kind this) @signature `Lio/reactivex/internal/util/ExceptionHelper;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L459d78.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L459d7e.  v0:= new `java.lang.IllegalStateException`;
  #L459d82.  v1:= "No instances!" @kind object;
  #L459d86.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L459d8c.  throw v0;
}
procedure `boolean` `addThrowable`(`java.util.concurrent.atomic.AtomicReference` v5 @kind object, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L459c10.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L459c16.  v0:= temp @kind object;
  #L459c18.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L459c1c.  v1:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L459c20.  v2:= 0I;
  #L459c22.  if v0 != v1 then goto L459c28;
  #L459c26.  return v2;
  #L459c28.  v1:= 1I;
  #L459c2a.  if v0 != 0 then goto L459c32;
  #L459c2e.  v3:= v6 @kind object;
  #L459c30.  goto L459c4a;
  #L459c32.  v3:= new `io.reactivex.exceptions.CompositeException`;
  #L459c36.  v4:= 2I;
  #L459c38.  v4:= new `java.lang.Throwable`[v4];
  #L459c3c.  v4[v2]:= v0 @kind object;
  #L459c40.  v4[v1]:= v6 @kind object;
  #L459c44.  call `<init>`(v3, v4) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L459c4a.  call temp:= `compareAndSet`(v5, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L459c50.  v0:= temp;
  #L459c52.  if v0 == 0 then goto L459c10;
  #L459c56.  return v1;
}
procedure `java.util.List` `flatten`(`java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/util/ExceptionHelper;.flatten:(Ljava/lang/Throwable;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L459cd4.  v0:= new `java.util.ArrayList`;
  #L459cd8.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L459cde.  v1:= new `java.util.ArrayDeque`;
  #L459ce2.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L459ce8.  call temp:= `offer`(v1, v4) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L459cee.  call temp:= `isEmpty`(v1) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L459cf4.  v4:= temp;
  #L459cf6.  if v4 != 0 then goto L459d46;
  #L459cfa.  call temp:= `removeFirst`(v1) @signature `Ljava/util/ArrayDeque;.removeFirst:()Ljava/lang/Object;` @kind virtual;
  #L459d00.  v4:= temp @kind object;
  #L459d02.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L459d06.  v2:= instanceof @variable v4 @type ^`io.reactivex.exceptions.CompositeException` @kind boolean;
  #L459d0a.  if v2 == 0 then goto L459d3e;
  #L459d0e.  v4:= (`io.reactivex.exceptions.CompositeException`) v4 @kind object;
  #L459d12.  call temp:= `getExceptions`(v4) @signature `Lio/reactivex/exceptions/CompositeException;.getExceptions:()Ljava/util/List;` @kind virtual;
  #L459d18.  v4:= temp @kind object;
  #L459d1a.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L459d20.  v2:= temp;
  #L459d22.  v2:= v2 + -1;
  #L459d26.  if v2 < 0 then goto L459cee;
  #L459d2a.  call temp:= `get`(v4, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L459d30.  v3:= temp @kind object;
  #L459d32.  call temp:= `offerFirst`(v1, v3) @signature `Ljava/util/ArrayDeque;.offerFirst:(Ljava/lang/Object;)Z` @kind virtual;
  #L459d38.  v2:= v2 + -1;
  #L459d3c.  goto L459d26;
  #L459d3e.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L459d44.  goto L459cee;
  #L459d46.  return v0 @kind object;
}
procedure `java.lang.Throwable` `terminate`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L459ca0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L459ca6.  v0:= temp @kind object;
  #L459ca8.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L459cac.  v1:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L459cb0.  if v0 == v1 then goto L459cc2;
  #L459cb4.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L459cba.  v2:= temp @kind object;
  #L459cbc.  v0:= v2 @kind object;
  #L459cbe.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L459cc2.  return v0 @kind object;
}
procedure `java.lang.RuntimeException` `wrapOrThrow`(`java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L459c68.  v0:= instanceof @variable v1 @type ^`java.lang.Error` @kind boolean;
  #L459c6c.  if v0 != 0 then goto L459c8a;
  #L459c70.  v0:= instanceof @variable v1 @type ^`java.lang.RuntimeException` @kind boolean;
  #L459c74.  if v0 == 0 then goto L459c7e;
  #L459c78.  v1:= (`java.lang.RuntimeException`) v1 @kind object;
  #L459c7c.  return v1 @kind object;
  #L459c7e.  v0:= new `java.lang.RuntimeException`;
  #L459c82.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L459c88.  return v0 @kind object;
  #L459c8a.  v1:= (`java.lang.Error`) v1 @kind object;
  #L459c8e.  throw v1;
}
