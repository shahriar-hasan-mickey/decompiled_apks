record `io.reactivex.internal.util.OpenHashSet` @kind class @AccessFlag PUBLIC_FINAL {
  `float` `io.reactivex.internal.util.OpenHashSet.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.util.OpenHashSet.b` @AccessFlag ;
  `int` `io.reactivex.internal.util.OpenHashSet.c` @AccessFlag ;
  `int` `io.reactivex.internal.util.OpenHashSet.d` @AccessFlag ;
  `java.lang.Object`[] `io.reactivex.internal.util.OpenHashSet.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.util.OpenHashSet` v2 @kind this) @signature `Lio/reactivex/internal/util/OpenHashSet;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L45aa34.  v0:= 16I;
  #L45aa38.  v1:= 0.75F;
  #L45aa3c.  call `<init>`(v2, v0, v1) @signature `Lio/reactivex/internal/util/OpenHashSet;.<init>:(IF)V` @kind direct;
  #L45aa42.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.util.OpenHashSet` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/util/OpenHashSet;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L45aa54.  v0:= 0.75F;
  #L45aa58.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/util/OpenHashSet;.<init>:(IF)V` @kind direct;
  #L45aa5e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.util.OpenHashSet` v1 @kind this, `int` v2 , `float` v3 ) @signature `Lio/reactivex/internal/util/OpenHashSet;.<init>:(IF)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L45aa70.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45aa76.  v1.`io.reactivex.internal.util.OpenHashSet.a` @type ^`float` := v3;
  #L45aa7a.  call temp:= `roundToPowerOfTwo`(v2) @signature `Lio/reactivex/internal/util/Pow2;.roundToPowerOfTwo:(I)I` @kind static;
  #L45aa80.  v2:= temp;
  #L45aa82.  v0:= v2 + -1;
  #L45aa86.  v1.`io.reactivex.internal.util.OpenHashSet.b` @type ^`int` := v0;
  #L45aa8a.  v0:= (`float`) v2 @kind i2f;
  #L45aa8c.  v3:= v3 * v0 @kind float;
  #L45aa90.  v3:= (`int`) v3 @kind f2i;
  #L45aa92.  v1.`io.reactivex.internal.util.OpenHashSet.d` @type ^`int` := v3;
  #L45aa96.  v2:= new `java.lang.Object`[v2];
  #L45aa9a.  v1.`io.reactivex.internal.util.OpenHashSet.e` @type ^`java.lang.Object`[] := v2 @kind object;
  #L45aa9e.  return @kind void;
}
procedure `int` `a`(`int` v1 ) @signature `Lio/reactivex/internal/util/OpenHashSet;.a:(I)I` @AccessFlag STATIC {
    temp;
    v0;

  #L45a9e0.  v0:= -1640531527I;
  #L45a9e6.  v1:= v1 * v0 @kind int;
  #L45a9ea.  v0:= v1 ^>> 16;
  #L45a9ee.  v1:= v1 ^~ v0 @kind int;
  #L45a9f0.  return v1;
}
procedure `boolean` `add`(`io.reactivex.internal.util.OpenHashSet` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/util/OpenHashSet;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L45a884.  v0:= v6.`io.reactivex.internal.util.OpenHashSet.e` @type ^`java.lang.Object`[] @kind object;
  #L45a888.  v1:= v6.`io.reactivex.internal.util.OpenHashSet.b` @type ^`int`;
  #L45a88c.  call temp:= `hashCode`(v7) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L45a892.  v2:= temp;
  #L45a894.  call temp:= `a`(v2) @signature `Lio/reactivex/internal/util/OpenHashSet;.a:(I)I` @kind static;
  #L45a89a.  v2:= temp;
  #L45a89c.  v2:= v2 ^& v1 @kind int;
  #L45a89e.  v3:= v0[v2] @kind object;
  #L45a8a2.  v4:= 1I;
  #L45a8a4.  if v3 == 0 then goto L45a8d4;
  #L45a8a8.  call temp:= `equals`(v3, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L45a8ae.  v3:= temp;
  #L45a8b0.  v5:= 0I;
  #L45a8b2.  if v3 == 0 then goto L45a8b8;
  #L45a8b6.  return v5;
  #L45a8b8.  v2:= v2 + v4 @kind int;
  #L45a8ba.  v2:= v2 ^& v1 @kind int;
  #L45a8bc.  v3:= v0[v2] @kind object;
  #L45a8c0.  if v3 != 0 then goto L45a8c6;
  #L45a8c4.  goto L45a8d4;
  #L45a8c6.  call temp:= `equals`(v3, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L45a8cc.  v3:= temp;
  #L45a8ce.  if v3 == 0 then goto L45a8b8;
  #L45a8d2.  return v5;
  #L45a8d4.  v0[v2]:= v7 @kind object;
  #L45a8d8.  v7:= v6.`io.reactivex.internal.util.OpenHashSet.c` @type ^`int`;
  #L45a8dc.  v7:= v7 + v4 @kind int;
  #L45a8de.  v6.`io.reactivex.internal.util.OpenHashSet.c` @type ^`int` := v7;
  #L45a8e2.  v0:= v6.`io.reactivex.internal.util.OpenHashSet.d` @type ^`int`;
  #L45a8e6.  if v7 < v0 then goto L45a8f0;
  #L45a8ea.  call `b`(v6) @signature `Lio/reactivex/internal/util/OpenHashSet;.b:()V` @kind virtual;
  #L45a8f0.  return v4;
}
procedure `void` `b`(`io.reactivex.internal.util.OpenHashSet` v8 @kind this) @signature `Lio/reactivex/internal/util/OpenHashSet;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L45aab0.  v0:= v8.`io.reactivex.internal.util.OpenHashSet.e` @type ^`java.lang.Object`[] @kind object;
  #L45aab4.  v1:= length @variable v0;
  #L45aab6.  v2:= v1 ^< 1;
  #L45aaba.  v3:= v2 + -1;
  #L45aabe.  v4:= new `java.lang.Object`[v2];
  #L45aac2.  v5:= v8.`io.reactivex.internal.util.OpenHashSet.c` @type ^`int`;
  #L45aac6.  v6:= v5 + -1;
  #L45aaca.  if v5 == 0 then goto L45ab14;
  #L45aace.  v1:= v1 + -1;
  #L45aad2.  v5:= v0[v1] @kind object;
  #L45aad6.  if v5 != 0 then goto L45aadc;
  #L45aada.  goto L45aace;
  #L45aadc.  v5:= v0[v1] @kind object;
  #L45aae0.  call temp:= `hashCode`(v5) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L45aae6.  v5:= temp;
  #L45aae8.  call temp:= `a`(v5) @signature `Lio/reactivex/internal/util/OpenHashSet;.a:(I)I` @kind static;
  #L45aaee.  v5:= temp;
  #L45aaf0.  v5:= v5 ^& v3 @kind int;
  #L45aaf2.  v7:= v4[v5] @kind object;
  #L45aaf6.  if v7 == 0 then goto L45ab08;
  #L45aafa.  v5:= v5 + 1;
  #L45aafe.  v5:= v5 ^& v3 @kind int;
  #L45ab00.  v7:= v4[v5] @kind object;
  #L45ab04.  if v7 != 0 then goto L45aafa;
  #L45ab08.  v7:= v0[v1] @kind object;
  #L45ab0c.  v4[v5]:= v7 @kind object;
  #L45ab10.  v5:= v6;
  #L45ab12.  goto L45aac6;
  #L45ab14.  v8.`io.reactivex.internal.util.OpenHashSet.b` @type ^`int` := v3;
  #L45ab18.  v0:= (`float`) v2 @kind i2f;
  #L45ab1a.  v1:= v8.`io.reactivex.internal.util.OpenHashSet.a` @type ^`float`;
  #L45ab1e.  v0:= v0 * v1 @kind float;
  #L45ab22.  v0:= (`int`) v0 @kind f2i;
  #L45ab24.  v8.`io.reactivex.internal.util.OpenHashSet.d` @type ^`int` := v0;
  #L45ab28.  v8.`io.reactivex.internal.util.OpenHashSet.e` @type ^`java.lang.Object`[] := v4 @kind object;
  #L45ab2c.  return @kind void;
}
procedure `boolean` `c`(`io.reactivex.internal.util.OpenHashSet` v4 @kind this, `int` v5 , `java.lang.Object`[] v6 @kind object, `int` v7 ) @signature `Lio/reactivex/internal/util/OpenHashSet;.c:(I[Ljava/lang/Object;I)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45a978.  v0:= v4.`io.reactivex.internal.util.OpenHashSet.c` @type ^`int`;
  #L45a97c.  v1:= 1I;
  #L45a97e.  v0:= v0 - v1 @kind int;
  #L45a980.  v4.`io.reactivex.internal.util.OpenHashSet.c` @type ^`int` := v0;
  #L45a984.  v0:= v5 + 1;
  #L45a988.  v0:= v0 ^& v7 @kind int;
  #L45a98a.  v2:= v6[v0] @kind object;
  #L45a98e.  if v2 != 0 then goto L45a99a;
  #L45a992.  v7:= 0I;
  #L45a994.  v6[v5]:= v7 @kind object;
  #L45a998.  return v1;
  #L45a99a.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L45a9a0.  v3:= temp;
  #L45a9a2.  call temp:= `a`(v3) @signature `Lio/reactivex/internal/util/OpenHashSet;.a:(I)I` @kind static;
  #L45a9a8.  v3:= temp;
  #L45a9aa.  v3:= v3 ^& v7 @kind int;
  #L45a9ac.  if v5 > v0 then goto L45a9ba;
  #L45a9b0.  if v5 >= v3 then goto L45a9c2;
  #L45a9b4.  if v3 <= v0 then goto L45a9ca;
  #L45a9b8.  goto L45a9c2;
  #L45a9ba.  if v5 < v3 then goto L45a9ca;
  #L45a9be.  if v3 <= v0 then goto L45a9ca;
  #L45a9c2.  v6[v5]:= v2 @kind object;
  #L45a9c6.  v5:= v0;
  #L45a9c8.  goto L45a984;
  #L45a9ca.  v0:= v0 + 1;
  #L45a9ce.  goto L45a988;
}
procedure `java.lang.Object`[] `keys`(`io.reactivex.internal.util.OpenHashSet` v1 @kind this) @signature `Lio/reactivex/internal/util/OpenHashSet;.keys:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45aa1c.  v0:= v1.`io.reactivex.internal.util.OpenHashSet.e` @type ^`java.lang.Object`[] @kind object;
  #L45aa20.  return v0 @kind object;
}
procedure `boolean` `remove`(`io.reactivex.internal.util.OpenHashSet` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/util/OpenHashSet;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45a904.  v0:= v5.`io.reactivex.internal.util.OpenHashSet.e` @type ^`java.lang.Object`[] @kind object;
  #L45a908.  v1:= v5.`io.reactivex.internal.util.OpenHashSet.b` @type ^`int`;
  #L45a90c.  call temp:= `hashCode`(v6) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L45a912.  v2:= temp;
  #L45a914.  call temp:= `a`(v2) @signature `Lio/reactivex/internal/util/OpenHashSet;.a:(I)I` @kind static;
  #L45a91a.  v2:= temp;
  #L45a91c.  v2:= v2 ^& v1 @kind int;
  #L45a91e.  v3:= v0[v2] @kind object;
  #L45a922.  v4:= 0I;
  #L45a924.  if v3 != 0 then goto L45a92a;
  #L45a928.  return v4;
  #L45a92a.  call temp:= `equals`(v3, v6) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L45a930.  v3:= temp;
  #L45a932.  if v3 == 0 then goto L45a940;
  #L45a936.  call temp:= `c`(v5, v2, v0, v1) @signature `Lio/reactivex/internal/util/OpenHashSet;.c:(I[Ljava/lang/Object;I)Z` @kind virtual;
  #L45a93c.  v6:= temp;
  #L45a93e.  return v6;
  #L45a940.  v2:= v2 + 1;
  #L45a944.  v2:= v2 ^& v1 @kind int;
  #L45a946.  v3:= v0[v2] @kind object;
  #L45a94a.  if v3 != 0 then goto L45a950;
  #L45a94e.  return v4;
  #L45a950.  call temp:= `equals`(v3, v6) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L45a956.  v3:= temp;
  #L45a958.  if v3 == 0 then goto L45a940;
  #L45a95c.  call temp:= `c`(v5, v2, v0, v1) @signature `Lio/reactivex/internal/util/OpenHashSet;.c:(I[Ljava/lang/Object;I)Z` @kind virtual;
  #L45a962.  v6:= temp;
  #L45a964.  return v6;
}
procedure `int` `size`(`io.reactivex.internal.util.OpenHashSet` v1 @kind this) @signature `Lio/reactivex/internal/util/OpenHashSet;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45aa04.  v0:= v1.`io.reactivex.internal.util.OpenHashSet.c` @type ^`int`;
  #L45aa08.  return v0;
}
