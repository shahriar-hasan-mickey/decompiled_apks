record `io.reactivex.internal.util.MergerBiFunction` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.functions.BiFunction` @kind interface {
  `java.util.Comparator` `io.reactivex.internal.util.MergerBiFunction.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.util.MergerBiFunction` v0 @kind this, `java.util.Comparator` v1 @kind object) @signature `Lio/reactivex/internal/util/MergerBiFunction;.<init>:(Ljava/util/Comparator;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L45a3b8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45a3be.  v0.`io.reactivex.internal.util.MergerBiFunction.a` @type ^`java.util.Comparator` := v1 @kind object;
  #L45a3c2.  return @kind void;
}
procedure `java.lang.Object` `apply`(`io.reactivex.internal.util.MergerBiFunction` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/util/MergerBiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L45a274.  v1:= (`java.util.List`) v1 @kind object;
  #L45a278.  v2:= (`java.util.List`) v2 @kind object;
  #L45a27c.  call temp:= `apply`(v0, v1, v2) @signature `Lio/reactivex/internal/util/MergerBiFunction;.apply:(Ljava/util/List;Ljava/util/List;)Ljava/util/List;` @kind virtual;
  #L45a282.  v1:= temp @kind object;
  #L45a284.  return v1 @kind object;
}
procedure `java.util.List` `apply`(`io.reactivex.internal.util.MergerBiFunction` v5 @kind this, `java.util.List` v6 @kind object, `java.util.List` v7 @kind object) @signature `Lio/reactivex/internal/util/MergerBiFunction;.apply:(Ljava/util/List;Ljava/util/List;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45a298.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L45a29e.  v0:= temp;
  #L45a2a0.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L45a2a6.  v1:= temp;
  #L45a2a8.  v0:= v0 + v1 @kind int;
  #L45a2aa.  if v0 != 0 then goto L45a2ba;
  #L45a2ae.  v6:= new `java.util.ArrayList`;
  #L45a2b2.  call `<init>`(v6) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L45a2b8.  return v6 @kind object;
  #L45a2ba.  v1:= new `java.util.ArrayList`;
  #L45a2be.  call `<init>`(v1, v0) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L45a2c4.  call temp:= `iterator`(v6) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L45a2ca.  v6:= temp @kind object;
  #L45a2cc.  call temp:= `iterator`(v7) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L45a2d2.  v7:= temp @kind object;
  #L45a2d4.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45a2da.  v0:= temp;
  #L45a2dc.  v2:= 0I;
  #L45a2de.  if v0 == 0 then goto L45a2ec;
  #L45a2e2.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L45a2e8.  v0:= temp @kind object;
  #L45a2ea.  goto L45a2ee;
  #L45a2ec.  v0:= v2 @kind object;
  #L45a2ee.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45a2f4.  v3:= temp;
  #L45a2f6.  if v3 == 0 then goto L45a304;
  #L45a2fa.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L45a300.  v3:= temp @kind object;
  #L45a302.  goto L45a306;
  #L45a304.  v3:= v2 @kind object;
  #L45a306.  if v0 == 0 then goto L45a35a;
  #L45a30a.  if v3 == 0 then goto L45a35a;
  #L45a30e.  v4:= v5.`io.reactivex.internal.util.MergerBiFunction.a` @type ^`java.util.Comparator` @kind object;
  #L45a312.  call temp:= `compare`(v4, v0, v3) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L45a318.  v4:= temp;
  #L45a31a.  if v4 >= 0 then goto L45a33e;
  #L45a31e.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45a324.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45a32a.  v0:= temp;
  #L45a32c.  if v0 == 0 then goto L45a33a;
  #L45a330.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L45a336.  v0:= temp @kind object;
  #L45a338.  goto L45a306;
  #L45a33a.  v0:= v2 @kind object;
  #L45a33c.  goto L45a306;
  #L45a33e.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45a344.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45a34a.  v3:= temp;
  #L45a34c.  if v3 == 0 then goto L45a304;
  #L45a350.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L45a356.  v3:= temp @kind object;
  #L45a358.  goto L45a306;
  #L45a35a.  if v0 == 0 then goto L45a380;
  #L45a35e.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45a364.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45a36a.  v7:= temp;
  #L45a36c.  if v7 == 0 then goto L45a3a6;
  #L45a370.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L45a376.  v7:= temp @kind object;
  #L45a378.  call temp:= `add`(v1, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45a37e.  goto L45a364;
  #L45a380.  if v3 == 0 then goto L45a3a6;
  #L45a384.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45a38a.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45a390.  v6:= temp;
  #L45a392.  if v6 == 0 then goto L45a3a6;
  #L45a396.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L45a39c.  v6:= temp @kind object;
  #L45a39e.  call temp:= `add`(v1, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45a3a4.  goto L45a38a;
  #L45a3a6.  return v1 @kind object;
}
