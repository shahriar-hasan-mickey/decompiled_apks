record `io.reactivex.internal.util.BackpressureHelper` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`io.reactivex.internal.util.BackpressureHelper` v2 @kind this) @signature `Lio/reactivex/internal/util/BackpressureHelper;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4595c8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4595ce.  v0:= new `java.lang.IllegalStateException`;
  #L4595d2.  v1:= "No instances!" @kind object;
  #L4595d6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4595dc.  throw v0;
}
procedure `long` `add`(`java.util.concurrent.atomic.AtomicLong` v5 @kind object, `long` v6 ) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4593b8.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4593be.  v0:= temp @kind wide;
  #L4593c0.  v2:= 9223372036854775807L;
  #L4593ca.  v4:= lcmp(v0, v2);
  #L4593ce.  if v4 != 0 then goto L4593d4;
  #L4593d2.  return v2 @kind wide;
  #L4593d4.  call temp:= `addCap`(v0, v6) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L4593da.  v2:= temp @kind wide;
  #L4593dc.  call temp:= `compareAndSet`(v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4593e2.  v2:= temp;
  #L4593e4.  if v2 == 0 then goto L4593b8;
  #L4593e8.  return v0 @kind wide;
}
procedure `long` `addCancel`(`java.util.concurrent.atomic.AtomicLong` v5 @kind object, `long` v6 ) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4593fc.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L459402.  v0:= temp @kind wide;
  #L459404.  v2:= -9223372036854775808L;
  #L459408.  v4:= lcmp(v0, v2);
  #L45940c.  if v4 != 0 then goto L459412;
  #L459410.  return v2 @kind wide;
  #L459412.  v2:= 9223372036854775807L;
  #L45941c.  v4:= lcmp(v0, v2);
  #L459420.  if v4 != 0 then goto L459426;
  #L459424.  return v2 @kind wide;
  #L459426.  call temp:= `addCap`(v0, v6) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L45942c.  v2:= temp @kind wide;
  #L45942e.  call temp:= `compareAndSet`(v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L459434.  v2:= temp;
  #L459436.  if v2 == 0 then goto L4593fc;
  #L45943a.  return v0 @kind wide;
}
procedure `long` `addCap`(`long` v1 , `long` v3 ) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L45944c.  v1:= v1 + v3 @kind long;
  #L45944e.  v3:= 0L;
  #L459452.  v0:= lcmp(v1, v3);
  #L459456.  if v0 >= 0 then goto L459464;
  #L45945a.  v1:= 9223372036854775807L;
  #L459464.  return v1 @kind wide;
}
procedure `long` `multiplyCap`(`long` v7 , `long` v9 ) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L459478.  v0:= v7 * v9 @kind long;
  #L45947c.  v2:= v7 ^| v9 @kind long;
  #L459480.  v4:= 31I;
  #L459484.  v2:= v2 ^>> v4 @kind long;
  #L459486.  v4:= 0L;
  #L45948a.  v6:= lcmp(v2, v4);
  #L45948e.  if v6 == 0 then goto L4594aa;
  #L459492.  v7:= v0 / v7 @kind long;
  #L459496.  v2:= lcmp(v7, v9);
  #L45949a.  if v2 == 0 then goto L4594aa;
  #L45949e.  v7:= 9223372036854775807L;
  #L4594a8.  return v7 @kind wide;
  #L4594aa.  return v0 @kind wide;
}
procedure `long` `produced`(`java.util.concurrent.atomic.AtomicLong` v9 @kind object, `long` v10 ) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4594bc.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4594c2.  v0:= temp @kind wide;
  #L4594c4.  v2:= 9223372036854775807L;
  #L4594ce.  v4:= lcmp(v0, v2);
  #L4594d2.  if v4 != 0 then goto L4594d8;
  #L4594d6.  return v2 @kind wide;
  #L4594d8.  v2:= v0 - v10 @kind long;
  #L4594dc.  v4:= 0L;
  #L4594e0.  v6:= lcmp(v2, v4);
  #L4594e4.  if v6 >= 0 then goto L45951c;
  #L4594e8.  v6:= new `java.lang.IllegalStateException`;
  #L4594ec.  v7:= new `java.lang.StringBuilder`;
  #L4594f0.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4594f6.  v8:= "More produced than requested: " @kind object;
  #L4594fa.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L459500.  call temp:= `append`(v7, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L459506.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45950c.  v2:= temp @kind object;
  #L45950e.  call `<init>`(v6, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L459514.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45951a.  v2:= v4 @kind wide;
  #L45951c.  call temp:= `compareAndSet`(v9, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L459522.  v0:= temp;
  #L459524.  if v0 == 0 then goto L4594bc;
  #L459528.  return v2 @kind wide;
}
procedure `long` `producedCancel`(`java.util.concurrent.atomic.AtomicLong` v9 @kind object, `long` v10 ) @signature `Lio/reactivex/internal/util/BackpressureHelper;.producedCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L45953c.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L459542.  v0:= temp @kind wide;
  #L459544.  v2:= -9223372036854775808L;
  #L459548.  v4:= lcmp(v0, v2);
  #L45954c.  if v4 != 0 then goto L459552;
  #L459550.  return v2 @kind wide;
  #L459552.  v2:= 9223372036854775807L;
  #L45955c.  v4:= lcmp(v0, v2);
  #L459560.  if v4 != 0 then goto L459566;
  #L459564.  return v2 @kind wide;
  #L459566.  v2:= v0 - v10 @kind long;
  #L45956a.  v4:= 0L;
  #L45956e.  v6:= lcmp(v2, v4);
  #L459572.  if v6 >= 0 then goto L4595aa;
  #L459576.  v6:= new `java.lang.IllegalStateException`;
  #L45957a.  v7:= new `java.lang.StringBuilder`;
  #L45957e.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L459584.  v8:= "More produced than requested: " @kind object;
  #L459588.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45958e.  call temp:= `append`(v7, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L459594.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45959a.  v2:= temp @kind object;
  #L45959c.  call `<init>`(v6, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4595a2.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4595a8.  v2:= v4 @kind wide;
  #L4595aa.  call temp:= `compareAndSet`(v9, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4595b0.  v0:= temp;
  #L4595b2.  if v0 == 0 then goto L45953c;
  #L4595b6.  return v2 @kind wide;
}
