record `io.reactivex.internal.queue.SpscArrayQueue` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReferenceArray` @kind class, `io.reactivex.internal.fuseable.SimplePlainQueue` @kind interface {
  `int` `io.reactivex.internal.queue.SpscArrayQueue.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.queue.SpscArrayQueue.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.queue.SpscArrayQueue.c` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.queue.SpscArrayQueue.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.queue.SpscArrayQueue.e` @AccessFlag FINAL;
}
global `java.lang.Integer` `@@io.reactivex.internal.queue.SpscArrayQueue.f` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@io.reactivex.internal.queue.SpscArrayQueue.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L453130.  v0:= "jctools.spsc.max.lookahead.step" @kind object;
  #L453134.  v1:= 4096I;
  #L453138.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L45313e.  v0:= temp @kind object;
  #L453140.  `@@io.reactivex.internal.queue.SpscArrayQueue.f` @type ^`java.lang.Integer` := v0 @kind object;
  #L453144.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.queue.SpscArrayQueue` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L453158.  call temp:= `roundToPowerOfTwo`(v2) @signature `Lio/reactivex/internal/util/Pow2;.roundToPowerOfTwo:(I)I` @kind static;
  #L45315e.  v0:= temp;
  #L453160.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L453166.  call temp:= `length`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L45316c.  v0:= temp;
  #L45316e.  v0:= v0 + -1;
  #L453172.  v1.`io.reactivex.internal.queue.SpscArrayQueue.a` @type ^`int` := v0;
  #L453176.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L45317a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L453180.  v1.`io.reactivex.internal.queue.SpscArrayQueue.b` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L453184.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L453188.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L45318e.  v1.`io.reactivex.internal.queue.SpscArrayQueue.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L453192.  v2:= v2 / 4;
  #L453196.  v0:= `@@io.reactivex.internal.queue.SpscArrayQueue.f` @type ^`java.lang.Integer` @kind object;
  #L45319a.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4531a0.  v0:= temp;
  #L4531a2.  call temp:= `min`(v2, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4531a8.  v2:= temp;
  #L4531aa.  v1.`io.reactivex.internal.queue.SpscArrayQueue.e` @type ^`int` := v2;
  #L4531ae.  return @kind void;
}
procedure `int` `a`(`io.reactivex.internal.queue.SpscArrayQueue` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.a:(J)I` @AccessFlag  {
    temp;

  #L453098.  v2:= (`int`) v1 @kind l2i;
  #L45309a.  v1:= v0.`io.reactivex.internal.queue.SpscArrayQueue.a` @type ^`int`;
  #L45309e.  v1:= v1 ^& v2 @kind int;
  #L4530a0.  return v1;
}
procedure `void` `clear`(`io.reactivex.internal.queue.SpscArrayQueue` v1 @kind this) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4531c0.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4531c6.  v0:= temp @kind object;
  #L4531c8.  if v0 != 0 then goto L4531c0;
  #L4531cc.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4531d2.  v0:= temp;
  #L4531d4.  if v0 != 0 then goto L4531da;
  #L4531d8.  goto L4531c0;
  #L4531da.  return @kind void;
}
procedure `int` `e`(`io.reactivex.internal.queue.SpscArrayQueue` v0 @kind this, `long` v1 , `int` v3 ) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.e:(JI)I` @AccessFlag  {
    temp;

  #L4530b4.  v2:= (`int`) v1 @kind l2i;
  #L4530b6.  v1:= v2 ^& v3 @kind int;
  #L4530ba.  return v1;
}
procedure `java.lang.Object` `f`(`io.reactivex.internal.queue.SpscArrayQueue` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.f:(I)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L4530cc.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4530d2.  v1:= temp @kind object;
  #L4530d4.  return v1 @kind object;
}
procedure `void` `g`(`io.reactivex.internal.queue.SpscArrayQueue` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.g:(J)V` @AccessFlag  {
    temp;
    v0;

  #L4531ec.  v0:= v1.`io.reactivex.internal.queue.SpscArrayQueue.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4531f0.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L4531f6.  return @kind void;
}
procedure `void` `h`(`io.reactivex.internal.queue.SpscArrayQueue` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.h:(ILjava/lang/Object;)V` @AccessFlag  {
    temp;

  #L453208.  call `lazySet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L45320e.  return @kind void;
}
procedure `void` `i`(`io.reactivex.internal.queue.SpscArrayQueue` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.i:(J)V` @AccessFlag  {
    temp;
    v0;

  #L453220.  v0:= v1.`io.reactivex.internal.queue.SpscArrayQueue.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L453224.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L45322a.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.queue.SpscArrayQueue` v5 @kind this) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L452fa8.  v0:= v5.`io.reactivex.internal.queue.SpscArrayQueue.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L452fac.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L452fb2.  v0:= temp @kind wide;
  #L452fb4.  v2:= v5.`io.reactivex.internal.queue.SpscArrayQueue.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L452fb8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L452fbe.  v2:= temp @kind wide;
  #L452fc0.  v4:= lcmp(v0, v2);
  #L452fc4.  if v4 != 0 then goto L452fcc;
  #L452fc8.  v0:= 1I;
  #L452fca.  goto L452fce;
  #L452fcc.  v0:= 0I;
  #L452fce.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.internal.queue.SpscArrayQueue` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L452fe0.  v0:= "Null is not a valid element" @kind object;
  #L452fe4.  call temp:= `requireNonNull`(v8, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L452fea.  v0:= v7.`io.reactivex.internal.queue.SpscArrayQueue.a` @type ^`int`;
  #L452fee.  v1:= v7.`io.reactivex.internal.queue.SpscArrayQueue.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L452ff2.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L452ff8.  v1:= temp @kind wide;
  #L452ffa.  call temp:= `e`(v7, v1, v0) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.e:(JI)I` @kind virtual;
  #L453000.  v3:= temp;
  #L453002.  v4:= v7.`io.reactivex.internal.queue.SpscArrayQueue.c` @type ^`long` @kind wide;
  #L453006.  v6:= lcmp(v1, v4);
  #L45300a.  if v6 < 0 then goto L453040;
  #L45300e.  v4:= v7.`io.reactivex.internal.queue.SpscArrayQueue.e` @type ^`int`;
  #L453012.  v4:= (`long`) v4 @kind i2l;
  #L453014.  v4:= v4 + v1 @kind long;
  #L453016.  call temp:= `e`(v7, v4, v0) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.e:(JI)I` @kind virtual;
  #L45301c.  v0:= temp;
  #L45301e.  call temp:= `f`(v7, v0) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.f:(I)Ljava/lang/Object;` @kind virtual;
  #L453024.  v0:= temp @kind object;
  #L453026.  if v0 != 0 then goto L453030;
  #L45302a.  v7.`io.reactivex.internal.queue.SpscArrayQueue.c` @type ^`long` := v4 @kind wide;
  #L45302e.  goto L453040;
  #L453030.  call temp:= `f`(v7, v3) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.f:(I)Ljava/lang/Object;` @kind virtual;
  #L453036.  v0:= temp @kind object;
  #L453038.  if v0 == 0 then goto L453040;
  #L45303c.  v8:= 0I;
  #L45303e.  return v8;
  #L453040.  call `h`(v7, v3, v8) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.h:(ILjava/lang/Object;)V` @kind virtual;
  #L453046.  v3:= 1L;
  #L45304a.  v1:= v1 + v3 @kind long;
  #L45304c.  call `i`(v7, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.i:(J)V` @kind virtual;
  #L453052.  v8:= 1I;
  #L453054.  return v8;
}
procedure `boolean` `offer`(`io.reactivex.internal.queue.SpscArrayQueue` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L453068.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L45306e.  v1:= temp;
  #L453070.  if v1 == 0 then goto L453084;
  #L453074.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L45307a.  v1:= temp;
  #L45307c.  if v1 == 0 then goto L453084;
  #L453080.  v1:= 1I;
  #L453082.  goto L453086;
  #L453084.  v1:= 0I;
  #L453086.  return v1;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.queue.SpscArrayQueue` v7 @kind this) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4530e8.  v0:= v7.`io.reactivex.internal.queue.SpscArrayQueue.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4530ec.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4530f2.  v0:= temp @kind wide;
  #L4530f4.  call temp:= `a`(v7, v0) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.a:(J)I` @kind virtual;
  #L4530fa.  v2:= temp;
  #L4530fc.  call temp:= `f`(v7, v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.f:(I)Ljava/lang/Object;` @kind virtual;
  #L453102.  v3:= temp @kind object;
  #L453104.  v4:= 0I;
  #L453106.  if v3 != 0 then goto L45310c;
  #L45310a.  return v4 @kind object;
  #L45310c.  v5:= 1L;
  #L453110.  v0:= v0 + v5 @kind long;
  #L453112.  call `g`(v7, v0) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.g:(J)V` @kind virtual;
  #L453118.  call `h`(v7, v2, v4) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.h:(ILjava/lang/Object;)V` @kind virtual;
  #L45311e.  return v3 @kind object;
}
