record `io.reactivex.observables.ConnectableObservable` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.Observable` @kind class {
}
procedure `void` `<init>`(`io.reactivex.observables.ConnectableObservable` v0 @kind this) @signature `Lio/reactivex/observables/ConnectableObservable;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L45b5e0.  call `<init>`(v0) @signature `Lio/reactivex/Observable;.<init>:()V` @kind direct;
  #L45b5e6.  return @kind void;
}
procedure `io.reactivex.Observable` `autoConnect`(`io.reactivex.observables.ConnectableObservable` v1 @kind this) @signature `Lio/reactivex/observables/ConnectableObservable;.autoConnect:()Lio/reactivex/Observable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45b51c.  v0:= 1I;
  #L45b51e.  call temp:= `autoConnect`(v1, v0) @signature `Lio/reactivex/observables/ConnectableObservable;.autoConnect:(I)Lio/reactivex/Observable;` @kind virtual;
  #L45b524.  v0:= temp @kind object;
  #L45b526.  return v0 @kind object;
}
procedure `io.reactivex.Observable` `autoConnect`(`io.reactivex.observables.ConnectableObservable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/observables/ConnectableObservable;.autoConnect:(I)Lio/reactivex/Observable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45b538.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L45b53e.  v0:= temp @kind object;
  #L45b540.  call temp:= `autoConnect`(v1, v2, v0) @signature `Lio/reactivex/observables/ConnectableObservable;.autoConnect:(ILio/reactivex/functions/Consumer;)Lio/reactivex/Observable;` @kind virtual;
  #L45b546.  v2:= temp @kind object;
  #L45b548.  return v2 @kind object;
}
procedure `io.reactivex.Observable` `autoConnect`(`io.reactivex.observables.ConnectableObservable` v1 @kind this, `int` v2 , `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/observables/ConnectableObservable;.autoConnect:(ILio/reactivex/functions/Consumer;)Lio/reactivex/Observable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45b55c.  if v2 > 0 then goto L45b570;
  #L45b560.  call `connect`(v1, v3) @signature `Lio/reactivex/observables/ConnectableObservable;.connect:(Lio/reactivex/functions/Consumer;)V` @kind virtual;
  #L45b566.  call temp:= `onAssembly`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/observables/ConnectableObservable;)Lio/reactivex/observables/ConnectableObservable;` @kind static;
  #L45b56c.  v2:= temp @kind object;
  #L45b56e.  return v2 @kind object;
  #L45b570.  v0:= new `io.reactivex.internal.operators.observable.ObservableAutoConnect`;
  #L45b574.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableAutoConnect;.<init>:(Lio/reactivex/observables/ConnectableObservable;ILio/reactivex/functions/Consumer;)V` @kind direct;
  #L45b57a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Observable;)Lio/reactivex/Observable;` @kind static;
  #L45b580.  v2:= temp @kind object;
  #L45b582.  return v2 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `connect`(`io.reactivex.observables.ConnectableObservable` v1 @kind this) @signature `Lio/reactivex/observables/ConnectableObservable;.connect:()Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45b5b8.  v0:= new `io.reactivex.internal.util.ConnectConsumer`;
  #L45b5bc.  call `<init>`(v0) @signature `Lio/reactivex/internal/util/ConnectConsumer;.<init>:()V` @kind direct;
  #L45b5c2.  call `connect`(v1, v0) @signature `Lio/reactivex/observables/ConnectableObservable;.connect:(Lio/reactivex/functions/Consumer;)V` @kind virtual;
  #L45b5c8.  v0:= v0.`io.reactivex.internal.util.ConnectConsumer.disposable` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45b5cc.  return v0 @kind object;
}
procedure `void` `connect`(`io.reactivex.functions.Consumer` v0 @kind object) @signature `Lio/reactivex/observables/ConnectableObservable;.connect:(Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `io.reactivex.Observable` `refCount`(`io.reactivex.observables.ConnectableObservable` v1 @kind this) @signature `Lio/reactivex/observables/ConnectableObservable;.refCount:()Lio/reactivex/Observable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45b594.  v0:= new `io.reactivex.internal.operators.observable.ObservableRefCount`;
  #L45b598.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.<init>:(Lio/reactivex/observables/ConnectableObservable;)V` @kind direct;
  #L45b59e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Observable;)Lio/reactivex/Observable;` @kind static;
  #L45b5a4.  v0:= temp @kind object;
  #L45b5a6.  return v0 @kind object;
}
