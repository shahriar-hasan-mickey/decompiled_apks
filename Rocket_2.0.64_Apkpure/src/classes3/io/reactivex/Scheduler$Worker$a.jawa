record `io.reactivex.Scheduler$Worker$a` @kind class @AccessFlag FINAL extends `java.lang.Runnable` @kind interface {
  `java.lang.Runnable` `io.reactivex.Scheduler$Worker$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.Scheduler$Worker$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.Scheduler$Worker$a.c` @AccessFlag FINAL;
  `long` `io.reactivex.Scheduler$Worker$a.d` @AccessFlag ;
  `long` `io.reactivex.Scheduler$Worker$a.e` @AccessFlag ;
  `long` `io.reactivex.Scheduler$Worker$a.f` @AccessFlag ;
  `io.reactivex.Scheduler$Worker` `io.reactivex.Scheduler$Worker$a.g` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.Scheduler$Worker$a` v0 @kind this, `io.reactivex.Scheduler$Worker` v1 @kind object, `long` v2 , `java.lang.Runnable` v4 @kind object, `long` v5 , `io.reactivex.internal.disposables.SequentialDisposable` v7 @kind object, `long` v8 ) @signature `Lio/reactivex/Scheduler$Worker$a;.<init>:(Lio/reactivex/Scheduler$Worker;JLjava/lang/Runnable;JLio/reactivex/internal/disposables/SequentialDisposable;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3fea08.  v0.`io.reactivex.Scheduler$Worker$a.g` @type ^`io.reactivex.Scheduler$Worker` := v1 @kind object;
  #L3fea0c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3fea12.  v0.`io.reactivex.Scheduler$Worker$a.a` @type ^`java.lang.Runnable` := v4 @kind object;
  #L3fea16.  v0.`io.reactivex.Scheduler$Worker$a.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v7 @kind object;
  #L3fea1a.  v0.`io.reactivex.Scheduler$Worker$a.c` @type ^`long` := v8 @kind wide;
  #L3fea1e.  v0.`io.reactivex.Scheduler$Worker$a.e` @type ^`long` := v5 @kind wide;
  #L3fea22.  v0.`io.reactivex.Scheduler$Worker$a.f` @type ^`long` := v2 @kind wide;
  #L3fea26.  return @kind void;
}
procedure `void` `run`(`io.reactivex.Scheduler$Worker$a` v12 @kind this) @signature `Lio/reactivex/Scheduler$Worker$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L3fea38.  v0:= v12.`io.reactivex.Scheduler$Worker$a.a` @type ^`java.lang.Runnable` @kind object;
  #L3fea3c.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L3fea42.  v0:= v12.`io.reactivex.Scheduler$Worker$a.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L3fea46.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.isDisposed:()Z` @kind virtual;
  #L3fea4c.  v0:= temp;
  #L3fea4e.  if v0 != 0 then goto L3feade;
  #L3fea52.  v0:= v12.`io.reactivex.Scheduler$Worker$a.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3fea56.  v1:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3fea5a.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler$Worker;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L3fea60.  v2:= temp @kind wide;
  #L3fea62.  v4:= `@@io.reactivex.Scheduler.a` @type ^`long` @kind wide;
  #L3fea66.  v6:= v2 + v4 @kind long;
  #L3fea6a.  v8:= v12.`io.reactivex.Scheduler$Worker$a.e` @type ^`long` @kind wide;
  #L3fea6e.  v10:= 1L;
  #L3fea72.  v0:= lcmp(v6, v8);
  #L3fea76.  if v0 < 0 then goto L3feaa2;
  #L3fea7a.  v6:= v12.`io.reactivex.Scheduler$Worker$a.c` @type ^`long` @kind wide;
  #L3fea7e.  v8:= v8 + v6 @kind long;
  #L3fea80.  v8:= v8 + v4 @kind long;
  #L3fea82.  v0:= lcmp(v2, v8);
  #L3fea86.  if v0 < 0 then goto L3fea8c;
  #L3fea8a.  goto L3feaa2;
  #L3fea8c.  v4:= v12.`io.reactivex.Scheduler$Worker$a.f` @type ^`long` @kind wide;
  #L3fea90.  v8:= v12.`io.reactivex.Scheduler$Worker$a.d` @type ^`long` @kind wide;
  #L3fea94.  v8:= v8 + v10 @kind long;
  #L3fea96.  v12.`io.reactivex.Scheduler$Worker$a.d` @type ^`long` := v8 @kind wide;
  #L3fea9a.  v8:= v8 * v6 @kind long;
  #L3fea9e.  v4:= v4 + v8 @kind long;
  #L3feaa0.  goto L3feac2;
  #L3feaa2.  v4:= v12.`io.reactivex.Scheduler$Worker$a.c` @type ^`long` @kind wide;
  #L3feaa6.  v6:= v2 + v4 @kind long;
  #L3feaaa.  v8:= v12.`io.reactivex.Scheduler$Worker$a.d` @type ^`long` @kind wide;
  #L3feaae.  v8:= v8 + v10 @kind long;
  #L3feab0.  v12.`io.reactivex.Scheduler$Worker$a.d` @type ^`long` := v8 @kind wide;
  #L3feab4.  v4:= v4 * v8 @kind long;
  #L3feab8.  v4:= v6 - v4 @kind long;
  #L3feabc.  v12.`io.reactivex.Scheduler$Worker$a.f` @type ^`long` := v4 @kind wide;
  #L3feac0.  v4:= v6 @kind wide;
  #L3feac2.  v12.`io.reactivex.Scheduler$Worker$a.e` @type ^`long` := v2 @kind wide;
  #L3feac6.  v4:= v4 - v2 @kind long;
  #L3feac8.  v0:= v12.`io.reactivex.Scheduler$Worker$a.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L3feacc.  v2:= v12.`io.reactivex.Scheduler$Worker$a.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3fead0.  call temp:= `schedule`(v2, v12, v4, v1) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3fead6.  v1:= temp @kind object;
  #L3fead8.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L3feade.  return @kind void;
}
