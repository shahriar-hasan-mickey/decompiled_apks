record `io.reactivex.parallel.ParallelFlowable` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`io.reactivex.parallel.ParallelFlowable` v0 @kind this) @signature `Lio/reactivex/parallel/ParallelFlowable;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L45ea98.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45ea9e.  return @kind void;
}
procedure `io.reactivex.parallel.ParallelFlowable` `from`(`org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.from:(Lorg/reactivestreams/Publisher;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L45e844.  call temp:= `getRuntime`() @signature `Ljava/lang/Runtime;.getRuntime:()Ljava/lang/Runtime;` @kind static;
  #L45e84a.  v0:= temp @kind object;
  #L45e84c.  call temp:= `availableProcessors`(v0) @signature `Ljava/lang/Runtime;.availableProcessors:()I` @kind virtual;
  #L45e852.  v0:= temp;
  #L45e854.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L45e85a.  v1:= temp;
  #L45e85c.  call temp:= `from`(v2, v0, v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.from:(Lorg/reactivestreams/Publisher;II)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L45e862.  v2:= temp @kind object;
  #L45e864.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `from`(`org.reactivestreams.Publisher` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.from:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L45e878.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L45e87e.  v0:= temp;
  #L45e880.  call temp:= `from`(v1, v2, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.from:(Lorg/reactivestreams/Publisher;II)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L45e886.  v1:= temp @kind object;
  #L45e888.  return v1 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `from`(`org.reactivestreams.Publisher` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.from:(Lorg/reactivestreams/Publisher;II)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L45e89c.  v0:= "source" @kind object;
  #L45e8a0.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e8a6.  v0:= "parallelism" @kind object;
  #L45e8aa.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L45e8b0.  v0:= "prefetch" @kind object;
  #L45e8b4.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L45e8ba.  v0:= new `io.reactivex.internal.operators.parallel.ParallelFromPublisher`;
  #L45e8be.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher;.<init>:(Lorg/reactivestreams/Publisher;II)V` @kind direct;
  #L45e8c4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L45e8ca.  v1:= temp @kind object;
  #L45e8cc.  return v1 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `fromArray`(`org.reactivestreams.Publisher`[] v1 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.fromArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L45e8e0.  v0:= length @variable v1;
  #L45e8e2.  if v0 == 0 then goto L45e8fa;
  #L45e8e6.  v0:= new `io.reactivex.internal.operators.parallel.ParallelFromArray`;
  #L45e8ea.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromArray;.<init>:([Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L45e8f0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L45e8f6.  v1:= temp @kind object;
  #L45e8f8.  return v1 @kind object;
  #L45e8fa.  v1:= new `java.lang.IllegalArgumentException`;
  #L45e8fe.  v0:= "Zero publishers not supported" @kind object;
  #L45e902.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45e908.  throw v1;
}
procedure `io.reactivex.parallel.ParallelFlowable` `collect`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object, `io.reactivex.functions.BiConsumer` v3 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.collect:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45e268.  v0:= "collectionSupplier is null" @kind object;
  #L45e26c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e272.  v0:= "collector is null" @kind object;
  #L45e276.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e27c.  v0:= new `io.reactivex.internal.operators.parallel.ParallelCollect`;
  #L45e280.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelCollect;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)V` @kind direct;
  #L45e286.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L45e28c.  v2:= temp @kind object;
  #L45e28e.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `compose`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.parallel.ParallelTransformer` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.compose:(Lio/reactivex/parallel/ParallelTransformer;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45e2a0.  v0:= "composer is null" @kind object;
  #L45e2a4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e2aa.  v2:= temp @kind object;
  #L45e2ac.  v2:= (`io.reactivex.parallel.ParallelTransformer`) v2 @kind object;
  #L45e2b0.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/parallel/ParallelTransformer;.apply:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind interface;
  #L45e2b6.  v2:= temp @kind object;
  #L45e2b8.  call temp:= `onAssembly`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L45e2be.  v2:= temp @kind object;
  #L45e2c0.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `concatMap`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.concatMap:(Lio/reactivex/functions/Function;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45e2d4.  v0:= 2I;
  #L45e2d6.  call temp:= `concatMap`(v1, v2, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.concatMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L45e2dc.  v2:= temp @kind object;
  #L45e2de.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `concatMap`(`io.reactivex.parallel.ParallelFlowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.concatMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L45e2f0.  v0:= "mapper is null" @kind object;
  #L45e2f4.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e2fa.  v0:= "prefetch" @kind object;
  #L45e2fe.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L45e304.  v0:= new `io.reactivex.internal.operators.parallel.ParallelConcatMap`;
  #L45e308.  v1:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45e30c.  call `<init>`(v0, v2, v3, v4, v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelConcatMap;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L45e312.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L45e318.  v3:= temp @kind object;
  #L45e31a.  return v3 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `concatMapDelayError`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.concatMapDelayError:(Lio/reactivex/functions/Function;IZ)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45e348.  v0:= "mapper is null" @kind object;
  #L45e34c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e352.  v0:= "prefetch" @kind object;
  #L45e356.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L45e35c.  v0:= new `io.reactivex.internal.operators.parallel.ParallelConcatMap`;
  #L45e360.  if v4 == 0 then goto L45e36a;
  #L45e364.  v4:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45e368.  goto L45e36e;
  #L45e36a.  v4:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45e36e.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelConcatMap;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L45e374.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L45e37a.  v2:= temp @kind object;
  #L45e37c.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `concatMapDelayError`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.concatMapDelayError:(Lio/reactivex/functions/Function;Z)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45e32c.  v0:= 2I;
  #L45e32e.  call temp:= `concatMapDelayError`(v1, v2, v0, v3) @signature `Lio/reactivex/parallel/ParallelFlowable;.concatMapDelayError:(Lio/reactivex/functions/Function;IZ)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L45e334.  v2:= temp @kind object;
  #L45e336.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doAfterNext`(`io.reactivex.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.functions.Consumer` v12 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doAfterNext:(Lio/reactivex/functions/Consumer;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L45e390.  v0:= "onAfterNext is null" @kind object;
  #L45e394.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e39a.  v0:= new `io.reactivex.internal.operators.parallel.ParallelPeek`;
  #L45e39e.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L45e3a4.  v3:= temp @kind object;
  #L45e3a6.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L45e3ac.  v5:= temp @kind object;
  #L45e3ae.  v10:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L45e3b2.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L45e3b8.  v8:= temp @kind object;
  #L45e3ba.  v9:= `@@io.reactivex.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L45e3be.  v1:= v0 @kind object;
  #L45e3c0.  v2:= v11 @kind object;
  #L45e3c2.  v4:= v12 @kind object;
  #L45e3c4.  v6:= v10 @kind object;
  #L45e3c6.  v7:= v10 @kind object;
  #L45e3c8.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L45e3ce.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L45e3d4.  v12:= temp @kind object;
  #L45e3d6.  return v12 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doAfterTerminated`(`io.reactivex.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.functions.Action` v12 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doAfterTerminated:(Lio/reactivex/functions/Action;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L45e3e8.  v0:= "onAfterTerminate is null" @kind object;
  #L45e3ec.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e3f2.  v0:= new `io.reactivex.internal.operators.parallel.ParallelPeek`;
  #L45e3f6.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L45e3fc.  v3:= temp @kind object;
  #L45e3fe.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L45e404.  v4:= temp @kind object;
  #L45e406.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L45e40c.  v5:= temp @kind object;
  #L45e40e.  v10:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L45e412.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L45e418.  v8:= temp @kind object;
  #L45e41a.  v9:= `@@io.reactivex.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L45e41e.  v1:= v0 @kind object;
  #L45e420.  v2:= v11 @kind object;
  #L45e422.  v6:= v10 @kind object;
  #L45e424.  v7:= v12 @kind object;
  #L45e426.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L45e42c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L45e432.  v12:= temp @kind object;
  #L45e434.  return v12 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doOnCancel`(`io.reactivex.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.functions.Action` v12 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doOnCancel:(Lio/reactivex/functions/Action;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L45e448.  v0:= "onCancel is null" @kind object;
  #L45e44c.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e452.  v0:= new `io.reactivex.internal.operators.parallel.ParallelPeek`;
  #L45e456.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L45e45c.  v3:= temp @kind object;
  #L45e45e.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L45e464.  v4:= temp @kind object;
  #L45e466.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L45e46c.  v5:= temp @kind object;
  #L45e46e.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L45e472.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L45e478.  v8:= temp @kind object;
  #L45e47a.  v9:= `@@io.reactivex.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L45e47e.  v1:= v0 @kind object;
  #L45e480.  v2:= v11 @kind object;
  #L45e482.  v6:= v7 @kind object;
  #L45e484.  v10:= v12 @kind object;
  #L45e486.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L45e48c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L45e492.  v12:= temp @kind object;
  #L45e494.  return v12 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doOnComplete`(`io.reactivex.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.functions.Action` v12 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doOnComplete:(Lio/reactivex/functions/Action;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L45e4a8.  v0:= "onComplete is null" @kind object;
  #L45e4ac.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e4b2.  v0:= new `io.reactivex.internal.operators.parallel.ParallelPeek`;
  #L45e4b6.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L45e4bc.  v3:= temp @kind object;
  #L45e4be.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L45e4c4.  v4:= temp @kind object;
  #L45e4c6.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L45e4cc.  v5:= temp @kind object;
  #L45e4ce.  v10:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L45e4d2.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L45e4d8.  v8:= temp @kind object;
  #L45e4da.  v9:= `@@io.reactivex.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L45e4de.  v1:= v0 @kind object;
  #L45e4e0.  v2:= v11 @kind object;
  #L45e4e2.  v6:= v12 @kind object;
  #L45e4e4.  v7:= v10 @kind object;
  #L45e4e6.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L45e4ec.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L45e4f2.  v12:= temp @kind object;
  #L45e4f4.  return v12 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doOnError`(`io.reactivex.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.functions.Consumer` v12 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doOnError:(Lio/reactivex/functions/Consumer;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L45e508.  v0:= "onError is null" @kind object;
  #L45e50c.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e512.  v0:= new `io.reactivex.internal.operators.parallel.ParallelPeek`;
  #L45e516.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L45e51c.  v3:= temp @kind object;
  #L45e51e.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L45e524.  v4:= temp @kind object;
  #L45e526.  v10:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L45e52a.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L45e530.  v8:= temp @kind object;
  #L45e532.  v9:= `@@io.reactivex.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L45e536.  v1:= v0 @kind object;
  #L45e538.  v2:= v11 @kind object;
  #L45e53a.  v5:= v12 @kind object;
  #L45e53c.  v6:= v10 @kind object;
  #L45e53e.  v7:= v10 @kind object;
  #L45e540.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L45e546.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L45e54c.  v12:= temp @kind object;
  #L45e54e.  return v12 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doOnNext`(`io.reactivex.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.functions.Consumer` v12 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doOnNext:(Lio/reactivex/functions/Consumer;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L45e560.  v0:= "onNext is null" @kind object;
  #L45e564.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e56a.  v0:= new `io.reactivex.internal.operators.parallel.ParallelPeek`;
  #L45e56e.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L45e574.  v4:= temp @kind object;
  #L45e576.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L45e57c.  v5:= temp @kind object;
  #L45e57e.  v10:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L45e582.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L45e588.  v8:= temp @kind object;
  #L45e58a.  v9:= `@@io.reactivex.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L45e58e.  v1:= v0 @kind object;
  #L45e590.  v2:= v11 @kind object;
  #L45e592.  v3:= v12 @kind object;
  #L45e594.  v6:= v10 @kind object;
  #L45e596.  v7:= v10 @kind object;
  #L45e598.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L45e59e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L45e5a4.  v12:= temp @kind object;
  #L45e5a6.  return v12 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doOnNext`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doOnNext:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/BiFunction;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45e5b8.  v0:= "onNext is null" @kind object;
  #L45e5bc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e5c2.  v0:= "errorHandler is null" @kind object;
  #L45e5c6.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e5cc.  v0:= new `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry`;
  #L45e5d0.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L45e5d6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L45e5dc.  v2:= temp @kind object;
  #L45e5de.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doOnNext`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.parallel.ParallelFailureHandling` v3 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doOnNext:(Lio/reactivex/functions/Consumer;Lio/reactivex/parallel/ParallelFailureHandling;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45e5f0.  v0:= "onNext is null" @kind object;
  #L45e5f4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e5fa.  v0:= "errorHandler is null" @kind object;
  #L45e5fe.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e604.  v0:= new `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry`;
  #L45e608.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L45e60e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L45e614.  v2:= temp @kind object;
  #L45e616.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doOnRequest`(`io.reactivex.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.functions.LongConsumer` v12 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doOnRequest:(Lio/reactivex/functions/LongConsumer;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L45e628.  v0:= "onRequest is null" @kind object;
  #L45e62c.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e632.  v0:= new `io.reactivex.internal.operators.parallel.ParallelPeek`;
  #L45e636.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L45e63c.  v3:= temp @kind object;
  #L45e63e.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L45e644.  v4:= temp @kind object;
  #L45e646.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L45e64c.  v5:= temp @kind object;
  #L45e64e.  v10:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L45e652.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L45e658.  v8:= temp @kind object;
  #L45e65a.  v1:= v0 @kind object;
  #L45e65c.  v2:= v11 @kind object;
  #L45e65e.  v6:= v10 @kind object;
  #L45e660.  v7:= v10 @kind object;
  #L45e662.  v9:= v12 @kind object;
  #L45e664.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L45e66a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L45e670.  v12:= temp @kind object;
  #L45e672.  return v12 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doOnSubscribe`(`io.reactivex.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.functions.Consumer` v12 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doOnSubscribe:(Lio/reactivex/functions/Consumer;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L45e684.  v0:= "onSubscribe is null" @kind object;
  #L45e688.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e68e.  v0:= new `io.reactivex.internal.operators.parallel.ParallelPeek`;
  #L45e692.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L45e698.  v3:= temp @kind object;
  #L45e69a.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L45e6a0.  v4:= temp @kind object;
  #L45e6a2.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L45e6a8.  v5:= temp @kind object;
  #L45e6aa.  v10:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L45e6ae.  v9:= `@@io.reactivex.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L45e6b2.  v1:= v0 @kind object;
  #L45e6b4.  v2:= v11 @kind object;
  #L45e6b6.  v6:= v10 @kind object;
  #L45e6b8.  v7:= v10 @kind object;
  #L45e6ba.  v8:= v12 @kind object;
  #L45e6bc.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L45e6c2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L45e6c8.  v12:= temp @kind object;
  #L45e6ca.  return v12 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `filter`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.filter:(Lio/reactivex/functions/Predicate;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45e6dc.  v0:= "predicate" @kind object;
  #L45e6e0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e6e6.  v0:= new `io.reactivex.internal.operators.parallel.ParallelFilter`;
  #L45e6ea.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L45e6f0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L45e6f6.  v2:= temp @kind object;
  #L45e6f8.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `filter`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.filter:(Lio/reactivex/functions/Predicate;Lio/reactivex/functions/BiFunction;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45e70c.  v0:= "predicate" @kind object;
  #L45e710.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e716.  v0:= "errorHandler is null" @kind object;
  #L45e71a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e720.  v0:= new `io.reactivex.internal.operators.parallel.ParallelFilterTry`;
  #L45e724.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Predicate;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L45e72a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L45e730.  v2:= temp @kind object;
  #L45e732.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `filter`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object, `io.reactivex.parallel.ParallelFailureHandling` v3 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.filter:(Lio/reactivex/functions/Predicate;Lio/reactivex/parallel/ParallelFailureHandling;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45e744.  v0:= "predicate" @kind object;
  #L45e748.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e74e.  v0:= "errorHandler is null" @kind object;
  #L45e752.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e758.  v0:= new `io.reactivex.internal.operators.parallel.ParallelFilterTry`;
  #L45e75c.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Predicate;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L45e762.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L45e768.  v2:= temp @kind object;
  #L45e76a.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `flatMap`(`io.reactivex.parallel.ParallelFlowable` v3 @kind this, `io.reactivex.functions.Function` v4 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.flatMap:(Lio/reactivex/functions/Function;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L45e77c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L45e782.  v0:= temp;
  #L45e784.  v1:= 0I;
  #L45e786.  v2:= 2147483647I;
  #L45e78c.  call temp:= `flatMap`(v3, v4, v1, v2, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L45e792.  v4:= temp @kind object;
  #L45e794.  return v4 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `flatMap`(`io.reactivex.parallel.ParallelFlowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.flatMap:(Lio/reactivex/functions/Function;Z)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L45e7a8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L45e7ae.  v0:= temp;
  #L45e7b0.  v1:= 2147483647I;
  #L45e7b6.  call temp:= `flatMap`(v2, v3, v4, v1, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L45e7bc.  v3:= temp @kind object;
  #L45e7be.  return v3 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `flatMap`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45e7d0.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L45e7d6.  v0:= temp;
  #L45e7d8.  call temp:= `flatMap`(v1, v2, v3, v4, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L45e7de.  v2:= temp @kind object;
  #L45e7e0.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `flatMap`(`io.reactivex.parallel.ParallelFlowable` v7 @kind this, `io.reactivex.functions.Function` v8 @kind object, `boolean` v9 , `int` v10 , `int` v11 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L45e7f4.  v0:= "mapper is null" @kind object;
  #L45e7f8.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e7fe.  v0:= "maxConcurrency" @kind object;
  #L45e802.  call temp:= `verifyPositive`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L45e808.  v0:= "prefetch" @kind object;
  #L45e80c.  call temp:= `verifyPositive`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L45e812.  v0:= new `io.reactivex.internal.operators.parallel.ParallelFlatMap`;
  #L45e816.  v1:= v0 @kind object;
  #L45e818.  v2:= v7 @kind object;
  #L45e81a.  v3:= v8 @kind object;
  #L45e81c.  v4:= v9;
  #L45e81e.  v5:= v10;
  #L45e820.  v6:= v11;
  #L45e822.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelFlatMap;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Function;ZII)V` @kind direct;
  #L45e828.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L45e82e.  v8:= temp @kind object;
  #L45e830.  return v8 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `map`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45e91c.  v0:= "mapper" @kind object;
  #L45e920.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e926.  v0:= new `io.reactivex.internal.operators.parallel.ParallelMap`;
  #L45e92a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L45e930.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L45e936.  v2:= temp @kind object;
  #L45e938.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `map`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.map:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45e94c.  v0:= "mapper" @kind object;
  #L45e950.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e956.  v0:= "errorHandler is null" @kind object;
  #L45e95a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e960.  v0:= new `io.reactivex.internal.operators.parallel.ParallelMapTry`;
  #L45e964.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L45e96a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L45e970.  v2:= temp @kind object;
  #L45e972.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `map`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.parallel.ParallelFailureHandling` v3 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.map:(Lio/reactivex/functions/Function;Lio/reactivex/parallel/ParallelFailureHandling;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45e984.  v0:= "mapper" @kind object;
  #L45e988.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e98e.  v0:= "errorHandler is null" @kind object;
  #L45e992.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e998.  v0:= new `io.reactivex.internal.operators.parallel.ParallelMapTry`;
  #L45e99c.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L45e9a2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L45e9a8.  v2:= temp @kind object;
  #L45e9aa.  return v2 @kind object;
}
procedure `int` `parallelism`() @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `io.reactivex.Flowable` `reduce`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.reduce:(Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45e068.  v0:= "reducer" @kind object;
  #L45e06c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e072.  v0:= new `io.reactivex.internal.operators.parallel.ParallelReduceFull`;
  #L45e076.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L45e07c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L45e082.  v2:= temp @kind object;
  #L45e084.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `reduce`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.reduce:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45e9bc.  v0:= "initialSupplier" @kind object;
  #L45e9c0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e9c6.  v0:= "reducer" @kind object;
  #L45e9ca.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e9d0.  v0:= new `io.reactivex.internal.operators.parallel.ParallelReduce`;
  #L45e9d4.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduce;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L45e9da.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L45e9e0.  v2:= temp @kind object;
  #L45e9e2.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `runOn`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.runOn:(Lio/reactivex/Scheduler;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45e9f4.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L45e9fa.  v0:= temp;
  #L45e9fc.  call temp:= `runOn`(v1, v2, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.runOn:(Lio/reactivex/Scheduler;I)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L45ea02.  v2:= temp @kind object;
  #L45ea04.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `runOn`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.runOn:(Lio/reactivex/Scheduler;I)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45ea18.  v0:= "scheduler" @kind object;
  #L45ea1c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45ea22.  v0:= "prefetch" @kind object;
  #L45ea26.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L45ea2c.  v0:= new `io.reactivex.internal.operators.parallel.ParallelRunOn`;
  #L45ea30.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/Scheduler;I)V` @kind direct;
  #L45ea36.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L45ea3c.  v2:= temp @kind object;
  #L45ea3e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `sequential`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this) @signature `Lio/reactivex/parallel/ParallelFlowable;.sequential:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45e098.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L45e09e.  v0:= temp;
  #L45e0a0.  call temp:= `sequential`(v1, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.sequential:(I)Lio/reactivex/Flowable;` @kind virtual;
  #L45e0a6.  v0:= temp @kind object;
  #L45e0a8.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `sequential`(`io.reactivex.parallel.ParallelFlowable` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.sequential:(I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L45e0bc.  v0:= "prefetch" @kind object;
  #L45e0c0.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L45e0c6.  v0:= new `io.reactivex.internal.operators.parallel.ParallelJoin`;
  #L45e0ca.  v1:= 0I;
  #L45e0cc.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin;.<init>:(Lio/reactivex/parallel/ParallelFlowable;IZ)V` @kind direct;
  #L45e0d2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L45e0d8.  v3:= temp @kind object;
  #L45e0da.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `sequentialDelayError`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this) @signature `Lio/reactivex/parallel/ParallelFlowable;.sequentialDelayError:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45e0ec.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L45e0f2.  v0:= temp;
  #L45e0f4.  call temp:= `sequentialDelayError`(v1, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.sequentialDelayError:(I)Lio/reactivex/Flowable;` @kind virtual;
  #L45e0fa.  v0:= temp @kind object;
  #L45e0fc.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `sequentialDelayError`(`io.reactivex.parallel.ParallelFlowable` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.sequentialDelayError:(I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L45e110.  v0:= "prefetch" @kind object;
  #L45e114.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L45e11a.  v0:= new `io.reactivex.internal.operators.parallel.ParallelJoin`;
  #L45e11e.  v1:= 1I;
  #L45e120.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin;.<init>:(Lio/reactivex/parallel/ParallelFlowable;IZ)V` @kind direct;
  #L45e126.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L45e12c.  v3:= temp @kind object;
  #L45e12e.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `sorted`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `java.util.Comparator` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.sorted:(Ljava/util/Comparator;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45e140.  v0:= 16I;
  #L45e144.  call temp:= `sorted`(v1, v2, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.sorted:(Ljava/util/Comparator;I)Lio/reactivex/Flowable;` @kind virtual;
  #L45e14a.  v2:= temp @kind object;
  #L45e14c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `sorted`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `java.util.Comparator` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.sorted:(Ljava/util/Comparator;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45e160.  v0:= "comparator is null" @kind object;
  #L45e164.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e16a.  v0:= "capacityHint" @kind object;
  #L45e16e.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L45e174.  call temp:= `parallelism`(v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L45e17a.  v0:= temp;
  #L45e17c.  v3:= v3 / v0 @kind int;
  #L45e17e.  v3:= v3 + 1;
  #L45e182.  call temp:= `createArrayList`(v3) @signature `Lio/reactivex/internal/functions/Functions;.createArrayList:(I)Ljava/util/concurrent/Callable;` @kind static;
  #L45e188.  v3:= temp @kind object;
  #L45e18a.  call temp:= `instance`() @signature `Lio/reactivex/internal/util/ListAddBiConsumer;.instance:()Lio/reactivex/functions/BiFunction;` @kind static;
  #L45e190.  v0:= temp @kind object;
  #L45e192.  call temp:= `reduce`(v1, v3, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.reduce:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L45e198.  v3:= temp @kind object;
  #L45e19a.  v0:= new `io.reactivex.internal.util.SorterFunction`;
  #L45e19e.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/util/SorterFunction;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L45e1a4.  call temp:= `map`(v3, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L45e1aa.  v3:= temp @kind object;
  #L45e1ac.  v0:= new `io.reactivex.internal.operators.parallel.ParallelSortedJoin`;
  #L45e1b0.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Ljava/util/Comparator;)V` @kind direct;
  #L45e1b6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L45e1bc.  v2:= temp @kind object;
  #L45e1be.  return v2 @kind object;
}
procedure `void` `subscribe`(`org.reactivestreams.Subscriber`[] v0 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `to`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.to:(Lio/reactivex/functions/Function;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45ea50.  v0:= "converter is null" @kind object;
  #L45ea54.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45ea5a.  v2:= temp @kind object;
  #L45ea5c.  v2:= (`io.reactivex.functions.Function`) v2 @kind object;
  #L45ea60.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L45ea66.  v2:= temp @kind object;
  #L45ea68.  return v2 @kind object;
  #L45ea6a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45ea6c.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45ea72.  call temp:= `wrapOrThrow`(v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L45ea78.  v2:= temp @kind object;
  #L45ea7a.  throw v2;
  catch `java.lang.Throwable` @[L45ea50..L45ea68] goto L45ea6a;
}
procedure `io.reactivex.Flowable` `toSortedList`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `java.util.Comparator` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.toSortedList:(Ljava/util/Comparator;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45e1d0.  v0:= 16I;
  #L45e1d4.  call temp:= `toSortedList`(v1, v2, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.toSortedList:(Ljava/util/Comparator;I)Lio/reactivex/Flowable;` @kind virtual;
  #L45e1da.  v2:= temp @kind object;
  #L45e1dc.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `toSortedList`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `java.util.Comparator` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.toSortedList:(Ljava/util/Comparator;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45e1f0.  v0:= "comparator is null" @kind object;
  #L45e1f4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e1fa.  v0:= "capacityHint" @kind object;
  #L45e1fe.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L45e204.  call temp:= `parallelism`(v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L45e20a.  v0:= temp;
  #L45e20c.  v3:= v3 / v0 @kind int;
  #L45e20e.  v3:= v3 + 1;
  #L45e212.  call temp:= `createArrayList`(v3) @signature `Lio/reactivex/internal/functions/Functions;.createArrayList:(I)Ljava/util/concurrent/Callable;` @kind static;
  #L45e218.  v3:= temp @kind object;
  #L45e21a.  call temp:= `instance`() @signature `Lio/reactivex/internal/util/ListAddBiConsumer;.instance:()Lio/reactivex/functions/BiFunction;` @kind static;
  #L45e220.  v0:= temp @kind object;
  #L45e222.  call temp:= `reduce`(v1, v3, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.reduce:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L45e228.  v3:= temp @kind object;
  #L45e22a.  v0:= new `io.reactivex.internal.util.SorterFunction`;
  #L45e22e.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/util/SorterFunction;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L45e234.  call temp:= `map`(v3, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L45e23a.  v3:= temp @kind object;
  #L45e23c.  v0:= new `io.reactivex.internal.util.MergerBiFunction`;
  #L45e240.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/util/MergerBiFunction;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L45e246.  call temp:= `reduce`(v3, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.reduce:(Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @kind virtual;
  #L45e24c.  v2:= temp @kind object;
  #L45e24e.  call temp:= `onAssembly`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L45e254.  v2:= temp @kind object;
  #L45e256.  return v2 @kind object;
}
procedure `boolean` `validate`(`io.reactivex.parallel.ParallelFlowable` v5 @kind this, `org.reactivestreams.Subscriber`[] v6 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.validate:([Lorg/reactivestreams/Subscriber;)Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45dfec.  call temp:= `parallelism`(v5) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L45dff2.  v0:= temp;
  #L45dff4.  v1:= length @variable v6;
  #L45dff6.  if v1 == v0 then goto L45e054;
  #L45dffa.  v1:= new `java.lang.IllegalArgumentException`;
  #L45dffe.  v2:= new `java.lang.StringBuilder`;
  #L45e002.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45e008.  v3:= "parallelism = " @kind object;
  #L45e00c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45e012.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L45e018.  v0:= ", subscribers = " @kind object;
  #L45e01c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45e022.  v0:= length @variable v6;
  #L45e024.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L45e02a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45e030.  v0:= temp @kind object;
  #L45e032.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45e038.  v0:= length @variable v6;
  #L45e03a.  v2:= 0I;
  #L45e03c.  v3:= 0I;
  #L45e03e.  if v3 >= v0 then goto L45e052;
  #L45e042.  v4:= v6[v3] @kind object;
  #L45e046.  call `error`(v1, v4) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L45e04c.  v3:= v3 + 1;
  #L45e050.  goto L45e03e;
  #L45e052.  return v2;
  #L45e054.  v6:= 1I;
  #L45e056.  return v6;
}
