record `io.reactivex.processors.BehaviorProcessor` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.processors.FlowableProcessor` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.processors.BehaviorProcessor.b` @AccessFlag FINAL;
  `java.util.concurrent.locks.ReadWriteLock` `io.reactivex.processors.BehaviorProcessor.c` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `io.reactivex.processors.BehaviorProcessor.d` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `io.reactivex.processors.BehaviorProcessor.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.processors.BehaviorProcessor.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.processors.BehaviorProcessor.g` @AccessFlag FINAL;
  `long` `io.reactivex.processors.BehaviorProcessor.h` @AccessFlag ;
}
global `java.lang.Object`[] `@@io.reactivex.processors.BehaviorProcessor.i` @AccessFlag STATIC_FINAL;
global `io.reactivex.processors.BehaviorProcessor$a`[] `@@io.reactivex.processors.BehaviorProcessor.j` @AccessFlag STATIC_FINAL;
global `io.reactivex.processors.BehaviorProcessor$a`[] `@@io.reactivex.processors.BehaviorProcessor.k` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/processors/BehaviorProcessor;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L460514.  v0:= 0I;
  #L460516.  v1:= new `java.lang.Object`[v0];
  #L46051a.  `@@io.reactivex.processors.BehaviorProcessor.i` @type ^`java.lang.Object`[] := v1 @kind object;
  #L46051e.  v1:= new `io.reactivex.processors.BehaviorProcessor$a`[v0];
  #L460522.  `@@io.reactivex.processors.BehaviorProcessor.j` @type ^`io.reactivex.processors.BehaviorProcessor$a`[] := v1 @kind object;
  #L460526.  v0:= new `io.reactivex.processors.BehaviorProcessor$a`[v0];
  #L46052a.  `@@io.reactivex.processors.BehaviorProcessor.k` @type ^`io.reactivex.processors.BehaviorProcessor$a`[] := v0 @kind object;
  #L46052e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.processors.BehaviorProcessor` v2 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L460540.  call `<init>`(v2) @signature `Lio/reactivex/processors/FlowableProcessor;.<init>:()V` @kind direct;
  #L460546.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L46054a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L460550.  v2.`io.reactivex.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L460554.  v0:= new `java.util.concurrent.locks.ReentrantReadWriteLock`;
  #L460558.  call `<init>`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.<init>:()V` @kind direct;
  #L46055e.  v2.`io.reactivex.processors.BehaviorProcessor.c` @type ^`java.util.concurrent.locks.ReadWriteLock` := v0 @kind object;
  #L460562.  call temp:= `readLock`(v0) @signature `Ljava/util/concurrent/locks/ReadWriteLock;.readLock:()Ljava/util/concurrent/locks/Lock;` @kind interface;
  #L460568.  v1:= temp @kind object;
  #L46056a.  v2.`io.reactivex.processors.BehaviorProcessor.d` @type ^`java.util.concurrent.locks.Lock` := v1 @kind object;
  #L46056e.  call temp:= `writeLock`(v0) @signature `Ljava/util/concurrent/locks/ReadWriteLock;.writeLock:()Ljava/util/concurrent/locks/Lock;` @kind interface;
  #L460574.  v0:= temp @kind object;
  #L460576.  v2.`io.reactivex.processors.BehaviorProcessor.e` @type ^`java.util.concurrent.locks.Lock` := v0 @kind object;
  #L46057a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L46057e.  v1:= `@@io.reactivex.processors.BehaviorProcessor.j` @type ^`io.reactivex.processors.BehaviorProcessor$a`[] @kind object;
  #L460582.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L460588.  v2.`io.reactivex.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L46058c.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L460590.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L460596.  v2.`io.reactivex.processors.BehaviorProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L46059a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.processors.BehaviorProcessor` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.<init>:(Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4605ac.  call `<init>`(v2) @signature `Lio/reactivex/processors/BehaviorProcessor;.<init>:()V` @kind direct;
  #L4605b2.  v0:= v2.`io.reactivex.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4605b6.  v1:= "defaultValue is null" @kind object;
  #L4605ba.  call temp:= `requireNonNull`(v3, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4605c0.  v3:= temp @kind object;
  #L4605c2.  call `lazySet`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4605c8.  return @kind void;
}
procedure `io.reactivex.processors.BehaviorProcessor` `create`() @signature `Lio/reactivex/processors/BehaviorProcessor;.create:()Lio/reactivex/processors/BehaviorProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L460358.  v0:= new `io.reactivex.processors.BehaviorProcessor`;
  #L46035c.  call `<init>`(v0) @signature `Lio/reactivex/processors/BehaviorProcessor;.<init>:()V` @kind direct;
  #L460362.  return v0 @kind object;
}
procedure `io.reactivex.processors.BehaviorProcessor` `createDefault`(`java.lang.Object` v1 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.createDefault:(Ljava/lang/Object;)Lio/reactivex/processors/BehaviorProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L460374.  v0:= "defaultValue is null" @kind object;
  #L460378.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L46037e.  v0:= new `io.reactivex.processors.BehaviorProcessor`;
  #L460382.  call `<init>`(v0, v1) @signature `Lio/reactivex/processors/BehaviorProcessor;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L460388.  return v0 @kind object;
}
procedure `boolean` `e`(`io.reactivex.processors.BehaviorProcessor` v4 @kind this, `io.reactivex.processors.BehaviorProcessor$a` v5 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.e:(Lio/reactivex/processors/BehaviorProcessor$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4601bc.  v0:= v4.`io.reactivex.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4601c0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4601c6.  v0:= temp @kind object;
  #L4601c8.  v0:= (`io.reactivex.processors.BehaviorProcessor$a`[]) v0 @kind object;
  #L4601cc.  v1:= `@@io.reactivex.processors.BehaviorProcessor.k` @type ^`io.reactivex.processors.BehaviorProcessor$a`[] @kind object;
  #L4601d0.  v2:= 0I;
  #L4601d2.  if v0 != v1 then goto L4601d8;
  #L4601d6.  return v2;
  #L4601d8.  v1:= length @variable v0;
  #L4601da.  v3:= v1 + 1;
  #L4601de.  v3:= new `io.reactivex.processors.BehaviorProcessor$a`[v3];
  #L4601e2.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4601e8.  v3[v1]:= v5 @kind object;
  #L4601ec.  v1:= v4.`io.reactivex.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4601f0.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4601f6.  v0:= temp;
  #L4601f8.  if v0 == 0 then goto L4601bc;
  #L4601fc.  v5:= 1I;
  #L4601fe.  return v5;
}
procedure `void` `f`(`io.reactivex.processors.BehaviorProcessor` v6 @kind this, `io.reactivex.processors.BehaviorProcessor$a` v7 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.f:(Lio/reactivex/processors/BehaviorProcessor$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L460754.  v0:= v6.`io.reactivex.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L460758.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46075e.  v0:= temp @kind object;
  #L460760.  v0:= (`io.reactivex.processors.BehaviorProcessor$a`[]) v0 @kind object;
  #L460764.  v1:= `@@io.reactivex.processors.BehaviorProcessor.k` @type ^`io.reactivex.processors.BehaviorProcessor$a`[] @kind object;
  #L460768.  if v0 == v1 then goto L4607d4;
  #L46076c.  v1:= `@@io.reactivex.processors.BehaviorProcessor.j` @type ^`io.reactivex.processors.BehaviorProcessor$a`[] @kind object;
  #L460770.  if v0 != v1 then goto L460776;
  #L460774.  goto L4607d4;
  #L460776.  v1:= length @variable v0;
  #L460778.  v2:= -1I;
  #L46077a.  v3:= 0I;
  #L46077c.  v4:= 0I;
  #L46077e.  if v4 >= v1 then goto L460794;
  #L460782.  v5:= v0[v4] @kind object;
  #L460786.  if v5 != v7 then goto L46078e;
  #L46078a.  v2:= v4;
  #L46078c.  goto L460794;
  #L46078e.  v4:= v4 + 1;
  #L460792.  goto L46077e;
  #L460794.  if v2 >= 0 then goto L46079a;
  #L460798.  return @kind void;
  #L46079a.  v4:= 1I;
  #L46079c.  if v1 != v4 then goto L4607a6;
  #L4607a0.  v1:= `@@io.reactivex.processors.BehaviorProcessor.j` @type ^`io.reactivex.processors.BehaviorProcessor$a`[] @kind object;
  #L4607a4.  goto L4607c4;
  #L4607a6.  v5:= v1 + -1;
  #L4607aa.  v5:= new `io.reactivex.processors.BehaviorProcessor$a`[v5];
  #L4607ae.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4607b4.  v3:= v2 + 1;
  #L4607b8.  v1:= v1 - v2 @kind int;
  #L4607ba.  v1:= v1 - v4 @kind int;
  #L4607bc.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4607c2.  v1:= v5 @kind object;
  #L4607c4.  v2:= v6.`io.reactivex.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4607c8.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4607ce.  v0:= temp;
  #L4607d0.  if v0 == 0 then goto L460754;
  #L4607d4.  return @kind void;
}
procedure `void` `g`(`io.reactivex.processors.BehaviorProcessor` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.g:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4607e8.  v0:= v5.`io.reactivex.processors.BehaviorProcessor.e` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4607ec.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L4607f2.  v1:= v5.`io.reactivex.processors.BehaviorProcessor.h` @type ^`long` @kind wide;
  #L4607f6.  v3:= 1L;
  #L4607fa.  v1:= v1 + v3 @kind long;
  #L4607fc.  v5.`io.reactivex.processors.BehaviorProcessor.h` @type ^`long` := v1 @kind wide;
  #L460800.  v1:= v5.`io.reactivex.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L460804.  call `lazySet`(v1, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L46080a.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L460810.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.processors.BehaviorProcessor` v2 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4604dc.  v0:= v2.`io.reactivex.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4604e0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4604e6.  v0:= temp @kind object;
  #L4604e8.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4604ee.  v1:= temp;
  #L4604f0.  if v1 == 0 then goto L4604fe;
  #L4604f4.  call temp:= `getError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L4604fa.  v0:= temp @kind object;
  #L4604fc.  return v0 @kind object;
  #L4604fe.  v0:= 0I;
  #L460500.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.processors.BehaviorProcessor` v2 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4603e0.  v0:= v2.`io.reactivex.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4603e4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4603ea.  v0:= temp @kind object;
  #L4603ec.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4603f2.  v1:= temp;
  #L4603f4.  if v1 != 0 then goto L460410;
  #L4603f8.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4603fe.  v1:= temp;
  #L460400.  if v1 == 0 then goto L460406;
  #L460404.  goto L460410;
  #L460406.  call temp:= `getValue`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L46040c.  v0:= temp @kind object;
  #L46040e.  return v0 @kind object;
  #L460410.  v0:= 0I;
  #L460412.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.processors.BehaviorProcessor` v2 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor;.getValues:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L460424.  v0:= `@@io.reactivex.processors.BehaviorProcessor.i` @type ^`java.lang.Object`[] @kind object;
  #L460428.  call temp:= `getValues`(v2, v0) @signature `Lio/reactivex/processors/BehaviorProcessor;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L46042e.  v1:= temp @kind object;
  #L460430.  if v1 != v0 then goto L46043c;
  #L460434.  v0:= 0I;
  #L460436.  v0:= new `java.lang.Object`[v0];
  #L46043a.  return v0 @kind object;
  #L46043c.  return v1 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.processors.BehaviorProcessor` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L460450.  v0:= v5.`io.reactivex.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L460454.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46045a.  v0:= temp @kind object;
  #L46045c.  v1:= 0I;
  #L46045e.  v2:= 0I;
  #L460460.  if v0 == 0 then goto L4604c0;
  #L460464.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L46046a.  v3:= temp;
  #L46046c.  if v3 != 0 then goto L4604c0;
  #L460470.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L460476.  v3:= temp;
  #L460478.  if v3 == 0 then goto L46047e;
  #L46047c.  goto L4604c0;
  #L46047e.  call temp:= `getValue`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L460484.  v0:= temp @kind object;
  #L460486.  v3:= length @variable v6;
  #L460488.  v4:= 1I;
  #L46048a.  if v3 == 0 then goto L46049e;
  #L46048e.  v6[v2]:= v0 @kind object;
  #L460492.  v0:= length @variable v6;
  #L460494.  if v0 == v4 then goto L4604be;
  #L460498.  v6[v4]:= v1 @kind object;
  #L46049c.  goto L4604be;
  #L46049e.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4604a4.  v6:= temp @kind object;
  #L4604a6.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L4604ac.  v6:= temp @kind object;
  #L4604ae.  call temp:= `newInstance`(v6, v4) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L4604b4.  v6:= temp @kind object;
  #L4604b6.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L4604ba.  v6[v2]:= v0 @kind object;
  #L4604be.  return v6 @kind object;
  #L4604c0.  v0:= length @variable v6;
  #L4604c2.  if v0 == 0 then goto L4604ca;
  #L4604c6.  v6[v2]:= v1 @kind object;
  #L4604ca.  return v6 @kind object;
}
procedure `io.reactivex.processors.BehaviorProcessor$a`[] `h`(`io.reactivex.processors.BehaviorProcessor` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.h:(Ljava/lang/Object;)[Lio/reactivex/processors/BehaviorProcessor$a;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L46039c.  v0:= v2.`io.reactivex.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4603a0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4603a6.  v0:= temp @kind object;
  #L4603a8.  v0:= (`io.reactivex.processors.BehaviorProcessor$a`[]) v0 @kind object;
  #L4603ac.  v1:= `@@io.reactivex.processors.BehaviorProcessor.k` @type ^`io.reactivex.processors.BehaviorProcessor$a`[] @kind object;
  #L4603b0.  if v0 == v1 then goto L4603ce;
  #L4603b4.  v0:= v2.`io.reactivex.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4603b8.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4603be.  v0:= temp @kind object;
  #L4603c0.  v0:= (`io.reactivex.processors.BehaviorProcessor$a`[]) v0 @kind object;
  #L4603c4.  if v0 == v1 then goto L4603ce;
  #L4603c8.  call `g`(v2, v3) @signature `Lio/reactivex/processors/BehaviorProcessor;.g:(Ljava/lang/Object;)V` @kind virtual;
  #L4603ce.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.processors.BehaviorProcessor` v1 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L460210.  v0:= v1.`io.reactivex.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L460214.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46021a.  v0:= temp @kind object;
  #L46021c.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L460222.  v0:= temp;
  #L460224.  return v0;
}
procedure `boolean` `hasSubscribers`(`io.reactivex.processors.BehaviorProcessor` v1 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor;.hasSubscribers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L460238.  v0:= v1.`io.reactivex.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46023c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L460242.  v0:= temp @kind object;
  #L460244.  v0:= (`io.reactivex.processors.BehaviorProcessor$a`[]) v0 @kind object;
  #L460248.  v0:= length @variable v0;
  #L46024a.  if v0 == 0 then goto L460252;
  #L46024e.  v0:= 1I;
  #L460250.  goto L460254;
  #L460252.  v0:= 0I;
  #L460254.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.processors.BehaviorProcessor` v1 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L460268.  v0:= v1.`io.reactivex.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46026c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L460272.  v0:= temp @kind object;
  #L460274.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L46027a.  v0:= temp;
  #L46027c.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.processors.BehaviorProcessor` v2 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L460290.  v0:= v2.`io.reactivex.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L460294.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46029a.  v0:= temp @kind object;
  #L46029c.  if v0 == 0 then goto L4602bc;
  #L4602a0.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4602a6.  v1:= temp;
  #L4602a8.  if v1 != 0 then goto L4602bc;
  #L4602ac.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4602b2.  v0:= temp;
  #L4602b4.  if v0 != 0 then goto L4602bc;
  #L4602b8.  v0:= 1I;
  #L4602ba.  goto L4602be;
  #L4602bc.  v0:= 0I;
  #L4602be.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.processors.BehaviorProcessor` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4602d0.  v0:= 1I;
  #L4602d2.  if v8 != 0 then goto L4602ec;
  #L4602d6.  v8:= new `java.lang.NullPointerException`;
  #L4602da.  v1:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L4602de.  call `<init>`(v8, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4602e4.  call `onError`(v7, v8) @signature `Lio/reactivex/processors/BehaviorProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4602ea.  return v0;
  #L4602ec.  v1:= v7.`io.reactivex.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4602f0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4602f6.  v1:= temp @kind object;
  #L4602f8.  v1:= (`io.reactivex.processors.BehaviorProcessor$a`[]) v1 @kind object;
  #L4602fc.  v2:= length @variable v1;
  #L4602fe.  v3:= 0I;
  #L460300.  v4:= 0I;
  #L460302.  if v4 >= v2 then goto L46031e;
  #L460306.  v5:= v1[v4] @kind object;
  #L46030a.  call temp:= `d`(v5) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.d:()Z` @kind virtual;
  #L460310.  v5:= temp;
  #L460312.  if v5 == 0 then goto L460318;
  #L460316.  return v3;
  #L460318.  v4:= v4 + 1;
  #L46031c.  goto L460302;
  #L46031e.  call temp:= `next`(v8) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L460324.  v8:= temp @kind object;
  #L460326.  call `g`(v7, v8) @signature `Lio/reactivex/processors/BehaviorProcessor;.g:(Ljava/lang/Object;)V` @kind virtual;
  #L46032c.  v2:= length @variable v1;
  #L46032e.  if v3 >= v2 then goto L460346;
  #L460332.  v4:= v1[v3] @kind object;
  #L460336.  v5:= v7.`io.reactivex.processors.BehaviorProcessor.h` @type ^`long` @kind wide;
  #L46033a.  call `c`(v4, v8, v5) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.c:(Ljava/lang/Object;J)V` @kind virtual;
  #L460340.  v3:= v3 + 1;
  #L460344.  goto L46032e;
  #L460346.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.processors.BehaviorProcessor` v7 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4605dc.  v0:= v7.`io.reactivex.processors.BehaviorProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4605e0.  v1:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L4605e4.  v2:= 0I;
  #L4605e6.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4605ec.  v0:= temp;
  #L4605ee.  if v0 != 0 then goto L4605f4;
  #L4605f2.  return @kind void;
  #L4605f4.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L4605fa.  v0:= temp @kind object;
  #L4605fc.  call temp:= `h`(v7, v0) @signature `Lio/reactivex/processors/BehaviorProcessor;.h:(Ljava/lang/Object;)[Lio/reactivex/processors/BehaviorProcessor$a;` @kind virtual;
  #L460602.  v1:= temp @kind object;
  #L460604.  v2:= length @variable v1;
  #L460606.  v3:= 0I;
  #L460608.  if v3 >= v2 then goto L460620;
  #L46060c.  v4:= v1[v3] @kind object;
  #L460610.  v5:= v7.`io.reactivex.processors.BehaviorProcessor.h` @type ^`long` @kind wide;
  #L460614.  call `c`(v4, v0, v5) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.c:(Ljava/lang/Object;J)V` @kind virtual;
  #L46061a.  v3:= v3 + 1;
  #L46061e.  goto L460608;
  #L460620.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.processors.BehaviorProcessor` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L460634.  if v7 != 0 then goto L460646;
  #L460638.  v7:= new `java.lang.NullPointerException`;
  #L46063c.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L460640.  call `<init>`(v7, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L460646.  v0:= v6.`io.reactivex.processors.BehaviorProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46064a.  v1:= 0I;
  #L46064c.  call temp:= `compareAndSet`(v0, v1, v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L460652.  v0:= temp;
  #L460654.  if v0 != 0 then goto L460660;
  #L460658.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L46065e.  return @kind void;
  #L460660.  call temp:= `error`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L460666.  v7:= temp @kind object;
  #L460668.  call temp:= `h`(v6, v7) @signature `Lio/reactivex/processors/BehaviorProcessor;.h:(Ljava/lang/Object;)[Lio/reactivex/processors/BehaviorProcessor$a;` @kind virtual;
  #L46066e.  v0:= temp @kind object;
  #L460670.  v1:= length @variable v0;
  #L460672.  v2:= 0I;
  #L460674.  if v2 >= v1 then goto L46068c;
  #L460678.  v3:= v0[v2] @kind object;
  #L46067c.  v4:= v6.`io.reactivex.processors.BehaviorProcessor.h` @type ^`long` @kind wide;
  #L460680.  call `c`(v3, v7, v4) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.c:(Ljava/lang/Object;J)V` @kind virtual;
  #L460686.  v2:= v2 + 1;
  #L46068a.  goto L460674;
  #L46068c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.processors.BehaviorProcessor` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4606a0.  if v7 != 0 then goto L4606ba;
  #L4606a4.  v7:= new `java.lang.NullPointerException`;
  #L4606a8.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L4606ac.  call `<init>`(v7, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4606b2.  call `onError`(v6, v7) @signature `Lio/reactivex/processors/BehaviorProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4606b8.  return @kind void;
  #L4606ba.  v0:= v6.`io.reactivex.processors.BehaviorProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4606be.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4606c4.  v0:= temp @kind object;
  #L4606c6.  if v0 == 0 then goto L4606cc;
  #L4606ca.  return @kind void;
  #L4606cc.  call temp:= `next`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4606d2.  v7:= temp @kind object;
  #L4606d4.  call `g`(v6, v7) @signature `Lio/reactivex/processors/BehaviorProcessor;.g:(Ljava/lang/Object;)V` @kind virtual;
  #L4606da.  v0:= v6.`io.reactivex.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4606de.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4606e4.  v0:= temp @kind object;
  #L4606e6.  v0:= (`io.reactivex.processors.BehaviorProcessor$a`[]) v0 @kind object;
  #L4606ea.  v1:= length @variable v0;
  #L4606ec.  v2:= 0I;
  #L4606ee.  if v2 >= v1 then goto L460706;
  #L4606f2.  v3:= v0[v2] @kind object;
  #L4606f6.  v4:= v6.`io.reactivex.processors.BehaviorProcessor.h` @type ^`long` @kind wide;
  #L4606fa.  call `c`(v3, v7, v4) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.c:(Ljava/lang/Object;J)V` @kind virtual;
  #L460700.  v2:= v2 + 1;
  #L460704.  goto L4606ee;
  #L460706.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.processors.BehaviorProcessor` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L460718.  v0:= v2.`io.reactivex.processors.BehaviorProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46071c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L460722.  v0:= temp @kind object;
  #L460724.  if v0 == 0 then goto L460730;
  #L460728.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L46072e.  return @kind void;
  #L460730.  v0:= 9223372036854775807L;
  #L46073a.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L460740.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.processors.BehaviorProcessor` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L460824.  v0:= new `io.reactivex.processors.BehaviorProcessor$a`;
  #L460828.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/processors/BehaviorProcessor;)V` @kind direct;
  #L46082e.  call `onSubscribe`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L460834.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/processors/BehaviorProcessor;.e:(Lio/reactivex/processors/BehaviorProcessor$a;)Z` @kind virtual;
  #L46083a.  v1:= temp;
  #L46083c.  if v1 == 0 then goto L460858;
  #L460840.  v3:= v0.`io.reactivex.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L460844.  if v3 == 0 then goto L460850;
  #L460848.  call `f`(v2, v0) @signature `Lio/reactivex/processors/BehaviorProcessor;.f:(Lio/reactivex/processors/BehaviorProcessor$a;)V` @kind virtual;
  #L46084e.  goto L46087e;
  #L460850.  call `a`(v0) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.a:()V` @kind virtual;
  #L460856.  goto L46087e;
  #L460858.  v0:= v2.`io.reactivex.processors.BehaviorProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46085c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L460862.  v0:= temp @kind object;
  #L460864.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L460868.  v1:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L46086c.  if v0 != v1 then goto L460878;
  #L460870.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L460876.  goto L46087e;
  #L460878.  call `onError`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46087e.  return @kind void;
}
