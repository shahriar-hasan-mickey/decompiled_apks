record `io.reactivex.processors.BehaviorProcessor$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.internal.util.AppendOnlyLinkedArrayList$NonThrowingPredicate` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.processors.BehaviorProcessor$a.a` @AccessFlag FINAL;
  `io.reactivex.processors.BehaviorProcessor` `io.reactivex.processors.BehaviorProcessor$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.processors.BehaviorProcessor$a.c` @AccessFlag ;
  `boolean` `io.reactivex.processors.BehaviorProcessor$a.d` @AccessFlag ;
  `io.reactivex.internal.util.AppendOnlyLinkedArrayList` `io.reactivex.processors.BehaviorProcessor$a.e` @AccessFlag ;
  `boolean` `io.reactivex.processors.BehaviorProcessor$a.f` @AccessFlag ;
  `boolean` `io.reactivex.processors.BehaviorProcessor$a.g` @AccessFlag VOLATILE;
  `long` `io.reactivex.processors.BehaviorProcessor$a.h` @AccessFlag ;
}
global `long` `@@io.reactivex.processors.BehaviorProcessor$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.processors.BehaviorProcessor$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.processors.BehaviorProcessor` v2 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/processors/BehaviorProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L45ffb0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L45ffb6.  v0.`io.reactivex.processors.BehaviorProcessor$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L45ffba.  v0.`io.reactivex.processors.BehaviorProcessor$a.b` @type ^`io.reactivex.processors.BehaviorProcessor` := v2 @kind object;
  #L45ffbe.  return @kind void;
}
procedure `void` `a`(`io.reactivex.processors.BehaviorProcessor$a` v4 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45fffc.  v0:= v4.`io.reactivex.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L460000.  if v0 == 0 then goto L460006;
  #L460004.  return @kind void;
  #L460006.  @monitorenter v4
  #L460008.  v0:= v4.`io.reactivex.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L46000c.  if v0 == 0 then goto L460014;
  #L460010.  @monitorexit v4
  #L460012.  return @kind void;
  #L460014.  v0:= v4.`io.reactivex.processors.BehaviorProcessor$a.c` @type ^`boolean` @kind boolean;
  #L460018.  if v0 == 0 then goto L460020;
  #L46001c.  @monitorexit v4
  #L46001e.  return @kind void;
  #L460020.  v0:= v4.`io.reactivex.processors.BehaviorProcessor$a.b` @type ^`io.reactivex.processors.BehaviorProcessor` @kind object;
  #L460024.  v1:= v0.`io.reactivex.processors.BehaviorProcessor.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L460028.  call `lock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L46002e.  v2:= v0.`io.reactivex.processors.BehaviorProcessor.h` @type ^`long` @kind wide;
  #L460032.  v4.`io.reactivex.processors.BehaviorProcessor$a.h` @type ^`long` := v2 @kind wide;
  #L460036.  v0:= v0.`io.reactivex.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46003a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L460040.  v0:= temp @kind object;
  #L460042.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L460048.  v1:= 1I;
  #L46004a.  if v0 == 0 then goto L460052;
  #L46004e.  v2:= 1I;
  #L460050.  goto L460054;
  #L460052.  v2:= 0I;
  #L460054.  v4.`io.reactivex.processors.BehaviorProcessor$a.d` @type ^`boolean` := v2 @kind boolean;
  #L460058.  v4.`io.reactivex.processors.BehaviorProcessor$a.c` @type ^`boolean` := v1 @kind boolean;
  #L46005c.  @monitorexit v4
  #L46005e.  if v0 == 0 then goto L460076;
  #L460062.  call temp:= `test`(v4, v0) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.test:(Ljava/lang/Object;)Z` @kind virtual;
  #L460068.  v0:= temp;
  #L46006a.  if v0 == 0 then goto L460070;
  #L46006e.  return @kind void;
  #L460070.  call `b`(v4) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.b:()V` @kind virtual;
  #L460076.  return @kind void;
  #L460078.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46007a.  @monitorexit v4
  #L46007c.  throw v0;
  catch `java.lang.Throwable` @[L460008..L46005e] goto L460078;
  catch `java.lang.Throwable` @[L46007a..L46007c] goto L460078;
}
procedure `void` `b`(`io.reactivex.processors.BehaviorProcessor$a` v2 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4600a4.  v0:= v2.`io.reactivex.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L4600a8.  if v0 == 0 then goto L4600ae;
  #L4600ac.  return @kind void;
  #L4600ae.  @monitorenter v2
  #L4600b0.  v0:= v2.`io.reactivex.processors.BehaviorProcessor$a.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L4600b4.  if v0 != 0 then goto L4600c2;
  #L4600b8.  v0:= 0I;
  #L4600ba.  v2.`io.reactivex.processors.BehaviorProcessor$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4600be.  @monitorexit v2
  #L4600c0.  return @kind void;
  #L4600c2.  v1:= 0I;
  #L4600c4.  v2.`io.reactivex.processors.BehaviorProcessor$a.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v1 @kind object;
  #L4600c8.  @monitorexit v2
  #L4600ca.  call `forEachWhile`(v0, v2) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.forEachWhile:(Lio/reactivex/internal/util/AppendOnlyLinkedArrayList$NonThrowingPredicate;)V` @kind virtual;
  #L4600d0.  goto L4600a4;
  #L4600d2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4600d4.  @monitorexit v2
  #L4600d6.  throw v0;
  catch `java.lang.Throwable` @[L4600b0..L4600ca] goto L4600d2;
  catch `java.lang.Throwable` @[L4600d4..L4600d6] goto L4600d2;
}
procedure `void` `c`(`io.reactivex.processors.BehaviorProcessor$a` v3 @kind this, `java.lang.Object` v4 @kind object, `long` v5 ) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.c:(Ljava/lang/Object;J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4600fc.  v0:= v3.`io.reactivex.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L460100.  if v0 == 0 then goto L460106;
  #L460104.  return @kind void;
  #L460106.  v0:= v3.`io.reactivex.processors.BehaviorProcessor$a.f` @type ^`boolean` @kind boolean;
  #L46010a.  if v0 != 0 then goto L46016a;
  #L46010e.  @monitorenter v3
  #L460110.  v0:= v3.`io.reactivex.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L460114.  if v0 == 0 then goto L46011c;
  #L460118.  @monitorexit v3
  #L46011a.  return @kind void;
  #L46011c.  v0:= v3.`io.reactivex.processors.BehaviorProcessor$a.h` @type ^`long` @kind wide;
  #L460120.  v2:= lcmp(v0, v5);
  #L460124.  if v2 != 0 then goto L46012c;
  #L460128.  @monitorexit v3
  #L46012a.  return @kind void;
  #L46012c.  v5:= v3.`io.reactivex.processors.BehaviorProcessor$a.d` @type ^`boolean` @kind boolean;
  #L460130.  if v5 == 0 then goto L460156;
  #L460134.  v5:= v3.`io.reactivex.processors.BehaviorProcessor$a.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L460138.  if v5 != 0 then goto L46014c;
  #L46013c.  v5:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L460140.  v6:= 4I;
  #L460142.  call `<init>`(v5, v6) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L460148.  v3.`io.reactivex.processors.BehaviorProcessor$a.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v5 @kind object;
  #L46014c.  call `add`(v5, v4) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L460152.  @monitorexit v3
  #L460154.  return @kind void;
  #L460156.  v5:= 1I;
  #L460158.  v3.`io.reactivex.processors.BehaviorProcessor$a.c` @type ^`boolean` := v5 @kind boolean;
  #L46015c.  @monitorexit v3
  #L46015e.  v3.`io.reactivex.processors.BehaviorProcessor$a.f` @type ^`boolean` := v5 @kind boolean;
  #L460162.  goto L46016a;
  #L460164.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L460166.  @monitorexit v3
  #L460168.  throw v4;
  #L46016a.  call temp:= `test`(v3, v4) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.test:(Ljava/lang/Object;)Z` @kind virtual;
  #L460170.  return @kind void;
  catch `java.lang.Throwable` @[L460110..L46015e] goto L460164;
  catch `java.lang.Throwable` @[L460166..L460168] goto L460164;
}
procedure `void` `cancel`(`io.reactivex.processors.BehaviorProcessor$a` v1 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45ffd0.  v0:= v1.`io.reactivex.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L45ffd4.  if v0 != 0 then goto L45ffe8;
  #L45ffd8.  v0:= 1I;
  #L45ffda.  v1.`io.reactivex.processors.BehaviorProcessor$a.g` @type ^`boolean` := v0 @kind boolean;
  #L45ffde.  v0:= v1.`io.reactivex.processors.BehaviorProcessor$a.b` @type ^`io.reactivex.processors.BehaviorProcessor` @kind object;
  #L45ffe2.  call `f`(v0, v1) @signature `Lio/reactivex/processors/BehaviorProcessor;.f:(Lio/reactivex/processors/BehaviorProcessor$a;)V` @kind virtual;
  #L45ffe8.  return @kind void;
}
procedure `boolean` `d`(`io.reactivex.processors.BehaviorProcessor$a` v5 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45fecc.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L45fed2.  v0:= temp @kind wide;
  #L45fed4.  v2:= 0L;
  #L45fed8.  v4:= lcmp(v0, v2);
  #L45fedc.  if v4 != 0 then goto L45fee4;
  #L45fee0.  v0:= 1I;
  #L45fee2.  goto L45fee6;
  #L45fee4.  v0:= 0I;
  #L45fee6.  return v0;
}
procedure `void` `request`(`io.reactivex.processors.BehaviorProcessor$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L460198.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L46019e.  v0:= temp;
  #L4601a0.  if v0 == 0 then goto L4601aa;
  #L4601a4.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4601aa.  return @kind void;
}
procedure `boolean` `test`(`io.reactivex.processors.BehaviorProcessor$a` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.test:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L45fef8.  v0:= v6.`io.reactivex.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L45fefc.  v1:= 1I;
  #L45fefe.  if v0 == 0 then goto L45ff04;
  #L45ff02.  return v1;
  #L45ff04.  call temp:= `isComplete`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L45ff0a.  v0:= temp;
  #L45ff0c.  if v0 == 0 then goto L45ff1c;
  #L45ff10.  v7:= v6.`io.reactivex.processors.BehaviorProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45ff14.  call `onComplete`(v7) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L45ff1a.  return v1;
  #L45ff1c.  call temp:= `isError`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L45ff22.  v0:= temp;
  #L45ff24.  if v0 == 0 then goto L45ff3c;
  #L45ff28.  v0:= v6.`io.reactivex.processors.BehaviorProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45ff2c.  call temp:= `getError`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L45ff32.  v7:= temp @kind object;
  #L45ff34.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45ff3a.  return v1;
  #L45ff3c.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L45ff42.  v2:= temp @kind wide;
  #L45ff44.  v4:= 0L;
  #L45ff48.  v0:= lcmp(v2, v4);
  #L45ff4c.  if v0 == 0 then goto L45ff7e;
  #L45ff50.  v0:= v6.`io.reactivex.processors.BehaviorProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45ff54.  call temp:= `getValue`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L45ff5a.  v7:= temp @kind object;
  #L45ff5c.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L45ff62.  v0:= 9223372036854775807L;
  #L45ff6c.  v7:= lcmp(v2, v0);
  #L45ff70.  if v7 == 0 then goto L45ff7a;
  #L45ff74.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L45ff7a.  v7:= 0I;
  #L45ff7c.  return v7;
  #L45ff7e.  call `cancel`(v6) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.cancel:()V` @kind virtual;
  #L45ff84.  v7:= v6.`io.reactivex.processors.BehaviorProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45ff88.  v0:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L45ff8c.  v2:= "Could not deliver value due to lack of requests" @kind object;
  #L45ff90.  call `<init>`(v0, v2) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45ff96.  call `onError`(v7, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45ff9c.  return v1;
}
