record `io.reactivex.processors.a` @kind class @AccessFlag FINAL extends `io.reactivex.processors.FlowableProcessor` @kind class {
  `io.reactivex.processors.FlowableProcessor` `io.reactivex.processors.a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.processors.a.c` @AccessFlag ;
  `io.reactivex.internal.util.AppendOnlyLinkedArrayList` `io.reactivex.processors.a.d` @AccessFlag ;
  `boolean` `io.reactivex.processors.a.e` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.processors.a` v0 @kind this, `io.reactivex.processors.FlowableProcessor` v1 @kind object) @signature `Lio/reactivex/processors/a;.<init>:(Lio/reactivex/processors/FlowableProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4620cc.  call `<init>`(v0) @signature `Lio/reactivex/processors/FlowableProcessor;.<init>:()V` @kind direct;
  #L4620d2.  v0.`io.reactivex.processors.a.b` @type ^`io.reactivex.processors.FlowableProcessor` := v1 @kind object;
  #L4620d6.  return @kind void;
}
procedure `void` `e`(`io.reactivex.processors.a` v2 @kind this) @signature `Lio/reactivex/processors/a;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4620e8.  @monitorenter v2
  #L4620ea.  v0:= v2.`io.reactivex.processors.a.d` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L4620ee.  if v0 != 0 then goto L4620fc;
  #L4620f2.  v0:= 0I;
  #L4620f4.  v2.`io.reactivex.processors.a.c` @type ^`boolean` := v0 @kind boolean;
  #L4620f8.  @monitorexit v2
  #L4620fa.  return @kind void;
  #L4620fc.  v1:= 0I;
  #L4620fe.  v2.`io.reactivex.processors.a.d` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v1 @kind object;
  #L462102.  @monitorexit v2
  #L462104.  v1:= v2.`io.reactivex.processors.a.b` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L462108.  call temp:= `accept`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.accept:(Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L46210e.  goto L4620e8;
  #L462110.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L462112.  @monitorexit v2
  #L462114.  throw v0;
  catch `java.lang.Throwable` @[L4620ea..L462104] goto L462110;
  catch `java.lang.Throwable` @[L462112..L462114] goto L462110;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.processors.a` v1 @kind this) @signature `Lio/reactivex/processors/a;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4620ac.  v0:= v1.`io.reactivex.processors.a.b` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L4620b0.  call temp:= `getThrowable`(v0) @signature `Lio/reactivex/processors/FlowableProcessor;.getThrowable:()Ljava/lang/Throwable;` @kind virtual;
  #L4620b6.  v0:= temp @kind object;
  #L4620b8.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.processors.a` v1 @kind this) @signature `Lio/reactivex/processors/a;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46204c.  v0:= v1.`io.reactivex.processors.a.b` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L462050.  call temp:= `hasComplete`(v0) @signature `Lio/reactivex/processors/FlowableProcessor;.hasComplete:()Z` @kind virtual;
  #L462056.  v0:= temp;
  #L462058.  return v0;
}
procedure `boolean` `hasSubscribers`(`io.reactivex.processors.a` v1 @kind this) @signature `Lio/reactivex/processors/a;.hasSubscribers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46206c.  v0:= v1.`io.reactivex.processors.a.b` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L462070.  call temp:= `hasSubscribers`(v0) @signature `Lio/reactivex/processors/FlowableProcessor;.hasSubscribers:()Z` @kind virtual;
  #L462076.  v0:= temp;
  #L462078.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.processors.a` v1 @kind this) @signature `Lio/reactivex/processors/a;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46208c.  v0:= v1.`io.reactivex.processors.a.b` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L462090.  call temp:= `hasThrowable`(v0) @signature `Lio/reactivex/processors/FlowableProcessor;.hasThrowable:()Z` @kind virtual;
  #L462096.  v0:= temp;
  #L462098.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.processors.a` v2 @kind this) @signature `Lio/reactivex/processors/a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46213c.  v0:= v2.`io.reactivex.processors.a.e` @type ^`boolean` @kind boolean;
  #L462140.  if v0 == 0 then goto L462146;
  #L462144.  return @kind void;
  #L462146.  @monitorenter v2
  #L462148.  v0:= v2.`io.reactivex.processors.a.e` @type ^`boolean` @kind boolean;
  #L46214c.  if v0 == 0 then goto L462154;
  #L462150.  @monitorexit v2
  #L462152.  return @kind void;
  #L462154.  v0:= 1I;
  #L462156.  v2.`io.reactivex.processors.a.e` @type ^`boolean` := v0 @kind boolean;
  #L46215a.  v1:= v2.`io.reactivex.processors.a.c` @type ^`boolean` @kind boolean;
  #L46215e.  if v1 == 0 then goto L46218c;
  #L462162.  v0:= v2.`io.reactivex.processors.a.d` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L462166.  if v0 != 0 then goto L46217a;
  #L46216a.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L46216e.  v1:= 4I;
  #L462170.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L462176.  v2.`io.reactivex.processors.a.d` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L46217a.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L462180.  v1:= temp @kind object;
  #L462182.  call `add`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L462188.  @monitorexit v2
  #L46218a.  return @kind void;
  #L46218c.  v2.`io.reactivex.processors.a.c` @type ^`boolean` := v0 @kind boolean;
  #L462190.  @monitorexit v2
  #L462192.  v0:= v2.`io.reactivex.processors.a.b` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L462196.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L46219c.  return @kind void;
  #L46219e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4621a0.  @monitorexit v2
  #L4621a2.  throw v0;
  catch `java.lang.Throwable` @[L462148..L462192] goto L46219e;
  catch `java.lang.Throwable` @[L4621a0..L4621a2] goto L46219e;
}
procedure `void` `onError`(`io.reactivex.processors.a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/processors/a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4621c8.  v0:= v2.`io.reactivex.processors.a.e` @type ^`boolean` @kind boolean;
  #L4621cc.  if v0 == 0 then goto L4621d8;
  #L4621d0.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4621d6.  return @kind void;
  #L4621d8.  @monitorenter v2
  #L4621da.  v0:= v2.`io.reactivex.processors.a.e` @type ^`boolean` @kind boolean;
  #L4621de.  v1:= 1I;
  #L4621e0.  if v0 == 0 then goto L4621e6;
  #L4621e4.  goto L462224;
  #L4621e6.  v2.`io.reactivex.processors.a.e` @type ^`boolean` := v1 @kind boolean;
  #L4621ea.  v0:= v2.`io.reactivex.processors.a.c` @type ^`boolean` @kind boolean;
  #L4621ee.  if v0 == 0 then goto L46221c;
  #L4621f2.  v0:= v2.`io.reactivex.processors.a.d` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L4621f6.  if v0 != 0 then goto L46220a;
  #L4621fa.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L4621fe.  v1:= 4I;
  #L462200.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L462206.  v2.`io.reactivex.processors.a.d` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L46220a.  call temp:= `error`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L462210.  v3:= temp @kind object;
  #L462212.  call `setFirst`(v0, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.setFirst:(Ljava/lang/Object;)V` @kind virtual;
  #L462218.  @monitorexit v2
  #L46221a.  return @kind void;
  #L46221c.  v0:= 0I;
  #L46221e.  v2.`io.reactivex.processors.a.c` @type ^`boolean` := v1 @kind boolean;
  #L462222.  v1:= 0I;
  #L462224.  @monitorexit v2
  #L462226.  if v1 == 0 then goto L462232;
  #L46222a.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L462230.  return @kind void;
  #L462232.  v0:= v2.`io.reactivex.processors.a.b` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L462236.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46223c.  return @kind void;
  #L46223e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L462240.  @monitorexit v2
  #L462242.  throw v3;
  catch `java.lang.Throwable` @[L4621da..L462226] goto L46223e;
  catch `java.lang.Throwable` @[L462240..L462242] goto L46223e;
}
procedure `void` `onNext`(`io.reactivex.processors.a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/processors/a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L462268.  v0:= v2.`io.reactivex.processors.a.e` @type ^`boolean` @kind boolean;
  #L46226c.  if v0 == 0 then goto L462272;
  #L462270.  return @kind void;
  #L462272.  @monitorenter v2
  #L462274.  v0:= v2.`io.reactivex.processors.a.e` @type ^`boolean` @kind boolean;
  #L462278.  if v0 == 0 then goto L462280;
  #L46227c.  @monitorexit v2
  #L46227e.  return @kind void;
  #L462280.  v0:= v2.`io.reactivex.processors.a.c` @type ^`boolean` @kind boolean;
  #L462284.  if v0 == 0 then goto L4622b2;
  #L462288.  v0:= v2.`io.reactivex.processors.a.d` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L46228c.  if v0 != 0 then goto L4622a0;
  #L462290.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L462294.  v1:= 4I;
  #L462296.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L46229c.  v2.`io.reactivex.processors.a.d` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L4622a0.  call temp:= `next`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4622a6.  v3:= temp @kind object;
  #L4622a8.  call `add`(v0, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L4622ae.  @monitorexit v2
  #L4622b0.  return @kind void;
  #L4622b2.  v0:= 1I;
  #L4622b4.  v2.`io.reactivex.processors.a.c` @type ^`boolean` := v0 @kind boolean;
  #L4622b8.  @monitorexit v2
  #L4622ba.  v0:= v2.`io.reactivex.processors.a.b` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L4622be.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4622c4.  call `e`(v2) @signature `Lio/reactivex/processors/a;.e:()V` @kind virtual;
  #L4622ca.  return @kind void;
  #L4622cc.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4622ce.  @monitorexit v2
  #L4622d0.  throw v3;
  catch `java.lang.Throwable` @[L462274..L4622ba] goto L4622cc;
  catch `java.lang.Throwable` @[L4622ce..L4622d0] goto L4622cc;
}
procedure `void` `onSubscribe`(`io.reactivex.processors.a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/processors/a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4622f8.  v0:= v2.`io.reactivex.processors.a.e` @type ^`boolean` @kind boolean;
  #L4622fc.  v1:= 1I;
  #L4622fe.  if v0 != 0 then goto L462352;
  #L462302.  @monitorenter v2
  #L462304.  v0:= v2.`io.reactivex.processors.a.e` @type ^`boolean` @kind boolean;
  #L462308.  if v0 == 0 then goto L46230e;
  #L46230c.  goto L462348;
  #L46230e.  v0:= v2.`io.reactivex.processors.a.c` @type ^`boolean` @kind boolean;
  #L462312.  if v0 == 0 then goto L462340;
  #L462316.  v0:= v2.`io.reactivex.processors.a.d` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L46231a.  if v0 != 0 then goto L46232e;
  #L46231e.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L462322.  v1:= 4I;
  #L462324.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L46232a.  v2.`io.reactivex.processors.a.d` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L46232e.  call temp:= `subscription`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.subscription:(Lorg/reactivestreams/Subscription;)Ljava/lang/Object;` @kind static;
  #L462334.  v3:= temp @kind object;
  #L462336.  call `add`(v0, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L46233c.  @monitorexit v2
  #L46233e.  return @kind void;
  #L462340.  v2.`io.reactivex.processors.a.c` @type ^`boolean` := v1 @kind boolean;
  #L462344.  v0:= 0I;
  #L462346.  v1:= 0I;
  #L462348.  @monitorexit v2
  #L46234a.  goto L462352;
  #L46234c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46234e.  @monitorexit v2
  #L462350.  throw v3;
  #L462352.  if v1 == 0 then goto L46235e;
  #L462356.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L46235c.  goto L46236e;
  #L46235e.  v0:= v2.`io.reactivex.processors.a.b` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L462362.  call `onSubscribe`(v0, v3) @signature `Lio/reactivex/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L462368.  call `e`(v2) @signature `Lio/reactivex/processors/a;.e:()V` @kind virtual;
  #L46236e.  return @kind void;
  catch `java.lang.Throwable` @[L462304..L462350] goto L46234c;
}
procedure `void` `subscribeActual`(`io.reactivex.processors.a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/processors/a;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L46238c.  v0:= v1.`io.reactivex.processors.a.b` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L462390.  call `subscribe`(v0, v2) @signature `Lio/reactivex/Flowable;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L462396.  return @kind void;
}
