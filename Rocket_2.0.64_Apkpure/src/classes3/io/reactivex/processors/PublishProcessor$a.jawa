record `io.reactivex.processors.PublishProcessor$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.processors.PublishProcessor$a.a` @AccessFlag FINAL;
  `io.reactivex.processors.PublishProcessor` `io.reactivex.processors.PublishProcessor$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.processors.PublishProcessor$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.processors.PublishProcessor$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.processors.PublishProcessor` v2 @kind object) @signature `Lio/reactivex/processors/PublishProcessor$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/processors/PublishProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L460928.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L46092e.  v0.`io.reactivex.processors.PublishProcessor$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L460932.  v0.`io.reactivex.processors.PublishProcessor$a.b` @type ^`io.reactivex.processors.PublishProcessor` := v2 @kind object;
  #L460936.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.processors.PublishProcessor$a` v5 @kind this) @signature `Lio/reactivex/processors/PublishProcessor$a;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4608d0.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4608d6.  v0:= temp @kind wide;
  #L4608d8.  v2:= -9223372036854775808L;
  #L4608dc.  v4:= lcmp(v0, v2);
  #L4608e0.  if v4 != 0 then goto L4608e8;
  #L4608e4.  v0:= 1I;
  #L4608e6.  goto L4608ea;
  #L4608e8.  v0:= 0I;
  #L4608ea.  return v0;
}
procedure `boolean` `b`(`io.reactivex.processors.PublishProcessor$a` v5 @kind this) @signature `Lio/reactivex/processors/PublishProcessor$a;.b:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4608fc.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L460902.  v0:= temp @kind wide;
  #L460904.  v2:= 0L;
  #L460908.  v4:= lcmp(v0, v2);
  #L46090c.  if v4 != 0 then goto L460914;
  #L460910.  v0:= 1I;
  #L460912.  goto L460916;
  #L460914.  v0:= 0I;
  #L460916.  return v0;
}
procedure `void` `c`(`io.reactivex.processors.PublishProcessor$a` v5 @kind this) @signature `Lio/reactivex/processors/PublishProcessor$a;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L460978.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L46097e.  v0:= temp @kind wide;
  #L460980.  v2:= -9223372036854775808L;
  #L460984.  v4:= lcmp(v0, v2);
  #L460988.  if v4 == 0 then goto L460996;
  #L46098c.  v0:= v5.`io.reactivex.processors.PublishProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L460990.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L460996.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.processors.PublishProcessor$a` v5 @kind this) @signature `Lio/reactivex/processors/PublishProcessor$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L460948.  v0:= -9223372036854775808L;
  #L46094c.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L460952.  v2:= temp @kind wide;
  #L460954.  v4:= lcmp(v2, v0);
  #L460958.  if v4 == 0 then goto L460966;
  #L46095c.  v0:= v5.`io.reactivex.processors.PublishProcessor$a.b` @type ^`io.reactivex.processors.PublishProcessor` @kind object;
  #L460960.  call `f`(v0, v5) @signature `Lio/reactivex/processors/PublishProcessor;.f:(Lio/reactivex/processors/PublishProcessor$a;)V` @kind virtual;
  #L460966.  return @kind void;
}
procedure `void` `d`(`io.reactivex.processors.PublishProcessor$a` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/processors/PublishProcessor$a;.d:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4609a8.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4609ae.  v0:= temp @kind wide;
  #L4609b0.  v2:= -9223372036854775808L;
  #L4609b4.  v4:= lcmp(v0, v2);
  #L4609b8.  if v4 == 0 then goto L4609c8;
  #L4609bc.  v0:= v5.`io.reactivex.processors.PublishProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4609c0.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4609c6.  goto L4609ce;
  #L4609c8.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4609ce.  return @kind void;
}
procedure `void` `e`(`io.reactivex.processors.PublishProcessor$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/processors/PublishProcessor$a;.e:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4609e0.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4609e6.  v0:= temp @kind wide;
  #L4609e8.  v2:= -9223372036854775808L;
  #L4609ec.  v4:= lcmp(v0, v2);
  #L4609f0.  if v4 != 0 then goto L4609f6;
  #L4609f4.  return @kind void;
  #L4609f6.  v2:= 0L;
  #L4609fa.  v4:= lcmp(v0, v2);
  #L4609fe.  if v4 == 0 then goto L460a26;
  #L460a02.  v2:= v5.`io.reactivex.processors.PublishProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L460a06.  call `onNext`(v2, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L460a0c.  v2:= 9223372036854775807L;
  #L460a16.  v6:= lcmp(v0, v2);
  #L460a1a.  if v6 == 0 then goto L460a44;
  #L460a1e.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L460a24.  goto L460a44;
  #L460a26.  call `cancel`(v5) @signature `Lio/reactivex/processors/PublishProcessor$a;.cancel:()V` @kind virtual;
  #L460a2c.  v6:= v5.`io.reactivex.processors.PublishProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L460a30.  v0:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L460a34.  v1:= "Could not emit value due to lack of requests" @kind object;
  #L460a38.  call `<init>`(v0, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L460a3e.  call `onError`(v6, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L460a44.  return @kind void;
}
procedure `void` `request`(`io.reactivex.processors.PublishProcessor$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/processors/PublishProcessor$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L460a58.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L460a5e.  v0:= temp;
  #L460a60.  if v0 == 0 then goto L460a6a;
  #L460a64.  call temp:= `addCancel`(v1, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L460a6a.  return @kind void;
}
