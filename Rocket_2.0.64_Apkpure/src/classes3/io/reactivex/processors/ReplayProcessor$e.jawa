record `io.reactivex.processors.ReplayProcessor$e` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.processors.ReplayProcessor$b` @kind interface {
  `int` `io.reactivex.processors.ReplayProcessor$e.a` @AccessFlag FINAL;
  `int` `io.reactivex.processors.ReplayProcessor$e.b` @AccessFlag ;
  `io.reactivex.processors.ReplayProcessor$a` `io.reactivex.processors.ReplayProcessor$e.c` @AccessFlag VOLATILE;
  `io.reactivex.processors.ReplayProcessor$a` `io.reactivex.processors.ReplayProcessor$e.d` @AccessFlag ;
  `boolean` `io.reactivex.processors.ReplayProcessor$e.e` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.processors.ReplayProcessor$e.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.processors.ReplayProcessor$e` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/processors/ReplayProcessor$e;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L461588.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L46158e.  v0:= "maxSize" @kind object;
  #L461592.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L461598.  v2:= temp;
  #L46159a.  v1.`io.reactivex.processors.ReplayProcessor$e.a` @type ^`int` := v2;
  #L46159e.  v2:= new `io.reactivex.processors.ReplayProcessor$a`;
  #L4615a2.  v0:= 0I;
  #L4615a4.  call `<init>`(v2, v0) @signature `Lio/reactivex/processors/ReplayProcessor$a;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4615aa.  v1.`io.reactivex.processors.ReplayProcessor$e.d` @type ^`io.reactivex.processors.ReplayProcessor$a` := v2 @kind object;
  #L4615ae.  v1.`io.reactivex.processors.ReplayProcessor$e.c` @type ^`io.reactivex.processors.ReplayProcessor$a` := v2 @kind object;
  #L4615b2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.processors.ReplayProcessor$e` v2 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$e;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L461764.  v0:= v2.`io.reactivex.processors.ReplayProcessor$e.b` @type ^`int`;
  #L461768.  v1:= v2.`io.reactivex.processors.ReplayProcessor$e.a` @type ^`int`;
  #L46176c.  if v0 <= v1 then goto L46178c;
  #L461770.  v0:= v0 + -1;
  #L461774.  v2.`io.reactivex.processors.ReplayProcessor$e.b` @type ^`int` := v0;
  #L461778.  v0:= v2.`io.reactivex.processors.ReplayProcessor$e.c` @type ^`io.reactivex.processors.ReplayProcessor$a` @kind object;
  #L46177c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L461782.  v0:= temp @kind object;
  #L461784.  v0:= (`io.reactivex.processors.ReplayProcessor$a`) v0 @kind object;
  #L461788.  v2.`io.reactivex.processors.ReplayProcessor$e.c` @type ^`io.reactivex.processors.ReplayProcessor$a` := v0 @kind object;
  #L46178c.  return @kind void;
}
procedure `void` `add`(`io.reactivex.processors.ReplayProcessor$e` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$e;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4615c4.  v0:= new `io.reactivex.processors.ReplayProcessor$a`;
  #L4615c8.  call `<init>`(v0, v3) @signature `Lio/reactivex/processors/ReplayProcessor$a;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4615ce.  v3:= v2.`io.reactivex.processors.ReplayProcessor$e.d` @type ^`io.reactivex.processors.ReplayProcessor$a` @kind object;
  #L4615d2.  v2.`io.reactivex.processors.ReplayProcessor$e.d` @type ^`io.reactivex.processors.ReplayProcessor$a` := v0 @kind object;
  #L4615d6.  v1:= v2.`io.reactivex.processors.ReplayProcessor$e.b` @type ^`int`;
  #L4615da.  v1:= v1 + 1;
  #L4615de.  v2.`io.reactivex.processors.ReplayProcessor$e.b` @type ^`int` := v1;
  #L4615e2.  call `set`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4615e8.  call `a`(v2) @signature `Lio/reactivex/processors/ReplayProcessor$e;.a:()V` @kind virtual;
  #L4615ee.  return @kind void;
}
procedure `java.lang.Object`[] `c`(`io.reactivex.processors.ReplayProcessor$e` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$e;.c:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L46150c.  v0:= v5.`io.reactivex.processors.ReplayProcessor$e.c` @type ^`io.reactivex.processors.ReplayProcessor$a` @kind object;
  #L461510.  call temp:= `size`(v5) @signature `Lio/reactivex/processors/ReplayProcessor$e;.size:()I` @kind virtual;
  #L461516.  v1:= temp;
  #L461518.  v2:= 0I;
  #L46151a.  v3:= 0I;
  #L46151c.  if v1 != 0 then goto L46152c;
  #L461520.  v0:= length @variable v6;
  #L461522.  if v0 == 0 then goto L461576;
  #L461526.  v6[v3]:= v2 @kind object;
  #L46152a.  goto L461576;
  #L46152c.  v4:= length @variable v6;
  #L46152e.  if v4 >= v1 then goto L46154e;
  #L461532.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L461538.  v6:= temp @kind object;
  #L46153a.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L461540.  v6:= temp @kind object;
  #L461542.  call temp:= `newInstance`(v6, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L461548.  v6:= temp @kind object;
  #L46154a.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L46154e.  if v3 == v1 then goto L46156c;
  #L461552.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L461558.  v0:= temp @kind object;
  #L46155a.  v0:= (`io.reactivex.processors.ReplayProcessor$a`) v0 @kind object;
  #L46155e.  v4:= v0.`io.reactivex.processors.ReplayProcessor$a.a` @type ^`java.lang.Object` @kind object;
  #L461562.  v6[v3]:= v4 @kind object;
  #L461566.  v3:= v3 + 1;
  #L46156a.  goto L46154e;
  #L46156c.  v0:= length @variable v6;
  #L46156e.  if v0 <= v1 then goto L461576;
  #L461572.  v6[v1]:= v2 @kind object;
  #L461576.  return v6 @kind object;
}
procedure `void` `d`(`io.reactivex.processors.ReplayProcessor$e` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$e;.d:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L461600.  call `lazySet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L461606.  v0:= new `io.reactivex.processors.ReplayProcessor$a`;
  #L46160a.  call `<init>`(v0, v4) @signature `Lio/reactivex/processors/ReplayProcessor$a;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L461610.  v4:= v3.`io.reactivex.processors.ReplayProcessor$e.d` @type ^`io.reactivex.processors.ReplayProcessor$a` @kind object;
  #L461614.  v3.`io.reactivex.processors.ReplayProcessor$e.d` @type ^`io.reactivex.processors.ReplayProcessor$a` := v0 @kind object;
  #L461618.  v1:= v3.`io.reactivex.processors.ReplayProcessor$e.b` @type ^`int`;
  #L46161c.  v2:= 1I;
  #L46161e.  v1:= v1 + v2 @kind int;
  #L461620.  v3.`io.reactivex.processors.ReplayProcessor$e.b` @type ^`int` := v1;
  #L461624.  call `set`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L46162a.  v3.`io.reactivex.processors.ReplayProcessor$e.e` @type ^`boolean` := v2 @kind boolean;
  #L46162e.  return @kind void;
}
procedure `void` `e`(`io.reactivex.processors.ReplayProcessor$e` v14 @kind this, `io.reactivex.processors.ReplayProcessor$c` v15 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$e;.e:(Lio/reactivex/processors/ReplayProcessor$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L461640.  call temp:= `getAndIncrement`(v15) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L461646.  v0:= temp;
  #L461648.  if v0 == 0 then goto L46164e;
  #L46164c.  return @kind void;
  #L46164e.  v0:= v15.`io.reactivex.processors.ReplayProcessor$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L461652.  v1:= v15.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` @kind object;
  #L461656.  v1:= (`io.reactivex.processors.ReplayProcessor$a`) v1 @kind object;
  #L46165a.  v2:= 1I;
  #L46165c.  if v1 != 0 then goto L461664;
  #L461660.  v1:= v14.`io.reactivex.processors.ReplayProcessor$e.c` @type ^`io.reactivex.processors.ReplayProcessor$a` @kind object;
  #L461664.  v3:= 1I;
  #L461666.  v4:= v15.`io.reactivex.processors.ReplayProcessor$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L46166a.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L461670.  v4:= temp @kind wide;
  #L461672.  v6:= 0L;
  #L461676.  v8:= v6 @kind wide;
  #L461678.  v10:= v15.`io.reactivex.processors.ReplayProcessor$c.e` @type ^`boolean` @kind boolean;
  #L46167c.  v11:= 0I;
  #L46167e.  if v10 == 0 then goto L461688;
  #L461682.  v15.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v11 @kind object;
  #L461686.  return @kind void;
  #L461688.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46168e.  v10:= temp @kind object;
  #L461690.  v10:= (`io.reactivex.processors.ReplayProcessor$a`) v10 @kind object;
  #L461694.  if v10 != 0 then goto L46169a;
  #L461698.  goto L4616fc;
  #L46169a.  v12:= v10.`io.reactivex.processors.ReplayProcessor$a.a` @type ^`java.lang.Object` @kind object;
  #L46169e.  v13:= v14.`io.reactivex.processors.ReplayProcessor$e.e` @type ^`boolean` @kind boolean;
  #L4616a2.  if v13 == 0 then goto L4616de;
  #L4616a6.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4616ac.  v13:= temp @kind object;
  #L4616ae.  if v13 != 0 then goto L4616de;
  #L4616b2.  call temp:= `isComplete`(v12) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4616b8.  v1:= temp;
  #L4616ba.  if v1 == 0 then goto L4616c6;
  #L4616be.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4616c4.  goto L4616d4;
  #L4616c6.  call temp:= `getError`(v12) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L4616cc.  v1:= temp @kind object;
  #L4616ce.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4616d4.  v15.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v11 @kind object;
  #L4616d8.  v15.`io.reactivex.processors.ReplayProcessor$c.e` @type ^`boolean` := v2 @kind boolean;
  #L4616dc.  return @kind void;
  #L4616de.  v11:= lcmp(v4, v6);
  #L4616e2.  if v11 != 0 then goto L461740;
  #L4616e6.  v4:= v15.`io.reactivex.processors.ReplayProcessor$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4616ea.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4616f0.  v4:= temp @kind wide;
  #L4616f2.  v4:= v4 + v8 @kind long;
  #L4616f4.  v11:= lcmp(v4, v6);
  #L4616f8.  if v11 != 0 then goto L461740;
  #L4616fc.  v4:= lcmp(v8, v6);
  #L461700.  if v4 == 0 then goto L46172c;
  #L461704.  v4:= v15.`io.reactivex.processors.ReplayProcessor$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L461708.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L46170e.  v4:= temp @kind wide;
  #L461710.  v6:= 9223372036854775807L;
  #L46171a.  v10:= lcmp(v4, v6);
  #L46171e.  if v10 == 0 then goto L46172c;
  #L461722.  v4:= v15.`io.reactivex.processors.ReplayProcessor$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L461726.  call temp:= `addAndGet`(v4, v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L46172c.  v15.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v1 @kind object;
  #L461730.  v3:= -v3 @kind int;
  #L461732.  call temp:= `addAndGet`(v15, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L461738.  v3:= temp;
  #L46173a.  if v3 != 0 then goto L461666;
  #L46173e.  return @kind void;
  #L461740.  call `onNext`(v0, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L461746.  v11:= 1L;
  #L46174a.  v4:= v4 - v11 @kind long;
  #L46174c.  v8:= v8 - v11 @kind long;
  #L46174e.  v1:= v10 @kind object;
  #L461750.  goto L461678;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.processors.ReplayProcessor$e` v4 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$e;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4614b0.  v0:= v4.`io.reactivex.processors.ReplayProcessor$e.c` @type ^`io.reactivex.processors.ReplayProcessor$a` @kind object;
  #L4614b4.  v1:= 0I;
  #L4614b6.  v2:= v1 @kind object;
  #L4614b8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4614be.  v3:= temp @kind object;
  #L4614c0.  v3:= (`io.reactivex.processors.ReplayProcessor$a`) v3 @kind object;
  #L4614c4.  if v3 != 0 then goto L4614f4;
  #L4614c8.  v0:= v0.`io.reactivex.processors.ReplayProcessor$a.a` @type ^`java.lang.Object` @kind object;
  #L4614cc.  if v0 != 0 then goto L4614d2;
  #L4614d0.  return v1 @kind object;
  #L4614d2.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4614d8.  v1:= temp;
  #L4614da.  if v1 != 0 then goto L4614ee;
  #L4614de.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4614e4.  v1:= temp;
  #L4614e6.  if v1 == 0 then goto L4614ec;
  #L4614ea.  goto L4614ee;
  #L4614ec.  return v0 @kind object;
  #L4614ee.  v0:= v2.`io.reactivex.processors.ReplayProcessor$a.a` @type ^`java.lang.Object` @kind object;
  #L4614f2.  return v0 @kind object;
  #L4614f4.  v2:= v0 @kind object;
  #L4614f6.  v0:= v3 @kind object;
  #L4614f8.  goto L4614b8;
}
procedure `int` `size`(`io.reactivex.processors.ReplayProcessor$e` v3 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$e;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L461454.  v0:= v3.`io.reactivex.processors.ReplayProcessor$e.c` @type ^`io.reactivex.processors.ReplayProcessor$a` @kind object;
  #L461458.  v1:= 0I;
  #L46145a.  v2:= 2147483647I;
  #L461460.  if v1 == v2 then goto L46149e;
  #L461464.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46146a.  v2:= temp @kind object;
  #L46146c.  v2:= (`io.reactivex.processors.ReplayProcessor$a`) v2 @kind object;
  #L461470.  if v2 != 0 then goto L461496;
  #L461474.  v0:= v0.`io.reactivex.processors.ReplayProcessor$a.a` @type ^`java.lang.Object` @kind object;
  #L461478.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L46147e.  v2:= temp;
  #L461480.  if v2 != 0 then goto L461490;
  #L461484.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L46148a.  v0:= temp;
  #L46148c.  if v0 == 0 then goto L46149e;
  #L461490.  v1:= v1 + -1;
  #L461494.  goto L46149e;
  #L461496.  v1:= v1 + 1;
  #L46149a.  v0:= v2 @kind object;
  #L46149c.  goto L46145a;
  #L46149e.  return v1;
}
