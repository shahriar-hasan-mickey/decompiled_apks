record `io.reactivex.processors.ReplayProcessor$d` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.processors.ReplayProcessor$b` @kind interface {
  `int` `io.reactivex.processors.ReplayProcessor$d.a` @AccessFlag FINAL;
  `long` `io.reactivex.processors.ReplayProcessor$d.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.processors.ReplayProcessor$d.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.processors.ReplayProcessor$d.d` @AccessFlag FINAL;
  `int` `io.reactivex.processors.ReplayProcessor$d.e` @AccessFlag ;
  `io.reactivex.processors.ReplayProcessor$f` `io.reactivex.processors.ReplayProcessor$d.f` @AccessFlag VOLATILE;
  `io.reactivex.processors.ReplayProcessor$f` `io.reactivex.processors.ReplayProcessor$d.g` @AccessFlag ;
  `boolean` `io.reactivex.processors.ReplayProcessor$d.h` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.processors.ReplayProcessor$d.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.processors.ReplayProcessor$d` v1 @kind this, `int` v2 , `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$d;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L461138.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L46113e.  v0:= "maxSize" @kind object;
  #L461142.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L461148.  v2:= temp;
  #L46114a.  v1.`io.reactivex.processors.ReplayProcessor$d.a` @type ^`int` := v2;
  #L46114e.  v2:= "maxAge" @kind object;
  #L461152.  call temp:= `verifyPositive`(v3, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L461158.  v2:= temp @kind wide;
  #L46115a.  v1.`io.reactivex.processors.ReplayProcessor$d.b` @type ^`long` := v2 @kind wide;
  #L46115e.  v2:= "unit is null" @kind object;
  #L461162.  call temp:= `requireNonNull`(v5, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L461168.  v2:= temp @kind object;
  #L46116a.  v2:= (`java.util.concurrent.TimeUnit`) v2 @kind object;
  #L46116e.  v1.`io.reactivex.processors.ReplayProcessor$d.c` @type ^`java.util.concurrent.TimeUnit` := v2 @kind object;
  #L461172.  v2:= "scheduler is null" @kind object;
  #L461176.  call temp:= `requireNonNull`(v6, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L46117c.  v2:= temp @kind object;
  #L46117e.  v2:= (`io.reactivex.Scheduler`) v2 @kind object;
  #L461182.  v1.`io.reactivex.processors.ReplayProcessor$d.d` @type ^`io.reactivex.Scheduler` := v2 @kind object;
  #L461186.  v2:= new `io.reactivex.processors.ReplayProcessor$f`;
  #L46118a.  v3:= 0I;
  #L46118c.  v4:= 0L;
  #L461190.  call `<init>`(v2, v3, v4) @signature `Lio/reactivex/processors/ReplayProcessor$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L461196.  v1.`io.reactivex.processors.ReplayProcessor$d.g` @type ^`io.reactivex.processors.ReplayProcessor$f` := v2 @kind object;
  #L46119a.  v1.`io.reactivex.processors.ReplayProcessor$d.f` @type ^`io.reactivex.processors.ReplayProcessor$f` := v2 @kind object;
  #L46119e.  return @kind void;
}
procedure `io.reactivex.processors.ReplayProcessor$f` `a`(`io.reactivex.processors.ReplayProcessor$d` v8 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$d;.a:()Lio/reactivex/processors/ReplayProcessor$f;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L460ffc.  v0:= v8.`io.reactivex.processors.ReplayProcessor$d.f` @type ^`io.reactivex.processors.ReplayProcessor$f` @kind object;
  #L461000.  v1:= v8.`io.reactivex.processors.ReplayProcessor$d.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L461004.  v2:= v8.`io.reactivex.processors.ReplayProcessor$d.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L461008.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L46100e.  v1:= temp @kind wide;
  #L461010.  v3:= v8.`io.reactivex.processors.ReplayProcessor$d.b` @type ^`long` @kind wide;
  #L461014.  v1:= v1 - v3 @kind long;
  #L461016.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46101c.  v3:= temp @kind object;
  #L46101e.  v3:= (`io.reactivex.processors.ReplayProcessor$f`) v3 @kind object;
  #L461022.  v7:= v3 @kind object;
  #L461024.  v3:= v0 @kind object;
  #L461026.  v0:= v7 @kind object;
  #L461028.  if v0 == 0 then goto L461048;
  #L46102c.  v4:= v0.`io.reactivex.processors.ReplayProcessor$f.b` @type ^`long` @kind wide;
  #L461030.  v6:= lcmp(v4, v1);
  #L461034.  if v6 <= 0 then goto L46103a;
  #L461038.  goto L461048;
  #L46103a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L461040.  v3:= temp @kind object;
  #L461042.  v3:= (`io.reactivex.processors.ReplayProcessor$f`) v3 @kind object;
  #L461046.  goto L461022;
  #L461048.  return v3 @kind object;
}
procedure `void` `add`(`io.reactivex.processors.ReplayProcessor$d` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$d;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4611b0.  v0:= new `io.reactivex.processors.ReplayProcessor$f`;
  #L4611b4.  v1:= v3.`io.reactivex.processors.ReplayProcessor$d.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L4611b8.  v2:= v3.`io.reactivex.processors.ReplayProcessor$d.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4611bc.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4611c2.  v1:= temp @kind wide;
  #L4611c4.  call `<init>`(v0, v4, v1) @signature `Lio/reactivex/processors/ReplayProcessor$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L4611ca.  v4:= v3.`io.reactivex.processors.ReplayProcessor$d.g` @type ^`io.reactivex.processors.ReplayProcessor$f` @kind object;
  #L4611ce.  v3.`io.reactivex.processors.ReplayProcessor$d.g` @type ^`io.reactivex.processors.ReplayProcessor$f` := v0 @kind object;
  #L4611d2.  v1:= v3.`io.reactivex.processors.ReplayProcessor$d.e` @type ^`int`;
  #L4611d6.  v1:= v1 + 1;
  #L4611da.  v3.`io.reactivex.processors.ReplayProcessor$d.e` @type ^`int` := v1;
  #L4611de.  call `set`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4611e4.  call `f`(v3) @signature `Lio/reactivex/processors/ReplayProcessor$d;.f:()V` @kind virtual;
  #L4611ea.  return @kind void;
}
procedure `int` `b`(`io.reactivex.processors.ReplayProcessor$d` v2 @kind this, `io.reactivex.processors.ReplayProcessor$f` v3 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$d;.b:(Lio/reactivex/processors/ReplayProcessor$f;)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L460fa4.  v0:= 0I;
  #L460fa6.  v1:= 2147483647I;
  #L460fac.  if v0 == v1 then goto L460fea;
  #L460fb0.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L460fb6.  v1:= temp @kind object;
  #L460fb8.  v1:= (`io.reactivex.processors.ReplayProcessor$f`) v1 @kind object;
  #L460fbc.  if v1 != 0 then goto L460fe2;
  #L460fc0.  v3:= v3.`io.reactivex.processors.ReplayProcessor$f.a` @type ^`java.lang.Object` @kind object;
  #L460fc4.  call temp:= `isComplete`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L460fca.  v1:= temp;
  #L460fcc.  if v1 != 0 then goto L460fdc;
  #L460fd0.  call temp:= `isError`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L460fd6.  v3:= temp;
  #L460fd8.  if v3 == 0 then goto L460fea;
  #L460fdc.  v0:= v0 + -1;
  #L460fe0.  goto L460fea;
  #L460fe2.  v0:= v0 + 1;
  #L460fe6.  v3:= v1 @kind object;
  #L460fe8.  goto L460fa6;
  #L460fea.  return v0;
}
procedure `java.lang.Object`[] `c`(`io.reactivex.processors.ReplayProcessor$d` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$d;.c:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4610b8.  call temp:= `a`(v5) @signature `Lio/reactivex/processors/ReplayProcessor$d;.a:()Lio/reactivex/processors/ReplayProcessor$f;` @kind virtual;
  #L4610be.  v0:= temp @kind object;
  #L4610c0.  call temp:= `b`(v5, v0) @signature `Lio/reactivex/processors/ReplayProcessor$d;.b:(Lio/reactivex/processors/ReplayProcessor$f;)I` @kind virtual;
  #L4610c6.  v1:= temp;
  #L4610c8.  v2:= 0I;
  #L4610ca.  v3:= 0I;
  #L4610cc.  if v1 != 0 then goto L4610dc;
  #L4610d0.  v0:= length @variable v6;
  #L4610d2.  if v0 == 0 then goto L461126;
  #L4610d6.  v6[v3]:= v2 @kind object;
  #L4610da.  goto L461126;
  #L4610dc.  v4:= length @variable v6;
  #L4610de.  if v4 >= v1 then goto L4610fe;
  #L4610e2.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4610e8.  v6:= temp @kind object;
  #L4610ea.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L4610f0.  v6:= temp @kind object;
  #L4610f2.  call temp:= `newInstance`(v6, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L4610f8.  v6:= temp @kind object;
  #L4610fa.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L4610fe.  if v3 == v1 then goto L46111c;
  #L461102.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L461108.  v0:= temp @kind object;
  #L46110a.  v0:= (`io.reactivex.processors.ReplayProcessor$f`) v0 @kind object;
  #L46110e.  v4:= v0.`io.reactivex.processors.ReplayProcessor$f.a` @type ^`java.lang.Object` @kind object;
  #L461112.  v6[v3]:= v4 @kind object;
  #L461116.  v3:= v3 + 1;
  #L46111a.  goto L4610fe;
  #L46111c.  v0:= length @variable v6;
  #L46111e.  if v0 <= v1 then goto L461126;
  #L461122.  v6[v1]:= v2 @kind object;
  #L461126.  return v6 @kind object;
}
procedure `void` `d`(`io.reactivex.processors.ReplayProcessor$d` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$d;.d:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4611fc.  call `lazySet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L461202.  v0:= new `io.reactivex.processors.ReplayProcessor$f`;
  #L461206.  v1:= 9223372036854775807L;
  #L461210.  call `<init>`(v0, v4, v1) @signature `Lio/reactivex/processors/ReplayProcessor$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L461216.  v4:= v3.`io.reactivex.processors.ReplayProcessor$d.g` @type ^`io.reactivex.processors.ReplayProcessor$f` @kind object;
  #L46121a.  v3.`io.reactivex.processors.ReplayProcessor$d.g` @type ^`io.reactivex.processors.ReplayProcessor$f` := v0 @kind object;
  #L46121e.  v1:= v3.`io.reactivex.processors.ReplayProcessor$d.e` @type ^`int`;
  #L461222.  v2:= 1I;
  #L461224.  v1:= v1 + v2 @kind int;
  #L461226.  v3.`io.reactivex.processors.ReplayProcessor$d.e` @type ^`int` := v1;
  #L46122a.  call `set`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L461230.  call `g`(v3) @signature `Lio/reactivex/processors/ReplayProcessor$d;.g:()V` @kind virtual;
  #L461236.  v3.`io.reactivex.processors.ReplayProcessor$d.h` @type ^`boolean` := v2 @kind boolean;
  #L46123a.  return @kind void;
}
procedure `void` `e`(`io.reactivex.processors.ReplayProcessor$d` v14 @kind this, `io.reactivex.processors.ReplayProcessor$c` v15 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$d;.e:(Lio/reactivex/processors/ReplayProcessor$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L46124c.  call temp:= `getAndIncrement`(v15) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L461252.  v0:= temp;
  #L461254.  if v0 == 0 then goto L46125a;
  #L461258.  return @kind void;
  #L46125a.  v0:= v15.`io.reactivex.processors.ReplayProcessor$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L46125e.  v1:= v15.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` @kind object;
  #L461262.  v1:= (`io.reactivex.processors.ReplayProcessor$f`) v1 @kind object;
  #L461266.  v2:= 1I;
  #L461268.  if v1 != 0 then goto L461274;
  #L46126c.  call temp:= `a`(v14) @signature `Lio/reactivex/processors/ReplayProcessor$d;.a:()Lio/reactivex/processors/ReplayProcessor$f;` @kind virtual;
  #L461272.  v1:= temp @kind object;
  #L461274.  v3:= 1I;
  #L461276.  v4:= v15.`io.reactivex.processors.ReplayProcessor$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L46127a.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L461280.  v4:= temp @kind wide;
  #L461282.  v6:= 0L;
  #L461286.  v8:= v6 @kind wide;
  #L461288.  v10:= v15.`io.reactivex.processors.ReplayProcessor$c.e` @type ^`boolean` @kind boolean;
  #L46128c.  v11:= 0I;
  #L46128e.  if v10 == 0 then goto L461298;
  #L461292.  v15.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v11 @kind object;
  #L461296.  return @kind void;
  #L461298.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46129e.  v10:= temp @kind object;
  #L4612a0.  v10:= (`io.reactivex.processors.ReplayProcessor$f`) v10 @kind object;
  #L4612a4.  if v10 != 0 then goto L4612aa;
  #L4612a8.  goto L46130c;
  #L4612aa.  v12:= v10.`io.reactivex.processors.ReplayProcessor$f.a` @type ^`java.lang.Object` @kind object;
  #L4612ae.  v13:= v14.`io.reactivex.processors.ReplayProcessor$d.h` @type ^`boolean` @kind boolean;
  #L4612b2.  if v13 == 0 then goto L4612ee;
  #L4612b6.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4612bc.  v13:= temp @kind object;
  #L4612be.  if v13 != 0 then goto L4612ee;
  #L4612c2.  call temp:= `isComplete`(v12) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4612c8.  v1:= temp;
  #L4612ca.  if v1 == 0 then goto L4612d6;
  #L4612ce.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4612d4.  goto L4612e4;
  #L4612d6.  call temp:= `getError`(v12) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L4612dc.  v1:= temp @kind object;
  #L4612de.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4612e4.  v15.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v11 @kind object;
  #L4612e8.  v15.`io.reactivex.processors.ReplayProcessor$c.e` @type ^`boolean` := v2 @kind boolean;
  #L4612ec.  return @kind void;
  #L4612ee.  v11:= lcmp(v4, v6);
  #L4612f2.  if v11 != 0 then goto L461350;
  #L4612f6.  v4:= v15.`io.reactivex.processors.ReplayProcessor$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4612fa.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L461300.  v4:= temp @kind wide;
  #L461302.  v4:= v4 + v8 @kind long;
  #L461304.  v11:= lcmp(v4, v6);
  #L461308.  if v11 != 0 then goto L461350;
  #L46130c.  v4:= lcmp(v8, v6);
  #L461310.  if v4 == 0 then goto L46133c;
  #L461314.  v4:= v15.`io.reactivex.processors.ReplayProcessor$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L461318.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L46131e.  v4:= temp @kind wide;
  #L461320.  v6:= 9223372036854775807L;
  #L46132a.  v10:= lcmp(v4, v6);
  #L46132e.  if v10 == 0 then goto L46133c;
  #L461332.  v4:= v15.`io.reactivex.processors.ReplayProcessor$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L461336.  call temp:= `addAndGet`(v4, v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L46133c.  v15.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v1 @kind object;
  #L461340.  v3:= -v3 @kind int;
  #L461342.  call temp:= `addAndGet`(v15, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L461348.  v3:= temp;
  #L46134a.  if v3 != 0 then goto L461276;
  #L46134e.  return @kind void;
  #L461350.  call `onNext`(v0, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L461356.  v11:= 1L;
  #L46135a.  v4:= v4 - v11 @kind long;
  #L46135c.  v8:= v8 - v11 @kind long;
  #L46135e.  v1:= v10 @kind object;
  #L461360.  goto L461288;
}
procedure `void` `f`(`io.reactivex.processors.ReplayProcessor$d` v7 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$d;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L461374.  v0:= v7.`io.reactivex.processors.ReplayProcessor$d.e` @type ^`int`;
  #L461378.  v1:= v7.`io.reactivex.processors.ReplayProcessor$d.a` @type ^`int`;
  #L46137c.  if v0 <= v1 then goto L46139c;
  #L461380.  v0:= v0 + -1;
  #L461384.  v7.`io.reactivex.processors.ReplayProcessor$d.e` @type ^`int` := v0;
  #L461388.  v0:= v7.`io.reactivex.processors.ReplayProcessor$d.f` @type ^`io.reactivex.processors.ReplayProcessor$f` @kind object;
  #L46138c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L461392.  v0:= temp @kind object;
  #L461394.  v0:= (`io.reactivex.processors.ReplayProcessor$f`) v0 @kind object;
  #L461398.  v7.`io.reactivex.processors.ReplayProcessor$d.f` @type ^`io.reactivex.processors.ReplayProcessor$f` := v0 @kind object;
  #L46139c.  v0:= v7.`io.reactivex.processors.ReplayProcessor$d.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L4613a0.  v1:= v7.`io.reactivex.processors.ReplayProcessor$d.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4613a4.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4613aa.  v0:= temp @kind wide;
  #L4613ac.  v2:= v7.`io.reactivex.processors.ReplayProcessor$d.b` @type ^`long` @kind wide;
  #L4613b0.  v0:= v0 - v2 @kind long;
  #L4613b2.  v2:= v7.`io.reactivex.processors.ReplayProcessor$d.f` @type ^`io.reactivex.processors.ReplayProcessor$f` @kind object;
  #L4613b6.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4613bc.  v3:= temp @kind object;
  #L4613be.  v3:= (`io.reactivex.processors.ReplayProcessor$f`) v3 @kind object;
  #L4613c2.  if v3 != 0 then goto L4613cc;
  #L4613c6.  v7.`io.reactivex.processors.ReplayProcessor$d.f` @type ^`io.reactivex.processors.ReplayProcessor$f` := v2 @kind object;
  #L4613ca.  goto L4613dc;
  #L4613cc.  v4:= v3.`io.reactivex.processors.ReplayProcessor$f.b` @type ^`long` @kind wide;
  #L4613d0.  v6:= lcmp(v4, v0);
  #L4613d4.  if v6 <= 0 then goto L4613de;
  #L4613d8.  v7.`io.reactivex.processors.ReplayProcessor$d.f` @type ^`io.reactivex.processors.ReplayProcessor$f` := v2 @kind object;
  #L4613dc.  return @kind void;
  #L4613de.  v2:= v3 @kind object;
  #L4613e0.  goto L4613b6;
}
procedure `void` `g`(`io.reactivex.processors.ReplayProcessor$d` v7 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$d;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4613f4.  v0:= v7.`io.reactivex.processors.ReplayProcessor$d.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L4613f8.  v1:= v7.`io.reactivex.processors.ReplayProcessor$d.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4613fc.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L461402.  v0:= temp @kind wide;
  #L461404.  v2:= v7.`io.reactivex.processors.ReplayProcessor$d.b` @type ^`long` @kind wide;
  #L461408.  v0:= v0 - v2 @kind long;
  #L46140a.  v2:= v7.`io.reactivex.processors.ReplayProcessor$d.f` @type ^`io.reactivex.processors.ReplayProcessor$f` @kind object;
  #L46140e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L461414.  v3:= temp @kind object;
  #L461416.  v3:= (`io.reactivex.processors.ReplayProcessor$f`) v3 @kind object;
  #L46141a.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L461420.  v4:= temp @kind object;
  #L461422.  if v4 != 0 then goto L46142c;
  #L461426.  v7.`io.reactivex.processors.ReplayProcessor$d.f` @type ^`io.reactivex.processors.ReplayProcessor$f` := v2 @kind object;
  #L46142a.  goto L46143c;
  #L46142c.  v4:= v3.`io.reactivex.processors.ReplayProcessor$f.b` @type ^`long` @kind wide;
  #L461430.  v6:= lcmp(v4, v0);
  #L461434.  if v6 <= 0 then goto L46143e;
  #L461438.  v7.`io.reactivex.processors.ReplayProcessor$d.f` @type ^`io.reactivex.processors.ReplayProcessor$f` := v2 @kind object;
  #L46143c.  return @kind void;
  #L46143e.  v2:= v3 @kind object;
  #L461440.  goto L46140e;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.processors.ReplayProcessor$d` v4 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$d;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L46105c.  v0:= v4.`io.reactivex.processors.ReplayProcessor$d.f` @type ^`io.reactivex.processors.ReplayProcessor$f` @kind object;
  #L461060.  v1:= 0I;
  #L461062.  v2:= v1 @kind object;
  #L461064.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46106a.  v3:= temp @kind object;
  #L46106c.  v3:= (`io.reactivex.processors.ReplayProcessor$f`) v3 @kind object;
  #L461070.  if v3 != 0 then goto L4610a0;
  #L461074.  v0:= v0.`io.reactivex.processors.ReplayProcessor$f.a` @type ^`java.lang.Object` @kind object;
  #L461078.  if v0 != 0 then goto L46107e;
  #L46107c.  return v1 @kind object;
  #L46107e.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L461084.  v1:= temp;
  #L461086.  if v1 != 0 then goto L46109a;
  #L46108a.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L461090.  v1:= temp;
  #L461092.  if v1 == 0 then goto L461098;
  #L461096.  goto L46109a;
  #L461098.  return v0 @kind object;
  #L46109a.  v0:= v2.`io.reactivex.processors.ReplayProcessor$f.a` @type ^`java.lang.Object` @kind object;
  #L46109e.  return v0 @kind object;
  #L4610a0.  v2:= v0 @kind object;
  #L4610a2.  v0:= v3 @kind object;
  #L4610a4.  goto L461064;
}
procedure `int` `size`(`io.reactivex.processors.ReplayProcessor$d` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$d;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L460f80.  call temp:= `a`(v1) @signature `Lio/reactivex/processors/ReplayProcessor$d;.a:()Lio/reactivex/processors/ReplayProcessor$f;` @kind virtual;
  #L460f86.  v0:= temp @kind object;
  #L460f88.  call temp:= `b`(v1, v0) @signature `Lio/reactivex/processors/ReplayProcessor$d;.b:(Lio/reactivex/processors/ReplayProcessor$f;)I` @kind virtual;
  #L460f8e.  v0:= temp;
  #L460f90.  return v0;
}
