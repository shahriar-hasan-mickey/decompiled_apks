record `io.reactivex.processors.ReplayProcessor` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.processors.FlowableProcessor` @kind class {
  `io.reactivex.processors.ReplayProcessor$b` `io.reactivex.processors.ReplayProcessor.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.processors.ReplayProcessor.c` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.processors.ReplayProcessor.d` @AccessFlag FINAL;
}
global `java.lang.Object`[] `@@io.reactivex.processors.ReplayProcessor.e` @AccessFlag PRIVATE_STATIC_FINAL;
global `io.reactivex.processors.ReplayProcessor$c`[] `@@io.reactivex.processors.ReplayProcessor.f` @AccessFlag STATIC_FINAL;
global `io.reactivex.processors.ReplayProcessor$c`[] `@@io.reactivex.processors.ReplayProcessor.g` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/processors/ReplayProcessor;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L461da0.  v0:= 0I;
  #L461da2.  v1:= new `java.lang.Object`[v0];
  #L461da6.  `@@io.reactivex.processors.ReplayProcessor.e` @type ^`java.lang.Object`[] := v1 @kind object;
  #L461daa.  v1:= new `io.reactivex.processors.ReplayProcessor$c`[v0];
  #L461dae.  `@@io.reactivex.processors.ReplayProcessor.f` @type ^`io.reactivex.processors.ReplayProcessor$c`[] := v1 @kind object;
  #L461db2.  v0:= new `io.reactivex.processors.ReplayProcessor$c`[v0];
  #L461db6.  `@@io.reactivex.processors.ReplayProcessor.g` @type ^`io.reactivex.processors.ReplayProcessor$c`[] := v0 @kind object;
  #L461dba.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.processors.ReplayProcessor` v1 @kind this, `io.reactivex.processors.ReplayProcessor$b` v2 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor;.<init>:(Lio/reactivex/processors/ReplayProcessor$b;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L461dcc.  call `<init>`(v1) @signature `Lio/reactivex/processors/FlowableProcessor;.<init>:()V` @kind direct;
  #L461dd2.  v1.`io.reactivex.processors.ReplayProcessor.b` @type ^`io.reactivex.processors.ReplayProcessor$b` := v2 @kind object;
  #L461dd6.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L461dda.  v0:= `@@io.reactivex.processors.ReplayProcessor.f` @type ^`io.reactivex.processors.ReplayProcessor$c`[] @kind object;
  #L461dde.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L461de4.  v1.`io.reactivex.processors.ReplayProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L461de8.  return @kind void;
}
procedure `io.reactivex.processors.ReplayProcessor` `create`() @signature `Lio/reactivex/processors/ReplayProcessor;.create:()Lio/reactivex/processors/ReplayProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L461c1c.  v0:= new `io.reactivex.processors.ReplayProcessor`;
  #L461c20.  v1:= new `io.reactivex.processors.ReplayProcessor$g`;
  #L461c24.  v2:= 16I;
  #L461c28.  call `<init>`(v1, v2) @signature `Lio/reactivex/processors/ReplayProcessor$g;.<init>:(I)V` @kind direct;
  #L461c2e.  call `<init>`(v0, v1) @signature `Lio/reactivex/processors/ReplayProcessor;.<init>:(Lio/reactivex/processors/ReplayProcessor$b;)V` @kind direct;
  #L461c34.  return v0 @kind object;
}
procedure `io.reactivex.processors.ReplayProcessor` `create`(`int` v2 ) @signature `Lio/reactivex/processors/ReplayProcessor;.create:(I)Lio/reactivex/processors/ReplayProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L461c48.  v0:= new `io.reactivex.processors.ReplayProcessor`;
  #L461c4c.  v1:= new `io.reactivex.processors.ReplayProcessor$g`;
  #L461c50.  call `<init>`(v1, v2) @signature `Lio/reactivex/processors/ReplayProcessor$g;.<init>:(I)V` @kind direct;
  #L461c56.  call `<init>`(v0, v1) @signature `Lio/reactivex/processors/ReplayProcessor;.<init>:(Lio/reactivex/processors/ReplayProcessor$b;)V` @kind direct;
  #L461c5c.  return v0 @kind object;
}
procedure `io.reactivex.processors.ReplayProcessor` `createWithSize`(`int` v2 ) @signature `Lio/reactivex/processors/ReplayProcessor;.createWithSize:(I)Lio/reactivex/processors/ReplayProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L461c70.  v0:= new `io.reactivex.processors.ReplayProcessor`;
  #L461c74.  v1:= new `io.reactivex.processors.ReplayProcessor$e`;
  #L461c78.  call `<init>`(v1, v2) @signature `Lio/reactivex/processors/ReplayProcessor$e;.<init>:(I)V` @kind direct;
  #L461c7e.  call `<init>`(v0, v1) @signature `Lio/reactivex/processors/ReplayProcessor;.<init>:(Lio/reactivex/processors/ReplayProcessor$b;)V` @kind direct;
  #L461c84.  return v0 @kind object;
}
procedure `io.reactivex.processors.ReplayProcessor` `createWithTime`(`long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor;.createWithTime:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/processors/ReplayProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L461c98.  v0:= new `io.reactivex.processors.ReplayProcessor`;
  #L461c9c.  v7:= new `io.reactivex.processors.ReplayProcessor$d`;
  #L461ca0.  v2:= 2147483647I;
  #L461ca6.  v1:= v7 @kind object;
  #L461ca8.  v3:= v8 @kind wide;
  #L461caa.  v5:= v10 @kind object;
  #L461cac.  v6:= v11 @kind object;
  #L461cae.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/processors/ReplayProcessor$d;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L461cb4.  call `<init>`(v0, v7) @signature `Lio/reactivex/processors/ReplayProcessor;.<init>:(Lio/reactivex/processors/ReplayProcessor$b;)V` @kind direct;
  #L461cba.  return v0 @kind object;
}
procedure `io.reactivex.processors.ReplayProcessor` `createWithTimeAndSize`(`long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object, `int` v12 ) @signature `Lio/reactivex/processors/ReplayProcessor;.createWithTimeAndSize:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/processors/ReplayProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L461ccc.  v0:= new `io.reactivex.processors.ReplayProcessor`;
  #L461cd0.  v7:= new `io.reactivex.processors.ReplayProcessor$d`;
  #L461cd4.  v1:= v7 @kind object;
  #L461cd6.  v2:= v12;
  #L461cd8.  v3:= v8 @kind wide;
  #L461cda.  v5:= v10 @kind object;
  #L461cdc.  v6:= v11 @kind object;
  #L461cde.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/processors/ReplayProcessor$d;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L461ce4.  call `<init>`(v0, v7) @signature `Lio/reactivex/processors/ReplayProcessor;.<init>:(Lio/reactivex/processors/ReplayProcessor$b;)V` @kind direct;
  #L461cea.  return v0 @kind object;
}
procedure `boolean` `e`(`io.reactivex.processors.ReplayProcessor` v4 @kind this, `io.reactivex.processors.ReplayProcessor$c` v5 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor;.e:(Lio/reactivex/processors/ReplayProcessor$c;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L461b20.  v0:= v4.`io.reactivex.processors.ReplayProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L461b24.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L461b2a.  v0:= temp @kind object;
  #L461b2c.  v0:= (`io.reactivex.processors.ReplayProcessor$c`[]) v0 @kind object;
  #L461b30.  v1:= `@@io.reactivex.processors.ReplayProcessor.g` @type ^`io.reactivex.processors.ReplayProcessor$c`[] @kind object;
  #L461b34.  v2:= 0I;
  #L461b36.  if v0 != v1 then goto L461b3c;
  #L461b3a.  return v2;
  #L461b3c.  v1:= length @variable v0;
  #L461b3e.  v3:= v1 + 1;
  #L461b42.  v3:= new `io.reactivex.processors.ReplayProcessor$c`[v3];
  #L461b46.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L461b4c.  v3[v1]:= v5 @kind object;
  #L461b50.  v1:= v4.`io.reactivex.processors.ReplayProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L461b54.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L461b5a.  v0:= temp;
  #L461b5c.  if v0 == 0 then goto L461b20;
  #L461b60.  v5:= 1I;
  #L461b62.  return v5;
}
procedure `void` `f`(`io.reactivex.processors.ReplayProcessor` v6 @kind this, `io.reactivex.processors.ReplayProcessor$c` v7 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor;.f:(Lio/reactivex/processors/ReplayProcessor$c;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L461f70.  v0:= v6.`io.reactivex.processors.ReplayProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L461f74.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L461f7a.  v0:= temp @kind object;
  #L461f7c.  v0:= (`io.reactivex.processors.ReplayProcessor$c`[]) v0 @kind object;
  #L461f80.  v1:= `@@io.reactivex.processors.ReplayProcessor.g` @type ^`io.reactivex.processors.ReplayProcessor$c`[] @kind object;
  #L461f84.  if v0 == v1 then goto L461ff0;
  #L461f88.  v1:= `@@io.reactivex.processors.ReplayProcessor.f` @type ^`io.reactivex.processors.ReplayProcessor$c`[] @kind object;
  #L461f8c.  if v0 != v1 then goto L461f92;
  #L461f90.  goto L461ff0;
  #L461f92.  v1:= length @variable v0;
  #L461f94.  v2:= -1I;
  #L461f96.  v3:= 0I;
  #L461f98.  v4:= 0I;
  #L461f9a.  if v4 >= v1 then goto L461fb0;
  #L461f9e.  v5:= v0[v4] @kind object;
  #L461fa2.  if v5 != v7 then goto L461faa;
  #L461fa6.  v2:= v4;
  #L461fa8.  goto L461fb0;
  #L461faa.  v4:= v4 + 1;
  #L461fae.  goto L461f9a;
  #L461fb0.  if v2 >= 0 then goto L461fb6;
  #L461fb4.  return @kind void;
  #L461fb6.  v4:= 1I;
  #L461fb8.  if v1 != v4 then goto L461fc2;
  #L461fbc.  v1:= `@@io.reactivex.processors.ReplayProcessor.f` @type ^`io.reactivex.processors.ReplayProcessor$c`[] @kind object;
  #L461fc0.  goto L461fe0;
  #L461fc2.  v5:= v1 + -1;
  #L461fc6.  v5:= new `io.reactivex.processors.ReplayProcessor$c`[v5];
  #L461fca.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L461fd0.  v3:= v2 + 1;
  #L461fd4.  v1:= v1 - v2 @kind int;
  #L461fd6.  v1:= v1 - v4 @kind int;
  #L461fd8.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L461fde.  v1:= v5 @kind object;
  #L461fe0.  v2:= v6.`io.reactivex.processors.ReplayProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L461fe4.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L461fea.  v0:= temp;
  #L461fec.  if v0 == 0 then goto L461f70;
  #L461ff0.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.processors.ReplayProcessor` v2 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L461d68.  v0:= v2.`io.reactivex.processors.ReplayProcessor.b` @type ^`io.reactivex.processors.ReplayProcessor$b` @kind object;
  #L461d6c.  call temp:= `get`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$b;.get:()Ljava/lang/Object;` @kind interface;
  #L461d72.  v0:= temp @kind object;
  #L461d74.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L461d7a.  v1:= temp;
  #L461d7c.  if v1 == 0 then goto L461d8a;
  #L461d80.  call temp:= `getError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L461d86.  v0:= temp @kind object;
  #L461d88.  return v0 @kind object;
  #L461d8a.  v0:= 0I;
  #L461d8c.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.processors.ReplayProcessor` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461cfc.  v0:= v1.`io.reactivex.processors.ReplayProcessor.b` @type ^`io.reactivex.processors.ReplayProcessor$b` @kind object;
  #L461d00.  call temp:= `getValue`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$b;.getValue:()Ljava/lang/Object;` @kind interface;
  #L461d06.  v0:= temp @kind object;
  #L461d08.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.processors.ReplayProcessor` v2 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor;.getValues:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L461d1c.  v0:= `@@io.reactivex.processors.ReplayProcessor.e` @type ^`java.lang.Object`[] @kind object;
  #L461d20.  call temp:= `getValues`(v2, v0) @signature `Lio/reactivex/processors/ReplayProcessor;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L461d26.  v1:= temp @kind object;
  #L461d28.  if v1 != v0 then goto L461d34;
  #L461d2c.  v0:= 0I;
  #L461d2e.  v0:= new `java.lang.Object`[v0];
  #L461d32.  return v0 @kind object;
  #L461d34.  return v1 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.processors.ReplayProcessor` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461d48.  v0:= v1.`io.reactivex.processors.ReplayProcessor.b` @type ^`io.reactivex.processors.ReplayProcessor$b` @kind object;
  #L461d4c.  call temp:= `c`(v0, v2) @signature `Lio/reactivex/processors/ReplayProcessor$b;.c:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L461d52.  v2:= temp @kind object;
  #L461d54.  return v2 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.processors.ReplayProcessor` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461b74.  v0:= v1.`io.reactivex.processors.ReplayProcessor.b` @type ^`io.reactivex.processors.ReplayProcessor$b` @kind object;
  #L461b78.  call temp:= `get`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$b;.get:()Ljava/lang/Object;` @kind interface;
  #L461b7e.  v0:= temp @kind object;
  #L461b80.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L461b86.  v0:= temp;
  #L461b88.  return v0;
}
procedure `boolean` `hasSubscribers`(`io.reactivex.processors.ReplayProcessor` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor;.hasSubscribers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461b9c.  v0:= v1.`io.reactivex.processors.ReplayProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L461ba0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L461ba6.  v0:= temp @kind object;
  #L461ba8.  v0:= (`io.reactivex.processors.ReplayProcessor$c`[]) v0 @kind object;
  #L461bac.  v0:= length @variable v0;
  #L461bae.  if v0 == 0 then goto L461bb6;
  #L461bb2.  v0:= 1I;
  #L461bb4.  goto L461bb8;
  #L461bb6.  v0:= 0I;
  #L461bb8.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.processors.ReplayProcessor` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461bcc.  v0:= v1.`io.reactivex.processors.ReplayProcessor.b` @type ^`io.reactivex.processors.ReplayProcessor$b` @kind object;
  #L461bd0.  call temp:= `get`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$b;.get:()Ljava/lang/Object;` @kind interface;
  #L461bd6.  v0:= temp @kind object;
  #L461bd8.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L461bde.  v0:= temp;
  #L461be0.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.processors.ReplayProcessor` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461bf4.  v0:= v1.`io.reactivex.processors.ReplayProcessor.b` @type ^`io.reactivex.processors.ReplayProcessor$b` @kind object;
  #L461bf8.  call temp:= `size`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$b;.size:()I` @kind interface;
  #L461bfe.  v0:= temp;
  #L461c00.  if v0 == 0 then goto L461c08;
  #L461c04.  v0:= 1I;
  #L461c06.  goto L461c0a;
  #L461c08.  v0:= 0I;
  #L461c0a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.processors.ReplayProcessor` v5 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L461dfc.  v0:= v5.`io.reactivex.processors.ReplayProcessor.c` @type ^`boolean` @kind boolean;
  #L461e00.  if v0 == 0 then goto L461e06;
  #L461e04.  return @kind void;
  #L461e06.  v0:= 1I;
  #L461e08.  v5.`io.reactivex.processors.ReplayProcessor.c` @type ^`boolean` := v0 @kind boolean;
  #L461e0c.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L461e12.  v0:= temp @kind object;
  #L461e14.  v1:= v5.`io.reactivex.processors.ReplayProcessor.b` @type ^`io.reactivex.processors.ReplayProcessor$b` @kind object;
  #L461e18.  call `d`(v1, v0) @signature `Lio/reactivex/processors/ReplayProcessor$b;.d:(Ljava/lang/Object;)V` @kind interface;
  #L461e1e.  v0:= v5.`io.reactivex.processors.ReplayProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L461e22.  v2:= `@@io.reactivex.processors.ReplayProcessor.g` @type ^`io.reactivex.processors.ReplayProcessor$c`[] @kind object;
  #L461e26.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L461e2c.  v0:= temp @kind object;
  #L461e2e.  v0:= (`io.reactivex.processors.ReplayProcessor$c`[]) v0 @kind object;
  #L461e32.  v2:= length @variable v0;
  #L461e34.  v3:= 0I;
  #L461e36.  if v3 >= v2 then goto L461e4a;
  #L461e3a.  v4:= v0[v3] @kind object;
  #L461e3e.  call `e`(v1, v4) @signature `Lio/reactivex/processors/ReplayProcessor$b;.e:(Lio/reactivex/processors/ReplayProcessor$c;)V` @kind interface;
  #L461e44.  v3:= v3 + 1;
  #L461e48.  goto L461e36;
  #L461e4a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.processors.ReplayProcessor` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L461e5c.  if v5 != 0 then goto L461e6e;
  #L461e60.  v5:= new `java.lang.NullPointerException`;
  #L461e64.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L461e68.  call `<init>`(v5, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L461e6e.  v0:= v4.`io.reactivex.processors.ReplayProcessor.c` @type ^`boolean` @kind boolean;
  #L461e72.  if v0 == 0 then goto L461e7e;
  #L461e76.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L461e7c.  return @kind void;
  #L461e7e.  v0:= 1I;
  #L461e80.  v4.`io.reactivex.processors.ReplayProcessor.c` @type ^`boolean` := v0 @kind boolean;
  #L461e84.  call temp:= `error`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L461e8a.  v5:= temp @kind object;
  #L461e8c.  v0:= v4.`io.reactivex.processors.ReplayProcessor.b` @type ^`io.reactivex.processors.ReplayProcessor$b` @kind object;
  #L461e90.  call `d`(v0, v5) @signature `Lio/reactivex/processors/ReplayProcessor$b;.d:(Ljava/lang/Object;)V` @kind interface;
  #L461e96.  v5:= v4.`io.reactivex.processors.ReplayProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L461e9a.  v1:= `@@io.reactivex.processors.ReplayProcessor.g` @type ^`io.reactivex.processors.ReplayProcessor$c`[] @kind object;
  #L461e9e.  call temp:= `getAndSet`(v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L461ea4.  v5:= temp @kind object;
  #L461ea6.  v5:= (`io.reactivex.processors.ReplayProcessor$c`[]) v5 @kind object;
  #L461eaa.  v1:= length @variable v5;
  #L461eac.  v2:= 0I;
  #L461eae.  if v2 >= v1 then goto L461ec2;
  #L461eb2.  v3:= v5[v2] @kind object;
  #L461eb6.  call `e`(v0, v3) @signature `Lio/reactivex/processors/ReplayProcessor$b;.e:(Lio/reactivex/processors/ReplayProcessor$c;)V` @kind interface;
  #L461ebc.  v2:= v2 + 1;
  #L461ec0.  goto L461eae;
  #L461ec2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.processors.ReplayProcessor` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L461ed4.  if v5 != 0 then goto L461eee;
  #L461ed8.  v5:= new `java.lang.NullPointerException`;
  #L461edc.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L461ee0.  call `<init>`(v5, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L461ee6.  call `onError`(v4, v5) @signature `Lio/reactivex/processors/ReplayProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L461eec.  return @kind void;
  #L461eee.  v0:= v4.`io.reactivex.processors.ReplayProcessor.c` @type ^`boolean` @kind boolean;
  #L461ef2.  if v0 == 0 then goto L461ef8;
  #L461ef6.  return @kind void;
  #L461ef8.  v0:= v4.`io.reactivex.processors.ReplayProcessor.b` @type ^`io.reactivex.processors.ReplayProcessor$b` @kind object;
  #L461efc.  call `add`(v0, v5) @signature `Lio/reactivex/processors/ReplayProcessor$b;.add:(Ljava/lang/Object;)V` @kind interface;
  #L461f02.  v5:= v4.`io.reactivex.processors.ReplayProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L461f06.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L461f0c.  v5:= temp @kind object;
  #L461f0e.  v5:= (`io.reactivex.processors.ReplayProcessor$c`[]) v5 @kind object;
  #L461f12.  v1:= length @variable v5;
  #L461f14.  v2:= 0I;
  #L461f16.  if v2 >= v1 then goto L461f2a;
  #L461f1a.  v3:= v5[v2] @kind object;
  #L461f1e.  call `e`(v0, v3) @signature `Lio/reactivex/processors/ReplayProcessor$b;.e:(Lio/reactivex/processors/ReplayProcessor$c;)V` @kind interface;
  #L461f24.  v2:= v2 + 1;
  #L461f28.  goto L461f16;
  #L461f2a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.processors.ReplayProcessor` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L461f3c.  v0:= v2.`io.reactivex.processors.ReplayProcessor.c` @type ^`boolean` @kind boolean;
  #L461f40.  if v0 == 0 then goto L461f4c;
  #L461f44.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L461f4a.  return @kind void;
  #L461f4c.  v0:= 9223372036854775807L;
  #L461f56.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L461f5c.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.processors.ReplayProcessor` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L462004.  v0:= new `io.reactivex.processors.ReplayProcessor$c`;
  #L462008.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/processors/ReplayProcessor$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/processors/ReplayProcessor;)V` @kind direct;
  #L46200e.  call `onSubscribe`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L462014.  call temp:= `e`(v1, v0) @signature `Lio/reactivex/processors/ReplayProcessor;.e:(Lio/reactivex/processors/ReplayProcessor$c;)Z` @kind virtual;
  #L46201a.  v2:= temp;
  #L46201c.  if v2 == 0 then goto L462030;
  #L462020.  v2:= v0.`io.reactivex.processors.ReplayProcessor$c.e` @type ^`boolean` @kind boolean;
  #L462024.  if v2 == 0 then goto L462030;
  #L462028.  call `f`(v1, v0) @signature `Lio/reactivex/processors/ReplayProcessor;.f:(Lio/reactivex/processors/ReplayProcessor$c;)V` @kind virtual;
  #L46202e.  return @kind void;
  #L462030.  v2:= v1.`io.reactivex.processors.ReplayProcessor.b` @type ^`io.reactivex.processors.ReplayProcessor$b` @kind object;
  #L462034.  call `e`(v2, v0) @signature `Lio/reactivex/processors/ReplayProcessor$b;.e:(Lio/reactivex/processors/ReplayProcessor$c;)V` @kind interface;
  #L46203a.  return @kind void;
}
