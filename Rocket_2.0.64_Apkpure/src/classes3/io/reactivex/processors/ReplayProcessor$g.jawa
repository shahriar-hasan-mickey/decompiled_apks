record `io.reactivex.processors.ReplayProcessor$g` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.processors.ReplayProcessor$b` @kind interface {
  `java.util.List` `io.reactivex.processors.ReplayProcessor$g.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.processors.ReplayProcessor$g.b` @AccessFlag VOLATILE;
  `int` `io.reactivex.processors.ReplayProcessor$g.c` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.processors.ReplayProcessor$g.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.processors.ReplayProcessor$g` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/processors/ReplayProcessor$g;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L461914.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L46191a.  v0:= new `java.util.ArrayList`;
  #L46191e.  v1:= "capacityHint" @kind object;
  #L461922.  call temp:= `verifyPositive`(v3, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L461928.  v3:= temp;
  #L46192a.  call `<init>`(v0, v3) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L461930.  v2.`io.reactivex.processors.ReplayProcessor$g.a` @type ^`java.util.List` := v0 @kind object;
  #L461934.  return @kind void;
}
procedure `void` `add`(`io.reactivex.processors.ReplayProcessor$g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$g;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461948.  v0:= v1.`io.reactivex.processors.ReplayProcessor$g.a` @type ^`java.util.List` @kind object;
  #L46194c.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L461952.  v2:= v1.`io.reactivex.processors.ReplayProcessor$g.c` @type ^`int`;
  #L461956.  v2:= v2 + 1;
  #L46195a.  v1.`io.reactivex.processors.ReplayProcessor$g.c` @type ^`int` := v2;
  #L46195e.  return @kind void;
}
procedure `java.lang.Object`[] `c`(`io.reactivex.processors.ReplayProcessor$g` v6 @kind this, `java.lang.Object`[] v7 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$g;.c:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L46186c.  v0:= v6.`io.reactivex.processors.ReplayProcessor$g.c` @type ^`int`;
  #L461870.  v1:= 0I;
  #L461872.  v2:= 0I;
  #L461874.  if v0 != 0 then goto L461884;
  #L461878.  v0:= length @variable v7;
  #L46187a.  if v0 == 0 then goto L461882;
  #L46187e.  v7[v2]:= v1 @kind object;
  #L461882.  return v7 @kind object;
  #L461884.  v3:= v6.`io.reactivex.processors.ReplayProcessor$g.a` @type ^`java.util.List` @kind object;
  #L461888.  v4:= v0 + -1;
  #L46188c.  call temp:= `get`(v3, v4) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L461892.  v4:= temp @kind object;
  #L461894.  call temp:= `isComplete`(v4) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L46189a.  v5:= temp;
  #L46189c.  if v5 != 0 then goto L4618ac;
  #L4618a0.  call temp:= `isError`(v4) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4618a6.  v4:= temp;
  #L4618a8.  if v4 == 0 then goto L4618c0;
  #L4618ac.  v0:= v0 + -1;
  #L4618b0.  if v0 != 0 then goto L4618c0;
  #L4618b4.  v0:= length @variable v7;
  #L4618b6.  if v0 == 0 then goto L4618be;
  #L4618ba.  v7[v2]:= v1 @kind object;
  #L4618be.  return v7 @kind object;
  #L4618c0.  v4:= length @variable v7;
  #L4618c2.  if v4 >= v0 then goto L4618e2;
  #L4618c6.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4618cc.  v7:= temp @kind object;
  #L4618ce.  call temp:= `getComponentType`(v7) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L4618d4.  v7:= temp @kind object;
  #L4618d6.  call temp:= `newInstance`(v7, v0) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L4618dc.  v7:= temp @kind object;
  #L4618de.  v7:= (`java.lang.Object`[]) v7 @kind object;
  #L4618e2.  if v2 >= v0 then goto L4618f8;
  #L4618e6.  call temp:= `get`(v3, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4618ec.  v4:= temp @kind object;
  #L4618ee.  v7[v2]:= v4 @kind object;
  #L4618f2.  v2:= v2 + 1;
  #L4618f6.  goto L4618e2;
  #L4618f8.  v2:= length @variable v7;
  #L4618fa.  if v2 <= v0 then goto L461902;
  #L4618fe.  v7[v0]:= v1 @kind object;
  #L461902.  return v7 @kind object;
}
procedure `void` `d`(`io.reactivex.processors.ReplayProcessor$g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$g;.d:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461970.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L461976.  v0:= v1.`io.reactivex.processors.ReplayProcessor$g.a` @type ^`java.util.List` @kind object;
  #L46197a.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L461980.  v2:= v1.`io.reactivex.processors.ReplayProcessor$g.c` @type ^`int`;
  #L461984.  v0:= 1I;
  #L461986.  v2:= v2 + v0 @kind int;
  #L461988.  v1.`io.reactivex.processors.ReplayProcessor$g.c` @type ^`int` := v2;
  #L46198c.  v1.`io.reactivex.processors.ReplayProcessor$g.b` @type ^`boolean` := v0 @kind boolean;
  #L461990.  return @kind void;
}
procedure `void` `e`(`io.reactivex.processors.ReplayProcessor$g` v18 @kind this, `io.reactivex.processors.ReplayProcessor$c` v19 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$g;.e:(Lio/reactivex/processors/ReplayProcessor$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L4619a4.  v0:= v18 @kind object;
  #L4619a8.  v1:= v19 @kind object;
  #L4619ac.  call temp:= `getAndIncrement`(v19) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4619b2.  v2:= temp;
  #L4619b4.  if v2 == 0 then goto L4619ba;
  #L4619b8.  return @kind void;
  #L4619ba.  v2:= v0.`io.reactivex.processors.ReplayProcessor$g.a` @type ^`java.util.List` @kind object;
  #L4619be.  v3:= v1.`io.reactivex.processors.ReplayProcessor$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4619c2.  v4:= v1.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` @kind object;
  #L4619c6.  v4:= (`java.lang.Integer`) v4 @kind object;
  #L4619ca.  v5:= 0I;
  #L4619cc.  v6:= 1I;
  #L4619ce.  if v4 == 0 then goto L4619dc;
  #L4619d2.  call temp:= `intValue`(v4) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4619d8.  v5:= temp;
  #L4619da.  goto L4619e8;
  #L4619dc.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4619e2.  v4:= temp @kind object;
  #L4619e4.  v1.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v4 @kind object;
  #L4619e8.  v4:= 1I;
  #L4619ea.  v7:= v1.`io.reactivex.processors.ReplayProcessor$c.e` @type ^`boolean` @kind boolean;
  #L4619ee.  v8:= 0I;
  #L4619f0.  if v7 == 0 then goto L4619fa;
  #L4619f4.  v1.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v8 @kind object;
  #L4619f8.  return @kind void;
  #L4619fa.  v7:= v0.`io.reactivex.processors.ReplayProcessor$g.c` @type ^`int`;
  #L4619fe.  v9:= v1.`io.reactivex.processors.ReplayProcessor$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L461a02.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L461a08.  v9:= temp @kind wide;
  #L461a0a.  v13:= 0L;
  #L461a0e.  if v7 == v5 then goto L461aa4;
  #L461a12.  v15:= v1.`io.reactivex.processors.ReplayProcessor$c.e` @type ^`boolean` @kind boolean;
  #L461a16.  if v15 == 0 then goto L461a20;
  #L461a1a.  v1.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v8 @kind object;
  #L461a1e.  return @kind void;
  #L461a20.  call temp:= `get`(v2, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L461a26.  v15:= temp @kind object;
  #L461a28.  v11:= v0.`io.reactivex.processors.ReplayProcessor$g.b` @type ^`boolean` @kind boolean;
  #L461a2c.  if v11 == 0 then goto L461a6c;
  #L461a30.  v11:= v5 + 1;
  #L461a34.  if v11 != v7 then goto L461a6c;
  #L461a38.  v7:= v0.`io.reactivex.processors.ReplayProcessor$g.c` @type ^`int`;
  #L461a3c.  if v11 != v7 then goto L461a6c;
  #L461a40.  call temp:= `isComplete`(v15) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L461a46.  v2:= temp;
  #L461a48.  if v2 == 0 then goto L461a54;
  #L461a4c.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L461a52.  goto L461a62;
  #L461a54.  call temp:= `getError`(v15) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L461a5a.  v2:= temp @kind object;
  #L461a5c.  call `onError`(v3, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L461a62.  v1.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v8 @kind object;
  #L461a66.  v1.`io.reactivex.processors.ReplayProcessor$c.e` @type ^`boolean` := v6 @kind boolean;
  #L461a6a.  return @kind void;
  #L461a6c.  v11:= 0L;
  #L461a70.  v16:= lcmp(v9, v11);
  #L461a74.  if v16 != 0 then goto L461a90;
  #L461a78.  v9:= v1.`io.reactivex.processors.ReplayProcessor$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L461a7c.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L461a82.  v9:= temp @kind wide;
  #L461a84.  v9:= v9 + v13 @kind long;
  #L461a86.  v17:= lcmp(v9, v11);
  #L461a8a.  if v17 != 0 then goto L461a90;
  #L461a8e.  goto L461aa4;
  #L461a90.  call `onNext`(v3, v15) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L461a96.  v11:= 1L;
  #L461a9a.  v9:= v9 - v11 @kind long;
  #L461a9c.  v13:= v13 - v11 @kind long;
  #L461a9e.  v5:= v5 + 1;
  #L461aa2.  goto L461a0e;
  #L461aa4.  v7:= 0L;
  #L461aa8.  v11:= lcmp(v13, v7);
  #L461aac.  if v11 == 0 then goto L461ada;
  #L461ab0.  v7:= v1.`io.reactivex.processors.ReplayProcessor$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L461ab4.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L461aba.  v7:= temp @kind wide;
  #L461abc.  v11:= 9223372036854775807L;
  #L461ac6.  v15:= lcmp(v7, v11);
  #L461aca.  if v15 == 0 then goto L461ada;
  #L461ace.  v7:= v1.`io.reactivex.processors.ReplayProcessor$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L461ad2.  call temp:= `addAndGet`(v7, v13) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L461ad8.  v9:= temp @kind wide;
  #L461ada.  v7:= v0.`io.reactivex.processors.ReplayProcessor$g.c` @type ^`int`;
  #L461ade.  if v5 == v7 then goto L461af2;
  #L461ae2.  v7:= 0L;
  #L461ae6.  v11:= lcmp(v9, v7);
  #L461aea.  if v11 == 0 then goto L461af2;
  #L461aee.  goto L4619ea;
  #L461af2.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L461af8.  v7:= temp @kind object;
  #L461afa.  v1.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v7 @kind object;
  #L461afe.  v4:= -v4 @kind int;
  #L461b00.  call temp:= `addAndGet`(v1, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L461b06.  v4:= temp;
  #L461b08.  if v4 != 0 then goto L4619ea;
  #L461b0c.  return @kind void;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.processors.ReplayProcessor$g` v5 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$g;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L46180c.  v0:= v5.`io.reactivex.processors.ReplayProcessor$g.c` @type ^`int`;
  #L461810.  v1:= 0I;
  #L461812.  if v0 == 0 then goto L461858;
  #L461816.  v2:= v5.`io.reactivex.processors.ReplayProcessor$g.a` @type ^`java.util.List` @kind object;
  #L46181a.  v3:= v0 + -1;
  #L46181e.  call temp:= `get`(v2, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L461824.  v3:= temp @kind object;
  #L461826.  call temp:= `isComplete`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L46182c.  v4:= temp;
  #L46182e.  if v4 != 0 then goto L461842;
  #L461832.  call temp:= `isError`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L461838.  v4:= temp;
  #L46183a.  if v4 == 0 then goto L461840;
  #L46183e.  goto L461842;
  #L461840.  return v3 @kind object;
  #L461842.  v3:= 1I;
  #L461844.  if v0 != v3 then goto L46184a;
  #L461848.  return v1 @kind object;
  #L46184a.  v0:= v0 + -2;
  #L46184e.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L461854.  v0:= temp @kind object;
  #L461856.  return v0 @kind object;
  #L461858.  return v1 @kind object;
}
procedure `int` `size`(`io.reactivex.processors.ReplayProcessor$g` v4 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$g;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4617c0.  v0:= v4.`io.reactivex.processors.ReplayProcessor$g.c` @type ^`int`;
  #L4617c4.  if v0 == 0 then goto L4617f6;
  #L4617c8.  v1:= v4.`io.reactivex.processors.ReplayProcessor$g.a` @type ^`java.util.List` @kind object;
  #L4617cc.  v2:= v0 + -1;
  #L4617d0.  call temp:= `get`(v1, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4617d6.  v1:= temp @kind object;
  #L4617d8.  call temp:= `isComplete`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4617de.  v3:= temp;
  #L4617e0.  if v3 != 0 then goto L4617f4;
  #L4617e4.  call temp:= `isError`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4617ea.  v1:= temp;
  #L4617ec.  if v1 == 0 then goto L4617f2;
  #L4617f0.  goto L4617f4;
  #L4617f2.  return v0;
  #L4617f4.  return v2;
  #L4617f6.  v0:= 0I;
  #L4617f8.  return v0;
}
