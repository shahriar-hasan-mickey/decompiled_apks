record `io.reactivex.processors.UnicastProcessor` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.processors.FlowableProcessor` @kind class {
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.processors.UnicastProcessor.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.processors.UnicastProcessor.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.processors.UnicastProcessor.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.processors.UnicastProcessor.e` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.processors.UnicastProcessor.f` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.processors.UnicastProcessor.g` @AccessFlag FINAL;
  `boolean` `io.reactivex.processors.UnicastProcessor.h` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.processors.UnicastProcessor.i` @AccessFlag FINAL;
  `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` `io.reactivex.processors.UnicastProcessor.j` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.processors.UnicastProcessor.k` @AccessFlag FINAL;
  `boolean` `io.reactivex.processors.UnicastProcessor.l` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.processors.UnicastProcessor` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4626d4.  v0:= 0I;
  #L4626d6.  v1:= 1I;
  #L4626d8.  call `<init>`(v2, v3, v0, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L4626de.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.processors.UnicastProcessor` v1 @kind this, `int` v2 , `java.lang.Runnable` v3 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4626f0.  v0:= 1I;
  #L4626f2.  call `<init>`(v1, v2, v3, v0) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L4626f8.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.processors.UnicastProcessor` v2 @kind this, `int` v3 , `java.lang.Runnable` v4 @kind object, `boolean` v5 ) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L46270c.  call `<init>`(v2) @signature `Lio/reactivex/processors/FlowableProcessor;.<init>:()V` @kind direct;
  #L462712.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L462716.  v1:= "capacityHint" @kind object;
  #L46271a.  call temp:= `verifyPositive`(v3, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L462720.  v3:= temp;
  #L462722.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L462728.  v2.`io.reactivex.processors.UnicastProcessor.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v0 @kind object;
  #L46272c.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L462730.  call `<init>`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L462736.  v2.`io.reactivex.processors.UnicastProcessor.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L46273a.  v2.`io.reactivex.processors.UnicastProcessor.d` @type ^`boolean` := v5 @kind boolean;
  #L46273e.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L462742.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L462748.  v2.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L46274c.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L462750.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L462756.  v2.`io.reactivex.processors.UnicastProcessor.i` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L46275a.  v3:= new `io.reactivex.processors.UnicastProcessor$a`;
  #L46275e.  call `<init>`(v3, v2) @signature `Lio/reactivex/processors/UnicastProcessor$a;.<init>:(Lio/reactivex/processors/UnicastProcessor;)V` @kind direct;
  #L462764.  v2.`io.reactivex.processors.UnicastProcessor.j` @type ^`io.reactivex.internal.subscriptions.BasicIntQueueSubscription` := v3 @kind object;
  #L462768.  v3:= new `java.util.concurrent.atomic.AtomicLong`;
  #L46276c.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L462772.  v2.`io.reactivex.processors.UnicastProcessor.k` @type ^`java.util.concurrent.atomic.AtomicLong` := v3 @kind object;
  #L462776.  return @kind void;
}
procedure `io.reactivex.processors.UnicastProcessor` `create`() @signature `Lio/reactivex/processors/UnicastProcessor;.create:()Lio/reactivex/processors/UnicastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4625f8.  v0:= new `io.reactivex.processors.UnicastProcessor`;
  #L4625fc.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L462602.  v1:= temp;
  #L462604.  call `<init>`(v0, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(I)V` @kind direct;
  #L46260a.  return v0 @kind object;
}
procedure `io.reactivex.processors.UnicastProcessor` `create`(`int` v1 ) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L462644.  v0:= new `io.reactivex.processors.UnicastProcessor`;
  #L462648.  call `<init>`(v0, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(I)V` @kind direct;
  #L46264e.  return v0 @kind object;
}
procedure `io.reactivex.processors.UnicastProcessor` `create`(`int` v1 , `java.lang.Runnable` v2 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/processors/UnicastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L462660.  v0:= "onTerminate" @kind object;
  #L462664.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L46266a.  v0:= new `io.reactivex.processors.UnicastProcessor`;
  #L46266e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;)V` @kind direct;
  #L462674.  return v0 @kind object;
}
procedure `io.reactivex.processors.UnicastProcessor` `create`(`int` v1 , `java.lang.Runnable` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;Z)Lio/reactivex/processors/UnicastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L462688.  v0:= "onTerminate" @kind object;
  #L46268c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L462692.  v0:= new `io.reactivex.processors.UnicastProcessor`;
  #L462696.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L46269c.  return v0 @kind object;
}
procedure `io.reactivex.processors.UnicastProcessor` `create`(`boolean` v3 ) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(Z)Lio/reactivex/processors/UnicastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L46261c.  v0:= new `io.reactivex.processors.UnicastProcessor`;
  #L462620.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L462626.  v1:= temp;
  #L462628.  v2:= 0I;
  #L46262a.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L462630.  return v0 @kind object;
}
procedure `boolean` `e`(`io.reactivex.processors.UnicastProcessor` v3 @kind this, `boolean` v4 , `boolean` v5 , `boolean` v6 , `org.reactivestreams.Subscriber` v7 @kind object, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v8 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.e:(ZZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4624fc.  v0:= v3.`io.reactivex.processors.UnicastProcessor.h` @type ^`boolean` @kind boolean;
  #L462500.  v1:= 1I;
  #L462502.  v2:= 0I;
  #L462504.  if v0 == 0 then goto L46251a;
  #L462508.  call `clear`(v8) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L46250e.  v4:= v3.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L462512.  call `lazySet`(v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L462518.  return v1;
  #L46251a.  if v5 == 0 then goto L46256c;
  #L46251e.  if v4 == 0 then goto L462546;
  #L462522.  v4:= v3.`io.reactivex.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` @kind object;
  #L462526.  if v4 == 0 then goto L462546;
  #L46252a.  call `clear`(v8) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L462530.  v4:= v3.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L462534.  call `lazySet`(v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L46253a.  v4:= v3.`io.reactivex.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` @kind object;
  #L46253e.  call `onError`(v7, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L462544.  return v1;
  #L462546.  if v6 == 0 then goto L46256c;
  #L46254a.  v4:= v3.`io.reactivex.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` @kind object;
  #L46254e.  v5:= v3.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L462552.  call `lazySet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L462558.  if v4 == 0 then goto L462564;
  #L46255c.  call `onError`(v7, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L462562.  goto L46256a;
  #L462564.  call `onComplete`(v7) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L46256a.  return v1;
  #L46256c.  v4:= 0I;
  #L46256e.  return v4;
}
procedure `void` `f`(`io.reactivex.processors.UnicastProcessor` v3 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L462788.  v0:= v3.`io.reactivex.processors.UnicastProcessor.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46278c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L462792.  v0:= temp @kind object;
  #L462794.  v0:= (`java.lang.Runnable`) v0 @kind object;
  #L462798.  if v0 == 0 then goto L4627b4;
  #L46279c.  v1:= v3.`io.reactivex.processors.UnicastProcessor.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4627a0.  v2:= 0I;
  #L4627a2.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4627a8.  v1:= temp;
  #L4627aa.  if v1 == 0 then goto L4627b4;
  #L4627ae.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L4627b4.  return @kind void;
}
procedure `void` `g`(`io.reactivex.processors.UnicastProcessor` v2 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4627c8.  v0:= v2.`io.reactivex.processors.UnicastProcessor.j` @type ^`io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind object;
  #L4627cc.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4627d2.  v0:= temp;
  #L4627d4.  if v0 == 0 then goto L4627da;
  #L4627d8.  return @kind void;
  #L4627da.  v0:= 1I;
  #L4627dc.  v1:= v2.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4627e0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4627e6.  v1:= temp @kind object;
  #L4627e8.  v1:= (`org.reactivestreams.Subscriber`) v1 @kind object;
  #L4627ec.  if v1 == 0 then goto L462808;
  #L4627f0.  v0:= v2.`io.reactivex.processors.UnicastProcessor.l` @type ^`boolean` @kind boolean;
  #L4627f4.  if v0 == 0 then goto L462800;
  #L4627f8.  call `h`(v2, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4627fe.  goto L462806;
  #L462800.  call `i`(v2, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.i:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L462806.  return @kind void;
  #L462808.  v1:= v2.`io.reactivex.processors.UnicastProcessor.j` @type ^`io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind object;
  #L46280c.  v0:= -v0 @kind int;
  #L46280e.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L462814.  v0:= temp;
  #L462816.  if v0 != 0 then goto L46281c;
  #L46281a.  return @kind void;
  #L46281c.  v1:= v2.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L462820.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L462826.  v1:= temp @kind object;
  #L462828.  v1:= (`org.reactivestreams.Subscriber`) v1 @kind object;
  #L46282c.  goto L4627ec;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.processors.UnicastProcessor` v1 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4626b0.  v0:= v1.`io.reactivex.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L4626b4.  if v0 == 0 then goto L4626be;
  #L4626b8.  v0:= v1.`io.reactivex.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` @kind object;
  #L4626bc.  return v0 @kind object;
  #L4626be.  v0:= 0I;
  #L4626c0.  return v0 @kind object;
}
procedure `void` `h`(`io.reactivex.processors.UnicastProcessor` v6 @kind this, `org.reactivestreams.Subscriber` v7 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.h:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L462840.  v0:= v6.`io.reactivex.processors.UnicastProcessor.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L462844.  v1:= v6.`io.reactivex.processors.UnicastProcessor.d` @type ^`boolean` @kind boolean;
  #L462848.  v2:= 1I;
  #L46284a.  v1:= v1 ^~ v2 @kind int;
  #L46284c.  v3:= v6.`io.reactivex.processors.UnicastProcessor.h` @type ^`boolean` @kind boolean;
  #L462850.  v4:= 0I;
  #L462852.  if v3 == 0 then goto L462868;
  #L462856.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L46285c.  v7:= v6.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L462860.  call `lazySet`(v7, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L462866.  return @kind void;
  #L462868.  v3:= v6.`io.reactivex.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L46286c.  if v1 == 0 then goto L462898;
  #L462870.  if v3 == 0 then goto L462898;
  #L462874.  v5:= v6.`io.reactivex.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` @kind object;
  #L462878.  if v5 == 0 then goto L462898;
  #L46287c.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L462882.  v0:= v6.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L462886.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L46288c.  v0:= v6.`io.reactivex.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` @kind object;
  #L462890.  call `onError`(v7, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L462896.  return @kind void;
  #L462898.  call `onNext`(v7, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46289e.  if v3 == 0 then goto L4628c4;
  #L4628a2.  v0:= v6.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4628a6.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4628ac.  v0:= v6.`io.reactivex.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` @kind object;
  #L4628b0.  if v0 == 0 then goto L4628bc;
  #L4628b4.  call `onError`(v7, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4628ba.  goto L4628c2;
  #L4628bc.  call `onComplete`(v7) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4628c2.  return @kind void;
  #L4628c4.  v3:= v6.`io.reactivex.processors.UnicastProcessor.j` @type ^`io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind object;
  #L4628c8.  v2:= -v2 @kind int;
  #L4628ca.  call temp:= `addAndGet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4628d0.  v2:= temp;
  #L4628d2.  if v2 != 0 then goto L46284c;
  #L4628d6.  return @kind void;
}
procedure `boolean` `hasComplete`(`io.reactivex.processors.UnicastProcessor` v1 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L462580.  v0:= v1.`io.reactivex.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L462584.  if v0 == 0 then goto L462594;
  #L462588.  v0:= v1.`io.reactivex.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` @kind object;
  #L46258c.  if v0 != 0 then goto L462594;
  #L462590.  v0:= 1I;
  #L462592.  goto L462596;
  #L462594.  v0:= 0I;
  #L462596.  return v0;
}
procedure `boolean` `hasSubscribers`(`io.reactivex.processors.UnicastProcessor` v1 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor;.hasSubscribers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4625a8.  v0:= v1.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4625ac.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4625b2.  v0:= temp @kind object;
  #L4625b4.  if v0 == 0 then goto L4625bc;
  #L4625b8.  v0:= 1I;
  #L4625ba.  goto L4625be;
  #L4625bc.  v0:= 0I;
  #L4625be.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.processors.UnicastProcessor` v1 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4625d0.  v0:= v1.`io.reactivex.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L4625d4.  if v0 == 0 then goto L4625e4;
  #L4625d8.  v0:= v1.`io.reactivex.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` @kind object;
  #L4625dc.  if v0 == 0 then goto L4625e4;
  #L4625e0.  v0:= 1I;
  #L4625e2.  goto L4625e6;
  #L4625e4.  v0:= 0I;
  #L4625e6.  return v0;
}
procedure `void` `i`(`io.reactivex.processors.UnicastProcessor` v17 @kind this, `org.reactivestreams.Subscriber` v18 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.i:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L4628e8.  v6:= v17 @kind object;
  #L4628ec.  v7:= v6.`io.reactivex.processors.UnicastProcessor.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4628f0.  v0:= v6.`io.reactivex.processors.UnicastProcessor.d` @type ^`boolean` @kind boolean;
  #L4628f4.  v8:= 1I;
  #L4628f6.  v9:= v0 ^~ 1;
  #L4628fa.  v10:= 1I;
  #L4628fc.  v0:= v6.`io.reactivex.processors.UnicastProcessor.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L462900.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L462906.  v11:= temp @kind wide;
  #L462908.  v4:= 0L;
  #L46290c.  v15:= lcmp(v11, v4);
  #L462910.  if v15 == 0 then goto L46296e;
  #L462914.  v2:= v6.`io.reactivex.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L462918.  call temp:= `poll`(v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L46291e.  v3:= temp @kind object;
  #L462920.  if v3 != 0 then goto L46292a;
  #L462924.  v16:= 1I;
  #L462928.  goto L462930;
  #L46292a.  v0:= 0I;
  #L46292c.  v16:= 0I;
  #L462930.  v0:= v17 @kind object;
  #L462934.  v1:= v9;
  #L462936.  v8:= v3 @kind object;
  #L462938.  v3:= v16;
  #L46293c.  v13:= v4 @kind wide;
  #L46293e.  v4:= v18 @kind object;
  #L462942.  v5:= v7 @kind object;
  #L462944.  call temp:= `e`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/processors/UnicastProcessor;.e:(ZZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L46294a.  v0:= temp;
  #L46294c.  if v0 == 0 then goto L462952;
  #L462950.  return @kind void;
  #L462952.  if v16 == 0 then goto L462958;
  #L462956.  goto L462970;
  #L462958.  v5:= v18 @kind object;
  #L46295c.  call `onNext`(v5, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L462962.  v0:= 1L;
  #L462966.  v0:= v0 + v13 @kind long;
  #L462968.  v4:= v0 @kind wide;
  #L46296a.  v8:= 1I;
  #L46296c.  goto L46290c;
  #L46296e.  v13:= v4 @kind wide;
  #L462970.  v5:= v18 @kind object;
  #L462974.  if v15 != 0 then goto L46299e;
  #L462978.  v2:= v6.`io.reactivex.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L46297c.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L462982.  v3:= temp;
  #L462984.  v0:= v17 @kind object;
  #L462988.  v1:= v9;
  #L46298a.  v4:= v18 @kind object;
  #L46298e.  v5:= v7 @kind object;
  #L462990.  call temp:= `e`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/processors/UnicastProcessor;.e:(ZZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L462996.  v0:= temp;
  #L462998.  if v0 == 0 then goto L46299e;
  #L46299c.  return @kind void;
  #L46299e.  v0:= 0L;
  #L4629a2.  v2:= lcmp(v13, v0);
  #L4629a6.  if v2 == 0 then goto L4629c8;
  #L4629aa.  v0:= 9223372036854775807L;
  #L4629b4.  v2:= lcmp(v11, v0);
  #L4629b8.  if v2 == 0 then goto L4629c8;
  #L4629bc.  v0:= v6.`io.reactivex.processors.UnicastProcessor.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4629c0.  v1:= -v13 @kind long;
  #L4629c2.  call temp:= `addAndGet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4629c8.  v0:= v6.`io.reactivex.processors.UnicastProcessor.j` @type ^`io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind object;
  #L4629cc.  v1:= -v10 @kind int;
  #L4629ce.  call temp:= `addAndGet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4629d4.  v10:= temp;
  #L4629d6.  if v10 != 0 then goto L4629dc;
  #L4629da.  return @kind void;
  #L4629dc.  v8:= 1I;
  #L4629de.  goto L4628fc;
}
procedure `void` `onComplete`(`io.reactivex.processors.UnicastProcessor` v1 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4629f0.  v0:= v1.`io.reactivex.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L4629f4.  if v0 != 0 then goto L462a14;
  #L4629f8.  v0:= v1.`io.reactivex.processors.UnicastProcessor.h` @type ^`boolean` @kind boolean;
  #L4629fc.  if v0 == 0 then goto L462a02;
  #L462a00.  goto L462a14;
  #L462a02.  v0:= 1I;
  #L462a04.  v1.`io.reactivex.processors.UnicastProcessor.e` @type ^`boolean` := v0 @kind boolean;
  #L462a08.  call `f`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.f:()V` @kind virtual;
  #L462a0e.  call `g`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.g:()V` @kind virtual;
  #L462a14.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.processors.UnicastProcessor` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L462a28.  v0:= v1.`io.reactivex.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L462a2c.  if v0 != 0 then goto L462a64;
  #L462a30.  v0:= v1.`io.reactivex.processors.UnicastProcessor.h` @type ^`boolean` @kind boolean;
  #L462a34.  if v0 == 0 then goto L462a3a;
  #L462a38.  goto L462a64;
  #L462a3a.  if v2 != 0 then goto L462a4c;
  #L462a3e.  v2:= new `java.lang.NullPointerException`;
  #L462a42.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L462a46.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L462a4c.  v1.`io.reactivex.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` := v2 @kind object;
  #L462a50.  v2:= 1I;
  #L462a52.  v1.`io.reactivex.processors.UnicastProcessor.e` @type ^`boolean` := v2 @kind boolean;
  #L462a56.  call `f`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.f:()V` @kind virtual;
  #L462a5c.  call `g`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.g:()V` @kind virtual;
  #L462a62.  return @kind void;
  #L462a64.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L462a6a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.processors.UnicastProcessor` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L462a7c.  v0:= v1.`io.reactivex.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L462a80.  if v0 != 0 then goto L462ab8;
  #L462a84.  v0:= v1.`io.reactivex.processors.UnicastProcessor.h` @type ^`boolean` @kind boolean;
  #L462a88.  if v0 == 0 then goto L462a8e;
  #L462a8c.  goto L462ab8;
  #L462a8e.  if v2 != 0 then goto L462aa8;
  #L462a92.  v2:= new `java.lang.NullPointerException`;
  #L462a96.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L462a9a.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L462aa0.  call `onError`(v1, v2) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L462aa6.  return @kind void;
  #L462aa8.  v0:= v1.`io.reactivex.processors.UnicastProcessor.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L462aac.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L462ab2.  call `g`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.g:()V` @kind virtual;
  #L462ab8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.processors.UnicastProcessor` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L462acc.  v0:= v2.`io.reactivex.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L462ad0.  if v0 != 0 then goto L462af0;
  #L462ad4.  v0:= v2.`io.reactivex.processors.UnicastProcessor.h` @type ^`boolean` @kind boolean;
  #L462ad8.  if v0 == 0 then goto L462ade;
  #L462adc.  goto L462af0;
  #L462ade.  v0:= 9223372036854775807L;
  #L462ae8.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L462aee.  goto L462af6;
  #L462af0.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L462af6.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.processors.UnicastProcessor` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L462b08.  v0:= v3.`io.reactivex.processors.UnicastProcessor.i` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L462b0c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L462b12.  v0:= temp;
  #L462b14.  if v0 != 0 then goto L462b5e;
  #L462b18.  v0:= v3.`io.reactivex.processors.UnicastProcessor.i` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L462b1c.  v1:= 0I;
  #L462b1e.  v2:= 1I;
  #L462b20.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L462b26.  v0:= temp;
  #L462b28.  if v0 == 0 then goto L462b5e;
  #L462b2c.  v0:= v3.`io.reactivex.processors.UnicastProcessor.j` @type ^`io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind object;
  #L462b30.  call `onSubscribe`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L462b36.  v0:= v3.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L462b3a.  call `set`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L462b40.  v4:= v3.`io.reactivex.processors.UnicastProcessor.h` @type ^`boolean` @kind boolean;
  #L462b44.  if v4 == 0 then goto L462b56;
  #L462b48.  v4:= v3.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L462b4c.  v0:= 0I;
  #L462b4e.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L462b54.  goto L462b72;
  #L462b56.  call `g`(v3) @signature `Lio/reactivex/processors/UnicastProcessor;.g:()V` @kind virtual;
  #L462b5c.  goto L462b72;
  #L462b5e.  v0:= new `java.lang.IllegalStateException`;
  #L462b62.  v1:= "This processor allows only a single Subscriber" @kind object;
  #L462b66.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L462b6c.  call `error`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L462b72.  return @kind void;
}
