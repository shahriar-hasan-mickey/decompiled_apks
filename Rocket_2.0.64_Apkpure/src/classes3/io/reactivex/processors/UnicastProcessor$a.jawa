record `io.reactivex.processors.UnicastProcessor$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class {
  `io.reactivex.processors.UnicastProcessor` `io.reactivex.processors.UnicastProcessor$a.a` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@io.reactivex.processors.UnicastProcessor$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.processors.UnicastProcessor$a` v0 @kind this, `io.reactivex.processors.UnicastProcessor` v1 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor$a;.<init>:(Lio/reactivex/processors/UnicastProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L462418.  v0.`io.reactivex.processors.UnicastProcessor$a.a` @type ^`io.reactivex.processors.UnicastProcessor` := v1 @kind object;
  #L46241c.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L462422.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.processors.UnicastProcessor$a` v2 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L462434.  v0:= v2.`io.reactivex.processors.UnicastProcessor$a.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L462438.  v0:= v0.`io.reactivex.processors.UnicastProcessor.h` @type ^`boolean` @kind boolean;
  #L46243c.  if v0 == 0 then goto L462442;
  #L462440.  return @kind void;
  #L462442.  v0:= v2.`io.reactivex.processors.UnicastProcessor$a.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L462446.  v1:= 1I;
  #L462448.  v0.`io.reactivex.processors.UnicastProcessor.h` @type ^`boolean` := v1 @kind boolean;
  #L46244c.  v0:= v2.`io.reactivex.processors.UnicastProcessor$a.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L462450.  call `f`(v0) @signature `Lio/reactivex/processors/UnicastProcessor;.f:()V` @kind virtual;
  #L462456.  v0:= v2.`io.reactivex.processors.UnicastProcessor$a.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L46245a.  v1:= v0.`io.reactivex.processors.UnicastProcessor.l` @type ^`boolean` @kind boolean;
  #L46245e.  if v1 != 0 then goto L462490;
  #L462462.  v0:= v0.`io.reactivex.processors.UnicastProcessor.j` @type ^`io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind object;
  #L462466.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L46246c.  v0:= temp;
  #L46246e.  if v0 != 0 then goto L462490;
  #L462472.  v0:= v2.`io.reactivex.processors.UnicastProcessor$a.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L462476.  v0:= v0.`io.reactivex.processors.UnicastProcessor.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L46247a.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L462480.  v0:= v2.`io.reactivex.processors.UnicastProcessor$a.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L462484.  v0:= v0.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L462488.  v1:= 0I;
  #L46248a.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L462490.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.processors.UnicastProcessor$a` v1 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4624a4.  v0:= v1.`io.reactivex.processors.UnicastProcessor$a.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L4624a8.  v0:= v0.`io.reactivex.processors.UnicastProcessor.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4624ac.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4624b2.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.processors.UnicastProcessor$a` v1 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4623a8.  v0:= v1.`io.reactivex.processors.UnicastProcessor$a.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L4623ac.  v0:= v0.`io.reactivex.processors.UnicastProcessor.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4623b0.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4623b6.  v0:= temp;
  #L4623b8.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.processors.UnicastProcessor$a` v1 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4623f4.  v0:= v1.`io.reactivex.processors.UnicastProcessor$a.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L4623f8.  v0:= v0.`io.reactivex.processors.UnicastProcessor.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4623fc.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L462402.  v0:= temp @kind object;
  #L462404.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.processors.UnicastProcessor$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/processors/UnicastProcessor$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4624c4.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4624ca.  v0:= temp;
  #L4624cc.  if v0 == 0 then goto L4624e8;
  #L4624d0.  v0:= v1.`io.reactivex.processors.UnicastProcessor$a.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L4624d4.  v0:= v0.`io.reactivex.processors.UnicastProcessor.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4624d8.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4624de.  v2:= v1.`io.reactivex.processors.UnicastProcessor$a.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L4624e2.  call `g`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.g:()V` @kind virtual;
  #L4624e8.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.processors.UnicastProcessor$a` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/processors/UnicastProcessor$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4623cc.  v0:= 2I;
  #L4623ce.  v3:= v3 ^& v0 @kind int;
  #L4623d0.  if v3 == 0 then goto L4623e0;
  #L4623d4.  v3:= v2.`io.reactivex.processors.UnicastProcessor$a.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L4623d8.  v1:= 1I;
  #L4623da.  v3.`io.reactivex.processors.UnicastProcessor.l` @type ^`boolean` := v1 @kind boolean;
  #L4623de.  return v0;
  #L4623e0.  v3:= 0I;
  #L4623e2.  return v3;
}
