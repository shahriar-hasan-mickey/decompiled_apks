record `io.reactivex.processors.FlowableProcessor` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.Flowable` @kind class, `org.reactivestreams.Processor` @kind interface, `io.reactivex.FlowableSubscriber` @kind interface {
}
procedure `void` `<init>`(`io.reactivex.processors.FlowableProcessor` v0 @kind this) @signature `Lio/reactivex/processors/FlowableProcessor;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4608b8.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L4608be.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`() @signature `Lio/reactivex/processors/FlowableProcessor;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `hasComplete`() @signature `Lio/reactivex/processors/FlowableProcessor;.hasComplete:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `hasSubscribers`() @signature `Lio/reactivex/processors/FlowableProcessor;.hasSubscribers:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `hasThrowable`() @signature `Lio/reactivex/processors/FlowableProcessor;.hasThrowable:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `io.reactivex.processors.FlowableProcessor` `toSerialized`(`io.reactivex.processors.FlowableProcessor` v1 @kind this) @signature `Lio/reactivex/processors/FlowableProcessor;.toSerialized:()Lio/reactivex/processors/FlowableProcessor;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L460890.  v0:= instanceof @variable v1 @type ^`io.reactivex.processors.a` @kind boolean;
  #L460894.  if v0 == 0 then goto L46089a;
  #L460898.  return v1 @kind object;
  #L46089a.  v0:= new `io.reactivex.processors.a`;
  #L46089e.  call `<init>`(v0, v1) @signature `Lio/reactivex/processors/a;.<init>:(Lio/reactivex/processors/FlowableProcessor;)V` @kind direct;
  #L4608a4.  return v0 @kind object;
}
