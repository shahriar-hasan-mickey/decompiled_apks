record `io.reactivex.processors.AsyncProcessor` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.processors.FlowableProcessor` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.processors.AsyncProcessor.b` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.processors.AsyncProcessor.c` @AccessFlag ;
  `java.lang.Object` `io.reactivex.processors.AsyncProcessor.d` @AccessFlag ;
}
global `io.reactivex.processors.AsyncProcessor$a`[] `@@io.reactivex.processors.AsyncProcessor.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.processors.AsyncProcessor$a`[] `@@io.reactivex.processors.AsyncProcessor.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/processors/AsyncProcessor;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L45fbd8.  v0:= 0I;
  #L45fbda.  v1:= new `io.reactivex.processors.AsyncProcessor$a`[v0];
  #L45fbde.  `@@io.reactivex.processors.AsyncProcessor.e` @type ^`io.reactivex.processors.AsyncProcessor$a`[] := v1 @kind object;
  #L45fbe2.  v0:= new `io.reactivex.processors.AsyncProcessor$a`[v0];
  #L45fbe6.  `@@io.reactivex.processors.AsyncProcessor.f` @type ^`io.reactivex.processors.AsyncProcessor$a`[] := v0 @kind object;
  #L45fbea.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L45fbfc.  call `<init>`(v2) @signature `Lio/reactivex/processors/FlowableProcessor;.<init>:()V` @kind direct;
  #L45fc02.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L45fc06.  v1:= `@@io.reactivex.processors.AsyncProcessor.e` @type ^`io.reactivex.processors.AsyncProcessor$a`[] @kind object;
  #L45fc0a.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L45fc10.  v2.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L45fc14.  return @kind void;
}
procedure `io.reactivex.processors.AsyncProcessor` `create`() @signature `Lio/reactivex/processors/AsyncProcessor;.create:()Lio/reactivex/processors/AsyncProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L45fae0.  v0:= new `io.reactivex.processors.AsyncProcessor`;
  #L45fae4.  call `<init>`(v0) @signature `Lio/reactivex/processors/AsyncProcessor;.<init>:()V` @kind direct;
  #L45faea.  return v0 @kind object;
}
procedure `boolean` `e`(`io.reactivex.processors.AsyncProcessor` v4 @kind this, `io.reactivex.processors.AsyncProcessor$a` v5 @kind object) @signature `Lio/reactivex/processors/AsyncProcessor;.e:(Lio/reactivex/processors/AsyncProcessor$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45f9c0.  v0:= v4.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45f9c4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45f9ca.  v0:= temp @kind object;
  #L45f9cc.  v0:= (`io.reactivex.processors.AsyncProcessor$a`[]) v0 @kind object;
  #L45f9d0.  v1:= `@@io.reactivex.processors.AsyncProcessor.f` @type ^`io.reactivex.processors.AsyncProcessor$a`[] @kind object;
  #L45f9d4.  v2:= 0I;
  #L45f9d6.  if v0 != v1 then goto L45f9dc;
  #L45f9da.  return v2;
  #L45f9dc.  v1:= length @variable v0;
  #L45f9de.  v3:= v1 + 1;
  #L45f9e2.  v3:= new `io.reactivex.processors.AsyncProcessor$a`[v3];
  #L45f9e6.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L45f9ec.  v3[v1]:= v5 @kind object;
  #L45f9f0.  v1:= v4.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45f9f4.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45f9fa.  v0:= temp;
  #L45f9fc.  if v0 == 0 then goto L45f9c0;
  #L45fa00.  v5:= 1I;
  #L45fa02.  return v5;
}
procedure `void` `f`(`io.reactivex.processors.AsyncProcessor` v5 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45fc28.  v0:= 0I;
  #L45fc2a.  v5.`io.reactivex.processors.AsyncProcessor.d` @type ^`java.lang.Object` := v0 @kind object;
  #L45fc2e.  v0:= new `java.lang.NullPointerException`;
  #L45fc32.  v1:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L45fc36.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45fc3c.  v5.`io.reactivex.processors.AsyncProcessor.c` @type ^`java.lang.Throwable` := v0 @kind object;
  #L45fc40.  v1:= v5.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45fc44.  v2:= `@@io.reactivex.processors.AsyncProcessor.f` @type ^`io.reactivex.processors.AsyncProcessor$a`[] @kind object;
  #L45fc48.  call temp:= `getAndSet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L45fc4e.  v1:= temp @kind object;
  #L45fc50.  v1:= (`io.reactivex.processors.AsyncProcessor$a`[]) v1 @kind object;
  #L45fc54.  v2:= length @variable v1;
  #L45fc56.  v3:= 0I;
  #L45fc58.  if v3 >= v2 then goto L45fc6c;
  #L45fc5c.  v4:= v1[v3] @kind object;
  #L45fc60.  call `onError`(v4, v0) @signature `Lio/reactivex/processors/AsyncProcessor$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L45fc66.  v3:= v3 + 1;
  #L45fc6a.  goto L45fc58;
  #L45fc6c.  return @kind void;
}
procedure `void` `g`(`io.reactivex.processors.AsyncProcessor` v6 @kind this, `io.reactivex.processors.AsyncProcessor$a` v7 @kind object) @signature `Lio/reactivex/processors/AsyncProcessor;.g:(Lio/reactivex/processors/AsyncProcessor$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L45fddc.  v0:= v6.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45fde0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45fde6.  v0:= temp @kind object;
  #L45fde8.  v0:= (`io.reactivex.processors.AsyncProcessor$a`[]) v0 @kind object;
  #L45fdec.  v1:= length @variable v0;
  #L45fdee.  if v1 != 0 then goto L45fdf4;
  #L45fdf2.  return @kind void;
  #L45fdf4.  v2:= -1I;
  #L45fdf6.  v3:= 0I;
  #L45fdf8.  v4:= 0I;
  #L45fdfa.  if v4 >= v1 then goto L45fe10;
  #L45fdfe.  v5:= v0[v4] @kind object;
  #L45fe02.  if v5 != v7 then goto L45fe0a;
  #L45fe06.  v2:= v4;
  #L45fe08.  goto L45fe10;
  #L45fe0a.  v4:= v4 + 1;
  #L45fe0e.  goto L45fdfa;
  #L45fe10.  if v2 >= 0 then goto L45fe16;
  #L45fe14.  return @kind void;
  #L45fe16.  v4:= 1I;
  #L45fe18.  if v1 != v4 then goto L45fe22;
  #L45fe1c.  v1:= `@@io.reactivex.processors.AsyncProcessor.e` @type ^`io.reactivex.processors.AsyncProcessor$a`[] @kind object;
  #L45fe20.  goto L45fe40;
  #L45fe22.  v5:= v1 + -1;
  #L45fe26.  v5:= new `io.reactivex.processors.AsyncProcessor$a`[v5];
  #L45fe2a.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L45fe30.  v3:= v2 + 1;
  #L45fe34.  v1:= v1 - v2 @kind int;
  #L45fe36.  v1:= v1 - v4 @kind int;
  #L45fe38.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L45fe3e.  v1:= v5 @kind object;
  #L45fe40.  v2:= v6.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45fe44.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45fe4a.  v0:= temp;
  #L45fe4c.  if v0 == 0 then goto L45fddc;
  #L45fe50.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45fba8.  v0:= v2.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45fbac.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45fbb2.  v0:= temp @kind object;
  #L45fbb4.  v1:= `@@io.reactivex.processors.AsyncProcessor.f` @type ^`io.reactivex.processors.AsyncProcessor$a`[] @kind object;
  #L45fbb8.  if v0 != v1 then goto L45fbc2;
  #L45fbbc.  v0:= v2.`io.reactivex.processors.AsyncProcessor.c` @type ^`java.lang.Throwable` @kind object;
  #L45fbc0.  goto L45fbc4;
  #L45fbc2.  v0:= 0I;
  #L45fbc4.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45fafc.  v0:= v2.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45fb00.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45fb06.  v0:= temp @kind object;
  #L45fb08.  v1:= `@@io.reactivex.processors.AsyncProcessor.f` @type ^`io.reactivex.processors.AsyncProcessor$a`[] @kind object;
  #L45fb0c.  if v0 != v1 then goto L45fb16;
  #L45fb10.  v0:= v2.`io.reactivex.processors.AsyncProcessor.d` @type ^`java.lang.Object` @kind object;
  #L45fb14.  goto L45fb18;
  #L45fb16.  v0:= 0I;
  #L45fb18.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.processors.AsyncProcessor` v3 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor;.getValues:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45fb2c.  call temp:= `getValue`(v3) @signature `Lio/reactivex/processors/AsyncProcessor;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L45fb32.  v0:= temp @kind object;
  #L45fb34.  v1:= 0I;
  #L45fb36.  if v0 == 0 then goto L45fb46;
  #L45fb3a.  v2:= 1I;
  #L45fb3c.  v2:= new `java.lang.Object`[v2];
  #L45fb40.  v2[v1]:= v0 @kind object;
  #L45fb44.  goto L45fb4a;
  #L45fb46.  v2:= new `java.lang.Object`[v1];
  #L45fb4a.  return v2 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.processors.AsyncProcessor` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/processors/AsyncProcessor;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45fb5c.  call temp:= `getValue`(v5) @signature `Lio/reactivex/processors/AsyncProcessor;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L45fb62.  v0:= temp @kind object;
  #L45fb64.  v1:= 0I;
  #L45fb66.  v2:= 0I;
  #L45fb68.  if v0 != 0 then goto L45fb78;
  #L45fb6c.  v0:= length @variable v6;
  #L45fb6e.  if v0 == 0 then goto L45fb76;
  #L45fb72.  v6[v2]:= v1 @kind object;
  #L45fb76.  return v6 @kind object;
  #L45fb78.  v3:= length @variable v6;
  #L45fb7a.  v4:= 1I;
  #L45fb7c.  if v3 != 0 then goto L45fb88;
  #L45fb80.  call temp:= `copyOf`(v6, v4) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L45fb86.  v6:= temp @kind object;
  #L45fb88.  v6[v2]:= v0 @kind object;
  #L45fb8c.  v0:= length @variable v6;
  #L45fb8e.  if v0 == v4 then goto L45fb96;
  #L45fb92.  v6[v4]:= v1 @kind object;
  #L45fb96.  return v6 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45fa14.  v0:= v2.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45fa18.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45fa1e.  v0:= temp @kind object;
  #L45fa20.  v1:= `@@io.reactivex.processors.AsyncProcessor.f` @type ^`io.reactivex.processors.AsyncProcessor$a`[] @kind object;
  #L45fa24.  if v0 != v1 then goto L45fa34;
  #L45fa28.  v0:= v2.`io.reactivex.processors.AsyncProcessor.c` @type ^`java.lang.Throwable` @kind object;
  #L45fa2c.  if v0 != 0 then goto L45fa34;
  #L45fa30.  v0:= 1I;
  #L45fa32.  goto L45fa36;
  #L45fa34.  v0:= 0I;
  #L45fa36.  return v0;
}
procedure `boolean` `hasSubscribers`(`io.reactivex.processors.AsyncProcessor` v1 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor;.hasSubscribers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fa48.  v0:= v1.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45fa4c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45fa52.  v0:= temp @kind object;
  #L45fa54.  v0:= (`io.reactivex.processors.AsyncProcessor$a`[]) v0 @kind object;
  #L45fa58.  v0:= length @variable v0;
  #L45fa5a.  if v0 == 0 then goto L45fa62;
  #L45fa5e.  v0:= 1I;
  #L45fa60.  goto L45fa64;
  #L45fa62.  v0:= 0I;
  #L45fa64.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45fa78.  v0:= v2.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45fa7c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45fa82.  v0:= temp @kind object;
  #L45fa84.  v1:= `@@io.reactivex.processors.AsyncProcessor.f` @type ^`io.reactivex.processors.AsyncProcessor$a`[] @kind object;
  #L45fa88.  if v0 != v1 then goto L45fa98;
  #L45fa8c.  v0:= v2.`io.reactivex.processors.AsyncProcessor.c` @type ^`java.lang.Throwable` @kind object;
  #L45fa90.  if v0 == 0 then goto L45fa98;
  #L45fa94.  v0:= 1I;
  #L45fa96.  goto L45fa9a;
  #L45fa98.  v0:= 0I;
  #L45fa9a.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45faac.  v0:= v2.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45fab0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45fab6.  v0:= temp @kind object;
  #L45fab8.  v1:= `@@io.reactivex.processors.AsyncProcessor.f` @type ^`io.reactivex.processors.AsyncProcessor$a`[] @kind object;
  #L45fabc.  if v0 != v1 then goto L45facc;
  #L45fac0.  v0:= v2.`io.reactivex.processors.AsyncProcessor.d` @type ^`java.lang.Object` @kind object;
  #L45fac4.  if v0 == 0 then goto L45facc;
  #L45fac8.  v0:= 1I;
  #L45faca.  goto L45face;
  #L45facc.  v0:= 0I;
  #L45face.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.processors.AsyncProcessor` v5 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45fc80.  v0:= v5.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45fc84.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45fc8a.  v0:= temp @kind object;
  #L45fc8c.  v1:= `@@io.reactivex.processors.AsyncProcessor.f` @type ^`io.reactivex.processors.AsyncProcessor$a`[] @kind object;
  #L45fc90.  if v0 != v1 then goto L45fc96;
  #L45fc94.  return @kind void;
  #L45fc96.  v0:= v5.`io.reactivex.processors.AsyncProcessor.d` @type ^`java.lang.Object` @kind object;
  #L45fc9a.  v2:= v5.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45fc9e.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L45fca4.  v1:= temp @kind object;
  #L45fca6.  v1:= (`io.reactivex.processors.AsyncProcessor$a`[]) v1 @kind object;
  #L45fcaa.  v2:= 0I;
  #L45fcac.  if v0 != 0 then goto L45fcc6;
  #L45fcb0.  v0:= length @variable v1;
  #L45fcb2.  if v2 >= v0 then goto L45fcdc;
  #L45fcb6.  v3:= v1[v2] @kind object;
  #L45fcba.  call `onComplete`(v3) @signature `Lio/reactivex/processors/AsyncProcessor$a;.onComplete:()V` @kind virtual;
  #L45fcc0.  v2:= v2 + 1;
  #L45fcc4.  goto L45fcb2;
  #L45fcc6.  v3:= length @variable v1;
  #L45fcc8.  if v2 >= v3 then goto L45fcdc;
  #L45fccc.  v4:= v1[v2] @kind object;
  #L45fcd0.  call `complete`(v4, v0) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L45fcd6.  v2:= v2 + 1;
  #L45fcda.  goto L45fcc8;
  #L45fcdc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.processors.AsyncProcessor` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/processors/AsyncProcessor;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45fcf0.  if v5 != 0 then goto L45fd02;
  #L45fcf4.  v5:= new `java.lang.NullPointerException`;
  #L45fcf8.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L45fcfc.  call `<init>`(v5, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45fd02.  v0:= v4.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45fd06.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45fd0c.  v0:= temp @kind object;
  #L45fd0e.  v1:= `@@io.reactivex.processors.AsyncProcessor.f` @type ^`io.reactivex.processors.AsyncProcessor$a`[] @kind object;
  #L45fd12.  if v0 != v1 then goto L45fd1e;
  #L45fd16.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45fd1c.  return @kind void;
  #L45fd1e.  v0:= 0I;
  #L45fd20.  v4.`io.reactivex.processors.AsyncProcessor.d` @type ^`java.lang.Object` := v0 @kind object;
  #L45fd24.  v4.`io.reactivex.processors.AsyncProcessor.c` @type ^`java.lang.Throwable` := v5 @kind object;
  #L45fd28.  v0:= v4.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45fd2c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L45fd32.  v0:= temp @kind object;
  #L45fd34.  v0:= (`io.reactivex.processors.AsyncProcessor$a`[]) v0 @kind object;
  #L45fd38.  v1:= length @variable v0;
  #L45fd3a.  v2:= 0I;
  #L45fd3c.  if v2 >= v1 then goto L45fd50;
  #L45fd40.  v3:= v0[v2] @kind object;
  #L45fd44.  call `onError`(v3, v5) @signature `Lio/reactivex/processors/AsyncProcessor$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L45fd4a.  v2:= v2 + 1;
  #L45fd4e.  goto L45fd3c;
  #L45fd50.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.processors.AsyncProcessor` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/processors/AsyncProcessor;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45fd64.  v0:= v2.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45fd68.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45fd6e.  v0:= temp @kind object;
  #L45fd70.  v1:= `@@io.reactivex.processors.AsyncProcessor.f` @type ^`io.reactivex.processors.AsyncProcessor$a`[] @kind object;
  #L45fd74.  if v0 != v1 then goto L45fd7a;
  #L45fd78.  return @kind void;
  #L45fd7a.  if v3 != 0 then goto L45fd86;
  #L45fd7e.  call `f`(v2) @signature `Lio/reactivex/processors/AsyncProcessor;.f:()V` @kind virtual;
  #L45fd84.  return @kind void;
  #L45fd86.  v2.`io.reactivex.processors.AsyncProcessor.d` @type ^`java.lang.Object` := v3 @kind object;
  #L45fd8a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.processors.AsyncProcessor` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/processors/AsyncProcessor;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45fd9c.  v0:= v2.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45fda0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45fda6.  v0:= temp @kind object;
  #L45fda8.  v1:= `@@io.reactivex.processors.AsyncProcessor.f` @type ^`io.reactivex.processors.AsyncProcessor$a`[] @kind object;
  #L45fdac.  if v0 != v1 then goto L45fdb8;
  #L45fdb0.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L45fdb6.  return @kind void;
  #L45fdb8.  v0:= 9223372036854775807L;
  #L45fdc2.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L45fdc8.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.processors.AsyncProcessor` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/processors/AsyncProcessor;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L45fe64.  v0:= new `io.reactivex.processors.AsyncProcessor$a`;
  #L45fe68.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/processors/AsyncProcessor$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/processors/AsyncProcessor;)V` @kind direct;
  #L45fe6e.  call `onSubscribe`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L45fe74.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/processors/AsyncProcessor;.e:(Lio/reactivex/processors/AsyncProcessor$a;)Z` @kind virtual;
  #L45fe7a.  v1:= temp;
  #L45fe7c.  if v1 == 0 then goto L45fe94;
  #L45fe80.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.isCancelled:()Z` @kind virtual;
  #L45fe86.  v3:= temp;
  #L45fe88.  if v3 == 0 then goto L45feba;
  #L45fe8c.  call `g`(v2, v0) @signature `Lio/reactivex/processors/AsyncProcessor;.g:(Lio/reactivex/processors/AsyncProcessor$a;)V` @kind virtual;
  #L45fe92.  goto L45feba;
  #L45fe94.  v1:= v2.`io.reactivex.processors.AsyncProcessor.c` @type ^`java.lang.Throwable` @kind object;
  #L45fe98.  if v1 == 0 then goto L45fea4;
  #L45fe9c.  call `onError`(v3, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45fea2.  goto L45feba;
  #L45fea4.  v3:= v2.`io.reactivex.processors.AsyncProcessor.d` @type ^`java.lang.Object` @kind object;
  #L45fea8.  if v3 == 0 then goto L45feb4;
  #L45feac.  call `complete`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L45feb2.  goto L45feba;
  #L45feb4.  call `onComplete`(v0) @signature `Lio/reactivex/processors/AsyncProcessor$a;.onComplete:()V` @kind virtual;
  #L45feba.  return @kind void;
}
