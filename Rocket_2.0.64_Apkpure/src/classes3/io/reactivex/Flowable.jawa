record `io.reactivex.Flowable` @kind class @AccessFlag PUBLIC_ABSTRACT extends `org.reactivestreams.Publisher` @kind interface {
}
global `int` `@@io.reactivex.Flowable.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/Flowable;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3f5d68.  v0:= "rx2.buffer-size" @kind object;
  #L3f5d6c.  v1:= 128I;
  #L3f5d70.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L3f5d76.  v0:= temp @kind object;
  #L3f5d78.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L3f5d7e.  v0:= temp;
  #L3f5d80.  v1:= 16I;
  #L3f5d84.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L3f5d8a.  v0:= temp;
  #L3f5d8c.  `@@io.reactivex.Flowable.a` @type ^`int` := v0;
  #L3f5d90.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.Flowable` v0 @kind this) @signature `Lio/reactivex/Flowable;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f5da4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f5daa.  return @kind void;
}
procedure `io.reactivex.Flowable` `a`(`io.reactivex.Flowable` v7 @kind this, `io.reactivex.functions.Consumer` v8 @kind object, `io.reactivex.functions.Consumer` v9 @kind object, `io.reactivex.functions.Action` v10 @kind object, `io.reactivex.functions.Action` v11 @kind object) @signature `Lio/reactivex/Flowable;.a:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f10f4.  v0:= "onNext is null" @kind object;
  #L3f10f8.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f10fe.  v0:= "onError is null" @kind object;
  #L3f1102.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1108.  v0:= "onComplete is null" @kind object;
  #L3f110c.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1112.  v0:= "onAfterTerminate is null" @kind object;
  #L3f1116.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f111c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDoOnEach`;
  #L3f1120.  v1:= v0 @kind object;
  #L3f1122.  v2:= v7 @kind object;
  #L3f1124.  v3:= v8 @kind object;
  #L3f1126.  v4:= v9 @kind object;
  #L3f1128.  v5:= v10 @kind object;
  #L3f112a.  v6:= v11 @kind object;
  #L3f112c.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)V` @kind direct;
  #L3f1132.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f1138.  v8:= temp @kind object;
  #L3f113a.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `amb`(`java.lang.Iterable` v2 @kind object) @signature `Lio/reactivex/Flowable;.amb:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3ef994.  v0:= "sources is null" @kind object;
  #L3ef998.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3ef99e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableAmb`;
  #L3ef9a2.  v1:= 0I;
  #L3ef9a4.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb;.<init>:([Lorg/reactivestreams/Publisher;Ljava/lang/Iterable;)V` @kind direct;
  #L3ef9aa.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3ef9b0.  v2:= temp @kind object;
  #L3ef9b2.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `ambArray`(`org.reactivestreams.Publisher`[] v2 @kind object) @signature `Lio/reactivex/Flowable;.ambArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3ef9c4.  v0:= "sources is null" @kind object;
  #L3ef9c8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3ef9ce.  v0:= length @variable v2;
  #L3ef9d0.  if v0 != 0 then goto L3ef9de;
  #L3ef9d4.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3ef9da.  v2:= temp @kind object;
  #L3ef9dc.  return v2 @kind object;
  #L3ef9de.  v1:= 1I;
  #L3ef9e0.  if v0 != v1 then goto L3ef9f4;
  #L3ef9e4.  v0:= 0I;
  #L3ef9e6.  v2:= v2[v0] @kind object;
  #L3ef9ea.  call temp:= `fromPublisher`(v2) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3ef9f0.  v2:= temp @kind object;
  #L3ef9f2.  return v2 @kind object;
  #L3ef9f4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableAmb`;
  #L3ef9f8.  v1:= 0I;
  #L3ef9fa.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb;.<init>:([Lorg/reactivestreams/Publisher;Ljava/lang/Iterable;)V` @kind direct;
  #L3efa00.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3efa06.  v2:= temp @kind object;
  #L3efa08.  return v2 @kind object;
}
procedure `int` `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3ef8fc.  v0:= `@@io.reactivex.Flowable.a` @type ^`int`;
  #L3ef900.  return v0;
}
procedure `io.reactivex.Flowable` `c`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `org.reactivestreams.Publisher` v12 @kind object, `io.reactivex.Scheduler` v13 @kind object) @signature `Lio/reactivex/Flowable;.c:(JLjava/util/concurrent/TimeUnit;Lorg/reactivestreams/Publisher;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f4060.  v0:= "timeUnit is null" @kind object;
  #L3f4064.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f406a.  v0:= "scheduler is null" @kind object;
  #L3f406e.  call temp:= `requireNonNull`(v13, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4074.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed`;
  #L3f4078.  v1:= v0 @kind object;
  #L3f407a.  v2:= v8 @kind object;
  #L3f407c.  v3:= v9 @kind wide;
  #L3f407e.  v5:= v11 @kind object;
  #L3f4080.  v6:= v13 @kind object;
  #L3f4082.  v7:= v12 @kind object;
  #L3f4084.  call `<init>`(v1, v2, v3, v5, v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed;.<init>:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3f408a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f4090.  v9:= temp @kind object;
  #L3f4092.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`io.reactivex.functions.Function` v1 @kind object, `org.reactivestreams.Publisher`[] v2 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3efea4.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3efeaa.  v0:= temp;
  #L3efeac.  call temp:= `combineLatest`(v2, v1, v0) @signature `Lio/reactivex/Flowable;.combineLatest:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind static;
  #L3efeb2.  v1:= temp @kind object;
  #L3efeb4.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`java.lang.Iterable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3efec8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3efece.  v0:= temp;
  #L3efed0.  call temp:= `combineLatest`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.combineLatest:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind static;
  #L3efed6.  v1:= temp @kind object;
  #L3efed8.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`java.lang.Iterable` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.combineLatest:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3efeec.  v0:= "sources is null" @kind object;
  #L3efef0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3efef6.  v0:= "combiner is null" @kind object;
  #L3efefa.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3eff00.  v0:= "bufferSize" @kind object;
  #L3eff04.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3eff0a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCombineLatest`;
  #L3eff0e.  v1:= 0I;
  #L3eff10.  call `<init>`(v0, v2, v3, v4, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest;.<init>:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L3eff16.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3eff1c.  v2:= temp @kind object;
  #L3eff1e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `io.reactivex.functions.BiFunction` v4 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3eff30.  v0:= "source1 is null" @kind object;
  #L3eff34.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3eff3a.  v0:= "source2 is null" @kind object;
  #L3eff3e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3eff44.  call temp:= `toFunction`(v4) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/BiFunction;)Lio/reactivex/functions/Function;` @kind static;
  #L3eff4a.  v4:= temp @kind object;
  #L3eff4c.  v0:= 2I;
  #L3eff4e.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3eff52.  v1:= 0I;
  #L3eff54.  v0[v1]:= v2 @kind object;
  #L3eff58.  v2:= 1I;
  #L3eff5a.  v0[v2]:= v3 @kind object;
  #L3eff5e.  call temp:= `combineLatest`(v4, v0) @signature `Lio/reactivex/Flowable;.combineLatest:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3eff64.  v2:= temp @kind object;
  #L3eff66.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `io.reactivex.functions.Function3` v5 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function3;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3eff78.  v0:= "source1 is null" @kind object;
  #L3eff7c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3eff82.  v0:= "source2 is null" @kind object;
  #L3eff86.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3eff8c.  v0:= "source3 is null" @kind object;
  #L3eff90.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3eff96.  call temp:= `toFunction`(v5) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function3;)Lio/reactivex/functions/Function;` @kind static;
  #L3eff9c.  v5:= temp @kind object;
  #L3eff9e.  v0:= 3I;
  #L3effa0.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3effa4.  v1:= 0I;
  #L3effa6.  v0[v1]:= v2 @kind object;
  #L3effaa.  v2:= 1I;
  #L3effac.  v0[v2]:= v3 @kind object;
  #L3effb0.  v2:= 2I;
  #L3effb2.  v0[v2]:= v4 @kind object;
  #L3effb6.  call temp:= `combineLatest`(v5, v0) @signature `Lio/reactivex/Flowable;.combineLatest:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3effbc.  v2:= temp @kind object;
  #L3effbe.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `io.reactivex.functions.Function4` v6 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function4;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3effd0.  v0:= "source1 is null" @kind object;
  #L3effd4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3effda.  v0:= "source2 is null" @kind object;
  #L3effde.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3effe4.  v0:= "source3 is null" @kind object;
  #L3effe8.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3effee.  v0:= "source4 is null" @kind object;
  #L3efff2.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3efff8.  call temp:= `toFunction`(v6) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function4;)Lio/reactivex/functions/Function;` @kind static;
  #L3efffe.  v6:= temp @kind object;
  #L3f0000.  v0:= 4I;
  #L3f0002.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3f0006.  v1:= 0I;
  #L3f0008.  v0[v1]:= v2 @kind object;
  #L3f000c.  v2:= 1I;
  #L3f000e.  v0[v2]:= v3 @kind object;
  #L3f0012.  v2:= 2I;
  #L3f0014.  v0[v2]:= v4 @kind object;
  #L3f0018.  v2:= 3I;
  #L3f001a.  v0[v2]:= v5 @kind object;
  #L3f001e.  call temp:= `combineLatest`(v6, v0) @signature `Lio/reactivex/Flowable;.combineLatest:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f0024.  v2:= temp @kind object;
  #L3f0026.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `io.reactivex.functions.Function5` v7 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function5;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f0038.  v0:= "source1 is null" @kind object;
  #L3f003c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0042.  v0:= "source2 is null" @kind object;
  #L3f0046.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f004c.  v0:= "source3 is null" @kind object;
  #L3f0050.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0056.  v0:= "source4 is null" @kind object;
  #L3f005a.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0060.  v0:= "source5 is null" @kind object;
  #L3f0064.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f006a.  call temp:= `toFunction`(v7) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function5;)Lio/reactivex/functions/Function;` @kind static;
  #L3f0070.  v7:= temp @kind object;
  #L3f0072.  v0:= 5I;
  #L3f0074.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3f0078.  v1:= 0I;
  #L3f007a.  v0[v1]:= v2 @kind object;
  #L3f007e.  v2:= 1I;
  #L3f0080.  v0[v2]:= v3 @kind object;
  #L3f0084.  v2:= 2I;
  #L3f0086.  v0[v2]:= v4 @kind object;
  #L3f008a.  v2:= 3I;
  #L3f008c.  v0[v2]:= v5 @kind object;
  #L3f0090.  v2:= 4I;
  #L3f0092.  v0[v2]:= v6 @kind object;
  #L3f0096.  call temp:= `combineLatest`(v7, v0) @signature `Lio/reactivex/Flowable;.combineLatest:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f009c.  v2:= temp @kind object;
  #L3f009e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object, `io.reactivex.functions.Function6` v8 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function6;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f00b0.  v0:= "source1 is null" @kind object;
  #L3f00b4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f00ba.  v0:= "source2 is null" @kind object;
  #L3f00be.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f00c4.  v0:= "source3 is null" @kind object;
  #L3f00c8.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f00ce.  v0:= "source4 is null" @kind object;
  #L3f00d2.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f00d8.  v0:= "source5 is null" @kind object;
  #L3f00dc.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f00e2.  v0:= "source6 is null" @kind object;
  #L3f00e6.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f00ec.  call temp:= `toFunction`(v8) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function6;)Lio/reactivex/functions/Function;` @kind static;
  #L3f00f2.  v8:= temp @kind object;
  #L3f00f4.  v0:= 6I;
  #L3f00f6.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3f00fa.  v1:= 0I;
  #L3f00fc.  v0[v1]:= v2 @kind object;
  #L3f0100.  v2:= 1I;
  #L3f0102.  v0[v2]:= v3 @kind object;
  #L3f0106.  v2:= 2I;
  #L3f0108.  v0[v2]:= v4 @kind object;
  #L3f010c.  v2:= 3I;
  #L3f010e.  v0[v2]:= v5 @kind object;
  #L3f0112.  v2:= 4I;
  #L3f0114.  v0[v2]:= v6 @kind object;
  #L3f0118.  v2:= 5I;
  #L3f011a.  v0[v2]:= v7 @kind object;
  #L3f011e.  call temp:= `combineLatest`(v8, v0) @signature `Lio/reactivex/Flowable;.combineLatest:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f0124.  v2:= temp @kind object;
  #L3f0126.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object, `org.reactivestreams.Publisher` v8 @kind object, `io.reactivex.functions.Function7` v9 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function7;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f0138.  v0:= "source1 is null" @kind object;
  #L3f013c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0142.  v0:= "source2 is null" @kind object;
  #L3f0146.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f014c.  v0:= "source3 is null" @kind object;
  #L3f0150.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0156.  v0:= "source4 is null" @kind object;
  #L3f015a.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0160.  v0:= "source5 is null" @kind object;
  #L3f0164.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f016a.  v0:= "source6 is null" @kind object;
  #L3f016e.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0174.  v0:= "source7 is null" @kind object;
  #L3f0178.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f017e.  call temp:= `toFunction`(v9) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function7;)Lio/reactivex/functions/Function;` @kind static;
  #L3f0184.  v9:= temp @kind object;
  #L3f0186.  v0:= 7I;
  #L3f0188.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3f018c.  v1:= 0I;
  #L3f018e.  v0[v1]:= v2 @kind object;
  #L3f0192.  v2:= 1I;
  #L3f0194.  v0[v2]:= v3 @kind object;
  #L3f0198.  v2:= 2I;
  #L3f019a.  v0[v2]:= v4 @kind object;
  #L3f019e.  v2:= 3I;
  #L3f01a0.  v0[v2]:= v5 @kind object;
  #L3f01a4.  v2:= 4I;
  #L3f01a6.  v0[v2]:= v6 @kind object;
  #L3f01aa.  v2:= 5I;
  #L3f01ac.  v0[v2]:= v7 @kind object;
  #L3f01b0.  v2:= 6I;
  #L3f01b2.  v0[v2]:= v8 @kind object;
  #L3f01b6.  call temp:= `combineLatest`(v9, v0) @signature `Lio/reactivex/Flowable;.combineLatest:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f01bc.  v2:= temp @kind object;
  #L3f01be.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object, `org.reactivestreams.Publisher` v8 @kind object, `org.reactivestreams.Publisher` v9 @kind object, `io.reactivex.functions.Function8` v10 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function8;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f01d0.  v0:= "source1 is null" @kind object;
  #L3f01d4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f01da.  v0:= "source2 is null" @kind object;
  #L3f01de.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f01e4.  v0:= "source3 is null" @kind object;
  #L3f01e8.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f01ee.  v0:= "source4 is null" @kind object;
  #L3f01f2.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f01f8.  v0:= "source5 is null" @kind object;
  #L3f01fc.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0202.  v0:= "source6 is null" @kind object;
  #L3f0206.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f020c.  v0:= "source7 is null" @kind object;
  #L3f0210.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0216.  v0:= "source8 is null" @kind object;
  #L3f021a.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0220.  call temp:= `toFunction`(v10) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function8;)Lio/reactivex/functions/Function;` @kind static;
  #L3f0226.  v10:= temp @kind object;
  #L3f0228.  v0:= 8I;
  #L3f022c.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3f0230.  v1:= 0I;
  #L3f0232.  v0[v1]:= v2 @kind object;
  #L3f0236.  v2:= 1I;
  #L3f0238.  v0[v2]:= v3 @kind object;
  #L3f023c.  v2:= 2I;
  #L3f023e.  v0[v2]:= v4 @kind object;
  #L3f0242.  v2:= 3I;
  #L3f0244.  v0[v2]:= v5 @kind object;
  #L3f0248.  v2:= 4I;
  #L3f024a.  v0[v2]:= v6 @kind object;
  #L3f024e.  v2:= 5I;
  #L3f0250.  v0[v2]:= v7 @kind object;
  #L3f0254.  v2:= 6I;
  #L3f0256.  v0[v2]:= v8 @kind object;
  #L3f025a.  v2:= 7I;
  #L3f025c.  v0[v2]:= v9 @kind object;
  #L3f0260.  call temp:= `combineLatest`(v10, v0) @signature `Lio/reactivex/Flowable;.combineLatest:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f0266.  v2:= temp @kind object;
  #L3f0268.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object, `org.reactivestreams.Publisher` v8 @kind object, `org.reactivestreams.Publisher` v9 @kind object, `org.reactivestreams.Publisher` v10 @kind object, `io.reactivex.functions.Function9` v11 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function9;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f027c.  v0:= "source1 is null" @kind object;
  #L3f0280.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0286.  v0:= "source2 is null" @kind object;
  #L3f028a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0290.  v0:= "source3 is null" @kind object;
  #L3f0294.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f029a.  v0:= "source4 is null" @kind object;
  #L3f029e.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f02a4.  v0:= "source5 is null" @kind object;
  #L3f02a8.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f02ae.  v0:= "source6 is null" @kind object;
  #L3f02b2.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f02b8.  v0:= "source7 is null" @kind object;
  #L3f02bc.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f02c2.  v0:= "source8 is null" @kind object;
  #L3f02c6.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f02cc.  v0:= "source9 is null" @kind object;
  #L3f02d0.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f02d6.  call temp:= `toFunction`(v11) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function9;)Lio/reactivex/functions/Function;` @kind static;
  #L3f02dc.  v11:= temp @kind object;
  #L3f02de.  v0:= 9I;
  #L3f02e2.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3f02e6.  v1:= 0I;
  #L3f02e8.  v0[v1]:= v2 @kind object;
  #L3f02ec.  v2:= 1I;
  #L3f02ee.  v0[v2]:= v3 @kind object;
  #L3f02f2.  v2:= 2I;
  #L3f02f4.  v0[v2]:= v4 @kind object;
  #L3f02f8.  v2:= 3I;
  #L3f02fa.  v0[v2]:= v5 @kind object;
  #L3f02fe.  v2:= 4I;
  #L3f0300.  v0[v2]:= v6 @kind object;
  #L3f0304.  v2:= 5I;
  #L3f0306.  v0[v2]:= v7 @kind object;
  #L3f030a.  v2:= 6I;
  #L3f030c.  v0[v2]:= v8 @kind object;
  #L3f0310.  v2:= 7I;
  #L3f0312.  v0[v2]:= v9 @kind object;
  #L3f0316.  v2:= 8I;
  #L3f031a.  v0[v2]:= v10 @kind object;
  #L3f031e.  call temp:= `combineLatest`(v11, v0) @signature `Lio/reactivex/Flowable;.combineLatest:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f0324.  v2:= temp @kind object;
  #L3f0326.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher`[] v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f0338.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f033e.  v0:= temp;
  #L3f0340.  call temp:= `combineLatest`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.combineLatest:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind static;
  #L3f0346.  v1:= temp @kind object;
  #L3f0348.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher`[] v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.combineLatest:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f035c.  v0:= "sources is null" @kind object;
  #L3f0360.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0366.  v0:= length @variable v2;
  #L3f0368.  if v0 != 0 then goto L3f0376;
  #L3f036c.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3f0372.  v2:= temp @kind object;
  #L3f0374.  return v2 @kind object;
  #L3f0376.  v0:= "combiner is null" @kind object;
  #L3f037a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0380.  v0:= "bufferSize" @kind object;
  #L3f0384.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f038a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCombineLatest`;
  #L3f038e.  v1:= 0I;
  #L3f0390.  call `<init>`(v0, v2, v3, v4, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest;.<init>:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L3f0396.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f039c.  v2:= temp @kind object;
  #L3f039e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatestDelayError`(`io.reactivex.functions.Function` v0 @kind object, `int` v1 , `org.reactivestreams.Publisher`[] v2 @kind object) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:(Lio/reactivex/functions/Function;I[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3f03b0.  call temp:= `combineLatestDelayError`(v2, v0, v1) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind static;
  #L3f03b6.  v0:= temp @kind object;
  #L3f03b8.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatestDelayError`(`io.reactivex.functions.Function` v1 @kind object, `org.reactivestreams.Publisher`[] v2 @kind object) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f03cc.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f03d2.  v0:= temp;
  #L3f03d4.  call temp:= `combineLatestDelayError`(v2, v1, v0) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind static;
  #L3f03da.  v1:= temp @kind object;
  #L3f03dc.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatestDelayError`(`java.lang.Iterable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f03f0.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f03f6.  v0:= temp;
  #L3f03f8.  call temp:= `combineLatestDelayError`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind static;
  #L3f03fe.  v1:= temp @kind object;
  #L3f0400.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatestDelayError`(`java.lang.Iterable` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f0414.  v0:= "sources is null" @kind object;
  #L3f0418.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f041e.  v0:= "combiner is null" @kind object;
  #L3f0422.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0428.  v0:= "bufferSize" @kind object;
  #L3f042c.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f0432.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCombineLatest`;
  #L3f0436.  v1:= 1I;
  #L3f0438.  call `<init>`(v0, v2, v3, v4, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest;.<init>:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L3f043e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f0444.  v2:= temp @kind object;
  #L3f0446.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatestDelayError`(`org.reactivestreams.Publisher`[] v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f0458.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f045e.  v0:= temp;
  #L3f0460.  call temp:= `combineLatestDelayError`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind static;
  #L3f0466.  v1:= temp @kind object;
  #L3f0468.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatestDelayError`(`org.reactivestreams.Publisher`[] v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f047c.  v0:= "sources is null" @kind object;
  #L3f0480.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0486.  v0:= "combiner is null" @kind object;
  #L3f048a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0490.  v0:= "bufferSize" @kind object;
  #L3f0494.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f049a.  v0:= length @variable v2;
  #L3f049c.  if v0 != 0 then goto L3f04aa;
  #L3f04a0.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3f04a6.  v2:= temp @kind object;
  #L3f04a8.  return v2 @kind object;
  #L3f04aa.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCombineLatest`;
  #L3f04ae.  v1:= 1I;
  #L3f04b0.  call `<init>`(v0, v2, v3, v4, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest;.<init>:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L3f04b6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f04bc.  v2:= temp @kind object;
  #L3f04be.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`java.lang.Iterable` v3 @kind object) @signature `Lio/reactivex/Flowable;.concat:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f0504.  v0:= "sources is null" @kind object;
  #L3f0508.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f050e.  call temp:= `fromIterable`(v3) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L3f0514.  v3:= temp @kind object;
  #L3f0516.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f051c.  v0:= temp @kind object;
  #L3f051e.  v1:= 2I;
  #L3f0520.  v2:= 0I;
  #L3f0522.  call temp:= `concatMapDelayError`(v3, v0, v1, v2) @signature `Lio/reactivex/Flowable;.concatMapDelayError:(Lio/reactivex/functions/Function;IZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3f0528.  v3:= temp @kind object;
  #L3f052a.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Flowable;.concat:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f053c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f0542.  v0:= temp;
  #L3f0544.  call temp:= `concat`(v1, v0) @signature `Lio/reactivex/Flowable;.concat:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @kind static;
  #L3f054a.  v1:= temp @kind object;
  #L3f054c.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`org.reactivestreams.Publisher` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/Flowable;.concat:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f0560.  call temp:= `fromPublisher`(v1) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f0566.  v1:= temp @kind object;
  #L3f0568.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f056e.  v0:= temp @kind object;
  #L3f0570.  call temp:= `concatMap`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.concatMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3f0576.  v1:= temp @kind object;
  #L3f0578.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/Flowable;.concat:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f058c.  v0:= "source1 is null" @kind object;
  #L3f0590.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0596.  v0:= "source2 is null" @kind object;
  #L3f059a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f05a0.  v0:= 2I;
  #L3f05a2.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3f05a6.  v1:= 0I;
  #L3f05a8.  v0[v1]:= v2 @kind object;
  #L3f05ac.  v2:= 1I;
  #L3f05ae.  v0[v2]:= v3 @kind object;
  #L3f05b2.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Flowable;.concatArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f05b8.  v2:= temp @kind object;
  #L3f05ba.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/Flowable;.concat:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f05cc.  v0:= "source1 is null" @kind object;
  #L3f05d0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f05d6.  v0:= "source2 is null" @kind object;
  #L3f05da.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f05e0.  v0:= "source3 is null" @kind object;
  #L3f05e4.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f05ea.  v0:= 3I;
  #L3f05ec.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3f05f0.  v1:= 0I;
  #L3f05f2.  v0[v1]:= v2 @kind object;
  #L3f05f6.  v2:= 1I;
  #L3f05f8.  v0[v2]:= v3 @kind object;
  #L3f05fc.  v2:= 2I;
  #L3f05fe.  v0[v2]:= v4 @kind object;
  #L3f0602.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Flowable;.concatArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f0608.  v2:= temp @kind object;
  #L3f060a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object) @signature `Lio/reactivex/Flowable;.concat:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f061c.  v0:= "source1 is null" @kind object;
  #L3f0620.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0626.  v0:= "source2 is null" @kind object;
  #L3f062a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0630.  v0:= "source3 is null" @kind object;
  #L3f0634.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f063a.  v0:= "source4 is null" @kind object;
  #L3f063e.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0644.  v0:= 4I;
  #L3f0646.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3f064a.  v1:= 0I;
  #L3f064c.  v0[v1]:= v2 @kind object;
  #L3f0650.  v2:= 1I;
  #L3f0652.  v0[v2]:= v3 @kind object;
  #L3f0656.  v2:= 2I;
  #L3f0658.  v0[v2]:= v4 @kind object;
  #L3f065c.  v2:= 3I;
  #L3f065e.  v0[v2]:= v5 @kind object;
  #L3f0662.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Flowable;.concatArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f0668.  v2:= temp @kind object;
  #L3f066a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatArray`(`org.reactivestreams.Publisher`[] v3 @kind object) @signature `Lio/reactivex/Flowable;.concatArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f067c.  v0:= length @variable v3;
  #L3f067e.  if v0 != 0 then goto L3f068c;
  #L3f0682.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3f0688.  v3:= temp @kind object;
  #L3f068a.  return v3 @kind object;
  #L3f068c.  v0:= length @variable v3;
  #L3f068e.  v1:= 1I;
  #L3f0690.  v2:= 0I;
  #L3f0692.  if v0 != v1 then goto L3f06a4;
  #L3f0696.  v3:= v3[v2] @kind object;
  #L3f069a.  call temp:= `fromPublisher`(v3) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f06a0.  v3:= temp @kind object;
  #L3f06a2.  return v3 @kind object;
  #L3f06a4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatArray`;
  #L3f06a8.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray;.<init>:([Lorg/reactivestreams/Publisher;Z)V` @kind direct;
  #L3f06ae.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f06b4.  v3:= temp @kind object;
  #L3f06b6.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `concatArrayDelayError`(`org.reactivestreams.Publisher`[] v2 @kind object) @signature `Lio/reactivex/Flowable;.concatArrayDelayError:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f06c8.  v0:= length @variable v2;
  #L3f06ca.  if v0 != 0 then goto L3f06d8;
  #L3f06ce.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3f06d4.  v2:= temp @kind object;
  #L3f06d6.  return v2 @kind object;
  #L3f06d8.  v0:= length @variable v2;
  #L3f06da.  v1:= 1I;
  #L3f06dc.  if v0 != v1 then goto L3f06f0;
  #L3f06e0.  v0:= 0I;
  #L3f06e2.  v2:= v2[v0] @kind object;
  #L3f06e6.  call temp:= `fromPublisher`(v2) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f06ec.  v2:= temp @kind object;
  #L3f06ee.  return v2 @kind object;
  #L3f06f0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatArray`;
  #L3f06f4.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray;.<init>:([Lorg/reactivestreams/Publisher;Z)V` @kind direct;
  #L3f06fa.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f0700.  v2:= temp @kind object;
  #L3f0702.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatArrayEager`(`int` v7 , `int` v8 , `org.reactivestreams.Publisher`[] v9 @kind object) @signature `Lio/reactivex/Flowable;.concatArrayEager:(II[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f0714.  v0:= "sources is null" @kind object;
  #L3f0718.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f071e.  v0:= "maxConcurrency" @kind object;
  #L3f0722.  call temp:= `verifyPositive`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f0728.  v0:= "prefetch" @kind object;
  #L3f072c.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f0732.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatMapEager`;
  #L3f0736.  v2:= new `io.reactivex.internal.operators.flowable.FlowableFromArray`;
  #L3f073a.  call `<init>`(v2, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray;.<init>:([Ljava/lang/Object;)V` @kind direct;
  #L3f0740.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f0746.  v3:= temp @kind object;
  #L3f0748.  v6:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3f074c.  v1:= v0 @kind object;
  #L3f074e.  v4:= v7;
  #L3f0750.  v5:= v8;
  #L3f0752.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;IILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L3f0758.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f075e.  v7:= temp @kind object;
  #L3f0760.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `concatArrayEager`(`org.reactivestreams.Publisher`[] v2 @kind object) @signature `Lio/reactivex/Flowable;.concatArrayEager:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f0774.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f077a.  v0:= temp;
  #L3f077c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f0782.  v1:= temp;
  #L3f0784.  call temp:= `concatArrayEager`(v0, v1, v2) @signature `Lio/reactivex/Flowable;.concatArrayEager:(II[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f078a.  v2:= temp @kind object;
  #L3f078c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatDelayError`(`java.lang.Iterable` v1 @kind object) @signature `Lio/reactivex/Flowable;.concatDelayError:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f07a0.  v0:= "sources is null" @kind object;
  #L3f07a4.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f07aa.  call temp:= `fromIterable`(v1) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L3f07b0.  v1:= temp @kind object;
  #L3f07b2.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f07b8.  v0:= temp @kind object;
  #L3f07ba.  call temp:= `concatMapDelayError`(v1, v0) @signature `Lio/reactivex/Flowable;.concatMapDelayError:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f07c0.  v1:= temp @kind object;
  #L3f07c2.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concatDelayError`(`org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatDelayError:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f07d4.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f07da.  v0:= temp;
  #L3f07dc.  v1:= 1I;
  #L3f07de.  call temp:= `concatDelayError`(v2, v0, v1) @signature `Lio/reactivex/Flowable;.concatDelayError:(Lorg/reactivestreams/Publisher;IZ)Lio/reactivex/Flowable;` @kind static;
  #L3f07e4.  v2:= temp @kind object;
  #L3f07e6.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatDelayError`(`org.reactivestreams.Publisher` v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Lio/reactivex/Flowable;.concatDelayError:(Lorg/reactivestreams/Publisher;IZ)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f07f8.  call temp:= `fromPublisher`(v1) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f07fe.  v1:= temp @kind object;
  #L3f0800.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f0806.  v0:= temp @kind object;
  #L3f0808.  call temp:= `concatMapDelayError`(v1, v0, v2, v3) @signature `Lio/reactivex/Flowable;.concatMapDelayError:(Lio/reactivex/functions/Function;IZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3f080e.  v1:= temp @kind object;
  #L3f0810.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concatEager`(`java.lang.Iterable` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatEager:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f0824.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f082a.  v0:= temp;
  #L3f082c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f0832.  v1:= temp;
  #L3f0834.  call temp:= `concatEager`(v2, v0, v1) @signature `Lio/reactivex/Flowable;.concatEager:(Ljava/lang/Iterable;II)Lio/reactivex/Flowable;` @kind static;
  #L3f083a.  v2:= temp @kind object;
  #L3f083c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatEager`(`java.lang.Iterable` v7 @kind object, `int` v8 , `int` v9 ) @signature `Lio/reactivex/Flowable;.concatEager:(Ljava/lang/Iterable;II)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f0850.  v0:= "sources is null" @kind object;
  #L3f0854.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f085a.  v0:= "maxConcurrency" @kind object;
  #L3f085e.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f0864.  v0:= "prefetch" @kind object;
  #L3f0868.  call temp:= `verifyPositive`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f086e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatMapEager`;
  #L3f0872.  v2:= new `io.reactivex.internal.operators.flowable.FlowableFromIterable`;
  #L3f0876.  call `<init>`(v2, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L3f087c.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f0882.  v3:= temp @kind object;
  #L3f0884.  v6:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3f0888.  v1:= v0 @kind object;
  #L3f088a.  v4:= v8;
  #L3f088c.  v5:= v9;
  #L3f088e.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;IILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L3f0894.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f089a.  v7:= temp @kind object;
  #L3f089c.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `concatEager`(`org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatEager:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f08b0.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f08b6.  v0:= temp;
  #L3f08b8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f08be.  v1:= temp;
  #L3f08c0.  call temp:= `concatEager`(v2, v0, v1) @signature `Lio/reactivex/Flowable;.concatEager:(Lorg/reactivestreams/Publisher;II)Lio/reactivex/Flowable;` @kind static;
  #L3f08c6.  v2:= temp @kind object;
  #L3f08c8.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatEager`(`org.reactivestreams.Publisher` v7 @kind object, `int` v8 , `int` v9 ) @signature `Lio/reactivex/Flowable;.concatEager:(Lorg/reactivestreams/Publisher;II)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f08dc.  v0:= "sources is null" @kind object;
  #L3f08e0.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f08e6.  v0:= "maxConcurrency" @kind object;
  #L3f08ea.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f08f0.  v0:= "prefetch" @kind object;
  #L3f08f4.  call temp:= `verifyPositive`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f08fa.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatMapEagerPublisher`;
  #L3f08fe.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f0904.  v3:= temp @kind object;
  #L3f0906.  v6:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3f090a.  v1:= v0 @kind object;
  #L3f090c.  v2:= v7 @kind object;
  #L3f090e.  v4:= v8;
  #L3f0910.  v5:= v9;
  #L3f0912.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEagerPublisher;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;IILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L3f0918.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f091e.  v7:= temp @kind object;
  #L3f0920.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `create`(`io.reactivex.FlowableOnSubscribe` v1 @kind object, `io.reactivex.BackpressureStrategy` v2 @kind object) @signature `Lio/reactivex/Flowable;.create:(Lio/reactivex/FlowableOnSubscribe;Lio/reactivex/BackpressureStrategy;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f0bcc.  v0:= "source is null" @kind object;
  #L3f0bd0.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0bd6.  v0:= "mode is null" @kind object;
  #L3f0bda.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0be0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCreate`;
  #L3f0be4.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate;.<init>:(Lio/reactivex/FlowableOnSubscribe;Lio/reactivex/BackpressureStrategy;)V` @kind direct;
  #L3f0bea.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f0bf0.  v1:= temp @kind object;
  #L3f0bf2.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `d`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/Flowable;.d:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f40a4.  v0:= "itemTimeoutIndicator is null" @kind object;
  #L3f40a8.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f40ae.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTimeout`;
  #L3f40b2.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3f40b8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f40be.  v2:= temp @kind object;
  #L3f40c0.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `defer`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/Flowable;.defer:(Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f0cc8.  v0:= "supplier is null" @kind object;
  #L3f0ccc.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0cd2.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDefer`;
  #L3f0cd6.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDefer;.<init>:(Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3f0cdc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f0ce2.  v1:= temp @kind object;
  #L3f0ce4.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f129c.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableEmpty.INSTANCE` @type ^`io.reactivex.Flowable` @kind object;
  #L3f12a0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f12a6.  v0:= temp @kind object;
  #L3f12a8.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `error`(`java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/Flowable;.error:(Ljava/lang/Throwable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f12bc.  v0:= "throwable is null" @kind object;
  #L3f12c0.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f12c6.  call temp:= `justCallable`(v1) @signature `Lio/reactivex/internal/functions/Functions;.justCallable:(Ljava/lang/Object;)Ljava/util/concurrent/Callable;` @kind static;
  #L3f12cc.  v1:= temp @kind object;
  #L3f12ce.  call temp:= `error`(v1) @signature `Lio/reactivex/Flowable;.error:(Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind static;
  #L3f12d4.  v1:= temp @kind object;
  #L3f12d6.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `error`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/Flowable;.error:(Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f12e8.  v0:= "errorSupplier is null" @kind object;
  #L3f12ec.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f12f2.  v0:= new `io.reactivex.internal.operators.flowable.FlowableError`;
  #L3f12f6.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableError;.<init>:(Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3f12fc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f1302.  v1:= temp @kind object;
  #L3f1304.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `fromArray`(`java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f17a0.  v0:= "items is null" @kind object;
  #L3f17a4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f17aa.  v0:= length @variable v2;
  #L3f17ac.  if v0 != 0 then goto L3f17ba;
  #L3f17b0.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3f17b6.  v2:= temp @kind object;
  #L3f17b8.  return v2 @kind object;
  #L3f17ba.  v0:= length @variable v2;
  #L3f17bc.  v1:= 1I;
  #L3f17be.  if v0 != v1 then goto L3f17d2;
  #L3f17c2.  v0:= 0I;
  #L3f17c4.  v2:= v2[v0] @kind object;
  #L3f17c8.  call temp:= `just`(v2) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3f17ce.  v2:= temp @kind object;
  #L3f17d0.  return v2 @kind object;
  #L3f17d2.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromArray`;
  #L3f17d6.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray;.<init>:([Ljava/lang/Object;)V` @kind direct;
  #L3f17dc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f17e2.  v2:= temp @kind object;
  #L3f17e4.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `fromCallable`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/Flowable;.fromCallable:(Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f17f8.  v0:= "supplier is null" @kind object;
  #L3f17fc.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1802.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromCallable`;
  #L3f1806.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromCallable;.<init>:(Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3f180c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f1812.  v1:= temp @kind object;
  #L3f1814.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `fromFuture`(`java.util.concurrent.Future` v4 @kind object) @signature `Lio/reactivex/Flowable;.fromFuture:(Ljava/util/concurrent/Future;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f1828.  v0:= "future is null" @kind object;
  #L3f182c.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1832.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromFuture`;
  #L3f1836.  v1:= 0L;
  #L3f183a.  v3:= 0I;
  #L3f183c.  call `<init>`(v0, v4, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromFuture;.<init>:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L3f1842.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f1848.  v4:= temp @kind object;
  #L3f184a.  return v4 @kind object;
}
procedure `io.reactivex.Flowable` `fromFuture`(`java.util.concurrent.Future` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Flowable;.fromFuture:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f1888.  v0:= "future is null" @kind object;
  #L3f188c.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1892.  v0:= "unit is null" @kind object;
  #L3f1896.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f189c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromFuture`;
  #L3f18a0.  call `<init>`(v0, v1, v2, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromFuture;.<init>:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L3f18a6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f18ac.  v1:= temp @kind object;
  #L3f18ae.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `fromFuture`(`java.util.concurrent.Future` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object) @signature `Lio/reactivex/Flowable;.fromFuture:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f18c0.  v0:= "scheduler is null" @kind object;
  #L3f18c4.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f18ca.  call temp:= `fromFuture`(v1, v2, v4) @signature `Lio/reactivex/Flowable;.fromFuture:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @kind static;
  #L3f18d0.  v1:= temp @kind object;
  #L3f18d2.  call temp:= `subscribeOn`(v1, v5) @signature `Lio/reactivex/Flowable;.subscribeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f18d8.  v1:= temp @kind object;
  #L3f18da.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `fromFuture`(`java.util.concurrent.Future` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/Flowable;.fromFuture:(Ljava/util/concurrent/Future;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f185c.  v0:= "scheduler is null" @kind object;
  #L3f1860.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1866.  call temp:= `fromFuture`(v1) @signature `Lio/reactivex/Flowable;.fromFuture:(Ljava/util/concurrent/Future;)Lio/reactivex/Flowable;` @kind static;
  #L3f186c.  v1:= temp @kind object;
  #L3f186e.  call temp:= `subscribeOn`(v1, v2) @signature `Lio/reactivex/Flowable;.subscribeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f1874.  v1:= temp @kind object;
  #L3f1876.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `fromIterable`(`java.lang.Iterable` v1 @kind object) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f18ec.  v0:= "source is null" @kind object;
  #L3f18f0.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f18f6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromIterable`;
  #L3f18fa.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L3f1900.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f1906.  v1:= temp @kind object;
  #L3f1908.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `fromPublisher`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f191c.  v0:= instanceof @variable v1 @type ^`io.reactivex.Flowable` @kind boolean;
  #L3f1920.  if v0 == 0 then goto L3f1932;
  #L3f1924.  v1:= (`io.reactivex.Flowable`) v1 @kind object;
  #L3f1928.  call temp:= `onAssembly`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f192e.  v1:= temp @kind object;
  #L3f1930.  return v1 @kind object;
  #L3f1932.  v0:= "publisher is null" @kind object;
  #L3f1936.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f193c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromPublisher`;
  #L3f1940.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromPublisher;.<init>:(Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3f1946.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f194c.  v1:= temp @kind object;
  #L3f194e.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `generate`(`io.reactivex.functions.Consumer` v2 @kind object) @signature `Lio/reactivex/Flowable;.generate:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f1960.  v0:= "generator is null" @kind object;
  #L3f1964.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f196a.  call temp:= `nullSupplier`() @signature `Lio/reactivex/internal/functions/Functions;.nullSupplier:()Ljava/util/concurrent/Callable;` @kind static;
  #L3f1970.  v0:= temp @kind object;
  #L3f1972.  call temp:= `simpleGenerator`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.simpleGenerator:(Lio/reactivex/functions/Consumer;)Lio/reactivex/functions/BiFunction;` @kind static;
  #L3f1978.  v2:= temp @kind object;
  #L3f197a.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3f1980.  v1:= temp @kind object;
  #L3f1982.  call temp:= `generate`(v0, v2, v1) @signature `Lio/reactivex/Flowable;.generate:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @kind static;
  #L3f1988.  v2:= temp @kind object;
  #L3f198a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `generate`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.BiConsumer` v2 @kind object) @signature `Lio/reactivex/Flowable;.generate:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f199c.  v0:= "generator is null" @kind object;
  #L3f19a0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f19a6.  call temp:= `simpleBiGenerator`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.simpleBiGenerator:(Lio/reactivex/functions/BiConsumer;)Lio/reactivex/functions/BiFunction;` @kind static;
  #L3f19ac.  v2:= temp @kind object;
  #L3f19ae.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3f19b4.  v0:= temp @kind object;
  #L3f19b6.  call temp:= `generate`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.generate:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @kind static;
  #L3f19bc.  v1:= temp @kind object;
  #L3f19be.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `generate`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.BiConsumer` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.generate:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f19d0.  v0:= "generator is null" @kind object;
  #L3f19d4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f19da.  call temp:= `simpleBiGenerator`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.simpleBiGenerator:(Lio/reactivex/functions/BiConsumer;)Lio/reactivex/functions/BiFunction;` @kind static;
  #L3f19e0.  v2:= temp @kind object;
  #L3f19e2.  call temp:= `generate`(v1, v2, v3) @signature `Lio/reactivex/Flowable;.generate:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @kind static;
  #L3f19e8.  v1:= temp @kind object;
  #L3f19ea.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `generate`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/Flowable;.generate:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f19fc.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3f1a02.  v0:= temp @kind object;
  #L3f1a04.  call temp:= `generate`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.generate:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @kind static;
  #L3f1a0a.  v1:= temp @kind object;
  #L3f1a0c.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `generate`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.generate:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f1a20.  v0:= "initialState is null" @kind object;
  #L3f1a24.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1a2a.  v0:= "generator is null" @kind object;
  #L3f1a2e.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1a34.  v0:= "disposeState is null" @kind object;
  #L3f1a38.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1a3e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableGenerate`;
  #L3f1a42.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate;.<init>:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;Lio/reactivex/functions/Consumer;)V` @kind direct;
  #L3f1a48.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f1a4e.  v1:= temp @kind object;
  #L3f1a50.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `interval`(`long` v6 , `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lio/reactivex/Flowable;.interval:(JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f1c1c.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f1c22.  v5:= temp @kind object;
  #L3f1c24.  v0:= v6 @kind wide;
  #L3f1c26.  v2:= v8 @kind wide;
  #L3f1c28.  v4:= v10 @kind object;
  #L3f1c2a.  call temp:= `interval`(v0, v2, v4, v5) @signature `Lio/reactivex/Flowable;.interval:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind static;
  #L3f1c30.  v6:= temp @kind object;
  #L3f1c32.  return v6 @kind object;
}
procedure `io.reactivex.Flowable` `interval`(`long` v8 , `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object, `io.reactivex.Scheduler` v13 @kind object) @signature `Lio/reactivex/Flowable;.interval:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f1c44.  v0:= "unit is null" @kind object;
  #L3f1c48.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1c4e.  v0:= "scheduler is null" @kind object;
  #L3f1c52.  call temp:= `requireNonNull`(v13, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1c58.  v0:= new `io.reactivex.internal.operators.flowable.FlowableInterval`;
  #L3f1c5c.  v1:= 0L;
  #L3f1c60.  call temp:= `max`(v1, v8) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L3f1c66.  v8:= temp @kind wide;
  #L3f1c68.  call temp:= `max`(v1, v10) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L3f1c6e.  v4:= temp @kind wide;
  #L3f1c70.  v1:= v0 @kind object;
  #L3f1c72.  v2:= v8 @kind wide;
  #L3f1c74.  v6:= v12 @kind object;
  #L3f1c76.  v7:= v13 @kind object;
  #L3f1c78.  call `<init>`(v1, v2, v4, v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableInterval;.<init>:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L3f1c7e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f1c84.  v8:= temp @kind object;
  #L3f1c86.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `interval`(`long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `Lio/reactivex/Flowable;.interval:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f1bd0.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f1bd6.  v5:= temp @kind object;
  #L3f1bd8.  v0:= v6 @kind wide;
  #L3f1bda.  v2:= v6 @kind wide;
  #L3f1bdc.  v4:= v8 @kind object;
  #L3f1bde.  call temp:= `interval`(v0, v2, v4, v5) @signature `Lio/reactivex/Flowable;.interval:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind static;
  #L3f1be4.  v6:= temp @kind object;
  #L3f1be6.  return v6 @kind object;
}
procedure `io.reactivex.Flowable` `interval`(`long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object, `io.reactivex.Scheduler` v9 @kind object) @signature `Lio/reactivex/Flowable;.interval:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f1bf8.  v0:= v6 @kind wide;
  #L3f1bfa.  v2:= v6 @kind wide;
  #L3f1bfc.  v4:= v8 @kind object;
  #L3f1bfe.  v5:= v9 @kind object;
  #L3f1c00.  call temp:= `interval`(v0, v2, v4, v5) @signature `Lio/reactivex/Flowable;.interval:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind static;
  #L3f1c06.  v6:= temp @kind object;
  #L3f1c08.  return v6 @kind object;
}
procedure `io.reactivex.Flowable` `intervalRange`(`long` v10 , `long` v12 , `long` v14 , `long` v16 , `java.util.concurrent.TimeUnit` v18 @kind object) @signature `Lio/reactivex/Flowable;.intervalRange:(JJJJLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3f1c98.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f1c9e.  v9:= temp @kind object;
  #L3f1ca0.  v0:= v10 @kind wide;
  #L3f1ca2.  v2:= v12 @kind wide;
  #L3f1ca4.  v4:= v14 @kind wide;
  #L3f1ca6.  v6:= v16 @kind wide;
  #L3f1caa.  v8:= v18 @kind object;
  #L3f1cae.  call temp:= `intervalRange`(v0, v2, v4, v6, v8, v9) @signature `Lio/reactivex/Flowable;.intervalRange:(JJJJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind static;
  #L3f1cb4.  v0:= temp @kind object;
  #L3f1cb6.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `intervalRange`(`long` v16 , `long` v18 , `long` v20 , `long` v22 , `java.util.concurrent.TimeUnit` v24 @kind object, `io.reactivex.Scheduler` v25 @kind object) @signature `Lio/reactivex/Flowable;.intervalRange:(JJJJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L3f1cc8.  v0:= v18 @kind wide;
  #L3f1ccc.  v2:= v20 @kind wide;
  #L3f1cd0.  v9:= v24 @kind object;
  #L3f1cd4.  v10:= v25 @kind object;
  #L3f1cd8.  v4:= 0L;
  #L3f1cdc.  v6:= lcmp(v0, v4);
  #L3f1ce0.  if v6 < 0 then goto L3f1d76;
  #L3f1ce4.  if v6 != 0 then goto L3f1cfa;
  #L3f1ce8.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3f1cee.  v0:= temp @kind object;
  #L3f1cf0.  call temp:= `delay`(v0, v2, v9, v10) @signature `Lio/reactivex/Flowable;.delay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f1cf6.  v0:= temp @kind object;
  #L3f1cf8.  return v0 @kind object;
  #L3f1cfa.  v6:= 1L;
  #L3f1cfe.  v0:= v0 - v6 @kind long;
  #L3f1d00.  v6:= v16 + v0 @kind long;
  #L3f1d04.  v0:= lcmp(v16, v4);
  #L3f1d08.  if v0 <= 0 then goto L3f1d26;
  #L3f1d0c.  v0:= lcmp(v6, v4);
  #L3f1d10.  if v0 < 0 then goto L3f1d16;
  #L3f1d14.  goto L3f1d26;
  #L3f1d16.  v0:= new `java.lang.IllegalArgumentException`;
  #L3f1d1a.  v1:= "Overflow! start + count is bigger than Long.MAX_VALUE" @kind object;
  #L3f1d1e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f1d24.  throw v0;
  #L3f1d26.  v0:= "unit is null" @kind object;
  #L3f1d2a.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1d30.  v0:= "scheduler is null" @kind object;
  #L3f1d34.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1d3a.  v11:= new `io.reactivex.internal.operators.flowable.FlowableIntervalRange`;
  #L3f1d3e.  call temp:= `max`(v4, v2) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L3f1d44.  v12:= temp @kind wide;
  #L3f1d46.  v0:= v22 @kind wide;
  #L3f1d4a.  call temp:= `max`(v4, v0) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L3f1d50.  v14:= temp @kind wide;
  #L3f1d52.  v0:= v11 @kind object;
  #L3f1d54.  v1:= v16 @kind wide;
  #L3f1d58.  v3:= v6 @kind wide;
  #L3f1d5a.  v5:= v12 @kind wide;
  #L3f1d5c.  v7:= v14 @kind wide;
  #L3f1d5e.  v9:= v24 @kind object;
  #L3f1d62.  v10:= v25 @kind object;
  #L3f1d66.  call `<init>`(v0, v1, v3, v5, v7, v9, v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableIntervalRange;.<init>:(JJJJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L3f1d6c.  call temp:= `onAssembly`(v11) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f1d72.  v0:= temp @kind object;
  #L3f1d74.  return v0 @kind object;
  #L3f1d76.  v2:= new `java.lang.IllegalArgumentException`;
  #L3f1d7a.  v3:= new `java.lang.StringBuilder`;
  #L3f1d7e.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f1d84.  v4:= "count >= 0 required but it was " @kind object;
  #L3f1d88.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f1d8e.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f1d94.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f1d9a.  v0:= temp @kind object;
  #L3f1d9c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f1da2.  throw v2;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v1 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f1e0c.  v0:= "item is null" @kind object;
  #L3f1e10.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1e16.  v0:= new `io.reactivex.internal.operators.flowable.FlowableJust`;
  #L3f1e1a.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableJust;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3f1e20.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f1e26.  v1:= temp @kind object;
  #L3f1e28.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f1e3c.  v0:= "The first item is null" @kind object;
  #L3f1e40.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1e46.  v0:= "The second item is null" @kind object;
  #L3f1e4a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1e50.  v0:= 2I;
  #L3f1e52.  v0:= new `java.lang.Object`[v0];
  #L3f1e56.  v1:= 0I;
  #L3f1e58.  v0[v1]:= v2 @kind object;
  #L3f1e5c.  v2:= 1I;
  #L3f1e5e.  v0[v2]:= v3 @kind object;
  #L3f1e62.  call temp:= `fromArray`(v0) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3f1e68.  v2:= temp @kind object;
  #L3f1e6a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f1e7c.  v0:= "The first item is null" @kind object;
  #L3f1e80.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1e86.  v0:= "The second item is null" @kind object;
  #L3f1e8a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1e90.  v0:= "The third item is null" @kind object;
  #L3f1e94.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1e9a.  v0:= 3I;
  #L3f1e9c.  v0:= new `java.lang.Object`[v0];
  #L3f1ea0.  v1:= 0I;
  #L3f1ea2.  v0[v1]:= v2 @kind object;
  #L3f1ea6.  v2:= 1I;
  #L3f1ea8.  v0[v2]:= v3 @kind object;
  #L3f1eac.  v2:= 2I;
  #L3f1eae.  v0[v2]:= v4 @kind object;
  #L3f1eb2.  call temp:= `fromArray`(v0) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3f1eb8.  v2:= temp @kind object;
  #L3f1eba.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f1ecc.  v0:= "The first item is null" @kind object;
  #L3f1ed0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1ed6.  v0:= "The second item is null" @kind object;
  #L3f1eda.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1ee0.  v0:= "The third item is null" @kind object;
  #L3f1ee4.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1eea.  v0:= "The fourth item is null" @kind object;
  #L3f1eee.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1ef4.  v0:= 4I;
  #L3f1ef6.  v0:= new `java.lang.Object`[v0];
  #L3f1efa.  v1:= 0I;
  #L3f1efc.  v0[v1]:= v2 @kind object;
  #L3f1f00.  v2:= 1I;
  #L3f1f02.  v0[v2]:= v3 @kind object;
  #L3f1f06.  v2:= 2I;
  #L3f1f08.  v0[v2]:= v4 @kind object;
  #L3f1f0c.  v2:= 3I;
  #L3f1f0e.  v0[v2]:= v5 @kind object;
  #L3f1f12.  call temp:= `fromArray`(v0) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3f1f18.  v2:= temp @kind object;
  #L3f1f1a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f1f2c.  v0:= "The first item is null" @kind object;
  #L3f1f30.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1f36.  v0:= "The second item is null" @kind object;
  #L3f1f3a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1f40.  v0:= "The third item is null" @kind object;
  #L3f1f44.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1f4a.  v0:= "The fourth item is null" @kind object;
  #L3f1f4e.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1f54.  v0:= "The fifth item is null" @kind object;
  #L3f1f58.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1f5e.  v0:= 5I;
  #L3f1f60.  v0:= new `java.lang.Object`[v0];
  #L3f1f64.  v1:= 0I;
  #L3f1f66.  v0[v1]:= v2 @kind object;
  #L3f1f6a.  v2:= 1I;
  #L3f1f6c.  v0[v2]:= v3 @kind object;
  #L3f1f70.  v2:= 2I;
  #L3f1f72.  v0[v2]:= v4 @kind object;
  #L3f1f76.  v2:= 3I;
  #L3f1f78.  v0[v2]:= v5 @kind object;
  #L3f1f7c.  v2:= 4I;
  #L3f1f7e.  v0[v2]:= v6 @kind object;
  #L3f1f82.  call temp:= `fromArray`(v0) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3f1f88.  v2:= temp @kind object;
  #L3f1f8a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f1f9c.  v0:= "The first item is null" @kind object;
  #L3f1fa0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1fa6.  v0:= "The second item is null" @kind object;
  #L3f1faa.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1fb0.  v0:= "The third item is null" @kind object;
  #L3f1fb4.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1fba.  v0:= "The fourth item is null" @kind object;
  #L3f1fbe.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1fc4.  v0:= "The fifth item is null" @kind object;
  #L3f1fc8.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1fce.  v0:= "The sixth item is null" @kind object;
  #L3f1fd2.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1fd8.  v0:= 6I;
  #L3f1fda.  v0:= new `java.lang.Object`[v0];
  #L3f1fde.  v1:= 0I;
  #L3f1fe0.  v0[v1]:= v2 @kind object;
  #L3f1fe4.  v2:= 1I;
  #L3f1fe6.  v0[v2]:= v3 @kind object;
  #L3f1fea.  v2:= 2I;
  #L3f1fec.  v0[v2]:= v4 @kind object;
  #L3f1ff0.  v2:= 3I;
  #L3f1ff2.  v0[v2]:= v5 @kind object;
  #L3f1ff6.  v2:= 4I;
  #L3f1ff8.  v0[v2]:= v6 @kind object;
  #L3f1ffc.  v2:= 5I;
  #L3f1ffe.  v0[v2]:= v7 @kind object;
  #L3f2002.  call temp:= `fromArray`(v0) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3f2008.  v2:= temp @kind object;
  #L3f200a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f201c.  v0:= "The first item is null" @kind object;
  #L3f2020.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2026.  v0:= "The second item is null" @kind object;
  #L3f202a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2030.  v0:= "The third item is null" @kind object;
  #L3f2034.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f203a.  v0:= "The fourth item is null" @kind object;
  #L3f203e.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2044.  v0:= "The fifth item is null" @kind object;
  #L3f2048.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f204e.  v0:= "The sixth item is null" @kind object;
  #L3f2052.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2058.  v0:= "The seventh item is null" @kind object;
  #L3f205c.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2062.  v0:= 7I;
  #L3f2064.  v0:= new `java.lang.Object`[v0];
  #L3f2068.  v1:= 0I;
  #L3f206a.  v0[v1]:= v2 @kind object;
  #L3f206e.  v2:= 1I;
  #L3f2070.  v0[v2]:= v3 @kind object;
  #L3f2074.  v2:= 2I;
  #L3f2076.  v0[v2]:= v4 @kind object;
  #L3f207a.  v2:= 3I;
  #L3f207c.  v0[v2]:= v5 @kind object;
  #L3f2080.  v2:= 4I;
  #L3f2082.  v0[v2]:= v6 @kind object;
  #L3f2086.  v2:= 5I;
  #L3f2088.  v0[v2]:= v7 @kind object;
  #L3f208c.  v2:= 6I;
  #L3f208e.  v0[v2]:= v8 @kind object;
  #L3f2092.  call temp:= `fromArray`(v0) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3f2098.  v2:= temp @kind object;
  #L3f209a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object, `java.lang.Object` v8 @kind object, `java.lang.Object` v9 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f20ac.  v0:= "The first item is null" @kind object;
  #L3f20b0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f20b6.  v0:= "The second item is null" @kind object;
  #L3f20ba.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f20c0.  v0:= "The third item is null" @kind object;
  #L3f20c4.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f20ca.  v0:= "The fourth item is null" @kind object;
  #L3f20ce.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f20d4.  v0:= "The fifth item is null" @kind object;
  #L3f20d8.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f20de.  v0:= "The sixth item is null" @kind object;
  #L3f20e2.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f20e8.  v0:= "The seventh item is null" @kind object;
  #L3f20ec.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f20f2.  v0:= "The eighth item is null" @kind object;
  #L3f20f6.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f20fc.  v0:= 8I;
  #L3f2100.  v0:= new `java.lang.Object`[v0];
  #L3f2104.  v1:= 0I;
  #L3f2106.  v0[v1]:= v2 @kind object;
  #L3f210a.  v2:= 1I;
  #L3f210c.  v0[v2]:= v3 @kind object;
  #L3f2110.  v2:= 2I;
  #L3f2112.  v0[v2]:= v4 @kind object;
  #L3f2116.  v2:= 3I;
  #L3f2118.  v0[v2]:= v5 @kind object;
  #L3f211c.  v2:= 4I;
  #L3f211e.  v0[v2]:= v6 @kind object;
  #L3f2122.  v2:= 5I;
  #L3f2124.  v0[v2]:= v7 @kind object;
  #L3f2128.  v2:= 6I;
  #L3f212a.  v0[v2]:= v8 @kind object;
  #L3f212e.  v2:= 7I;
  #L3f2130.  v0[v2]:= v9 @kind object;
  #L3f2134.  call temp:= `fromArray`(v0) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3f213a.  v2:= temp @kind object;
  #L3f213c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object, `java.lang.Object` v8 @kind object, `java.lang.Object` v9 @kind object, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f2150.  v0:= "The first item is null" @kind object;
  #L3f2154.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f215a.  v0:= "The second item is null" @kind object;
  #L3f215e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2164.  v0:= "The third item is null" @kind object;
  #L3f2168.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f216e.  v0:= "The fourth item is null" @kind object;
  #L3f2172.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2178.  v0:= "The fifth item is null" @kind object;
  #L3f217c.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2182.  v0:= "The sixth item is null" @kind object;
  #L3f2186.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f218c.  v0:= "The seventh item is null" @kind object;
  #L3f2190.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2196.  v0:= "The eighth item is null" @kind object;
  #L3f219a.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f21a0.  v0:= "The ninth is null" @kind object;
  #L3f21a4.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f21aa.  v0:= 9I;
  #L3f21ae.  v0:= new `java.lang.Object`[v0];
  #L3f21b2.  v1:= 0I;
  #L3f21b4.  v0[v1]:= v2 @kind object;
  #L3f21b8.  v2:= 1I;
  #L3f21ba.  v0[v2]:= v3 @kind object;
  #L3f21be.  v2:= 2I;
  #L3f21c0.  v0[v2]:= v4 @kind object;
  #L3f21c4.  v2:= 3I;
  #L3f21c6.  v0[v2]:= v5 @kind object;
  #L3f21ca.  v2:= 4I;
  #L3f21cc.  v0[v2]:= v6 @kind object;
  #L3f21d0.  v2:= 5I;
  #L3f21d2.  v0[v2]:= v7 @kind object;
  #L3f21d6.  v2:= 6I;
  #L3f21d8.  v0[v2]:= v8 @kind object;
  #L3f21dc.  v2:= 7I;
  #L3f21de.  v0[v2]:= v9 @kind object;
  #L3f21e2.  v2:= 8I;
  #L3f21e6.  v0[v2]:= v10 @kind object;
  #L3f21ea.  call temp:= `fromArray`(v0) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3f21f0.  v2:= temp @kind object;
  #L3f21f2.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object, `java.lang.Object` v8 @kind object, `java.lang.Object` v9 @kind object, `java.lang.Object` v10 @kind object, `java.lang.Object` v11 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f2204.  v0:= "The first item is null" @kind object;
  #L3f2208.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f220e.  v0:= "The second item is null" @kind object;
  #L3f2212.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2218.  v0:= "The third item is null" @kind object;
  #L3f221c.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2222.  v0:= "The fourth item is null" @kind object;
  #L3f2226.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f222c.  v0:= "The fifth item is null" @kind object;
  #L3f2230.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2236.  v0:= "The sixth item is null" @kind object;
  #L3f223a.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2240.  v0:= "The seventh item is null" @kind object;
  #L3f2244.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f224a.  v0:= "The eighth item is null" @kind object;
  #L3f224e.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2254.  v0:= "The ninth item is null" @kind object;
  #L3f2258.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f225e.  v0:= "The tenth item is null" @kind object;
  #L3f2262.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2268.  v0:= 10I;
  #L3f226c.  v0:= new `java.lang.Object`[v0];
  #L3f2270.  v1:= 0I;
  #L3f2272.  v0[v1]:= v2 @kind object;
  #L3f2276.  v2:= 1I;
  #L3f2278.  v0[v2]:= v3 @kind object;
  #L3f227c.  v2:= 2I;
  #L3f227e.  v0[v2]:= v4 @kind object;
  #L3f2282.  v2:= 3I;
  #L3f2284.  v0[v2]:= v5 @kind object;
  #L3f2288.  v2:= 4I;
  #L3f228a.  v0[v2]:= v6 @kind object;
  #L3f228e.  v2:= 5I;
  #L3f2290.  v0[v2]:= v7 @kind object;
  #L3f2294.  v2:= 6I;
  #L3f2296.  v0[v2]:= v8 @kind object;
  #L3f229a.  v2:= 7I;
  #L3f229c.  v0[v2]:= v9 @kind object;
  #L3f22a0.  v2:= 8I;
  #L3f22a4.  v0[v2]:= v10 @kind object;
  #L3f22a8.  v2:= 9I;
  #L3f22ac.  v0[v2]:= v11 @kind object;
  #L3f22b0.  call temp:= `fromArray`(v0) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3f22b6.  v2:= temp @kind object;
  #L3f22b8.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`java.lang.Iterable` v1 @kind object) @signature `Lio/reactivex/Flowable;.merge:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f2350.  call temp:= `fromIterable`(v1) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L3f2356.  v1:= temp @kind object;
  #L3f2358.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f235e.  v0:= temp @kind object;
  #L3f2360.  call temp:= `flatMap`(v1, v0) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f2366.  v1:= temp @kind object;
  #L3f2368.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`java.lang.Iterable` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/Flowable;.merge:(Ljava/lang/Iterable;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f237c.  call temp:= `fromIterable`(v1) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L3f2382.  v1:= temp @kind object;
  #L3f2384.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f238a.  v0:= temp @kind object;
  #L3f238c.  call temp:= `flatMap`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3f2392.  v1:= temp @kind object;
  #L3f2394.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`java.lang.Iterable` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.merge:(Ljava/lang/Iterable;II)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f23a8.  call temp:= `fromIterable`(v2) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L3f23ae.  v2:= temp @kind object;
  #L3f23b0.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f23b6.  v0:= temp @kind object;
  #L3f23b8.  v1:= 0I;
  #L3f23ba.  call temp:= `flatMap`(v2, v0, v1, v3, v4) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3f23c0.  v2:= temp @kind object;
  #L3f23c2.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Flowable;.merge:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f23d4.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f23da.  v0:= temp;
  #L3f23dc.  call temp:= `merge`(v1, v0) @signature `Lio/reactivex/Flowable;.merge:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @kind static;
  #L3f23e2.  v1:= temp @kind object;
  #L3f23e4.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`org.reactivestreams.Publisher` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/Flowable;.merge:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f23f8.  call temp:= `fromPublisher`(v1) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f23fe.  v1:= temp @kind object;
  #L3f2400.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f2406.  v0:= temp @kind object;
  #L3f2408.  call temp:= `flatMap`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3f240e.  v1:= temp @kind object;
  #L3f2410.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/Flowable;.merge:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f2424.  v0:= "source1 is null" @kind object;
  #L3f2428.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f242e.  v0:= "source2 is null" @kind object;
  #L3f2432.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2438.  v0:= 2I;
  #L3f243a.  v1:= new `org.reactivestreams.Publisher`[v0];
  #L3f243e.  v2:= 0I;
  #L3f2440.  v1[v2]:= v3 @kind object;
  #L3f2444.  v3:= 1I;
  #L3f2446.  v1[v3]:= v4 @kind object;
  #L3f244a.  call temp:= `fromArray`(v1) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3f2450.  v3:= temp @kind object;
  #L3f2452.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f2458.  v4:= temp @kind object;
  #L3f245a.  call temp:= `flatMap`(v3, v4, v2, v0) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f2460.  v3:= temp @kind object;
  #L3f2462.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object) @signature `Lio/reactivex/Flowable;.merge:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f2474.  v0:= "source1 is null" @kind object;
  #L3f2478.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f247e.  v0:= "source2 is null" @kind object;
  #L3f2482.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2488.  v0:= "source3 is null" @kind object;
  #L3f248c.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2492.  v0:= 3I;
  #L3f2494.  v1:= new `org.reactivestreams.Publisher`[v0];
  #L3f2498.  v2:= 0I;
  #L3f249a.  v1[v2]:= v3 @kind object;
  #L3f249e.  v3:= 1I;
  #L3f24a0.  v1[v3]:= v4 @kind object;
  #L3f24a4.  v3:= 2I;
  #L3f24a6.  v1[v3]:= v5 @kind object;
  #L3f24aa.  call temp:= `fromArray`(v1) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3f24b0.  v3:= temp @kind object;
  #L3f24b2.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f24b8.  v4:= temp @kind object;
  #L3f24ba.  call temp:= `flatMap`(v3, v4, v2, v0) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f24c0.  v3:= temp @kind object;
  #L3f24c2.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object) @signature `Lio/reactivex/Flowable;.merge:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f24d4.  v0:= "source1 is null" @kind object;
  #L3f24d8.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f24de.  v0:= "source2 is null" @kind object;
  #L3f24e2.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f24e8.  v0:= "source3 is null" @kind object;
  #L3f24ec.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f24f2.  v0:= "source4 is null" @kind object;
  #L3f24f6.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f24fc.  v0:= 4I;
  #L3f24fe.  v1:= new `org.reactivestreams.Publisher`[v0];
  #L3f2502.  v2:= 0I;
  #L3f2504.  v1[v2]:= v3 @kind object;
  #L3f2508.  v3:= 1I;
  #L3f250a.  v1[v3]:= v4 @kind object;
  #L3f250e.  v3:= 2I;
  #L3f2510.  v1[v3]:= v5 @kind object;
  #L3f2514.  v3:= 3I;
  #L3f2516.  v1[v3]:= v6 @kind object;
  #L3f251a.  call temp:= `fromArray`(v1) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3f2520.  v3:= temp @kind object;
  #L3f2522.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f2528.  v4:= temp @kind object;
  #L3f252a.  call temp:= `flatMap`(v3, v4, v2, v0) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f2530.  v3:= temp @kind object;
  #L3f2532.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `mergeArray`(`int` v2 , `int` v3 , `org.reactivestreams.Publisher`[] v4 @kind object) @signature `Lio/reactivex/Flowable;.mergeArray:(II[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f2544.  call temp:= `fromArray`(v4) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3f254a.  v4:= temp @kind object;
  #L3f254c.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f2552.  v0:= temp @kind object;
  #L3f2554.  v1:= 0I;
  #L3f2556.  call temp:= `flatMap`(v4, v0, v1, v2, v3) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3f255c.  v2:= temp @kind object;
  #L3f255e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeArray`(`org.reactivestreams.Publisher`[] v2 @kind object) @signature `Lio/reactivex/Flowable;.mergeArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f2570.  call temp:= `fromArray`(v2) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3f2576.  v0:= temp @kind object;
  #L3f2578.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f257e.  v1:= temp @kind object;
  #L3f2580.  v2:= length @variable v2;
  #L3f2582.  call temp:= `flatMap`(v0, v1, v2) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3f2588.  v2:= temp @kind object;
  #L3f258a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeArrayDelayError`(`int` v2 , `int` v3 , `org.reactivestreams.Publisher`[] v4 @kind object) @signature `Lio/reactivex/Flowable;.mergeArrayDelayError:(II[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f259c.  call temp:= `fromArray`(v4) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3f25a2.  v4:= temp @kind object;
  #L3f25a4.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f25aa.  v0:= temp @kind object;
  #L3f25ac.  v1:= 1I;
  #L3f25ae.  call temp:= `flatMap`(v4, v0, v1, v2, v3) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3f25b4.  v2:= temp @kind object;
  #L3f25b6.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeArrayDelayError`(`org.reactivestreams.Publisher`[] v3 @kind object) @signature `Lio/reactivex/Flowable;.mergeArrayDelayError:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f25c8.  call temp:= `fromArray`(v3) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3f25ce.  v0:= temp @kind object;
  #L3f25d0.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f25d6.  v1:= temp @kind object;
  #L3f25d8.  v3:= length @variable v3;
  #L3f25da.  v2:= 1I;
  #L3f25dc.  call temp:= `flatMap`(v0, v1, v2, v3) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f25e2.  v3:= temp @kind object;
  #L3f25e4.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`java.lang.Iterable` v2 @kind object) @signature `Lio/reactivex/Flowable;.mergeDelayError:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f25f8.  call temp:= `fromIterable`(v2) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L3f25fe.  v2:= temp @kind object;
  #L3f2600.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f2606.  v0:= temp @kind object;
  #L3f2608.  v1:= 1I;
  #L3f260a.  call temp:= `flatMap`(v2, v0, v1) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L3f2610.  v2:= temp @kind object;
  #L3f2612.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`java.lang.Iterable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.mergeDelayError:(Ljava/lang/Iterable;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f2624.  call temp:= `fromIterable`(v2) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L3f262a.  v2:= temp @kind object;
  #L3f262c.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f2632.  v0:= temp @kind object;
  #L3f2634.  v1:= 1I;
  #L3f2636.  call temp:= `flatMap`(v2, v0, v1, v3) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f263c.  v2:= temp @kind object;
  #L3f263e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`java.lang.Iterable` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.mergeDelayError:(Ljava/lang/Iterable;II)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f2650.  call temp:= `fromIterable`(v2) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L3f2656.  v2:= temp @kind object;
  #L3f2658.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f265e.  v0:= temp @kind object;
  #L3f2660.  v1:= 1I;
  #L3f2662.  call temp:= `flatMap`(v2, v0, v1, v3, v4) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3f2668.  v2:= temp @kind object;
  #L3f266a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Flowable;.mergeDelayError:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f267c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f2682.  v0:= temp;
  #L3f2684.  call temp:= `mergeDelayError`(v1, v0) @signature `Lio/reactivex/Flowable;.mergeDelayError:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @kind static;
  #L3f268a.  v1:= temp @kind object;
  #L3f268c.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`org.reactivestreams.Publisher` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.mergeDelayError:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f26a0.  call temp:= `fromPublisher`(v2) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f26a6.  v2:= temp @kind object;
  #L3f26a8.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f26ae.  v0:= temp @kind object;
  #L3f26b0.  v1:= 1I;
  #L3f26b2.  call temp:= `flatMap`(v2, v0, v1, v3) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f26b8.  v2:= temp @kind object;
  #L3f26ba.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/Flowable;.mergeDelayError:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f26cc.  v0:= "source1 is null" @kind object;
  #L3f26d0.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f26d6.  v0:= "source2 is null" @kind object;
  #L3f26da.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f26e0.  v0:= 2I;
  #L3f26e2.  v1:= new `org.reactivestreams.Publisher`[v0];
  #L3f26e6.  v2:= 0I;
  #L3f26e8.  v1[v2]:= v3 @kind object;
  #L3f26ec.  v3:= 1I;
  #L3f26ee.  v1[v3]:= v4 @kind object;
  #L3f26f2.  call temp:= `fromArray`(v1) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3f26f8.  v4:= temp @kind object;
  #L3f26fa.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f2700.  v1:= temp @kind object;
  #L3f2702.  call temp:= `flatMap`(v4, v1, v3, v0) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f2708.  v3:= temp @kind object;
  #L3f270a.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object) @signature `Lio/reactivex/Flowable;.mergeDelayError:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f271c.  v0:= "source1 is null" @kind object;
  #L3f2720.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2726.  v0:= "source2 is null" @kind object;
  #L3f272a.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2730.  v0:= "source3 is null" @kind object;
  #L3f2734.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f273a.  v0:= 3I;
  #L3f273c.  v1:= new `org.reactivestreams.Publisher`[v0];
  #L3f2740.  v2:= 0I;
  #L3f2742.  v1[v2]:= v3 @kind object;
  #L3f2746.  v3:= 1I;
  #L3f2748.  v1[v3]:= v4 @kind object;
  #L3f274c.  v4:= 2I;
  #L3f274e.  v1[v4]:= v5 @kind object;
  #L3f2752.  call temp:= `fromArray`(v1) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3f2758.  v4:= temp @kind object;
  #L3f275a.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f2760.  v5:= temp @kind object;
  #L3f2762.  call temp:= `flatMap`(v4, v5, v3, v0) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f2768.  v3:= temp @kind object;
  #L3f276a.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object) @signature `Lio/reactivex/Flowable;.mergeDelayError:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f277c.  v0:= "source1 is null" @kind object;
  #L3f2780.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2786.  v0:= "source2 is null" @kind object;
  #L3f278a.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2790.  v0:= "source3 is null" @kind object;
  #L3f2794.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f279a.  v0:= "source4 is null" @kind object;
  #L3f279e.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f27a4.  v0:= 4I;
  #L3f27a6.  v1:= new `org.reactivestreams.Publisher`[v0];
  #L3f27aa.  v2:= 0I;
  #L3f27ac.  v1[v2]:= v3 @kind object;
  #L3f27b0.  v3:= 1I;
  #L3f27b2.  v1[v3]:= v4 @kind object;
  #L3f27b6.  v4:= 2I;
  #L3f27b8.  v1[v4]:= v5 @kind object;
  #L3f27bc.  v4:= 3I;
  #L3f27be.  v1[v4]:= v6 @kind object;
  #L3f27c2.  call temp:= `fromArray`(v1) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3f27c8.  v4:= temp @kind object;
  #L3f27ca.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f27d0.  v5:= temp @kind object;
  #L3f27d2.  call temp:= `flatMap`(v4, v5, v3, v0) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f27d8.  v3:= temp @kind object;
  #L3f27da.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `never`() @signature `Lio/reactivex/Flowable;.never:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f2810.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableNever.INSTANCE` @type ^`io.reactivex.Flowable` @kind object;
  #L3f2814.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f281a.  v0:= temp @kind object;
  #L3f281c.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `range`(`int` v5 , `int` v6 ) @signature `Lio/reactivex/Flowable;.range:(II)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f2c34.  if v6 < 0 then goto L3f2c9a;
  #L3f2c38.  if v6 != 0 then goto L3f2c46;
  #L3f2c3c.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3f2c42.  v5:= temp @kind object;
  #L3f2c44.  return v5 @kind object;
  #L3f2c46.  v0:= 1I;
  #L3f2c48.  if v6 != v0 then goto L3f2c5e;
  #L3f2c4c.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3f2c52.  v5:= temp @kind object;
  #L3f2c54.  call temp:= `just`(v5) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3f2c5a.  v5:= temp @kind object;
  #L3f2c5c.  return v5 @kind object;
  #L3f2c5e.  v0:= (`long`) v5 @kind i2l;
  #L3f2c60.  v2:= v6 + -1;
  #L3f2c64.  v2:= (`long`) v2 @kind i2l;
  #L3f2c66.  v0:= v0 + v2 @kind long;
  #L3f2c68.  v2:= 2147483647L;
  #L3f2c6e.  v4:= lcmp(v0, v2);
  #L3f2c72.  if v4 > 0 then goto L3f2c8a;
  #L3f2c76.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRange`;
  #L3f2c7a.  call `<init>`(v0, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange;.<init>:(II)V` @kind direct;
  #L3f2c80.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f2c86.  v5:= temp @kind object;
  #L3f2c88.  return v5 @kind object;
  #L3f2c8a.  v5:= new `java.lang.IllegalArgumentException`;
  #L3f2c8e.  v6:= "Integer overflow" @kind object;
  #L3f2c92.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f2c98.  throw v5;
  #L3f2c9a.  v5:= new `java.lang.IllegalArgumentException`;
  #L3f2c9e.  v0:= new `java.lang.StringBuilder`;
  #L3f2ca2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f2ca8.  v1:= "count >= 0 required but it was " @kind object;
  #L3f2cac.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2cb2.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2cb8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f2cbe.  v6:= temp @kind object;
  #L3f2cc0.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f2cc6.  throw v5;
}
procedure `io.reactivex.Flowable` `rangeLong`(`long` v5 , `long` v7 ) @signature `Lio/reactivex/Flowable;.rangeLong:(JJ)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f2cd8.  v0:= 0L;
  #L3f2cdc.  v2:= lcmp(v7, v0);
  #L3f2ce0.  if v2 < 0 then goto L3f2d4c;
  #L3f2ce4.  if v2 != 0 then goto L3f2cf2;
  #L3f2ce8.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3f2cee.  v5:= temp @kind object;
  #L3f2cf0.  return v5 @kind object;
  #L3f2cf2.  v2:= 1L;
  #L3f2cf6.  v4:= lcmp(v7, v2);
  #L3f2cfa.  if v4 != 0 then goto L3f2d10;
  #L3f2cfe.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L3f2d04.  v5:= temp @kind object;
  #L3f2d06.  call temp:= `just`(v5) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3f2d0c.  v5:= temp @kind object;
  #L3f2d0e.  return v5 @kind object;
  #L3f2d10.  v2:= v7 - v2 @kind long;
  #L3f2d14.  v2:= v2 + v5 @kind long;
  #L3f2d16.  v4:= lcmp(v5, v0);
  #L3f2d1a.  if v4 <= 0 then goto L3f2d38;
  #L3f2d1e.  v4:= lcmp(v2, v0);
  #L3f2d22.  if v4 < 0 then goto L3f2d28;
  #L3f2d26.  goto L3f2d38;
  #L3f2d28.  v5:= new `java.lang.IllegalArgumentException`;
  #L3f2d2c.  v6:= "Overflow! start + count is bigger than Long.MAX_VALUE" @kind object;
  #L3f2d30.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f2d36.  throw v5;
  #L3f2d38.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRangeLong`;
  #L3f2d3c.  call `<init>`(v0, v5, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong;.<init>:(JJ)V` @kind direct;
  #L3f2d42.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f2d48.  v5:= temp @kind object;
  #L3f2d4a.  return v5 @kind object;
  #L3f2d4c.  v5:= new `java.lang.IllegalArgumentException`;
  #L3f2d50.  v6:= new `java.lang.StringBuilder`;
  #L3f2d54.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f2d5a.  v0:= "count >= 0 required but it was " @kind object;
  #L3f2d5e.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2d64.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2d6a.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f2d70.  v6:= temp @kind object;
  #L3f2d72.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f2d78.  throw v5;
}
procedure `io.reactivex.Single` `sequenceEqual`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/Flowable;.sequenceEqual:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f533c.  call temp:= `equalsPredicate`() @signature `Lio/reactivex/internal/functions/ObjectHelper;.equalsPredicate:()Lio/reactivex/functions/BiPredicate;` @kind static;
  #L3f5342.  v0:= temp @kind object;
  #L3f5344.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f534a.  v1:= temp;
  #L3f534c.  call temp:= `sequenceEqual`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.sequenceEqual:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiPredicate;I)Lio/reactivex/Single;` @kind static;
  #L3f5352.  v2:= temp @kind object;
  #L3f5354.  return v2 @kind object;
}
procedure `io.reactivex.Single` `sequenceEqual`(`org.reactivestreams.Publisher` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.sequenceEqual:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;I)Lio/reactivex/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f5368.  call temp:= `equalsPredicate`() @signature `Lio/reactivex/internal/functions/ObjectHelper;.equalsPredicate:()Lio/reactivex/functions/BiPredicate;` @kind static;
  #L3f536e.  v0:= temp @kind object;
  #L3f5370.  call temp:= `sequenceEqual`(v1, v2, v0, v3) @signature `Lio/reactivex/Flowable;.sequenceEqual:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiPredicate;I)Lio/reactivex/Single;` @kind static;
  #L3f5376.  v1:= temp @kind object;
  #L3f5378.  return v1 @kind object;
}
procedure `io.reactivex.Single` `sequenceEqual`(`org.reactivestreams.Publisher` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/Flowable;.sequenceEqual:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiPredicate;)Lio/reactivex/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f538c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f5392.  v0:= temp;
  #L3f5394.  call temp:= `sequenceEqual`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.sequenceEqual:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiPredicate;I)Lio/reactivex/Single;` @kind static;
  #L3f539a.  v1:= temp @kind object;
  #L3f539c.  return v1 @kind object;
}
procedure `io.reactivex.Single` `sequenceEqual`(`org.reactivestreams.Publisher` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.BiPredicate` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.sequenceEqual:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiPredicate;I)Lio/reactivex/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f53b0.  v0:= "source1 is null" @kind object;
  #L3f53b4.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f53ba.  v0:= "source2 is null" @kind object;
  #L3f53be.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f53c4.  v0:= "isEqual is null" @kind object;
  #L3f53c8.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f53ce.  v0:= "bufferSize" @kind object;
  #L3f53d2.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f53d8.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle`;
  #L3f53dc.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle;.<init>:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiPredicate;I)V` @kind direct;
  #L3f53e2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3f53e8.  v1:= temp @kind object;
  #L3f53ea.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `switchOnNext`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Flowable;.switchOnNext:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f3934.  call temp:= `fromPublisher`(v1) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f393a.  v1:= temp @kind object;
  #L3f393c.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f3942.  v0:= temp @kind object;
  #L3f3944.  call temp:= `switchMap`(v1, v0) @signature `Lio/reactivex/Flowable;.switchMap:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f394a.  v1:= temp @kind object;
  #L3f394c.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `switchOnNext`(`org.reactivestreams.Publisher` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/Flowable;.switchOnNext:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f3960.  call temp:= `fromPublisher`(v1) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f3966.  v1:= temp @kind object;
  #L3f3968.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f396e.  v0:= temp @kind object;
  #L3f3970.  call temp:= `switchMap`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.switchMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3f3976.  v1:= temp @kind object;
  #L3f3978.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `switchOnNextDelayError`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Flowable;.switchOnNextDelayError:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f398c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f3992.  v0:= temp;
  #L3f3994.  call temp:= `switchOnNextDelayError`(v1, v0) @signature `Lio/reactivex/Flowable;.switchOnNextDelayError:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @kind static;
  #L3f399a.  v1:= temp @kind object;
  #L3f399c.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `switchOnNextDelayError`(`org.reactivestreams.Publisher` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/Flowable;.switchOnNextDelayError:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f39b0.  call temp:= `fromPublisher`(v1) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f39b6.  v1:= temp @kind object;
  #L3f39b8.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f39be.  v0:= temp @kind object;
  #L3f39c0.  call temp:= `switchMapDelayError`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.switchMapDelayError:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3f39c6.  v1:= temp @kind object;
  #L3f39c8.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `timer`(`long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/Flowable;.timer:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f40d4.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f40da.  v0:= temp @kind object;
  #L3f40dc.  call temp:= `timer`(v1, v3, v0) @signature `Lio/reactivex/Flowable;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind static;
  #L3f40e2.  v1:= temp @kind object;
  #L3f40e4.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `timer`(`long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object) @signature `Lio/reactivex/Flowable;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f40f8.  v0:= "unit is null" @kind object;
  #L3f40fc.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4102.  v0:= "scheduler is null" @kind object;
  #L3f4106.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f410c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTimer`;
  #L3f4110.  v1:= 0L;
  #L3f4114.  call temp:= `max`(v1, v3) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L3f411a.  v3:= temp @kind wide;
  #L3f411c.  call `<init>`(v0, v3, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimer;.<init>:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L3f4122.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f4128.  v3:= temp @kind object;
  #L3f412a.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `unsafeCreate`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Flowable;.unsafeCreate:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f41e0.  v0:= "onSubscribe is null" @kind object;
  #L3f41e4.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f41ea.  v0:= instanceof @variable v1 @type ^`io.reactivex.Flowable` @kind boolean;
  #L3f41ee.  if v0 != 0 then goto L3f4206;
  #L3f41f2.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromPublisher`;
  #L3f41f6.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromPublisher;.<init>:(Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3f41fc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f4202.  v1:= temp @kind object;
  #L3f4204.  return v1 @kind object;
  #L3f4206.  v1:= new `java.lang.IllegalArgumentException`;
  #L3f420a.  v0:= "unsafeCreate(Flowable) should be upgraded" @kind object;
  #L3f420e.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f4214.  throw v1;
}
procedure `io.reactivex.Flowable` `using`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.using:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f4258.  v0:= 1I;
  #L3f425a.  call temp:= `using`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.using:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Consumer;Z)Lio/reactivex/Flowable;` @kind static;
  #L3f4260.  v1:= temp @kind object;
  #L3f4262.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `using`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/Flowable;.using:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Consumer;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f4274.  v0:= "resourceSupplier is null" @kind object;
  #L3f4278.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f427e.  v0:= "sourceSupplier is null" @kind object;
  #L3f4282.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4288.  v0:= "disposer is null" @kind object;
  #L3f428c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4292.  v0:= new `io.reactivex.internal.operators.flowable.FlowableUsing`;
  #L3f4296.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing;.<init>:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Consumer;Z)V` @kind direct;
  #L3f429c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f42a2.  v1:= temp @kind object;
  #L3f42a4.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`java.lang.Iterable` v7 @kind object, `io.reactivex.functions.Function` v8 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f4878.  v0:= "zipper is null" @kind object;
  #L3f487c.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4882.  v0:= "sources is null" @kind object;
  #L3f4886.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f488c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableZip`;
  #L3f4890.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f4896.  v5:= temp;
  #L3f4898.  v2:= 0I;
  #L3f489a.  v6:= 0I;
  #L3f489c.  v1:= v0 @kind object;
  #L3f489e.  v3:= v7 @kind object;
  #L3f48a0.  v4:= v8 @kind object;
  #L3f48a2.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip;.<init>:([Lorg/reactivestreams/Publisher;Ljava/lang/Iterable;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L3f48a8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f48ae.  v7:= temp @kind object;
  #L3f48b0.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f48c4.  v0:= "zipper is null" @kind object;
  #L3f48c8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f48ce.  call temp:= `fromPublisher`(v1) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f48d4.  v1:= temp @kind object;
  #L3f48d6.  call temp:= `toList`(v1) @signature `Lio/reactivex/Flowable;.toList:()Lio/reactivex/Single;` @kind virtual;
  #L3f48dc.  v1:= temp @kind object;
  #L3f48de.  call temp:= `zipIterable`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.zipIterable:(Lio/reactivex/functions/Function;)Lio/reactivex/functions/Function;` @kind static;
  #L3f48e4.  v2:= temp @kind object;
  #L3f48e6.  call temp:= `flatMapPublisher`(v1, v2) @signature `Lio/reactivex/Single;.flatMapPublisher:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f48ec.  v1:= temp @kind object;
  #L3f48ee.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `io.reactivex.functions.BiFunction` v5 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f4900.  v0:= "source1 is null" @kind object;
  #L3f4904.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f490a.  v0:= "source2 is null" @kind object;
  #L3f490e.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4914.  call temp:= `toFunction`(v5) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/BiFunction;)Lio/reactivex/functions/Function;` @kind static;
  #L3f491a.  v5:= temp @kind object;
  #L3f491c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f4922.  v0:= temp;
  #L3f4924.  v1:= 2I;
  #L3f4926.  v1:= new `org.reactivestreams.Publisher`[v1];
  #L3f492a.  v2:= 0I;
  #L3f492c.  v1[v2]:= v3 @kind object;
  #L3f4930.  v3:= 1I;
  #L3f4932.  v1[v3]:= v4 @kind object;
  #L3f4936.  call temp:= `zipArray`(v5, v2, v0, v1) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f493c.  v3:= temp @kind object;
  #L3f493e.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `io.reactivex.functions.BiFunction` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f4950.  v0:= "source1 is null" @kind object;
  #L3f4954.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f495a.  v0:= "source2 is null" @kind object;
  #L3f495e.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4964.  call temp:= `toFunction`(v5) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/BiFunction;)Lio/reactivex/functions/Function;` @kind static;
  #L3f496a.  v5:= temp @kind object;
  #L3f496c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f4972.  v0:= temp;
  #L3f4974.  v1:= 2I;
  #L3f4976.  v1:= new `org.reactivestreams.Publisher`[v1];
  #L3f497a.  v2:= 0I;
  #L3f497c.  v1[v2]:= v3 @kind object;
  #L3f4980.  v3:= 1I;
  #L3f4982.  v1[v3]:= v4 @kind object;
  #L3f4986.  call temp:= `zipArray`(v5, v6, v0, v1) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f498c.  v3:= temp @kind object;
  #L3f498e.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `io.reactivex.functions.BiFunction` v4 @kind object, `boolean` v5 , `int` v6 ) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f49a0.  v0:= "source1 is null" @kind object;
  #L3f49a4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f49aa.  v0:= "source2 is null" @kind object;
  #L3f49ae.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f49b4.  call temp:= `toFunction`(v4) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/BiFunction;)Lio/reactivex/functions/Function;` @kind static;
  #L3f49ba.  v4:= temp @kind object;
  #L3f49bc.  v0:= 2I;
  #L3f49be.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3f49c2.  v1:= 0I;
  #L3f49c4.  v0[v1]:= v2 @kind object;
  #L3f49c8.  v2:= 1I;
  #L3f49ca.  v0[v2]:= v3 @kind object;
  #L3f49ce.  call temp:= `zipArray`(v4, v5, v6, v0) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f49d4.  v2:= temp @kind object;
  #L3f49d6.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `io.reactivex.functions.Function3` v6 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function3;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f49e8.  v0:= "source1 is null" @kind object;
  #L3f49ec.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f49f2.  v0:= "source2 is null" @kind object;
  #L3f49f6.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f49fc.  v0:= "source3 is null" @kind object;
  #L3f4a00.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4a06.  call temp:= `toFunction`(v6) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function3;)Lio/reactivex/functions/Function;` @kind static;
  #L3f4a0c.  v6:= temp @kind object;
  #L3f4a0e.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f4a14.  v0:= temp;
  #L3f4a16.  v1:= 3I;
  #L3f4a18.  v1:= new `org.reactivestreams.Publisher`[v1];
  #L3f4a1c.  v2:= 0I;
  #L3f4a1e.  v1[v2]:= v3 @kind object;
  #L3f4a22.  v3:= 1I;
  #L3f4a24.  v1[v3]:= v4 @kind object;
  #L3f4a28.  v3:= 2I;
  #L3f4a2a.  v1[v3]:= v5 @kind object;
  #L3f4a2e.  call temp:= `zipArray`(v6, v2, v0, v1) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f4a34.  v3:= temp @kind object;
  #L3f4a36.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `io.reactivex.functions.Function4` v7 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function4;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f4a48.  v0:= "source1 is null" @kind object;
  #L3f4a4c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4a52.  v0:= "source2 is null" @kind object;
  #L3f4a56.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4a5c.  v0:= "source3 is null" @kind object;
  #L3f4a60.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4a66.  v0:= "source4 is null" @kind object;
  #L3f4a6a.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4a70.  call temp:= `toFunction`(v7) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function4;)Lio/reactivex/functions/Function;` @kind static;
  #L3f4a76.  v7:= temp @kind object;
  #L3f4a78.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f4a7e.  v0:= temp;
  #L3f4a80.  v1:= 4I;
  #L3f4a82.  v1:= new `org.reactivestreams.Publisher`[v1];
  #L3f4a86.  v2:= 0I;
  #L3f4a88.  v1[v2]:= v3 @kind object;
  #L3f4a8c.  v3:= 1I;
  #L3f4a8e.  v1[v3]:= v4 @kind object;
  #L3f4a92.  v3:= 2I;
  #L3f4a94.  v1[v3]:= v5 @kind object;
  #L3f4a98.  v3:= 3I;
  #L3f4a9a.  v1[v3]:= v6 @kind object;
  #L3f4a9e.  call temp:= `zipArray`(v7, v2, v0, v1) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f4aa4.  v3:= temp @kind object;
  #L3f4aa6.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object, `io.reactivex.functions.Function5` v8 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function5;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f4ab8.  v0:= "source1 is null" @kind object;
  #L3f4abc.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4ac2.  v0:= "source2 is null" @kind object;
  #L3f4ac6.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4acc.  v0:= "source3 is null" @kind object;
  #L3f4ad0.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4ad6.  v0:= "source4 is null" @kind object;
  #L3f4ada.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4ae0.  v0:= "source5 is null" @kind object;
  #L3f4ae4.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4aea.  call temp:= `toFunction`(v8) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function5;)Lio/reactivex/functions/Function;` @kind static;
  #L3f4af0.  v8:= temp @kind object;
  #L3f4af2.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f4af8.  v0:= temp;
  #L3f4afa.  v1:= 5I;
  #L3f4afc.  v1:= new `org.reactivestreams.Publisher`[v1];
  #L3f4b00.  v2:= 0I;
  #L3f4b02.  v1[v2]:= v3 @kind object;
  #L3f4b06.  v3:= 1I;
  #L3f4b08.  v1[v3]:= v4 @kind object;
  #L3f4b0c.  v3:= 2I;
  #L3f4b0e.  v1[v3]:= v5 @kind object;
  #L3f4b12.  v3:= 3I;
  #L3f4b14.  v1[v3]:= v6 @kind object;
  #L3f4b18.  v3:= 4I;
  #L3f4b1a.  v1[v3]:= v7 @kind object;
  #L3f4b1e.  call temp:= `zipArray`(v8, v2, v0, v1) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f4b24.  v3:= temp @kind object;
  #L3f4b26.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object, `org.reactivestreams.Publisher` v8 @kind object, `io.reactivex.functions.Function6` v9 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function6;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f4b38.  v0:= "source1 is null" @kind object;
  #L3f4b3c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4b42.  v0:= "source2 is null" @kind object;
  #L3f4b46.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4b4c.  v0:= "source3 is null" @kind object;
  #L3f4b50.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4b56.  v0:= "source4 is null" @kind object;
  #L3f4b5a.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4b60.  v0:= "source5 is null" @kind object;
  #L3f4b64.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4b6a.  v0:= "source6 is null" @kind object;
  #L3f4b6e.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4b74.  call temp:= `toFunction`(v9) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function6;)Lio/reactivex/functions/Function;` @kind static;
  #L3f4b7a.  v9:= temp @kind object;
  #L3f4b7c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f4b82.  v0:= temp;
  #L3f4b84.  v1:= 6I;
  #L3f4b86.  v1:= new `org.reactivestreams.Publisher`[v1];
  #L3f4b8a.  v2:= 0I;
  #L3f4b8c.  v1[v2]:= v3 @kind object;
  #L3f4b90.  v3:= 1I;
  #L3f4b92.  v1[v3]:= v4 @kind object;
  #L3f4b96.  v3:= 2I;
  #L3f4b98.  v1[v3]:= v5 @kind object;
  #L3f4b9c.  v3:= 3I;
  #L3f4b9e.  v1[v3]:= v6 @kind object;
  #L3f4ba2.  v3:= 4I;
  #L3f4ba4.  v1[v3]:= v7 @kind object;
  #L3f4ba8.  v3:= 5I;
  #L3f4baa.  v1[v3]:= v8 @kind object;
  #L3f4bae.  call temp:= `zipArray`(v9, v2, v0, v1) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f4bb4.  v3:= temp @kind object;
  #L3f4bb6.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object, `org.reactivestreams.Publisher` v8 @kind object, `org.reactivestreams.Publisher` v9 @kind object, `io.reactivex.functions.Function7` v10 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function7;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f4bc8.  v0:= "source1 is null" @kind object;
  #L3f4bcc.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4bd2.  v0:= "source2 is null" @kind object;
  #L3f4bd6.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4bdc.  v0:= "source3 is null" @kind object;
  #L3f4be0.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4be6.  v0:= "source4 is null" @kind object;
  #L3f4bea.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4bf0.  v0:= "source5 is null" @kind object;
  #L3f4bf4.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4bfa.  v0:= "source6 is null" @kind object;
  #L3f4bfe.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4c04.  v0:= "source7 is null" @kind object;
  #L3f4c08.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4c0e.  call temp:= `toFunction`(v10) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function7;)Lio/reactivex/functions/Function;` @kind static;
  #L3f4c14.  v10:= temp @kind object;
  #L3f4c16.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f4c1c.  v0:= temp;
  #L3f4c1e.  v1:= 7I;
  #L3f4c20.  v1:= new `org.reactivestreams.Publisher`[v1];
  #L3f4c24.  v2:= 0I;
  #L3f4c26.  v1[v2]:= v3 @kind object;
  #L3f4c2a.  v3:= 1I;
  #L3f4c2c.  v1[v3]:= v4 @kind object;
  #L3f4c30.  v3:= 2I;
  #L3f4c32.  v1[v3]:= v5 @kind object;
  #L3f4c36.  v3:= 3I;
  #L3f4c38.  v1[v3]:= v6 @kind object;
  #L3f4c3c.  v3:= 4I;
  #L3f4c3e.  v1[v3]:= v7 @kind object;
  #L3f4c42.  v3:= 5I;
  #L3f4c44.  v1[v3]:= v8 @kind object;
  #L3f4c48.  v3:= 6I;
  #L3f4c4a.  v1[v3]:= v9 @kind object;
  #L3f4c4e.  call temp:= `zipArray`(v10, v2, v0, v1) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f4c54.  v3:= temp @kind object;
  #L3f4c56.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object, `org.reactivestreams.Publisher` v8 @kind object, `org.reactivestreams.Publisher` v9 @kind object, `org.reactivestreams.Publisher` v10 @kind object, `io.reactivex.functions.Function8` v11 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function8;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f4c68.  v0:= "source1 is null" @kind object;
  #L3f4c6c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4c72.  v0:= "source2 is null" @kind object;
  #L3f4c76.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4c7c.  v0:= "source3 is null" @kind object;
  #L3f4c80.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4c86.  v0:= "source4 is null" @kind object;
  #L3f4c8a.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4c90.  v0:= "source5 is null" @kind object;
  #L3f4c94.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4c9a.  v0:= "source6 is null" @kind object;
  #L3f4c9e.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4ca4.  v0:= "source7 is null" @kind object;
  #L3f4ca8.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4cae.  v0:= "source8 is null" @kind object;
  #L3f4cb2.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4cb8.  call temp:= `toFunction`(v11) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function8;)Lio/reactivex/functions/Function;` @kind static;
  #L3f4cbe.  v11:= temp @kind object;
  #L3f4cc0.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f4cc6.  v0:= temp;
  #L3f4cc8.  v1:= 8I;
  #L3f4ccc.  v1:= new `org.reactivestreams.Publisher`[v1];
  #L3f4cd0.  v2:= 0I;
  #L3f4cd2.  v1[v2]:= v3 @kind object;
  #L3f4cd6.  v3:= 1I;
  #L3f4cd8.  v1[v3]:= v4 @kind object;
  #L3f4cdc.  v3:= 2I;
  #L3f4cde.  v1[v3]:= v5 @kind object;
  #L3f4ce2.  v3:= 3I;
  #L3f4ce4.  v1[v3]:= v6 @kind object;
  #L3f4ce8.  v3:= 4I;
  #L3f4cea.  v1[v3]:= v7 @kind object;
  #L3f4cee.  v3:= 5I;
  #L3f4cf0.  v1[v3]:= v8 @kind object;
  #L3f4cf4.  v3:= 6I;
  #L3f4cf6.  v1[v3]:= v9 @kind object;
  #L3f4cfa.  v3:= 7I;
  #L3f4cfc.  v1[v3]:= v10 @kind object;
  #L3f4d00.  call temp:= `zipArray`(v11, v2, v0, v1) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f4d06.  v3:= temp @kind object;
  #L3f4d08.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object, `org.reactivestreams.Publisher` v8 @kind object, `org.reactivestreams.Publisher` v9 @kind object, `org.reactivestreams.Publisher` v10 @kind object, `org.reactivestreams.Publisher` v11 @kind object, `io.reactivex.functions.Function9` v12 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function9;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f4d1c.  v0:= "source1 is null" @kind object;
  #L3f4d20.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4d26.  v0:= "source2 is null" @kind object;
  #L3f4d2a.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4d30.  v0:= "source3 is null" @kind object;
  #L3f4d34.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4d3a.  v0:= "source4 is null" @kind object;
  #L3f4d3e.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4d44.  v0:= "source5 is null" @kind object;
  #L3f4d48.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4d4e.  v0:= "source6 is null" @kind object;
  #L3f4d52.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4d58.  v0:= "source7 is null" @kind object;
  #L3f4d5c.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4d62.  v0:= "source8 is null" @kind object;
  #L3f4d66.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4d6c.  v0:= "source9 is null" @kind object;
  #L3f4d70.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4d76.  call temp:= `toFunction`(v12) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function9;)Lio/reactivex/functions/Function;` @kind static;
  #L3f4d7c.  v12:= temp @kind object;
  #L3f4d7e.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f4d84.  v0:= temp;
  #L3f4d86.  v1:= 9I;
  #L3f4d8a.  v1:= new `org.reactivestreams.Publisher`[v1];
  #L3f4d8e.  v2:= 0I;
  #L3f4d90.  v1[v2]:= v3 @kind object;
  #L3f4d94.  v3:= 1I;
  #L3f4d96.  v1[v3]:= v4 @kind object;
  #L3f4d9a.  v3:= 2I;
  #L3f4d9c.  v1[v3]:= v5 @kind object;
  #L3f4da0.  v3:= 3I;
  #L3f4da2.  v1[v3]:= v6 @kind object;
  #L3f4da6.  v3:= 4I;
  #L3f4da8.  v1[v3]:= v7 @kind object;
  #L3f4dac.  v3:= 5I;
  #L3f4dae.  v1[v3]:= v8 @kind object;
  #L3f4db2.  v3:= 6I;
  #L3f4db4.  v1[v3]:= v9 @kind object;
  #L3f4db8.  v3:= 7I;
  #L3f4dba.  v1[v3]:= v10 @kind object;
  #L3f4dbe.  v3:= 8I;
  #L3f4dc2.  v1[v3]:= v11 @kind object;
  #L3f4dc6.  call temp:= `zipArray`(v12, v2, v0, v1) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f4dcc.  v3:= temp @kind object;
  #L3f4dce.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `zipArray`(`io.reactivex.functions.Function` v7 @kind object, `boolean` v8 , `int` v9 , `org.reactivestreams.Publisher`[] v10 @kind object) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f4de0.  v0:= length @variable v10;
  #L3f4de2.  if v0 != 0 then goto L3f4df0;
  #L3f4de6.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3f4dec.  v7:= temp @kind object;
  #L3f4dee.  return v7 @kind object;
  #L3f4df0.  v0:= "zipper is null" @kind object;
  #L3f4df4.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4dfa.  v0:= "bufferSize" @kind object;
  #L3f4dfe.  call temp:= `verifyPositive`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f4e04.  v0:= new `io.reactivex.internal.operators.flowable.FlowableZip`;
  #L3f4e08.  v3:= 0I;
  #L3f4e0a.  v1:= v0 @kind object;
  #L3f4e0c.  v2:= v10 @kind object;
  #L3f4e0e.  v4:= v7 @kind object;
  #L3f4e10.  v5:= v9;
  #L3f4e12.  v6:= v8;
  #L3f4e14.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip;.<init>:([Lorg/reactivestreams/Publisher;Ljava/lang/Iterable;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L3f4e1a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f4e20.  v7:= temp @kind object;
  #L3f4e22.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `zipIterable`(`java.lang.Iterable` v7 @kind object, `io.reactivex.functions.Function` v8 @kind object, `boolean` v9 , `int` v10 ) @signature `Lio/reactivex/Flowable;.zipIterable:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f4e34.  v0:= "zipper is null" @kind object;
  #L3f4e38.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4e3e.  v0:= "sources is null" @kind object;
  #L3f4e42.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4e48.  v0:= "bufferSize" @kind object;
  #L3f4e4c.  call temp:= `verifyPositive`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f4e52.  v0:= new `io.reactivex.internal.operators.flowable.FlowableZip`;
  #L3f4e56.  v2:= 0I;
  #L3f4e58.  v1:= v0 @kind object;
  #L3f4e5a.  v3:= v7 @kind object;
  #L3f4e5c.  v4:= v8 @kind object;
  #L3f4e5e.  v5:= v10;
  #L3f4e60.  v6:= v9;
  #L3f4e62.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip;.<init>:([Lorg/reactivestreams/Publisher;Ljava/lang/Iterable;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L3f4e68.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f4e6e.  v7:= temp @kind object;
  #L3f4e70.  return v7 @kind object;
}
procedure `io.reactivex.Single` `all`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/Flowable;.all:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5034.  v0:= "predicate is null" @kind object;
  #L3f5038.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f503e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableAllSingle`;
  #L3f5042.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L3f5048.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3f504e.  v2:= temp @kind object;
  #L3f5050.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `ambWith`(`io.reactivex.Flowable` v2 @kind this, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/Flowable;.ambWith:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3efa1c.  v0:= "other is null" @kind object;
  #L3efa20.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3efa26.  v0:= 2I;
  #L3efa28.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3efa2c.  v1:= 0I;
  #L3efa2e.  v0[v1]:= v2 @kind object;
  #L3efa32.  v1:= 1I;
  #L3efa34.  v0[v1]:= v3 @kind object;
  #L3efa38.  call temp:= `ambArray`(v0) @signature `Lio/reactivex/Flowable;.ambArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3efa3e.  v3:= temp @kind object;
  #L3efa40.  return v3 @kind object;
}
procedure `io.reactivex.Single` `any`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/Flowable;.any:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5064.  v0:= "predicate is null" @kind object;
  #L3f5068.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f506e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableAnySingle`;
  #L3f5072.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableAnySingle;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L3f5078.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3f507e.  v2:= temp @kind object;
  #L3f5080.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `b`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/Flowable;.b:(Lio/reactivex/functions/Function;IZ)Lio/reactivex/Flowable;` @AccessFlag  {
    temp;
    v0;

  #L3f388c.  v0:= "mapper is null" @kind object;
  #L3f3890.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f3896.  v0:= "bufferSize" @kind object;
  #L3f389a.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f38a0.  v0:= instanceof @variable v1 @type ^`io.reactivex.internal.fuseable.ScalarCallable` @kind boolean;
  #L3f38a4.  if v0 == 0 then goto L3f38ce;
  #L3f38a8.  v3:= v1 @kind object;
  #L3f38aa.  v3:= (`io.reactivex.internal.fuseable.ScalarCallable`) v3 @kind object;
  #L3f38ae.  call temp:= `call`(v3) @signature `Lio/reactivex/internal/fuseable/ScalarCallable;.call:()Ljava/lang/Object;` @kind interface;
  #L3f38b4.  v3:= temp @kind object;
  #L3f38b6.  if v3 != 0 then goto L3f38c4;
  #L3f38ba.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3f38c0.  v2:= temp @kind object;
  #L3f38c2.  return v2 @kind object;
  #L3f38c4.  call temp:= `scalarXMap`(v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableScalarXMap;.scalarXMap:(Ljava/lang/Object;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L3f38ca.  v2:= temp @kind object;
  #L3f38cc.  return v2 @kind object;
  #L3f38ce.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSwitchMap`;
  #L3f38d2.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L3f38d8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f38de.  v2:= temp @kind object;
  #L3f38e0.  return v2 @kind object;
}
procedure `java.lang.Object` `blockingFirst`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.blockingFirst:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5bc0.  v0:= new `io.reactivex.internal.subscribers.BlockingFirstSubscriber`;
  #L3f5bc4.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscribers/BlockingFirstSubscriber;.<init>:()V` @kind direct;
  #L3f5bca.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f5bd0.  call temp:= `blockingGet`(v0) @signature `Lio/reactivex/internal/subscribers/BlockingBaseSubscriber;.blockingGet:()Ljava/lang/Object;` @kind virtual;
  #L3f5bd6.  v0:= temp @kind object;
  #L3f5bd8.  if v0 == 0 then goto L3f5bde;
  #L3f5bdc.  return v0 @kind object;
  #L3f5bde.  v0:= new `java.util.NoSuchElementException`;
  #L3f5be2.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L3f5be8.  throw v0;
}
procedure `java.lang.Object` `blockingFirst`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Flowable;.blockingFirst:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5bfc.  v0:= new `io.reactivex.internal.subscribers.BlockingFirstSubscriber`;
  #L3f5c00.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscribers/BlockingFirstSubscriber;.<init>:()V` @kind direct;
  #L3f5c06.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f5c0c.  call temp:= `blockingGet`(v0) @signature `Lio/reactivex/internal/subscribers/BlockingBaseSubscriber;.blockingGet:()Ljava/lang/Object;` @kind virtual;
  #L3f5c12.  v0:= temp @kind object;
  #L3f5c14.  if v0 == 0 then goto L3f5c1a;
  #L3f5c18.  v2:= v0 @kind object;
  #L3f5c1a.  return v2 @kind object;
}
procedure `void` `blockingForEach`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.blockingForEach:(Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f5dbc.  call temp:= `blockingIterable`(v2) @signature `Lio/reactivex/Flowable;.blockingIterable:()Ljava/lang/Iterable;` @kind virtual;
  #L3f5dc2.  v0:= temp @kind object;
  #L3f5dc4.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3f5dca.  v0:= temp @kind object;
  #L3f5dcc.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f5dd2.  v1:= temp;
  #L3f5dd4.  if v1 == 0 then goto L3f5e04;
  #L3f5dd8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f5dde.  v1:= temp @kind object;
  #L3f5de0.  call `accept`(v3, v1) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L3f5de6.  goto L3f5dcc;
  #L3f5de8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f5dea.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f5df0.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L3f5df4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L3f5dfa.  call temp:= `wrapOrThrow`(v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L3f5e00.  v3:= temp @kind object;
  #L3f5e02.  throw v3;
  #L3f5e04.  return @kind void;
  catch `java.lang.Throwable` @[L3f5dd8..L3f5de6] goto L3f5de8;
}
procedure `java.lang.Iterable` `blockingIterable`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.blockingIterable:()Ljava/lang/Iterable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5b20.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f5b26.  v0:= temp;
  #L3f5b28.  call temp:= `blockingIterable`(v1, v0) @signature `Lio/reactivex/Flowable;.blockingIterable:(I)Ljava/lang/Iterable;` @kind virtual;
  #L3f5b2e.  v0:= temp @kind object;
  #L3f5b30.  return v0 @kind object;
}
procedure `java.lang.Iterable` `blockingIterable`(`io.reactivex.Flowable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/Flowable;.blockingIterable:(I)Ljava/lang/Iterable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5b44.  v0:= "bufferSize" @kind object;
  #L3f5b48.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f5b4e.  v0:= new `io.reactivex.internal.operators.flowable.BlockingFlowableIterable`;
  #L3f5b52.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable;.<init>:(Lio/reactivex/Flowable;I)V` @kind direct;
  #L3f5b58.  return v0 @kind object;
}
procedure `java.lang.Object` `blockingLast`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.blockingLast:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5c2c.  v0:= new `io.reactivex.internal.subscribers.BlockingLastSubscriber`;
  #L3f5c30.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscribers/BlockingLastSubscriber;.<init>:()V` @kind direct;
  #L3f5c36.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f5c3c.  call temp:= `blockingGet`(v0) @signature `Lio/reactivex/internal/subscribers/BlockingBaseSubscriber;.blockingGet:()Ljava/lang/Object;` @kind virtual;
  #L3f5c42.  v0:= temp @kind object;
  #L3f5c44.  if v0 == 0 then goto L3f5c4a;
  #L3f5c48.  return v0 @kind object;
  #L3f5c4a.  v0:= new `java.util.NoSuchElementException`;
  #L3f5c4e.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L3f5c54.  throw v0;
}
procedure `java.lang.Object` `blockingLast`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Flowable;.blockingLast:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5c68.  v0:= new `io.reactivex.internal.subscribers.BlockingLastSubscriber`;
  #L3f5c6c.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscribers/BlockingLastSubscriber;.<init>:()V` @kind direct;
  #L3f5c72.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f5c78.  call temp:= `blockingGet`(v0) @signature `Lio/reactivex/internal/subscribers/BlockingBaseSubscriber;.blockingGet:()Ljava/lang/Object;` @kind virtual;
  #L3f5c7e.  v0:= temp @kind object;
  #L3f5c80.  if v0 == 0 then goto L3f5c86;
  #L3f5c84.  v2:= v0 @kind object;
  #L3f5c86.  return v2 @kind object;
}
procedure `java.lang.Iterable` `blockingLatest`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.blockingLatest:()Ljava/lang/Iterable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5b6c.  v0:= new `io.reactivex.internal.operators.flowable.BlockingFlowableLatest`;
  #L3f5b70.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest;.<init>:(Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3f5b76.  return v0 @kind object;
}
procedure `java.lang.Iterable` `blockingMostRecent`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Flowable;.blockingMostRecent:(Ljava/lang/Object;)Ljava/lang/Iterable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5b88.  v0:= new `io.reactivex.internal.operators.flowable.BlockingFlowableMostRecent`;
  #L3f5b8c.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableMostRecent;.<init>:(Lio/reactivex/Flowable;Ljava/lang/Object;)V` @kind direct;
  #L3f5b92.  return v0 @kind object;
}
procedure `java.lang.Iterable` `blockingNext`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.blockingNext:()Ljava/lang/Iterable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5ba4.  v0:= new `io.reactivex.internal.operators.flowable.BlockingFlowableNext`;
  #L3f5ba8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext;.<init>:(Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3f5bae.  return v0 @kind object;
}
procedure `java.lang.Object` `blockingSingle`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.blockingSingle:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5c98.  call temp:= `singleOrError`(v1) @signature `Lio/reactivex/Flowable;.singleOrError:()Lio/reactivex/Single;` @kind virtual;
  #L3f5c9e.  v0:= temp @kind object;
  #L3f5ca0.  call temp:= `blockingGet`(v0) @signature `Lio/reactivex/Single;.blockingGet:()Ljava/lang/Object;` @kind virtual;
  #L3f5ca6.  v0:= temp @kind object;
  #L3f5ca8.  return v0 @kind object;
}
procedure `java.lang.Object` `blockingSingle`(`io.reactivex.Flowable` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/Flowable;.blockingSingle:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3f5cbc.  call temp:= `single`(v0, v1) @signature `Lio/reactivex/Flowable;.single:(Ljava/lang/Object;)Lio/reactivex/Single;` @kind virtual;
  #L3f5cc2.  v1:= temp @kind object;
  #L3f5cc4.  call temp:= `blockingGet`(v1) @signature `Lio/reactivex/Single;.blockingGet:()Ljava/lang/Object;` @kind virtual;
  #L3f5cca.  v1:= temp @kind object;
  #L3f5ccc.  return v1 @kind object;
}
procedure `void` `blockingSubscribe`(`io.reactivex.Flowable` v0 @kind this) @signature `Lio/reactivex/Flowable;.blockingSubscribe:()V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3f5e24.  call `subscribe`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;)V` @kind static;
  #L3f5e2a.  return @kind void;
}
procedure `void` `blockingSubscribe`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.blockingSubscribe:(Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f5e3c.  v0:= `@@io.reactivex.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3f5e40.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f5e44.  call `subscribe`(v2, v3, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)V` @kind static;
  #L3f5e4a.  return @kind void;
}
procedure `void` `blockingSubscribe`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.blockingSubscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5e5c.  v0:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f5e60.  call `subscribe`(v1, v2, v3, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)V` @kind static;
  #L3f5e66.  return @kind void;
}
procedure `void` `blockingSubscribe`(`io.reactivex.Flowable` v0 @kind this, `io.reactivex.functions.Consumer` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Action` v3 @kind object) @signature `Lio/reactivex/Flowable;.blockingSubscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3f5e78.  call `subscribe`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)V` @kind static;
  #L3f5e7e.  return @kind void;
}
procedure `void` `blockingSubscribe`(`io.reactivex.Flowable` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/Flowable;.blockingSubscribe:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3f5e90.  call `subscribe`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L3f5e96.  return @kind void;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/Flowable;.buffer:(I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3efa54.  call temp:= `buffer`(v0, v1, v1) @signature `Lio/reactivex/Flowable;.buffer:(II)Lio/reactivex/Flowable;` @kind virtual;
  #L3efa5a.  v1:= temp @kind object;
  #L3efa5c.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lio/reactivex/Flowable;.buffer:(II)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3efa70.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L3efa76.  v0:= temp @kind object;
  #L3efa78.  call temp:= `buffer`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.buffer:(IILjava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L3efa7e.  v2:= temp @kind object;
  #L3efa80.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v1 @kind this, `int` v2 , `int` v3 , `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(IILjava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3efa94.  v0:= "count" @kind object;
  #L3efa98.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3efa9e.  v0:= "skip" @kind object;
  #L3efaa2.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3efaa8.  v0:= "bufferSupplier is null" @kind object;
  #L3efaac.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3efab2.  v0:= new `io.reactivex.internal.operators.flowable.FlowableBuffer`;
  #L3efab6.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer;.<init>:(Lio/reactivex/Flowable;IILjava/util/concurrent/Callable;)V` @kind direct;
  #L3efabc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3efac2.  v2:= temp @kind object;
  #L3efac4.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v0 @kind this, `int` v1 , `java.util.concurrent.Callable` v2 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(ILjava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3efad8.  call temp:= `buffer`(v0, v1, v1, v2) @signature `Lio/reactivex/Flowable;.buffer:(IILjava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L3efade.  v1:= temp @kind object;
  #L3efae0.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `long` v11 , `java.util.concurrent.TimeUnit` v13 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3efce0.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3efce6.  v6:= temp @kind object;
  #L3efce8.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L3efcee.  v7:= temp @kind object;
  #L3efcf0.  v0:= v8 @kind object;
  #L3efcf2.  v1:= v9 @kind wide;
  #L3efcf4.  v3:= v11 @kind wide;
  #L3efcf6.  v5:= v13 @kind object;
  #L3efcf8.  call temp:= `buffer`(v0, v1, v3, v5, v6, v7) @signature `Lio/reactivex/Flowable;.buffer:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L3efcfe.  v9:= temp @kind object;
  #L3efd00.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `long` v11 , `java.util.concurrent.TimeUnit` v13 @kind object, `io.reactivex.Scheduler` v14 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3efd14.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L3efd1a.  v7:= temp @kind object;
  #L3efd1c.  v0:= v8 @kind object;
  #L3efd1e.  v1:= v9 @kind wide;
  #L3efd20.  v3:= v11 @kind wide;
  #L3efd22.  v5:= v13 @kind object;
  #L3efd24.  v6:= v14 @kind object;
  #L3efd26.  call temp:= `buffer`(v0, v1, v3, v5, v6, v7) @signature `Lio/reactivex/Flowable;.buffer:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L3efd2c.  v9:= temp @kind object;
  #L3efd2e.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v12 @kind this, `long` v13 , `long` v15 , `java.util.concurrent.TimeUnit` v17 @kind object, `io.reactivex.Scheduler` v18 @kind object, `java.util.concurrent.Callable` v19 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L3efd40.  v0:= "unit is null" @kind object;
  #L3efd44.  v7:= v17 @kind object;
  #L3efd48.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3efd4e.  v0:= "scheduler is null" @kind object;
  #L3efd52.  v8:= v18 @kind object;
  #L3efd56.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3efd5c.  v0:= "bufferSupplier is null" @kind object;
  #L3efd60.  v9:= v19 @kind object;
  #L3efd64.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3efd6a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableBufferTimed`;
  #L3efd6e.  v10:= 2147483647I;
  #L3efd74.  v11:= 0I;
  #L3efd76.  v1:= v0 @kind object;
  #L3efd78.  v2:= v12 @kind object;
  #L3efd7a.  v3:= v13 @kind wide;
  #L3efd7c.  v5:= v15 @kind wide;
  #L3efd7e.  call `<init>`(v1, v2, v3, v5, v7, v8, v9, v10, v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed;.<init>:(Lio/reactivex/Flowable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Ljava/util/concurrent/Callable;IZ)V` @kind direct;
  #L3efd84.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3efd8a.  v0:= temp @kind object;
  #L3efd8c.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3efbb8.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3efbbe.  v4:= temp @kind object;
  #L3efbc0.  v5:= 2147483647I;
  #L3efbc6.  v0:= v6 @kind object;
  #L3efbc8.  v1:= v7 @kind wide;
  #L3efbca.  v3:= v9 @kind object;
  #L3efbcc.  call temp:= `buffer`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.buffer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3efbd2.  v7:= temp @kind object;
  #L3efbd4.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `int` v10 ) @signature `Lio/reactivex/Flowable;.buffer:(JLjava/util/concurrent/TimeUnit;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3efbe8.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3efbee.  v4:= temp @kind object;
  #L3efbf0.  v0:= v6 @kind object;
  #L3efbf2.  v1:= v7 @kind wide;
  #L3efbf4.  v3:= v9 @kind object;
  #L3efbf6.  v5:= v10;
  #L3efbf8.  call temp:= `buffer`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.buffer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3efbfe.  v7:= temp @kind object;
  #L3efc00.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.Scheduler` v12 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3efc14.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L3efc1a.  v6:= temp @kind object;
  #L3efc1c.  v5:= 2147483647I;
  #L3efc22.  v7:= 0I;
  #L3efc24.  v0:= v8 @kind object;
  #L3efc26.  v1:= v9 @kind wide;
  #L3efc28.  v3:= v11 @kind object;
  #L3efc2a.  v4:= v12 @kind object;
  #L3efc2c.  call temp:= `buffer`(v0, v1, v3, v4, v5, v6, v7) @signature `Lio/reactivex/Flowable;.buffer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ILjava/util/concurrent/Callable;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L3efc32.  v9:= temp @kind object;
  #L3efc34.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.Scheduler` v12 @kind object, `int` v13 ) @signature `Lio/reactivex/Flowable;.buffer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3efc48.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L3efc4e.  v6:= temp @kind object;
  #L3efc50.  v7:= 0I;
  #L3efc52.  v0:= v8 @kind object;
  #L3efc54.  v1:= v9 @kind wide;
  #L3efc56.  v3:= v11 @kind object;
  #L3efc58.  v4:= v12 @kind object;
  #L3efc5a.  v5:= v13;
  #L3efc5c.  call temp:= `buffer`(v0, v1, v3, v4, v5, v6, v7) @signature `Lio/reactivex/Flowable;.buffer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ILjava/util/concurrent/Callable;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L3efc62.  v9:= temp @kind object;
  #L3efc64.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v12 @kind this, `long` v13 , `java.util.concurrent.TimeUnit` v15 @kind object, `io.reactivex.Scheduler` v16 @kind object, `int` v17 , `java.util.concurrent.Callable` v18 @kind object, `boolean` v19 ) @signature `Lio/reactivex/Flowable;.buffer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ILjava/util/concurrent/Callable;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L3efc78.  v0:= "unit is null" @kind object;
  #L3efc7c.  v7:= v15 @kind object;
  #L3efc7e.  call temp:= `requireNonNull`(v15, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3efc84.  v0:= "scheduler is null" @kind object;
  #L3efc88.  v8:= v16 @kind object;
  #L3efc8c.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3efc92.  v0:= "bufferSupplier is null" @kind object;
  #L3efc96.  v9:= v18 @kind object;
  #L3efc9a.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3efca0.  v0:= "count" @kind object;
  #L3efca4.  v10:= v17;
  #L3efca8.  call temp:= `verifyPositive`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3efcae.  v0:= new `io.reactivex.internal.operators.flowable.FlowableBufferTimed`;
  #L3efcb2.  v1:= v0 @kind object;
  #L3efcb4.  v2:= v12 @kind object;
  #L3efcb6.  v3:= v13 @kind wide;
  #L3efcb8.  v5:= v13 @kind wide;
  #L3efcba.  v11:= v19;
  #L3efcbe.  call `<init>`(v1, v2, v3, v5, v7, v8, v9, v10, v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed;.<init>:(Lio/reactivex/Flowable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Ljava/util/concurrent/Callable;IZ)V` @kind direct;
  #L3efcc4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3efcca.  v0:= temp @kind object;
  #L3efccc.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.Flowable` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3efaf4.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L3efafa.  v0:= temp @kind object;
  #L3efafc.  call temp:= `buffer`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.buffer:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L3efb02.  v2:= temp @kind object;
  #L3efb04.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.Flowable` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3efb18.  v0:= "openingIndicator is null" @kind object;
  #L3efb1c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3efb22.  v0:= "closingIndicator is null" @kind object;
  #L3efb26.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3efb2c.  v0:= "bufferSupplier is null" @kind object;
  #L3efb30.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3efb36.  v0:= new `io.reactivex.internal.operators.flowable.FlowableBufferBoundary`;
  #L3efb3a.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3efb40.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3efb46.  v2:= temp @kind object;
  #L3efb48.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3efb5c.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L3efb62.  v0:= temp @kind object;
  #L3efb64.  call temp:= `buffer`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.buffer:(Ljava/util/concurrent/Callable;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L3efb6a.  v2:= temp @kind object;
  #L3efb6c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(Ljava/util/concurrent/Callable;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3efb80.  v0:= "boundaryIndicatorSupplier is null" @kind object;
  #L3efb84.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3efb8a.  v0:= "bufferSupplier is null" @kind object;
  #L3efb8e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3efb94.  v0:= new `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier`;
  #L3efb98.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3efb9e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3efba4.  v2:= temp @kind object;
  #L3efba6.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3efda0.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L3efda6.  v0:= temp @kind object;
  #L3efda8.  call temp:= `buffer`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.buffer:(Lorg/reactivestreams/Publisher;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L3efdae.  v2:= temp @kind object;
  #L3efdb0.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.buffer:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3efdc4.  v0:= "initialCapacity" @kind object;
  #L3efdc8.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3efdce.  call temp:= `createArrayList`(v3) @signature `Lio/reactivex/internal/functions/Functions;.createArrayList:(I)Ljava/util/concurrent/Callable;` @kind static;
  #L3efdd4.  v3:= temp @kind object;
  #L3efdd6.  call temp:= `buffer`(v1, v2, v3) @signature `Lio/reactivex/Flowable;.buffer:(Lorg/reactivestreams/Publisher;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L3efddc.  v2:= temp @kind object;
  #L3efdde.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(Lorg/reactivestreams/Publisher;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3efdf0.  v0:= "boundaryIndicator is null" @kind object;
  #L3efdf4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3efdfa.  v0:= "bufferSupplier is null" @kind object;
  #L3efdfe.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3efe04.  v0:= new `io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary`;
  #L3efe08.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3efe0e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3efe14.  v2:= temp @kind object;
  #L3efe16.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `cache`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.cache:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3efe28.  v0:= 16I;
  #L3efe2c.  call temp:= `cacheWithInitialCapacity`(v1, v0) @signature `Lio/reactivex/Flowable;.cacheWithInitialCapacity:(I)Lio/reactivex/Flowable;` @kind virtual;
  #L3efe32.  v0:= temp @kind object;
  #L3efe34.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `cacheWithInitialCapacity`(`io.reactivex.Flowable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/Flowable;.cacheWithInitialCapacity:(I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3efe48.  v0:= "initialCapacity" @kind object;
  #L3efe4c.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3efe52.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCache`;
  #L3efe56.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache;.<init>:(Lio/reactivex/Flowable;I)V` @kind direct;
  #L3efe5c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3efe62.  v2:= temp @kind object;
  #L3efe64.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `cast`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lio/reactivex/Flowable;.cast:(Ljava/lang/Class;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3efe78.  v0:= "clazz is null" @kind object;
  #L3efe7c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3efe82.  call temp:= `castFunction`(v2) @signature `Lio/reactivex/internal/functions/Functions;.castFunction:(Ljava/lang/Class;)Lio/reactivex/functions/Function;` @kind static;
  #L3efe88.  v2:= temp @kind object;
  #L3efe8a.  call temp:= `map`(v1, v2) @signature `Lio/reactivex/Flowable;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3efe90.  v2:= temp @kind object;
  #L3efe92.  return v2 @kind object;
}
procedure `io.reactivex.Single` `collect`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object, `io.reactivex.functions.BiConsumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.collect:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5094.  v0:= "initialItemSupplier is null" @kind object;
  #L3f5098.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f509e.  v0:= "collector is null" @kind object;
  #L3f50a2.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f50a8.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCollectSingle`;
  #L3f50ac.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollectSingle;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)V` @kind direct;
  #L3f50b2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3f50b8.  v2:= temp @kind object;
  #L3f50ba.  return v2 @kind object;
}
procedure `io.reactivex.Single` `collectInto`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object, `io.reactivex.functions.BiConsumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.collectInto:(Ljava/lang/Object;Lio/reactivex/functions/BiConsumer;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f50cc.  v0:= "initialItem is null" @kind object;
  #L3f50d0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f50d6.  call temp:= `justCallable`(v2) @signature `Lio/reactivex/internal/functions/Functions;.justCallable:(Ljava/lang/Object;)Ljava/util/concurrent/Callable;` @kind static;
  #L3f50dc.  v2:= temp @kind object;
  #L3f50de.  call temp:= `collect`(v1, v2, v3) @signature `Lio/reactivex/Flowable;.collect:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)Lio/reactivex/Single;` @kind virtual;
  #L3f50e4.  v2:= temp @kind object;
  #L3f50e6.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `compose`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.FlowableTransformer` v2 @kind object) @signature `Lio/reactivex/Flowable;.compose:(Lio/reactivex/FlowableTransformer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f04d0.  v0:= "composer is null" @kind object;
  #L3f04d4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f04da.  v2:= temp @kind object;
  #L3f04dc.  v2:= (`io.reactivex.FlowableTransformer`) v2 @kind object;
  #L3f04e0.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/FlowableTransformer;.apply:(Lio/reactivex/Flowable;)Lorg/reactivestreams/Publisher;` @kind interface;
  #L3f04e6.  v2:= temp @kind object;
  #L3f04e8.  call temp:= `fromPublisher`(v2) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f04ee.  v2:= temp @kind object;
  #L3f04f0.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatMap:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f0934.  v0:= 2I;
  #L3f0936.  call temp:= `concatMap`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.concatMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3f093c.  v2:= temp @kind object;
  #L3f093e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatMap`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.concatMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f0950.  v0:= "mapper is null" @kind object;
  #L3f0954.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f095a.  v0:= "prefetch" @kind object;
  #L3f095e.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f0964.  v0:= instanceof @variable v2 @type ^`io.reactivex.internal.fuseable.ScalarCallable` @kind boolean;
  #L3f0968.  if v0 == 0 then goto L3f0992;
  #L3f096c.  v4:= v2 @kind object;
  #L3f096e.  v4:= (`io.reactivex.internal.fuseable.ScalarCallable`) v4 @kind object;
  #L3f0972.  call temp:= `call`(v4) @signature `Lio/reactivex/internal/fuseable/ScalarCallable;.call:()Ljava/lang/Object;` @kind interface;
  #L3f0978.  v4:= temp @kind object;
  #L3f097a.  if v4 != 0 then goto L3f0988;
  #L3f097e.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3f0984.  v3:= temp @kind object;
  #L3f0986.  return v3 @kind object;
  #L3f0988.  call temp:= `scalarXMap`(v4, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableScalarXMap;.scalarXMap:(Ljava/lang/Object;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L3f098e.  v3:= temp @kind object;
  #L3f0990.  return v3 @kind object;
  #L3f0992.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatMap`;
  #L3f0996.  v1:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3f099a.  call `<init>`(v0, v2, v3, v4, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L3f09a0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f09a6.  v3:= temp @kind object;
  #L3f09a8.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapDelayError`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.concatMapDelayError:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f09bc.  v0:= 2I;
  #L3f09be.  v1:= 1I;
  #L3f09c0.  call temp:= `concatMapDelayError`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.concatMapDelayError:(Lio/reactivex/functions/Function;IZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3f09c6.  v3:= temp @kind object;
  #L3f09c8.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapDelayError`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/Flowable;.concatMapDelayError:(Lio/reactivex/functions/Function;IZ)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f09dc.  v0:= "mapper is null" @kind object;
  #L3f09e0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f09e6.  v0:= "prefetch" @kind object;
  #L3f09ea.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f09f0.  v0:= instanceof @variable v1 @type ^`io.reactivex.internal.fuseable.ScalarCallable` @kind boolean;
  #L3f09f4.  if v0 == 0 then goto L3f0a1e;
  #L3f09f8.  v3:= v1 @kind object;
  #L3f09fa.  v3:= (`io.reactivex.internal.fuseable.ScalarCallable`) v3 @kind object;
  #L3f09fe.  call temp:= `call`(v3) @signature `Lio/reactivex/internal/fuseable/ScalarCallable;.call:()Ljava/lang/Object;` @kind interface;
  #L3f0a04.  v3:= temp @kind object;
  #L3f0a06.  if v3 != 0 then goto L3f0a14;
  #L3f0a0a.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3f0a10.  v2:= temp @kind object;
  #L3f0a12.  return v2 @kind object;
  #L3f0a14.  call temp:= `scalarXMap`(v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableScalarXMap;.scalarXMap:(Ljava/lang/Object;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L3f0a1a.  v2:= temp @kind object;
  #L3f0a1c.  return v2 @kind object;
  #L3f0a1e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatMap`;
  #L3f0a22.  if v4 == 0 then goto L3f0a2c;
  #L3f0a26.  v4:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3f0a2a.  goto L3f0a30;
  #L3f0a2c.  v4:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3f0a30.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L3f0a36.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f0a3c.  v2:= temp @kind object;
  #L3f0a3e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapEager`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.concatMapEager:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f0a50.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f0a56.  v0:= temp;
  #L3f0a58.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f0a5e.  v1:= temp;
  #L3f0a60.  call temp:= `concatMapEager`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.concatMapEager:(Lio/reactivex/functions/Function;II)Lio/reactivex/Flowable;` @kind virtual;
  #L3f0a66.  v3:= temp @kind object;
  #L3f0a68.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapEager`(`io.reactivex.Flowable` v7 @kind this, `io.reactivex.functions.Function` v8 @kind object, `int` v9 , `int` v10 ) @signature `Lio/reactivex/Flowable;.concatMapEager:(Lio/reactivex/functions/Function;II)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f0a7c.  v0:= "mapper is null" @kind object;
  #L3f0a80.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0a86.  v0:= "maxConcurrency" @kind object;
  #L3f0a8a.  call temp:= `verifyPositive`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f0a90.  v0:= "prefetch" @kind object;
  #L3f0a94.  call temp:= `verifyPositive`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f0a9a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatMapEager`;
  #L3f0a9e.  v6:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3f0aa2.  v1:= v0 @kind object;
  #L3f0aa4.  v2:= v7 @kind object;
  #L3f0aa6.  v3:= v8 @kind object;
  #L3f0aa8.  v4:= v9;
  #L3f0aaa.  v5:= v10;
  #L3f0aac.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;IILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L3f0ab2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f0ab8.  v8:= temp @kind object;
  #L3f0aba.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapEagerDelayError`(`io.reactivex.Flowable` v7 @kind this, `io.reactivex.functions.Function` v8 @kind object, `int` v9 , `int` v10 , `boolean` v11 ) @signature `Lio/reactivex/Flowable;.concatMapEagerDelayError:(Lio/reactivex/functions/Function;IIZ)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f0af8.  v0:= "mapper is null" @kind object;
  #L3f0afc.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0b02.  v0:= "maxConcurrency" @kind object;
  #L3f0b06.  call temp:= `verifyPositive`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f0b0c.  v0:= "prefetch" @kind object;
  #L3f0b10.  call temp:= `verifyPositive`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f0b16.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatMapEager`;
  #L3f0b1a.  if v11 == 0 then goto L3f0b24;
  #L3f0b1e.  v11:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3f0b22.  goto L3f0b28;
  #L3f0b24.  v11:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3f0b28.  v6:= v11 @kind object;
  #L3f0b2a.  v1:= v0 @kind object;
  #L3f0b2c.  v2:= v7 @kind object;
  #L3f0b2e.  v3:= v8 @kind object;
  #L3f0b30.  v4:= v9;
  #L3f0b32.  v5:= v10;
  #L3f0b34.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;IILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L3f0b3a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f0b40.  v8:= temp @kind object;
  #L3f0b42.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapEagerDelayError`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/Flowable;.concatMapEagerDelayError:(Lio/reactivex/functions/Function;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f0acc.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f0ad2.  v0:= temp;
  #L3f0ad4.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f0ada.  v1:= temp;
  #L3f0adc.  call temp:= `concatMapEagerDelayError`(v2, v3, v0, v1, v4) @signature `Lio/reactivex/Flowable;.concatMapEagerDelayError:(Lio/reactivex/functions/Function;IIZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3f0ae2.  v3:= temp @kind object;
  #L3f0ae4.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapIterable`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatMapIterable:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f0b54.  v0:= 2I;
  #L3f0b56.  call temp:= `concatMapIterable`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.concatMapIterable:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3f0b5c.  v2:= temp @kind object;
  #L3f0b5e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapIterable`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.concatMapIterable:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f0b70.  v0:= "mapper is null" @kind object;
  #L3f0b74.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0b7a.  v0:= "prefetch" @kind object;
  #L3f0b7e.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f0b84.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlattenIterable`;
  #L3f0b88.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;I)V` @kind direct;
  #L3f0b8e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f0b94.  v2:= temp @kind object;
  #L3f0b96.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatWith`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatWith:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f0ba8.  v0:= "other is null" @kind object;
  #L3f0bac.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0bb2.  call temp:= `concat`(v1, v2) @signature `Lio/reactivex/Flowable;.concat:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f0bb8.  v2:= temp @kind object;
  #L3f0bba.  return v2 @kind object;
}
procedure `io.reactivex.Single` `contains`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Flowable;.contains:(Ljava/lang/Object;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f50f8.  v0:= "item is null" @kind object;
  #L3f50fc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f5102.  call temp:= `equalsWith`(v2) @signature `Lio/reactivex/internal/functions/Functions;.equalsWith:(Ljava/lang/Object;)Lio/reactivex/functions/Predicate;` @kind static;
  #L3f5108.  v2:= temp @kind object;
  #L3f510a.  call temp:= `any`(v1, v2) @signature `Lio/reactivex/Flowable;.any:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Single;` @kind virtual;
  #L3f5110.  v2:= temp @kind object;
  #L3f5112.  return v2 @kind object;
}
procedure `io.reactivex.Single` `count`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.count:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5124.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCountSingle`;
  #L3f5128.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCountSingle;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3f512e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3f5134.  v0:= temp @kind object;
  #L3f5136.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `debounce`(`io.reactivex.Flowable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Flowable;.debounce:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f0c34.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f0c3a.  v0:= temp @kind object;
  #L3f0c3c.  call temp:= `debounce`(v1, v2, v4, v0) @signature `Lio/reactivex/Flowable;.debounce:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f0c42.  v2:= temp @kind object;
  #L3f0c44.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `debounce`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object) @signature `Lio/reactivex/Flowable;.debounce:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f0c58.  v0:= "unit is null" @kind object;
  #L3f0c5c.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0c62.  v0:= "scheduler is null" @kind object;
  #L3f0c66.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0c6c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDebounceTimed`;
  #L3f0c70.  v1:= v0 @kind object;
  #L3f0c72.  v2:= v7 @kind object;
  #L3f0c74.  v3:= v8 @kind wide;
  #L3f0c76.  v5:= v10 @kind object;
  #L3f0c78.  v6:= v11 @kind object;
  #L3f0c7a.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed;.<init>:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L3f0c80.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f0c86.  v8:= temp @kind object;
  #L3f0c88.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `debounce`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.debounce:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f0c04.  v0:= "debounceIndicator is null" @kind object;
  #L3f0c08.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0c0e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDebounce`;
  #L3f0c12.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3f0c18.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f0c1e.  v2:= temp @kind object;
  #L3f0c20.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `defaultIfEmpty`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Flowable;.defaultIfEmpty:(Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f0c9c.  v0:= "item is null" @kind object;
  #L3f0ca0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0ca6.  call temp:= `just`(v2) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3f0cac.  v2:= temp @kind object;
  #L3f0cae.  call temp:= `switchIfEmpty`(v1, v2) @signature `Lio/reactivex/Flowable;.switchIfEmpty:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f0cb4.  v2:= temp @kind object;
  #L3f0cb6.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `delay`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object) @signature `Lio/reactivex/Flowable;.delay:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f0d24.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f0d2a.  v4:= temp @kind object;
  #L3f0d2c.  v5:= 0I;
  #L3f0d2e.  v0:= v6 @kind object;
  #L3f0d30.  v1:= v7 @kind wide;
  #L3f0d32.  v3:= v9 @kind object;
  #L3f0d34.  call temp:= `delay`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.delay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L3f0d3a.  v7:= temp @kind object;
  #L3f0d3c.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `delay`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `io.reactivex.Scheduler` v10 @kind object) @signature `Lio/reactivex/Flowable;.delay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f0d7c.  v5:= 0I;
  #L3f0d7e.  v0:= v6 @kind object;
  #L3f0d80.  v1:= v7 @kind wide;
  #L3f0d82.  v3:= v9 @kind object;
  #L3f0d84.  v4:= v10 @kind object;
  #L3f0d86.  call temp:= `delay`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.delay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L3f0d8c.  v7:= temp @kind object;
  #L3f0d8e.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `delay`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.Scheduler` v12 @kind object, `boolean` v13 ) @signature `Lio/reactivex/Flowable;.delay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f0da0.  v0:= "unit is null" @kind object;
  #L3f0da4.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0daa.  v0:= "scheduler is null" @kind object;
  #L3f0dae.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0db4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDelay`;
  #L3f0db8.  v1:= 0L;
  #L3f0dbc.  call temp:= `max`(v1, v9) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L3f0dc2.  v3:= temp @kind wide;
  #L3f0dc4.  v1:= v0 @kind object;
  #L3f0dc6.  v2:= v8 @kind object;
  #L3f0dc8.  v5:= v11 @kind object;
  #L3f0dca.  v6:= v12 @kind object;
  #L3f0dcc.  v7:= v13;
  #L3f0dce.  call `<init>`(v1, v2, v3, v5, v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay;.<init>:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)V` @kind direct;
  #L3f0dd4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f0dda.  v9:= temp @kind object;
  #L3f0ddc.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `delay`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `boolean` v10 ) @signature `Lio/reactivex/Flowable;.delay:(JLjava/util/concurrent/TimeUnit;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f0d50.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f0d56.  v4:= temp @kind object;
  #L3f0d58.  v0:= v6 @kind object;
  #L3f0d5a.  v1:= v7 @kind wide;
  #L3f0d5c.  v3:= v9 @kind object;
  #L3f0d5e.  v5:= v10;
  #L3f0d60.  call temp:= `delay`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.delay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L3f0d66.  v7:= temp @kind object;
  #L3f0d68.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `delay`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.delay:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f0cf8.  v0:= "itemDelayIndicator is null" @kind object;
  #L3f0cfc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0d02.  call temp:= `itemDelay`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.itemDelay:(Lio/reactivex/functions/Function;)Lio/reactivex/functions/Function;` @kind static;
  #L3f0d08.  v2:= temp @kind object;
  #L3f0d0a.  call temp:= `flatMap`(v1, v2) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f0d10.  v2:= temp @kind object;
  #L3f0d12.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `delay`(`io.reactivex.Flowable` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.delay:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3f0df0.  call temp:= `delaySubscription`(v0, v1) @signature `Lio/reactivex/Flowable;.delaySubscription:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f0df6.  v1:= temp @kind object;
  #L3f0df8.  call temp:= `delay`(v1, v2) @signature `Lio/reactivex/Flowable;.delay:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f0dfe.  v1:= temp @kind object;
  #L3f0e00.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `delaySubscription`(`io.reactivex.Flowable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Flowable;.delaySubscription:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f0e14.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f0e1a.  v0:= temp @kind object;
  #L3f0e1c.  call temp:= `delaySubscription`(v1, v2, v4, v0) @signature `Lio/reactivex/Flowable;.delaySubscription:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f0e22.  v2:= temp @kind object;
  #L3f0e24.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `delaySubscription`(`io.reactivex.Flowable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `io.reactivex.Scheduler` v4 @kind object) @signature `Lio/reactivex/Flowable;.delaySubscription:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3f0e38.  call temp:= `timer`(v1, v3, v4) @signature `Lio/reactivex/Flowable;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind static;
  #L3f0e3e.  v1:= temp @kind object;
  #L3f0e40.  call temp:= `delaySubscription`(v0, v1) @signature `Lio/reactivex/Flowable;.delaySubscription:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f0e46.  v1:= temp @kind object;
  #L3f0e48.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `delaySubscription`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.delaySubscription:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f0e5c.  v0:= "subscriptionIndicator is null" @kind object;
  #L3f0e60.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0e66.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther`;
  #L3f0e6a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther;.<init>:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3f0e70.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f0e76.  v2:= temp @kind object;
  #L3f0e78.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `dematerialize`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.dematerialize:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f0e8c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDematerialize`;
  #L3f0e90.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3f0e96.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f0e9c.  v0:= temp @kind object;
  #L3f0e9e.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `distinct`(`io.reactivex.Flowable` v2 @kind this) @signature `Lio/reactivex/Flowable;.distinct:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f0eb0.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f0eb6.  v0:= temp @kind object;
  #L3f0eb8.  call temp:= `createHashSet`() @signature `Lio/reactivex/internal/functions/Functions;.createHashSet:()Ljava/util/concurrent/Callable;` @kind static;
  #L3f0ebe.  v1:= temp @kind object;
  #L3f0ec0.  call temp:= `distinct`(v2, v0, v1) @signature `Lio/reactivex/Flowable;.distinct:(Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f0ec6.  v0:= temp @kind object;
  #L3f0ec8.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `distinct`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.distinct:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f0edc.  call temp:= `createHashSet`() @signature `Lio/reactivex/internal/functions/Functions;.createHashSet:()Ljava/util/concurrent/Callable;` @kind static;
  #L3f0ee2.  v0:= temp @kind object;
  #L3f0ee4.  call temp:= `distinct`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.distinct:(Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f0eea.  v2:= temp @kind object;
  #L3f0eec.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `distinct`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object) @signature `Lio/reactivex/Flowable;.distinct:(Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f0f00.  v0:= "keySelector is null" @kind object;
  #L3f0f04.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0f0a.  v0:= "collectionSupplier is null" @kind object;
  #L3f0f0e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0f14.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDistinct`;
  #L3f0f18.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinct;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3f0f1e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f0f24.  v2:= temp @kind object;
  #L3f0f26.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `distinctUntilChanged`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.distinctUntilChanged:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f0f38.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f0f3e.  v0:= temp @kind object;
  #L3f0f40.  call temp:= `distinctUntilChanged`(v1, v0) @signature `Lio/reactivex/Flowable;.distinctUntilChanged:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f0f46.  v0:= temp @kind object;
  #L3f0f48.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `distinctUntilChanged`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/Flowable;.distinctUntilChanged:(Lio/reactivex/functions/BiPredicate;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f0f5c.  v0:= "comparer is null" @kind object;
  #L3f0f60.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0f66.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged`;
  #L3f0f6a.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f0f70.  v1:= temp @kind object;
  #L3f0f72.  call `<init>`(v0, v2, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiPredicate;)V` @kind direct;
  #L3f0f78.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f0f7e.  v3:= temp @kind object;
  #L3f0f80.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `distinctUntilChanged`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.distinctUntilChanged:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f0f94.  v0:= "keySelector is null" @kind object;
  #L3f0f98.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0f9e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged`;
  #L3f0fa2.  call temp:= `equalsPredicate`() @signature `Lio/reactivex/internal/functions/ObjectHelper;.equalsPredicate:()Lio/reactivex/functions/BiPredicate;` @kind static;
  #L3f0fa8.  v1:= temp @kind object;
  #L3f0faa.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiPredicate;)V` @kind direct;
  #L3f0fb0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f0fb6.  v3:= temp @kind object;
  #L3f0fb8.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `doAfterNext`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object) @signature `Lio/reactivex/Flowable;.doAfterNext:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f0fcc.  v0:= "onAfterNext is null" @kind object;
  #L3f0fd0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0fd6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDoAfterNext`;
  #L3f0fda.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Consumer;)V` @kind direct;
  #L3f0fe0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f0fe6.  v2:= temp @kind object;
  #L3f0fe8.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `doAfterTerminate`(`io.reactivex.Flowable` v3 @kind this, `io.reactivex.functions.Action` v4 @kind object) @signature `Lio/reactivex/Flowable;.doAfterTerminate:(Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3f0ffc.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3f1002.  v0:= temp @kind object;
  #L3f1004.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3f100a.  v1:= temp @kind object;
  #L3f100c.  v2:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f1010.  call temp:= `a`(v3, v0, v1, v2, v4) @signature `Lio/reactivex/Flowable;.a:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind direct;
  #L3f1016.  v4:= temp @kind object;
  #L3f1018.  return v4 @kind object;
}
procedure `io.reactivex.Flowable` `doFinally`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Action` v2 @kind object) @signature `Lio/reactivex/Flowable;.doFinally:(Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f102c.  v0:= "onFinally is null" @kind object;
  #L3f1030.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1036.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDoFinally`;
  #L3f103a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Action;)V` @kind direct;
  #L3f1040.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f1046.  v2:= temp @kind object;
  #L3f1048.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `doOnCancel`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Action` v3 @kind object) @signature `Lio/reactivex/Flowable;.doOnCancel:(Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f105c.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3f1062.  v0:= temp @kind object;
  #L3f1064.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L3f1068.  call temp:= `doOnLifecycle`(v2, v0, v1, v3) @signature `Lio/reactivex/Flowable;.doOnLifecycle:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f106e.  v3:= temp @kind object;
  #L3f1070.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `doOnComplete`(`io.reactivex.Flowable` v3 @kind this, `io.reactivex.functions.Action` v4 @kind object) @signature `Lio/reactivex/Flowable;.doOnComplete:(Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3f1084.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3f108a.  v0:= temp @kind object;
  #L3f108c.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3f1092.  v1:= temp @kind object;
  #L3f1094.  v2:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f1098.  call temp:= `a`(v3, v0, v1, v4, v2) @signature `Lio/reactivex/Flowable;.a:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind direct;
  #L3f109e.  v4:= temp @kind object;
  #L3f10a0.  return v4 @kind object;
}
procedure `io.reactivex.Flowable` `doOnEach`(`io.reactivex.Flowable` v3 @kind this, `io.reactivex.functions.Consumer` v4 @kind object) @signature `Lio/reactivex/Flowable;.doOnEach:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3f10b4.  v0:= "consumer is null" @kind object;
  #L3f10b8.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f10be.  call temp:= `notificationOnNext`(v4) @signature `Lio/reactivex/internal/functions/Functions;.notificationOnNext:(Lio/reactivex/functions/Consumer;)Lio/reactivex/functions/Consumer;` @kind static;
  #L3f10c4.  v0:= temp @kind object;
  #L3f10c6.  call temp:= `notificationOnError`(v4) @signature `Lio/reactivex/internal/functions/Functions;.notificationOnError:(Lio/reactivex/functions/Consumer;)Lio/reactivex/functions/Consumer;` @kind static;
  #L3f10cc.  v1:= temp @kind object;
  #L3f10ce.  call temp:= `notificationOnComplete`(v4) @signature `Lio/reactivex/internal/functions/Functions;.notificationOnComplete:(Lio/reactivex/functions/Consumer;)Lio/reactivex/functions/Action;` @kind static;
  #L3f10d4.  v4:= temp @kind object;
  #L3f10d6.  v2:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f10da.  call temp:= `a`(v3, v0, v1, v4, v2) @signature `Lio/reactivex/Flowable;.a:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind direct;
  #L3f10e0.  v4:= temp @kind object;
  #L3f10e2.  return v4 @kind object;
}
procedure `io.reactivex.Flowable` `doOnEach`(`io.reactivex.Flowable` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/Flowable;.doOnEach:(Lorg/reactivestreams/Subscriber;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3f114c.  v0:= "subscriber is null" @kind object;
  #L3f1150.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1156.  call temp:= `subscriberOnNext`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.subscriberOnNext:(Lorg/reactivestreams/Subscriber;)Lio/reactivex/functions/Consumer;` @kind static;
  #L3f115c.  v0:= temp @kind object;
  #L3f115e.  call temp:= `subscriberOnError`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.subscriberOnError:(Lorg/reactivestreams/Subscriber;)Lio/reactivex/functions/Consumer;` @kind static;
  #L3f1164.  v1:= temp @kind object;
  #L3f1166.  call temp:= `subscriberOnComplete`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.subscriberOnComplete:(Lorg/reactivestreams/Subscriber;)Lio/reactivex/functions/Action;` @kind static;
  #L3f116c.  v4:= temp @kind object;
  #L3f116e.  v2:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f1172.  call temp:= `a`(v3, v0, v1, v4, v2) @signature `Lio/reactivex/Flowable;.a:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind direct;
  #L3f1178.  v4:= temp @kind object;
  #L3f117a.  return v4 @kind object;
}
procedure `io.reactivex.Flowable` `doOnError`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.doOnError:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f118c.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3f1192.  v0:= temp @kind object;
  #L3f1194.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f1198.  call temp:= `a`(v2, v0, v3, v1, v1) @signature `Lio/reactivex/Flowable;.a:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind direct;
  #L3f119e.  v3:= temp @kind object;
  #L3f11a0.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `doOnLifecycle`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.LongConsumer` v3 @kind object, `io.reactivex.functions.Action` v4 @kind object) @signature `Lio/reactivex/Flowable;.doOnLifecycle:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f11b4.  v0:= "onSubscribe is null" @kind object;
  #L3f11b8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f11be.  v0:= "onRequest is null" @kind object;
  #L3f11c2.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f11c8.  v0:= "onCancel is null" @kind object;
  #L3f11cc.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f11d2.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDoOnLifecycle`;
  #L3f11d6.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnLifecycle;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L3f11dc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f11e2.  v2:= temp @kind object;
  #L3f11e4.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `doOnNext`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.doOnNext:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f11f8.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3f11fe.  v0:= temp @kind object;
  #L3f1200.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f1204.  call temp:= `a`(v2, v3, v0, v1, v1) @signature `Lio/reactivex/Flowable;.a:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind direct;
  #L3f120a.  v3:= temp @kind object;
  #L3f120c.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `doOnRequest`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.LongConsumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.doOnRequest:(Lio/reactivex/functions/LongConsumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f1220.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3f1226.  v0:= temp @kind object;
  #L3f1228.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f122c.  call temp:= `doOnLifecycle`(v2, v0, v3, v1) @signature `Lio/reactivex/Flowable;.doOnLifecycle:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f1232.  v3:= temp @kind object;
  #L3f1234.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `doOnSubscribe`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.doOnSubscribe:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f1248.  v0:= `@@io.reactivex.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L3f124c.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f1250.  call temp:= `doOnLifecycle`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.doOnLifecycle:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f1256.  v3:= temp @kind object;
  #L3f1258.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `doOnTerminate`(`io.reactivex.Flowable` v3 @kind this, `io.reactivex.functions.Action` v4 @kind object) @signature `Lio/reactivex/Flowable;.doOnTerminate:(Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3f126c.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3f1272.  v0:= temp @kind object;
  #L3f1274.  call temp:= `actionConsumer`(v4) @signature `Lio/reactivex/internal/functions/Functions;.actionConsumer:(Lio/reactivex/functions/Action;)Lio/reactivex/functions/Consumer;` @kind static;
  #L3f127a.  v1:= temp @kind object;
  #L3f127c.  v2:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f1280.  call temp:= `a`(v3, v0, v1, v4, v2) @signature `Lio/reactivex/Flowable;.a:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind direct;
  #L3f1286.  v4:= temp @kind object;
  #L3f1288.  return v4 @kind object;
}
procedure `io.reactivex.Maybe` `elementAt`(`io.reactivex.Flowable` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/Flowable;.elementAt:(J)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3f4f18.  v0:= 0L;
  #L3f4f1c.  v2:= lcmp(v4, v0);
  #L3f4f20.  if v2 < 0 then goto L3f4f38;
  #L3f4f24.  v0:= new `io.reactivex.internal.operators.flowable.FlowableElementAtMaybe`;
  #L3f4f28.  call `<init>`(v0, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtMaybe;.<init>:(Lio/reactivex/Flowable;J)V` @kind direct;
  #L3f4f2e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f4f34.  v4:= temp @kind object;
  #L3f4f36.  return v4 @kind object;
  #L3f4f38.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L3f4f3c.  v1:= new `java.lang.StringBuilder`;
  #L3f4f40.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f4f46.  v2:= "index >= 0 required but it was " @kind object;
  #L3f4f4a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f4f50.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f4f56.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f4f5c.  v4:= temp @kind object;
  #L3f4f5e.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f4f64.  throw v0;
}
procedure `io.reactivex.Single` `elementAt`(`io.reactivex.Flowable` v3 @kind this, `long` v4 , `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/Flowable;.elementAt:(JLjava/lang/Object;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3f5148.  v0:= 0L;
  #L3f514c.  v2:= lcmp(v4, v0);
  #L3f5150.  if v2 < 0 then goto L3f5172;
  #L3f5154.  v0:= "defaultItem is null" @kind object;
  #L3f5158.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f515e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableElementAtSingle`;
  #L3f5162.  call `<init>`(v0, v3, v4, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle;.<init>:(Lio/reactivex/Flowable;JLjava/lang/Object;)V` @kind direct;
  #L3f5168.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3f516e.  v4:= temp @kind object;
  #L3f5170.  return v4 @kind object;
  #L3f5172.  v6:= new `java.lang.IndexOutOfBoundsException`;
  #L3f5176.  v0:= new `java.lang.StringBuilder`;
  #L3f517a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f5180.  v1:= "index >= 0 required but it was " @kind object;
  #L3f5184.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f518a.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f5190.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f5196.  v4:= temp @kind object;
  #L3f5198.  call `<init>`(v6, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f519e.  throw v6;
}
procedure `io.reactivex.Single` `elementAtOrError`(`io.reactivex.Flowable` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/Flowable;.elementAtOrError:(J)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3f51b0.  v0:= 0L;
  #L3f51b4.  v2:= lcmp(v4, v0);
  #L3f51b8.  if v2 < 0 then goto L3f51d2;
  #L3f51bc.  v0:= new `io.reactivex.internal.operators.flowable.FlowableElementAtSingle`;
  #L3f51c0.  v1:= 0I;
  #L3f51c2.  call `<init>`(v0, v3, v4, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle;.<init>:(Lio/reactivex/Flowable;JLjava/lang/Object;)V` @kind direct;
  #L3f51c8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3f51ce.  v4:= temp @kind object;
  #L3f51d0.  return v4 @kind object;
  #L3f51d2.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L3f51d6.  v1:= new `java.lang.StringBuilder`;
  #L3f51da.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f51e0.  v2:= "index >= 0 required but it was " @kind object;
  #L3f51e4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f51ea.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f51f0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f51f6.  v4:= temp @kind object;
  #L3f51f8.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f51fe.  throw v0;
}
procedure `io.reactivex.Flowable` `filter`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/Flowable;.filter:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f1318.  v0:= "predicate is null" @kind object;
  #L3f131c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1322.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFilter`;
  #L3f1326.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L3f132c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f1332.  v2:= temp @kind object;
  #L3f1334.  return v2 @kind object;
}
procedure `io.reactivex.Single` `first`(`io.reactivex.Flowable` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/Flowable;.first:(Ljava/lang/Object;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f5210.  v0:= 0L;
  #L3f5214.  call temp:= `elementAt`(v2, v0, v3) @signature `Lio/reactivex/Flowable;.elementAt:(JLjava/lang/Object;)Lio/reactivex/Single;` @kind virtual;
  #L3f521a.  v3:= temp @kind object;
  #L3f521c.  return v3 @kind object;
}
procedure `io.reactivex.Maybe` `firstElement`(`io.reactivex.Flowable` v2 @kind this) @signature `Lio/reactivex/Flowable;.firstElement:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f4f78.  v0:= 0L;
  #L3f4f7c.  call temp:= `elementAt`(v2, v0) @signature `Lio/reactivex/Flowable;.elementAt:(J)Lio/reactivex/Maybe;` @kind virtual;
  #L3f4f82.  v0:= temp @kind object;
  #L3f4f84.  return v0 @kind object;
}
procedure `io.reactivex.Single` `firstOrError`(`io.reactivex.Flowable` v2 @kind this) @signature `Lio/reactivex/Flowable;.firstOrError:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f5230.  v0:= 0L;
  #L3f5234.  call temp:= `elementAtOrError`(v2, v0) @signature `Lio/reactivex/Flowable;.elementAtOrError:(J)Lio/reactivex/Single;` @kind virtual;
  #L3f523a.  v0:= temp @kind object;
  #L3f523c.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v3 @kind this, `io.reactivex.functions.Function` v4 @kind object) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3f1348.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f134e.  v0:= temp;
  #L3f1350.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f1356.  v1:= temp;
  #L3f1358.  v2:= 0I;
  #L3f135a.  call temp:= `flatMap`(v3, v4, v2, v0, v1) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3f1360.  v4:= temp @kind object;
  #L3f1362.  return v4 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f1440.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f1446.  v0:= temp;
  #L3f1448.  v1:= 0I;
  #L3f144a.  call temp:= `flatMap`(v2, v3, v1, v4, v0) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3f1450.  v3:= temp @kind object;
  #L3f1452.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v6 @kind this, `io.reactivex.functions.Function` v7 @kind object, `io.reactivex.functions.BiFunction` v8 @kind object) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f1464.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f146a.  v4:= temp;
  #L3f146c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f1472.  v5:= temp;
  #L3f1474.  v3:= 0I;
  #L3f1476.  v0:= v6 @kind object;
  #L3f1478.  v1:= v7 @kind object;
  #L3f147a.  v2:= v8 @kind object;
  #L3f147c.  call temp:= `flatMap`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3f1482.  v7:= temp @kind object;
  #L3f1484.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v6 @kind this, `io.reactivex.functions.Function` v7 @kind object, `io.reactivex.functions.BiFunction` v8 @kind object, `int` v9 ) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f1544.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f154a.  v5:= temp;
  #L3f154c.  v3:= 0I;
  #L3f154e.  v0:= v6 @kind object;
  #L3f1550.  v1:= v7 @kind object;
  #L3f1552.  v2:= v8 @kind object;
  #L3f1554.  v4:= v9;
  #L3f1556.  call temp:= `flatMap`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3f155c.  v7:= temp @kind object;
  #L3f155e.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v6 @kind this, `io.reactivex.functions.Function` v7 @kind object, `io.reactivex.functions.BiFunction` v8 @kind object, `boolean` v9 ) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f1498.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f149e.  v4:= temp;
  #L3f14a0.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f14a6.  v5:= temp;
  #L3f14a8.  v0:= v6 @kind object;
  #L3f14aa.  v1:= v7 @kind object;
  #L3f14ac.  v2:= v8 @kind object;
  #L3f14ae.  v3:= v9;
  #L3f14b0.  call temp:= `flatMap`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3f14b6.  v7:= temp @kind object;
  #L3f14b8.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v6 @kind this, `io.reactivex.functions.Function` v7 @kind object, `io.reactivex.functions.BiFunction` v8 @kind object, `boolean` v9 , `int` v10 ) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f14cc.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f14d2.  v5:= temp;
  #L3f14d4.  v0:= v6 @kind object;
  #L3f14d6.  v1:= v7 @kind object;
  #L3f14d8.  v2:= v8 @kind object;
  #L3f14da.  v3:= v9;
  #L3f14dc.  v4:= v10;
  #L3f14de.  call temp:= `flatMap`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3f14e4.  v7:= temp @kind object;
  #L3f14e6.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object, `boolean` v4 , `int` v5 , `int` v6 ) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;ZII)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f14f8.  v0:= "mapper is null" @kind object;
  #L3f14fc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1502.  v0:= "combiner is null" @kind object;
  #L3f1506.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f150c.  v0:= "maxConcurrency" @kind object;
  #L3f1510.  call temp:= `verifyPositive`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f1516.  v0:= "bufferSize" @kind object;
  #L3f151a.  call temp:= `verifyPositive`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f1520.  call temp:= `flatMapWithCombiner`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.flatMapWithCombiner:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)Lio/reactivex/functions/Function;` @kind static;
  #L3f1526.  v2:= temp @kind object;
  #L3f1528.  call temp:= `flatMap`(v1, v2, v4, v5, v6) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3f152e.  v2:= temp @kind object;
  #L3f1530.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f1570.  v0:= "onNextMapper is null" @kind object;
  #L3f1574.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f157a.  v0:= "onErrorMapper is null" @kind object;
  #L3f157e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1584.  v0:= "onCompleteSupplier is null" @kind object;
  #L3f1588.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f158e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableMapNotification`;
  #L3f1592.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableMapNotification;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3f1598.  call temp:= `merge`(v0) @signature `Lio/reactivex/Flowable;.merge:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f159e.  v2:= temp @kind object;
  #L3f15a0.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object, `int` v5 ) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f15b4.  v0:= "onNextMapper is null" @kind object;
  #L3f15b8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f15be.  v0:= "onErrorMapper is null" @kind object;
  #L3f15c2.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f15c8.  v0:= "onCompleteSupplier is null" @kind object;
  #L3f15cc.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f15d2.  v0:= new `io.reactivex.internal.operators.flowable.FlowableMapNotification`;
  #L3f15d6.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableMapNotification;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3f15dc.  call temp:= `merge`(v0, v5) @signature `Lio/reactivex/Flowable;.merge:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @kind static;
  #L3f15e2.  v2:= temp @kind object;
  #L3f15e4.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f1374.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f137a.  v0:= temp;
  #L3f137c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f1382.  v1:= temp;
  #L3f1384.  call temp:= `flatMap`(v2, v3, v4, v0, v1) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3f138a.  v3:= temp @kind object;
  #L3f138c.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f13a0.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f13a6.  v0:= temp;
  #L3f13a8.  call temp:= `flatMap`(v1, v2, v3, v4, v0) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3f13ae.  v2:= temp @kind object;
  #L3f13b0.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v7 @kind this, `io.reactivex.functions.Function` v8 @kind object, `boolean` v9 , `int` v10 , `int` v11 ) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f13c4.  v0:= "mapper is null" @kind object;
  #L3f13c8.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f13ce.  v0:= "maxConcurrency" @kind object;
  #L3f13d2.  call temp:= `verifyPositive`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f13d8.  v0:= "bufferSize" @kind object;
  #L3f13dc.  call temp:= `verifyPositive`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f13e2.  v0:= instanceof @variable v7 @type ^`io.reactivex.internal.fuseable.ScalarCallable` @kind boolean;
  #L3f13e6.  if v0 == 0 then goto L3f1410;
  #L3f13ea.  v9:= v7 @kind object;
  #L3f13ec.  v9:= (`io.reactivex.internal.fuseable.ScalarCallable`) v9 @kind object;
  #L3f13f0.  call temp:= `call`(v9) @signature `Lio/reactivex/internal/fuseable/ScalarCallable;.call:()Ljava/lang/Object;` @kind interface;
  #L3f13f6.  v9:= temp @kind object;
  #L3f13f8.  if v9 != 0 then goto L3f1406;
  #L3f13fc.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3f1402.  v8:= temp @kind object;
  #L3f1404.  return v8 @kind object;
  #L3f1406.  call temp:= `scalarXMap`(v9, v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableScalarXMap;.scalarXMap:(Ljava/lang/Object;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L3f140c.  v8:= temp @kind object;
  #L3f140e.  return v8 @kind object;
  #L3f1410.  v6:= new `io.reactivex.internal.operators.flowable.FlowableFlatMap`;
  #L3f1414.  v0:= v6 @kind object;
  #L3f1416.  v1:= v7 @kind object;
  #L3f1418.  v2:= v8 @kind object;
  #L3f141a.  v3:= v9;
  #L3f141c.  v4:= v10;
  #L3f141e.  v5:= v11;
  #L3f1420.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;ZII)V` @kind direct;
  #L3f1426.  call temp:= `onAssembly`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f142c.  v8:= temp @kind object;
  #L3f142e.  return v8 @kind object;
}
procedure `io.reactivex.Completable` `flatMapCompletable`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.flatMapCompletable:(Lio/reactivex/functions/Function;)Lio/reactivex/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3ef914.  v0:= 0I;
  #L3ef916.  v1:= 2147483647I;
  #L3ef91c.  call temp:= `flatMapCompletable`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.flatMapCompletable:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Completable;` @kind virtual;
  #L3ef922.  v3:= temp @kind object;
  #L3ef924.  return v3 @kind object;
}
procedure `io.reactivex.Completable` `flatMapCompletable`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.flatMapCompletable:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3ef938.  v0:= "mapper is null" @kind object;
  #L3ef93c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3ef942.  v0:= "maxConcurrency" @kind object;
  #L3ef946.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3ef94c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable`;
  #L3ef950.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;ZI)V` @kind direct;
  #L3ef956.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Completable;)Lio/reactivex/Completable;` @kind static;
  #L3ef95c.  v2:= temp @kind object;
  #L3ef95e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flatMapIterable`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.flatMapIterable:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f15f8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f15fe.  v0:= temp;
  #L3f1600.  call temp:= `flatMapIterable`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.flatMapIterable:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3f1606.  v2:= temp @kind object;
  #L3f1608.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flatMapIterable`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.flatMapIterable:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f161c.  v0:= "mapper is null" @kind object;
  #L3f1620.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1626.  v0:= "bufferSize" @kind object;
  #L3f162a.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f1630.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlattenIterable`;
  #L3f1634.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;I)V` @kind direct;
  #L3f163a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f1640.  v2:= temp @kind object;
  #L3f1642.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flatMapIterable`(`io.reactivex.Flowable` v7 @kind this, `io.reactivex.functions.Function` v8 @kind object, `io.reactivex.functions.BiFunction` v9 @kind object) @signature `Lio/reactivex/Flowable;.flatMapIterable:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f1654.  v0:= "mapper is null" @kind object;
  #L3f1658.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f165e.  v0:= "resultSelector is null" @kind object;
  #L3f1662.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1668.  call temp:= `flatMapIntoIterable`(v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.flatMapIntoIterable:(Lio/reactivex/functions/Function;)Lio/reactivex/functions/Function;` @kind static;
  #L3f166e.  v2:= temp @kind object;
  #L3f1670.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f1676.  v5:= temp;
  #L3f1678.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f167e.  v6:= temp;
  #L3f1680.  v4:= 0I;
  #L3f1682.  v1:= v7 @kind object;
  #L3f1684.  v3:= v9 @kind object;
  #L3f1686.  call temp:= `flatMap`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3f168c.  v8:= temp @kind object;
  #L3f168e.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `flatMapIterable`(`io.reactivex.Flowable` v7 @kind this, `io.reactivex.functions.Function` v8 @kind object, `io.reactivex.functions.BiFunction` v9 @kind object, `int` v10 ) @signature `Lio/reactivex/Flowable;.flatMapIterable:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f16a0.  v0:= "mapper is null" @kind object;
  #L3f16a4.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f16aa.  v0:= "resultSelector is null" @kind object;
  #L3f16ae.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f16b4.  call temp:= `flatMapIntoIterable`(v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.flatMapIntoIterable:(Lio/reactivex/functions/Function;)Lio/reactivex/functions/Function;` @kind static;
  #L3f16ba.  v2:= temp @kind object;
  #L3f16bc.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f16c2.  v5:= temp;
  #L3f16c4.  v4:= 0I;
  #L3f16c6.  v1:= v7 @kind object;
  #L3f16c8.  v3:= v9 @kind object;
  #L3f16ca.  v6:= v10;
  #L3f16cc.  call temp:= `flatMap`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3f16d2.  v8:= temp @kind object;
  #L3f16d4.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `flatMapMaybe`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.flatMapMaybe:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f16e8.  v0:= 0I;
  #L3f16ea.  v1:= 2147483647I;
  #L3f16f0.  call temp:= `flatMapMaybe`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.flatMapMaybe:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f16f6.  v3:= temp @kind object;
  #L3f16f8.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `flatMapMaybe`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.flatMapMaybe:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f170c.  v0:= "mapper is null" @kind object;
  #L3f1710.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1716.  v0:= "maxConcurrency" @kind object;
  #L3f171a.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f1720.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe`;
  #L3f1724.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;ZI)V` @kind direct;
  #L3f172a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f1730.  v2:= temp @kind object;
  #L3f1732.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flatMapSingle`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.flatMapSingle:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f1744.  v0:= 0I;
  #L3f1746.  v1:= 2147483647I;
  #L3f174c.  call temp:= `flatMapSingle`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.flatMapSingle:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f1752.  v3:= temp @kind object;
  #L3f1754.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `flatMapSingle`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.flatMapSingle:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f1768.  v0:= "mapper is null" @kind object;
  #L3f176c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1772.  v0:= "maxConcurrency" @kind object;
  #L3f1776.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f177c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle`;
  #L3f1780.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;ZI)V` @kind direct;
  #L3f1786.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f178c.  v2:= temp @kind object;
  #L3f178e.  return v2 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `forEach`(`io.reactivex.Flowable` v0 @kind this, `io.reactivex.functions.Consumer` v1 @kind object) @signature `Lio/reactivex/Flowable;.forEach:(Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3f570c.  call temp:= `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3f5712.  v1:= temp @kind object;
  #L3f5714.  return v1 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `forEachWhile`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Predicate` v3 @kind object) @signature `Lio/reactivex/Flowable;.forEachWhile:(Lio/reactivex/functions/Predicate;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f5728.  v0:= `@@io.reactivex.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3f572c.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f5730.  call temp:= `forEachWhile`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.forEachWhile:(Lio/reactivex/functions/Predicate;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3f5736.  v3:= temp @kind object;
  #L3f5738.  return v3 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `forEachWhile`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.forEachWhile:(Lio/reactivex/functions/Predicate;Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f574c.  v0:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f5750.  call temp:= `forEachWhile`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.forEachWhile:(Lio/reactivex/functions/Predicate;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3f5756.  v2:= temp @kind object;
  #L3f5758.  return v2 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `forEachWhile`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `io.reactivex.functions.Action` v4 @kind object) @signature `Lio/reactivex/Flowable;.forEachWhile:(Lio/reactivex/functions/Predicate;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f576c.  v0:= "onNext is null" @kind object;
  #L3f5770.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f5776.  v0:= "onError is null" @kind object;
  #L3f577a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f5780.  v0:= "onComplete is null" @kind object;
  #L3f5784.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f578a.  v0:= new `io.reactivex.internal.subscribers.ForEachWhileSubscriber`;
  #L3f578e.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.<init>:(Lio/reactivex/functions/Predicate;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L3f5794.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f579a.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `groupBy`(`io.reactivex.Flowable` v3 @kind this, `io.reactivex.functions.Function` v4 @kind object) @signature `Lio/reactivex/Flowable;.groupBy:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3f1a64.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f1a6a.  v0:= temp @kind object;
  #L3f1a6c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f1a72.  v1:= temp;
  #L3f1a74.  v2:= 0I;
  #L3f1a76.  call temp:= `groupBy`(v3, v4, v0, v2, v1) @signature `Lio/reactivex/Flowable;.groupBy:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f1a7c.  v4:= temp @kind object;
  #L3f1a7e.  return v4 @kind object;
}
procedure `io.reactivex.Flowable` `groupBy`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object) @signature `Lio/reactivex/Flowable;.groupBy:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f1abc.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f1ac2.  v0:= temp;
  #L3f1ac4.  v1:= 0I;
  #L3f1ac6.  call temp:= `groupBy`(v2, v3, v4, v1, v0) @signature `Lio/reactivex/Flowable;.groupBy:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f1acc.  v3:= temp @kind object;
  #L3f1ace.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `groupBy`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/Flowable;.groupBy:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f1ae0.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f1ae6.  v0:= temp;
  #L3f1ae8.  call temp:= `groupBy`(v1, v2, v3, v4, v0) @signature `Lio/reactivex/Flowable;.groupBy:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f1aee.  v2:= temp @kind object;
  #L3f1af0.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `groupBy`(`io.reactivex.Flowable` v7 @kind this, `io.reactivex.functions.Function` v8 @kind object, `io.reactivex.functions.Function` v9 @kind object, `boolean` v10 , `int` v11 ) @signature `Lio/reactivex/Flowable;.groupBy:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f1b04.  v0:= "keySelector is null" @kind object;
  #L3f1b08.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1b0e.  v0:= "valueSelector is null" @kind object;
  #L3f1b12.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1b18.  v0:= "bufferSize" @kind object;
  #L3f1b1c.  call temp:= `verifyPositive`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f1b22.  v0:= new `io.reactivex.internal.operators.flowable.FlowableGroupBy`;
  #L3f1b26.  v1:= v0 @kind object;
  #L3f1b28.  v2:= v7 @kind object;
  #L3f1b2a.  v3:= v8 @kind object;
  #L3f1b2c.  v4:= v9 @kind object;
  #L3f1b2e.  v5:= v11;
  #L3f1b30.  v6:= v10;
  #L3f1b32.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L3f1b38.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f1b3e.  v8:= temp @kind object;
  #L3f1b40.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `groupBy`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/Flowable;.groupBy:(Lio/reactivex/functions/Function;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f1a90.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f1a96.  v0:= temp @kind object;
  #L3f1a98.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f1a9e.  v1:= temp;
  #L3f1aa0.  call temp:= `groupBy`(v2, v3, v0, v4, v1) @signature `Lio/reactivex/Flowable;.groupBy:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f1aa6.  v3:= temp @kind object;
  #L3f1aa8.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `groupJoin`(`io.reactivex.Flowable` v7 @kind this, `org.reactivestreams.Publisher` v8 @kind object, `io.reactivex.functions.Function` v9 @kind object, `io.reactivex.functions.Function` v10 @kind object, `io.reactivex.functions.BiFunction` v11 @kind object) @signature `Lio/reactivex/Flowable;.groupJoin:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f1b54.  v0:= "other is null" @kind object;
  #L3f1b58.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1b5e.  v0:= "leftEnd is null" @kind object;
  #L3f1b62.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1b68.  v0:= "rightEnd is null" @kind object;
  #L3f1b6c.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1b72.  v0:= "resultSelector is null" @kind object;
  #L3f1b76.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1b7c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableGroupJoin`;
  #L3f1b80.  v1:= v0 @kind object;
  #L3f1b82.  v2:= v7 @kind object;
  #L3f1b84.  v3:= v8 @kind object;
  #L3f1b86.  v4:= v9 @kind object;
  #L3f1b88.  v5:= v10 @kind object;
  #L3f1b8a.  v6:= v11 @kind object;
  #L3f1b8c.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L3f1b92.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f1b98.  v8:= temp @kind object;
  #L3f1b9a.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `hide`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.hide:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f1bac.  v0:= new `io.reactivex.internal.operators.flowable.FlowableHide`;
  #L3f1bb0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableHide;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3f1bb6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f1bbc.  v0:= temp @kind object;
  #L3f1bbe.  return v0 @kind object;
}
procedure `io.reactivex.Completable` `ignoreElements`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.ignoreElements:()Lio/reactivex/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3ef970.  v0:= new `io.reactivex.internal.operators.flowable.FlowableIgnoreElementsCompletable`;
  #L3ef974.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableIgnoreElementsCompletable;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3ef97a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Completable;)Lio/reactivex/Completable;` @kind static;
  #L3ef980.  v0:= temp @kind object;
  #L3ef982.  return v0 @kind object;
}
procedure `io.reactivex.Single` `isEmpty`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.isEmpty:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5250.  call temp:= `alwaysFalse`() @signature `Lio/reactivex/internal/functions/Functions;.alwaysFalse:()Lio/reactivex/functions/Predicate;` @kind static;
  #L3f5256.  v0:= temp @kind object;
  #L3f5258.  call temp:= `all`(v1, v0) @signature `Lio/reactivex/Flowable;.all:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Single;` @kind virtual;
  #L3f525e.  v0:= temp @kind object;
  #L3f5260.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `join`(`io.reactivex.Flowable` v7 @kind this, `org.reactivestreams.Publisher` v8 @kind object, `io.reactivex.functions.Function` v9 @kind object, `io.reactivex.functions.Function` v10 @kind object, `io.reactivex.functions.BiFunction` v11 @kind object) @signature `Lio/reactivex/Flowable;.join:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f1db4.  v0:= "other is null" @kind object;
  #L3f1db8.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1dbe.  v0:= "leftEnd is null" @kind object;
  #L3f1dc2.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1dc8.  v0:= "rightEnd is null" @kind object;
  #L3f1dcc.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1dd2.  v0:= "resultSelector is null" @kind object;
  #L3f1dd6.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f1ddc.  v0:= new `io.reactivex.internal.operators.flowable.FlowableJoin`;
  #L3f1de0.  v1:= v0 @kind object;
  #L3f1de2.  v2:= v7 @kind object;
  #L3f1de4.  v3:= v8 @kind object;
  #L3f1de6.  v4:= v9 @kind object;
  #L3f1de8.  v5:= v10 @kind object;
  #L3f1dea.  v6:= v11 @kind object;
  #L3f1dec.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L3f1df2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f1df8.  v8:= temp @kind object;
  #L3f1dfa.  return v8 @kind object;
}
procedure `io.reactivex.Single` `last`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Flowable;.last:(Ljava/lang/Object;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5274.  v0:= "defaultItem" @kind object;
  #L3f5278.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f527e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableLastSingle`;
  #L3f5282.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableLastSingle;.<init>:(Lorg/reactivestreams/Publisher;Ljava/lang/Object;)V` @kind direct;
  #L3f5288.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3f528e.  v2:= temp @kind object;
  #L3f5290.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `lastElement`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.lastElement:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f4f98.  v0:= new `io.reactivex.internal.operators.flowable.FlowableLastMaybe`;
  #L3f4f9c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableLastMaybe;.<init>:(Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3f4fa2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f4fa8.  v0:= temp @kind object;
  #L3f4faa.  return v0 @kind object;
}
procedure `io.reactivex.Single` `lastOrError`(`io.reactivex.Flowable` v2 @kind this) @signature `Lio/reactivex/Flowable;.lastOrError:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f52a4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableLastSingle`;
  #L3f52a8.  v1:= 0I;
  #L3f52aa.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableLastSingle;.<init>:(Lorg/reactivestreams/Publisher;Ljava/lang/Object;)V` @kind direct;
  #L3f52b0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3f52b6.  v0:= temp @kind object;
  #L3f52b8.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `lift`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.FlowableOperator` v2 @kind object) @signature `Lio/reactivex/Flowable;.lift:(Lio/reactivex/FlowableOperator;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f22cc.  v0:= "lifter is null" @kind object;
  #L3f22d0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f22d6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableLift`;
  #L3f22da.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableLift;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/FlowableOperator;)V` @kind direct;
  #L3f22e0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f22e6.  v2:= temp @kind object;
  #L3f22e8.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `map`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f22fc.  v0:= "mapper is null" @kind object;
  #L3f2300.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2306.  v0:= new `io.reactivex.internal.operators.flowable.FlowableMap`;
  #L3f230a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3f2310.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f2316.  v2:= temp @kind object;
  #L3f2318.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `materialize`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.materialize:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f232c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableMaterialize`;
  #L3f2330.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMaterialize;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3f2336.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f233c.  v0:= temp @kind object;
  #L3f233e.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `mergeWith`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.mergeWith:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f27ec.  v0:= "other is null" @kind object;
  #L3f27f0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f27f6.  call temp:= `merge`(v1, v2) @signature `Lio/reactivex/Flowable;.merge:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f27fc.  v2:= temp @kind object;
  #L3f27fe.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `observeOn`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.Scheduler` v3 @kind object) @signature `Lio/reactivex/Flowable;.observeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f2830.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f2836.  v0:= temp;
  #L3f2838.  v1:= 0I;
  #L3f283a.  call temp:= `observeOn`(v2, v3, v1, v0) @signature `Lio/reactivex/Flowable;.observeOn:(Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f2840.  v3:= temp @kind object;
  #L3f2842.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `observeOn`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/Flowable;.observeOn:(Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f2854.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f285a.  v0:= temp;
  #L3f285c.  call temp:= `observeOn`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.observeOn:(Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f2862.  v2:= temp @kind object;
  #L3f2864.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `observeOn`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.observeOn:(Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f2878.  v0:= "scheduler is null" @kind object;
  #L3f287c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2882.  v0:= "bufferSize" @kind object;
  #L3f2886.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f288c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableObserveOn`;
  #L3f2890.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/Scheduler;ZI)V` @kind direct;
  #L3f2896.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f289c.  v2:= temp @kind object;
  #L3f289e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `ofType`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lio/reactivex/Flowable;.ofType:(Ljava/lang/Class;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f28b0.  v0:= "clazz is null" @kind object;
  #L3f28b4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f28ba.  call temp:= `isInstanceOf`(v2) @signature `Lio/reactivex/internal/functions/Functions;.isInstanceOf:(Ljava/lang/Class;)Lio/reactivex/functions/Predicate;` @kind static;
  #L3f28c0.  v0:= temp @kind object;
  #L3f28c2.  call temp:= `filter`(v1, v0) @signature `Lio/reactivex/Flowable;.filter:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f28c8.  v0:= temp @kind object;
  #L3f28ca.  call temp:= `cast`(v0, v2) @signature `Lio/reactivex/Flowable;.cast:(Ljava/lang/Class;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f28d0.  v2:= temp @kind object;
  #L3f28d2.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureBuffer`(`io.reactivex.Flowable` v3 @kind this) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3f28e4.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f28ea.  v0:= temp;
  #L3f28ec.  v1:= 0I;
  #L3f28ee.  v2:= 1I;
  #L3f28f0.  call temp:= `onBackpressureBuffer`(v3, v0, v1, v2) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(IZZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3f28f6.  v0:= temp @kind object;
  #L3f28f8.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureBuffer`(`io.reactivex.Flowable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f2930.  v0:= 0I;
  #L3f2932.  call temp:= `onBackpressureBuffer`(v1, v2, v0, v0) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(IZZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3f2938.  v2:= temp @kind object;
  #L3f293a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureBuffer`(`io.reactivex.Flowable` v1 @kind this, `int` v2 , `io.reactivex.functions.Action` v3 @kind object) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(ILio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f29e8.  v0:= 0I;
  #L3f29ea.  call temp:= `onBackpressureBuffer`(v1, v2, v0, v0, v3) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(IZZLio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f29f0.  v2:= temp @kind object;
  #L3f29f2.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureBuffer`(`io.reactivex.Flowable` v1 @kind this, `int` v2 , `boolean` v3 ) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(IZ)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f294c.  v0:= 0I;
  #L3f294e.  call temp:= `onBackpressureBuffer`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(IZZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3f2954.  v2:= temp @kind object;
  #L3f2956.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureBuffer`(`io.reactivex.Flowable` v7 @kind this, `int` v8 , `boolean` v9 , `boolean` v10 ) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(IZZ)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f2968.  v0:= "bufferSize" @kind object;
  #L3f296c.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f2972.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer`;
  #L3f2976.  v6:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f297a.  v1:= v0 @kind object;
  #L3f297c.  v2:= v7 @kind object;
  #L3f297e.  v3:= v8;
  #L3f2980.  v4:= v10;
  #L3f2982.  v5:= v9;
  #L3f2984.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer;.<init>:(Lio/reactivex/Flowable;IZZLio/reactivex/functions/Action;)V` @kind direct;
  #L3f298a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f2990.  v8:= temp @kind object;
  #L3f2992.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureBuffer`(`io.reactivex.Flowable` v7 @kind this, `int` v8 , `boolean` v9 , `boolean` v10 , `io.reactivex.functions.Action` v11 @kind object) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(IZZLio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f29a4.  v0:= "onOverflow is null" @kind object;
  #L3f29a8.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f29ae.  v0:= "capacity" @kind object;
  #L3f29b2.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f29b8.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer`;
  #L3f29bc.  v1:= v0 @kind object;
  #L3f29be.  v2:= v7 @kind object;
  #L3f29c0.  v3:= v8;
  #L3f29c2.  v4:= v10;
  #L3f29c4.  v5:= v9;
  #L3f29c6.  v6:= v11 @kind object;
  #L3f29c8.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer;.<init>:(Lio/reactivex/Flowable;IZZLio/reactivex/functions/Action;)V` @kind direct;
  #L3f29ce.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f29d4.  v8:= temp @kind object;
  #L3f29d6.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureBuffer`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `io.reactivex.functions.Action` v10 @kind object, `io.reactivex.BackpressureOverflowStrategy` v11 @kind object) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(JLio/reactivex/functions/Action;Lio/reactivex/BackpressureOverflowStrategy;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f2a04.  v0:= "strategy is null" @kind object;
  #L3f2a08.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2a0e.  v0:= "capacity" @kind object;
  #L3f2a12.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L3f2a18.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy`;
  #L3f2a1c.  v1:= v0 @kind object;
  #L3f2a1e.  v2:= v7 @kind object;
  #L3f2a20.  v3:= v8 @kind wide;
  #L3f2a22.  v5:= v10 @kind object;
  #L3f2a24.  v6:= v11 @kind object;
  #L3f2a26.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy;.<init>:(Lio/reactivex/Flowable;JLio/reactivex/functions/Action;Lio/reactivex/BackpressureOverflowStrategy;)V` @kind direct;
  #L3f2a2c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f2a32.  v8:= temp @kind object;
  #L3f2a34.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureBuffer`(`io.reactivex.Flowable` v2 @kind this, `boolean` v3 ) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f290c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f2912.  v0:= temp;
  #L3f2914.  v1:= 1I;
  #L3f2916.  call temp:= `onBackpressureBuffer`(v2, v0, v3, v1) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(IZZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3f291c.  v3:= temp @kind object;
  #L3f291e.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureDrop`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.onBackpressureDrop:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f2a48.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop`;
  #L3f2a4c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3f2a52.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f2a58.  v0:= temp @kind object;
  #L3f2a5a.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureDrop`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object) @signature `Lio/reactivex/Flowable;.onBackpressureDrop:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f2a6c.  v0:= "onDrop is null" @kind object;
  #L3f2a70.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2a76.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop`;
  #L3f2a7a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Consumer;)V` @kind direct;
  #L3f2a80.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f2a86.  v2:= temp @kind object;
  #L3f2a88.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureLatest`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.onBackpressureLatest:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f2a9c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest`;
  #L3f2aa0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3f2aa6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f2aac.  v0:= temp @kind object;
  #L3f2aae.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `onErrorResumeNext`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.onErrorResumeNext:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f2ac0.  v0:= "resumeFunction is null" @kind object;
  #L3f2ac4.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2aca.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnErrorNext`;
  #L3f2ace.  v1:= 0I;
  #L3f2ad0.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L3f2ad6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f2adc.  v3:= temp @kind object;
  #L3f2ade.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `onErrorResumeNext`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.onErrorResumeNext:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f2af0.  v0:= "next is null" @kind object;
  #L3f2af4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2afa.  call temp:= `justFunction`(v2) @signature `Lio/reactivex/internal/functions/Functions;.justFunction:(Ljava/lang/Object;)Lio/reactivex/functions/Function;` @kind static;
  #L3f2b00.  v2:= temp @kind object;
  #L3f2b02.  call temp:= `onErrorResumeNext`(v1, v2) @signature `Lio/reactivex/Flowable;.onErrorResumeNext:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f2b08.  v2:= temp @kind object;
  #L3f2b0a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `onErrorReturn`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.onErrorReturn:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f2b1c.  v0:= "valueSupplier is null" @kind object;
  #L3f2b20.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2b26.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnErrorReturn`;
  #L3f2b2a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorReturn;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3f2b30.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f2b36.  v2:= temp @kind object;
  #L3f2b38.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `onErrorReturnItem`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Flowable;.onErrorReturnItem:(Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f2b4c.  v0:= "item is null" @kind object;
  #L3f2b50.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2b56.  call temp:= `justFunction`(v2) @signature `Lio/reactivex/internal/functions/Functions;.justFunction:(Ljava/lang/Object;)Lio/reactivex/functions/Function;` @kind static;
  #L3f2b5c.  v2:= temp @kind object;
  #L3f2b5e.  call temp:= `onErrorReturn`(v1, v2) @signature `Lio/reactivex/Flowable;.onErrorReturn:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f2b64.  v2:= temp @kind object;
  #L3f2b66.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `onExceptionResumeNext`(`io.reactivex.Flowable` v2 @kind this, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/Flowable;.onExceptionResumeNext:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f2b78.  v0:= "next is null" @kind object;
  #L3f2b7c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2b82.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnErrorNext`;
  #L3f2b86.  call temp:= `justFunction`(v3) @signature `Lio/reactivex/internal/functions/Functions;.justFunction:(Ljava/lang/Object;)Lio/reactivex/functions/Function;` @kind static;
  #L3f2b8c.  v3:= temp @kind object;
  #L3f2b8e.  v1:= 1I;
  #L3f2b90.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L3f2b96.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f2b9c.  v3:= temp @kind object;
  #L3f2b9e.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `onTerminateDetach`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.onTerminateDetach:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f2bb0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDetach`;
  #L3f2bb4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDetach;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3f2bba.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f2bc0.  v0:= temp @kind object;
  #L3f2bc2.  return v0 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `parallel`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.parallel:()Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5a3c.  call temp:= `from`(v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.from:(Lorg/reactivestreams/Publisher;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L3f5a42.  v0:= temp @kind object;
  #L3f5a44.  return v0 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `parallel`(`io.reactivex.Flowable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/Flowable;.parallel:(I)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5a58.  v0:= "parallelism" @kind object;
  #L3f5a5c.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f5a62.  call temp:= `from`(v1, v2) @signature `Lio/reactivex/parallel/ParallelFlowable;.from:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L3f5a68.  v2:= temp @kind object;
  #L3f5a6a.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `parallel`(`io.reactivex.Flowable` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lio/reactivex/Flowable;.parallel:(II)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5a7c.  v0:= "parallelism" @kind object;
  #L3f5a80.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f5a86.  v0:= "prefetch" @kind object;
  #L3f5a8a.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f5a90.  call temp:= `from`(v1, v2, v3) @signature `Lio/reactivex/parallel/ParallelFlowable;.from:(Lorg/reactivestreams/Publisher;II)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L3f5a96.  v2:= temp @kind object;
  #L3f5a98.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `publish`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.publish:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f2bd4.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f2bda.  v0:= temp;
  #L3f2bdc.  call temp:= `publish`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.publish:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3f2be2.  v2:= temp @kind object;
  #L3f2be4.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `publish`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.publish:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f2bf8.  v0:= "selector is null" @kind object;
  #L3f2bfc.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2c02.  v0:= "prefetch" @kind object;
  #L3f2c06.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f2c0c.  v0:= new `io.reactivex.internal.operators.flowable.FlowablePublishMulticast`;
  #L3f2c10.  v1:= 0I;
  #L3f2c12.  call `<init>`(v0, v2, v3, v4, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L3f2c18.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f2c1e.  v3:= temp @kind object;
  #L3f2c20.  return v3 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `publish`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.publish:()Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5894.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f589a.  v0:= temp;
  #L3f589c.  call temp:= `publish`(v1, v0) @signature `Lio/reactivex/Flowable;.publish:(I)Lio/reactivex/flowables/ConnectableFlowable;` @kind virtual;
  #L3f58a2.  v0:= temp @kind object;
  #L3f58a4.  return v0 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `publish`(`io.reactivex.Flowable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/Flowable;.publish:(I)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f58b8.  v0:= "bufferSize" @kind object;
  #L3f58bc.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f58c2.  call temp:= `create`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish;.create:(Lio/reactivex/Flowable;I)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L3f58c8.  v2:= temp @kind object;
  #L3f58ca.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `rebatchRequests`(`io.reactivex.Flowable` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/Flowable;.rebatchRequests:(I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f2d8c.  v0:= `@@io.reactivex.internal.schedulers.ImmediateThinScheduler.INSTANCE` @type ^`io.reactivex.Scheduler` @kind object;
  #L3f2d90.  v1:= 1I;
  #L3f2d92.  call temp:= `observeOn`(v2, v0, v1, v3) @signature `Lio/reactivex/Flowable;.observeOn:(Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f2d98.  v3:= temp @kind object;
  #L3f2d9a.  return v3 @kind object;
}
procedure `io.reactivex.Maybe` `reduce`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/Flowable;.reduce:(Lio/reactivex/functions/BiFunction;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f4fbc.  v0:= "reducer is null" @kind object;
  #L3f4fc0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4fc6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReduceMaybe`;
  #L3f4fca.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceMaybe;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L3f4fd0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f4fd6.  v2:= temp @kind object;
  #L3f4fd8.  return v2 @kind object;
}
procedure `io.reactivex.Single` `reduce`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/Flowable;.reduce:(Ljava/lang/Object;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f52cc.  v0:= "seed is null" @kind object;
  #L3f52d0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f52d6.  v0:= "reducer is null" @kind object;
  #L3f52da.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f52e0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle`;
  #L3f52e4.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceSeedSingle;.<init>:(Lorg/reactivestreams/Publisher;Ljava/lang/Object;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L3f52ea.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3f52f0.  v2:= temp @kind object;
  #L3f52f2.  return v2 @kind object;
}
procedure `io.reactivex.Single` `reduceWith`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/Flowable;.reduceWith:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5304.  v0:= "seedSupplier is null" @kind object;
  #L3f5308.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f530e.  v0:= "reducer is null" @kind object;
  #L3f5312.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f5318.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReduceWithSingle`;
  #L3f531c.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceWithSingle;.<init>:(Lorg/reactivestreams/Publisher;Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L3f5322.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3f5328.  v2:= temp @kind object;
  #L3f532a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `repeat`(`io.reactivex.Flowable` v2 @kind this) @signature `Lio/reactivex/Flowable;.repeat:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f2dac.  v0:= 9223372036854775807L;
  #L3f2db6.  call temp:= `repeat`(v2, v0) @signature `Lio/reactivex/Flowable;.repeat:(J)Lio/reactivex/Flowable;` @kind virtual;
  #L3f2dbc.  v0:= temp @kind object;
  #L3f2dbe.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `repeat`(`io.reactivex.Flowable` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/Flowable;.repeat:(J)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3f2dd0.  v0:= 0L;
  #L3f2dd4.  v2:= lcmp(v4, v0);
  #L3f2dd8.  if v2 < 0 then goto L3f2dfe;
  #L3f2ddc.  if v2 != 0 then goto L3f2dea;
  #L3f2de0.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3f2de6.  v4:= temp @kind object;
  #L3f2de8.  return v4 @kind object;
  #L3f2dea.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRepeat`;
  #L3f2dee.  call `<init>`(v0, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat;.<init>:(Lio/reactivex/Flowable;J)V` @kind direct;
  #L3f2df4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f2dfa.  v4:= temp @kind object;
  #L3f2dfc.  return v4 @kind object;
  #L3f2dfe.  v0:= new `java.lang.IllegalArgumentException`;
  #L3f2e02.  v1:= new `java.lang.StringBuilder`;
  #L3f2e06.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f2e0c.  v2:= "times >= 0 required but it was " @kind object;
  #L3f2e10.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2e16.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2e1c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f2e22.  v4:= temp @kind object;
  #L3f2e24.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f2e2a.  throw v0;
}
procedure `io.reactivex.Flowable` `repeatUntil`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.BooleanSupplier` v2 @kind object) @signature `Lio/reactivex/Flowable;.repeatUntil:(Lio/reactivex/functions/BooleanSupplier;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f2e3c.  v0:= "stop is null" @kind object;
  #L3f2e40.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2e46.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRepeatUntil`;
  #L3f2e4a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/BooleanSupplier;)V` @kind direct;
  #L3f2e50.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f2e56.  v2:= temp @kind object;
  #L3f2e58.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `repeatWhen`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.repeatWhen:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f2e6c.  v0:= "handler is null" @kind object;
  #L3f2e70.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2e76.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRepeatWhen`;
  #L3f2e7a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3f2e80.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f2e86.  v2:= temp @kind object;
  #L3f2e88.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f2e9c.  v0:= "selector is null" @kind object;
  #L3f2ea0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2ea6.  call temp:= `replayCallable`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.replayCallable:(Lio/reactivex/Flowable;)Ljava/util/concurrent/Callable;` @kind static;
  #L3f2eac.  v0:= temp @kind object;
  #L3f2eae.  call temp:= `multicastSelector`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.multicastSelector:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L3f2eb4.  v2:= temp @kind object;
  #L3f2eb6.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f2ec8.  v0:= "selector is null" @kind object;
  #L3f2ecc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2ed2.  v0:= "bufferSize" @kind object;
  #L3f2ed6.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f2edc.  call temp:= `replayCallable`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.replayCallable:(Lio/reactivex/Flowable;I)Ljava/util/concurrent/Callable;` @kind static;
  #L3f2ee2.  v3:= temp @kind object;
  #L3f2ee4.  call temp:= `multicastSelector`(v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.multicastSelector:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L3f2eea.  v2:= temp @kind object;
  #L3f2eec.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `replay`(`io.reactivex.Flowable` v7 @kind this, `io.reactivex.functions.Function` v8 @kind object, `int` v9 , `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;IJLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f2f48.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f2f4e.  v6:= temp @kind object;
  #L3f2f50.  v0:= v7 @kind object;
  #L3f2f52.  v1:= v8 @kind object;
  #L3f2f54.  v2:= v9;
  #L3f2f56.  v3:= v10 @kind wide;
  #L3f2f58.  v5:= v12 @kind object;
  #L3f2f5a.  call temp:= `replay`(v0, v1, v2, v3, v5, v6) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f2f60.  v8:= temp @kind object;
  #L3f2f62.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `replay`(`io.reactivex.Flowable` v6 @kind this, `io.reactivex.functions.Function` v7 @kind object, `int` v8 , `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.Scheduler` v12 @kind object) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f2f74.  v0:= "selector is null" @kind object;
  #L3f2f78.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2f7e.  v0:= "unit is null" @kind object;
  #L3f2f82.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2f88.  v0:= "bufferSize" @kind object;
  #L3f2f8c.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f2f92.  v0:= "scheduler is null" @kind object;
  #L3f2f96.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2f9c.  v0:= v6 @kind object;
  #L3f2f9e.  v1:= v8;
  #L3f2fa0.  v2:= v9 @kind wide;
  #L3f2fa2.  v4:= v11 @kind object;
  #L3f2fa4.  v5:= v12 @kind object;
  #L3f2fa6.  call temp:= `replayCallable`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.replayCallable:(Lio/reactivex/Flowable;IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Ljava/util/concurrent/Callable;` @kind static;
  #L3f2fac.  v8:= temp @kind object;
  #L3f2fae.  call temp:= `multicastSelector`(v8, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.multicastSelector:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L3f2fb4.  v7:= temp @kind object;
  #L3f2fb6.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `io.reactivex.Scheduler` v4 @kind object) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;ILio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f2f00.  v0:= "selector is null" @kind object;
  #L3f2f04.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2f0a.  v0:= "scheduler is null" @kind object;
  #L3f2f0e.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2f14.  v0:= "bufferSize" @kind object;
  #L3f2f18.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f2f1e.  call temp:= `replayCallable`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.replayCallable:(Lio/reactivex/Flowable;I)Ljava/util/concurrent/Callable;` @kind static;
  #L3f2f24.  v3:= temp @kind object;
  #L3f2f26.  call temp:= `replayFunction`(v2, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.replayFunction:(Lio/reactivex/functions/Function;Lio/reactivex/Scheduler;)Lio/reactivex/functions/Function;` @kind static;
  #L3f2f2c.  v2:= temp @kind object;
  #L3f2f2e.  call temp:= `multicastSelector`(v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.multicastSelector:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L3f2f34.  v2:= temp @kind object;
  #L3f2f36.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `replay`(`io.reactivex.Flowable` v6 @kind this, `io.reactivex.functions.Function` v7 @kind object, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f3008.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f300e.  v5:= temp @kind object;
  #L3f3010.  v0:= v6 @kind object;
  #L3f3012.  v1:= v7 @kind object;
  #L3f3014.  v2:= v8 @kind wide;
  #L3f3016.  v4:= v10 @kind object;
  #L3f3018.  call temp:= `replay`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f301e.  v7:= temp @kind object;
  #L3f3020.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f3034.  v0:= "selector is null" @kind object;
  #L3f3038.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f303e.  v0:= "unit is null" @kind object;
  #L3f3042.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f3048.  v0:= "scheduler is null" @kind object;
  #L3f304c.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f3052.  call temp:= `replayCallable`(v1, v3, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.replayCallable:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Ljava/util/concurrent/Callable;` @kind static;
  #L3f3058.  v3:= temp @kind object;
  #L3f305a.  call temp:= `multicastSelector`(v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.multicastSelector:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L3f3060.  v2:= temp @kind object;
  #L3f3062.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.Scheduler` v3 @kind object) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f2fc8.  v0:= "selector is null" @kind object;
  #L3f2fcc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2fd2.  v0:= "scheduler is null" @kind object;
  #L3f2fd6.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f2fdc.  call temp:= `replayCallable`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.replayCallable:(Lio/reactivex/Flowable;)Ljava/util/concurrent/Callable;` @kind static;
  #L3f2fe2.  v0:= temp @kind object;
  #L3f2fe4.  call temp:= `replayFunction`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.replayFunction:(Lio/reactivex/functions/Function;Lio/reactivex/Scheduler;)Lio/reactivex/functions/Function;` @kind static;
  #L3f2fea.  v2:= temp @kind object;
  #L3f2fec.  call temp:= `multicastSelector`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.multicastSelector:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L3f2ff2.  v2:= temp @kind object;
  #L3f2ff4.  return v2 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `replay`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.replay:()Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f58dc.  call temp:= `createFrom`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.createFrom:(Lio/reactivex/Flowable;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L3f58e2.  v0:= temp @kind object;
  #L3f58e4.  return v0 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/Flowable;.replay:(I)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f58f8.  v0:= "bufferSize" @kind object;
  #L3f58fc.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f5902.  call temp:= `create`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/Flowable;I)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L3f5908.  v2:= temp @kind object;
  #L3f590a.  return v2 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `replay`(`io.reactivex.Flowable` v6 @kind this, `int` v7 , `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lio/reactivex/Flowable;.replay:(IJLjava/util/concurrent/TimeUnit;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f5948.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f594e.  v5:= temp @kind object;
  #L3f5950.  v0:= v6 @kind object;
  #L3f5952.  v1:= v7;
  #L3f5954.  v2:= v8 @kind wide;
  #L3f5956.  v4:= v10 @kind object;
  #L3f5958.  call temp:= `replay`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/Flowable;.replay:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @kind virtual;
  #L3f595e.  v7:= temp @kind object;
  #L3f5960.  return v7 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `replay`(`io.reactivex.Flowable` v6 @kind this, `int` v7 , `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object) @signature `Lio/reactivex/Flowable;.replay:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f5974.  v0:= "bufferSize" @kind object;
  #L3f5978.  call temp:= `verifyPositive`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f597e.  v1:= "unit is null" @kind object;
  #L3f5982.  call temp:= `requireNonNull`(v10, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f5988.  v1:= "scheduler is null" @kind object;
  #L3f598c.  call temp:= `requireNonNull`(v11, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f5992.  call temp:= `verifyPositive`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f5998.  v0:= v6 @kind object;
  #L3f599a.  v1:= v8 @kind wide;
  #L3f599c.  v3:= v10 @kind object;
  #L3f599e.  v4:= v11 @kind object;
  #L3f59a0.  v5:= v7;
  #L3f59a2.  call temp:= `create`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L3f59a8.  v7:= temp @kind object;
  #L3f59aa.  return v7 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `int` v2 , `io.reactivex.Scheduler` v3 @kind object) @signature `Lio/reactivex/Flowable;.replay:(ILio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f591c.  v0:= "scheduler is null" @kind object;
  #L3f5920.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f5926.  call temp:= `replay`(v1, v2) @signature `Lio/reactivex/Flowable;.replay:(I)Lio/reactivex/flowables/ConnectableFlowable;` @kind virtual;
  #L3f592c.  v2:= temp @kind object;
  #L3f592e.  call temp:= `observeOn`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.observeOn:(Lio/reactivex/flowables/ConnectableFlowable;Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L3f5934.  v2:= temp @kind object;
  #L3f5936.  return v2 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Flowable;.replay:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f59e8.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f59ee.  v0:= temp @kind object;
  #L3f59f0.  call temp:= `replay`(v1, v2, v4, v0) @signature `Lio/reactivex/Flowable;.replay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @kind virtual;
  #L3f59f6.  v2:= temp @kind object;
  #L3f59f8.  return v2 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object) @signature `Lio/reactivex/Flowable;.replay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5a0c.  v0:= "unit is null" @kind object;
  #L3f5a10.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f5a16.  v0:= "scheduler is null" @kind object;
  #L3f5a1a.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f5a20.  call temp:= `create`(v1, v2, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L3f5a26.  v2:= temp @kind object;
  #L3f5a28.  return v2 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f59bc.  v0:= "scheduler is null" @kind object;
  #L3f59c0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f59c6.  call temp:= `replay`(v1) @signature `Lio/reactivex/Flowable;.replay:()Lio/reactivex/flowables/ConnectableFlowable;` @kind virtual;
  #L3f59cc.  v0:= temp @kind object;
  #L3f59ce.  call temp:= `observeOn`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.observeOn:(Lio/reactivex/flowables/ConnectableFlowable;Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L3f59d4.  v2:= temp @kind object;
  #L3f59d6.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `retry`(`io.reactivex.Flowable` v3 @kind this) @signature `Lio/reactivex/Flowable;.retry:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3f3074.  call temp:= `alwaysTrue`() @signature `Lio/reactivex/internal/functions/Functions;.alwaysTrue:()Lio/reactivex/functions/Predicate;` @kind static;
  #L3f307a.  v0:= temp @kind object;
  #L3f307c.  v1:= 9223372036854775807L;
  #L3f3086.  call temp:= `retry`(v3, v1, v0) @signature `Lio/reactivex/Flowable;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f308c.  v0:= temp @kind object;
  #L3f308e.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `retry`(`io.reactivex.Flowable` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/Flowable;.retry:(J)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f30f4.  call temp:= `alwaysTrue`() @signature `Lio/reactivex/internal/functions/Functions;.alwaysTrue:()Lio/reactivex/functions/Predicate;` @kind static;
  #L3f30fa.  v0:= temp @kind object;
  #L3f30fc.  call temp:= `retry`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f3102.  v2:= temp @kind object;
  #L3f3104.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `retry`(`io.reactivex.Flowable` v3 @kind this, `long` v4 , `io.reactivex.functions.Predicate` v6 @kind object) @signature `Lio/reactivex/Flowable;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3f3118.  v0:= 0L;
  #L3f311c.  v2:= lcmp(v4, v0);
  #L3f3120.  if v2 < 0 then goto L3f3142;
  #L3f3124.  v0:= "predicate is null" @kind object;
  #L3f3128.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f312e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRetryPredicate`;
  #L3f3132.  call `<init>`(v0, v3, v4, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate;.<init>:(Lio/reactivex/Flowable;JLio/reactivex/functions/Predicate;)V` @kind direct;
  #L3f3138.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f313e.  v4:= temp @kind object;
  #L3f3140.  return v4 @kind object;
  #L3f3142.  v6:= new `java.lang.IllegalArgumentException`;
  #L3f3146.  v0:= new `java.lang.StringBuilder`;
  #L3f314a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f3150.  v1:= "times >= 0 required but it was " @kind object;
  #L3f3154.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f315a.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3160.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f3166.  v4:= temp @kind object;
  #L3f3168.  call `<init>`(v6, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f316e.  throw v6;
}
procedure `io.reactivex.Flowable` `retry`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.BiPredicate` v2 @kind object) @signature `Lio/reactivex/Flowable;.retry:(Lio/reactivex/functions/BiPredicate;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f30a0.  v0:= "predicate is null" @kind object;
  #L3f30a4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f30aa.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate`;
  #L3f30ae.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/BiPredicate;)V` @kind direct;
  #L3f30b4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f30ba.  v2:= temp @kind object;
  #L3f30bc.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `retry`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Predicate` v3 @kind object) @signature `Lio/reactivex/Flowable;.retry:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f30d0.  v0:= 9223372036854775807L;
  #L3f30da.  call temp:= `retry`(v2, v0, v3) @signature `Lio/reactivex/Flowable;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f30e0.  v3:= temp @kind object;
  #L3f30e2.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `retryUntil`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.BooleanSupplier` v3 @kind object) @signature `Lio/reactivex/Flowable;.retryUntil:(Lio/reactivex/functions/BooleanSupplier;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f3180.  v0:= "stop is null" @kind object;
  #L3f3184.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f318a.  call temp:= `predicateReverseFor`(v3) @signature `Lio/reactivex/internal/functions/Functions;.predicateReverseFor:(Lio/reactivex/functions/BooleanSupplier;)Lio/reactivex/functions/Predicate;` @kind static;
  #L3f3190.  v3:= temp @kind object;
  #L3f3192.  v0:= 9223372036854775807L;
  #L3f319c.  call temp:= `retry`(v2, v0, v3) @signature `Lio/reactivex/Flowable;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f31a2.  v3:= temp @kind object;
  #L3f31a4.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `retryWhen`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.retryWhen:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f31b8.  v0:= "handler is null" @kind object;
  #L3f31bc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f31c2.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRetryWhen`;
  #L3f31c6.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryWhen;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3f31cc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f31d2.  v2:= temp @kind object;
  #L3f31d4.  return v2 @kind object;
}
procedure `void` `safeSubscribe`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/Flowable;.safeSubscribe:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5ea8.  v0:= "s is null" @kind object;
  #L3f5eac.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f5eb2.  v0:= instanceof @variable v2 @type ^`io.reactivex.subscribers.SafeSubscriber` @kind boolean;
  #L3f5eb6.  if v0 == 0 then goto L3f5ec6;
  #L3f5eba.  v2:= (`io.reactivex.subscribers.SafeSubscriber`) v2 @kind object;
  #L3f5ebe.  call `subscribe`(v1, v2) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f5ec4.  goto L3f5ed6;
  #L3f5ec6.  v0:= new `io.reactivex.subscribers.SafeSubscriber`;
  #L3f5eca.  call `<init>`(v0, v2) @signature `Lio/reactivex/subscribers/SafeSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3f5ed0.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f5ed6.  return @kind void;
}
procedure `io.reactivex.Flowable` `sample`(`io.reactivex.Flowable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Flowable;.sample:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f31e8.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f31ee.  v0:= temp @kind object;
  #L3f31f0.  call temp:= `sample`(v1, v2, v4, v0) @signature `Lio/reactivex/Flowable;.sample:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f31f6.  v2:= temp @kind object;
  #L3f31f8.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `sample`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.Scheduler` v12 @kind object) @signature `Lio/reactivex/Flowable;.sample:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f3238.  v0:= "unit is null" @kind object;
  #L3f323c.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f3242.  v0:= "scheduler is null" @kind object;
  #L3f3246.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f324c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSampleTimed`;
  #L3f3250.  v7:= 0I;
  #L3f3252.  v1:= v0 @kind object;
  #L3f3254.  v2:= v8 @kind object;
  #L3f3256.  v3:= v9 @kind wide;
  #L3f3258.  v5:= v11 @kind object;
  #L3f325a.  v6:= v12 @kind object;
  #L3f325c.  call `<init>`(v1, v2, v3, v5, v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed;.<init>:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)V` @kind direct;
  #L3f3262.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f3268.  v9:= temp @kind object;
  #L3f326a.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `sample`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.Scheduler` v12 @kind object, `boolean` v13 ) @signature `Lio/reactivex/Flowable;.sample:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f327c.  v0:= "unit is null" @kind object;
  #L3f3280.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f3286.  v0:= "scheduler is null" @kind object;
  #L3f328a.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f3290.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSampleTimed`;
  #L3f3294.  v1:= v0 @kind object;
  #L3f3296.  v2:= v8 @kind object;
  #L3f3298.  v3:= v9 @kind wide;
  #L3f329a.  v5:= v11 @kind object;
  #L3f329c.  v6:= v12 @kind object;
  #L3f329e.  v7:= v13;
  #L3f32a0.  call `<init>`(v1, v2, v3, v5, v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed;.<init>:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)V` @kind direct;
  #L3f32a6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f32ac.  v9:= temp @kind object;
  #L3f32ae.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `sample`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `boolean` v10 ) @signature `Lio/reactivex/Flowable;.sample:(JLjava/util/concurrent/TimeUnit;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f320c.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f3212.  v4:= temp @kind object;
  #L3f3214.  v0:= v6 @kind object;
  #L3f3216.  v1:= v7 @kind wide;
  #L3f3218.  v3:= v9 @kind object;
  #L3f321a.  v5:= v10;
  #L3f321c.  call temp:= `sample`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.sample:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L3f3222.  v7:= temp @kind object;
  #L3f3224.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `sample`(`io.reactivex.Flowable` v2 @kind this, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/Flowable;.sample:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f32c0.  v0:= "sampler is null" @kind object;
  #L3f32c4.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f32ca.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSamplePublisher`;
  #L3f32ce.  v1:= 0I;
  #L3f32d0.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher;.<init>:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Z)V` @kind direct;
  #L3f32d6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f32dc.  v3:= temp @kind object;
  #L3f32de.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `sample`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/Flowable;.sample:(Lorg/reactivestreams/Publisher;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f32f0.  v0:= "sampler is null" @kind object;
  #L3f32f4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f32fa.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSamplePublisher`;
  #L3f32fe.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher;.<init>:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Z)V` @kind direct;
  #L3f3304.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f330a.  v2:= temp @kind object;
  #L3f330c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `scan`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/Flowable;.scan:(Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f3320.  v0:= "accumulator is null" @kind object;
  #L3f3324.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f332a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableScan`;
  #L3f332e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableScan;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L3f3334.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f333a.  v2:= temp @kind object;
  #L3f333c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `scan`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/Flowable;.scan:(Ljava/lang/Object;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f3350.  v0:= "seed is null" @kind object;
  #L3f3354.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f335a.  call temp:= `justCallable`(v2) @signature `Lio/reactivex/internal/functions/Functions;.justCallable:(Ljava/lang/Object;)Ljava/util/concurrent/Callable;` @kind static;
  #L3f3360.  v2:= temp @kind object;
  #L3f3362.  call temp:= `scanWith`(v1, v2, v3) @signature `Lio/reactivex/Flowable;.scanWith:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f3368.  v2:= temp @kind object;
  #L3f336a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `scanWith`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/Flowable;.scanWith:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f337c.  v0:= "seedSupplier is null" @kind object;
  #L3f3380.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f3386.  v0:= "accumulator is null" @kind object;
  #L3f338a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f3390.  v0:= new `io.reactivex.internal.operators.flowable.FlowableScanSeed`;
  #L3f3394.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L3f339a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f33a0.  v2:= temp @kind object;
  #L3f33a2.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `serialize`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.serialize:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f33b4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSerialized`;
  #L3f33b8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSerialized;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3f33be.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f33c4.  v0:= temp @kind object;
  #L3f33c6.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `share`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.share:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f33d8.  call temp:= `publish`(v1) @signature `Lio/reactivex/Flowable;.publish:()Lio/reactivex/flowables/ConnectableFlowable;` @kind virtual;
  #L3f33de.  v0:= temp @kind object;
  #L3f33e0.  call temp:= `refCount`(v0) @signature `Lio/reactivex/flowables/ConnectableFlowable;.refCount:()Lio/reactivex/Flowable;` @kind virtual;
  #L3f33e6.  v0:= temp @kind object;
  #L3f33e8.  return v0 @kind object;
}
procedure `io.reactivex.Single` `single`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Flowable;.single:(Ljava/lang/Object;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f53fc.  v0:= "defaultItem is null" @kind object;
  #L3f5400.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f5406.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSingleSingle`;
  #L3f540a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle;.<init>:(Lio/reactivex/Flowable;Ljava/lang/Object;)V` @kind direct;
  #L3f5410.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3f5416.  v2:= temp @kind object;
  #L3f5418.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `singleElement`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.singleElement:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f4fec.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSingleMaybe`;
  #L3f4ff0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleMaybe;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3f4ff6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3f4ffc.  v0:= temp @kind object;
  #L3f4ffe.  return v0 @kind object;
}
procedure `io.reactivex.Single` `singleOrError`(`io.reactivex.Flowable` v2 @kind this) @signature `Lio/reactivex/Flowable;.singleOrError:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f542c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSingleSingle`;
  #L3f5430.  v1:= 0I;
  #L3f5432.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle;.<init>:(Lio/reactivex/Flowable;Ljava/lang/Object;)V` @kind direct;
  #L3f5438.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3f543e.  v0:= temp @kind object;
  #L3f5440.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `skip`(`io.reactivex.Flowable` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/Flowable;.skip:(J)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3f33fc.  v0:= 0L;
  #L3f3400.  v2:= lcmp(v4, v0);
  #L3f3404.  if v2 > 0 then goto L3f3412;
  #L3f3408.  call temp:= `onAssembly`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f340e.  v4:= temp @kind object;
  #L3f3410.  return v4 @kind object;
  #L3f3412.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSkip`;
  #L3f3416.  call `<init>`(v0, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkip;.<init>:(Lio/reactivex/Flowable;J)V` @kind direct;
  #L3f341c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f3422.  v4:= temp @kind object;
  #L3f3424.  return v4 @kind object;
}
procedure `io.reactivex.Flowable` `skip`(`io.reactivex.Flowable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/Flowable;.skip:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3f3438.  call temp:= `timer`(v1, v3) @signature `Lio/reactivex/Flowable;.timer:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @kind static;
  #L3f343e.  v1:= temp @kind object;
  #L3f3440.  call temp:= `skipUntil`(v0, v1) @signature `Lio/reactivex/Flowable;.skipUntil:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f3446.  v1:= temp @kind object;
  #L3f3448.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `skip`(`io.reactivex.Flowable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `io.reactivex.Scheduler` v4 @kind object) @signature `Lio/reactivex/Flowable;.skip:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3f345c.  call temp:= `timer`(v1, v3, v4) @signature `Lio/reactivex/Flowable;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind static;
  #L3f3462.  v1:= temp @kind object;
  #L3f3464.  call temp:= `skipUntil`(v0, v1) @signature `Lio/reactivex/Flowable;.skipUntil:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f346a.  v1:= temp @kind object;
  #L3f346c.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `skipLast`(`io.reactivex.Flowable` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/Flowable;.skipLast:(I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3f3480.  if v4 < 0 then goto L3f34a6;
  #L3f3484.  if v4 != 0 then goto L3f3492;
  #L3f3488.  call temp:= `onAssembly`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f348e.  v4:= temp @kind object;
  #L3f3490.  return v4 @kind object;
  #L3f3492.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSkipLast`;
  #L3f3496.  call `<init>`(v0, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLast;.<init>:(Lio/reactivex/Flowable;I)V` @kind direct;
  #L3f349c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f34a2.  v4:= temp @kind object;
  #L3f34a4.  return v4 @kind object;
  #L3f34a6.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L3f34aa.  v1:= new `java.lang.StringBuilder`;
  #L3f34ae.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f34b4.  v2:= "count >= 0 required but it was " @kind object;
  #L3f34b8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f34be.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f34c4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f34ca.  v4:= temp @kind object;
  #L3f34cc.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f34d2.  throw v0;
}
procedure `io.reactivex.Flowable` `skipLast`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lio/reactivex/Flowable;.skipLast:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f34e4.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f34ea.  v4:= temp @kind object;
  #L3f34ec.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f34f2.  v6:= temp;
  #L3f34f4.  v5:= 0I;
  #L3f34f6.  v0:= v7 @kind object;
  #L3f34f8.  v1:= v8 @kind wide;
  #L3f34fa.  v3:= v10 @kind object;
  #L3f34fc.  call temp:= `skipLast`(v0, v1, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.skipLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f3502.  v8:= temp @kind object;
  #L3f3504.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `skipLast`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object) @signature `Lio/reactivex/Flowable;.skipLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f354c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f3552.  v6:= temp;
  #L3f3554.  v5:= 0I;
  #L3f3556.  v0:= v7 @kind object;
  #L3f3558.  v1:= v8 @kind wide;
  #L3f355a.  v3:= v10 @kind object;
  #L3f355c.  v4:= v11 @kind object;
  #L3f355e.  call temp:= `skipLast`(v0, v1, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.skipLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f3564.  v8:= temp @kind object;
  #L3f3566.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `skipLast`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object, `boolean` v12 ) @signature `Lio/reactivex/Flowable;.skipLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f3578.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f357e.  v6:= temp;
  #L3f3580.  v0:= v7 @kind object;
  #L3f3582.  v1:= v8 @kind wide;
  #L3f3584.  v3:= v10 @kind object;
  #L3f3586.  v4:= v11 @kind object;
  #L3f3588.  v5:= v12;
  #L3f358a.  call temp:= `skipLast`(v0, v1, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.skipLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f3590.  v8:= temp @kind object;
  #L3f3592.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `skipLast`(`io.reactivex.Flowable` v9 @kind this, `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object, `io.reactivex.Scheduler` v13 @kind object, `boolean` v14 , `int` v15 ) @signature `Lio/reactivex/Flowable;.skipLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f35a4.  v0:= "unit is null" @kind object;
  #L3f35a8.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f35ae.  v0:= "scheduler is null" @kind object;
  #L3f35b2.  call temp:= `requireNonNull`(v13, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f35b8.  v0:= "bufferSize" @kind object;
  #L3f35bc.  call temp:= `verifyPositive`(v15, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f35c2.  v7:= v15 ^< 1;
  #L3f35c6.  v15:= new `io.reactivex.internal.operators.flowable.FlowableSkipLastTimed`;
  #L3f35ca.  v1:= v15 @kind object;
  #L3f35cc.  v2:= v9 @kind object;
  #L3f35ce.  v3:= v10 @kind wide;
  #L3f35d0.  v5:= v12 @kind object;
  #L3f35d2.  v6:= v13 @kind object;
  #L3f35d4.  v8:= v14;
  #L3f35d6.  call `<init>`(v1, v2, v3, v5, v6, v7, v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed;.<init>:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IZ)V` @kind direct;
  #L3f35dc.  call temp:= `onAssembly`(v15) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f35e2.  v10:= temp @kind object;
  #L3f35e4.  return v10 @kind object;
}
procedure `io.reactivex.Flowable` `skipLast`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `boolean` v11 ) @signature `Lio/reactivex/Flowable;.skipLast:(JLjava/util/concurrent/TimeUnit;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f3518.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f351e.  v4:= temp @kind object;
  #L3f3520.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f3526.  v6:= temp;
  #L3f3528.  v0:= v7 @kind object;
  #L3f352a.  v1:= v8 @kind wide;
  #L3f352c.  v3:= v10 @kind object;
  #L3f352e.  v5:= v11;
  #L3f3530.  call temp:= `skipLast`(v0, v1, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.skipLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f3536.  v8:= temp @kind object;
  #L3f3538.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `skipUntil`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.skipUntil:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f35f8.  v0:= "other is null" @kind object;
  #L3f35fc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f3602.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSkipUntil`;
  #L3f3606.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3f360c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f3612.  v2:= temp @kind object;
  #L3f3614.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `skipWhile`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/Flowable;.skipWhile:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f3628.  v0:= "predicate is null" @kind object;
  #L3f362c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f3632.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSkipWhile`;
  #L3f3636.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipWhile;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L3f363c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f3642.  v2:= temp @kind object;
  #L3f3644.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `sorted`(`io.reactivex.Flowable` v2 @kind this) @signature `Lio/reactivex/Flowable;.sorted:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f3658.  call temp:= `toList`(v2) @signature `Lio/reactivex/Flowable;.toList:()Lio/reactivex/Single;` @kind virtual;
  #L3f365e.  v0:= temp @kind object;
  #L3f3660.  call temp:= `toFlowable`(v0) @signature `Lio/reactivex/Single;.toFlowable:()Lio/reactivex/Flowable;` @kind virtual;
  #L3f3666.  v0:= temp @kind object;
  #L3f3668.  call temp:= `naturalComparator`() @signature `Lio/reactivex/internal/functions/Functions;.naturalComparator:()Ljava/util/Comparator;` @kind static;
  #L3f366e.  v1:= temp @kind object;
  #L3f3670.  call temp:= `listSorter`(v1) @signature `Lio/reactivex/internal/functions/Functions;.listSorter:(Ljava/util/Comparator;)Lio/reactivex/functions/Function;` @kind static;
  #L3f3676.  v1:= temp @kind object;
  #L3f3678.  call temp:= `map`(v0, v1) @signature `Lio/reactivex/Flowable;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f367e.  v0:= temp @kind object;
  #L3f3680.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f3686.  v1:= temp @kind object;
  #L3f3688.  call temp:= `flatMapIterable`(v0, v1) @signature `Lio/reactivex/Flowable;.flatMapIterable:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f368e.  v0:= temp @kind object;
  #L3f3690.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `sorted`(`io.reactivex.Flowable` v1 @kind this, `java.util.Comparator` v2 @kind object) @signature `Lio/reactivex/Flowable;.sorted:(Ljava/util/Comparator;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f36a4.  v0:= "sortFunction" @kind object;
  #L3f36a8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f36ae.  call temp:= `toList`(v1) @signature `Lio/reactivex/Flowable;.toList:()Lio/reactivex/Single;` @kind virtual;
  #L3f36b4.  v0:= temp @kind object;
  #L3f36b6.  call temp:= `toFlowable`(v0) @signature `Lio/reactivex/Single;.toFlowable:()Lio/reactivex/Flowable;` @kind virtual;
  #L3f36bc.  v0:= temp @kind object;
  #L3f36be.  call temp:= `listSorter`(v2) @signature `Lio/reactivex/internal/functions/Functions;.listSorter:(Ljava/util/Comparator;)Lio/reactivex/functions/Function;` @kind static;
  #L3f36c4.  v2:= temp @kind object;
  #L3f36c6.  call temp:= `map`(v0, v2) @signature `Lio/reactivex/Flowable;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f36cc.  v2:= temp @kind object;
  #L3f36ce.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f36d4.  v0:= temp @kind object;
  #L3f36d6.  call temp:= `flatMapIterable`(v2, v0) @signature `Lio/reactivex/Flowable;.flatMapIterable:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f36dc.  v2:= temp @kind object;
  #L3f36de.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `startWith`(`io.reactivex.Flowable` v2 @kind this, `java.lang.Iterable` v3 @kind object) @signature `Lio/reactivex/Flowable;.startWith:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f36f0.  v0:= 2I;
  #L3f36f2.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3f36f6.  call temp:= `fromIterable`(v3) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L3f36fc.  v3:= temp @kind object;
  #L3f36fe.  v1:= 0I;
  #L3f3700.  v0[v1]:= v3 @kind object;
  #L3f3704.  v3:= 1I;
  #L3f3706.  v0[v3]:= v2 @kind object;
  #L3f370a.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Flowable;.concatArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f3710.  v3:= temp @kind object;
  #L3f3712.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `startWith`(`io.reactivex.Flowable` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/Flowable;.startWith:(Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f3724.  v0:= "item is null" @kind object;
  #L3f3728.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f372e.  v0:= 2I;
  #L3f3730.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3f3734.  call temp:= `just`(v3) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3f373a.  v3:= temp @kind object;
  #L3f373c.  v1:= 0I;
  #L3f373e.  v0[v1]:= v3 @kind object;
  #L3f3742.  v3:= 1I;
  #L3f3744.  v0[v3]:= v2 @kind object;
  #L3f3748.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Flowable;.concatArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f374e.  v3:= temp @kind object;
  #L3f3750.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `startWith`(`io.reactivex.Flowable` v2 @kind this, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/Flowable;.startWith:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f3764.  v0:= "other is null" @kind object;
  #L3f3768.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f376e.  v0:= 2I;
  #L3f3770.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3f3774.  v1:= 0I;
  #L3f3776.  v0[v1]:= v3 @kind object;
  #L3f377a.  v3:= 1I;
  #L3f377c.  v0[v3]:= v2 @kind object;
  #L3f3780.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Flowable;.concatArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f3786.  v3:= temp @kind object;
  #L3f3788.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `startWithArray`(`io.reactivex.Flowable` v2 @kind this, `java.lang.Object`[] v3 @kind object) @signature `Lio/reactivex/Flowable;.startWithArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f379c.  call temp:= `fromArray`(v3) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3f37a2.  v3:= temp @kind object;
  #L3f37a4.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3f37aa.  v0:= temp @kind object;
  #L3f37ac.  if v3 != v0 then goto L3f37ba;
  #L3f37b0.  call temp:= `onAssembly`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f37b6.  v3:= temp @kind object;
  #L3f37b8.  return v3 @kind object;
  #L3f37ba.  v0:= 2I;
  #L3f37bc.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3f37c0.  v1:= 0I;
  #L3f37c2.  v0[v1]:= v3 @kind object;
  #L3f37c6.  v3:= 1I;
  #L3f37c8.  v0[v3]:= v2 @kind object;
  #L3f37cc.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Flowable;.concatArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3f37d2.  v3:= temp @kind object;
  #L3f37d4.  return v3 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `subscribe`(`io.reactivex.Flowable` v4 @kind this) @signature `Lio/reactivex/Flowable;.subscribe:()Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f57ac.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3f57b2.  v0:= temp @kind object;
  #L3f57b4.  v1:= `@@io.reactivex.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3f57b8.  v2:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f57bc.  v3:= `@@io.reactivex.internal.operators.flowable.FlowableInternalHelper$RequestMax.INSTANCE` @type ^`io.reactivex.internal.operators.flowable.FlowableInternalHelper$RequestMax` @kind object;
  #L3f57c0.  call temp:= `subscribe`(v4, v0, v1, v2, v3) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3f57c6.  v0:= temp @kind object;
  #L3f57c8.  return v0 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `subscribe`(`io.reactivex.Flowable` v3 @kind this, `io.reactivex.functions.Consumer` v4 @kind object) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3f57dc.  v0:= `@@io.reactivex.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3f57e0.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f57e4.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableInternalHelper$RequestMax.INSTANCE` @type ^`io.reactivex.internal.operators.flowable.FlowableInternalHelper$RequestMax` @kind object;
  #L3f57e8.  call temp:= `subscribe`(v3, v4, v0, v1, v2) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3f57ee.  v4:= temp @kind object;
  #L3f57f0.  return v4 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `subscribe`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Consumer` v3 @kind object, `io.reactivex.functions.Consumer` v4 @kind object) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f5804.  v0:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3f5808.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableInternalHelper$RequestMax.INSTANCE` @type ^`io.reactivex.internal.operators.flowable.FlowableInternalHelper$RequestMax` @kind object;
  #L3f580c.  call temp:= `subscribe`(v2, v3, v4, v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3f5812.  v3:= temp @kind object;
  #L3f5814.  return v3 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `subscribe`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `io.reactivex.functions.Action` v4 @kind object) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5828.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableInternalHelper$RequestMax.INSTANCE` @type ^`io.reactivex.internal.operators.flowable.FlowableInternalHelper$RequestMax` @kind object;
  #L3f582c.  call temp:= `subscribe`(v1, v2, v3, v4, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3f5832.  v2:= temp @kind object;
  #L3f5834.  return v2 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `subscribe`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `io.reactivex.functions.Action` v4 @kind object, `io.reactivex.functions.Consumer` v5 @kind object) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5848.  v0:= "onNext is null" @kind object;
  #L3f584c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f5852.  v0:= "onError is null" @kind object;
  #L3f5856.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f585c.  v0:= "onComplete is null" @kind object;
  #L3f5860.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f5866.  v0:= "onSubscribe is null" @kind object;
  #L3f586a.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f5870.  v0:= new `io.reactivex.internal.subscribers.LambdaSubscriber`;
  #L3f5874.  call `<init>`(v0, v2, v3, v4, v5) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.<init>:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;)V` @kind direct;
  #L3f587a.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f5880.  return v0 @kind object;
}
procedure `void` `subscribe`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.FlowableSubscriber` v3 @kind object) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f5ee8.  v0:= "s is null" @kind object;
  #L3f5eec.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f5ef2.  call temp:= `onSubscribe`(v2, v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onSubscribe:(Lio/reactivex/Flowable;Lorg/reactivestreams/Subscriber;)Lorg/reactivestreams/Subscriber;` @kind static;
  #L3f5ef8.  v3:= temp @kind object;
  #L3f5efa.  v0:= "Plugin returned null Subscriber" @kind object;
  #L3f5efe.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f5f04.  call `subscribeActual`(v2, v3) @signature `Lio/reactivex/Flowable;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L3f5f0a.  return @kind void;
  #L3f5f0c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f5f0e.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f5f14.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3f5f1a.  v0:= new `java.lang.NullPointerException`;
  #L3f5f1e.  v1:= "Actually not, but can't throw other exceptions due to RS" @kind object;
  #L3f5f22.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f5f28.  call temp:= `initCause`(v0, v3) @signature `Ljava/lang/NullPointerException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L3f5f2e.  throw v0;
  #L3f5f30.  v3:= Exception @type ^`java.lang.NullPointerException` @kind object;
  #L3f5f32.  throw v3;
  catch `java.lang.NullPointerException` @[L3f5ef2..L3f5f0a] goto L3f5f30;
  catch `java.lang.Throwable` @[L3f5ef2..L3f5f0a] goto L3f5f0c;
}
procedure `void` `subscribe`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/Flowable;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5f54.  v0:= instanceof @variable v2 @type ^`io.reactivex.FlowableSubscriber` @kind boolean;
  #L3f5f58.  if v0 == 0 then goto L3f5f68;
  #L3f5f5c.  v2:= (`io.reactivex.FlowableSubscriber`) v2 @kind object;
  #L3f5f60.  call `subscribe`(v1, v2) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f5f66.  goto L3f5f82;
  #L3f5f68.  v0:= "s is null" @kind object;
  #L3f5f6c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f5f72.  v0:= new `io.reactivex.internal.subscribers.StrictSubscriber`;
  #L3f5f76.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3f5f7c.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f5f82.  return @kind void;
}
procedure `void` `subscribeActual`(`org.reactivestreams.Subscriber` v0 @kind object) @signature `Lio/reactivex/Flowable;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `io.reactivex.Flowable` `subscribeOn`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.Scheduler` v3 @kind object) @signature `Lio/reactivex/Flowable;.subscribeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f37e8.  v0:= "scheduler is null" @kind object;
  #L3f37ec.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f37f2.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSubscribeOn`;
  #L3f37f6.  v1:= instanceof @variable v2 @type ^`io.reactivex.internal.operators.flowable.FlowableCreate` @kind boolean;
  #L3f37fa.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/Scheduler;Z)V` @kind direct;
  #L3f3800.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f3806.  v3:= temp @kind object;
  #L3f3808.  return v3 @kind object;
}
procedure `org.reactivestreams.Subscriber` `subscribeWith`(`io.reactivex.Flowable` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/Flowable;.subscribeWith:(Lorg/reactivestreams/Subscriber;)Lorg/reactivestreams/Subscriber;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3f5d50.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L3f5d56.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `switchIfEmpty`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.switchIfEmpty:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f381c.  v0:= "other is null" @kind object;
  #L3f3820.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f3826.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty`;
  #L3f382a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchIfEmpty;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3f3830.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f3836.  v2:= temp @kind object;
  #L3f3838.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `switchMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.switchMap:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f384c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f3852.  v0:= temp;
  #L3f3854.  call temp:= `switchMap`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.switchMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3f385a.  v2:= temp @kind object;
  #L3f385c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `switchMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.switchMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f3870.  v0:= 0I;
  #L3f3872.  call temp:= `b`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.b:(Lio/reactivex/functions/Function;IZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3f3878.  v2:= temp @kind object;
  #L3f387a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `switchMapDelayError`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.switchMapDelayError:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f38f4.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f38fa.  v0:= temp;
  #L3f38fc.  call temp:= `switchMapDelayError`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.switchMapDelayError:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3f3902.  v2:= temp @kind object;
  #L3f3904.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `switchMapDelayError`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.switchMapDelayError:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f3918.  v0:= 1I;
  #L3f391a.  call temp:= `b`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.b:(Lio/reactivex/functions/Function;IZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3f3920.  v2:= temp @kind object;
  #L3f3922.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `take`(`io.reactivex.Flowable` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/Flowable;.take:(J)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3f39dc.  v0:= 0L;
  #L3f39e0.  v2:= lcmp(v4, v0);
  #L3f39e4.  if v2 < 0 then goto L3f39fc;
  #L3f39e8.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTake`;
  #L3f39ec.  call `<init>`(v0, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake;.<init>:(Lio/reactivex/Flowable;J)V` @kind direct;
  #L3f39f2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f39f8.  v4:= temp @kind object;
  #L3f39fa.  return v4 @kind object;
  #L3f39fc.  v0:= new `java.lang.IllegalArgumentException`;
  #L3f3a00.  v1:= new `java.lang.StringBuilder`;
  #L3f3a04.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f3a0a.  v2:= "count >= 0 required but it was " @kind object;
  #L3f3a0e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3a14.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3a1a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f3a20.  v4:= temp @kind object;
  #L3f3a22.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f3a28.  throw v0;
}
procedure `io.reactivex.Flowable` `take`(`io.reactivex.Flowable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/Flowable;.take:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3f3a3c.  call temp:= `timer`(v1, v3) @signature `Lio/reactivex/Flowable;.timer:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @kind static;
  #L3f3a42.  v1:= temp @kind object;
  #L3f3a44.  call temp:= `takeUntil`(v0, v1) @signature `Lio/reactivex/Flowable;.takeUntil:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f3a4a.  v1:= temp @kind object;
  #L3f3a4c.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `take`(`io.reactivex.Flowable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `io.reactivex.Scheduler` v4 @kind object) @signature `Lio/reactivex/Flowable;.take:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3f3a60.  call temp:= `timer`(v1, v3, v4) @signature `Lio/reactivex/Flowable;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind static;
  #L3f3a66.  v1:= temp @kind object;
  #L3f3a68.  call temp:= `takeUntil`(v0, v1) @signature `Lio/reactivex/Flowable;.takeUntil:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f3a6e.  v1:= temp @kind object;
  #L3f3a70.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `takeLast`(`io.reactivex.Flowable` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/Flowable;.takeLast:(I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3f3a84.  if v4 < 0 then goto L3f3ace;
  #L3f3a88.  if v4 != 0 then goto L3f3aa0;
  #L3f3a8c.  v4:= new `io.reactivex.internal.operators.flowable.FlowableIgnoreElements`;
  #L3f3a90.  call `<init>`(v4, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableIgnoreElements;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3f3a96.  call temp:= `onAssembly`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f3a9c.  v4:= temp @kind object;
  #L3f3a9e.  return v4 @kind object;
  #L3f3aa0.  v0:= 1I;
  #L3f3aa2.  if v4 != v0 then goto L3f3aba;
  #L3f3aa6.  v4:= new `io.reactivex.internal.operators.flowable.FlowableTakeLastOne`;
  #L3f3aaa.  call `<init>`(v4, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastOne;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3f3ab0.  call temp:= `onAssembly`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f3ab6.  v4:= temp @kind object;
  #L3f3ab8.  return v4 @kind object;
  #L3f3aba.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTakeLast`;
  #L3f3abe.  call `<init>`(v0, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast;.<init>:(Lio/reactivex/Flowable;I)V` @kind direct;
  #L3f3ac4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f3aca.  v4:= temp @kind object;
  #L3f3acc.  return v4 @kind object;
  #L3f3ace.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L3f3ad2.  v1:= new `java.lang.StringBuilder`;
  #L3f3ad6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f3adc.  v2:= "count >= 0 required but it was " @kind object;
  #L3f3ae0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3ae6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3aec.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f3af2.  v4:= temp @kind object;
  #L3f3af4.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f3afa.  throw v0;
}
procedure `io.reactivex.Flowable` `takeLast`(`io.reactivex.Flowable` v9 @kind this, `long` v10 , `long` v12 , `java.util.concurrent.TimeUnit` v14 @kind object) @signature `Lio/reactivex/Flowable;.takeLast:(JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f3bfc.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f3c02.  v6:= temp @kind object;
  #L3f3c04.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f3c0a.  v8:= temp;
  #L3f3c0c.  v7:= 0I;
  #L3f3c0e.  v0:= v9 @kind object;
  #L3f3c10.  v1:= v10 @kind wide;
  #L3f3c12.  v3:= v12 @kind wide;
  #L3f3c14.  v5:= v14 @kind object;
  #L3f3c16.  call temp:= `takeLast`(v0, v1, v3, v5, v6, v7, v8) @signature `Lio/reactivex/Flowable;.takeLast:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f3c1c.  v10:= temp @kind object;
  #L3f3c1e.  return v10 @kind object;
}
procedure `io.reactivex.Flowable` `takeLast`(`io.reactivex.Flowable` v9 @kind this, `long` v10 , `long` v12 , `java.util.concurrent.TimeUnit` v14 @kind object, `io.reactivex.Scheduler` v15 @kind object) @signature `Lio/reactivex/Flowable;.takeLast:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f3c30.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f3c36.  v8:= temp;
  #L3f3c38.  v7:= 0I;
  #L3f3c3a.  v0:= v9 @kind object;
  #L3f3c3c.  v1:= v10 @kind wide;
  #L3f3c3e.  v3:= v12 @kind wide;
  #L3f3c40.  v5:= v14 @kind object;
  #L3f3c42.  v6:= v15 @kind object;
  #L3f3c44.  call temp:= `takeLast`(v0, v1, v3, v5, v6, v7, v8) @signature `Lio/reactivex/Flowable;.takeLast:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f3c4a.  v10:= temp @kind object;
  #L3f3c4c.  return v10 @kind object;
}
procedure `io.reactivex.Flowable` `takeLast`(`io.reactivex.Flowable` v11 @kind this, `long` v12 , `long` v14 , `java.util.concurrent.TimeUnit` v16 @kind object, `io.reactivex.Scheduler` v17 @kind object, `boolean` v18 , `int` v19 ) @signature `Lio/reactivex/Flowable;.takeLast:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3f3c60.  v2:= v12 @kind wide;
  #L3f3c62.  v0:= "unit is null" @kind object;
  #L3f3c66.  v6:= v16 @kind object;
  #L3f3c6a.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f3c70.  v0:= "scheduler is null" @kind object;
  #L3f3c74.  v7:= v17 @kind object;
  #L3f3c78.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f3c7e.  v0:= "bufferSize" @kind object;
  #L3f3c82.  v8:= v19;
  #L3f3c86.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f3c8c.  v0:= 0L;
  #L3f3c90.  v4:= lcmp(v2, v0);
  #L3f3c94.  if v4 < 0 then goto L3f3cc4;
  #L3f3c98.  v10:= new `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed`;
  #L3f3c9c.  v0:= v10 @kind object;
  #L3f3c9e.  v1:= v11 @kind object;
  #L3f3ca0.  v2:= v12 @kind wide;
  #L3f3ca2.  v4:= v14 @kind wide;
  #L3f3ca4.  v6:= v16 @kind object;
  #L3f3ca8.  v7:= v17 @kind object;
  #L3f3cac.  v8:= v19;
  #L3f3cb0.  v9:= v18;
  #L3f3cb4.  call `<init>`(v0, v1, v2, v4, v6, v7, v8, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed;.<init>:(Lio/reactivex/Flowable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IZ)V` @kind direct;
  #L3f3cba.  call temp:= `onAssembly`(v10) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f3cc0.  v0:= temp @kind object;
  #L3f3cc2.  return v0 @kind object;
  #L3f3cc4.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L3f3cc8.  v1:= new `java.lang.StringBuilder`;
  #L3f3ccc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f3cd2.  v4:= "count >= 0 required but it was " @kind object;
  #L3f3cd6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3cdc.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3ce2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f3ce8.  v1:= temp @kind object;
  #L3f3cea.  call `<init>`(v0, v1) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f3cf0.  throw v0;
}
procedure `io.reactivex.Flowable` `takeLast`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lio/reactivex/Flowable;.takeLast:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f3b0c.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f3b12.  v4:= temp @kind object;
  #L3f3b14.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f3b1a.  v6:= temp;
  #L3f3b1c.  v5:= 0I;
  #L3f3b1e.  v0:= v7 @kind object;
  #L3f3b20.  v1:= v8 @kind wide;
  #L3f3b22.  v3:= v10 @kind object;
  #L3f3b24.  call temp:= `takeLast`(v0, v1, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.takeLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f3b2a.  v8:= temp @kind object;
  #L3f3b2c.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `takeLast`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object) @signature `Lio/reactivex/Flowable;.takeLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f3b74.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f3b7a.  v6:= temp;
  #L3f3b7c.  v5:= 0I;
  #L3f3b7e.  v0:= v7 @kind object;
  #L3f3b80.  v1:= v8 @kind wide;
  #L3f3b82.  v3:= v10 @kind object;
  #L3f3b84.  v4:= v11 @kind object;
  #L3f3b86.  call temp:= `takeLast`(v0, v1, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.takeLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f3b8c.  v8:= temp @kind object;
  #L3f3b8e.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `takeLast`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object, `boolean` v12 ) @signature `Lio/reactivex/Flowable;.takeLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f3ba0.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f3ba6.  v6:= temp;
  #L3f3ba8.  v0:= v7 @kind object;
  #L3f3baa.  v1:= v8 @kind wide;
  #L3f3bac.  v3:= v10 @kind object;
  #L3f3bae.  v4:= v11 @kind object;
  #L3f3bb0.  v5:= v12;
  #L3f3bb2.  call temp:= `takeLast`(v0, v1, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.takeLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f3bb8.  v8:= temp @kind object;
  #L3f3bba.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `takeLast`(`io.reactivex.Flowable` v9 @kind this, `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object, `io.reactivex.Scheduler` v13 @kind object, `boolean` v14 , `int` v15 ) @signature `Lio/reactivex/Flowable;.takeLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f3bcc.  v1:= 9223372036854775807L;
  #L3f3bd6.  v0:= v9 @kind object;
  #L3f3bd8.  v3:= v10 @kind wide;
  #L3f3bda.  v5:= v12 @kind object;
  #L3f3bdc.  v6:= v13 @kind object;
  #L3f3bde.  v7:= v14;
  #L3f3be0.  v8:= v15;
  #L3f3be2.  call temp:= `takeLast`(v0, v1, v3, v5, v6, v7, v8) @signature `Lio/reactivex/Flowable;.takeLast:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f3be8.  v10:= temp @kind object;
  #L3f3bea.  return v10 @kind object;
}
procedure `io.reactivex.Flowable` `takeLast`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `boolean` v11 ) @signature `Lio/reactivex/Flowable;.takeLast:(JLjava/util/concurrent/TimeUnit;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f3b40.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f3b46.  v4:= temp @kind object;
  #L3f3b48.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f3b4e.  v6:= temp;
  #L3f3b50.  v0:= v7 @kind object;
  #L3f3b52.  v1:= v8 @kind wide;
  #L3f3b54.  v3:= v10 @kind object;
  #L3f3b56.  v5:= v11;
  #L3f3b58.  call temp:= `takeLast`(v0, v1, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.takeLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f3b5e.  v8:= temp @kind object;
  #L3f3b60.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `takeUntil`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/Flowable;.takeUntil:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f3d04.  v0:= "stopPredicate is null" @kind object;
  #L3f3d08.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f3d0e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate`;
  #L3f3d12.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntilPredicate;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L3f3d18.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f3d1e.  v2:= temp @kind object;
  #L3f3d20.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `takeUntil`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.takeUntil:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f3d34.  v0:= "other is null" @kind object;
  #L3f3d38.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f3d3e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTakeUntil`;
  #L3f3d42.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3f3d48.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f3d4e.  v2:= temp @kind object;
  #L3f3d50.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `takeWhile`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/Flowable;.takeWhile:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f3d64.  v0:= "predicate is null" @kind object;
  #L3f3d68.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f3d6e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTakeWhile`;
  #L3f3d72.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeWhile;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L3f3d78.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f3d7e.  v2:= temp @kind object;
  #L3f3d80.  return v2 @kind object;
}
procedure `io.reactivex.subscribers.TestSubscriber` `test`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.test:()Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5aac.  v0:= new `io.reactivex.subscribers.TestSubscriber`;
  #L3f5ab0.  call `<init>`(v0) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:()V` @kind direct;
  #L3f5ab6.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f5abc.  return v0 @kind object;
}
procedure `io.reactivex.subscribers.TestSubscriber` `test`(`io.reactivex.Flowable` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/Flowable;.test:(J)Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5ad0.  v0:= new `io.reactivex.subscribers.TestSubscriber`;
  #L3f5ad4.  call `<init>`(v0, v2) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(J)V` @kind direct;
  #L3f5ada.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f5ae0.  return v0 @kind object;
}
procedure `io.reactivex.subscribers.TestSubscriber` `test`(`io.reactivex.Flowable` v1 @kind this, `long` v2 , `boolean` v4 ) @signature `Lio/reactivex/Flowable;.test:(JZ)Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5af4.  v0:= new `io.reactivex.subscribers.TestSubscriber`;
  #L3f5af8.  call `<init>`(v0, v2) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(J)V` @kind direct;
  #L3f5afe.  if v4 == 0 then goto L3f5b08;
  #L3f5b02.  call `cancel`(v0) @signature `Lio/reactivex/subscribers/TestSubscriber;.cancel:()V` @kind virtual;
  #L3f5b08.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3f5b0e.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `throttleFirst`(`io.reactivex.Flowable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Flowable;.throttleFirst:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f3d94.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f3d9a.  v0:= temp @kind object;
  #L3f3d9c.  call temp:= `throttleFirst`(v1, v2, v4, v0) @signature `Lio/reactivex/Flowable;.throttleFirst:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f3da2.  v2:= temp @kind object;
  #L3f3da4.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `throttleFirst`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object) @signature `Lio/reactivex/Flowable;.throttleFirst:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f3db8.  v0:= "unit is null" @kind object;
  #L3f3dbc.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f3dc2.  v0:= "scheduler is null" @kind object;
  #L3f3dc6.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f3dcc.  v0:= new `io.reactivex.internal.operators.flowable.FlowableThrottleFirstTimed`;
  #L3f3dd0.  v1:= v0 @kind object;
  #L3f3dd2.  v2:= v7 @kind object;
  #L3f3dd4.  v3:= v8 @kind wide;
  #L3f3dd6.  v5:= v10 @kind object;
  #L3f3dd8.  v6:= v11 @kind object;
  #L3f3dda.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableThrottleFirstTimed;.<init>:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L3f3de0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f3de6.  v8:= temp @kind object;
  #L3f3de8.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `throttleLast`(`io.reactivex.Flowable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/Flowable;.throttleLast:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3f3dfc.  call temp:= `sample`(v0, v1, v3) @signature `Lio/reactivex/Flowable;.sample:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f3e02.  v1:= temp @kind object;
  #L3f3e04.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `throttleLast`(`io.reactivex.Flowable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `io.reactivex.Scheduler` v4 @kind object) @signature `Lio/reactivex/Flowable;.throttleLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3f3e18.  call temp:= `sample`(v0, v1, v3, v4) @signature `Lio/reactivex/Flowable;.sample:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f3e1e.  v1:= temp @kind object;
  #L3f3e20.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `throttleWithTimeout`(`io.reactivex.Flowable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/Flowable;.throttleWithTimeout:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3f3e34.  call temp:= `debounce`(v0, v1, v3) @signature `Lio/reactivex/Flowable;.debounce:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f3e3a.  v1:= temp @kind object;
  #L3f3e3c.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `throttleWithTimeout`(`io.reactivex.Flowable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `io.reactivex.Scheduler` v4 @kind object) @signature `Lio/reactivex/Flowable;.throttleWithTimeout:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3f3e50.  call temp:= `debounce`(v0, v1, v3, v4) @signature `Lio/reactivex/Flowable;.debounce:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f3e56.  v1:= temp @kind object;
  #L3f3e58.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `timeInterval`(`io.reactivex.Flowable` v2 @kind this) @signature `Lio/reactivex/Flowable;.timeInterval:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f3e6c.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3f3e70.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f3e76.  v1:= temp @kind object;
  #L3f3e78.  call temp:= `timeInterval`(v2, v0, v1) @signature `Lio/reactivex/Flowable;.timeInterval:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f3e7e.  v0:= temp @kind object;
  #L3f3e80.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `timeInterval`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/Flowable;.timeInterval:(Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f3e94.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3f3e98.  call temp:= `timeInterval`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.timeInterval:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f3e9e.  v2:= temp @kind object;
  #L3f3ea0.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `timeInterval`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.TimeUnit` v2 @kind object) @signature `Lio/reactivex/Flowable;.timeInterval:(Ljava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f3eb4.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f3eba.  v0:= temp @kind object;
  #L3f3ebc.  call temp:= `timeInterval`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.timeInterval:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f3ec2.  v2:= temp @kind object;
  #L3f3ec4.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `timeInterval`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.TimeUnit` v2 @kind object, `io.reactivex.Scheduler` v3 @kind object) @signature `Lio/reactivex/Flowable;.timeInterval:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f3ed8.  v0:= "unit is null" @kind object;
  #L3f3edc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f3ee2.  v0:= "scheduler is null" @kind object;
  #L3f3ee6.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f3eec.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTimeInterval`;
  #L3f3ef0.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeInterval;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L3f3ef6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f3efc.  v2:= temp @kind object;
  #L3f3efe.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `timeout`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object) @signature `Lio/reactivex/Flowable;.timeout:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f3f54.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f3f5a.  v5:= temp @kind object;
  #L3f3f5c.  v4:= 0I;
  #L3f3f5e.  v0:= v6 @kind object;
  #L3f3f60.  v1:= v7 @kind wide;
  #L3f3f62.  v3:= v9 @kind object;
  #L3f3f64.  call temp:= `c`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.c:(JLjava/util/concurrent/TimeUnit;Lorg/reactivestreams/Publisher;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind direct;
  #L3f3f6a.  v7:= temp @kind object;
  #L3f3f6c.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `timeout`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `io.reactivex.Scheduler` v10 @kind object) @signature `Lio/reactivex/Flowable;.timeout:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f3f80.  v4:= 0I;
  #L3f3f82.  v0:= v6 @kind object;
  #L3f3f84.  v1:= v7 @kind wide;
  #L3f3f86.  v3:= v9 @kind object;
  #L3f3f88.  v5:= v10 @kind object;
  #L3f3f8a.  call temp:= `c`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.c:(JLjava/util/concurrent/TimeUnit;Lorg/reactivestreams/Publisher;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind direct;
  #L3f3f90.  v7:= temp @kind object;
  #L3f3f92.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `timeout`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `io.reactivex.Scheduler` v10 @kind object, `org.reactivestreams.Publisher` v11 @kind object) @signature `Lio/reactivex/Flowable;.timeout:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f3fa4.  v0:= "other is null" @kind object;
  #L3f3fa8.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f3fae.  v0:= v6 @kind object;
  #L3f3fb0.  v1:= v7 @kind wide;
  #L3f3fb2.  v3:= v9 @kind object;
  #L3f3fb4.  v4:= v11 @kind object;
  #L3f3fb6.  v5:= v10 @kind object;
  #L3f3fb8.  call temp:= `c`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.c:(JLjava/util/concurrent/TimeUnit;Lorg/reactivestreams/Publisher;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind direct;
  #L3f3fbe.  v7:= temp @kind object;
  #L3f3fc0.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `timeout`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `org.reactivestreams.Publisher` v11 @kind object) @signature `Lio/reactivex/Flowable;.timeout:(JLjava/util/concurrent/TimeUnit;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f3fd4.  v0:= "other is null" @kind object;
  #L3f3fd8.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f3fde.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f3fe4.  v6:= temp @kind object;
  #L3f3fe6.  v1:= v7 @kind object;
  #L3f3fe8.  v2:= v8 @kind wide;
  #L3f3fea.  v4:= v10 @kind object;
  #L3f3fec.  v5:= v11 @kind object;
  #L3f3fee.  call temp:= `c`(v1, v2, v4, v5, v6) @signature `Lio/reactivex/Flowable;.c:(JLjava/util/concurrent/TimeUnit;Lorg/reactivestreams/Publisher;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind direct;
  #L3f3ff4.  v8:= temp @kind object;
  #L3f3ff6.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `timeout`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.timeout:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f3f10.  v0:= 0I;
  #L3f3f12.  call temp:= `d`(v1, v0, v2, v0) @signature `Lio/reactivex/Flowable;.d:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind direct;
  #L3f3f18.  v2:= temp @kind object;
  #L3f3f1a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `timeout`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.Flowable` v3 @kind object) @signature `Lio/reactivex/Flowable;.timeout:(Lio/reactivex/functions/Function;Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f3f2c.  v0:= "other is null" @kind object;
  #L3f3f30.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f3f36.  v0:= 0I;
  #L3f3f38.  call temp:= `d`(v1, v0, v2, v3) @signature `Lio/reactivex/Flowable;.d:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind direct;
  #L3f3f3e.  v2:= temp @kind object;
  #L3f3f40.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `timeout`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.timeout:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f4008.  v0:= "firstTimeoutIndicator is null" @kind object;
  #L3f400c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4012.  v0:= 0I;
  #L3f4014.  call temp:= `d`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.d:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind direct;
  #L3f401a.  v2:= temp @kind object;
  #L3f401c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `timeout`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/Flowable;.timeout:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f4030.  v0:= "firstTimeoutSelector is null" @kind object;
  #L3f4034.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f403a.  v0:= "other is null" @kind object;
  #L3f403e.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4044.  call temp:= `d`(v1, v2, v3, v4) @signature `Lio/reactivex/Flowable;.d:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind direct;
  #L3f404a.  v2:= temp @kind object;
  #L3f404c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `timestamp`(`io.reactivex.Flowable` v2 @kind this) @signature `Lio/reactivex/Flowable;.timestamp:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f413c.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3f4140.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f4146.  v1:= temp @kind object;
  #L3f4148.  call temp:= `timestamp`(v2, v0, v1) @signature `Lio/reactivex/Flowable;.timestamp:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f414e.  v0:= temp @kind object;
  #L3f4150.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `timestamp`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/Flowable;.timestamp:(Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f4164.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3f4168.  call temp:= `timestamp`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.timestamp:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f416e.  v2:= temp @kind object;
  #L3f4170.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `timestamp`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.TimeUnit` v2 @kind object) @signature `Lio/reactivex/Flowable;.timestamp:(Ljava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f4184.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f418a.  v0:= temp @kind object;
  #L3f418c.  call temp:= `timestamp`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.timestamp:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f4192.  v2:= temp @kind object;
  #L3f4194.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `timestamp`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.TimeUnit` v2 @kind object, `io.reactivex.Scheduler` v3 @kind object) @signature `Lio/reactivex/Flowable;.timestamp:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f41a8.  v0:= "unit is null" @kind object;
  #L3f41ac.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f41b2.  v0:= "scheduler is null" @kind object;
  #L3f41b6.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f41bc.  call temp:= `timestampWith`(v2, v3) @signature `Lio/reactivex/internal/functions/Functions;.timestampWith:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/functions/Function;` @kind static;
  #L3f41c2.  v2:= temp @kind object;
  #L3f41c4.  call temp:= `map`(v1, v2) @signature `Lio/reactivex/Flowable;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f41ca.  v2:= temp @kind object;
  #L3f41cc.  return v2 @kind object;
}
procedure `java.lang.Object` `to`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.to:(Lio/reactivex/functions/Function;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5ce0.  v0:= "converter is null" @kind object;
  #L3f5ce4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f5cea.  v2:= temp @kind object;
  #L3f5cec.  v2:= (`io.reactivex.functions.Function`) v2 @kind object;
  #L3f5cf0.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f5cf6.  v2:= temp @kind object;
  #L3f5cf8.  return v2 @kind object;
  #L3f5cfa.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f5cfc.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3f5d02.  call temp:= `wrapOrThrow`(v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L3f5d08.  v2:= temp @kind object;
  #L3f5d0a.  throw v2;
  catch `java.lang.Throwable` @[L3f5ce0..L3f5cf8] goto L3f5cfa;
}
procedure `java.util.concurrent.Future` `toFuture`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.toFuture:()Ljava/util/concurrent/Future;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5d28.  v0:= new `io.reactivex.internal.subscribers.FutureSubscriber`;
  #L3f5d2c.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscribers/FutureSubscriber;.<init>:()V` @kind direct;
  #L3f5d32.  call temp:= `subscribeWith`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribeWith:(Lorg/reactivestreams/Subscriber;)Lorg/reactivestreams/Subscriber;` @kind virtual;
  #L3f5d38.  v0:= temp @kind object;
  #L3f5d3a.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L3f5d3e.  return v0 @kind object;
}
procedure `io.reactivex.Single` `toList`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.toList:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5454.  v0:= new `io.reactivex.internal.operators.flowable.FlowableToListSingle`;
  #L3f5458.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableToListSingle;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3f545e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3f5464.  v0:= temp @kind object;
  #L3f5466.  return v0 @kind object;
}
procedure `io.reactivex.Single` `toList`(`io.reactivex.Flowable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/Flowable;.toList:(I)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5478.  v0:= "capacityHint" @kind object;
  #L3f547c.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f5482.  v0:= new `io.reactivex.internal.operators.flowable.FlowableToListSingle`;
  #L3f5486.  call temp:= `createArrayList`(v2) @signature `Lio/reactivex/internal/functions/Functions;.createArrayList:(I)Ljava/util/concurrent/Callable;` @kind static;
  #L3f548c.  v2:= temp @kind object;
  #L3f548e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableToListSingle;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3f5494.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3f549a.  v2:= temp @kind object;
  #L3f549c.  return v2 @kind object;
}
procedure `io.reactivex.Single` `toList`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object) @signature `Lio/reactivex/Flowable;.toList:(Ljava/util/concurrent/Callable;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f54b0.  v0:= "collectionSupplier is null" @kind object;
  #L3f54b4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f54ba.  v0:= new `io.reactivex.internal.operators.flowable.FlowableToListSingle`;
  #L3f54be.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableToListSingle;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3f54c4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3f54ca.  v2:= temp @kind object;
  #L3f54cc.  return v2 @kind object;
}
procedure `io.reactivex.Single` `toMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.toMap:(Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f54e0.  v0:= "keySelector is null" @kind object;
  #L3f54e4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f54ea.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/HashMapSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L3f54f0.  v0:= temp @kind object;
  #L3f54f2.  call temp:= `toMapKeySelector`(v2) @signature `Lio/reactivex/internal/functions/Functions;.toMapKeySelector:(Lio/reactivex/functions/Function;)Lio/reactivex/functions/BiConsumer;` @kind static;
  #L3f54f8.  v2:= temp @kind object;
  #L3f54fa.  call temp:= `collect`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.collect:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)Lio/reactivex/Single;` @kind virtual;
  #L3f5500.  v2:= temp @kind object;
  #L3f5502.  return v2 @kind object;
}
procedure `io.reactivex.Single` `toMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.toMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5514.  v0:= "keySelector is null" @kind object;
  #L3f5518.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f551e.  v0:= "valueSelector is null" @kind object;
  #L3f5522.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f5528.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/HashMapSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L3f552e.  v0:= temp @kind object;
  #L3f5530.  call temp:= `toMapKeyValueSelector`(v2, v3) @signature `Lio/reactivex/internal/functions/Functions;.toMapKeyValueSelector:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;)Lio/reactivex/functions/BiConsumer;` @kind static;
  #L3f5536.  v2:= temp @kind object;
  #L3f5538.  call temp:= `collect`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.collect:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)Lio/reactivex/Single;` @kind virtual;
  #L3f553e.  v2:= temp @kind object;
  #L3f5540.  return v2 @kind object;
}
procedure `io.reactivex.Single` `toMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/Flowable;.toMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5554.  v0:= "keySelector is null" @kind object;
  #L3f5558.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f555e.  v0:= "valueSelector is null" @kind object;
  #L3f5562.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f5568.  call temp:= `toMapKeyValueSelector`(v2, v3) @signature `Lio/reactivex/internal/functions/Functions;.toMapKeyValueSelector:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;)Lio/reactivex/functions/BiConsumer;` @kind static;
  #L3f556e.  v2:= temp @kind object;
  #L3f5570.  call temp:= `collect`(v1, v4, v2) @signature `Lio/reactivex/Flowable;.collect:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)Lio/reactivex/Single;` @kind virtual;
  #L3f5576.  v2:= temp @kind object;
  #L3f5578.  return v2 @kind object;
}
procedure `io.reactivex.Single` `toMultimap`(`io.reactivex.Flowable` v3 @kind this, `io.reactivex.functions.Function` v4 @kind object) @signature `Lio/reactivex/Flowable;.toMultimap:(Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3f558c.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3f5592.  v0:= temp @kind object;
  #L3f5594.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/HashMapSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L3f559a.  v1:= temp @kind object;
  #L3f559c.  call temp:= `asFunction`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asFunction:()Lio/reactivex/functions/Function;` @kind static;
  #L3f55a2.  v2:= temp @kind object;
  #L3f55a4.  call temp:= `toMultimap`(v3, v4, v0, v1, v2) @signature `Lio/reactivex/Flowable;.toMultimap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @kind virtual;
  #L3f55aa.  v4:= temp @kind object;
  #L3f55ac.  return v4 @kind object;
}
procedure `io.reactivex.Single` `toMultimap`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object) @signature `Lio/reactivex/Flowable;.toMultimap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f55c0.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/HashMapSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L3f55c6.  v0:= temp @kind object;
  #L3f55c8.  call temp:= `asFunction`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asFunction:()Lio/reactivex/functions/Function;` @kind static;
  #L3f55ce.  v1:= temp @kind object;
  #L3f55d0.  call temp:= `toMultimap`(v2, v3, v4, v0, v1) @signature `Lio/reactivex/Flowable;.toMultimap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @kind virtual;
  #L3f55d6.  v3:= temp @kind object;
  #L3f55d8.  return v3 @kind object;
}
procedure `io.reactivex.Single` `toMultimap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/Flowable;.toMultimap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f55ec.  call temp:= `asFunction`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asFunction:()Lio/reactivex/functions/Function;` @kind static;
  #L3f55f2.  v0:= temp @kind object;
  #L3f55f4.  call temp:= `toMultimap`(v1, v2, v3, v4, v0) @signature `Lio/reactivex/Flowable;.toMultimap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @kind virtual;
  #L3f55fa.  v2:= temp @kind object;
  #L3f55fc.  return v2 @kind object;
}
procedure `io.reactivex.Single` `toMultimap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object, `io.reactivex.functions.Function` v5 @kind object) @signature `Lio/reactivex/Flowable;.toMultimap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5610.  v0:= "keySelector is null" @kind object;
  #L3f5614.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f561a.  v0:= "valueSelector is null" @kind object;
  #L3f561e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f5624.  v0:= "mapSupplier is null" @kind object;
  #L3f5628.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f562e.  v0:= "collectionFactory is null" @kind object;
  #L3f5632.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f5638.  call temp:= `toMultimapKeyValueSelector`(v2, v3, v5) @signature `Lio/reactivex/internal/functions/Functions;.toMultimapKeyValueSelector:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;)Lio/reactivex/functions/BiConsumer;` @kind static;
  #L3f563e.  v2:= temp @kind object;
  #L3f5640.  call temp:= `collect`(v1, v4, v2) @signature `Lio/reactivex/Flowable;.collect:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)Lio/reactivex/Single;` @kind virtual;
  #L3f5646.  v2:= temp @kind object;
  #L3f5648.  return v2 @kind object;
}
procedure `io.reactivex.Observable` `toObservable`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.toObservable:()Lio/reactivex/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5010.  v0:= new `io.reactivex.internal.operators.observable.ObservableFromPublisher`;
  #L3f5014.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFromPublisher;.<init>:(Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3f501a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Observable;)Lio/reactivex/Observable;` @kind static;
  #L3f5020.  v0:= temp @kind object;
  #L3f5022.  return v0 @kind object;
}
procedure `io.reactivex.Single` `toSortedList`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.toSortedList:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f565c.  call temp:= `naturalComparator`() @signature `Lio/reactivex/internal/functions/Functions;.naturalComparator:()Ljava/util/Comparator;` @kind static;
  #L3f5662.  v0:= temp @kind object;
  #L3f5664.  call temp:= `toSortedList`(v1, v0) @signature `Lio/reactivex/Flowable;.toSortedList:(Ljava/util/Comparator;)Lio/reactivex/Single;` @kind virtual;
  #L3f566a.  v0:= temp @kind object;
  #L3f566c.  return v0 @kind object;
}
procedure `io.reactivex.Single` `toSortedList`(`io.reactivex.Flowable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/Flowable;.toSortedList:(I)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f5680.  call temp:= `naturalComparator`() @signature `Lio/reactivex/internal/functions/Functions;.naturalComparator:()Ljava/util/Comparator;` @kind static;
  #L3f5686.  v0:= temp @kind object;
  #L3f5688.  call temp:= `toSortedList`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.toSortedList:(Ljava/util/Comparator;I)Lio/reactivex/Single;` @kind virtual;
  #L3f568e.  v2:= temp @kind object;
  #L3f5690.  return v2 @kind object;
}
procedure `io.reactivex.Single` `toSortedList`(`io.reactivex.Flowable` v1 @kind this, `java.util.Comparator` v2 @kind object) @signature `Lio/reactivex/Flowable;.toSortedList:(Ljava/util/Comparator;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f56a4.  v0:= "comparator is null" @kind object;
  #L3f56a8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f56ae.  call temp:= `toList`(v1) @signature `Lio/reactivex/Flowable;.toList:()Lio/reactivex/Single;` @kind virtual;
  #L3f56b4.  v0:= temp @kind object;
  #L3f56b6.  call temp:= `listSorter`(v2) @signature `Lio/reactivex/internal/functions/Functions;.listSorter:(Ljava/util/Comparator;)Lio/reactivex/functions/Function;` @kind static;
  #L3f56bc.  v2:= temp @kind object;
  #L3f56be.  call temp:= `map`(v0, v2) @signature `Lio/reactivex/Single;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @kind virtual;
  #L3f56c4.  v2:= temp @kind object;
  #L3f56c6.  return v2 @kind object;
}
procedure `io.reactivex.Single` `toSortedList`(`io.reactivex.Flowable` v1 @kind this, `java.util.Comparator` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.toSortedList:(Ljava/util/Comparator;I)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f56d8.  v0:= "comparator is null" @kind object;
  #L3f56dc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f56e2.  call temp:= `toList`(v1, v3) @signature `Lio/reactivex/Flowable;.toList:(I)Lio/reactivex/Single;` @kind virtual;
  #L3f56e8.  v3:= temp @kind object;
  #L3f56ea.  call temp:= `listSorter`(v2) @signature `Lio/reactivex/internal/functions/Functions;.listSorter:(Ljava/util/Comparator;)Lio/reactivex/functions/Function;` @kind static;
  #L3f56f0.  v2:= temp @kind object;
  #L3f56f2.  call temp:= `map`(v3, v2) @signature `Lio/reactivex/Single;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @kind virtual;
  #L3f56f8.  v2:= temp @kind object;
  #L3f56fa.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `unsubscribeOn`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/Flowable;.unsubscribeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f4228.  v0:= "scheduler is null" @kind object;
  #L3f422c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4232.  v0:= new `io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn`;
  #L3f4236.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/Scheduler;)V` @kind direct;
  #L3f423c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f4242.  v2:= temp @kind object;
  #L3f4244.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/Flowable;.window:(J)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f4314.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f431a.  v5:= temp;
  #L3f431c.  v0:= v6 @kind object;
  #L3f431e.  v1:= v7 @kind wide;
  #L3f4320.  v3:= v7 @kind wide;
  #L3f4322.  call temp:= `window`(v0, v1, v3, v5) @signature `Lio/reactivex/Flowable;.window:(JJI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f4328.  v7:= temp @kind object;
  #L3f432a.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `long` v9 ) @signature `Lio/reactivex/Flowable;.window:(JJ)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f44b8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f44be.  v5:= temp;
  #L3f44c0.  v0:= v6 @kind object;
  #L3f44c2.  v1:= v7 @kind wide;
  #L3f44c4.  v3:= v9 @kind wide;
  #L3f44c6.  call temp:= `window`(v0, v1, v3, v5) @signature `Lio/reactivex/Flowable;.window:(JJI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f44cc.  v7:= temp @kind object;
  #L3f44ce.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `long` v11 , `int` v13 ) @signature `Lio/reactivex/Flowable;.window:(JJI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f44e0.  v0:= "skip" @kind object;
  #L3f44e4.  call temp:= `verifyPositive`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L3f44ea.  v0:= "count" @kind object;
  #L3f44ee.  call temp:= `verifyPositive`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L3f44f4.  v0:= "bufferSize" @kind object;
  #L3f44f8.  call temp:= `verifyPositive`(v13, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f44fe.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWindow`;
  #L3f4502.  v1:= v0 @kind object;
  #L3f4504.  v2:= v8 @kind object;
  #L3f4506.  v3:= v9 @kind wide;
  #L3f4508.  v5:= v11 @kind wide;
  #L3f450a.  v7:= v13;
  #L3f450c.  call `<init>`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow;.<init>:(Lio/reactivex/Flowable;JJI)V` @kind direct;
  #L3f4512.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f4518.  v9:= temp @kind object;
  #L3f451a.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `long` v11 , `java.util.concurrent.TimeUnit` v13 @kind object) @signature `Lio/reactivex/Flowable;.window:(JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f452c.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f4532.  v6:= temp @kind object;
  #L3f4534.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f453a.  v7:= temp;
  #L3f453c.  v0:= v8 @kind object;
  #L3f453e.  v1:= v9 @kind wide;
  #L3f4540.  v3:= v11 @kind wide;
  #L3f4542.  v5:= v13 @kind object;
  #L3f4544.  call temp:= `window`(v0, v1, v3, v5, v6, v7) @signature `Lio/reactivex/Flowable;.window:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3f454a.  v9:= temp @kind object;
  #L3f454c.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `long` v11 , `java.util.concurrent.TimeUnit` v13 @kind object, `io.reactivex.Scheduler` v14 @kind object) @signature `Lio/reactivex/Flowable;.window:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f4560.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f4566.  v7:= temp;
  #L3f4568.  v0:= v8 @kind object;
  #L3f456a.  v1:= v9 @kind wide;
  #L3f456c.  v3:= v11 @kind wide;
  #L3f456e.  v5:= v13 @kind object;
  #L3f4570.  v6:= v14 @kind object;
  #L3f4572.  call temp:= `window`(v0, v1, v3, v5, v6, v7) @signature `Lio/reactivex/Flowable;.window:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3f4578.  v9:= temp @kind object;
  #L3f457a.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v13 @kind this, `long` v14 , `long` v16 , `java.util.concurrent.TimeUnit` v18 @kind object, `io.reactivex.Scheduler` v19 @kind object, `int` v20 ) @signature `Lio/reactivex/Flowable;.window:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L3f458c.  v0:= "bufferSize" @kind object;
  #L3f4590.  v11:= v20;
  #L3f4594.  call temp:= `verifyPositive`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f459a.  v0:= "timespan" @kind object;
  #L3f459e.  v3:= v14 @kind wide;
  #L3f45a0.  call temp:= `verifyPositive`(v14, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L3f45a6.  v0:= "timeskip" @kind object;
  #L3f45aa.  v5:= v16 @kind wide;
  #L3f45ae.  call temp:= `verifyPositive`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L3f45b4.  v0:= "scheduler is null" @kind object;
  #L3f45b8.  v8:= v19 @kind object;
  #L3f45bc.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f45c2.  v0:= "unit is null" @kind object;
  #L3f45c6.  v7:= v18 @kind object;
  #L3f45ca.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f45d0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed`;
  #L3f45d4.  v9:= 9223372036854775807L;
  #L3f45de.  v12:= 0I;
  #L3f45e0.  v1:= v0 @kind object;
  #L3f45e2.  v2:= v13 @kind object;
  #L3f45e4.  call `<init>`(v1, v2, v3, v5, v7, v8, v9, v11, v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed;.<init>:(Lio/reactivex/Flowable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JIZ)V` @kind direct;
  #L3f45ea.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f45f0.  v0:= temp @kind object;
  #L3f45f2.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f433c.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f4342.  v4:= temp @kind object;
  #L3f4344.  v5:= 9223372036854775807L;
  #L3f434e.  v7:= 0I;
  #L3f4350.  v0:= v8 @kind object;
  #L3f4352.  v1:= v9 @kind wide;
  #L3f4354.  v3:= v11 @kind object;
  #L3f4356.  call temp:= `window`(v0, v1, v3, v4, v5, v7) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3f435c.  v9:= temp @kind object;
  #L3f435e.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `long` v12 ) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;J)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f4460.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f4466.  v4:= temp @kind object;
  #L3f4468.  v7:= 0I;
  #L3f446a.  v0:= v8 @kind object;
  #L3f446c.  v1:= v9 @kind wide;
  #L3f446e.  v3:= v11 @kind object;
  #L3f4470.  v5:= v12 @kind wide;
  #L3f4472.  call temp:= `window`(v0, v1, v3, v4, v5, v7) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3f4478.  v9:= temp @kind object;
  #L3f447a.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `long` v12 , `boolean` v14 ) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;JZ)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f448c.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3f4492.  v4:= temp @kind object;
  #L3f4494.  v0:= v8 @kind object;
  #L3f4496.  v1:= v9 @kind wide;
  #L3f4498.  v3:= v11 @kind object;
  #L3f449a.  v5:= v12 @kind wide;
  #L3f449c.  v7:= v14;
  #L3f449e.  call temp:= `window`(v0, v1, v3, v4, v5, v7) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3f44a4.  v9:= temp @kind object;
  #L3f44a6.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.Scheduler` v12 @kind object) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f4370.  v5:= 9223372036854775807L;
  #L3f437a.  v7:= 0I;
  #L3f437c.  v0:= v8 @kind object;
  #L3f437e.  v1:= v9 @kind wide;
  #L3f4380.  v3:= v11 @kind object;
  #L3f4382.  v4:= v12 @kind object;
  #L3f4384.  call temp:= `window`(v0, v1, v3, v4, v5, v7) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3f438a.  v9:= temp @kind object;
  #L3f438c.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.Scheduler` v12 @kind object, `long` v13 ) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;J)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f43a0.  v7:= 0I;
  #L3f43a2.  v0:= v8 @kind object;
  #L3f43a4.  v1:= v9 @kind wide;
  #L3f43a6.  v3:= v11 @kind object;
  #L3f43a8.  v4:= v12 @kind object;
  #L3f43aa.  v5:= v13 @kind wide;
  #L3f43ac.  call temp:= `window`(v0, v1, v3, v4, v5, v7) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3f43b2.  v9:= temp @kind object;
  #L3f43b4.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v9 @kind this, `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object, `io.reactivex.Scheduler` v13 @kind object, `long` v14 , `boolean` v16 ) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JZ)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f43c8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f43ce.  v8:= temp;
  #L3f43d0.  v0:= v9 @kind object;
  #L3f43d2.  v1:= v10 @kind wide;
  #L3f43d4.  v3:= v12 @kind object;
  #L3f43d6.  v4:= v13 @kind object;
  #L3f43d8.  v5:= v14 @kind wide;
  #L3f43da.  v7:= v16;
  #L3f43de.  call temp:= `window`(v0, v1, v3, v4, v5, v7, v8) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3f43e4.  v0:= temp @kind object;
  #L3f43e6.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v13 @kind this, `long` v14 , `java.util.concurrent.TimeUnit` v16 @kind object, `io.reactivex.Scheduler` v17 @kind object, `long` v18 , `boolean` v20 , `int` v21 ) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L3f43f8.  v0:= "bufferSize" @kind object;
  #L3f43fc.  v11:= v21;
  #L3f4400.  call temp:= `verifyPositive`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f4406.  v0:= "scheduler is null" @kind object;
  #L3f440a.  v8:= v17 @kind object;
  #L3f440e.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4414.  v0:= "unit is null" @kind object;
  #L3f4418.  v7:= v16 @kind object;
  #L3f441c.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4422.  v0:= "count" @kind object;
  #L3f4426.  v9:= v18 @kind wide;
  #L3f442a.  call temp:= `verifyPositive`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L3f4430.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed`;
  #L3f4434.  v1:= v0 @kind object;
  #L3f4436.  v2:= v13 @kind object;
  #L3f4438.  v3:= v14 @kind wide;
  #L3f443a.  v5:= v14 @kind wide;
  #L3f443c.  v12:= v20;
  #L3f4440.  call `<init>`(v1, v2, v3, v5, v7, v8, v9, v11, v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed;.<init>:(Lio/reactivex/Flowable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JIZ)V` @kind direct;
  #L3f4446.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f444c.  v0:= temp @kind object;
  #L3f444e.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object) @signature `Lio/reactivex/Flowable;.window:(Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f42b8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f42be.  v0:= temp;
  #L3f42c0.  call temp:= `window`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.window:(Ljava/util/concurrent/Callable;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3f42c6.  v2:= temp @kind object;
  #L3f42c8.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.window:(Ljava/util/concurrent/Callable;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f42dc.  v0:= "boundaryIndicatorSupplier is null" @kind object;
  #L3f42e0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f42e6.  v0:= "bufferSize" @kind object;
  #L3f42ea.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f42f0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier`;
  #L3f42f4.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;I)V` @kind direct;
  #L3f42fa.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f4300.  v2:= temp @kind object;
  #L3f4302.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.window:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f4604.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f460a.  v0:= temp;
  #L3f460c.  call temp:= `window`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.window:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3f4612.  v2:= temp @kind object;
  #L3f4614.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.window:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f4628.  v0:= "boundaryIndicator is null" @kind object;
  #L3f462c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4632.  v0:= "bufferSize" @kind object;
  #L3f4636.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f463c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundary`;
  #L3f4640.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;I)V` @kind direct;
  #L3f4646.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f464c.  v2:= temp @kind object;
  #L3f464e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.window:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f4660.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3f4666.  v0:= temp;
  #L3f4668.  call temp:= `window`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.window:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3f466e.  v2:= temp @kind object;
  #L3f4670.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.window:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f4684.  v0:= "openingIndicator is null" @kind object;
  #L3f4688.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f468e.  v0:= "closingIndicator is null" @kind object;
  #L3f4692.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4698.  v0:= "bufferSize" @kind object;
  #L3f469c.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3f46a2.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector`;
  #L3f46a6.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)V` @kind direct;
  #L3f46ac.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f46b2.  v2:= temp @kind object;
  #L3f46b4.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `withLatestFrom`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Iterable` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.withLatestFrom:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f46c8.  v0:= "others is null" @kind object;
  #L3f46cc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f46d2.  v0:= "combiner is null" @kind object;
  #L3f46d6.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f46dc.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany`;
  #L3f46e0.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany;.<init>:(Lio/reactivex/Flowable;Ljava/lang/Iterable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3f46e6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f46ec.  v2:= temp @kind object;
  #L3f46ee.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `withLatestFrom`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/Flowable;.withLatestFrom:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f4700.  v0:= "other is null" @kind object;
  #L3f4704.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f470a.  v0:= "combiner is null" @kind object;
  #L3f470e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4714.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWithLatestFrom`;
  #L3f4718.  call `<init>`(v0, v1, v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/BiFunction;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3f471e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f4724.  v2:= temp @kind object;
  #L3f4726.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `withLatestFrom`(`io.reactivex.Flowable` v2 @kind this, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `io.reactivex.functions.Function3` v5 @kind object) @signature `Lio/reactivex/Flowable;.withLatestFrom:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function3;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f4738.  v0:= "source1 is null" @kind object;
  #L3f473c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4742.  v0:= "source2 is null" @kind object;
  #L3f4746.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f474c.  call temp:= `toFunction`(v5) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function3;)Lio/reactivex/functions/Function;` @kind static;
  #L3f4752.  v5:= temp @kind object;
  #L3f4754.  v0:= 2I;
  #L3f4756.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3f475a.  v1:= 0I;
  #L3f475c.  v0[v1]:= v3 @kind object;
  #L3f4760.  v3:= 1I;
  #L3f4762.  v0[v3]:= v4 @kind object;
  #L3f4766.  call temp:= `withLatestFrom`(v2, v0, v5) @signature `Lio/reactivex/Flowable;.withLatestFrom:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f476c.  v3:= temp @kind object;
  #L3f476e.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `withLatestFrom`(`io.reactivex.Flowable` v2 @kind this, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `io.reactivex.functions.Function4` v6 @kind object) @signature `Lio/reactivex/Flowable;.withLatestFrom:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function4;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f4780.  v0:= "source1 is null" @kind object;
  #L3f4784.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f478a.  v0:= "source2 is null" @kind object;
  #L3f478e.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4794.  v0:= "source3 is null" @kind object;
  #L3f4798.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f479e.  call temp:= `toFunction`(v6) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function4;)Lio/reactivex/functions/Function;` @kind static;
  #L3f47a4.  v6:= temp @kind object;
  #L3f47a6.  v0:= 3I;
  #L3f47a8.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3f47ac.  v1:= 0I;
  #L3f47ae.  v0[v1]:= v3 @kind object;
  #L3f47b2.  v3:= 1I;
  #L3f47b4.  v0[v3]:= v4 @kind object;
  #L3f47b8.  v3:= 2I;
  #L3f47ba.  v0[v3]:= v5 @kind object;
  #L3f47be.  call temp:= `withLatestFrom`(v2, v0, v6) @signature `Lio/reactivex/Flowable;.withLatestFrom:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f47c4.  v3:= temp @kind object;
  #L3f47c6.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `withLatestFrom`(`io.reactivex.Flowable` v2 @kind this, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `io.reactivex.functions.Function5` v7 @kind object) @signature `Lio/reactivex/Flowable;.withLatestFrom:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function5;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f47d8.  v0:= "source1 is null" @kind object;
  #L3f47dc.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f47e2.  v0:= "source2 is null" @kind object;
  #L3f47e6.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f47ec.  v0:= "source3 is null" @kind object;
  #L3f47f0.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f47f6.  v0:= "source4 is null" @kind object;
  #L3f47fa.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4800.  call temp:= `toFunction`(v7) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function5;)Lio/reactivex/functions/Function;` @kind static;
  #L3f4806.  v7:= temp @kind object;
  #L3f4808.  v0:= 4I;
  #L3f480a.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3f480e.  v1:= 0I;
  #L3f4810.  v0[v1]:= v3 @kind object;
  #L3f4814.  v3:= 1I;
  #L3f4816.  v0[v3]:= v4 @kind object;
  #L3f481a.  v3:= 2I;
  #L3f481c.  v0[v3]:= v5 @kind object;
  #L3f4820.  v3:= 3I;
  #L3f4822.  v0[v3]:= v6 @kind object;
  #L3f4826.  call temp:= `withLatestFrom`(v2, v0, v7) @signature `Lio/reactivex/Flowable;.withLatestFrom:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3f482c.  v3:= temp @kind object;
  #L3f482e.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `withLatestFrom`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher`[] v2 @kind object, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.withLatestFrom:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f4840.  v0:= "others is null" @kind object;
  #L3f4844.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f484a.  v0:= "combiner is null" @kind object;
  #L3f484e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4854.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany`;
  #L3f4858.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany;.<init>:(Lio/reactivex/Flowable;[Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3f485e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f4864.  v2:= temp @kind object;
  #L3f4866.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `zipWith`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Iterable` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/Flowable;.zipWith:(Ljava/lang/Iterable;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f4e84.  v0:= "other is null" @kind object;
  #L3f4e88.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4e8e.  v0:= "zipper is null" @kind object;
  #L3f4e92.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4e98.  v0:= new `io.reactivex.internal.operators.flowable.FlowableZipIterable`;
  #L3f4e9c.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable;.<init>:(Lio/reactivex/Flowable;Ljava/lang/Iterable;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L3f4ea2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3f4ea8.  v2:= temp @kind object;
  #L3f4eaa.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `zipWith`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/Flowable;.zipWith:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f4ebc.  v0:= "other is null" @kind object;
  #L3f4ec0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f4ec6.  call temp:= `zip`(v1, v2, v3) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @kind static;
  #L3f4ecc.  v2:= temp @kind object;
  #L3f4ece.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `zipWith`(`io.reactivex.Flowable` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/Flowable;.zipWith:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3f4ee0.  call temp:= `zip`(v0, v1, v2, v3) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;Z)Lio/reactivex/Flowable;` @kind static;
  #L3f4ee6.  v1:= temp @kind object;
  #L3f4ee8.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `zipWith`(`io.reactivex.Flowable` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.zipWith:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3f4efc.  call temp:= `zip`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;ZI)Lio/reactivex/Flowable;` @kind static;
  #L3f4f02.  v1:= temp @kind object;
  #L3f4f04.  return v1 @kind object;
}
