record `io.reactivex.subjects.BehaviorSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.subjects.Subject` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.BehaviorSubject.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.BehaviorSubject.b` @AccessFlag FINAL;
  `java.util.concurrent.locks.ReadWriteLock` `io.reactivex.subjects.BehaviorSubject.c` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `io.reactivex.subjects.BehaviorSubject.d` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `io.reactivex.subjects.BehaviorSubject.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.BehaviorSubject.f` @AccessFlag FINAL;
  `long` `io.reactivex.subjects.BehaviorSubject.g` @AccessFlag ;
}
global `java.lang.Object`[] `@@io.reactivex.subjects.BehaviorSubject.h` @AccessFlag PRIVATE_STATIC_FINAL;
global `io.reactivex.subjects.BehaviorSubject$a`[] `@@io.reactivex.subjects.BehaviorSubject.i` @AccessFlag STATIC_FINAL;
global `io.reactivex.subjects.BehaviorSubject$a`[] `@@io.reactivex.subjects.BehaviorSubject.j` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/subjects/BehaviorSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f6810.  v0:= 0I;
  #L4f6812.  v1:= new `java.lang.Object`[v0];
  #L4f6816.  `@@io.reactivex.subjects.BehaviorSubject.h` @type ^`java.lang.Object`[] := v1 @kind object;
  #L4f681a.  v1:= new `io.reactivex.subjects.BehaviorSubject$a`[v0];
  #L4f681e.  `@@io.reactivex.subjects.BehaviorSubject.i` @type ^`io.reactivex.subjects.BehaviorSubject$a`[] := v1 @kind object;
  #L4f6822.  v0:= new `io.reactivex.subjects.BehaviorSubject$a`[v0];
  #L4f6826.  `@@io.reactivex.subjects.BehaviorSubject.j` @type ^`io.reactivex.subjects.BehaviorSubject$a`[] := v0 @kind object;
  #L4f682a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subjects.BehaviorSubject` v2 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f683c.  call `<init>`(v2) @signature `Lio/reactivex/subjects/Subject;.<init>:()V` @kind direct;
  #L4f6842.  v0:= new `java.util.concurrent.locks.ReentrantReadWriteLock`;
  #L4f6846.  call `<init>`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.<init>:()V` @kind direct;
  #L4f684c.  v2.`io.reactivex.subjects.BehaviorSubject.c` @type ^`java.util.concurrent.locks.ReadWriteLock` := v0 @kind object;
  #L4f6850.  call temp:= `readLock`(v0) @signature `Ljava/util/concurrent/locks/ReadWriteLock;.readLock:()Ljava/util/concurrent/locks/Lock;` @kind interface;
  #L4f6856.  v1:= temp @kind object;
  #L4f6858.  v2.`io.reactivex.subjects.BehaviorSubject.d` @type ^`java.util.concurrent.locks.Lock` := v1 @kind object;
  #L4f685c.  call temp:= `writeLock`(v0) @signature `Ljava/util/concurrent/locks/ReadWriteLock;.writeLock:()Ljava/util/concurrent/locks/Lock;` @kind interface;
  #L4f6862.  v0:= temp @kind object;
  #L4f6864.  v2.`io.reactivex.subjects.BehaviorSubject.e` @type ^`java.util.concurrent.locks.Lock` := v0 @kind object;
  #L4f6868.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f686c.  v1:= `@@io.reactivex.subjects.BehaviorSubject.i` @type ^`io.reactivex.subjects.BehaviorSubject$a`[] @kind object;
  #L4f6870.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f6876.  v2.`io.reactivex.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4f687a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f687e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f6884.  v2.`io.reactivex.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4f6888.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f688c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f6892.  v2.`io.reactivex.subjects.BehaviorSubject.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4f6896.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subjects.BehaviorSubject` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.<init>:(Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f68a8.  call `<init>`(v2) @signature `Lio/reactivex/subjects/BehaviorSubject;.<init>:()V` @kind direct;
  #L4f68ae.  v0:= v2.`io.reactivex.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f68b2.  v1:= "defaultValue is null" @kind object;
  #L4f68b6.  call temp:= `requireNonNull`(v3, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f68bc.  v3:= temp @kind object;
  #L4f68be.  call `lazySet`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f68c4.  return @kind void;
}
procedure `io.reactivex.subjects.BehaviorSubject` `create`() @signature `Lio/reactivex/subjects/BehaviorSubject;.create:()Lio/reactivex/subjects/BehaviorSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f6660.  v0:= new `io.reactivex.subjects.BehaviorSubject`;
  #L4f6664.  call `<init>`(v0) @signature `Lio/reactivex/subjects/BehaviorSubject;.<init>:()V` @kind direct;
  #L4f666a.  return v0 @kind object;
}
procedure `io.reactivex.subjects.BehaviorSubject` `createDefault`(`java.lang.Object` v1 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.createDefault:(Ljava/lang/Object;)Lio/reactivex/subjects/BehaviorSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f667c.  v0:= new `io.reactivex.subjects.BehaviorSubject`;
  #L4f6680.  call `<init>`(v0, v1) @signature `Lio/reactivex/subjects/BehaviorSubject;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f6686.  return v0 @kind object;
}
procedure `boolean` `d`(`io.reactivex.subjects.BehaviorSubject` v4 @kind this, `io.reactivex.subjects.BehaviorSubject$a` v5 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.d:(Lio/reactivex/subjects/BehaviorSubject$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f654c.  v0:= v4.`io.reactivex.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6550.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f6556.  v0:= temp @kind object;
  #L4f6558.  v0:= (`io.reactivex.subjects.BehaviorSubject$a`[]) v0 @kind object;
  #L4f655c.  v1:= `@@io.reactivex.subjects.BehaviorSubject.j` @type ^`io.reactivex.subjects.BehaviorSubject$a`[] @kind object;
  #L4f6560.  v2:= 0I;
  #L4f6562.  if v0 != v1 then goto L4f6568;
  #L4f6566.  return v2;
  #L4f6568.  v1:= length @variable v0;
  #L4f656a.  v3:= v1 + 1;
  #L4f656e.  v3:= new `io.reactivex.subjects.BehaviorSubject$a`[v3];
  #L4f6572.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f6578.  v3[v1]:= v5 @kind object;
  #L4f657c.  v1:= v4.`io.reactivex.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6580.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f6586.  v0:= temp;
  #L4f6588.  if v0 == 0 then goto L4f654c;
  #L4f658c.  v5:= 1I;
  #L4f658e.  return v5;
}
procedure `void` `e`(`io.reactivex.subjects.BehaviorSubject` v6 @kind this, `io.reactivex.subjects.BehaviorSubject$a` v7 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.e:(Lio/reactivex/subjects/BehaviorSubject$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f6a3c.  v0:= v6.`io.reactivex.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6a40.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f6a46.  v0:= temp @kind object;
  #L4f6a48.  v0:= (`io.reactivex.subjects.BehaviorSubject$a`[]) v0 @kind object;
  #L4f6a4c.  v1:= `@@io.reactivex.subjects.BehaviorSubject.j` @type ^`io.reactivex.subjects.BehaviorSubject$a`[] @kind object;
  #L4f6a50.  if v0 == v1 then goto L4f6abc;
  #L4f6a54.  v1:= `@@io.reactivex.subjects.BehaviorSubject.i` @type ^`io.reactivex.subjects.BehaviorSubject$a`[] @kind object;
  #L4f6a58.  if v0 != v1 then goto L4f6a5e;
  #L4f6a5c.  goto L4f6abc;
  #L4f6a5e.  v1:= length @variable v0;
  #L4f6a60.  v2:= -1I;
  #L4f6a62.  v3:= 0I;
  #L4f6a64.  v4:= 0I;
  #L4f6a66.  if v4 >= v1 then goto L4f6a7c;
  #L4f6a6a.  v5:= v0[v4] @kind object;
  #L4f6a6e.  if v5 != v7 then goto L4f6a76;
  #L4f6a72.  v2:= v4;
  #L4f6a74.  goto L4f6a7c;
  #L4f6a76.  v4:= v4 + 1;
  #L4f6a7a.  goto L4f6a66;
  #L4f6a7c.  if v2 >= 0 then goto L4f6a82;
  #L4f6a80.  return @kind void;
  #L4f6a82.  v4:= 1I;
  #L4f6a84.  if v1 != v4 then goto L4f6a8e;
  #L4f6a88.  v1:= `@@io.reactivex.subjects.BehaviorSubject.i` @type ^`io.reactivex.subjects.BehaviorSubject$a`[] @kind object;
  #L4f6a8c.  goto L4f6aac;
  #L4f6a8e.  v5:= v1 + -1;
  #L4f6a92.  v5:= new `io.reactivex.subjects.BehaviorSubject$a`[v5];
  #L4f6a96.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f6a9c.  v3:= v2 + 1;
  #L4f6aa0.  v1:= v1 - v2 @kind int;
  #L4f6aa2.  v1:= v1 - v4 @kind int;
  #L4f6aa4.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f6aaa.  v1:= v5 @kind object;
  #L4f6aac.  v2:= v6.`io.reactivex.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6ab0.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f6ab6.  v0:= temp;
  #L4f6ab8.  if v0 == 0 then goto L4f6a3c;
  #L4f6abc.  return @kind void;
}
procedure `void` `f`(`io.reactivex.subjects.BehaviorSubject` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.f:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f6ad0.  v0:= v4.`io.reactivex.subjects.BehaviorSubject.e` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4f6ad4.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L4f6ada.  v0:= v4.`io.reactivex.subjects.BehaviorSubject.g` @type ^`long` @kind wide;
  #L4f6ade.  v2:= 1L;
  #L4f6ae2.  v0:= v0 + v2 @kind long;
  #L4f6ae4.  v4.`io.reactivex.subjects.BehaviorSubject.g` @type ^`long` := v0 @kind wide;
  #L4f6ae8.  v0:= v4.`io.reactivex.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6aec.  call `lazySet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f6af2.  v5:= v4.`io.reactivex.subjects.BehaviorSubject.e` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4f6af6.  call `unlock`(v5) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L4f6afc.  return @kind void;
  #L4f6afe.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f6b00.  v0:= v4.`io.reactivex.subjects.BehaviorSubject.e` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4f6b04.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L4f6b0a.  throw v5;
  catch `java.lang.Throwable` @[L4f6ada..L4f6af2] goto L4f6afe;
}
procedure `io.reactivex.subjects.BehaviorSubject$a`[] `g`(`io.reactivex.subjects.BehaviorSubject` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.g:(Ljava/lang/Object;)[Lio/reactivex/subjects/BehaviorSubject$a;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4f6698.  v0:= v2.`io.reactivex.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f669c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f66a2.  v0:= temp @kind object;
  #L4f66a4.  v0:= (`io.reactivex.subjects.BehaviorSubject$a`[]) v0 @kind object;
  #L4f66a8.  v1:= `@@io.reactivex.subjects.BehaviorSubject.j` @type ^`io.reactivex.subjects.BehaviorSubject$a`[] @kind object;
  #L4f66ac.  if v0 == v1 then goto L4f66ca;
  #L4f66b0.  v0:= v2.`io.reactivex.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f66b4.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f66ba.  v0:= temp @kind object;
  #L4f66bc.  v0:= (`io.reactivex.subjects.BehaviorSubject$a`[]) v0 @kind object;
  #L4f66c0.  if v0 == v1 then goto L4f66ca;
  #L4f66c4.  call `f`(v2, v3) @signature `Lio/reactivex/subjects/BehaviorSubject;.f:(Ljava/lang/Object;)V` @kind virtual;
  #L4f66ca.  return v0 @kind object;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.subjects.BehaviorSubject` v2 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f67d8.  v0:= v2.`io.reactivex.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f67dc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f67e2.  v0:= temp @kind object;
  #L4f67e4.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4f67ea.  v1:= temp;
  #L4f67ec.  if v1 == 0 then goto L4f67fa;
  #L4f67f0.  call temp:= `getError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L4f67f6.  v0:= temp @kind object;
  #L4f67f8.  return v0 @kind object;
  #L4f67fa.  v0:= 0I;
  #L4f67fc.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.subjects.BehaviorSubject` v2 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f66dc.  v0:= v2.`io.reactivex.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f66e0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f66e6.  v0:= temp @kind object;
  #L4f66e8.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4f66ee.  v1:= temp;
  #L4f66f0.  if v1 != 0 then goto L4f670c;
  #L4f66f4.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4f66fa.  v1:= temp;
  #L4f66fc.  if v1 == 0 then goto L4f6702;
  #L4f6700.  goto L4f670c;
  #L4f6702.  call temp:= `getValue`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4f6708.  v0:= temp @kind object;
  #L4f670a.  return v0 @kind object;
  #L4f670c.  v0:= 0I;
  #L4f670e.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.subjects.BehaviorSubject` v2 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject;.getValues:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f6720.  v0:= `@@io.reactivex.subjects.BehaviorSubject.h` @type ^`java.lang.Object`[] @kind object;
  #L4f6724.  call temp:= `getValues`(v2, v0) @signature `Lio/reactivex/subjects/BehaviorSubject;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L4f672a.  v1:= temp @kind object;
  #L4f672c.  if v1 != v0 then goto L4f6738;
  #L4f6730.  v0:= 0I;
  #L4f6732.  v0:= new `java.lang.Object`[v0];
  #L4f6736.  return v0 @kind object;
  #L4f6738.  return v1 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.subjects.BehaviorSubject` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f674c.  v0:= v5.`io.reactivex.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6750.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f6756.  v0:= temp @kind object;
  #L4f6758.  v1:= 0I;
  #L4f675a.  v2:= 0I;
  #L4f675c.  if v0 == 0 then goto L4f67bc;
  #L4f6760.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4f6766.  v3:= temp;
  #L4f6768.  if v3 != 0 then goto L4f67bc;
  #L4f676c.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4f6772.  v3:= temp;
  #L4f6774.  if v3 == 0 then goto L4f677a;
  #L4f6778.  goto L4f67bc;
  #L4f677a.  call temp:= `getValue`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4f6780.  v0:= temp @kind object;
  #L4f6782.  v3:= length @variable v6;
  #L4f6784.  v4:= 1I;
  #L4f6786.  if v3 == 0 then goto L4f679a;
  #L4f678a.  v6[v2]:= v0 @kind object;
  #L4f678e.  v0:= length @variable v6;
  #L4f6790.  if v0 == v4 then goto L4f67ba;
  #L4f6794.  v6[v4]:= v1 @kind object;
  #L4f6798.  goto L4f67ba;
  #L4f679a.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4f67a0.  v6:= temp @kind object;
  #L4f67a2.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L4f67a8.  v6:= temp @kind object;
  #L4f67aa.  call temp:= `newInstance`(v6, v4) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L4f67b0.  v6:= temp @kind object;
  #L4f67b2.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L4f67b6.  v6[v2]:= v0 @kind object;
  #L4f67ba.  return v6 @kind object;
  #L4f67bc.  v0:= length @variable v6;
  #L4f67be.  if v0 == 0 then goto L4f67c6;
  #L4f67c2.  v6[v2]:= v1 @kind object;
  #L4f67c6.  return v6 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.subjects.BehaviorSubject` v1 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f65a0.  v0:= v1.`io.reactivex.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f65a4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f65aa.  v0:= temp @kind object;
  #L4f65ac.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4f65b2.  v0:= temp;
  #L4f65b4.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.subjects.BehaviorSubject` v1 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f65c8.  v0:= v1.`io.reactivex.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f65cc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f65d2.  v0:= temp @kind object;
  #L4f65d4.  v0:= (`io.reactivex.subjects.BehaviorSubject$a`[]) v0 @kind object;
  #L4f65d8.  v0:= length @variable v0;
  #L4f65da.  if v0 == 0 then goto L4f65e2;
  #L4f65de.  v0:= 1I;
  #L4f65e0.  goto L4f65e4;
  #L4f65e2.  v0:= 0I;
  #L4f65e4.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.subjects.BehaviorSubject` v1 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f65f8.  v0:= v1.`io.reactivex.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f65fc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f6602.  v0:= temp @kind object;
  #L4f6604.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4f660a.  v0:= temp;
  #L4f660c.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.subjects.BehaviorSubject` v2 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f6620.  v0:= v2.`io.reactivex.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6624.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f662a.  v0:= temp @kind object;
  #L4f662c.  if v0 == 0 then goto L4f664c;
  #L4f6630.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4f6636.  v1:= temp;
  #L4f6638.  if v1 != 0 then goto L4f664c;
  #L4f663c.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4f6642.  v0:= temp;
  #L4f6644.  if v0 != 0 then goto L4f664c;
  #L4f6648.  v0:= 1I;
  #L4f664a.  goto L4f664e;
  #L4f664c.  v0:= 0I;
  #L4f664e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.subjects.BehaviorSubject` v7 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4f68d8.  v0:= v7.`io.reactivex.subjects.BehaviorSubject.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f68dc.  v1:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L4f68e0.  v2:= 0I;
  #L4f68e2.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f68e8.  v0:= temp;
  #L4f68ea.  if v0 != 0 then goto L4f68f0;
  #L4f68ee.  return @kind void;
  #L4f68f0.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L4f68f6.  v0:= temp @kind object;
  #L4f68f8.  call temp:= `g`(v7, v0) @signature `Lio/reactivex/subjects/BehaviorSubject;.g:(Ljava/lang/Object;)[Lio/reactivex/subjects/BehaviorSubject$a;` @kind virtual;
  #L4f68fe.  v1:= temp @kind object;
  #L4f6900.  v2:= length @variable v1;
  #L4f6902.  v3:= 0I;
  #L4f6904.  if v3 >= v2 then goto L4f691c;
  #L4f6908.  v4:= v1[v3] @kind object;
  #L4f690c.  v5:= v7.`io.reactivex.subjects.BehaviorSubject.g` @type ^`long` @kind wide;
  #L4f6910.  call `c`(v4, v0, v5) @signature `Lio/reactivex/subjects/BehaviorSubject$a;.c:(Ljava/lang/Object;J)V` @kind virtual;
  #L4f6916.  v3:= v3 + 1;
  #L4f691a.  goto L4f6904;
  #L4f691c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.subjects.BehaviorSubject` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f6930.  if v7 != 0 then goto L4f6942;
  #L4f6934.  v7:= new `java.lang.NullPointerException`;
  #L4f6938.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L4f693c.  call `<init>`(v7, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f6942.  v0:= v6.`io.reactivex.subjects.BehaviorSubject.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6946.  v1:= 0I;
  #L4f6948.  call temp:= `compareAndSet`(v0, v1, v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f694e.  v0:= temp;
  #L4f6950.  if v0 != 0 then goto L4f695c;
  #L4f6954.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f695a.  return @kind void;
  #L4f695c.  call temp:= `error`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L4f6962.  v7:= temp @kind object;
  #L4f6964.  call temp:= `g`(v6, v7) @signature `Lio/reactivex/subjects/BehaviorSubject;.g:(Ljava/lang/Object;)[Lio/reactivex/subjects/BehaviorSubject$a;` @kind virtual;
  #L4f696a.  v0:= temp @kind object;
  #L4f696c.  v1:= length @variable v0;
  #L4f696e.  v2:= 0I;
  #L4f6970.  if v2 >= v1 then goto L4f6988;
  #L4f6974.  v3:= v0[v2] @kind object;
  #L4f6978.  v4:= v6.`io.reactivex.subjects.BehaviorSubject.g` @type ^`long` @kind wide;
  #L4f697c.  call `c`(v3, v7, v4) @signature `Lio/reactivex/subjects/BehaviorSubject$a;.c:(Ljava/lang/Object;J)V` @kind virtual;
  #L4f6982.  v2:= v2 + 1;
  #L4f6986.  goto L4f6970;
  #L4f6988.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.subjects.BehaviorSubject` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f699c.  if v7 != 0 then goto L4f69b6;
  #L4f69a0.  v7:= new `java.lang.NullPointerException`;
  #L4f69a4.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L4f69a8.  call `<init>`(v7, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f69ae.  call `onError`(v6, v7) @signature `Lio/reactivex/subjects/BehaviorSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4f69b4.  return @kind void;
  #L4f69b6.  v0:= v6.`io.reactivex.subjects.BehaviorSubject.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f69ba.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f69c0.  v0:= temp @kind object;
  #L4f69c2.  if v0 == 0 then goto L4f69c8;
  #L4f69c6.  return @kind void;
  #L4f69c8.  call temp:= `next`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4f69ce.  v7:= temp @kind object;
  #L4f69d0.  call `f`(v6, v7) @signature `Lio/reactivex/subjects/BehaviorSubject;.f:(Ljava/lang/Object;)V` @kind virtual;
  #L4f69d6.  v0:= v6.`io.reactivex.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f69da.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f69e0.  v0:= temp @kind object;
  #L4f69e2.  v0:= (`io.reactivex.subjects.BehaviorSubject$a`[]) v0 @kind object;
  #L4f69e6.  v1:= length @variable v0;
  #L4f69e8.  v2:= 0I;
  #L4f69ea.  if v2 >= v1 then goto L4f6a02;
  #L4f69ee.  v3:= v0[v2] @kind object;
  #L4f69f2.  v4:= v6.`io.reactivex.subjects.BehaviorSubject.g` @type ^`long` @kind wide;
  #L4f69f6.  call `c`(v3, v7, v4) @signature `Lio/reactivex/subjects/BehaviorSubject$a;.c:(Ljava/lang/Object;J)V` @kind virtual;
  #L4f69fc.  v2:= v2 + 1;
  #L4f6a00.  goto L4f69ea;
  #L4f6a02.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subjects.BehaviorSubject` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6a14.  v0:= v1.`io.reactivex.subjects.BehaviorSubject.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6a18.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f6a1e.  v0:= temp @kind object;
  #L4f6a20.  if v0 == 0 then goto L4f6a2a;
  #L4f6a24.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f6a2a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.subjects.BehaviorSubject` v2 @kind this, `io.reactivex.Observer` v3 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4f6b28.  v0:= new `io.reactivex.subjects.BehaviorSubject$a`;
  #L4f6b2c.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/subjects/BehaviorSubject$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/subjects/BehaviorSubject;)V` @kind direct;
  #L4f6b32.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4f6b38.  call temp:= `d`(v2, v0) @signature `Lio/reactivex/subjects/BehaviorSubject;.d:(Lio/reactivex/subjects/BehaviorSubject$a;)Z` @kind virtual;
  #L4f6b3e.  v1:= temp;
  #L4f6b40.  if v1 == 0 then goto L4f6b5c;
  #L4f6b44.  v3:= v0.`io.reactivex.subjects.BehaviorSubject$a.g` @type ^`boolean` @kind boolean;
  #L4f6b48.  if v3 == 0 then goto L4f6b54;
  #L4f6b4c.  call `e`(v2, v0) @signature `Lio/reactivex/subjects/BehaviorSubject;.e:(Lio/reactivex/subjects/BehaviorSubject$a;)V` @kind virtual;
  #L4f6b52.  goto L4f6b82;
  #L4f6b54.  call `a`(v0) @signature `Lio/reactivex/subjects/BehaviorSubject$a;.a:()V` @kind virtual;
  #L4f6b5a.  goto L4f6b82;
  #L4f6b5c.  v0:= v2.`io.reactivex.subjects.BehaviorSubject.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6b60.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f6b66.  v0:= temp @kind object;
  #L4f6b68.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L4f6b6c.  v1:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L4f6b70.  if v0 != v1 then goto L4f6b7c;
  #L4f6b74.  call `onComplete`(v3) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4f6b7a.  goto L4f6b82;
  #L4f6b7c.  call `onError`(v3, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f6b82.  return @kind void;
}
