record `io.reactivex.subjects.ReplaySubject$d` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.subjects.ReplaySubject$b` @kind interface {
  `int` `io.reactivex.subjects.ReplaySubject$d.a` @AccessFlag FINAL;
  `long` `io.reactivex.subjects.ReplaySubject$d.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.subjects.ReplaySubject$d.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.subjects.ReplaySubject$d.d` @AccessFlag FINAL;
  `int` `io.reactivex.subjects.ReplaySubject$d.e` @AccessFlag ;
  `io.reactivex.subjects.ReplaySubject$f` `io.reactivex.subjects.ReplaySubject$d.f` @AccessFlag VOLATILE;
  `io.reactivex.subjects.ReplaySubject$f` `io.reactivex.subjects.ReplaySubject$d.g` @AccessFlag ;
  `boolean` `io.reactivex.subjects.ReplaySubject$d.h` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.subjects.ReplaySubject$d.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.ReplaySubject$d` v1 @kind this, `int` v2 , `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$d;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4f7b1c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f7b22.  v0:= "maxSize" @kind object;
  #L4f7b26.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4f7b2c.  v2:= temp;
  #L4f7b2e.  v1.`io.reactivex.subjects.ReplaySubject$d.a` @type ^`int` := v2;
  #L4f7b32.  v2:= "maxAge" @kind object;
  #L4f7b36.  call temp:= `verifyPositive`(v3, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L4f7b3c.  v2:= temp @kind wide;
  #L4f7b3e.  v1.`io.reactivex.subjects.ReplaySubject$d.b` @type ^`long` := v2 @kind wide;
  #L4f7b42.  v2:= "unit is null" @kind object;
  #L4f7b46.  call temp:= `requireNonNull`(v5, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f7b4c.  v2:= temp @kind object;
  #L4f7b4e.  v2:= (`java.util.concurrent.TimeUnit`) v2 @kind object;
  #L4f7b52.  v1.`io.reactivex.subjects.ReplaySubject$d.c` @type ^`java.util.concurrent.TimeUnit` := v2 @kind object;
  #L4f7b56.  v2:= "scheduler is null" @kind object;
  #L4f7b5a.  call temp:= `requireNonNull`(v6, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f7b60.  v2:= temp @kind object;
  #L4f7b62.  v2:= (`io.reactivex.Scheduler`) v2 @kind object;
  #L4f7b66.  v1.`io.reactivex.subjects.ReplaySubject$d.d` @type ^`io.reactivex.Scheduler` := v2 @kind object;
  #L4f7b6a.  v2:= new `io.reactivex.subjects.ReplaySubject$f`;
  #L4f7b6e.  v3:= 0I;
  #L4f7b70.  v4:= 0L;
  #L4f7b74.  call `<init>`(v2, v3, v4) @signature `Lio/reactivex/subjects/ReplaySubject$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L4f7b7a.  v1.`io.reactivex.subjects.ReplaySubject$d.g` @type ^`io.reactivex.subjects.ReplaySubject$f` := v2 @kind object;
  #L4f7b7e.  v1.`io.reactivex.subjects.ReplaySubject$d.f` @type ^`io.reactivex.subjects.ReplaySubject$f` := v2 @kind object;
  #L4f7b82.  return @kind void;
}
procedure `void` `a`(`io.reactivex.subjects.ReplaySubject$d` v7 @kind this, `io.reactivex.subjects.ReplaySubject$c` v8 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$d;.a:(Lio/reactivex/subjects/ReplaySubject$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4f7c2c.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f7c32.  v0:= temp;
  #L4f7c34.  if v0 == 0 then goto L4f7c3a;
  #L4f7c38.  return @kind void;
  #L4f7c3a.  v0:= v8.`io.reactivex.subjects.ReplaySubject$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L4f7c3e.  v1:= v8.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` @kind object;
  #L4f7c42.  v1:= (`io.reactivex.subjects.ReplaySubject$f`) v1 @kind object;
  #L4f7c46.  v2:= 1I;
  #L4f7c48.  if v1 != 0 then goto L4f7c54;
  #L4f7c4c.  call temp:= `b`(v7) @signature `Lio/reactivex/subjects/ReplaySubject$d;.b:()Lio/reactivex/subjects/ReplaySubject$f;` @kind virtual;
  #L4f7c52.  v1:= temp @kind object;
  #L4f7c54.  v3:= 1I;
  #L4f7c56.  v4:= v8.`io.reactivex.subjects.ReplaySubject$c.d` @type ^`boolean` @kind boolean;
  #L4f7c5a.  v5:= 0I;
  #L4f7c5c.  if v4 == 0 then goto L4f7c66;
  #L4f7c60.  v8.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v5 @kind object;
  #L4f7c64.  return @kind void;
  #L4f7c66.  v4:= v8.`io.reactivex.subjects.ReplaySubject$c.d` @type ^`boolean` @kind boolean;
  #L4f7c6a.  if v4 == 0 then goto L4f7c74;
  #L4f7c6e.  v8.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v5 @kind object;
  #L4f7c72.  return @kind void;
  #L4f7c74.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f7c7a.  v4:= temp @kind object;
  #L4f7c7c.  v4:= (`io.reactivex.subjects.ReplaySubject$f`) v4 @kind object;
  #L4f7c80.  if v4 != 0 then goto L4f7ca6;
  #L4f7c84.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f7c8a.  v4:= temp @kind object;
  #L4f7c8c.  if v4 == 0 then goto L4f7c92;
  #L4f7c90.  goto L4f7c56;
  #L4f7c92.  v8.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4f7c96.  v3:= -v3 @kind int;
  #L4f7c98.  call temp:= `addAndGet`(v8, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4f7c9e.  v3:= temp;
  #L4f7ca0.  if v3 != 0 then goto L4f7c56;
  #L4f7ca4.  return @kind void;
  #L4f7ca6.  v1:= v4.`io.reactivex.subjects.ReplaySubject$f.a` @type ^`java.lang.Object` @kind object;
  #L4f7caa.  v6:= v7.`io.reactivex.subjects.ReplaySubject$d.h` @type ^`boolean` @kind boolean;
  #L4f7cae.  if v6 == 0 then goto L4f7cea;
  #L4f7cb2.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f7cb8.  v6:= temp @kind object;
  #L4f7cba.  if v6 != 0 then goto L4f7cea;
  #L4f7cbe.  call temp:= `isComplete`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4f7cc4.  v3:= temp;
  #L4f7cc6.  if v3 == 0 then goto L4f7cd2;
  #L4f7cca.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4f7cd0.  goto L4f7ce0;
  #L4f7cd2.  call temp:= `getError`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L4f7cd8.  v1:= temp @kind object;
  #L4f7cda.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f7ce0.  v8.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v5 @kind object;
  #L4f7ce4.  v8.`io.reactivex.subjects.ReplaySubject$c.d` @type ^`boolean` := v2 @kind boolean;
  #L4f7ce8.  return @kind void;
  #L4f7cea.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f7cf0.  v1:= v4 @kind object;
  #L4f7cf2.  goto L4f7c66;
}
procedure `void` `add`(`io.reactivex.subjects.ReplaySubject$d` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$d;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f7b94.  v0:= new `io.reactivex.subjects.ReplaySubject$f`;
  #L4f7b98.  v1:= v3.`io.reactivex.subjects.ReplaySubject$d.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L4f7b9c.  v2:= v3.`io.reactivex.subjects.ReplaySubject$d.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4f7ba0.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4f7ba6.  v1:= temp @kind wide;
  #L4f7ba8.  call `<init>`(v0, v4, v1) @signature `Lio/reactivex/subjects/ReplaySubject$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L4f7bae.  v4:= v3.`io.reactivex.subjects.ReplaySubject$d.g` @type ^`io.reactivex.subjects.ReplaySubject$f` @kind object;
  #L4f7bb2.  v3.`io.reactivex.subjects.ReplaySubject$d.g` @type ^`io.reactivex.subjects.ReplaySubject$f` := v0 @kind object;
  #L4f7bb6.  v1:= v3.`io.reactivex.subjects.ReplaySubject$d.e` @type ^`int`;
  #L4f7bba.  v1:= v1 + 1;
  #L4f7bbe.  v3.`io.reactivex.subjects.ReplaySubject$d.e` @type ^`int` := v1;
  #L4f7bc2.  call `set`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4f7bc8.  call `f`(v3) @signature `Lio/reactivex/subjects/ReplaySubject$d;.f:()V` @kind virtual;
  #L4f7bce.  return @kind void;
}
procedure `io.reactivex.subjects.ReplaySubject$f` `b`(`io.reactivex.subjects.ReplaySubject$d` v8 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$d;.b:()Lio/reactivex/subjects/ReplaySubject$f;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4f79e0.  v0:= v8.`io.reactivex.subjects.ReplaySubject$d.f` @type ^`io.reactivex.subjects.ReplaySubject$f` @kind object;
  #L4f79e4.  v1:= v8.`io.reactivex.subjects.ReplaySubject$d.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L4f79e8.  v2:= v8.`io.reactivex.subjects.ReplaySubject$d.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4f79ec.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4f79f2.  v1:= temp @kind wide;
  #L4f79f4.  v3:= v8.`io.reactivex.subjects.ReplaySubject$d.b` @type ^`long` @kind wide;
  #L4f79f8.  v1:= v1 - v3 @kind long;
  #L4f79fa.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f7a00.  v3:= temp @kind object;
  #L4f7a02.  v3:= (`io.reactivex.subjects.ReplaySubject$f`) v3 @kind object;
  #L4f7a06.  v7:= v3 @kind object;
  #L4f7a08.  v3:= v0 @kind object;
  #L4f7a0a.  v0:= v7 @kind object;
  #L4f7a0c.  if v0 == 0 then goto L4f7a2c;
  #L4f7a10.  v4:= v0.`io.reactivex.subjects.ReplaySubject$f.b` @type ^`long` @kind wide;
  #L4f7a14.  v6:= lcmp(v4, v1);
  #L4f7a18.  if v6 <= 0 then goto L4f7a1e;
  #L4f7a1c.  goto L4f7a2c;
  #L4f7a1e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f7a24.  v3:= temp @kind object;
  #L4f7a26.  v3:= (`io.reactivex.subjects.ReplaySubject$f`) v3 @kind object;
  #L4f7a2a.  goto L4f7a06;
  #L4f7a2c.  return v3 @kind object;
}
procedure `java.lang.Object`[] `c`(`io.reactivex.subjects.ReplaySubject$d` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$d;.c:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f7a9c.  call temp:= `b`(v5) @signature `Lio/reactivex/subjects/ReplaySubject$d;.b:()Lio/reactivex/subjects/ReplaySubject$f;` @kind virtual;
  #L4f7aa2.  v0:= temp @kind object;
  #L4f7aa4.  call temp:= `e`(v5, v0) @signature `Lio/reactivex/subjects/ReplaySubject$d;.e:(Lio/reactivex/subjects/ReplaySubject$f;)I` @kind virtual;
  #L4f7aaa.  v1:= temp;
  #L4f7aac.  v2:= 0I;
  #L4f7aae.  v3:= 0I;
  #L4f7ab0.  if v1 != 0 then goto L4f7ac0;
  #L4f7ab4.  v0:= length @variable v6;
  #L4f7ab6.  if v0 == 0 then goto L4f7b0a;
  #L4f7aba.  v6[v3]:= v2 @kind object;
  #L4f7abe.  goto L4f7b0a;
  #L4f7ac0.  v4:= length @variable v6;
  #L4f7ac2.  if v4 >= v1 then goto L4f7ae2;
  #L4f7ac6.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4f7acc.  v6:= temp @kind object;
  #L4f7ace.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L4f7ad4.  v6:= temp @kind object;
  #L4f7ad6.  call temp:= `newInstance`(v6, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L4f7adc.  v6:= temp @kind object;
  #L4f7ade.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L4f7ae2.  if v3 == v1 then goto L4f7b00;
  #L4f7ae6.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f7aec.  v0:= temp @kind object;
  #L4f7aee.  v0:= (`io.reactivex.subjects.ReplaySubject$f`) v0 @kind object;
  #L4f7af2.  v4:= v0.`io.reactivex.subjects.ReplaySubject$f.a` @type ^`java.lang.Object` @kind object;
  #L4f7af6.  v6[v3]:= v4 @kind object;
  #L4f7afa.  v3:= v3 + 1;
  #L4f7afe.  goto L4f7ae2;
  #L4f7b00.  v0:= length @variable v6;
  #L4f7b02.  if v0 <= v1 then goto L4f7b0a;
  #L4f7b06.  v6[v1]:= v2 @kind object;
  #L4f7b0a.  return v6 @kind object;
}
procedure `void` `d`(`io.reactivex.subjects.ReplaySubject$d` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$d;.d:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f7be0.  v0:= new `io.reactivex.subjects.ReplaySubject$f`;
  #L4f7be4.  v1:= 9223372036854775807L;
  #L4f7bee.  call `<init>`(v0, v4, v1) @signature `Lio/reactivex/subjects/ReplaySubject$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L4f7bf4.  v4:= v3.`io.reactivex.subjects.ReplaySubject$d.g` @type ^`io.reactivex.subjects.ReplaySubject$f` @kind object;
  #L4f7bf8.  v3.`io.reactivex.subjects.ReplaySubject$d.g` @type ^`io.reactivex.subjects.ReplaySubject$f` := v0 @kind object;
  #L4f7bfc.  v1:= v3.`io.reactivex.subjects.ReplaySubject$d.e` @type ^`int`;
  #L4f7c00.  v2:= 1I;
  #L4f7c02.  v1:= v1 + v2 @kind int;
  #L4f7c04.  v3.`io.reactivex.subjects.ReplaySubject$d.e` @type ^`int` := v1;
  #L4f7c08.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f7c0e.  call `g`(v3) @signature `Lio/reactivex/subjects/ReplaySubject$d;.g:()V` @kind virtual;
  #L4f7c14.  v3.`io.reactivex.subjects.ReplaySubject$d.h` @type ^`boolean` := v2 @kind boolean;
  #L4f7c18.  return @kind void;
}
procedure `int` `e`(`io.reactivex.subjects.ReplaySubject$d` v2 @kind this, `io.reactivex.subjects.ReplaySubject$f` v3 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$d;.e:(Lio/reactivex/subjects/ReplaySubject$f;)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4f7988.  v0:= 0I;
  #L4f798a.  v1:= 2147483647I;
  #L4f7990.  if v0 == v1 then goto L4f79ce;
  #L4f7994.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f799a.  v1:= temp @kind object;
  #L4f799c.  v1:= (`io.reactivex.subjects.ReplaySubject$f`) v1 @kind object;
  #L4f79a0.  if v1 != 0 then goto L4f79c6;
  #L4f79a4.  v3:= v3.`io.reactivex.subjects.ReplaySubject$f.a` @type ^`java.lang.Object` @kind object;
  #L4f79a8.  call temp:= `isComplete`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4f79ae.  v1:= temp;
  #L4f79b0.  if v1 != 0 then goto L4f79c0;
  #L4f79b4.  call temp:= `isError`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4f79ba.  v3:= temp;
  #L4f79bc.  if v3 == 0 then goto L4f79ce;
  #L4f79c0.  v0:= v0 + -1;
  #L4f79c4.  goto L4f79ce;
  #L4f79c6.  v0:= v0 + 1;
  #L4f79ca.  v3:= v1 @kind object;
  #L4f79cc.  goto L4f798a;
  #L4f79ce.  return v0;
}
procedure `void` `f`(`io.reactivex.subjects.ReplaySubject$d` v7 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$d;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4f7d04.  v0:= v7.`io.reactivex.subjects.ReplaySubject$d.e` @type ^`int`;
  #L4f7d08.  v1:= v7.`io.reactivex.subjects.ReplaySubject$d.a` @type ^`int`;
  #L4f7d0c.  if v0 <= v1 then goto L4f7d2c;
  #L4f7d10.  v0:= v0 + -1;
  #L4f7d14.  v7.`io.reactivex.subjects.ReplaySubject$d.e` @type ^`int` := v0;
  #L4f7d18.  v0:= v7.`io.reactivex.subjects.ReplaySubject$d.f` @type ^`io.reactivex.subjects.ReplaySubject$f` @kind object;
  #L4f7d1c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f7d22.  v0:= temp @kind object;
  #L4f7d24.  v0:= (`io.reactivex.subjects.ReplaySubject$f`) v0 @kind object;
  #L4f7d28.  v7.`io.reactivex.subjects.ReplaySubject$d.f` @type ^`io.reactivex.subjects.ReplaySubject$f` := v0 @kind object;
  #L4f7d2c.  v0:= v7.`io.reactivex.subjects.ReplaySubject$d.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L4f7d30.  v1:= v7.`io.reactivex.subjects.ReplaySubject$d.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4f7d34.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4f7d3a.  v0:= temp @kind wide;
  #L4f7d3c.  v2:= v7.`io.reactivex.subjects.ReplaySubject$d.b` @type ^`long` @kind wide;
  #L4f7d40.  v0:= v0 - v2 @kind long;
  #L4f7d42.  v2:= v7.`io.reactivex.subjects.ReplaySubject$d.f` @type ^`io.reactivex.subjects.ReplaySubject$f` @kind object;
  #L4f7d46.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f7d4c.  v3:= temp @kind object;
  #L4f7d4e.  v3:= (`io.reactivex.subjects.ReplaySubject$f`) v3 @kind object;
  #L4f7d52.  if v3 != 0 then goto L4f7d5c;
  #L4f7d56.  v7.`io.reactivex.subjects.ReplaySubject$d.f` @type ^`io.reactivex.subjects.ReplaySubject$f` := v2 @kind object;
  #L4f7d5a.  goto L4f7d6c;
  #L4f7d5c.  v4:= v3.`io.reactivex.subjects.ReplaySubject$f.b` @type ^`long` @kind wide;
  #L4f7d60.  v6:= lcmp(v4, v0);
  #L4f7d64.  if v6 <= 0 then goto L4f7d6e;
  #L4f7d68.  v7.`io.reactivex.subjects.ReplaySubject$d.f` @type ^`io.reactivex.subjects.ReplaySubject$f` := v2 @kind object;
  #L4f7d6c.  return @kind void;
  #L4f7d6e.  v2:= v3 @kind object;
  #L4f7d70.  goto L4f7d46;
}
procedure `void` `g`(`io.reactivex.subjects.ReplaySubject$d` v7 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$d;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4f7d84.  v0:= v7.`io.reactivex.subjects.ReplaySubject$d.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L4f7d88.  v1:= v7.`io.reactivex.subjects.ReplaySubject$d.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4f7d8c.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4f7d92.  v0:= temp @kind wide;
  #L4f7d94.  v2:= v7.`io.reactivex.subjects.ReplaySubject$d.b` @type ^`long` @kind wide;
  #L4f7d98.  v0:= v0 - v2 @kind long;
  #L4f7d9a.  v2:= v7.`io.reactivex.subjects.ReplaySubject$d.f` @type ^`io.reactivex.subjects.ReplaySubject$f` @kind object;
  #L4f7d9e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f7da4.  v3:= temp @kind object;
  #L4f7da6.  v3:= (`io.reactivex.subjects.ReplaySubject$f`) v3 @kind object;
  #L4f7daa.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f7db0.  v4:= temp @kind object;
  #L4f7db2.  if v4 != 0 then goto L4f7dbc;
  #L4f7db6.  v7.`io.reactivex.subjects.ReplaySubject$d.f` @type ^`io.reactivex.subjects.ReplaySubject$f` := v2 @kind object;
  #L4f7dba.  goto L4f7dcc;
  #L4f7dbc.  v4:= v3.`io.reactivex.subjects.ReplaySubject$f.b` @type ^`long` @kind wide;
  #L4f7dc0.  v6:= lcmp(v4, v0);
  #L4f7dc4.  if v6 <= 0 then goto L4f7dce;
  #L4f7dc8.  v7.`io.reactivex.subjects.ReplaySubject$d.f` @type ^`io.reactivex.subjects.ReplaySubject$f` := v2 @kind object;
  #L4f7dcc.  return @kind void;
  #L4f7dce.  v2:= v3 @kind object;
  #L4f7dd0.  goto L4f7d9e;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.subjects.ReplaySubject$d` v4 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$d;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f7a40.  v0:= v4.`io.reactivex.subjects.ReplaySubject$d.f` @type ^`io.reactivex.subjects.ReplaySubject$f` @kind object;
  #L4f7a44.  v1:= 0I;
  #L4f7a46.  v2:= v1 @kind object;
  #L4f7a48.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f7a4e.  v3:= temp @kind object;
  #L4f7a50.  v3:= (`io.reactivex.subjects.ReplaySubject$f`) v3 @kind object;
  #L4f7a54.  if v3 != 0 then goto L4f7a84;
  #L4f7a58.  v0:= v0.`io.reactivex.subjects.ReplaySubject$f.a` @type ^`java.lang.Object` @kind object;
  #L4f7a5c.  if v0 != 0 then goto L4f7a62;
  #L4f7a60.  return v1 @kind object;
  #L4f7a62.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4f7a68.  v1:= temp;
  #L4f7a6a.  if v1 != 0 then goto L4f7a7e;
  #L4f7a6e.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4f7a74.  v1:= temp;
  #L4f7a76.  if v1 == 0 then goto L4f7a7c;
  #L4f7a7a.  goto L4f7a7e;
  #L4f7a7c.  return v0 @kind object;
  #L4f7a7e.  v0:= v2.`io.reactivex.subjects.ReplaySubject$f.a` @type ^`java.lang.Object` @kind object;
  #L4f7a82.  return v0 @kind object;
  #L4f7a84.  v2:= v0 @kind object;
  #L4f7a86.  v0:= v3 @kind object;
  #L4f7a88.  goto L4f7a48;
}
procedure `int` `size`(`io.reactivex.subjects.ReplaySubject$d` v1 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$d;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f7964.  call temp:= `b`(v1) @signature `Lio/reactivex/subjects/ReplaySubject$d;.b:()Lio/reactivex/subjects/ReplaySubject$f;` @kind virtual;
  #L4f796a.  v0:= temp @kind object;
  #L4f796c.  call temp:= `e`(v1, v0) @signature `Lio/reactivex/subjects/ReplaySubject$d;.e:(Lio/reactivex/subjects/ReplaySubject$f;)I` @kind virtual;
  #L4f7972.  v0:= temp;
  #L4f7974.  return v0;
}
