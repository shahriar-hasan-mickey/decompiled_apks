record `io.reactivex.subjects.MaybeSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class, `io.reactivex.MaybeObserver` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.MaybeSubject.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.subjects.MaybeSubject.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.subjects.MaybeSubject.c` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.subjects.MaybeSubject.d` @AccessFlag ;
}
global `io.reactivex.subjects.MaybeSubject$a`[] `@@io.reactivex.subjects.MaybeSubject.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.subjects.MaybeSubject$a`[] `@@io.reactivex.subjects.MaybeSubject.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/subjects/MaybeSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f7184.  v0:= 0I;
  #L4f7186.  v1:= new `io.reactivex.subjects.MaybeSubject$a`[v0];
  #L4f718a.  `@@io.reactivex.subjects.MaybeSubject.e` @type ^`io.reactivex.subjects.MaybeSubject$a`[] := v1 @kind object;
  #L4f718e.  v0:= new `io.reactivex.subjects.MaybeSubject$a`[v0];
  #L4f7192.  `@@io.reactivex.subjects.MaybeSubject.f` @type ^`io.reactivex.subjects.MaybeSubject$a`[] := v0 @kind object;
  #L4f7196.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f71a8.  call `<init>`(v2) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L4f71ae.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4f71b2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4f71b8.  v2.`io.reactivex.subjects.MaybeSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L4f71bc.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f71c0.  v1:= `@@io.reactivex.subjects.MaybeSubject.e` @type ^`io.reactivex.subjects.MaybeSubject$a`[] @kind object;
  #L4f71c4.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f71ca.  v2.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4f71ce.  return @kind void;
}
procedure `io.reactivex.subjects.MaybeSubject` `create`() @signature `Lio/reactivex/subjects/MaybeSubject;.create:()Lio/reactivex/subjects/MaybeSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f7108.  v0:= new `io.reactivex.subjects.MaybeSubject`;
  #L4f710c.  call `<init>`(v0) @signature `Lio/reactivex/subjects/MaybeSubject;.<init>:()V` @kind direct;
  #L4f7112.  return v0 @kind object;
}
procedure `boolean` `a`(`io.reactivex.subjects.MaybeSubject` v4 @kind this, `io.reactivex.subjects.MaybeSubject$a` v5 @kind object) @signature `Lio/reactivex/subjects/MaybeSubject;.a:(Lio/reactivex/subjects/MaybeSubject$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f6fe0.  v0:= v4.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6fe4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f6fea.  v0:= temp @kind object;
  #L4f6fec.  v0:= (`io.reactivex.subjects.MaybeSubject$a`[]) v0 @kind object;
  #L4f6ff0.  v1:= `@@io.reactivex.subjects.MaybeSubject.f` @type ^`io.reactivex.subjects.MaybeSubject$a`[] @kind object;
  #L4f6ff4.  v2:= 0I;
  #L4f6ff6.  if v0 != v1 then goto L4f6ffc;
  #L4f6ffa.  return v2;
  #L4f6ffc.  v1:= length @variable v0;
  #L4f6ffe.  v3:= v1 + 1;
  #L4f7002.  v3:= new `io.reactivex.subjects.MaybeSubject$a`[v3];
  #L4f7006.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f700c.  v3[v1]:= v5 @kind object;
  #L4f7010.  v1:= v4.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f7014.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f701a.  v0:= temp;
  #L4f701c.  if v0 == 0 then goto L4f6fe0;
  #L4f7020.  v5:= 1I;
  #L4f7022.  return v5;
}
procedure `void` `b`(`io.reactivex.subjects.MaybeSubject` v6 @kind this, `io.reactivex.subjects.MaybeSubject$a` v7 @kind object) @signature `Lio/reactivex/subjects/MaybeSubject;.b:(Lio/reactivex/subjects/MaybeSubject$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f7344.  v0:= v6.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f7348.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f734e.  v0:= temp @kind object;
  #L4f7350.  v0:= (`io.reactivex.subjects.MaybeSubject$a`[]) v0 @kind object;
  #L4f7354.  v1:= length @variable v0;
  #L4f7356.  if v1 != 0 then goto L4f735c;
  #L4f735a.  return @kind void;
  #L4f735c.  v2:= -1I;
  #L4f735e.  v3:= 0I;
  #L4f7360.  v4:= 0I;
  #L4f7362.  if v4 >= v1 then goto L4f7378;
  #L4f7366.  v5:= v0[v4] @kind object;
  #L4f736a.  if v5 != v7 then goto L4f7372;
  #L4f736e.  v2:= v4;
  #L4f7370.  goto L4f7378;
  #L4f7372.  v4:= v4 + 1;
  #L4f7376.  goto L4f7362;
  #L4f7378.  if v2 >= 0 then goto L4f737e;
  #L4f737c.  return @kind void;
  #L4f737e.  v4:= 1I;
  #L4f7380.  if v1 != v4 then goto L4f738a;
  #L4f7384.  v1:= `@@io.reactivex.subjects.MaybeSubject.e` @type ^`io.reactivex.subjects.MaybeSubject$a`[] @kind object;
  #L4f7388.  goto L4f73a8;
  #L4f738a.  v5:= v1 + -1;
  #L4f738e.  v5:= new `io.reactivex.subjects.MaybeSubject$a`[v5];
  #L4f7392.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f7398.  v3:= v2 + 1;
  #L4f739c.  v1:= v1 - v2 @kind int;
  #L4f739e.  v1:= v1 - v4 @kind int;
  #L4f73a0.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f73a6.  v1:= v5 @kind object;
  #L4f73a8.  v2:= v6.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f73ac.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f73b2.  v0:= temp;
  #L4f73b4.  if v0 == 0 then goto L4f7344;
  #L4f73b8.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f7154.  v0:= v2.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f7158.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f715e.  v0:= temp @kind object;
  #L4f7160.  v1:= `@@io.reactivex.subjects.MaybeSubject.f` @type ^`io.reactivex.subjects.MaybeSubject$a`[] @kind object;
  #L4f7164.  if v0 != v1 then goto L4f716e;
  #L4f7168.  v0:= v2.`io.reactivex.subjects.MaybeSubject.d` @type ^`java.lang.Throwable` @kind object;
  #L4f716c.  return v0 @kind object;
  #L4f716e.  v0:= 0I;
  #L4f7170.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f7124.  v0:= v2.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f7128.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f712e.  v0:= temp @kind object;
  #L4f7130.  v1:= `@@io.reactivex.subjects.MaybeSubject.f` @type ^`io.reactivex.subjects.MaybeSubject$a`[] @kind object;
  #L4f7134.  if v0 != v1 then goto L4f713e;
  #L4f7138.  v0:= v2.`io.reactivex.subjects.MaybeSubject.c` @type ^`java.lang.Object` @kind object;
  #L4f713c.  return v0 @kind object;
  #L4f713e.  v0:= 0I;
  #L4f7140.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f7034.  v0:= v2.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f7038.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f703e.  v0:= temp @kind object;
  #L4f7040.  v1:= `@@io.reactivex.subjects.MaybeSubject.f` @type ^`io.reactivex.subjects.MaybeSubject$a`[] @kind object;
  #L4f7044.  if v0 != v1 then goto L4f705c;
  #L4f7048.  v0:= v2.`io.reactivex.subjects.MaybeSubject.c` @type ^`java.lang.Object` @kind object;
  #L4f704c.  if v0 != 0 then goto L4f705c;
  #L4f7050.  v0:= v2.`io.reactivex.subjects.MaybeSubject.d` @type ^`java.lang.Throwable` @kind object;
  #L4f7054.  if v0 != 0 then goto L4f705c;
  #L4f7058.  v0:= 1I;
  #L4f705a.  goto L4f705e;
  #L4f705c.  v0:= 0I;
  #L4f705e.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.subjects.MaybeSubject` v1 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f7070.  v0:= v1.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f7074.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f707a.  v0:= temp @kind object;
  #L4f707c.  v0:= (`io.reactivex.subjects.MaybeSubject$a`[]) v0 @kind object;
  #L4f7080.  v0:= length @variable v0;
  #L4f7082.  if v0 == 0 then goto L4f708a;
  #L4f7086.  v0:= 1I;
  #L4f7088.  goto L4f708c;
  #L4f708a.  v0:= 0I;
  #L4f708c.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f70a0.  v0:= v2.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f70a4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f70aa.  v0:= temp @kind object;
  #L4f70ac.  v1:= `@@io.reactivex.subjects.MaybeSubject.f` @type ^`io.reactivex.subjects.MaybeSubject$a`[] @kind object;
  #L4f70b0.  if v0 != v1 then goto L4f70c0;
  #L4f70b4.  v0:= v2.`io.reactivex.subjects.MaybeSubject.d` @type ^`java.lang.Throwable` @kind object;
  #L4f70b8.  if v0 == 0 then goto L4f70c0;
  #L4f70bc.  v0:= 1I;
  #L4f70be.  goto L4f70c2;
  #L4f70c0.  v0:= 0I;
  #L4f70c2.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f70d4.  v0:= v2.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f70d8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f70de.  v0:= temp @kind object;
  #L4f70e0.  v1:= `@@io.reactivex.subjects.MaybeSubject.f` @type ^`io.reactivex.subjects.MaybeSubject$a`[] @kind object;
  #L4f70e4.  if v0 != v1 then goto L4f70f4;
  #L4f70e8.  v0:= v2.`io.reactivex.subjects.MaybeSubject.c` @type ^`java.lang.Object` @kind object;
  #L4f70ec.  if v0 == 0 then goto L4f70f4;
  #L4f70f0.  v0:= 1I;
  #L4f70f2.  goto L4f70f6;
  #L4f70f4.  v0:= 0I;
  #L4f70f6.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.subjects.MaybeSubject` v4 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f71e0.  v0:= v4.`io.reactivex.subjects.MaybeSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f71e4.  v1:= 0I;
  #L4f71e6.  v2:= 1I;
  #L4f71e8.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4f71ee.  v0:= temp;
  #L4f71f0.  if v0 == 0 then goto L4f7222;
  #L4f71f4.  v0:= v4.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f71f8.  v2:= `@@io.reactivex.subjects.MaybeSubject.f` @type ^`io.reactivex.subjects.MaybeSubject$a`[] @kind object;
  #L4f71fc.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f7202.  v0:= temp @kind object;
  #L4f7204.  v0:= (`io.reactivex.subjects.MaybeSubject$a`[]) v0 @kind object;
  #L4f7208.  v2:= length @variable v0;
  #L4f720a.  if v1 >= v2 then goto L4f7222;
  #L4f720e.  v3:= v0[v1] @kind object;
  #L4f7212.  v3:= v3.`io.reactivex.subjects.MaybeSubject$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4f7216.  call `onComplete`(v3) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L4f721c.  v1:= v1 + 1;
  #L4f7220.  goto L4f720a;
  #L4f7222.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.subjects.MaybeSubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/subjects/MaybeSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f7234.  if v5 != 0 then goto L4f7246;
  #L4f7238.  v5:= new `java.lang.NullPointerException`;
  #L4f723c.  v0:= "Null errors are not allowed in 2.x" @kind object;
  #L4f7240.  call `<init>`(v5, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f7246.  v0:= v4.`io.reactivex.subjects.MaybeSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f724a.  v1:= 0I;
  #L4f724c.  v2:= 1I;
  #L4f724e.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4f7254.  v0:= temp;
  #L4f7256.  if v0 == 0 then goto L4f728c;
  #L4f725a.  v4.`io.reactivex.subjects.MaybeSubject.d` @type ^`java.lang.Throwable` := v5 @kind object;
  #L4f725e.  v0:= v4.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f7262.  v2:= `@@io.reactivex.subjects.MaybeSubject.f` @type ^`io.reactivex.subjects.MaybeSubject$a`[] @kind object;
  #L4f7266.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f726c.  v0:= temp @kind object;
  #L4f726e.  v0:= (`io.reactivex.subjects.MaybeSubject$a`[]) v0 @kind object;
  #L4f7272.  v2:= length @variable v0;
  #L4f7274.  if v1 >= v2 then goto L4f7292;
  #L4f7278.  v3:= v0[v1] @kind object;
  #L4f727c.  v3:= v3.`io.reactivex.subjects.MaybeSubject$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4f7280.  call `onError`(v3, v5) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f7286.  v1:= v1 + 1;
  #L4f728a.  goto L4f7274;
  #L4f728c.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f7292.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subjects.MaybeSubject` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/subjects/MaybeSubject;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f72a4.  v0:= v2.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f72a8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f72ae.  v0:= temp @kind object;
  #L4f72b0.  v1:= `@@io.reactivex.subjects.MaybeSubject.f` @type ^`io.reactivex.subjects.MaybeSubject$a`[] @kind object;
  #L4f72b4.  if v0 != v1 then goto L4f72be;
  #L4f72b8.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f72be.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.subjects.MaybeSubject` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/subjects/MaybeSubject;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f72d0.  if v5 != 0 then goto L4f72ea;
  #L4f72d4.  v5:= new `java.lang.NullPointerException`;
  #L4f72d8.  v0:= "Null values are not allowed in 2.x" @kind object;
  #L4f72dc.  call `<init>`(v5, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f72e2.  call `onError`(v4, v5) @signature `Lio/reactivex/subjects/MaybeSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4f72e8.  return @kind void;
  #L4f72ea.  v0:= v4.`io.reactivex.subjects.MaybeSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f72ee.  v1:= 0I;
  #L4f72f0.  v2:= 1I;
  #L4f72f2.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4f72f8.  v0:= temp;
  #L4f72fa.  if v0 == 0 then goto L4f7330;
  #L4f72fe.  v4.`io.reactivex.subjects.MaybeSubject.c` @type ^`java.lang.Object` := v5 @kind object;
  #L4f7302.  v0:= v4.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f7306.  v2:= `@@io.reactivex.subjects.MaybeSubject.f` @type ^`io.reactivex.subjects.MaybeSubject$a`[] @kind object;
  #L4f730a.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f7310.  v0:= temp @kind object;
  #L4f7312.  v0:= (`io.reactivex.subjects.MaybeSubject$a`[]) v0 @kind object;
  #L4f7316.  v2:= length @variable v0;
  #L4f7318.  if v1 >= v2 then goto L4f7330;
  #L4f731c.  v3:= v0[v1] @kind object;
  #L4f7320.  v3:= v3.`io.reactivex.subjects.MaybeSubject$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4f7324.  call `onSuccess`(v3, v5) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4f732a.  v1:= v1 + 1;
  #L4f732e.  goto L4f7318;
  #L4f7330.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.subjects.MaybeSubject` v2 @kind this, `io.reactivex.MaybeObserver` v3 @kind object) @signature `Lio/reactivex/subjects/MaybeSubject;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4f73cc.  v0:= new `io.reactivex.subjects.MaybeSubject$a`;
  #L4f73d0.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/subjects/MaybeSubject$a;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/subjects/MaybeSubject;)V` @kind direct;
  #L4f73d6.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4f73dc.  call temp:= `a`(v2, v0) @signature `Lio/reactivex/subjects/MaybeSubject;.a:(Lio/reactivex/subjects/MaybeSubject$a;)Z` @kind virtual;
  #L4f73e2.  v1:= temp;
  #L4f73e4.  if v1 == 0 then goto L4f73fc;
  #L4f73e8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/subjects/MaybeSubject$a;.isDisposed:()Z` @kind virtual;
  #L4f73ee.  v3:= temp;
  #L4f73f0.  if v3 == 0 then goto L4f7422;
  #L4f73f4.  call `b`(v2, v0) @signature `Lio/reactivex/subjects/MaybeSubject;.b:(Lio/reactivex/subjects/MaybeSubject$a;)V` @kind virtual;
  #L4f73fa.  goto L4f7422;
  #L4f73fc.  v0:= v2.`io.reactivex.subjects.MaybeSubject.d` @type ^`java.lang.Throwable` @kind object;
  #L4f7400.  if v0 == 0 then goto L4f740c;
  #L4f7404.  call `onError`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f740a.  goto L4f7422;
  #L4f740c.  v0:= v2.`io.reactivex.subjects.MaybeSubject.c` @type ^`java.lang.Object` @kind object;
  #L4f7410.  if v0 != 0 then goto L4f741c;
  #L4f7414.  call `onComplete`(v3) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L4f741a.  goto L4f7422;
  #L4f741c.  call `onSuccess`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4f7422.  return @kind void;
}
