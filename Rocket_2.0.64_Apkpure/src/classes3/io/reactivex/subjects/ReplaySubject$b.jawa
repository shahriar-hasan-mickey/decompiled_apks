record `io.reactivex.subjects.ReplaySubject$b` @kind interface @AccessFlag ABSTRACT_INTERFACE {
}
procedure `void` `a`(`io.reactivex.subjects.ReplaySubject$c` v0 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$b;.a:(Lio/reactivex/subjects/ReplaySubject$c;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `add`(`java.lang.Object` v0 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$b;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object`[] `c`(`java.lang.Object`[] v0 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$b;.c:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `compareAndSet`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$b;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `d`(`java.lang.Object` v0 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$b;.d:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `get`() @signature `Lio/reactivex/subjects/ReplaySubject$b;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `getValue`() @signature `Lio/reactivex/subjects/ReplaySubject$b;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `size`() @signature `Lio/reactivex/subjects/ReplaySubject$b;.size:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
