record `io.reactivex.subjects.UnicastSubject$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicIntQueueDisposable` @kind class {
  `io.reactivex.subjects.UnicastSubject` `io.reactivex.subjects.UnicastSubject$a.a` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@io.reactivex.subjects.UnicastSubject$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.UnicastSubject$a` v0 @kind this, `io.reactivex.subjects.UnicastSubject` v1 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject$a;.<init>:(Lio/reactivex/subjects/UnicastSubject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f9178.  v0.`io.reactivex.subjects.UnicastSubject$a.a` @type ^`io.reactivex.subjects.UnicastSubject` := v1 @kind object;
  #L4f917c.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L4f9182.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.subjects.UnicastSubject$a` v1 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f9194.  v0:= v1.`io.reactivex.subjects.UnicastSubject$a.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L4f9198.  v0:= v0.`io.reactivex.subjects.UnicastSubject.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f919c.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f91a2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.subjects.UnicastSubject$a` v2 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f91b4.  v0:= v2.`io.reactivex.subjects.UnicastSubject$a.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L4f91b8.  v0:= v0.`io.reactivex.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L4f91bc.  if v0 != 0 then goto L4f9214;
  #L4f91c0.  v0:= v2.`io.reactivex.subjects.UnicastSubject$a.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L4f91c4.  v1:= 1I;
  #L4f91c6.  v0.`io.reactivex.subjects.UnicastSubject.e` @type ^`boolean` := v1 @kind boolean;
  #L4f91ca.  v0:= v2.`io.reactivex.subjects.UnicastSubject$a.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L4f91ce.  call `d`(v0) @signature `Lio/reactivex/subjects/UnicastSubject;.d:()V` @kind virtual;
  #L4f91d4.  v0:= v2.`io.reactivex.subjects.UnicastSubject$a.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L4f91d8.  v0:= v0.`io.reactivex.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f91dc.  v1:= 0I;
  #L4f91de.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f91e4.  v0:= v2.`io.reactivex.subjects.UnicastSubject$a.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L4f91e8.  v0:= v0.`io.reactivex.subjects.UnicastSubject.i` @type ^`io.reactivex.internal.observers.BasicIntQueueDisposable` @kind object;
  #L4f91ec.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f91f2.  v0:= temp;
  #L4f91f4.  if v0 != 0 then goto L4f9214;
  #L4f91f8.  v0:= v2.`io.reactivex.subjects.UnicastSubject$a.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L4f91fc.  v0:= v0.`io.reactivex.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f9200.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f9206.  v0:= v2.`io.reactivex.subjects.UnicastSubject$a.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L4f920a.  v0:= v0.`io.reactivex.subjects.UnicastSubject.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f920e.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f9214.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.subjects.UnicastSubject$a` v1 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f90ec.  v0:= v1.`io.reactivex.subjects.UnicastSubject$a.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L4f90f0.  v0:= v0.`io.reactivex.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L4f90f4.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.subjects.UnicastSubject$a` v1 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f9108.  v0:= v1.`io.reactivex.subjects.UnicastSubject$a.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L4f910c.  v0:= v0.`io.reactivex.subjects.UnicastSubject.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f9110.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4f9116.  v0:= temp;
  #L4f9118.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.subjects.UnicastSubject$a` v1 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f9154.  v0:= v1.`io.reactivex.subjects.UnicastSubject$a.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L4f9158.  v0:= v0.`io.reactivex.subjects.UnicastSubject.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f915c.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4f9162.  v0:= temp @kind object;
  #L4f9164.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.subjects.UnicastSubject$a` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/subjects/UnicastSubject$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f912c.  v0:= 2I;
  #L4f912e.  v3:= v3 ^& v0 @kind int;
  #L4f9130.  if v3 == 0 then goto L4f9140;
  #L4f9134.  v3:= v2.`io.reactivex.subjects.UnicastSubject$a.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L4f9138.  v1:= 1I;
  #L4f913a.  v3.`io.reactivex.subjects.UnicastSubject.j` @type ^`boolean` := v1 @kind boolean;
  #L4f913e.  return v0;
  #L4f9140.  v3:= 0I;
  #L4f9142.  return v3;
}
