record `io.reactivex.subjects.CompletableSubject$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.subjects.CompletableSubject$a.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.subjects.CompletableSubject$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.CompletableSubject$a` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object, `io.reactivex.subjects.CompletableSubject` v2 @kind object) @signature `Lio/reactivex/subjects/CompletableSubject$a;.<init>:(Lio/reactivex/CompletableObserver;Lio/reactivex/subjects/CompletableSubject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f6bb8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f6bbe.  v0.`io.reactivex.subjects.CompletableSubject$a.a` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L4f6bc2.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f6bc8.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.subjects.CompletableSubject$a` v1 @kind this) @signature `Lio/reactivex/subjects/CompletableSubject$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6bdc.  v0:= 0I;
  #L4f6bde.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f6be4.  v0:= temp @kind object;
  #L4f6be6.  v0:= (`io.reactivex.subjects.CompletableSubject`) v0 @kind object;
  #L4f6bea.  if v0 == 0 then goto L4f6bf4;
  #L4f6bee.  call `f`(v0, v1) @signature `Lio/reactivex/subjects/CompletableSubject;.f:(Lio/reactivex/subjects/CompletableSubject$a;)V` @kind virtual;
  #L4f6bf4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.subjects.CompletableSubject$a` v1 @kind this) @signature `Lio/reactivex/subjects/CompletableSubject$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6b94.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f6b9a.  v0:= temp @kind object;
  #L4f6b9c.  if v0 != 0 then goto L4f6ba4;
  #L4f6ba0.  v0:= 1I;
  #L4f6ba2.  goto L4f6ba6;
  #L4f6ba4.  v0:= 0I;
  #L4f6ba6.  return v0;
}
