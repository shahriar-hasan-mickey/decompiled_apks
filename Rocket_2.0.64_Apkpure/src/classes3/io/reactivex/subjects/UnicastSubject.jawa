record `io.reactivex.subjects.UnicastSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.subjects.Subject` @kind class {
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.subjects.UnicastSubject.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.UnicastSubject.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.UnicastSubject.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.subjects.UnicastSubject.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.subjects.UnicastSubject.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.subjects.UnicastSubject.f` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.subjects.UnicastSubject.g` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.subjects.UnicastSubject.h` @AccessFlag FINAL;
  `io.reactivex.internal.observers.BasicIntQueueDisposable` `io.reactivex.subjects.UnicastSubject.i` @AccessFlag FINAL;
  `boolean` `io.reactivex.subjects.UnicastSubject.j` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.subjects.UnicastSubject` v2 @kind this, `int` v3 , `java.lang.Runnable` v4 @kind object, `boolean` v5 ) @signature `Lio/reactivex/subjects/UnicastSubject;.<init>:(ILjava/lang/Runnable;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f9414.  call `<init>`(v2) @signature `Lio/reactivex/subjects/Subject;.<init>:()V` @kind direct;
  #L4f941a.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L4f941e.  v1:= "capacityHint" @kind object;
  #L4f9422.  call temp:= `verifyPositive`(v3, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4f9428.  v3:= temp;
  #L4f942a.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4f9430.  v2.`io.reactivex.subjects.UnicastSubject.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v0 @kind object;
  #L4f9434.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f9438.  v0:= "onTerminate" @kind object;
  #L4f943c.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f9442.  v4:= temp @kind object;
  #L4f9444.  call `<init>`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f944a.  v2.`io.reactivex.subjects.UnicastSubject.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L4f944e.  v2.`io.reactivex.subjects.UnicastSubject.d` @type ^`boolean` := v5 @kind boolean;
  #L4f9452.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f9456.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f945c.  v2.`io.reactivex.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L4f9460.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4f9464.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4f946a.  v2.`io.reactivex.subjects.UnicastSubject.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L4f946e.  v3:= new `io.reactivex.subjects.UnicastSubject$a`;
  #L4f9472.  call `<init>`(v3, v2) @signature `Lio/reactivex/subjects/UnicastSubject$a;.<init>:(Lio/reactivex/subjects/UnicastSubject;)V` @kind direct;
  #L4f9478.  v2.`io.reactivex.subjects.UnicastSubject.i` @type ^`io.reactivex.internal.observers.BasicIntQueueDisposable` := v3 @kind object;
  #L4f947c.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subjects.UnicastSubject` v2 @kind this, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/subjects/UnicastSubject;.<init>:(IZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f93a4.  call `<init>`(v2) @signature `Lio/reactivex/subjects/Subject;.<init>:()V` @kind direct;
  #L4f93aa.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L4f93ae.  v1:= "capacityHint" @kind object;
  #L4f93b2.  call temp:= `verifyPositive`(v3, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4f93b8.  v3:= temp;
  #L4f93ba.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4f93c0.  v2.`io.reactivex.subjects.UnicastSubject.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v0 @kind object;
  #L4f93c4.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f93c8.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f93ce.  v2.`io.reactivex.subjects.UnicastSubject.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L4f93d2.  v2.`io.reactivex.subjects.UnicastSubject.d` @type ^`boolean` := v4 @kind boolean;
  #L4f93d6.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f93da.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f93e0.  v2.`io.reactivex.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L4f93e4.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4f93e8.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4f93ee.  v2.`io.reactivex.subjects.UnicastSubject.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L4f93f2.  v3:= new `io.reactivex.subjects.UnicastSubject$a`;
  #L4f93f6.  call `<init>`(v3, v2) @signature `Lio/reactivex/subjects/UnicastSubject$a;.<init>:(Lio/reactivex/subjects/UnicastSubject;)V` @kind direct;
  #L4f93fc.  v2.`io.reactivex.subjects.UnicastSubject.i` @type ^`io.reactivex.internal.observers.BasicIntQueueDisposable` := v3 @kind object;
  #L4f9400.  return @kind void;
}
procedure `io.reactivex.subjects.UnicastSubject` `create`() @signature `Lio/reactivex/subjects/UnicastSubject;.create:()Lio/reactivex/subjects/UnicastSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4f92d8.  v0:= new `io.reactivex.subjects.UnicastSubject`;
  #L4f92dc.  call temp:= `bufferSize`() @signature `Lio/reactivex/Observable;.bufferSize:()I` @kind static;
  #L4f92e2.  v1:= temp;
  #L4f92e4.  v2:= 1I;
  #L4f92e6.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/subjects/UnicastSubject;.<init>:(IZ)V` @kind direct;
  #L4f92ec.  return v0 @kind object;
}
procedure `io.reactivex.subjects.UnicastSubject` `create`(`int` v2 ) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4f9324.  v0:= new `io.reactivex.subjects.UnicastSubject`;
  #L4f9328.  v1:= 1I;
  #L4f932a.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/subjects/UnicastSubject;.<init>:(IZ)V` @kind direct;
  #L4f9330.  return v0 @kind object;
}
procedure `io.reactivex.subjects.UnicastSubject` `create`(`int` v2 , `java.lang.Runnable` v3 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/subjects/UnicastSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4f9344.  v0:= new `io.reactivex.subjects.UnicastSubject`;
  #L4f9348.  v1:= 1I;
  #L4f934a.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/subjects/UnicastSubject;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L4f9350.  return v0 @kind object;
}
procedure `io.reactivex.subjects.UnicastSubject` `create`(`int` v1 , `java.lang.Runnable` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;Z)Lio/reactivex/subjects/UnicastSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f9364.  v0:= new `io.reactivex.subjects.UnicastSubject`;
  #L4f9368.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/subjects/UnicastSubject;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L4f936e.  return v0 @kind object;
}
procedure `io.reactivex.subjects.UnicastSubject` `create`(`boolean` v2 ) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(Z)Lio/reactivex/subjects/UnicastSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4f9300.  v0:= new `io.reactivex.subjects.UnicastSubject`;
  #L4f9304.  call temp:= `bufferSize`() @signature `Lio/reactivex/Observable;.bufferSize:()I` @kind static;
  #L4f930a.  v1:= temp;
  #L4f930c.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/subjects/UnicastSubject;.<init>:(IZ)V` @kind direct;
  #L4f9312.  return v0 @kind object;
}
procedure `void` `d`(`io.reactivex.subjects.UnicastSubject` v3 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4f9490.  v0:= v3.`io.reactivex.subjects.UnicastSubject.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f9494.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f949a.  v0:= temp @kind object;
  #L4f949c.  v0:= (`java.lang.Runnable`) v0 @kind object;
  #L4f94a0.  if v0 == 0 then goto L4f94bc;
  #L4f94a4.  v1:= v3.`io.reactivex.subjects.UnicastSubject.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f94a8.  v2:= 0I;
  #L4f94aa.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f94b0.  v1:= temp;
  #L4f94b2.  if v1 == 0 then goto L4f94bc;
  #L4f94b6.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L4f94bc.  return @kind void;
}
procedure `void` `e`(`io.reactivex.subjects.UnicastSubject` v2 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4f94d0.  v0:= v2.`io.reactivex.subjects.UnicastSubject.i` @type ^`io.reactivex.internal.observers.BasicIntQueueDisposable` @kind object;
  #L4f94d4.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f94da.  v0:= temp;
  #L4f94dc.  if v0 == 0 then goto L4f94e2;
  #L4f94e0.  return @kind void;
  #L4f94e2.  v0:= v2.`io.reactivex.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f94e6.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f94ec.  v0:= temp @kind object;
  #L4f94ee.  v0:= (`io.reactivex.Observer`) v0 @kind object;
  #L4f94f2.  v1:= 1I;
  #L4f94f4.  if v0 == 0 then goto L4f9510;
  #L4f94f8.  v1:= v2.`io.reactivex.subjects.UnicastSubject.j` @type ^`boolean` @kind boolean;
  #L4f94fc.  if v1 == 0 then goto L4f9508;
  #L4f9500.  call `f`(v2, v0) @signature `Lio/reactivex/subjects/UnicastSubject;.f:(Lio/reactivex/Observer;)V` @kind virtual;
  #L4f9506.  goto L4f950e;
  #L4f9508.  call `g`(v2, v0) @signature `Lio/reactivex/subjects/UnicastSubject;.g:(Lio/reactivex/Observer;)V` @kind virtual;
  #L4f950e.  return @kind void;
  #L4f9510.  v0:= v2.`io.reactivex.subjects.UnicastSubject.i` @type ^`io.reactivex.internal.observers.BasicIntQueueDisposable` @kind object;
  #L4f9514.  v1:= -v1 @kind int;
  #L4f9516.  call temp:= `addAndGet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4f951c.  v1:= temp;
  #L4f951e.  if v1 != 0 then goto L4f9524;
  #L4f9522.  return @kind void;
  #L4f9524.  v0:= v2.`io.reactivex.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f9528.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f952e.  v0:= temp @kind object;
  #L4f9530.  v0:= (`io.reactivex.Observer`) v0 @kind object;
  #L4f9534.  goto L4f94f4;
}
procedure `void` `f`(`io.reactivex.subjects.UnicastSubject` v6 @kind this, `io.reactivex.Observer` v7 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject;.f:(Lio/reactivex/Observer;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f9548.  v0:= v6.`io.reactivex.subjects.UnicastSubject.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f954c.  v1:= v6.`io.reactivex.subjects.UnicastSubject.d` @type ^`boolean` @kind boolean;
  #L4f9550.  v2:= 1I;
  #L4f9552.  v1:= v1 ^~ v2 @kind int;
  #L4f9554.  v3:= v6.`io.reactivex.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L4f9558.  v4:= 0I;
  #L4f955a.  if v3 == 0 then goto L4f9570;
  #L4f955e.  v7:= v6.`io.reactivex.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f9562.  call `lazySet`(v7, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f9568.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f956e.  return @kind void;
  #L4f9570.  v3:= v6.`io.reactivex.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L4f9574.  if v1 == 0 then goto L4f958a;
  #L4f9578.  if v3 == 0 then goto L4f958a;
  #L4f957c.  call temp:= `i`(v6, v0, v7) @signature `Lio/reactivex/subjects/UnicastSubject;.i:(Lio/reactivex/internal/fuseable/SimpleQueue;Lio/reactivex/Observer;)Z` @kind virtual;
  #L4f9582.  v5:= temp;
  #L4f9584.  if v5 == 0 then goto L4f958a;
  #L4f9588.  return @kind void;
  #L4f958a.  call `onNext`(v7, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f9590.  if v3 == 0 then goto L4f959c;
  #L4f9594.  call `h`(v6, v7) @signature `Lio/reactivex/subjects/UnicastSubject;.h:(Lio/reactivex/Observer;)V` @kind virtual;
  #L4f959a.  return @kind void;
  #L4f959c.  v3:= v6.`io.reactivex.subjects.UnicastSubject.i` @type ^`io.reactivex.internal.observers.BasicIntQueueDisposable` @kind object;
  #L4f95a0.  v2:= -v2 @kind int;
  #L4f95a2.  call temp:= `addAndGet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4f95a8.  v2:= temp;
  #L4f95aa.  if v2 != 0 then goto L4f9554;
  #L4f95ae.  return @kind void;
}
procedure `void` `g`(`io.reactivex.subjects.UnicastSubject` v9 @kind this, `io.reactivex.Observer` v10 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject;.g:(Lio/reactivex/Observer;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4f95c0.  v0:= v9.`io.reactivex.subjects.UnicastSubject.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f95c4.  v1:= v9.`io.reactivex.subjects.UnicastSubject.d` @type ^`boolean` @kind boolean;
  #L4f95c8.  v2:= 1I;
  #L4f95ca.  v1:= v1 ^~ v2 @kind int;
  #L4f95cc.  v3:= 1I;
  #L4f95ce.  v4:= 1I;
  #L4f95d0.  v5:= v9.`io.reactivex.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L4f95d4.  if v5 == 0 then goto L4f95ec;
  #L4f95d8.  v10:= v9.`io.reactivex.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f95dc.  v1:= 0I;
  #L4f95de.  call `lazySet`(v10, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f95e4.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4f95ea.  return @kind void;
  #L4f95ec.  v5:= v9.`io.reactivex.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L4f95f0.  v6:= v9.`io.reactivex.subjects.UnicastSubject.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f95f4.  call temp:= `poll`(v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4f95fa.  v6:= temp @kind object;
  #L4f95fc.  v7:= 0I;
  #L4f95fe.  if v6 != 0 then goto L4f9606;
  #L4f9602.  v8:= 1I;
  #L4f9604.  goto L4f9608;
  #L4f9606.  v8:= 0I;
  #L4f9608.  if v5 == 0 then goto L4f9630;
  #L4f960c.  if v1 == 0 then goto L4f9624;
  #L4f9610.  if v3 == 0 then goto L4f9624;
  #L4f9614.  call temp:= `i`(v9, v0, v10) @signature `Lio/reactivex/subjects/UnicastSubject;.i:(Lio/reactivex/internal/fuseable/SimpleQueue;Lio/reactivex/Observer;)Z` @kind virtual;
  #L4f961a.  v3:= temp;
  #L4f961c.  if v3 == 0 then goto L4f9622;
  #L4f9620.  return @kind void;
  #L4f9622.  v3:= 0I;
  #L4f9624.  if v8 == 0 then goto L4f9630;
  #L4f9628.  call `h`(v9, v10) @signature `Lio/reactivex/subjects/UnicastSubject;.h:(Lio/reactivex/Observer;)V` @kind virtual;
  #L4f962e.  return @kind void;
  #L4f9630.  if v8 == 0 then goto L4f9648;
  #L4f9634.  v5:= v9.`io.reactivex.subjects.UnicastSubject.i` @type ^`io.reactivex.internal.observers.BasicIntQueueDisposable` @kind object;
  #L4f9638.  v4:= -v4 @kind int;
  #L4f963a.  call temp:= `addAndGet`(v5, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4f9640.  v4:= temp;
  #L4f9642.  if v4 != 0 then goto L4f95d0;
  #L4f9646.  return @kind void;
  #L4f9648.  call `onNext`(v10, v6) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f964e.  goto L4f95d0;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.subjects.UnicastSubject` v1 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f9380.  v0:= v1.`io.reactivex.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L4f9384.  if v0 == 0 then goto L4f938e;
  #L4f9388.  v0:= v1.`io.reactivex.subjects.UnicastSubject.g` @type ^`java.lang.Throwable` @kind object;
  #L4f938c.  return v0 @kind object;
  #L4f938e.  v0:= 0I;
  #L4f9390.  return v0 @kind object;
}
procedure `void` `h`(`io.reactivex.subjects.UnicastSubject` v2 @kind this, `io.reactivex.Observer` v3 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject;.h:(Lio/reactivex/Observer;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4f9660.  v0:= v2.`io.reactivex.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f9664.  v1:= 0I;
  #L4f9666.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f966c.  v0:= v2.`io.reactivex.subjects.UnicastSubject.g` @type ^`java.lang.Throwable` @kind object;
  #L4f9670.  if v0 == 0 then goto L4f967c;
  #L4f9674.  call `onError`(v3, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f967a.  goto L4f9682;
  #L4f967c.  call `onComplete`(v3) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4f9682.  return @kind void;
}
procedure `boolean` `hasComplete`(`io.reactivex.subjects.UnicastSubject` v1 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f9260.  v0:= v1.`io.reactivex.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L4f9264.  if v0 == 0 then goto L4f9274;
  #L4f9268.  v0:= v1.`io.reactivex.subjects.UnicastSubject.g` @type ^`java.lang.Throwable` @kind object;
  #L4f926c.  if v0 != 0 then goto L4f9274;
  #L4f9270.  v0:= 1I;
  #L4f9272.  goto L4f9276;
  #L4f9274.  v0:= 0I;
  #L4f9276.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.subjects.UnicastSubject` v1 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f9288.  v0:= v1.`io.reactivex.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f928c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f9292.  v0:= temp @kind object;
  #L4f9294.  if v0 == 0 then goto L4f929c;
  #L4f9298.  v0:= 1I;
  #L4f929a.  goto L4f929e;
  #L4f929c.  v0:= 0I;
  #L4f929e.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.subjects.UnicastSubject` v1 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f92b0.  v0:= v1.`io.reactivex.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L4f92b4.  if v0 == 0 then goto L4f92c4;
  #L4f92b8.  v0:= v1.`io.reactivex.subjects.UnicastSubject.g` @type ^`java.lang.Throwable` @kind object;
  #L4f92bc.  if v0 == 0 then goto L4f92c4;
  #L4f92c0.  v0:= 1I;
  #L4f92c2.  goto L4f92c6;
  #L4f92c4.  v0:= 0I;
  #L4f92c6.  return v0;
}
procedure `boolean` `i`(`io.reactivex.subjects.UnicastSubject` v3 @kind this, `io.reactivex.internal.fuseable.SimpleQueue` v4 @kind object, `io.reactivex.Observer` v5 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject;.i:(Lio/reactivex/internal/fuseable/SimpleQueue;Lio/reactivex/Observer;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4f9228.  v0:= v3.`io.reactivex.subjects.UnicastSubject.g` @type ^`java.lang.Throwable` @kind object;
  #L4f922c.  if v0 == 0 then goto L4f924c;
  #L4f9230.  v1:= v3.`io.reactivex.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f9234.  v2:= 0I;
  #L4f9236.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f923c.  call `clear`(v4) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4f9242.  call `onError`(v5, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f9248.  v4:= 1I;
  #L4f924a.  return v4;
  #L4f924c.  v4:= 0I;
  #L4f924e.  return v4;
}
procedure `void` `onComplete`(`io.reactivex.subjects.UnicastSubject` v1 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f9694.  v0:= v1.`io.reactivex.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L4f9698.  if v0 != 0 then goto L4f96b8;
  #L4f969c.  v0:= v1.`io.reactivex.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L4f96a0.  if v0 == 0 then goto L4f96a6;
  #L4f96a4.  goto L4f96b8;
  #L4f96a6.  v0:= 1I;
  #L4f96a8.  v1.`io.reactivex.subjects.UnicastSubject.f` @type ^`boolean` := v0 @kind boolean;
  #L4f96ac.  call `d`(v1) @signature `Lio/reactivex/subjects/UnicastSubject;.d:()V` @kind virtual;
  #L4f96b2.  call `e`(v1) @signature `Lio/reactivex/subjects/UnicastSubject;.e:()V` @kind virtual;
  #L4f96b8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.subjects.UnicastSubject` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f96cc.  v0:= v1.`io.reactivex.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L4f96d0.  if v0 != 0 then goto L4f9708;
  #L4f96d4.  v0:= v1.`io.reactivex.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L4f96d8.  if v0 == 0 then goto L4f96de;
  #L4f96dc.  goto L4f9708;
  #L4f96de.  if v2 != 0 then goto L4f96f0;
  #L4f96e2.  v2:= new `java.lang.NullPointerException`;
  #L4f96e6.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L4f96ea.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f96f0.  v1.`io.reactivex.subjects.UnicastSubject.g` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4f96f4.  v2:= 1I;
  #L4f96f6.  v1.`io.reactivex.subjects.UnicastSubject.f` @type ^`boolean` := v2 @kind boolean;
  #L4f96fa.  call `d`(v1) @signature `Lio/reactivex/subjects/UnicastSubject;.d:()V` @kind virtual;
  #L4f9700.  call `e`(v1) @signature `Lio/reactivex/subjects/UnicastSubject;.e:()V` @kind virtual;
  #L4f9706.  return @kind void;
  #L4f9708.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f970e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.subjects.UnicastSubject` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f9720.  v0:= v1.`io.reactivex.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L4f9724.  if v0 != 0 then goto L4f975c;
  #L4f9728.  v0:= v1.`io.reactivex.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L4f972c.  if v0 == 0 then goto L4f9732;
  #L4f9730.  goto L4f975c;
  #L4f9732.  if v2 != 0 then goto L4f974c;
  #L4f9736.  v2:= new `java.lang.NullPointerException`;
  #L4f973a.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L4f973e.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f9744.  call `onError`(v1, v2) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4f974a.  return @kind void;
  #L4f974c.  v0:= v1.`io.reactivex.subjects.UnicastSubject.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f9750.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4f9756.  call `e`(v1) @signature `Lio/reactivex/subjects/UnicastSubject;.e:()V` @kind virtual;
  #L4f975c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subjects.UnicastSubject` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f9770.  v0:= v1.`io.reactivex.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L4f9774.  if v0 != 0 then goto L4f9780;
  #L4f9778.  v0:= v1.`io.reactivex.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L4f977c.  if v0 == 0 then goto L4f9786;
  #L4f9780.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f9786.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.subjects.UnicastSubject` v3 @kind this, `io.reactivex.Observer` v4 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L4f9798.  v0:= v3.`io.reactivex.subjects.UnicastSubject.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f979c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4f97a2.  v0:= temp;
  #L4f97a4.  if v0 != 0 then goto L4f97ee;
  #L4f97a8.  v0:= v3.`io.reactivex.subjects.UnicastSubject.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f97ac.  v1:= 0I;
  #L4f97ae.  v2:= 1I;
  #L4f97b0.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4f97b6.  v0:= temp;
  #L4f97b8.  if v0 == 0 then goto L4f97ee;
  #L4f97bc.  v0:= v3.`io.reactivex.subjects.UnicastSubject.i` @type ^`io.reactivex.internal.observers.BasicIntQueueDisposable` @kind object;
  #L4f97c0.  call `onSubscribe`(v4, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4f97c6.  v0:= v3.`io.reactivex.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f97ca.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f97d0.  v4:= v3.`io.reactivex.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L4f97d4.  if v4 == 0 then goto L4f97e6;
  #L4f97d8.  v4:= v3.`io.reactivex.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f97dc.  v0:= 0I;
  #L4f97de.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f97e4.  return @kind void;
  #L4f97e6.  call `e`(v3) @signature `Lio/reactivex/subjects/UnicastSubject;.e:()V` @kind virtual;
  #L4f97ec.  goto L4f9802;
  #L4f97ee.  v0:= new `java.lang.IllegalStateException`;
  #L4f97f2.  v1:= "Only a single observer allowed." @kind object;
  #L4f97f6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f97fc.  call `error`(v0, v4) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L4f9802.  return @kind void;
}
