record `io.reactivex.subjects.ReplaySubject$g` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.subjects.ReplaySubject$b` @kind interface {
  `java.util.List` `io.reactivex.subjects.ReplaySubject$g.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.subjects.ReplaySubject$g.b` @AccessFlag VOLATILE;
  `int` `io.reactivex.subjects.ReplaySubject$g.c` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.subjects.ReplaySubject$g.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.ReplaySubject$g` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/subjects/ReplaySubject$g;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f8244.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f824a.  v0:= new `java.util.ArrayList`;
  #L4f824e.  v1:= "capacityHint" @kind object;
  #L4f8252.  call temp:= `verifyPositive`(v3, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4f8258.  v3:= temp;
  #L4f825a.  call `<init>`(v0, v3) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L4f8260.  v2.`io.reactivex.subjects.ReplaySubject$g.a` @type ^`java.util.List` := v0 @kind object;
  #L4f8264.  return @kind void;
}
procedure `void` `a`(`io.reactivex.subjects.ReplaySubject$g` v9 @kind this, `io.reactivex.subjects.ReplaySubject$c` v10 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$g;.a:(Lio/reactivex/subjects/ReplaySubject$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4f82cc.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f82d2.  v0:= temp;
  #L4f82d4.  if v0 == 0 then goto L4f82da;
  #L4f82d8.  return @kind void;
  #L4f82da.  v0:= v9.`io.reactivex.subjects.ReplaySubject$g.a` @type ^`java.util.List` @kind object;
  #L4f82de.  v1:= v10.`io.reactivex.subjects.ReplaySubject$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L4f82e2.  v2:= v10.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` @kind object;
  #L4f82e6.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L4f82ea.  v3:= 0I;
  #L4f82ec.  v4:= 1I;
  #L4f82ee.  if v2 == 0 then goto L4f82fc;
  #L4f82f2.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4f82f8.  v3:= temp;
  #L4f82fa.  goto L4f8308;
  #L4f82fc.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4f8302.  v2:= temp @kind object;
  #L4f8304.  v10.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v2 @kind object;
  #L4f8308.  v2:= 1I;
  #L4f830a.  v5:= v10.`io.reactivex.subjects.ReplaySubject$c.d` @type ^`boolean` @kind boolean;
  #L4f830e.  v6:= 0I;
  #L4f8310.  if v5 == 0 then goto L4f831a;
  #L4f8314.  v10.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v6 @kind object;
  #L4f8318.  return @kind void;
  #L4f831a.  v5:= v9.`io.reactivex.subjects.ReplaySubject$g.c` @type ^`int`;
  #L4f831e.  if v5 == v3 then goto L4f8388;
  #L4f8322.  v7:= v10.`io.reactivex.subjects.ReplaySubject$c.d` @type ^`boolean` @kind boolean;
  #L4f8326.  if v7 == 0 then goto L4f8330;
  #L4f832a.  v10.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v6 @kind object;
  #L4f832e.  return @kind void;
  #L4f8330.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4f8336.  v7:= temp @kind object;
  #L4f8338.  v8:= v9.`io.reactivex.subjects.ReplaySubject$g.b` @type ^`boolean` @kind boolean;
  #L4f833c.  if v8 == 0 then goto L4f837c;
  #L4f8340.  v8:= v3 + 1;
  #L4f8344.  if v8 != v5 then goto L4f837c;
  #L4f8348.  v5:= v9.`io.reactivex.subjects.ReplaySubject$g.c` @type ^`int`;
  #L4f834c.  if v8 != v5 then goto L4f837c;
  #L4f8350.  call temp:= `isComplete`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4f8356.  v0:= temp;
  #L4f8358.  if v0 == 0 then goto L4f8364;
  #L4f835c.  call `onComplete`(v1) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4f8362.  goto L4f8372;
  #L4f8364.  call temp:= `getError`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L4f836a.  v0:= temp @kind object;
  #L4f836c.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f8372.  v10.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v6 @kind object;
  #L4f8376.  v10.`io.reactivex.subjects.ReplaySubject$c.d` @type ^`boolean` := v4 @kind boolean;
  #L4f837a.  return @kind void;
  #L4f837c.  call `onNext`(v1, v7) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f8382.  v3:= v3 + 1;
  #L4f8386.  goto L4f831e;
  #L4f8388.  v5:= v9.`io.reactivex.subjects.ReplaySubject$g.c` @type ^`int`;
  #L4f838c.  if v3 == v5 then goto L4f8392;
  #L4f8390.  goto L4f830a;
  #L4f8392.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4f8398.  v5:= temp @kind object;
  #L4f839a.  v10.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v5 @kind object;
  #L4f839e.  v2:= -v2 @kind int;
  #L4f83a0.  call temp:= `addAndGet`(v10, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4f83a6.  v2:= temp;
  #L4f83a8.  if v2 != 0 then goto L4f830a;
  #L4f83ac.  return @kind void;
}
procedure `void` `add`(`io.reactivex.subjects.ReplaySubject$g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$g;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f8278.  v0:= v1.`io.reactivex.subjects.ReplaySubject$g.a` @type ^`java.util.List` @kind object;
  #L4f827c.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4f8282.  v2:= v1.`io.reactivex.subjects.ReplaySubject$g.c` @type ^`int`;
  #L4f8286.  v2:= v2 + 1;
  #L4f828a.  v1.`io.reactivex.subjects.ReplaySubject$g.c` @type ^`int` := v2;
  #L4f828e.  return @kind void;
}
procedure `java.lang.Object`[] `c`(`io.reactivex.subjects.ReplaySubject$g` v6 @kind this, `java.lang.Object`[] v7 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$g;.c:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f819c.  v0:= v6.`io.reactivex.subjects.ReplaySubject$g.c` @type ^`int`;
  #L4f81a0.  v1:= 0I;
  #L4f81a2.  v2:= 0I;
  #L4f81a4.  if v0 != 0 then goto L4f81b4;
  #L4f81a8.  v0:= length @variable v7;
  #L4f81aa.  if v0 == 0 then goto L4f81b2;
  #L4f81ae.  v7[v2]:= v1 @kind object;
  #L4f81b2.  return v7 @kind object;
  #L4f81b4.  v3:= v6.`io.reactivex.subjects.ReplaySubject$g.a` @type ^`java.util.List` @kind object;
  #L4f81b8.  v4:= v0 + -1;
  #L4f81bc.  call temp:= `get`(v3, v4) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4f81c2.  v4:= temp @kind object;
  #L4f81c4.  call temp:= `isComplete`(v4) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4f81ca.  v5:= temp;
  #L4f81cc.  if v5 != 0 then goto L4f81dc;
  #L4f81d0.  call temp:= `isError`(v4) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4f81d6.  v4:= temp;
  #L4f81d8.  if v4 == 0 then goto L4f81f0;
  #L4f81dc.  v0:= v0 + -1;
  #L4f81e0.  if v0 != 0 then goto L4f81f0;
  #L4f81e4.  v0:= length @variable v7;
  #L4f81e6.  if v0 == 0 then goto L4f81ee;
  #L4f81ea.  v7[v2]:= v1 @kind object;
  #L4f81ee.  return v7 @kind object;
  #L4f81f0.  v4:= length @variable v7;
  #L4f81f2.  if v4 >= v0 then goto L4f8212;
  #L4f81f6.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4f81fc.  v7:= temp @kind object;
  #L4f81fe.  call temp:= `getComponentType`(v7) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L4f8204.  v7:= temp @kind object;
  #L4f8206.  call temp:= `newInstance`(v7, v0) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L4f820c.  v7:= temp @kind object;
  #L4f820e.  v7:= (`java.lang.Object`[]) v7 @kind object;
  #L4f8212.  if v2 >= v0 then goto L4f8228;
  #L4f8216.  call temp:= `get`(v3, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4f821c.  v4:= temp @kind object;
  #L4f821e.  v7[v2]:= v4 @kind object;
  #L4f8222.  v2:= v2 + 1;
  #L4f8226.  goto L4f8212;
  #L4f8228.  v2:= length @variable v7;
  #L4f822a.  if v2 <= v0 then goto L4f8232;
  #L4f822e.  v7[v0]:= v1 @kind object;
  #L4f8232.  return v7 @kind object;
}
procedure `void` `d`(`io.reactivex.subjects.ReplaySubject$g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$g;.d:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f82a0.  v0:= v1.`io.reactivex.subjects.ReplaySubject$g.a` @type ^`java.util.List` @kind object;
  #L4f82a4.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4f82aa.  v2:= v1.`io.reactivex.subjects.ReplaySubject$g.c` @type ^`int`;
  #L4f82ae.  v0:= 1I;
  #L4f82b0.  v2:= v2 + v0 @kind int;
  #L4f82b2.  v1.`io.reactivex.subjects.ReplaySubject$g.c` @type ^`int` := v2;
  #L4f82b6.  v1.`io.reactivex.subjects.ReplaySubject$g.b` @type ^`boolean` := v0 @kind boolean;
  #L4f82ba.  return @kind void;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.subjects.ReplaySubject$g` v5 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$g;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f813c.  v0:= v5.`io.reactivex.subjects.ReplaySubject$g.c` @type ^`int`;
  #L4f8140.  v1:= 0I;
  #L4f8142.  if v0 == 0 then goto L4f8188;
  #L4f8146.  v2:= v5.`io.reactivex.subjects.ReplaySubject$g.a` @type ^`java.util.List` @kind object;
  #L4f814a.  v3:= v0 + -1;
  #L4f814e.  call temp:= `get`(v2, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4f8154.  v3:= temp @kind object;
  #L4f8156.  call temp:= `isComplete`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4f815c.  v4:= temp;
  #L4f815e.  if v4 != 0 then goto L4f8172;
  #L4f8162.  call temp:= `isError`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4f8168.  v4:= temp;
  #L4f816a.  if v4 == 0 then goto L4f8170;
  #L4f816e.  goto L4f8172;
  #L4f8170.  return v3 @kind object;
  #L4f8172.  v3:= 1I;
  #L4f8174.  if v0 != v3 then goto L4f817a;
  #L4f8178.  return v1 @kind object;
  #L4f817a.  v0:= v0 + -2;
  #L4f817e.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4f8184.  v0:= temp @kind object;
  #L4f8186.  return v0 @kind object;
  #L4f8188.  return v1 @kind object;
}
procedure `int` `size`(`io.reactivex.subjects.ReplaySubject$g` v4 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$g;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f80f0.  v0:= v4.`io.reactivex.subjects.ReplaySubject$g.c` @type ^`int`;
  #L4f80f4.  if v0 == 0 then goto L4f8126;
  #L4f80f8.  v1:= v4.`io.reactivex.subjects.ReplaySubject$g.a` @type ^`java.util.List` @kind object;
  #L4f80fc.  v2:= v0 + -1;
  #L4f8100.  call temp:= `get`(v1, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4f8106.  v1:= temp @kind object;
  #L4f8108.  call temp:= `isComplete`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4f810e.  v3:= temp;
  #L4f8110.  if v3 != 0 then goto L4f8124;
  #L4f8114.  call temp:= `isError`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4f811a.  v1:= temp;
  #L4f811c.  if v1 == 0 then goto L4f8122;
  #L4f8120.  goto L4f8124;
  #L4f8122.  return v0;
  #L4f8124.  return v2;
  #L4f8126.  v0:= 0I;
  #L4f8128.  return v0;
}
