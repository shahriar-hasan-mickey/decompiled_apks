record `io.reactivex.subjects.ReplaySubject$e` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.subjects.ReplaySubject$b` @kind interface {
  `int` `io.reactivex.subjects.ReplaySubject$e.a` @AccessFlag FINAL;
  `int` `io.reactivex.subjects.ReplaySubject$e.b` @AccessFlag ;
  `io.reactivex.subjects.ReplaySubject$a` `io.reactivex.subjects.ReplaySubject$e.c` @AccessFlag VOLATILE;
  `io.reactivex.subjects.ReplaySubject$a` `io.reactivex.subjects.ReplaySubject$e.d` @AccessFlag ;
  `boolean` `io.reactivex.subjects.ReplaySubject$e.e` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.subjects.ReplaySubject$e.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.ReplaySubject$e` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/subjects/ReplaySubject$e;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4f7f18.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f7f1e.  v0:= "maxSize" @kind object;
  #L4f7f22.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4f7f28.  v2:= temp;
  #L4f7f2a.  v1.`io.reactivex.subjects.ReplaySubject$e.a` @type ^`int` := v2;
  #L4f7f2e.  v2:= new `io.reactivex.subjects.ReplaySubject$a`;
  #L4f7f32.  v0:= 0I;
  #L4f7f34.  call `<init>`(v2, v0) @signature `Lio/reactivex/subjects/ReplaySubject$a;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f7f3a.  v1.`io.reactivex.subjects.ReplaySubject$e.d` @type ^`io.reactivex.subjects.ReplaySubject$a` := v2 @kind object;
  #L4f7f3e.  v1.`io.reactivex.subjects.ReplaySubject$e.c` @type ^`io.reactivex.subjects.ReplaySubject$a` := v2 @kind object;
  #L4f7f42.  return @kind void;
}
procedure `void` `a`(`io.reactivex.subjects.ReplaySubject$e` v7 @kind this, `io.reactivex.subjects.ReplaySubject$c` v8 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$e;.a:(Lio/reactivex/subjects/ReplaySubject$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4f7fcc.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f7fd2.  v0:= temp;
  #L4f7fd4.  if v0 == 0 then goto L4f7fda;
  #L4f7fd8.  return @kind void;
  #L4f7fda.  v0:= v8.`io.reactivex.subjects.ReplaySubject$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L4f7fde.  v1:= v8.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` @kind object;
  #L4f7fe2.  v1:= (`io.reactivex.subjects.ReplaySubject$a`) v1 @kind object;
  #L4f7fe6.  v2:= 1I;
  #L4f7fe8.  if v1 != 0 then goto L4f7ff0;
  #L4f7fec.  v1:= v7.`io.reactivex.subjects.ReplaySubject$e.c` @type ^`io.reactivex.subjects.ReplaySubject$a` @kind object;
  #L4f7ff0.  v3:= 1I;
  #L4f7ff2.  v4:= v8.`io.reactivex.subjects.ReplaySubject$c.d` @type ^`boolean` @kind boolean;
  #L4f7ff6.  v5:= 0I;
  #L4f7ff8.  if v4 == 0 then goto L4f8002;
  #L4f7ffc.  v8.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v5 @kind object;
  #L4f8000.  return @kind void;
  #L4f8002.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f8008.  v4:= temp @kind object;
  #L4f800a.  v4:= (`io.reactivex.subjects.ReplaySubject$a`) v4 @kind object;
  #L4f800e.  if v4 != 0 then goto L4f8034;
  #L4f8012.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f8018.  v4:= temp @kind object;
  #L4f801a.  if v4 == 0 then goto L4f8020;
  #L4f801e.  goto L4f7ff2;
  #L4f8020.  v8.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4f8024.  v3:= -v3 @kind int;
  #L4f8026.  call temp:= `addAndGet`(v8, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4f802c.  v3:= temp;
  #L4f802e.  if v3 != 0 then goto L4f7ff2;
  #L4f8032.  return @kind void;
  #L4f8034.  v1:= v4.`io.reactivex.subjects.ReplaySubject$a.a` @type ^`java.lang.Object` @kind object;
  #L4f8038.  v6:= v7.`io.reactivex.subjects.ReplaySubject$e.e` @type ^`boolean` @kind boolean;
  #L4f803c.  if v6 == 0 then goto L4f8078;
  #L4f8040.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f8046.  v6:= temp @kind object;
  #L4f8048.  if v6 != 0 then goto L4f8078;
  #L4f804c.  call temp:= `isComplete`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4f8052.  v3:= temp;
  #L4f8054.  if v3 == 0 then goto L4f8060;
  #L4f8058.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4f805e.  goto L4f806e;
  #L4f8060.  call temp:= `getError`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L4f8066.  v1:= temp @kind object;
  #L4f8068.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f806e.  v8.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v5 @kind object;
  #L4f8072.  v8.`io.reactivex.subjects.ReplaySubject$c.d` @type ^`boolean` := v2 @kind boolean;
  #L4f8076.  return @kind void;
  #L4f8078.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f807e.  v1:= v4 @kind object;
  #L4f8080.  goto L4f7ff2;
}
procedure `void` `add`(`io.reactivex.subjects.ReplaySubject$e` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$e;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f7f54.  v0:= new `io.reactivex.subjects.ReplaySubject$a`;
  #L4f7f58.  call `<init>`(v0, v3) @signature `Lio/reactivex/subjects/ReplaySubject$a;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f7f5e.  v3:= v2.`io.reactivex.subjects.ReplaySubject$e.d` @type ^`io.reactivex.subjects.ReplaySubject$a` @kind object;
  #L4f7f62.  v2.`io.reactivex.subjects.ReplaySubject$e.d` @type ^`io.reactivex.subjects.ReplaySubject$a` := v0 @kind object;
  #L4f7f66.  v1:= v2.`io.reactivex.subjects.ReplaySubject$e.b` @type ^`int`;
  #L4f7f6a.  v1:= v1 + 1;
  #L4f7f6e.  v2.`io.reactivex.subjects.ReplaySubject$e.b` @type ^`int` := v1;
  #L4f7f72.  call `set`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4f7f78.  call `b`(v2) @signature `Lio/reactivex/subjects/ReplaySubject$e;.b:()V` @kind virtual;
  #L4f7f7e.  return @kind void;
}
procedure `void` `b`(`io.reactivex.subjects.ReplaySubject$e` v2 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$e;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4f8094.  v0:= v2.`io.reactivex.subjects.ReplaySubject$e.b` @type ^`int`;
  #L4f8098.  v1:= v2.`io.reactivex.subjects.ReplaySubject$e.a` @type ^`int`;
  #L4f809c.  if v0 <= v1 then goto L4f80bc;
  #L4f80a0.  v0:= v0 + -1;
  #L4f80a4.  v2.`io.reactivex.subjects.ReplaySubject$e.b` @type ^`int` := v0;
  #L4f80a8.  v0:= v2.`io.reactivex.subjects.ReplaySubject$e.c` @type ^`io.reactivex.subjects.ReplaySubject$a` @kind object;
  #L4f80ac.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f80b2.  v0:= temp @kind object;
  #L4f80b4.  v0:= (`io.reactivex.subjects.ReplaySubject$a`) v0 @kind object;
  #L4f80b8.  v2.`io.reactivex.subjects.ReplaySubject$e.c` @type ^`io.reactivex.subjects.ReplaySubject$a` := v0 @kind object;
  #L4f80bc.  return @kind void;
}
procedure `java.lang.Object`[] `c`(`io.reactivex.subjects.ReplaySubject$e` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$e;.c:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f7e9c.  v0:= v5.`io.reactivex.subjects.ReplaySubject$e.c` @type ^`io.reactivex.subjects.ReplaySubject$a` @kind object;
  #L4f7ea0.  call temp:= `size`(v5) @signature `Lio/reactivex/subjects/ReplaySubject$e;.size:()I` @kind virtual;
  #L4f7ea6.  v1:= temp;
  #L4f7ea8.  v2:= 0I;
  #L4f7eaa.  v3:= 0I;
  #L4f7eac.  if v1 != 0 then goto L4f7ebc;
  #L4f7eb0.  v0:= length @variable v6;
  #L4f7eb2.  if v0 == 0 then goto L4f7f06;
  #L4f7eb6.  v6[v3]:= v2 @kind object;
  #L4f7eba.  goto L4f7f06;
  #L4f7ebc.  v4:= length @variable v6;
  #L4f7ebe.  if v4 >= v1 then goto L4f7ede;
  #L4f7ec2.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4f7ec8.  v6:= temp @kind object;
  #L4f7eca.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L4f7ed0.  v6:= temp @kind object;
  #L4f7ed2.  call temp:= `newInstance`(v6, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L4f7ed8.  v6:= temp @kind object;
  #L4f7eda.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L4f7ede.  if v3 == v1 then goto L4f7efc;
  #L4f7ee2.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f7ee8.  v0:= temp @kind object;
  #L4f7eea.  v0:= (`io.reactivex.subjects.ReplaySubject$a`) v0 @kind object;
  #L4f7eee.  v4:= v0.`io.reactivex.subjects.ReplaySubject$a.a` @type ^`java.lang.Object` @kind object;
  #L4f7ef2.  v6[v3]:= v4 @kind object;
  #L4f7ef6.  v3:= v3 + 1;
  #L4f7efa.  goto L4f7ede;
  #L4f7efc.  v0:= length @variable v6;
  #L4f7efe.  if v0 <= v1 then goto L4f7f06;
  #L4f7f02.  v6[v1]:= v2 @kind object;
  #L4f7f06.  return v6 @kind object;
}
procedure `void` `d`(`io.reactivex.subjects.ReplaySubject$e` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$e;.d:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f7f90.  v0:= new `io.reactivex.subjects.ReplaySubject$a`;
  #L4f7f94.  call `<init>`(v0, v4) @signature `Lio/reactivex/subjects/ReplaySubject$a;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f7f9a.  v4:= v3.`io.reactivex.subjects.ReplaySubject$e.d` @type ^`io.reactivex.subjects.ReplaySubject$a` @kind object;
  #L4f7f9e.  v3.`io.reactivex.subjects.ReplaySubject$e.d` @type ^`io.reactivex.subjects.ReplaySubject$a` := v0 @kind object;
  #L4f7fa2.  v1:= v3.`io.reactivex.subjects.ReplaySubject$e.b` @type ^`int`;
  #L4f7fa6.  v2:= 1I;
  #L4f7fa8.  v1:= v1 + v2 @kind int;
  #L4f7faa.  v3.`io.reactivex.subjects.ReplaySubject$e.b` @type ^`int` := v1;
  #L4f7fae.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f7fb4.  v3.`io.reactivex.subjects.ReplaySubject$e.e` @type ^`boolean` := v2 @kind boolean;
  #L4f7fb8.  return @kind void;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.subjects.ReplaySubject$e` v4 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$e;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f7e40.  v0:= v4.`io.reactivex.subjects.ReplaySubject$e.c` @type ^`io.reactivex.subjects.ReplaySubject$a` @kind object;
  #L4f7e44.  v1:= 0I;
  #L4f7e46.  v2:= v1 @kind object;
  #L4f7e48.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f7e4e.  v3:= temp @kind object;
  #L4f7e50.  v3:= (`io.reactivex.subjects.ReplaySubject$a`) v3 @kind object;
  #L4f7e54.  if v3 != 0 then goto L4f7e84;
  #L4f7e58.  v0:= v0.`io.reactivex.subjects.ReplaySubject$a.a` @type ^`java.lang.Object` @kind object;
  #L4f7e5c.  if v0 != 0 then goto L4f7e62;
  #L4f7e60.  return v1 @kind object;
  #L4f7e62.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4f7e68.  v1:= temp;
  #L4f7e6a.  if v1 != 0 then goto L4f7e7e;
  #L4f7e6e.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4f7e74.  v1:= temp;
  #L4f7e76.  if v1 == 0 then goto L4f7e7c;
  #L4f7e7a.  goto L4f7e7e;
  #L4f7e7c.  return v0 @kind object;
  #L4f7e7e.  v0:= v2.`io.reactivex.subjects.ReplaySubject$a.a` @type ^`java.lang.Object` @kind object;
  #L4f7e82.  return v0 @kind object;
  #L4f7e84.  v2:= v0 @kind object;
  #L4f7e86.  v0:= v3 @kind object;
  #L4f7e88.  goto L4f7e48;
}
procedure `int` `size`(`io.reactivex.subjects.ReplaySubject$e` v3 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$e;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f7de4.  v0:= v3.`io.reactivex.subjects.ReplaySubject$e.c` @type ^`io.reactivex.subjects.ReplaySubject$a` @kind object;
  #L4f7de8.  v1:= 0I;
  #L4f7dea.  v2:= 2147483647I;
  #L4f7df0.  if v1 == v2 then goto L4f7e2e;
  #L4f7df4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f7dfa.  v2:= temp @kind object;
  #L4f7dfc.  v2:= (`io.reactivex.subjects.ReplaySubject$a`) v2 @kind object;
  #L4f7e00.  if v2 != 0 then goto L4f7e26;
  #L4f7e04.  v0:= v0.`io.reactivex.subjects.ReplaySubject$a.a` @type ^`java.lang.Object` @kind object;
  #L4f7e08.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4f7e0e.  v2:= temp;
  #L4f7e10.  if v2 != 0 then goto L4f7e20;
  #L4f7e14.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4f7e1a.  v0:= temp;
  #L4f7e1c.  if v0 == 0 then goto L4f7e2e;
  #L4f7e20.  v1:= v1 + -1;
  #L4f7e24.  goto L4f7e2e;
  #L4f7e26.  v1:= v1 + 1;
  #L4f7e2a.  v0:= v2 @kind object;
  #L4f7e2c.  goto L4f7dea;
  #L4f7e2e.  return v1;
}
