record `io.reactivex.subjects.ReplaySubject$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.subjects.ReplaySubject$c.a` @AccessFlag FINAL;
  `io.reactivex.subjects.ReplaySubject` `io.reactivex.subjects.ReplaySubject$c.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.subjects.ReplaySubject$c.c` @AccessFlag ;
  `boolean` `io.reactivex.subjects.ReplaySubject$c.d` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.subjects.ReplaySubject$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.ReplaySubject$c` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.subjects.ReplaySubject` v2 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$c;.<init>:(Lio/reactivex/Observer;Lio/reactivex/subjects/ReplaySubject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f7918.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4f791e.  v0.`io.reactivex.subjects.ReplaySubject$c.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4f7922.  v0.`io.reactivex.subjects.ReplaySubject$c.b` @type ^`io.reactivex.subjects.ReplaySubject` := v2 @kind object;
  #L4f7926.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.subjects.ReplaySubject$c` v1 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f7938.  v0:= v1.`io.reactivex.subjects.ReplaySubject$c.d` @type ^`boolean` @kind boolean;
  #L4f793c.  if v0 != 0 then goto L4f7950;
  #L4f7940.  v0:= 1I;
  #L4f7942.  v1.`io.reactivex.subjects.ReplaySubject$c.d` @type ^`boolean` := v0 @kind boolean;
  #L4f7946.  v0:= v1.`io.reactivex.subjects.ReplaySubject$c.b` @type ^`io.reactivex.subjects.ReplaySubject` @kind object;
  #L4f794a.  call `e`(v0, v1) @signature `Lio/reactivex/subjects/ReplaySubject;.e:(Lio/reactivex/subjects/ReplaySubject$c;)V` @kind virtual;
  #L4f7950.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.subjects.ReplaySubject$c` v1 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f7900.  v0:= v1.`io.reactivex.subjects.ReplaySubject$c.d` @type ^`boolean` @kind boolean;
  #L4f7904.  return v0;
}
