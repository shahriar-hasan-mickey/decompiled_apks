record `io.reactivex.subjects.PublishSubject$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.subjects.PublishSubject$a.a` @AccessFlag FINAL;
  `io.reactivex.subjects.PublishSubject` `io.reactivex.subjects.PublishSubject$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.subjects.PublishSubject$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.PublishSubject$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.subjects.PublishSubject` v2 @kind object) @signature `Lio/reactivex/subjects/PublishSubject$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/subjects/PublishSubject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f7450.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4f7456.  v0.`io.reactivex.subjects.PublishSubject$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4f745a.  v0.`io.reactivex.subjects.PublishSubject$a.b` @type ^`io.reactivex.subjects.PublishSubject` := v2 @kind object;
  #L4f745e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.subjects.PublishSubject$a` v1 @kind this) @signature `Lio/reactivex/subjects/PublishSubject$a;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f749c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4f74a2.  v0:= temp;
  #L4f74a4.  if v0 != 0 then goto L4f74b2;
  #L4f74a8.  v0:= v1.`io.reactivex.subjects.PublishSubject$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4f74ac.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4f74b2.  return @kind void;
}
procedure `void` `b`(`io.reactivex.subjects.PublishSubject$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/subjects/PublishSubject$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f74c4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4f74ca.  v0:= temp;
  #L4f74cc.  if v0 == 0 then goto L4f74d8;
  #L4f74d0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f74d6.  goto L4f74e2;
  #L4f74d8.  v0:= v1.`io.reactivex.subjects.PublishSubject$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4f74dc.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f74e2.  return @kind void;
}
procedure `void` `c`(`io.reactivex.subjects.PublishSubject$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/subjects/PublishSubject$a;.c:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f74f4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4f74fa.  v0:= temp;
  #L4f74fc.  if v0 != 0 then goto L4f750a;
  #L4f7500.  v0:= v1.`io.reactivex.subjects.PublishSubject$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4f7504.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f750a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.subjects.PublishSubject$a` v2 @kind this) @signature `Lio/reactivex/subjects/PublishSubject$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f7470.  v0:= 0I;
  #L4f7472.  v1:= 1I;
  #L4f7474.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4f747a.  v0:= temp;
  #L4f747c.  if v0 == 0 then goto L4f748a;
  #L4f7480.  v0:= v2.`io.reactivex.subjects.PublishSubject$a.b` @type ^`io.reactivex.subjects.PublishSubject` @kind object;
  #L4f7484.  call `e`(v0, v2) @signature `Lio/reactivex/subjects/PublishSubject;.e:(Lio/reactivex/subjects/PublishSubject$a;)V` @kind virtual;
  #L4f748a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.subjects.PublishSubject$a` v1 @kind this) @signature `Lio/reactivex/subjects/PublishSubject$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f7434.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4f743a.  v0:= temp;
  #L4f743c.  return v0;
}
