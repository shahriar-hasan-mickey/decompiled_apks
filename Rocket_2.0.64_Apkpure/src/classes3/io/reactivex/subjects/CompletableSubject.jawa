record `io.reactivex.subjects.CompletableSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Completable` @kind class, `io.reactivex.CompletableObserver` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.CompletableSubject.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.subjects.CompletableSubject.b` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.subjects.CompletableSubject.c` @AccessFlag ;
}
global `io.reactivex.subjects.CompletableSubject$a`[] `@@io.reactivex.subjects.CompletableSubject.d` @AccessFlag STATIC_FINAL;
global `io.reactivex.subjects.CompletableSubject$a`[] `@@io.reactivex.subjects.CompletableSubject.e` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/subjects/CompletableSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f6d40.  v0:= 0I;
  #L4f6d42.  v1:= new `io.reactivex.subjects.CompletableSubject$a`[v0];
  #L4f6d46.  `@@io.reactivex.subjects.CompletableSubject.d` @type ^`io.reactivex.subjects.CompletableSubject$a`[] := v1 @kind object;
  #L4f6d4a.  v0:= new `io.reactivex.subjects.CompletableSubject$a`[v0];
  #L4f6d4e.  `@@io.reactivex.subjects.CompletableSubject.e` @type ^`io.reactivex.subjects.CompletableSubject$a`[] := v0 @kind object;
  #L4f6d52.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subjects.CompletableSubject` v2 @kind this) @signature `Lio/reactivex/subjects/CompletableSubject;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f6d64.  call `<init>`(v2) @signature `Lio/reactivex/Completable;.<init>:()V` @kind direct;
  #L4f6d6a.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4f6d6e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4f6d74.  v2.`io.reactivex.subjects.CompletableSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L4f6d78.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f6d7c.  v1:= `@@io.reactivex.subjects.CompletableSubject.d` @type ^`io.reactivex.subjects.CompletableSubject$a`[] @kind object;
  #L4f6d80.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f6d86.  v2.`io.reactivex.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4f6d8a.  return @kind void;
}
procedure `io.reactivex.subjects.CompletableSubject` `create`() @signature `Lio/reactivex/subjects/CompletableSubject;.create:()Lio/reactivex/subjects/CompletableSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f6cf4.  v0:= new `io.reactivex.subjects.CompletableSubject`;
  #L4f6cf8.  call `<init>`(v0) @signature `Lio/reactivex/subjects/CompletableSubject;.<init>:()V` @kind direct;
  #L4f6cfe.  return v0 @kind object;
}
procedure `boolean` `e`(`io.reactivex.subjects.CompletableSubject` v4 @kind this, `io.reactivex.subjects.CompletableSubject$a` v5 @kind object) @signature `Lio/reactivex/subjects/CompletableSubject;.e:(Lio/reactivex/subjects/CompletableSubject$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f6c08.  v0:= v4.`io.reactivex.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6c0c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f6c12.  v0:= temp @kind object;
  #L4f6c14.  v0:= (`io.reactivex.subjects.CompletableSubject$a`[]) v0 @kind object;
  #L4f6c18.  v1:= `@@io.reactivex.subjects.CompletableSubject.e` @type ^`io.reactivex.subjects.CompletableSubject$a`[] @kind object;
  #L4f6c1c.  v2:= 0I;
  #L4f6c1e.  if v0 != v1 then goto L4f6c24;
  #L4f6c22.  return v2;
  #L4f6c24.  v1:= length @variable v0;
  #L4f6c26.  v3:= v1 + 1;
  #L4f6c2a.  v3:= new `io.reactivex.subjects.CompletableSubject$a`[v3];
  #L4f6c2e.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f6c34.  v3[v1]:= v5 @kind object;
  #L4f6c38.  v1:= v4.`io.reactivex.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6c3c.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f6c42.  v0:= temp;
  #L4f6c44.  if v0 == 0 then goto L4f6c08;
  #L4f6c48.  v5:= 1I;
  #L4f6c4a.  return v5;
}
procedure `void` `f`(`io.reactivex.subjects.CompletableSubject` v6 @kind this, `io.reactivex.subjects.CompletableSubject$a` v7 @kind object) @signature `Lio/reactivex/subjects/CompletableSubject;.f:(Lio/reactivex/subjects/CompletableSubject$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f6e8c.  v0:= v6.`io.reactivex.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6e90.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f6e96.  v0:= temp @kind object;
  #L4f6e98.  v0:= (`io.reactivex.subjects.CompletableSubject$a`[]) v0 @kind object;
  #L4f6e9c.  v1:= length @variable v0;
  #L4f6e9e.  if v1 != 0 then goto L4f6ea4;
  #L4f6ea2.  return @kind void;
  #L4f6ea4.  v2:= -1I;
  #L4f6ea6.  v3:= 0I;
  #L4f6ea8.  v4:= 0I;
  #L4f6eaa.  if v4 >= v1 then goto L4f6ec0;
  #L4f6eae.  v5:= v0[v4] @kind object;
  #L4f6eb2.  if v5 != v7 then goto L4f6eba;
  #L4f6eb6.  v2:= v4;
  #L4f6eb8.  goto L4f6ec0;
  #L4f6eba.  v4:= v4 + 1;
  #L4f6ebe.  goto L4f6eaa;
  #L4f6ec0.  if v2 >= 0 then goto L4f6ec6;
  #L4f6ec4.  return @kind void;
  #L4f6ec6.  v4:= 1I;
  #L4f6ec8.  if v1 != v4 then goto L4f6ed2;
  #L4f6ecc.  v1:= `@@io.reactivex.subjects.CompletableSubject.d` @type ^`io.reactivex.subjects.CompletableSubject$a`[] @kind object;
  #L4f6ed0.  goto L4f6ef0;
  #L4f6ed2.  v5:= v1 + -1;
  #L4f6ed6.  v5:= new `io.reactivex.subjects.CompletableSubject$a`[v5];
  #L4f6eda.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f6ee0.  v3:= v2 + 1;
  #L4f6ee4.  v1:= v1 - v2 @kind int;
  #L4f6ee6.  v1:= v1 - v4 @kind int;
  #L4f6ee8.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f6eee.  v1:= v5 @kind object;
  #L4f6ef0.  v2:= v6.`io.reactivex.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6ef4.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f6efa.  v0:= temp;
  #L4f6efc.  if v0 == 0 then goto L4f6e8c;
  #L4f6f00.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.subjects.CompletableSubject` v2 @kind this) @signature `Lio/reactivex/subjects/CompletableSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f6d10.  v0:= v2.`io.reactivex.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6d14.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f6d1a.  v0:= temp @kind object;
  #L4f6d1c.  v1:= `@@io.reactivex.subjects.CompletableSubject.e` @type ^`io.reactivex.subjects.CompletableSubject$a`[] @kind object;
  #L4f6d20.  if v0 != v1 then goto L4f6d2a;
  #L4f6d24.  v0:= v2.`io.reactivex.subjects.CompletableSubject.c` @type ^`java.lang.Throwable` @kind object;
  #L4f6d28.  return v0 @kind object;
  #L4f6d2a.  v0:= 0I;
  #L4f6d2c.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.subjects.CompletableSubject` v2 @kind this) @signature `Lio/reactivex/subjects/CompletableSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f6c5c.  v0:= v2.`io.reactivex.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6c60.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f6c66.  v0:= temp @kind object;
  #L4f6c68.  v1:= `@@io.reactivex.subjects.CompletableSubject.e` @type ^`io.reactivex.subjects.CompletableSubject$a`[] @kind object;
  #L4f6c6c.  if v0 != v1 then goto L4f6c7c;
  #L4f6c70.  v0:= v2.`io.reactivex.subjects.CompletableSubject.c` @type ^`java.lang.Throwable` @kind object;
  #L4f6c74.  if v0 != 0 then goto L4f6c7c;
  #L4f6c78.  v0:= 1I;
  #L4f6c7a.  goto L4f6c7e;
  #L4f6c7c.  v0:= 0I;
  #L4f6c7e.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.subjects.CompletableSubject` v1 @kind this) @signature `Lio/reactivex/subjects/CompletableSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6c90.  v0:= v1.`io.reactivex.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6c94.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f6c9a.  v0:= temp @kind object;
  #L4f6c9c.  v0:= (`io.reactivex.subjects.CompletableSubject$a`[]) v0 @kind object;
  #L4f6ca0.  v0:= length @variable v0;
  #L4f6ca2.  if v0 == 0 then goto L4f6caa;
  #L4f6ca6.  v0:= 1I;
  #L4f6ca8.  goto L4f6cac;
  #L4f6caa.  v0:= 0I;
  #L4f6cac.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.subjects.CompletableSubject` v2 @kind this) @signature `Lio/reactivex/subjects/CompletableSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f6cc0.  v0:= v2.`io.reactivex.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6cc4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f6cca.  v0:= temp @kind object;
  #L4f6ccc.  v1:= `@@io.reactivex.subjects.CompletableSubject.e` @type ^`io.reactivex.subjects.CompletableSubject$a`[] @kind object;
  #L4f6cd0.  if v0 != v1 then goto L4f6ce0;
  #L4f6cd4.  v0:= v2.`io.reactivex.subjects.CompletableSubject.c` @type ^`java.lang.Throwable` @kind object;
  #L4f6cd8.  if v0 == 0 then goto L4f6ce0;
  #L4f6cdc.  v0:= 1I;
  #L4f6cde.  goto L4f6ce2;
  #L4f6ce0.  v0:= 0I;
  #L4f6ce2.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.subjects.CompletableSubject` v4 @kind this) @signature `Lio/reactivex/subjects/CompletableSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f6d9c.  v0:= v4.`io.reactivex.subjects.CompletableSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f6da0.  v1:= 0I;
  #L4f6da2.  v2:= 1I;
  #L4f6da4.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4f6daa.  v0:= temp;
  #L4f6dac.  if v0 == 0 then goto L4f6dde;
  #L4f6db0.  v0:= v4.`io.reactivex.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6db4.  v2:= `@@io.reactivex.subjects.CompletableSubject.e` @type ^`io.reactivex.subjects.CompletableSubject$a`[] @kind object;
  #L4f6db8.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f6dbe.  v0:= temp @kind object;
  #L4f6dc0.  v0:= (`io.reactivex.subjects.CompletableSubject$a`[]) v0 @kind object;
  #L4f6dc4.  v2:= length @variable v0;
  #L4f6dc6.  if v1 >= v2 then goto L4f6dde;
  #L4f6dca.  v3:= v0[v1] @kind object;
  #L4f6dce.  v3:= v3.`io.reactivex.subjects.CompletableSubject$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L4f6dd2.  call `onComplete`(v3) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L4f6dd8.  v1:= v1 + 1;
  #L4f6ddc.  goto L4f6dc6;
  #L4f6dde.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.subjects.CompletableSubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/subjects/CompletableSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f6df0.  if v5 != 0 then goto L4f6e02;
  #L4f6df4.  v5:= new `java.lang.NullPointerException`;
  #L4f6df8.  v0:= "Null errors are not allowed in 2.x" @kind object;
  #L4f6dfc.  call `<init>`(v5, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f6e02.  v0:= v4.`io.reactivex.subjects.CompletableSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f6e06.  v1:= 0I;
  #L4f6e08.  v2:= 1I;
  #L4f6e0a.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4f6e10.  v0:= temp;
  #L4f6e12.  if v0 == 0 then goto L4f6e48;
  #L4f6e16.  v4.`io.reactivex.subjects.CompletableSubject.c` @type ^`java.lang.Throwable` := v5 @kind object;
  #L4f6e1a.  v0:= v4.`io.reactivex.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6e1e.  v2:= `@@io.reactivex.subjects.CompletableSubject.e` @type ^`io.reactivex.subjects.CompletableSubject$a`[] @kind object;
  #L4f6e22.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f6e28.  v0:= temp @kind object;
  #L4f6e2a.  v0:= (`io.reactivex.subjects.CompletableSubject$a`[]) v0 @kind object;
  #L4f6e2e.  v2:= length @variable v0;
  #L4f6e30.  if v1 >= v2 then goto L4f6e4e;
  #L4f6e34.  v3:= v0[v1] @kind object;
  #L4f6e38.  v3:= v3.`io.reactivex.subjects.CompletableSubject$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L4f6e3c.  call `onError`(v3, v5) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f6e42.  v1:= v1 + 1;
  #L4f6e46.  goto L4f6e30;
  #L4f6e48.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f6e4e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subjects.CompletableSubject` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/subjects/CompletableSubject;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f6e60.  v0:= v2.`io.reactivex.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6e64.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f6e6a.  v0:= temp @kind object;
  #L4f6e6c.  v1:= `@@io.reactivex.subjects.CompletableSubject.e` @type ^`io.reactivex.subjects.CompletableSubject$a`[] @kind object;
  #L4f6e70.  if v0 != v1 then goto L4f6e7a;
  #L4f6e74.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f6e7a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.subjects.CompletableSubject` v2 @kind this, `io.reactivex.CompletableObserver` v3 @kind object) @signature `Lio/reactivex/subjects/CompletableSubject;.subscribeActual:(Lio/reactivex/CompletableObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4f6f14.  v0:= new `io.reactivex.subjects.CompletableSubject$a`;
  #L4f6f18.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/subjects/CompletableSubject$a;.<init>:(Lio/reactivex/CompletableObserver;Lio/reactivex/subjects/CompletableSubject;)V` @kind direct;
  #L4f6f1e.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4f6f24.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/subjects/CompletableSubject;.e:(Lio/reactivex/subjects/CompletableSubject$a;)Z` @kind virtual;
  #L4f6f2a.  v1:= temp;
  #L4f6f2c.  if v1 == 0 then goto L4f6f44;
  #L4f6f30.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/subjects/CompletableSubject$a;.isDisposed:()Z` @kind virtual;
  #L4f6f36.  v3:= temp;
  #L4f6f38.  if v3 == 0 then goto L4f6f5a;
  #L4f6f3c.  call `f`(v2, v0) @signature `Lio/reactivex/subjects/CompletableSubject;.f:(Lio/reactivex/subjects/CompletableSubject$a;)V` @kind virtual;
  #L4f6f42.  goto L4f6f5a;
  #L4f6f44.  v0:= v2.`io.reactivex.subjects.CompletableSubject.c` @type ^`java.lang.Throwable` @kind object;
  #L4f6f48.  if v0 == 0 then goto L4f6f54;
  #L4f6f4c.  call `onError`(v3, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f6f52.  goto L4f6f5a;
  #L4f6f54.  call `onComplete`(v3) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L4f6f5a.  return @kind void;
}
