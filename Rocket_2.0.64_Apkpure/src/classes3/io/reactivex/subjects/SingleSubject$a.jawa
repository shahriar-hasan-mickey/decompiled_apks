record `io.reactivex.subjects.SingleSubject$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.subjects.SingleSubject$a.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.subjects.SingleSubject$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.SingleSubject$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `io.reactivex.subjects.SingleSubject` v2 @kind object) @signature `Lio/reactivex/subjects/SingleSubject$a;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/subjects/SingleSubject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f8ca4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f8caa.  v0.`io.reactivex.subjects.SingleSubject$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L4f8cae.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f8cb4.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.subjects.SingleSubject$a` v1 @kind this) @signature `Lio/reactivex/subjects/SingleSubject$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f8cc8.  v0:= 0I;
  #L4f8cca.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f8cd0.  v0:= temp @kind object;
  #L4f8cd2.  v0:= (`io.reactivex.subjects.SingleSubject`) v0 @kind object;
  #L4f8cd6.  if v0 == 0 then goto L4f8ce0;
  #L4f8cda.  call `d`(v0, v1) @signature `Lio/reactivex/subjects/SingleSubject;.d:(Lio/reactivex/subjects/SingleSubject$a;)V` @kind virtual;
  #L4f8ce0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.subjects.SingleSubject$a` v1 @kind this) @signature `Lio/reactivex/subjects/SingleSubject$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f8c80.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f8c86.  v0:= temp @kind object;
  #L4f8c88.  if v0 != 0 then goto L4f8c90;
  #L4f8c8c.  v0:= 1I;
  #L4f8c8e.  goto L4f8c92;
  #L4f8c90.  v0:= 0I;
  #L4f8c92.  return v0;
}
