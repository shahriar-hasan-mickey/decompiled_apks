record `io.reactivex.subjects.PublishSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.subjects.Subject` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.PublishSubject.a` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.subjects.PublishSubject.b` @AccessFlag ;
}
global `io.reactivex.subjects.PublishSubject$a`[] `@@io.reactivex.subjects.PublishSubject.c` @AccessFlag STATIC_FINAL;
global `io.reactivex.subjects.PublishSubject$a`[] `@@io.reactivex.subjects.PublishSubject.d` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/subjects/PublishSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f7654.  v0:= 0I;
  #L4f7656.  v1:= new `io.reactivex.subjects.PublishSubject$a`[v0];
  #L4f765a.  `@@io.reactivex.subjects.PublishSubject.c` @type ^`io.reactivex.subjects.PublishSubject$a`[] := v1 @kind object;
  #L4f765e.  v0:= new `io.reactivex.subjects.PublishSubject$a`[v0];
  #L4f7662.  `@@io.reactivex.subjects.PublishSubject.d` @type ^`io.reactivex.subjects.PublishSubject$a`[] := v0 @kind object;
  #L4f7666.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subjects.PublishSubject` v2 @kind this) @signature `Lio/reactivex/subjects/PublishSubject;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f7678.  call `<init>`(v2) @signature `Lio/reactivex/subjects/Subject;.<init>:()V` @kind direct;
  #L4f767e.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f7682.  v1:= `@@io.reactivex.subjects.PublishSubject.d` @type ^`io.reactivex.subjects.PublishSubject$a`[] @kind object;
  #L4f7686.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f768c.  v2.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4f7690.  return @kind void;
}
procedure `io.reactivex.subjects.PublishSubject` `create`() @signature `Lio/reactivex/subjects/PublishSubject;.create:()Lio/reactivex/subjects/PublishSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f7608.  v0:= new `io.reactivex.subjects.PublishSubject`;
  #L4f760c.  call `<init>`(v0) @signature `Lio/reactivex/subjects/PublishSubject;.<init>:()V` @kind direct;
  #L4f7612.  return v0 @kind object;
}
procedure `boolean` `d`(`io.reactivex.subjects.PublishSubject` v4 @kind this, `io.reactivex.subjects.PublishSubject$a` v5 @kind object) @signature `Lio/reactivex/subjects/PublishSubject;.d:(Lio/reactivex/subjects/PublishSubject$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f751c.  v0:= v4.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f7520.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f7526.  v0:= temp @kind object;
  #L4f7528.  v0:= (`io.reactivex.subjects.PublishSubject$a`[]) v0 @kind object;
  #L4f752c.  v1:= `@@io.reactivex.subjects.PublishSubject.c` @type ^`io.reactivex.subjects.PublishSubject$a`[] @kind object;
  #L4f7530.  v2:= 0I;
  #L4f7532.  if v0 != v1 then goto L4f7538;
  #L4f7536.  return v2;
  #L4f7538.  v1:= length @variable v0;
  #L4f753a.  v3:= v1 + 1;
  #L4f753e.  v3:= new `io.reactivex.subjects.PublishSubject$a`[v3];
  #L4f7542.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f7548.  v3[v1]:= v5 @kind object;
  #L4f754c.  v1:= v4.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f7550.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f7556.  v0:= temp;
  #L4f7558.  if v0 == 0 then goto L4f751c;
  #L4f755c.  v5:= 1I;
  #L4f755e.  return v5;
}
procedure `void` `e`(`io.reactivex.subjects.PublishSubject` v6 @kind this, `io.reactivex.subjects.PublishSubject$a` v7 @kind object) @signature `Lio/reactivex/subjects/PublishSubject;.e:(Lio/reactivex/subjects/PublishSubject$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f77f8.  v0:= v6.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f77fc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f7802.  v0:= temp @kind object;
  #L4f7804.  v0:= (`io.reactivex.subjects.PublishSubject$a`[]) v0 @kind object;
  #L4f7808.  v1:= `@@io.reactivex.subjects.PublishSubject.c` @type ^`io.reactivex.subjects.PublishSubject$a`[] @kind object;
  #L4f780c.  if v0 == v1 then goto L4f7878;
  #L4f7810.  v1:= `@@io.reactivex.subjects.PublishSubject.d` @type ^`io.reactivex.subjects.PublishSubject$a`[] @kind object;
  #L4f7814.  if v0 != v1 then goto L4f781a;
  #L4f7818.  goto L4f7878;
  #L4f781a.  v1:= length @variable v0;
  #L4f781c.  v2:= -1I;
  #L4f781e.  v3:= 0I;
  #L4f7820.  v4:= 0I;
  #L4f7822.  if v4 >= v1 then goto L4f7838;
  #L4f7826.  v5:= v0[v4] @kind object;
  #L4f782a.  if v5 != v7 then goto L4f7832;
  #L4f782e.  v2:= v4;
  #L4f7830.  goto L4f7838;
  #L4f7832.  v4:= v4 + 1;
  #L4f7836.  goto L4f7822;
  #L4f7838.  if v2 >= 0 then goto L4f783e;
  #L4f783c.  return @kind void;
  #L4f783e.  v4:= 1I;
  #L4f7840.  if v1 != v4 then goto L4f784a;
  #L4f7844.  v1:= `@@io.reactivex.subjects.PublishSubject.d` @type ^`io.reactivex.subjects.PublishSubject$a`[] @kind object;
  #L4f7848.  goto L4f7868;
  #L4f784a.  v5:= v1 + -1;
  #L4f784e.  v5:= new `io.reactivex.subjects.PublishSubject$a`[v5];
  #L4f7852.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f7858.  v3:= v2 + 1;
  #L4f785c.  v1:= v1 - v2 @kind int;
  #L4f785e.  v1:= v1 - v4 @kind int;
  #L4f7860.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f7866.  v1:= v5 @kind object;
  #L4f7868.  v2:= v6.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f786c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f7872.  v0:= temp;
  #L4f7874.  if v0 == 0 then goto L4f77f8;
  #L4f7878.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.subjects.PublishSubject` v2 @kind this) @signature `Lio/reactivex/subjects/PublishSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f7624.  v0:= v2.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f7628.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f762e.  v0:= temp @kind object;
  #L4f7630.  v1:= `@@io.reactivex.subjects.PublishSubject.c` @type ^`io.reactivex.subjects.PublishSubject$a`[] @kind object;
  #L4f7634.  if v0 != v1 then goto L4f763e;
  #L4f7638.  v0:= v2.`io.reactivex.subjects.PublishSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L4f763c.  return v0 @kind object;
  #L4f763e.  v0:= 0I;
  #L4f7640.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.subjects.PublishSubject` v2 @kind this) @signature `Lio/reactivex/subjects/PublishSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f7570.  v0:= v2.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f7574.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f757a.  v0:= temp @kind object;
  #L4f757c.  v1:= `@@io.reactivex.subjects.PublishSubject.c` @type ^`io.reactivex.subjects.PublishSubject$a`[] @kind object;
  #L4f7580.  if v0 != v1 then goto L4f7590;
  #L4f7584.  v0:= v2.`io.reactivex.subjects.PublishSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L4f7588.  if v0 != 0 then goto L4f7590;
  #L4f758c.  v0:= 1I;
  #L4f758e.  goto L4f7592;
  #L4f7590.  v0:= 0I;
  #L4f7592.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.subjects.PublishSubject` v1 @kind this) @signature `Lio/reactivex/subjects/PublishSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f75a4.  v0:= v1.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f75a8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f75ae.  v0:= temp @kind object;
  #L4f75b0.  v0:= (`io.reactivex.subjects.PublishSubject$a`[]) v0 @kind object;
  #L4f75b4.  v0:= length @variable v0;
  #L4f75b6.  if v0 == 0 then goto L4f75be;
  #L4f75ba.  v0:= 1I;
  #L4f75bc.  goto L4f75c0;
  #L4f75be.  v0:= 0I;
  #L4f75c0.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.subjects.PublishSubject` v2 @kind this) @signature `Lio/reactivex/subjects/PublishSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f75d4.  v0:= v2.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f75d8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f75de.  v0:= temp @kind object;
  #L4f75e0.  v1:= `@@io.reactivex.subjects.PublishSubject.c` @type ^`io.reactivex.subjects.PublishSubject$a`[] @kind object;
  #L4f75e4.  if v0 != v1 then goto L4f75f4;
  #L4f75e8.  v0:= v2.`io.reactivex.subjects.PublishSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L4f75ec.  if v0 == 0 then goto L4f75f4;
  #L4f75f0.  v0:= 1I;
  #L4f75f2.  goto L4f75f6;
  #L4f75f4.  v0:= 0I;
  #L4f75f6.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.subjects.PublishSubject` v4 @kind this) @signature `Lio/reactivex/subjects/PublishSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f76a4.  v0:= v4.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f76a8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f76ae.  v0:= temp @kind object;
  #L4f76b0.  v1:= `@@io.reactivex.subjects.PublishSubject.c` @type ^`io.reactivex.subjects.PublishSubject$a`[] @kind object;
  #L4f76b4.  if v0 != v1 then goto L4f76ba;
  #L4f76b8.  return @kind void;
  #L4f76ba.  v0:= v4.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f76be.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f76c4.  v0:= temp @kind object;
  #L4f76c6.  v0:= (`io.reactivex.subjects.PublishSubject$a`[]) v0 @kind object;
  #L4f76ca.  v1:= length @variable v0;
  #L4f76cc.  v2:= 0I;
  #L4f76ce.  if v2 >= v1 then goto L4f76e2;
  #L4f76d2.  v3:= v0[v2] @kind object;
  #L4f76d6.  call `a`(v3) @signature `Lio/reactivex/subjects/PublishSubject$a;.a:()V` @kind virtual;
  #L4f76dc.  v2:= v2 + 1;
  #L4f76e0.  goto L4f76ce;
  #L4f76e2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.subjects.PublishSubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/subjects/PublishSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f76f4.  v0:= v4.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f76f8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f76fe.  v0:= temp @kind object;
  #L4f7700.  v1:= `@@io.reactivex.subjects.PublishSubject.c` @type ^`io.reactivex.subjects.PublishSubject$a`[] @kind object;
  #L4f7704.  if v0 != v1 then goto L4f7710;
  #L4f7708.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f770e.  return @kind void;
  #L4f7710.  if v5 != 0 then goto L4f7722;
  #L4f7714.  v5:= new `java.lang.NullPointerException`;
  #L4f7718.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L4f771c.  call `<init>`(v5, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f7722.  v4.`io.reactivex.subjects.PublishSubject.b` @type ^`java.lang.Throwable` := v5 @kind object;
  #L4f7726.  v0:= v4.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f772a.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f7730.  v0:= temp @kind object;
  #L4f7732.  v0:= (`io.reactivex.subjects.PublishSubject$a`[]) v0 @kind object;
  #L4f7736.  v1:= length @variable v0;
  #L4f7738.  v2:= 0I;
  #L4f773a.  if v2 >= v1 then goto L4f774e;
  #L4f773e.  v3:= v0[v2] @kind object;
  #L4f7742.  call `b`(v3, v5) @signature `Lio/reactivex/subjects/PublishSubject$a;.b:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4f7748.  v2:= v2 + 1;
  #L4f774c.  goto L4f773a;
  #L4f774e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.subjects.PublishSubject` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/subjects/PublishSubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f7760.  v0:= v4.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f7764.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f776a.  v0:= temp @kind object;
  #L4f776c.  v1:= `@@io.reactivex.subjects.PublishSubject.c` @type ^`io.reactivex.subjects.PublishSubject$a`[] @kind object;
  #L4f7770.  if v0 != v1 then goto L4f7776;
  #L4f7774.  return @kind void;
  #L4f7776.  if v5 != 0 then goto L4f7790;
  #L4f777a.  v5:= new `java.lang.NullPointerException`;
  #L4f777e.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L4f7782.  call `<init>`(v5, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f7788.  call `onError`(v4, v5) @signature `Lio/reactivex/subjects/PublishSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4f778e.  return @kind void;
  #L4f7790.  v0:= v4.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f7794.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f779a.  v0:= temp @kind object;
  #L4f779c.  v0:= (`io.reactivex.subjects.PublishSubject$a`[]) v0 @kind object;
  #L4f77a0.  v1:= length @variable v0;
  #L4f77a2.  v2:= 0I;
  #L4f77a4.  if v2 >= v1 then goto L4f77b8;
  #L4f77a8.  v3:= v0[v2] @kind object;
  #L4f77ac.  call `c`(v3, v5) @signature `Lio/reactivex/subjects/PublishSubject$a;.c:(Ljava/lang/Object;)V` @kind virtual;
  #L4f77b2.  v2:= v2 + 1;
  #L4f77b6.  goto L4f77a4;
  #L4f77b8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subjects.PublishSubject` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/subjects/PublishSubject;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f77cc.  v0:= v2.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f77d0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f77d6.  v0:= temp @kind object;
  #L4f77d8.  v1:= `@@io.reactivex.subjects.PublishSubject.c` @type ^`io.reactivex.subjects.PublishSubject$a`[] @kind object;
  #L4f77dc.  if v0 != v1 then goto L4f77e6;
  #L4f77e0.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f77e6.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.subjects.PublishSubject` v2 @kind this, `io.reactivex.Observer` v3 @kind object) @signature `Lio/reactivex/subjects/PublishSubject;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f788c.  v0:= new `io.reactivex.subjects.PublishSubject$a`;
  #L4f7890.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/subjects/PublishSubject$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/subjects/PublishSubject;)V` @kind direct;
  #L4f7896.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4f789c.  call temp:= `d`(v2, v0) @signature `Lio/reactivex/subjects/PublishSubject;.d:(Lio/reactivex/subjects/PublishSubject$a;)Z` @kind virtual;
  #L4f78a2.  v1:= temp;
  #L4f78a4.  if v1 == 0 then goto L4f78bc;
  #L4f78a8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/subjects/PublishSubject$a;.isDisposed:()Z` @kind virtual;
  #L4f78ae.  v3:= temp;
  #L4f78b0.  if v3 == 0 then goto L4f78d2;
  #L4f78b4.  call `e`(v2, v0) @signature `Lio/reactivex/subjects/PublishSubject;.e:(Lio/reactivex/subjects/PublishSubject$a;)V` @kind virtual;
  #L4f78ba.  goto L4f78d2;
  #L4f78bc.  v0:= v2.`io.reactivex.subjects.PublishSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L4f78c0.  if v0 == 0 then goto L4f78cc;
  #L4f78c4.  call `onError`(v3, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f78ca.  goto L4f78d2;
  #L4f78cc.  call `onComplete`(v3) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4f78d2.  return @kind void;
}
