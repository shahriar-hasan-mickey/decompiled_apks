record `io.reactivex.subjects.MaybeSubject$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.subjects.MaybeSubject$a.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.subjects.MaybeSubject$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.MaybeSubject$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.subjects.MaybeSubject` v2 @kind object) @signature `Lio/reactivex/subjects/MaybeSubject$a;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/subjects/MaybeSubject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f6f90.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f6f96.  v0.`io.reactivex.subjects.MaybeSubject$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L4f6f9a.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f6fa0.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.subjects.MaybeSubject$a` v1 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6fb4.  v0:= 0I;
  #L4f6fb6.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f6fbc.  v0:= temp @kind object;
  #L4f6fbe.  v0:= (`io.reactivex.subjects.MaybeSubject`) v0 @kind object;
  #L4f6fc2.  if v0 == 0 then goto L4f6fcc;
  #L4f6fc6.  call `b`(v0, v1) @signature `Lio/reactivex/subjects/MaybeSubject;.b:(Lio/reactivex/subjects/MaybeSubject$a;)V` @kind virtual;
  #L4f6fcc.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.subjects.MaybeSubject$a` v1 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6f6c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f6f72.  v0:= temp @kind object;
  #L4f6f74.  if v0 != 0 then goto L4f6f7c;
  #L4f6f78.  v0:= 1I;
  #L4f6f7a.  goto L4f6f7e;
  #L4f6f7c.  v0:= 0I;
  #L4f6f7e.  return v0;
}
