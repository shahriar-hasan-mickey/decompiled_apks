record `io.reactivex.subjects.BehaviorSubject$a` @kind class @AccessFlag FINAL extends `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.internal.util.AppendOnlyLinkedArrayList$NonThrowingPredicate` @kind interface {
  `io.reactivex.Observer` `io.reactivex.subjects.BehaviorSubject$a.a` @AccessFlag FINAL;
  `io.reactivex.subjects.BehaviorSubject` `io.reactivex.subjects.BehaviorSubject$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.subjects.BehaviorSubject$a.c` @AccessFlag ;
  `boolean` `io.reactivex.subjects.BehaviorSubject$a.d` @AccessFlag ;
  `io.reactivex.internal.util.AppendOnlyLinkedArrayList` `io.reactivex.subjects.BehaviorSubject$a.e` @AccessFlag ;
  `boolean` `io.reactivex.subjects.BehaviorSubject$a.f` @AccessFlag ;
  `boolean` `io.reactivex.subjects.BehaviorSubject$a.g` @AccessFlag VOLATILE;
  `long` `io.reactivex.subjects.BehaviorSubject$a.h` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.subjects.BehaviorSubject$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.subjects.BehaviorSubject` v2 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/subjects/BehaviorSubject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f6364.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4f636a.  v0.`io.reactivex.subjects.BehaviorSubject$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4f636e.  v0.`io.reactivex.subjects.BehaviorSubject$a.b` @type ^`io.reactivex.subjects.BehaviorSubject` := v2 @kind object;
  #L4f6372.  return @kind void;
}
procedure `void` `a`(`io.reactivex.subjects.BehaviorSubject$a` v4 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f63b0.  v0:= v4.`io.reactivex.subjects.BehaviorSubject$a.g` @type ^`boolean` @kind boolean;
  #L4f63b4.  if v0 == 0 then goto L4f63ba;
  #L4f63b8.  return @kind void;
  #L4f63ba.  @monitorenter v4
  #L4f63bc.  v0:= v4.`io.reactivex.subjects.BehaviorSubject$a.g` @type ^`boolean` @kind boolean;
  #L4f63c0.  if v0 == 0 then goto L4f63c8;
  #L4f63c4.  @monitorexit v4
  #L4f63c6.  return @kind void;
  #L4f63c8.  v0:= v4.`io.reactivex.subjects.BehaviorSubject$a.c` @type ^`boolean` @kind boolean;
  #L4f63cc.  if v0 == 0 then goto L4f63d4;
  #L4f63d0.  @monitorexit v4
  #L4f63d2.  return @kind void;
  #L4f63d4.  v0:= v4.`io.reactivex.subjects.BehaviorSubject$a.b` @type ^`io.reactivex.subjects.BehaviorSubject` @kind object;
  #L4f63d8.  v1:= v0.`io.reactivex.subjects.BehaviorSubject.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4f63dc.  call `lock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L4f63e2.  v2:= v0.`io.reactivex.subjects.BehaviorSubject.g` @type ^`long` @kind wide;
  #L4f63e6.  v4.`io.reactivex.subjects.BehaviorSubject$a.h` @type ^`long` := v2 @kind wide;
  #L4f63ea.  v0:= v0.`io.reactivex.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f63ee.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f63f4.  v0:= temp @kind object;
  #L4f63f6.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L4f63fc.  v1:= 1I;
  #L4f63fe.  if v0 == 0 then goto L4f6406;
  #L4f6402.  v2:= 1I;
  #L4f6404.  goto L4f6408;
  #L4f6406.  v2:= 0I;
  #L4f6408.  v4.`io.reactivex.subjects.BehaviorSubject$a.d` @type ^`boolean` := v2 @kind boolean;
  #L4f640c.  v4.`io.reactivex.subjects.BehaviorSubject$a.c` @type ^`boolean` := v1 @kind boolean;
  #L4f6410.  @monitorexit v4
  #L4f6412.  if v0 == 0 then goto L4f642a;
  #L4f6416.  call temp:= `test`(v4, v0) @signature `Lio/reactivex/subjects/BehaviorSubject$a;.test:(Ljava/lang/Object;)Z` @kind virtual;
  #L4f641c.  v0:= temp;
  #L4f641e.  if v0 == 0 then goto L4f6424;
  #L4f6422.  return @kind void;
  #L4f6424.  call `b`(v4) @signature `Lio/reactivex/subjects/BehaviorSubject$a;.b:()V` @kind virtual;
  #L4f642a.  return @kind void;
  #L4f642c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f642e.  @monitorexit v4
  #L4f6430.  throw v0;
  catch `java.lang.Throwable` @[L4f63bc..L4f6412] goto L4f642c;
  catch `java.lang.Throwable` @[L4f642e..L4f6430] goto L4f642c;
}
procedure `void` `b`(`io.reactivex.subjects.BehaviorSubject$a` v2 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4f6458.  v0:= v2.`io.reactivex.subjects.BehaviorSubject$a.g` @type ^`boolean` @kind boolean;
  #L4f645c.  if v0 == 0 then goto L4f6462;
  #L4f6460.  return @kind void;
  #L4f6462.  @monitorenter v2
  #L4f6464.  v0:= v2.`io.reactivex.subjects.BehaviorSubject$a.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L4f6468.  if v0 != 0 then goto L4f6476;
  #L4f646c.  v0:= 0I;
  #L4f646e.  v2.`io.reactivex.subjects.BehaviorSubject$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4f6472.  @monitorexit v2
  #L4f6474.  return @kind void;
  #L4f6476.  v1:= 0I;
  #L4f6478.  v2.`io.reactivex.subjects.BehaviorSubject$a.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v1 @kind object;
  #L4f647c.  @monitorexit v2
  #L4f647e.  call `forEachWhile`(v0, v2) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.forEachWhile:(Lio/reactivex/internal/util/AppendOnlyLinkedArrayList$NonThrowingPredicate;)V` @kind virtual;
  #L4f6484.  goto L4f6458;
  #L4f6486.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f6488.  @monitorexit v2
  #L4f648a.  throw v0;
  catch `java.lang.Throwable` @[L4f6464..L4f647e] goto L4f6486;
  catch `java.lang.Throwable` @[L4f6488..L4f648a] goto L4f6486;
}
procedure `void` `c`(`io.reactivex.subjects.BehaviorSubject$a` v3 @kind this, `java.lang.Object` v4 @kind object, `long` v5 ) @signature `Lio/reactivex/subjects/BehaviorSubject$a;.c:(Ljava/lang/Object;J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4f64b0.  v0:= v3.`io.reactivex.subjects.BehaviorSubject$a.g` @type ^`boolean` @kind boolean;
  #L4f64b4.  if v0 == 0 then goto L4f64ba;
  #L4f64b8.  return @kind void;
  #L4f64ba.  v0:= v3.`io.reactivex.subjects.BehaviorSubject$a.f` @type ^`boolean` @kind boolean;
  #L4f64be.  if v0 != 0 then goto L4f651e;
  #L4f64c2.  @monitorenter v3
  #L4f64c4.  v0:= v3.`io.reactivex.subjects.BehaviorSubject$a.g` @type ^`boolean` @kind boolean;
  #L4f64c8.  if v0 == 0 then goto L4f64d0;
  #L4f64cc.  @monitorexit v3
  #L4f64ce.  return @kind void;
  #L4f64d0.  v0:= v3.`io.reactivex.subjects.BehaviorSubject$a.h` @type ^`long` @kind wide;
  #L4f64d4.  v2:= lcmp(v0, v5);
  #L4f64d8.  if v2 != 0 then goto L4f64e0;
  #L4f64dc.  @monitorexit v3
  #L4f64de.  return @kind void;
  #L4f64e0.  v5:= v3.`io.reactivex.subjects.BehaviorSubject$a.d` @type ^`boolean` @kind boolean;
  #L4f64e4.  if v5 == 0 then goto L4f650a;
  #L4f64e8.  v5:= v3.`io.reactivex.subjects.BehaviorSubject$a.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L4f64ec.  if v5 != 0 then goto L4f6500;
  #L4f64f0.  v5:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L4f64f4.  v6:= 4I;
  #L4f64f6.  call `<init>`(v5, v6) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L4f64fc.  v3.`io.reactivex.subjects.BehaviorSubject$a.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v5 @kind object;
  #L4f6500.  call `add`(v5, v4) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L4f6506.  @monitorexit v3
  #L4f6508.  return @kind void;
  #L4f650a.  v5:= 1I;
  #L4f650c.  v3.`io.reactivex.subjects.BehaviorSubject$a.c` @type ^`boolean` := v5 @kind boolean;
  #L4f6510.  @monitorexit v3
  #L4f6512.  v3.`io.reactivex.subjects.BehaviorSubject$a.f` @type ^`boolean` := v5 @kind boolean;
  #L4f6516.  goto L4f651e;
  #L4f6518.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f651a.  @monitorexit v3
  #L4f651c.  throw v4;
  #L4f651e.  call temp:= `test`(v3, v4) @signature `Lio/reactivex/subjects/BehaviorSubject$a;.test:(Ljava/lang/Object;)Z` @kind virtual;
  #L4f6524.  return @kind void;
  catch `java.lang.Throwable` @[L4f64c4..L4f6512] goto L4f6518;
  catch `java.lang.Throwable` @[L4f651a..L4f651c] goto L4f6518;
}
procedure `void` `dispose`(`io.reactivex.subjects.BehaviorSubject$a` v1 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6384.  v0:= v1.`io.reactivex.subjects.BehaviorSubject$a.g` @type ^`boolean` @kind boolean;
  #L4f6388.  if v0 != 0 then goto L4f639c;
  #L4f638c.  v0:= 1I;
  #L4f638e.  v1.`io.reactivex.subjects.BehaviorSubject$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4f6392.  v0:= v1.`io.reactivex.subjects.BehaviorSubject$a.b` @type ^`io.reactivex.subjects.BehaviorSubject` @kind object;
  #L4f6396.  call `e`(v0, v1) @signature `Lio/reactivex/subjects/BehaviorSubject;.e:(Lio/reactivex/subjects/BehaviorSubject$a;)V` @kind virtual;
  #L4f639c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.subjects.BehaviorSubject$a` v1 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6318.  v0:= v1.`io.reactivex.subjects.BehaviorSubject$a.g` @type ^`boolean` @kind boolean;
  #L4f631c.  return v0;
}
procedure `boolean` `test`(`io.reactivex.subjects.BehaviorSubject$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject$a;.test:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6330.  v0:= v1.`io.reactivex.subjects.BehaviorSubject$a.g` @type ^`boolean` @kind boolean;
  #L4f6334.  if v0 != 0 then goto L4f634e;
  #L4f6338.  v0:= v1.`io.reactivex.subjects.BehaviorSubject$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4f633c.  call temp:= `accept`(v2, v0) @signature `Lio/reactivex/internal/util/NotificationLite;.accept:(Ljava/lang/Object;Lio/reactivex/Observer;)Z` @kind static;
  #L4f6342.  v2:= temp;
  #L4f6344.  if v2 == 0 then goto L4f634a;
  #L4f6348.  goto L4f634e;
  #L4f634a.  v2:= 0I;
  #L4f634c.  goto L4f6350;
  #L4f634e.  v2:= 1I;
  #L4f6350.  return v2;
}
