record `io.reactivex.subjects.ReplaySubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.subjects.Subject` @kind class {
  `io.reactivex.subjects.ReplaySubject$b` `io.reactivex.subjects.ReplaySubject.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.ReplaySubject.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.subjects.ReplaySubject.c` @AccessFlag ;
}
global `io.reactivex.subjects.ReplaySubject$c`[] `@@io.reactivex.subjects.ReplaySubject.d` @AccessFlag STATIC_FINAL;
global `io.reactivex.subjects.ReplaySubject$c`[] `@@io.reactivex.subjects.ReplaySubject.e` @AccessFlag STATIC_FINAL;
global `java.lang.Object`[] `@@io.reactivex.subjects.ReplaySubject.f` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/subjects/ReplaySubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f8680.  v0:= 0I;
  #L4f8682.  v1:= new `io.reactivex.subjects.ReplaySubject$c`[v0];
  #L4f8686.  `@@io.reactivex.subjects.ReplaySubject.d` @type ^`io.reactivex.subjects.ReplaySubject$c`[] := v1 @kind object;
  #L4f868a.  v1:= new `io.reactivex.subjects.ReplaySubject$c`[v0];
  #L4f868e.  `@@io.reactivex.subjects.ReplaySubject.e` @type ^`io.reactivex.subjects.ReplaySubject$c`[] := v1 @kind object;
  #L4f8692.  v0:= new `java.lang.Object`[v0];
  #L4f8696.  `@@io.reactivex.subjects.ReplaySubject.f` @type ^`java.lang.Object`[] := v0 @kind object;
  #L4f869a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subjects.ReplaySubject` v1 @kind this, `io.reactivex.subjects.ReplaySubject$b` v2 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.<init>:(Lio/reactivex/subjects/ReplaySubject$b;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4f86ac.  call `<init>`(v1) @signature `Lio/reactivex/subjects/Subject;.<init>:()V` @kind direct;
  #L4f86b2.  v1.`io.reactivex.subjects.ReplaySubject.a` @type ^`io.reactivex.subjects.ReplaySubject$b` := v2 @kind object;
  #L4f86b6.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f86ba.  v0:= `@@io.reactivex.subjects.ReplaySubject.d` @type ^`io.reactivex.subjects.ReplaySubject$c`[] @kind object;
  #L4f86be.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f86c4.  v1.`io.reactivex.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4f86c8.  return @kind void;
}
procedure `io.reactivex.subjects.ReplaySubject` `create`() @signature `Lio/reactivex/subjects/ReplaySubject;.create:()Lio/reactivex/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4f84bc.  v0:= new `io.reactivex.subjects.ReplaySubject`;
  #L4f84c0.  v1:= new `io.reactivex.subjects.ReplaySubject$g`;
  #L4f84c4.  v2:= 16I;
  #L4f84c8.  call `<init>`(v1, v2) @signature `Lio/reactivex/subjects/ReplaySubject$g;.<init>:(I)V` @kind direct;
  #L4f84ce.  call `<init>`(v0, v1) @signature `Lio/reactivex/subjects/ReplaySubject;.<init>:(Lio/reactivex/subjects/ReplaySubject$b;)V` @kind direct;
  #L4f84d4.  return v0 @kind object;
}
procedure `io.reactivex.subjects.ReplaySubject` `create`(`int` v2 ) @signature `Lio/reactivex/subjects/ReplaySubject;.create:(I)Lio/reactivex/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4f84e8.  v0:= new `io.reactivex.subjects.ReplaySubject`;
  #L4f84ec.  v1:= new `io.reactivex.subjects.ReplaySubject$g`;
  #L4f84f0.  call `<init>`(v1, v2) @signature `Lio/reactivex/subjects/ReplaySubject$g;.<init>:(I)V` @kind direct;
  #L4f84f6.  call `<init>`(v0, v1) @signature `Lio/reactivex/subjects/ReplaySubject;.<init>:(Lio/reactivex/subjects/ReplaySubject$b;)V` @kind direct;
  #L4f84fc.  return v0 @kind object;
}
procedure `io.reactivex.subjects.ReplaySubject` `createWithSize`(`int` v2 ) @signature `Lio/reactivex/subjects/ReplaySubject;.createWithSize:(I)Lio/reactivex/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4f8510.  v0:= new `io.reactivex.subjects.ReplaySubject`;
  #L4f8514.  v1:= new `io.reactivex.subjects.ReplaySubject$e`;
  #L4f8518.  call `<init>`(v1, v2) @signature `Lio/reactivex/subjects/ReplaySubject$e;.<init>:(I)V` @kind direct;
  #L4f851e.  call `<init>`(v0, v1) @signature `Lio/reactivex/subjects/ReplaySubject;.<init>:(Lio/reactivex/subjects/ReplaySubject$b;)V` @kind direct;
  #L4f8524.  return v0 @kind object;
}
procedure `io.reactivex.subjects.ReplaySubject` `createWithTime`(`long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.createWithTime:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4f8538.  v0:= new `io.reactivex.subjects.ReplaySubject`;
  #L4f853c.  v7:= new `io.reactivex.subjects.ReplaySubject$d`;
  #L4f8540.  v2:= 2147483647I;
  #L4f8546.  v1:= v7 @kind object;
  #L4f8548.  v3:= v8 @kind wide;
  #L4f854a.  v5:= v10 @kind object;
  #L4f854c.  v6:= v11 @kind object;
  #L4f854e.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/subjects/ReplaySubject$d;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L4f8554.  call `<init>`(v0, v7) @signature `Lio/reactivex/subjects/ReplaySubject;.<init>:(Lio/reactivex/subjects/ReplaySubject$b;)V` @kind direct;
  #L4f855a.  return v0 @kind object;
}
procedure `io.reactivex.subjects.ReplaySubject` `createWithTimeAndSize`(`long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object, `int` v12 ) @signature `Lio/reactivex/subjects/ReplaySubject;.createWithTimeAndSize:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4f856c.  v0:= new `io.reactivex.subjects.ReplaySubject`;
  #L4f8570.  v7:= new `io.reactivex.subjects.ReplaySubject$d`;
  #L4f8574.  v1:= v7 @kind object;
  #L4f8576.  v2:= v12;
  #L4f8578.  v3:= v8 @kind wide;
  #L4f857a.  v5:= v10 @kind object;
  #L4f857c.  v6:= v11 @kind object;
  #L4f857e.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/subjects/ReplaySubject$d;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L4f8584.  call `<init>`(v0, v7) @signature `Lio/reactivex/subjects/ReplaySubject;.<init>:(Lio/reactivex/subjects/ReplaySubject$b;)V` @kind direct;
  #L4f858a.  return v0 @kind object;
}
procedure `boolean` `d`(`io.reactivex.subjects.ReplaySubject` v4 @kind this, `io.reactivex.subjects.ReplaySubject$c` v5 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.d:(Lio/reactivex/subjects/ReplaySubject$c;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f83c0.  v0:= v4.`io.reactivex.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f83c4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f83ca.  v0:= temp @kind object;
  #L4f83cc.  v0:= (`io.reactivex.subjects.ReplaySubject$c`[]) v0 @kind object;
  #L4f83d0.  v1:= `@@io.reactivex.subjects.ReplaySubject.e` @type ^`io.reactivex.subjects.ReplaySubject$c`[] @kind object;
  #L4f83d4.  v2:= 0I;
  #L4f83d6.  if v0 != v1 then goto L4f83dc;
  #L4f83da.  return v2;
  #L4f83dc.  v1:= length @variable v0;
  #L4f83de.  v3:= v1 + 1;
  #L4f83e2.  v3:= new `io.reactivex.subjects.ReplaySubject$c`[v3];
  #L4f83e6.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f83ec.  v3[v1]:= v5 @kind object;
  #L4f83f0.  v1:= v4.`io.reactivex.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f83f4.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f83fa.  v0:= temp;
  #L4f83fc.  if v0 == 0 then goto L4f83c0;
  #L4f8400.  v5:= 1I;
  #L4f8402.  return v5;
}
procedure `void` `e`(`io.reactivex.subjects.ReplaySubject` v6 @kind this, `io.reactivex.subjects.ReplaySubject$c` v7 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.e:(Lio/reactivex/subjects/ReplaySubject$c;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f8824.  v0:= v6.`io.reactivex.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f8828.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f882e.  v0:= temp @kind object;
  #L4f8830.  v0:= (`io.reactivex.subjects.ReplaySubject$c`[]) v0 @kind object;
  #L4f8834.  v1:= `@@io.reactivex.subjects.ReplaySubject.e` @type ^`io.reactivex.subjects.ReplaySubject$c`[] @kind object;
  #L4f8838.  if v0 == v1 then goto L4f88a4;
  #L4f883c.  v1:= `@@io.reactivex.subjects.ReplaySubject.d` @type ^`io.reactivex.subjects.ReplaySubject$c`[] @kind object;
  #L4f8840.  if v0 != v1 then goto L4f8846;
  #L4f8844.  goto L4f88a4;
  #L4f8846.  v1:= length @variable v0;
  #L4f8848.  v2:= -1I;
  #L4f884a.  v3:= 0I;
  #L4f884c.  v4:= 0I;
  #L4f884e.  if v4 >= v1 then goto L4f8864;
  #L4f8852.  v5:= v0[v4] @kind object;
  #L4f8856.  if v5 != v7 then goto L4f885e;
  #L4f885a.  v2:= v4;
  #L4f885c.  goto L4f8864;
  #L4f885e.  v4:= v4 + 1;
  #L4f8862.  goto L4f884e;
  #L4f8864.  if v2 >= 0 then goto L4f886a;
  #L4f8868.  return @kind void;
  #L4f886a.  v4:= 1I;
  #L4f886c.  if v1 != v4 then goto L4f8876;
  #L4f8870.  v1:= `@@io.reactivex.subjects.ReplaySubject.d` @type ^`io.reactivex.subjects.ReplaySubject$c`[] @kind object;
  #L4f8874.  goto L4f8894;
  #L4f8876.  v5:= v1 + -1;
  #L4f887a.  v5:= new `io.reactivex.subjects.ReplaySubject$c`[v5];
  #L4f887e.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f8884.  v3:= v2 + 1;
  #L4f8888.  v1:= v1 - v2 @kind int;
  #L4f888a.  v1:= v1 - v4 @kind int;
  #L4f888c.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f8892.  v1:= v5 @kind object;
  #L4f8894.  v2:= v6.`io.reactivex.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f8898.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f889e.  v0:= temp;
  #L4f88a0.  if v0 == 0 then goto L4f8824;
  #L4f88a4.  return @kind void;
}
procedure `io.reactivex.subjects.ReplaySubject$c`[] `f`(`io.reactivex.subjects.ReplaySubject` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.f:(Ljava/lang/Object;)[Lio/reactivex/subjects/ReplaySubject$c;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4f859c.  v0:= v2.`io.reactivex.subjects.ReplaySubject.a` @type ^`io.reactivex.subjects.ReplaySubject$b` @kind object;
  #L4f85a0.  v1:= 0I;
  #L4f85a2.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Lio/reactivex/subjects/ReplaySubject$b;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L4f85a8.  v3:= temp;
  #L4f85aa.  if v3 == 0 then goto L4f85c4;
  #L4f85ae.  v3:= v2.`io.reactivex.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f85b2.  v0:= `@@io.reactivex.subjects.ReplaySubject.e` @type ^`io.reactivex.subjects.ReplaySubject$c`[] @kind object;
  #L4f85b6.  call temp:= `getAndSet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f85bc.  v3:= temp @kind object;
  #L4f85be.  v3:= (`io.reactivex.subjects.ReplaySubject$c`[]) v3 @kind object;
  #L4f85c2.  return v3 @kind object;
  #L4f85c4.  v3:= `@@io.reactivex.subjects.ReplaySubject.e` @type ^`io.reactivex.subjects.ReplaySubject$c`[] @kind object;
  #L4f85c8.  return v3 @kind object;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.subjects.ReplaySubject` v2 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f8648.  v0:= v2.`io.reactivex.subjects.ReplaySubject.a` @type ^`io.reactivex.subjects.ReplaySubject$b` @kind object;
  #L4f864c.  call temp:= `get`(v0) @signature `Lio/reactivex/subjects/ReplaySubject$b;.get:()Ljava/lang/Object;` @kind interface;
  #L4f8652.  v0:= temp @kind object;
  #L4f8654.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4f865a.  v1:= temp;
  #L4f865c.  if v1 == 0 then goto L4f866a;
  #L4f8660.  call temp:= `getError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L4f8666.  v0:= temp @kind object;
  #L4f8668.  return v0 @kind object;
  #L4f866a.  v0:= 0I;
  #L4f866c.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f85dc.  v0:= v1.`io.reactivex.subjects.ReplaySubject.a` @type ^`io.reactivex.subjects.ReplaySubject$b` @kind object;
  #L4f85e0.  call temp:= `getValue`(v0) @signature `Lio/reactivex/subjects/ReplaySubject$b;.getValue:()Ljava/lang/Object;` @kind interface;
  #L4f85e6.  v0:= temp @kind object;
  #L4f85e8.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.subjects.ReplaySubject` v2 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject;.getValues:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f85fc.  v0:= `@@io.reactivex.subjects.ReplaySubject.f` @type ^`java.lang.Object`[] @kind object;
  #L4f8600.  call temp:= `getValues`(v2, v0) @signature `Lio/reactivex/subjects/ReplaySubject;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L4f8606.  v1:= temp @kind object;
  #L4f8608.  if v1 != v0 then goto L4f8614;
  #L4f860c.  v0:= 0I;
  #L4f860e.  v0:= new `java.lang.Object`[v0];
  #L4f8612.  return v0 @kind object;
  #L4f8614.  return v1 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.subjects.ReplaySubject` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f8628.  v0:= v1.`io.reactivex.subjects.ReplaySubject.a` @type ^`io.reactivex.subjects.ReplaySubject$b` @kind object;
  #L4f862c.  call temp:= `c`(v0, v2) @signature `Lio/reactivex/subjects/ReplaySubject$b;.c:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L4f8632.  v2:= temp @kind object;
  #L4f8634.  return v2 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f8414.  v0:= v1.`io.reactivex.subjects.ReplaySubject.a` @type ^`io.reactivex.subjects.ReplaySubject$b` @kind object;
  #L4f8418.  call temp:= `get`(v0) @signature `Lio/reactivex/subjects/ReplaySubject$b;.get:()Ljava/lang/Object;` @kind interface;
  #L4f841e.  v0:= temp @kind object;
  #L4f8420.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4f8426.  v0:= temp;
  #L4f8428.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f843c.  v0:= v1.`io.reactivex.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f8440.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f8446.  v0:= temp @kind object;
  #L4f8448.  v0:= (`io.reactivex.subjects.ReplaySubject$c`[]) v0 @kind object;
  #L4f844c.  v0:= length @variable v0;
  #L4f844e.  if v0 == 0 then goto L4f8456;
  #L4f8452.  v0:= 1I;
  #L4f8454.  goto L4f8458;
  #L4f8456.  v0:= 0I;
  #L4f8458.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f846c.  v0:= v1.`io.reactivex.subjects.ReplaySubject.a` @type ^`io.reactivex.subjects.ReplaySubject$b` @kind object;
  #L4f8470.  call temp:= `get`(v0) @signature `Lio/reactivex/subjects/ReplaySubject$b;.get:()Ljava/lang/Object;` @kind interface;
  #L4f8476.  v0:= temp @kind object;
  #L4f8478.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4f847e.  v0:= temp;
  #L4f8480.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f8494.  v0:= v1.`io.reactivex.subjects.ReplaySubject.a` @type ^`io.reactivex.subjects.ReplaySubject$b` @kind object;
  #L4f8498.  call temp:= `size`(v0) @signature `Lio/reactivex/subjects/ReplaySubject$b;.size:()I` @kind interface;
  #L4f849e.  v0:= temp;
  #L4f84a0.  if v0 == 0 then goto L4f84a8;
  #L4f84a4.  v0:= 1I;
  #L4f84a6.  goto L4f84aa;
  #L4f84a8.  v0:= 0I;
  #L4f84aa.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.subjects.ReplaySubject` v5 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f86dc.  v0:= v5.`io.reactivex.subjects.ReplaySubject.c` @type ^`boolean` @kind boolean;
  #L4f86e0.  if v0 == 0 then goto L4f86e6;
  #L4f86e4.  return @kind void;
  #L4f86e6.  v0:= 1I;
  #L4f86e8.  v5.`io.reactivex.subjects.ReplaySubject.c` @type ^`boolean` := v0 @kind boolean;
  #L4f86ec.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L4f86f2.  v0:= temp @kind object;
  #L4f86f4.  v1:= v5.`io.reactivex.subjects.ReplaySubject.a` @type ^`io.reactivex.subjects.ReplaySubject$b` @kind object;
  #L4f86f8.  call `d`(v1, v0) @signature `Lio/reactivex/subjects/ReplaySubject$b;.d:(Ljava/lang/Object;)V` @kind interface;
  #L4f86fe.  call temp:= `f`(v5, v0) @signature `Lio/reactivex/subjects/ReplaySubject;.f:(Ljava/lang/Object;)[Lio/reactivex/subjects/ReplaySubject$c;` @kind virtual;
  #L4f8704.  v0:= temp @kind object;
  #L4f8706.  v2:= length @variable v0;
  #L4f8708.  v3:= 0I;
  #L4f870a.  if v3 >= v2 then goto L4f871e;
  #L4f870e.  v4:= v0[v3] @kind object;
  #L4f8712.  call `a`(v1, v4) @signature `Lio/reactivex/subjects/ReplaySubject$b;.a:(Lio/reactivex/subjects/ReplaySubject$c;)V` @kind interface;
  #L4f8718.  v3:= v3 + 1;
  #L4f871c.  goto L4f870a;
  #L4f871e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.subjects.ReplaySubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f8730.  if v5 != 0 then goto L4f8742;
  #L4f8734.  v5:= new `java.lang.NullPointerException`;
  #L4f8738.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L4f873c.  call `<init>`(v5, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f8742.  v0:= v4.`io.reactivex.subjects.ReplaySubject.c` @type ^`boolean` @kind boolean;
  #L4f8746.  if v0 == 0 then goto L4f8752;
  #L4f874a.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f8750.  return @kind void;
  #L4f8752.  v0:= 1I;
  #L4f8754.  v4.`io.reactivex.subjects.ReplaySubject.c` @type ^`boolean` := v0 @kind boolean;
  #L4f8758.  call temp:= `error`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L4f875e.  v5:= temp @kind object;
  #L4f8760.  v0:= v4.`io.reactivex.subjects.ReplaySubject.a` @type ^`io.reactivex.subjects.ReplaySubject$b` @kind object;
  #L4f8764.  call `d`(v0, v5) @signature `Lio/reactivex/subjects/ReplaySubject$b;.d:(Ljava/lang/Object;)V` @kind interface;
  #L4f876a.  call temp:= `f`(v4, v5) @signature `Lio/reactivex/subjects/ReplaySubject;.f:(Ljava/lang/Object;)[Lio/reactivex/subjects/ReplaySubject$c;` @kind virtual;
  #L4f8770.  v5:= temp @kind object;
  #L4f8772.  v1:= length @variable v5;
  #L4f8774.  v2:= 0I;
  #L4f8776.  if v2 >= v1 then goto L4f878a;
  #L4f877a.  v3:= v5[v2] @kind object;
  #L4f877e.  call `a`(v0, v3) @signature `Lio/reactivex/subjects/ReplaySubject$b;.a:(Lio/reactivex/subjects/ReplaySubject$c;)V` @kind interface;
  #L4f8784.  v2:= v2 + 1;
  #L4f8788.  goto L4f8776;
  #L4f878a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.subjects.ReplaySubject` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f879c.  if v5 != 0 then goto L4f87b6;
  #L4f87a0.  v5:= new `java.lang.NullPointerException`;
  #L4f87a4.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L4f87a8.  call `<init>`(v5, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f87ae.  call `onError`(v4, v5) @signature `Lio/reactivex/subjects/ReplaySubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4f87b4.  return @kind void;
  #L4f87b6.  v0:= v4.`io.reactivex.subjects.ReplaySubject.c` @type ^`boolean` @kind boolean;
  #L4f87ba.  if v0 == 0 then goto L4f87c0;
  #L4f87be.  return @kind void;
  #L4f87c0.  v0:= v4.`io.reactivex.subjects.ReplaySubject.a` @type ^`io.reactivex.subjects.ReplaySubject$b` @kind object;
  #L4f87c4.  call `add`(v0, v5) @signature `Lio/reactivex/subjects/ReplaySubject$b;.add:(Ljava/lang/Object;)V` @kind interface;
  #L4f87ca.  v5:= v4.`io.reactivex.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f87ce.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f87d4.  v5:= temp @kind object;
  #L4f87d6.  v5:= (`io.reactivex.subjects.ReplaySubject$c`[]) v5 @kind object;
  #L4f87da.  v1:= length @variable v5;
  #L4f87dc.  v2:= 0I;
  #L4f87de.  if v2 >= v1 then goto L4f87f2;
  #L4f87e2.  v3:= v5[v2] @kind object;
  #L4f87e6.  call `a`(v0, v3) @signature `Lio/reactivex/subjects/ReplaySubject$b;.a:(Lio/reactivex/subjects/ReplaySubject$c;)V` @kind interface;
  #L4f87ec.  v2:= v2 + 1;
  #L4f87f0.  goto L4f87de;
  #L4f87f2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subjects.ReplaySubject` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f8804.  v0:= v1.`io.reactivex.subjects.ReplaySubject.c` @type ^`boolean` @kind boolean;
  #L4f8808.  if v0 == 0 then goto L4f8812;
  #L4f880c.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f8812.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.subjects.ReplaySubject` v1 @kind this, `io.reactivex.Observer` v2 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L4f88b8.  v0:= new `io.reactivex.subjects.ReplaySubject$c`;
  #L4f88bc.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/subjects/ReplaySubject$c;.<init>:(Lio/reactivex/Observer;Lio/reactivex/subjects/ReplaySubject;)V` @kind direct;
  #L4f88c2.  call `onSubscribe`(v2, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4f88c8.  v2:= v0.`io.reactivex.subjects.ReplaySubject$c.d` @type ^`boolean` @kind boolean;
  #L4f88cc.  if v2 != 0 then goto L4f88f6;
  #L4f88d0.  call temp:= `d`(v1, v0) @signature `Lio/reactivex/subjects/ReplaySubject;.d:(Lio/reactivex/subjects/ReplaySubject$c;)Z` @kind virtual;
  #L4f88d6.  v2:= temp;
  #L4f88d8.  if v2 == 0 then goto L4f88ec;
  #L4f88dc.  v2:= v0.`io.reactivex.subjects.ReplaySubject$c.d` @type ^`boolean` @kind boolean;
  #L4f88e0.  if v2 == 0 then goto L4f88ec;
  #L4f88e4.  call `e`(v1, v0) @signature `Lio/reactivex/subjects/ReplaySubject;.e:(Lio/reactivex/subjects/ReplaySubject$c;)V` @kind virtual;
  #L4f88ea.  return @kind void;
  #L4f88ec.  v2:= v1.`io.reactivex.subjects.ReplaySubject.a` @type ^`io.reactivex.subjects.ReplaySubject$b` @kind object;
  #L4f88f0.  call `a`(v2, v0) @signature `Lio/reactivex/subjects/ReplaySubject$b;.a:(Lio/reactivex/subjects/ReplaySubject$c;)V` @kind interface;
  #L4f88f6.  return @kind void;
}
