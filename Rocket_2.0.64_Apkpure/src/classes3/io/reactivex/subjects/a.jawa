record `io.reactivex.subjects.a` @kind class @AccessFlag FINAL extends `io.reactivex.subjects.Subject` @kind class, `io.reactivex.internal.util.AppendOnlyLinkedArrayList$NonThrowingPredicate` @kind interface {
  `io.reactivex.subjects.Subject` `io.reactivex.subjects.a.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.subjects.a.b` @AccessFlag ;
  `io.reactivex.internal.util.AppendOnlyLinkedArrayList` `io.reactivex.subjects.a.c` @AccessFlag ;
  `boolean` `io.reactivex.subjects.a.d` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.subjects.a` v0 @kind this, `io.reactivex.subjects.Subject` v1 @kind object) @signature `Lio/reactivex/subjects/a;.<init>:(Lio/reactivex/subjects/Subject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f89a8.  call `<init>`(v0) @signature `Lio/reactivex/subjects/Subject;.<init>:()V` @kind direct;
  #L4f89ae.  v0.`io.reactivex.subjects.a.a` @type ^`io.reactivex.subjects.Subject` := v1 @kind object;
  #L4f89b2.  return @kind void;
}
procedure `void` `d`(`io.reactivex.subjects.a` v2 @kind this) @signature `Lio/reactivex/subjects/a;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4f89c4.  @monitorenter v2
  #L4f89c6.  v0:= v2.`io.reactivex.subjects.a.c` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L4f89ca.  if v0 != 0 then goto L4f89d8;
  #L4f89ce.  v0:= 0I;
  #L4f89d0.  v2.`io.reactivex.subjects.a.b` @type ^`boolean` := v0 @kind boolean;
  #L4f89d4.  @monitorexit v2
  #L4f89d6.  return @kind void;
  #L4f89d8.  v1:= 0I;
  #L4f89da.  v2.`io.reactivex.subjects.a.c` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v1 @kind object;
  #L4f89de.  @monitorexit v2
  #L4f89e0.  call `forEachWhile`(v0, v2) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.forEachWhile:(Lio/reactivex/internal/util/AppendOnlyLinkedArrayList$NonThrowingPredicate;)V` @kind virtual;
  #L4f89e6.  goto L4f89c4;
  #L4f89e8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f89ea.  @monitorexit v2
  #L4f89ec.  throw v0;
  catch `java.lang.Throwable` @[L4f89c6..L4f89e0] goto L4f89e8;
  catch `java.lang.Throwable` @[L4f89ea..L4f89ec] goto L4f89e8;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.subjects.a` v1 @kind this) @signature `Lio/reactivex/subjects/a;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f8988.  v0:= v1.`io.reactivex.subjects.a.a` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L4f898c.  call temp:= `getThrowable`(v0) @signature `Lio/reactivex/subjects/Subject;.getThrowable:()Ljava/lang/Throwable;` @kind virtual;
  #L4f8992.  v0:= temp @kind object;
  #L4f8994.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.subjects.a` v1 @kind this) @signature `Lio/reactivex/subjects/a;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f8908.  v0:= v1.`io.reactivex.subjects.a.a` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L4f890c.  call temp:= `hasComplete`(v0) @signature `Lio/reactivex/subjects/Subject;.hasComplete:()Z` @kind virtual;
  #L4f8912.  v0:= temp;
  #L4f8914.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.subjects.a` v1 @kind this) @signature `Lio/reactivex/subjects/a;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f8928.  v0:= v1.`io.reactivex.subjects.a.a` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L4f892c.  call temp:= `hasObservers`(v0) @signature `Lio/reactivex/subjects/Subject;.hasObservers:()Z` @kind virtual;
  #L4f8932.  v0:= temp;
  #L4f8934.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.subjects.a` v1 @kind this) @signature `Lio/reactivex/subjects/a;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f8948.  v0:= v1.`io.reactivex.subjects.a.a` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L4f894c.  call temp:= `hasThrowable`(v0) @signature `Lio/reactivex/subjects/Subject;.hasThrowable:()Z` @kind virtual;
  #L4f8952.  v0:= temp;
  #L4f8954.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.subjects.a` v2 @kind this) @signature `Lio/reactivex/subjects/a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f8a14.  v0:= v2.`io.reactivex.subjects.a.d` @type ^`boolean` @kind boolean;
  #L4f8a18.  if v0 == 0 then goto L4f8a1e;
  #L4f8a1c.  return @kind void;
  #L4f8a1e.  @monitorenter v2
  #L4f8a20.  v0:= v2.`io.reactivex.subjects.a.d` @type ^`boolean` @kind boolean;
  #L4f8a24.  if v0 == 0 then goto L4f8a2c;
  #L4f8a28.  @monitorexit v2
  #L4f8a2a.  return @kind void;
  #L4f8a2c.  v0:= 1I;
  #L4f8a2e.  v2.`io.reactivex.subjects.a.d` @type ^`boolean` := v0 @kind boolean;
  #L4f8a32.  v1:= v2.`io.reactivex.subjects.a.b` @type ^`boolean` @kind boolean;
  #L4f8a36.  if v1 == 0 then goto L4f8a64;
  #L4f8a3a.  v0:= v2.`io.reactivex.subjects.a.c` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L4f8a3e.  if v0 != 0 then goto L4f8a52;
  #L4f8a42.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L4f8a46.  v1:= 4I;
  #L4f8a48.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L4f8a4e.  v2.`io.reactivex.subjects.a.c` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L4f8a52.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L4f8a58.  v1:= temp @kind object;
  #L4f8a5a.  call `add`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L4f8a60.  @monitorexit v2
  #L4f8a62.  return @kind void;
  #L4f8a64.  v2.`io.reactivex.subjects.a.b` @type ^`boolean` := v0 @kind boolean;
  #L4f8a68.  @monitorexit v2
  #L4f8a6a.  v0:= v2.`io.reactivex.subjects.a.a` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L4f8a6e.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4f8a74.  return @kind void;
  #L4f8a76.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f8a78.  @monitorexit v2
  #L4f8a7a.  throw v0;
  catch `java.lang.Throwable` @[L4f8a20..L4f8a6a] goto L4f8a76;
  catch `java.lang.Throwable` @[L4f8a78..L4f8a7a] goto L4f8a76;
}
procedure `void` `onError`(`io.reactivex.subjects.a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/subjects/a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f8aa0.  v0:= v2.`io.reactivex.subjects.a.d` @type ^`boolean` @kind boolean;
  #L4f8aa4.  if v0 == 0 then goto L4f8ab0;
  #L4f8aa8.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f8aae.  return @kind void;
  #L4f8ab0.  @monitorenter v2
  #L4f8ab2.  v0:= v2.`io.reactivex.subjects.a.d` @type ^`boolean` @kind boolean;
  #L4f8ab6.  v1:= 1I;
  #L4f8ab8.  if v0 == 0 then goto L4f8abe;
  #L4f8abc.  goto L4f8afc;
  #L4f8abe.  v2.`io.reactivex.subjects.a.d` @type ^`boolean` := v1 @kind boolean;
  #L4f8ac2.  v0:= v2.`io.reactivex.subjects.a.b` @type ^`boolean` @kind boolean;
  #L4f8ac6.  if v0 == 0 then goto L4f8af4;
  #L4f8aca.  v0:= v2.`io.reactivex.subjects.a.c` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L4f8ace.  if v0 != 0 then goto L4f8ae2;
  #L4f8ad2.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L4f8ad6.  v1:= 4I;
  #L4f8ad8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L4f8ade.  v2.`io.reactivex.subjects.a.c` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L4f8ae2.  call temp:= `error`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L4f8ae8.  v3:= temp @kind object;
  #L4f8aea.  call `setFirst`(v0, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.setFirst:(Ljava/lang/Object;)V` @kind virtual;
  #L4f8af0.  @monitorexit v2
  #L4f8af2.  return @kind void;
  #L4f8af4.  v0:= 0I;
  #L4f8af6.  v2.`io.reactivex.subjects.a.b` @type ^`boolean` := v1 @kind boolean;
  #L4f8afa.  v1:= 0I;
  #L4f8afc.  @monitorexit v2
  #L4f8afe.  if v1 == 0 then goto L4f8b0a;
  #L4f8b02.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f8b08.  return @kind void;
  #L4f8b0a.  v0:= v2.`io.reactivex.subjects.a.a` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L4f8b0e.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f8b14.  return @kind void;
  #L4f8b16.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f8b18.  @monitorexit v2
  #L4f8b1a.  throw v3;
  catch `java.lang.Throwable` @[L4f8ab2..L4f8afe] goto L4f8b16;
  catch `java.lang.Throwable` @[L4f8b18..L4f8b1a] goto L4f8b16;
}
procedure `void` `onNext`(`io.reactivex.subjects.a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/subjects/a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f8b40.  v0:= v2.`io.reactivex.subjects.a.d` @type ^`boolean` @kind boolean;
  #L4f8b44.  if v0 == 0 then goto L4f8b4a;
  #L4f8b48.  return @kind void;
  #L4f8b4a.  @monitorenter v2
  #L4f8b4c.  v0:= v2.`io.reactivex.subjects.a.d` @type ^`boolean` @kind boolean;
  #L4f8b50.  if v0 == 0 then goto L4f8b58;
  #L4f8b54.  @monitorexit v2
  #L4f8b56.  return @kind void;
  #L4f8b58.  v0:= v2.`io.reactivex.subjects.a.b` @type ^`boolean` @kind boolean;
  #L4f8b5c.  if v0 == 0 then goto L4f8b8a;
  #L4f8b60.  v0:= v2.`io.reactivex.subjects.a.c` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L4f8b64.  if v0 != 0 then goto L4f8b78;
  #L4f8b68.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L4f8b6c.  v1:= 4I;
  #L4f8b6e.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L4f8b74.  v2.`io.reactivex.subjects.a.c` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L4f8b78.  call temp:= `next`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4f8b7e.  v3:= temp @kind object;
  #L4f8b80.  call `add`(v0, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L4f8b86.  @monitorexit v2
  #L4f8b88.  return @kind void;
  #L4f8b8a.  v0:= 1I;
  #L4f8b8c.  v2.`io.reactivex.subjects.a.b` @type ^`boolean` := v0 @kind boolean;
  #L4f8b90.  @monitorexit v2
  #L4f8b92.  v0:= v2.`io.reactivex.subjects.a.a` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L4f8b96.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f8b9c.  call `d`(v2) @signature `Lio/reactivex/subjects/a;.d:()V` @kind virtual;
  #L4f8ba2.  return @kind void;
  #L4f8ba4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f8ba6.  @monitorexit v2
  #L4f8ba8.  throw v3;
  catch `java.lang.Throwable` @[L4f8b4c..L4f8b92] goto L4f8ba4;
  catch `java.lang.Throwable` @[L4f8ba6..L4f8ba8] goto L4f8ba4;
}
procedure `void` `onSubscribe`(`io.reactivex.subjects.a` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/subjects/a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f8bd0.  v0:= v2.`io.reactivex.subjects.a.d` @type ^`boolean` @kind boolean;
  #L4f8bd4.  v1:= 1I;
  #L4f8bd6.  if v0 != 0 then goto L4f8c2a;
  #L4f8bda.  @monitorenter v2
  #L4f8bdc.  v0:= v2.`io.reactivex.subjects.a.d` @type ^`boolean` @kind boolean;
  #L4f8be0.  if v0 == 0 then goto L4f8be6;
  #L4f8be4.  goto L4f8c20;
  #L4f8be6.  v0:= v2.`io.reactivex.subjects.a.b` @type ^`boolean` @kind boolean;
  #L4f8bea.  if v0 == 0 then goto L4f8c18;
  #L4f8bee.  v0:= v2.`io.reactivex.subjects.a.c` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L4f8bf2.  if v0 != 0 then goto L4f8c06;
  #L4f8bf6.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L4f8bfa.  v1:= 4I;
  #L4f8bfc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L4f8c02.  v2.`io.reactivex.subjects.a.c` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L4f8c06.  call temp:= `disposable`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.disposable:(Lio/reactivex/disposables/Disposable;)Ljava/lang/Object;` @kind static;
  #L4f8c0c.  v3:= temp @kind object;
  #L4f8c0e.  call `add`(v0, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L4f8c14.  @monitorexit v2
  #L4f8c16.  return @kind void;
  #L4f8c18.  v2.`io.reactivex.subjects.a.b` @type ^`boolean` := v1 @kind boolean;
  #L4f8c1c.  v0:= 0I;
  #L4f8c1e.  v1:= 0I;
  #L4f8c20.  @monitorexit v2
  #L4f8c22.  goto L4f8c2a;
  #L4f8c24.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f8c26.  @monitorexit v2
  #L4f8c28.  throw v3;
  #L4f8c2a.  if v1 == 0 then goto L4f8c36;
  #L4f8c2e.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f8c34.  goto L4f8c46;
  #L4f8c36.  v0:= v2.`io.reactivex.subjects.a.a` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L4f8c3a.  call `onSubscribe`(v0, v3) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4f8c40.  call `d`(v2) @signature `Lio/reactivex/subjects/a;.d:()V` @kind virtual;
  #L4f8c46.  return @kind void;
  catch `java.lang.Throwable` @[L4f8bdc..L4f8c28] goto L4f8c24;
}
procedure `void` `subscribeActual`(`io.reactivex.subjects.a` v1 @kind this, `io.reactivex.Observer` v2 @kind object) @signature `Lio/reactivex/subjects/a;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L4f8c64.  v0:= v1.`io.reactivex.subjects.a.a` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L4f8c68.  call `subscribe`(v0, v2) @signature `Lio/reactivex/Observable;.subscribe:(Lio/reactivex/Observer;)V` @kind virtual;
  #L4f8c6e.  return @kind void;
}
procedure `boolean` `test`(`io.reactivex.subjects.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/subjects/a;.test:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f8968.  v0:= v1.`io.reactivex.subjects.a.a` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L4f896c.  call temp:= `acceptFull`(v2, v0) @signature `Lio/reactivex/internal/util/NotificationLite;.acceptFull:(Ljava/lang/Object;Lio/reactivex/Observer;)Z` @kind static;
  #L4f8972.  v2:= temp;
  #L4f8974.  return v2;
}
