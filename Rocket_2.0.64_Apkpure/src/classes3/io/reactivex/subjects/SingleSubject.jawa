record `io.reactivex.subjects.SingleSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class, `io.reactivex.SingleObserver` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.SingleSubject.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.subjects.SingleSubject.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.subjects.SingleSubject.c` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.subjects.SingleSubject.d` @AccessFlag ;
}
global `io.reactivex.subjects.SingleSubject$a`[] `@@io.reactivex.subjects.SingleSubject.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.subjects.SingleSubject$a`[] `@@io.reactivex.subjects.SingleSubject.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/subjects/SingleSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f8e5c.  v0:= 0I;
  #L4f8e5e.  v1:= new `io.reactivex.subjects.SingleSubject$a`[v0];
  #L4f8e62.  `@@io.reactivex.subjects.SingleSubject.e` @type ^`io.reactivex.subjects.SingleSubject$a`[] := v1 @kind object;
  #L4f8e66.  v0:= new `io.reactivex.subjects.SingleSubject$a`[v0];
  #L4f8e6a.  `@@io.reactivex.subjects.SingleSubject.f` @type ^`io.reactivex.subjects.SingleSubject$a`[] := v0 @kind object;
  #L4f8e6e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subjects.SingleSubject` v2 @kind this) @signature `Lio/reactivex/subjects/SingleSubject;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f8e80.  call `<init>`(v2) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L4f8e86.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4f8e8a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4f8e90.  v2.`io.reactivex.subjects.SingleSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L4f8e94.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f8e98.  v1:= `@@io.reactivex.subjects.SingleSubject.e` @type ^`io.reactivex.subjects.SingleSubject$a`[] @kind object;
  #L4f8e9c.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f8ea2.  v2.`io.reactivex.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4f8ea6.  return @kind void;
}
procedure `io.reactivex.subjects.SingleSubject` `create`() @signature `Lio/reactivex/subjects/SingleSubject;.create:()Lio/reactivex/subjects/SingleSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f8de0.  v0:= new `io.reactivex.subjects.SingleSubject`;
  #L4f8de4.  call `<init>`(v0) @signature `Lio/reactivex/subjects/SingleSubject;.<init>:()V` @kind direct;
  #L4f8dea.  return v0 @kind object;
}
procedure `boolean` `c`(`io.reactivex.subjects.SingleSubject` v4 @kind this, `io.reactivex.subjects.SingleSubject$a` v5 @kind object) @signature `Lio/reactivex/subjects/SingleSubject;.c:(Lio/reactivex/subjects/SingleSubject$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f8cf4.  v0:= v4.`io.reactivex.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f8cf8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f8cfe.  v0:= temp @kind object;
  #L4f8d00.  v0:= (`io.reactivex.subjects.SingleSubject$a`[]) v0 @kind object;
  #L4f8d04.  v1:= `@@io.reactivex.subjects.SingleSubject.f` @type ^`io.reactivex.subjects.SingleSubject$a`[] @kind object;
  #L4f8d08.  v2:= 0I;
  #L4f8d0a.  if v0 != v1 then goto L4f8d10;
  #L4f8d0e.  return v2;
  #L4f8d10.  v1:= length @variable v0;
  #L4f8d12.  v3:= v1 + 1;
  #L4f8d16.  v3:= new `io.reactivex.subjects.SingleSubject$a`[v3];
  #L4f8d1a.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f8d20.  v3[v1]:= v5 @kind object;
  #L4f8d24.  v1:= v4.`io.reactivex.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f8d28.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f8d2e.  v0:= temp;
  #L4f8d30.  if v0 == 0 then goto L4f8cf4;
  #L4f8d34.  v5:= 1I;
  #L4f8d36.  return v5;
}
procedure `void` `d`(`io.reactivex.subjects.SingleSubject` v6 @kind this, `io.reactivex.subjects.SingleSubject$a` v7 @kind object) @signature `Lio/reactivex/subjects/SingleSubject;.d:(Lio/reactivex/subjects/SingleSubject$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f8fc8.  v0:= v6.`io.reactivex.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f8fcc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f8fd2.  v0:= temp @kind object;
  #L4f8fd4.  v0:= (`io.reactivex.subjects.SingleSubject$a`[]) v0 @kind object;
  #L4f8fd8.  v1:= length @variable v0;
  #L4f8fda.  if v1 != 0 then goto L4f8fe0;
  #L4f8fde.  return @kind void;
  #L4f8fe0.  v2:= -1I;
  #L4f8fe2.  v3:= 0I;
  #L4f8fe4.  v4:= 0I;
  #L4f8fe6.  if v4 >= v1 then goto L4f8ffc;
  #L4f8fea.  v5:= v0[v4] @kind object;
  #L4f8fee.  if v5 != v7 then goto L4f8ff6;
  #L4f8ff2.  v2:= v4;
  #L4f8ff4.  goto L4f8ffc;
  #L4f8ff6.  v4:= v4 + 1;
  #L4f8ffa.  goto L4f8fe6;
  #L4f8ffc.  if v2 >= 0 then goto L4f9002;
  #L4f9000.  return @kind void;
  #L4f9002.  v4:= 1I;
  #L4f9004.  if v1 != v4 then goto L4f900e;
  #L4f9008.  v1:= `@@io.reactivex.subjects.SingleSubject.e` @type ^`io.reactivex.subjects.SingleSubject$a`[] @kind object;
  #L4f900c.  goto L4f902c;
  #L4f900e.  v5:= v1 + -1;
  #L4f9012.  v5:= new `io.reactivex.subjects.SingleSubject$a`[v5];
  #L4f9016.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f901c.  v3:= v2 + 1;
  #L4f9020.  v1:= v1 - v2 @kind int;
  #L4f9022.  v1:= v1 - v4 @kind int;
  #L4f9024.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f902a.  v1:= v5 @kind object;
  #L4f902c.  v2:= v6.`io.reactivex.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f9030.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f9036.  v0:= temp;
  #L4f9038.  if v0 == 0 then goto L4f8fc8;
  #L4f903c.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.subjects.SingleSubject` v2 @kind this) @signature `Lio/reactivex/subjects/SingleSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f8e2c.  v0:= v2.`io.reactivex.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f8e30.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f8e36.  v0:= temp @kind object;
  #L4f8e38.  v1:= `@@io.reactivex.subjects.SingleSubject.f` @type ^`io.reactivex.subjects.SingleSubject$a`[] @kind object;
  #L4f8e3c.  if v0 != v1 then goto L4f8e46;
  #L4f8e40.  v0:= v2.`io.reactivex.subjects.SingleSubject.d` @type ^`java.lang.Throwable` @kind object;
  #L4f8e44.  return v0 @kind object;
  #L4f8e46.  v0:= 0I;
  #L4f8e48.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.subjects.SingleSubject` v2 @kind this) @signature `Lio/reactivex/subjects/SingleSubject;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f8dfc.  v0:= v2.`io.reactivex.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f8e00.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f8e06.  v0:= temp @kind object;
  #L4f8e08.  v1:= `@@io.reactivex.subjects.SingleSubject.f` @type ^`io.reactivex.subjects.SingleSubject$a`[] @kind object;
  #L4f8e0c.  if v0 != v1 then goto L4f8e16;
  #L4f8e10.  v0:= v2.`io.reactivex.subjects.SingleSubject.c` @type ^`java.lang.Object` @kind object;
  #L4f8e14.  return v0 @kind object;
  #L4f8e16.  v0:= 0I;
  #L4f8e18.  return v0 @kind object;
}
procedure `boolean` `hasObservers`(`io.reactivex.subjects.SingleSubject` v1 @kind this) @signature `Lio/reactivex/subjects/SingleSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f8d48.  v0:= v1.`io.reactivex.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f8d4c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f8d52.  v0:= temp @kind object;
  #L4f8d54.  v0:= (`io.reactivex.subjects.SingleSubject$a`[]) v0 @kind object;
  #L4f8d58.  v0:= length @variable v0;
  #L4f8d5a.  if v0 == 0 then goto L4f8d62;
  #L4f8d5e.  v0:= 1I;
  #L4f8d60.  goto L4f8d64;
  #L4f8d62.  v0:= 0I;
  #L4f8d64.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.subjects.SingleSubject` v2 @kind this) @signature `Lio/reactivex/subjects/SingleSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f8d78.  v0:= v2.`io.reactivex.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f8d7c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f8d82.  v0:= temp @kind object;
  #L4f8d84.  v1:= `@@io.reactivex.subjects.SingleSubject.f` @type ^`io.reactivex.subjects.SingleSubject$a`[] @kind object;
  #L4f8d88.  if v0 != v1 then goto L4f8d98;
  #L4f8d8c.  v0:= v2.`io.reactivex.subjects.SingleSubject.d` @type ^`java.lang.Throwable` @kind object;
  #L4f8d90.  if v0 == 0 then goto L4f8d98;
  #L4f8d94.  v0:= 1I;
  #L4f8d96.  goto L4f8d9a;
  #L4f8d98.  v0:= 0I;
  #L4f8d9a.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.subjects.SingleSubject` v2 @kind this) @signature `Lio/reactivex/subjects/SingleSubject;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f8dac.  v0:= v2.`io.reactivex.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f8db0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f8db6.  v0:= temp @kind object;
  #L4f8db8.  v1:= `@@io.reactivex.subjects.SingleSubject.f` @type ^`io.reactivex.subjects.SingleSubject$a`[] @kind object;
  #L4f8dbc.  if v0 != v1 then goto L4f8dcc;
  #L4f8dc0.  v0:= v2.`io.reactivex.subjects.SingleSubject.c` @type ^`java.lang.Object` @kind object;
  #L4f8dc4.  if v0 == 0 then goto L4f8dcc;
  #L4f8dc8.  v0:= 1I;
  #L4f8dca.  goto L4f8dce;
  #L4f8dcc.  v0:= 0I;
  #L4f8dce.  return v0;
}
procedure `void` `onError`(`io.reactivex.subjects.SingleSubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/subjects/SingleSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f8eb8.  if v5 != 0 then goto L4f8eca;
  #L4f8ebc.  v5:= new `java.lang.NullPointerException`;
  #L4f8ec0.  v0:= "Null errors are not allowed in 2.x" @kind object;
  #L4f8ec4.  call `<init>`(v5, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f8eca.  v0:= v4.`io.reactivex.subjects.SingleSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f8ece.  v1:= 0I;
  #L4f8ed0.  v2:= 1I;
  #L4f8ed2.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4f8ed8.  v0:= temp;
  #L4f8eda.  if v0 == 0 then goto L4f8f10;
  #L4f8ede.  v4.`io.reactivex.subjects.SingleSubject.d` @type ^`java.lang.Throwable` := v5 @kind object;
  #L4f8ee2.  v0:= v4.`io.reactivex.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f8ee6.  v2:= `@@io.reactivex.subjects.SingleSubject.f` @type ^`io.reactivex.subjects.SingleSubject$a`[] @kind object;
  #L4f8eea.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f8ef0.  v0:= temp @kind object;
  #L4f8ef2.  v0:= (`io.reactivex.subjects.SingleSubject$a`[]) v0 @kind object;
  #L4f8ef6.  v2:= length @variable v0;
  #L4f8ef8.  if v1 >= v2 then goto L4f8f16;
  #L4f8efc.  v3:= v0[v1] @kind object;
  #L4f8f00.  v3:= v3.`io.reactivex.subjects.SingleSubject$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4f8f04.  call `onError`(v3, v5) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f8f0a.  v1:= v1 + 1;
  #L4f8f0e.  goto L4f8ef8;
  #L4f8f10.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f8f16.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subjects.SingleSubject` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/subjects/SingleSubject;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f8f28.  v0:= v2.`io.reactivex.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f8f2c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f8f32.  v0:= temp @kind object;
  #L4f8f34.  v1:= `@@io.reactivex.subjects.SingleSubject.f` @type ^`io.reactivex.subjects.SingleSubject$a`[] @kind object;
  #L4f8f38.  if v0 != v1 then goto L4f8f42;
  #L4f8f3c.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f8f42.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.subjects.SingleSubject` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/subjects/SingleSubject;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f8f54.  if v5 != 0 then goto L4f8f6e;
  #L4f8f58.  v5:= new `java.lang.NullPointerException`;
  #L4f8f5c.  v0:= "Null values are not allowed in 2.x" @kind object;
  #L4f8f60.  call `<init>`(v5, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f8f66.  call `onError`(v4, v5) @signature `Lio/reactivex/subjects/SingleSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4f8f6c.  return @kind void;
  #L4f8f6e.  v0:= v4.`io.reactivex.subjects.SingleSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f8f72.  v1:= 0I;
  #L4f8f74.  v2:= 1I;
  #L4f8f76.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4f8f7c.  v0:= temp;
  #L4f8f7e.  if v0 == 0 then goto L4f8fb4;
  #L4f8f82.  v4.`io.reactivex.subjects.SingleSubject.c` @type ^`java.lang.Object` := v5 @kind object;
  #L4f8f86.  v0:= v4.`io.reactivex.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f8f8a.  v2:= `@@io.reactivex.subjects.SingleSubject.f` @type ^`io.reactivex.subjects.SingleSubject$a`[] @kind object;
  #L4f8f8e.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f8f94.  v0:= temp @kind object;
  #L4f8f96.  v0:= (`io.reactivex.subjects.SingleSubject$a`[]) v0 @kind object;
  #L4f8f9a.  v2:= length @variable v0;
  #L4f8f9c.  if v1 >= v2 then goto L4f8fb4;
  #L4f8fa0.  v3:= v0[v1] @kind object;
  #L4f8fa4.  v3:= v3.`io.reactivex.subjects.SingleSubject$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4f8fa8.  call `onSuccess`(v3, v5) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4f8fae.  v1:= v1 + 1;
  #L4f8fb2.  goto L4f8f9c;
  #L4f8fb4.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.subjects.SingleSubject` v2 @kind this, `io.reactivex.SingleObserver` v3 @kind object) @signature `Lio/reactivex/subjects/SingleSubject;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4f9050.  v0:= new `io.reactivex.subjects.SingleSubject$a`;
  #L4f9054.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/subjects/SingleSubject$a;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/subjects/SingleSubject;)V` @kind direct;
  #L4f905a.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4f9060.  call temp:= `c`(v2, v0) @signature `Lio/reactivex/subjects/SingleSubject;.c:(Lio/reactivex/subjects/SingleSubject$a;)Z` @kind virtual;
  #L4f9066.  v1:= temp;
  #L4f9068.  if v1 == 0 then goto L4f9080;
  #L4f906c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/subjects/SingleSubject$a;.isDisposed:()Z` @kind virtual;
  #L4f9072.  v3:= temp;
  #L4f9074.  if v3 == 0 then goto L4f909a;
  #L4f9078.  call `d`(v2, v0) @signature `Lio/reactivex/subjects/SingleSubject;.d:(Lio/reactivex/subjects/SingleSubject$a;)V` @kind virtual;
  #L4f907e.  goto L4f909a;
  #L4f9080.  v0:= v2.`io.reactivex.subjects.SingleSubject.d` @type ^`java.lang.Throwable` @kind object;
  #L4f9084.  if v0 == 0 then goto L4f9090;
  #L4f9088.  call `onError`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f908e.  goto L4f909a;
  #L4f9090.  v0:= v2.`io.reactivex.subjects.SingleSubject.c` @type ^`java.lang.Object` @kind object;
  #L4f9094.  call `onSuccess`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4f909a.  return @kind void;
}
