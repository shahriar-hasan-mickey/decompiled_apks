record `io.reactivex.subjects.AsyncSubject$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.DeferredScalarDisposable` @kind class {
  `io.reactivex.subjects.AsyncSubject` `io.reactivex.subjects.AsyncSubject$a.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.subjects.AsyncSubject$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.AsyncSubject$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.subjects.AsyncSubject` v2 @kind object) @signature `Lio/reactivex/subjects/AsyncSubject$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/subjects/AsyncSubject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f5d84.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L4f5d8a.  v0.`io.reactivex.subjects.AsyncSubject$a.a` @type ^`io.reactivex.subjects.AsyncSubject` := v2 @kind object;
  #L4f5d8e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.subjects.AsyncSubject$a` v1 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f5da0.  call temp:= `tryDispose`(v1) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.tryDispose:()Z` @kind super;
  #L4f5da6.  v0:= temp;
  #L4f5da8.  if v0 == 0 then goto L4f5db6;
  #L4f5dac.  v0:= v1.`io.reactivex.subjects.AsyncSubject$a.a` @type ^`io.reactivex.subjects.AsyncSubject` @kind object;
  #L4f5db0.  call `f`(v0, v1) @signature `Lio/reactivex/subjects/AsyncSubject;.f:(Lio/reactivex/subjects/AsyncSubject$a;)V` @kind virtual;
  #L4f5db6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.subjects.AsyncSubject$a` v1 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject$a;.onComplete:()V` @AccessFlag  {
    temp;
    v0;

  #L4f5dc8.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.isDisposed:()Z` @kind virtual;
  #L4f5dce.  v0:= temp;
  #L4f5dd0.  if v0 != 0 then goto L4f5dde;
  #L4f5dd4.  v0:= v1.`io.reactivex.internal.observers.DeferredScalarDisposable.actual` @type ^`io.reactivex.Observer` @kind object;
  #L4f5dd8.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4f5dde.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.subjects.AsyncSubject$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/subjects/AsyncSubject$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4f5df0.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.isDisposed:()Z` @kind virtual;
  #L4f5df6.  v0:= temp;
  #L4f5df8.  if v0 == 0 then goto L4f5e04;
  #L4f5dfc.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f5e02.  goto L4f5e0e;
  #L4f5e04.  v0:= v1.`io.reactivex.internal.observers.DeferredScalarDisposable.actual` @type ^`io.reactivex.Observer` @kind object;
  #L4f5e08.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f5e0e.  return @kind void;
}
