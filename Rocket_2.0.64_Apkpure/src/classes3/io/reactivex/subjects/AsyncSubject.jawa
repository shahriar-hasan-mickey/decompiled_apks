record `io.reactivex.subjects.AsyncSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.subjects.Subject` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.AsyncSubject.a` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.subjects.AsyncSubject.b` @AccessFlag ;
  `java.lang.Object` `io.reactivex.subjects.AsyncSubject.c` @AccessFlag ;
}
global `io.reactivex.subjects.AsyncSubject$a`[] `@@io.reactivex.subjects.AsyncSubject.d` @AccessFlag STATIC_FINAL;
global `io.reactivex.subjects.AsyncSubject$a`[] `@@io.reactivex.subjects.AsyncSubject.e` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/subjects/AsyncSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f6038.  v0:= 0I;
  #L4f603a.  v1:= new `io.reactivex.subjects.AsyncSubject$a`[v0];
  #L4f603e.  `@@io.reactivex.subjects.AsyncSubject.d` @type ^`io.reactivex.subjects.AsyncSubject$a`[] := v1 @kind object;
  #L4f6042.  v0:= new `io.reactivex.subjects.AsyncSubject$a`[v0];
  #L4f6046.  `@@io.reactivex.subjects.AsyncSubject.e` @type ^`io.reactivex.subjects.AsyncSubject$a`[] := v0 @kind object;
  #L4f604a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f605c.  call `<init>`(v2) @signature `Lio/reactivex/subjects/Subject;.<init>:()V` @kind direct;
  #L4f6062.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f6066.  v1:= `@@io.reactivex.subjects.AsyncSubject.d` @type ^`io.reactivex.subjects.AsyncSubject$a`[] @kind object;
  #L4f606a.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f6070.  v2.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4f6074.  return @kind void;
}
procedure `io.reactivex.subjects.AsyncSubject` `create`() @signature `Lio/reactivex/subjects/AsyncSubject;.create:()Lio/reactivex/subjects/AsyncSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f5f40.  v0:= new `io.reactivex.subjects.AsyncSubject`;
  #L4f5f44.  call `<init>`(v0) @signature `Lio/reactivex/subjects/AsyncSubject;.<init>:()V` @kind direct;
  #L4f5f4a.  return v0 @kind object;
}
procedure `boolean` `d`(`io.reactivex.subjects.AsyncSubject` v4 @kind this, `io.reactivex.subjects.AsyncSubject$a` v5 @kind object) @signature `Lio/reactivex/subjects/AsyncSubject;.d:(Lio/reactivex/subjects/AsyncSubject$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f5e20.  v0:= v4.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f5e24.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f5e2a.  v0:= temp @kind object;
  #L4f5e2c.  v0:= (`io.reactivex.subjects.AsyncSubject$a`[]) v0 @kind object;
  #L4f5e30.  v1:= `@@io.reactivex.subjects.AsyncSubject.e` @type ^`io.reactivex.subjects.AsyncSubject$a`[] @kind object;
  #L4f5e34.  v2:= 0I;
  #L4f5e36.  if v0 != v1 then goto L4f5e3c;
  #L4f5e3a.  return v2;
  #L4f5e3c.  v1:= length @variable v0;
  #L4f5e3e.  v3:= v1 + 1;
  #L4f5e42.  v3:= new `io.reactivex.subjects.AsyncSubject$a`[v3];
  #L4f5e46.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f5e4c.  v3[v1]:= v5 @kind object;
  #L4f5e50.  v1:= v4.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f5e54.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f5e5a.  v0:= temp;
  #L4f5e5c.  if v0 == 0 then goto L4f5e20;
  #L4f5e60.  v5:= 1I;
  #L4f5e62.  return v5;
}
procedure `void` `e`(`io.reactivex.subjects.AsyncSubject` v5 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f6088.  v0:= 0I;
  #L4f608a.  v5.`io.reactivex.subjects.AsyncSubject.c` @type ^`java.lang.Object` := v0 @kind object;
  #L4f608e.  v0:= new `java.lang.NullPointerException`;
  #L4f6092.  v1:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L4f6096.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f609c.  v5.`io.reactivex.subjects.AsyncSubject.b` @type ^`java.lang.Throwable` := v0 @kind object;
  #L4f60a0.  v1:= v5.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f60a4.  v2:= `@@io.reactivex.subjects.AsyncSubject.e` @type ^`io.reactivex.subjects.AsyncSubject$a`[] @kind object;
  #L4f60a8.  call temp:= `getAndSet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f60ae.  v1:= temp @kind object;
  #L4f60b0.  v1:= (`io.reactivex.subjects.AsyncSubject$a`[]) v1 @kind object;
  #L4f60b4.  v2:= length @variable v1;
  #L4f60b6.  v3:= 0I;
  #L4f60b8.  if v3 >= v2 then goto L4f60cc;
  #L4f60bc.  v4:= v1[v3] @kind object;
  #L4f60c0.  call `onError`(v4, v0) @signature `Lio/reactivex/subjects/AsyncSubject$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4f60c6.  v3:= v3 + 1;
  #L4f60ca.  goto L4f60b8;
  #L4f60cc.  return @kind void;
}
procedure `void` `f`(`io.reactivex.subjects.AsyncSubject` v6 @kind this, `io.reactivex.subjects.AsyncSubject$a` v7 @kind object) @signature `Lio/reactivex/subjects/AsyncSubject;.f:(Lio/reactivex/subjects/AsyncSubject$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f6228.  v0:= v6.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f622c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f6232.  v0:= temp @kind object;
  #L4f6234.  v0:= (`io.reactivex.subjects.AsyncSubject$a`[]) v0 @kind object;
  #L4f6238.  v1:= length @variable v0;
  #L4f623a.  if v1 != 0 then goto L4f6240;
  #L4f623e.  return @kind void;
  #L4f6240.  v2:= -1I;
  #L4f6242.  v3:= 0I;
  #L4f6244.  v4:= 0I;
  #L4f6246.  if v4 >= v1 then goto L4f625c;
  #L4f624a.  v5:= v0[v4] @kind object;
  #L4f624e.  if v5 != v7 then goto L4f6256;
  #L4f6252.  v2:= v4;
  #L4f6254.  goto L4f625c;
  #L4f6256.  v4:= v4 + 1;
  #L4f625a.  goto L4f6246;
  #L4f625c.  if v2 >= 0 then goto L4f6262;
  #L4f6260.  return @kind void;
  #L4f6262.  v4:= 1I;
  #L4f6264.  if v1 != v4 then goto L4f626e;
  #L4f6268.  v1:= `@@io.reactivex.subjects.AsyncSubject.d` @type ^`io.reactivex.subjects.AsyncSubject$a`[] @kind object;
  #L4f626c.  goto L4f628c;
  #L4f626e.  v5:= v1 + -1;
  #L4f6272.  v5:= new `io.reactivex.subjects.AsyncSubject$a`[v5];
  #L4f6276.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f627c.  v3:= v2 + 1;
  #L4f6280.  v1:= v1 - v2 @kind int;
  #L4f6282.  v1:= v1 - v4 @kind int;
  #L4f6284.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f628a.  v1:= v5 @kind object;
  #L4f628c.  v2:= v6.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6290.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f6296.  v0:= temp;
  #L4f6298.  if v0 == 0 then goto L4f6228;
  #L4f629c.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f6008.  v0:= v2.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f600c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f6012.  v0:= temp @kind object;
  #L4f6014.  v1:= `@@io.reactivex.subjects.AsyncSubject.e` @type ^`io.reactivex.subjects.AsyncSubject$a`[] @kind object;
  #L4f6018.  if v0 != v1 then goto L4f6022;
  #L4f601c.  v0:= v2.`io.reactivex.subjects.AsyncSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L4f6020.  goto L4f6024;
  #L4f6022.  v0:= 0I;
  #L4f6024.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f5f5c.  v0:= v2.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f5f60.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f5f66.  v0:= temp @kind object;
  #L4f5f68.  v1:= `@@io.reactivex.subjects.AsyncSubject.e` @type ^`io.reactivex.subjects.AsyncSubject$a`[] @kind object;
  #L4f5f6c.  if v0 != v1 then goto L4f5f76;
  #L4f5f70.  v0:= v2.`io.reactivex.subjects.AsyncSubject.c` @type ^`java.lang.Object` @kind object;
  #L4f5f74.  goto L4f5f78;
  #L4f5f76.  v0:= 0I;
  #L4f5f78.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.subjects.AsyncSubject` v3 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject;.getValues:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f5f8c.  call temp:= `getValue`(v3) @signature `Lio/reactivex/subjects/AsyncSubject;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L4f5f92.  v0:= temp @kind object;
  #L4f5f94.  v1:= 0I;
  #L4f5f96.  if v0 == 0 then goto L4f5fa6;
  #L4f5f9a.  v2:= 1I;
  #L4f5f9c.  v2:= new `java.lang.Object`[v2];
  #L4f5fa0.  v2[v1]:= v0 @kind object;
  #L4f5fa4.  goto L4f5faa;
  #L4f5fa6.  v2:= new `java.lang.Object`[v1];
  #L4f5faa.  return v2 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.subjects.AsyncSubject` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/subjects/AsyncSubject;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f5fbc.  call temp:= `getValue`(v5) @signature `Lio/reactivex/subjects/AsyncSubject;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L4f5fc2.  v0:= temp @kind object;
  #L4f5fc4.  v1:= 0I;
  #L4f5fc6.  v2:= 0I;
  #L4f5fc8.  if v0 != 0 then goto L4f5fd8;
  #L4f5fcc.  v0:= length @variable v6;
  #L4f5fce.  if v0 == 0 then goto L4f5fd6;
  #L4f5fd2.  v6[v2]:= v1 @kind object;
  #L4f5fd6.  return v6 @kind object;
  #L4f5fd8.  v3:= length @variable v6;
  #L4f5fda.  v4:= 1I;
  #L4f5fdc.  if v3 != 0 then goto L4f5fe8;
  #L4f5fe0.  call temp:= `copyOf`(v6, v4) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L4f5fe6.  v6:= temp @kind object;
  #L4f5fe8.  v6[v2]:= v0 @kind object;
  #L4f5fec.  v0:= length @variable v6;
  #L4f5fee.  if v0 == v4 then goto L4f5ff6;
  #L4f5ff2.  v6[v4]:= v1 @kind object;
  #L4f5ff6.  return v6 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f5e74.  v0:= v2.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f5e78.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f5e7e.  v0:= temp @kind object;
  #L4f5e80.  v1:= `@@io.reactivex.subjects.AsyncSubject.e` @type ^`io.reactivex.subjects.AsyncSubject$a`[] @kind object;
  #L4f5e84.  if v0 != v1 then goto L4f5e94;
  #L4f5e88.  v0:= v2.`io.reactivex.subjects.AsyncSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L4f5e8c.  if v0 != 0 then goto L4f5e94;
  #L4f5e90.  v0:= 1I;
  #L4f5e92.  goto L4f5e96;
  #L4f5e94.  v0:= 0I;
  #L4f5e96.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.subjects.AsyncSubject` v1 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f5ea8.  v0:= v1.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f5eac.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f5eb2.  v0:= temp @kind object;
  #L4f5eb4.  v0:= (`io.reactivex.subjects.AsyncSubject$a`[]) v0 @kind object;
  #L4f5eb8.  v0:= length @variable v0;
  #L4f5eba.  if v0 == 0 then goto L4f5ec2;
  #L4f5ebe.  v0:= 1I;
  #L4f5ec0.  goto L4f5ec4;
  #L4f5ec2.  v0:= 0I;
  #L4f5ec4.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f5ed8.  v0:= v2.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f5edc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f5ee2.  v0:= temp @kind object;
  #L4f5ee4.  v1:= `@@io.reactivex.subjects.AsyncSubject.e` @type ^`io.reactivex.subjects.AsyncSubject$a`[] @kind object;
  #L4f5ee8.  if v0 != v1 then goto L4f5ef8;
  #L4f5eec.  v0:= v2.`io.reactivex.subjects.AsyncSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L4f5ef0.  if v0 == 0 then goto L4f5ef8;
  #L4f5ef4.  v0:= 1I;
  #L4f5ef6.  goto L4f5efa;
  #L4f5ef8.  v0:= 0I;
  #L4f5efa.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f5f0c.  v0:= v2.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f5f10.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f5f16.  v0:= temp @kind object;
  #L4f5f18.  v1:= `@@io.reactivex.subjects.AsyncSubject.e` @type ^`io.reactivex.subjects.AsyncSubject$a`[] @kind object;
  #L4f5f1c.  if v0 != v1 then goto L4f5f2c;
  #L4f5f20.  v0:= v2.`io.reactivex.subjects.AsyncSubject.c` @type ^`java.lang.Object` @kind object;
  #L4f5f24.  if v0 == 0 then goto L4f5f2c;
  #L4f5f28.  v0:= 1I;
  #L4f5f2a.  goto L4f5f2e;
  #L4f5f2c.  v0:= 0I;
  #L4f5f2e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.subjects.AsyncSubject` v5 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f60e0.  v0:= v5.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f60e4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f60ea.  v0:= temp @kind object;
  #L4f60ec.  v1:= `@@io.reactivex.subjects.AsyncSubject.e` @type ^`io.reactivex.subjects.AsyncSubject$a`[] @kind object;
  #L4f60f0.  if v0 != v1 then goto L4f60f6;
  #L4f60f4.  return @kind void;
  #L4f60f6.  v0:= v5.`io.reactivex.subjects.AsyncSubject.c` @type ^`java.lang.Object` @kind object;
  #L4f60fa.  v2:= v5.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f60fe.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f6104.  v1:= temp @kind object;
  #L4f6106.  v1:= (`io.reactivex.subjects.AsyncSubject$a`[]) v1 @kind object;
  #L4f610a.  v2:= 0I;
  #L4f610c.  if v0 != 0 then goto L4f6126;
  #L4f6110.  v0:= length @variable v1;
  #L4f6112.  if v2 >= v0 then goto L4f613c;
  #L4f6116.  v3:= v1[v2] @kind object;
  #L4f611a.  call `onComplete`(v3) @signature `Lio/reactivex/subjects/AsyncSubject$a;.onComplete:()V` @kind virtual;
  #L4f6120.  v2:= v2 + 1;
  #L4f6124.  goto L4f6112;
  #L4f6126.  v3:= length @variable v1;
  #L4f6128.  if v2 >= v3 then goto L4f613c;
  #L4f612c.  v4:= v1[v2] @kind object;
  #L4f6130.  call `complete`(v4, v0) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L4f6136.  v2:= v2 + 1;
  #L4f613a.  goto L4f6128;
  #L4f613c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.subjects.AsyncSubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/subjects/AsyncSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f6150.  if v5 != 0 then goto L4f6162;
  #L4f6154.  v5:= new `java.lang.NullPointerException`;
  #L4f6158.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L4f615c.  call `<init>`(v5, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f6162.  v0:= v4.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6166.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f616c.  v0:= temp @kind object;
  #L4f616e.  v1:= `@@io.reactivex.subjects.AsyncSubject.e` @type ^`io.reactivex.subjects.AsyncSubject$a`[] @kind object;
  #L4f6172.  if v0 != v1 then goto L4f617e;
  #L4f6176.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f617c.  return @kind void;
  #L4f617e.  v0:= 0I;
  #L4f6180.  v4.`io.reactivex.subjects.AsyncSubject.c` @type ^`java.lang.Object` := v0 @kind object;
  #L4f6184.  v4.`io.reactivex.subjects.AsyncSubject.b` @type ^`java.lang.Throwable` := v5 @kind object;
  #L4f6188.  v0:= v4.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f618c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f6192.  v0:= temp @kind object;
  #L4f6194.  v0:= (`io.reactivex.subjects.AsyncSubject$a`[]) v0 @kind object;
  #L4f6198.  v1:= length @variable v0;
  #L4f619a.  v2:= 0I;
  #L4f619c.  if v2 >= v1 then goto L4f61b0;
  #L4f61a0.  v3:= v0[v2] @kind object;
  #L4f61a4.  call `onError`(v3, v5) @signature `Lio/reactivex/subjects/AsyncSubject$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4f61aa.  v2:= v2 + 1;
  #L4f61ae.  goto L4f619c;
  #L4f61b0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.subjects.AsyncSubject` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/subjects/AsyncSubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f61c4.  v0:= v2.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f61c8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f61ce.  v0:= temp @kind object;
  #L4f61d0.  v1:= `@@io.reactivex.subjects.AsyncSubject.e` @type ^`io.reactivex.subjects.AsyncSubject$a`[] @kind object;
  #L4f61d4.  if v0 != v1 then goto L4f61da;
  #L4f61d8.  return @kind void;
  #L4f61da.  if v3 != 0 then goto L4f61e6;
  #L4f61de.  call `e`(v2) @signature `Lio/reactivex/subjects/AsyncSubject;.e:()V` @kind virtual;
  #L4f61e4.  return @kind void;
  #L4f61e6.  v2.`io.reactivex.subjects.AsyncSubject.c` @type ^`java.lang.Object` := v3 @kind object;
  #L4f61ea.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subjects.AsyncSubject` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/subjects/AsyncSubject;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f61fc.  v0:= v2.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6200.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f6206.  v0:= temp @kind object;
  #L4f6208.  v1:= `@@io.reactivex.subjects.AsyncSubject.e` @type ^`io.reactivex.subjects.AsyncSubject$a`[] @kind object;
  #L4f620c.  if v0 != v1 then goto L4f6216;
  #L4f6210.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f6216.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.subjects.AsyncSubject` v2 @kind this, `io.reactivex.Observer` v3 @kind object) @signature `Lio/reactivex/subjects/AsyncSubject;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4f62b0.  v0:= new `io.reactivex.subjects.AsyncSubject$a`;
  #L4f62b4.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/subjects/AsyncSubject$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/subjects/AsyncSubject;)V` @kind direct;
  #L4f62ba.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4f62c0.  call temp:= `d`(v2, v0) @signature `Lio/reactivex/subjects/AsyncSubject;.d:(Lio/reactivex/subjects/AsyncSubject$a;)Z` @kind virtual;
  #L4f62c6.  v1:= temp;
  #L4f62c8.  if v1 == 0 then goto L4f62e0;
  #L4f62cc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.isDisposed:()Z` @kind virtual;
  #L4f62d2.  v3:= temp;
  #L4f62d4.  if v3 == 0 then goto L4f6306;
  #L4f62d8.  call `f`(v2, v0) @signature `Lio/reactivex/subjects/AsyncSubject;.f:(Lio/reactivex/subjects/AsyncSubject$a;)V` @kind virtual;
  #L4f62de.  goto L4f6306;
  #L4f62e0.  v1:= v2.`io.reactivex.subjects.AsyncSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L4f62e4.  if v1 == 0 then goto L4f62f0;
  #L4f62e8.  call `onError`(v3, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f62ee.  goto L4f6306;
  #L4f62f0.  v3:= v2.`io.reactivex.subjects.AsyncSubject.c` @type ^`java.lang.Object` @kind object;
  #L4f62f4.  if v3 == 0 then goto L4f6300;
  #L4f62f8.  call `complete`(v0, v3) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L4f62fe.  goto L4f6306;
  #L4f6300.  call `onComplete`(v0) @signature `Lio/reactivex/subjects/AsyncSubject$a;.onComplete:()V` @kind virtual;
  #L4f6306.  return @kind void;
}
