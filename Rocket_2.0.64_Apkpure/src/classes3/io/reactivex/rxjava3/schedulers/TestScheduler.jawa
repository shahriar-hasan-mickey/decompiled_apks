record `io.reactivex.rxjava3.schedulers.TestScheduler` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Scheduler` @kind class {
  `java.util.Queue` `io.reactivex.rxjava3.schedulers.TestScheduler.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.schedulers.TestScheduler.c` @AccessFlag ;
  `long` `io.reactivex.rxjava3.schedulers.TestScheduler.d` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.schedulers.TestScheduler` v2 @kind this) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f07e0.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/core/Scheduler;.<init>:()V` @kind direct;
  #L4f07e6.  v0:= new `java.util.concurrent.PriorityBlockingQueue`;
  #L4f07ea.  v1:= 11I;
  #L4f07ee.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.<init>:(I)V` @kind direct;
  #L4f07f4.  v2.`io.reactivex.rxjava3.schedulers.TestScheduler.b` @type ^`java.util.Queue` := v0 @kind object;
  #L4f07f8.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.schedulers.TestScheduler` v2 @kind this, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler;.<init>:(JLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f080c.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/core/Scheduler;.<init>:()V` @kind direct;
  #L4f0812.  v0:= new `java.util.concurrent.PriorityBlockingQueue`;
  #L4f0816.  v1:= 11I;
  #L4f081a.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.<init>:(I)V` @kind direct;
  #L4f0820.  v2.`io.reactivex.rxjava3.schedulers.TestScheduler.b` @type ^`java.util.Queue` := v0 @kind object;
  #L4f0824.  call temp:= `toNanos`(v5, v3) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L4f082a.  v3:= temp @kind wide;
  #L4f082c.  v2.`io.reactivex.rxjava3.schedulers.TestScheduler.d` @type ^`long` := v3 @kind wide;
  #L4f0830.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.schedulers.TestScheduler` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler;.b:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f08ac.  v0:= v6.`io.reactivex.rxjava3.schedulers.TestScheduler.b` @type ^`java.util.Queue` @kind object;
  #L4f08b0.  call temp:= `peek`(v0) @signature `Ljava/util/Queue;.peek:()Ljava/lang/Object;` @kind interface;
  #L4f08b6.  v0:= temp @kind object;
  #L4f08b8.  v0:= (`io.reactivex.rxjava3.schedulers.TestScheduler$b`) v0 @kind object;
  #L4f08bc.  if v0 == 0 then goto L4f0904;
  #L4f08c0.  v1:= v0.`io.reactivex.rxjava3.schedulers.TestScheduler$b.a` @type ^`long` @kind wide;
  #L4f08c4.  v3:= lcmp(v1, v7);
  #L4f08c8.  if v3 <= 0 then goto L4f08ce;
  #L4f08cc.  goto L4f0904;
  #L4f08ce.  v3:= 0L;
  #L4f08d2.  v5:= lcmp(v1, v3);
  #L4f08d6.  if v5 != 0 then goto L4f08de;
  #L4f08da.  v1:= v6.`io.reactivex.rxjava3.schedulers.TestScheduler.d` @type ^`long` @kind wide;
  #L4f08de.  v6.`io.reactivex.rxjava3.schedulers.TestScheduler.d` @type ^`long` := v1 @kind wide;
  #L4f08e2.  v1:= v6.`io.reactivex.rxjava3.schedulers.TestScheduler.b` @type ^`java.util.Queue` @kind object;
  #L4f08e6.  call temp:= `remove`(v1, v0) @signature `Ljava/util/Queue;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L4f08ec.  v1:= v0.`io.reactivex.rxjava3.schedulers.TestScheduler$b.c` @type ^`io.reactivex.rxjava3.schedulers.TestScheduler$a` @kind object;
  #L4f08f0.  v1:= v1.`io.reactivex.rxjava3.schedulers.TestScheduler$a.a` @type ^`boolean` @kind boolean;
  #L4f08f4.  if v1 != 0 then goto L4f08ac;
  #L4f08f8.  v0:= v0.`io.reactivex.rxjava3.schedulers.TestScheduler$b.b` @type ^`java.lang.Runnable` @kind object;
  #L4f08fc.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L4f0902.  goto L4f08ac;
  #L4f0904.  v6.`io.reactivex.rxjava3.schedulers.TestScheduler.d` @type ^`long` := v7 @kind wide;
  #L4f0908.  return @kind void;
}
procedure `void` `advanceTimeBy`(`io.reactivex.rxjava3.schedulers.TestScheduler` v2 @kind this, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler;.advanceTimeBy:(JLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f0844.  v0:= v2.`io.reactivex.rxjava3.schedulers.TestScheduler.d` @type ^`long` @kind wide;
  #L4f0848.  call temp:= `toNanos`(v5, v3) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L4f084e.  v3:= temp @kind wide;
  #L4f0850.  v0:= v0 + v3 @kind long;
  #L4f0852.  v3:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4f0856.  call `advanceTimeTo`(v2, v0, v3) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler;.advanceTimeTo:(JLjava/util/concurrent/TimeUnit;)V` @kind virtual;
  #L4f085c.  return @kind void;
}
procedure `void` `advanceTimeTo`(`io.reactivex.rxjava3.schedulers.TestScheduler` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler;.advanceTimeTo:(JLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC {
    temp;

  #L4f0870.  call temp:= `toNanos`(v3, v1) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L4f0876.  v1:= temp @kind wide;
  #L4f0878.  call `b`(v0, v1) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler;.b:(J)V` @kind direct;
  #L4f087e.  return @kind void;
}
procedure `io.reactivex.rxjava3.core.Scheduler$Worker` `createWorker`(`io.reactivex.rxjava3.schedulers.TestScheduler` v1 @kind this) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler;.createWorker:()Lio/reactivex/rxjava3/core/Scheduler$Worker;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f07a0.  v0:= new `io.reactivex.rxjava3.schedulers.TestScheduler$a`;
  #L4f07a4.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler$a;.<init>:(Lio/reactivex/rxjava3/schedulers/TestScheduler;)V` @kind direct;
  #L4f07aa.  return v0 @kind object;
}
procedure `long` `now`(`io.reactivex.rxjava3.schedulers.TestScheduler` v3 @kind this, `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f07bc.  v0:= v3.`io.reactivex.rxjava3.schedulers.TestScheduler.d` @type ^`long` @kind wide;
  #L4f07c0.  v2:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4f07c4.  call temp:= `convert`(v4, v0, v2) @signature `Ljava/util/concurrent/TimeUnit;.convert:(JLjava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4f07ca.  v0:= temp @kind wide;
  #L4f07cc.  return v0 @kind wide;
}
procedure `void` `triggerActions`(`io.reactivex.rxjava3.schedulers.TestScheduler` v2 @kind this) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler;.triggerActions:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f0890.  v0:= v2.`io.reactivex.rxjava3.schedulers.TestScheduler.d` @type ^`long` @kind wide;
  #L4f0894.  call `b`(v2, v0) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler;.b:(J)V` @kind direct;
  #L4f089a.  return @kind void;
}
