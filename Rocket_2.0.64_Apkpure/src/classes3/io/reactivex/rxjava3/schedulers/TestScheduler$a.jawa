record `io.reactivex.rxjava3.schedulers.TestScheduler$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.Scheduler$Worker` @kind class {
  `boolean` `io.reactivex.rxjava3.schedulers.TestScheduler$a.a` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.schedulers.TestScheduler` `io.reactivex.rxjava3.schedulers.TestScheduler$a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.schedulers.TestScheduler$a` v0 @kind this, `io.reactivex.rxjava3.schedulers.TestScheduler` v1 @kind object) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler$a;.<init>:(Lio/reactivex/rxjava3/schedulers/TestScheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f06a0.  v0.`io.reactivex.rxjava3.schedulers.TestScheduler$a.b` @type ^`io.reactivex.rxjava3.schedulers.TestScheduler` := v1 @kind object;
  #L4f06a4.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.<init>:()V` @kind direct;
  #L4f06aa.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.schedulers.TestScheduler$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f06bc.  v0:= 1I;
  #L4f06be.  v1.`io.reactivex.rxjava3.schedulers.TestScheduler$a.a` @type ^`boolean` := v0 @kind boolean;
  #L4f06c2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.schedulers.TestScheduler$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f0588.  v0:= v1.`io.reactivex.rxjava3.schedulers.TestScheduler$a.a` @type ^`boolean` @kind boolean;
  #L4f058c.  return v0;
}
procedure `long` `now`(`io.reactivex.rxjava3.schedulers.TestScheduler$a` v2 @kind this, `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler$a;.now:(Ljava/util/concurrent/TimeUnit;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f0680.  v0:= v2.`io.reactivex.rxjava3.schedulers.TestScheduler$a.b` @type ^`io.reactivex.rxjava3.schedulers.TestScheduler` @kind object;
  #L4f0684.  call temp:= `now`(v0, v3) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4f068a.  v0:= temp @kind wide;
  #L4f068c.  return v0 @kind wide;
}
procedure `io.reactivex.rxjava3.disposables.Disposable` `schedule`(`io.reactivex.rxjava3.schedulers.TestScheduler$a` v10 @kind this, `java.lang.Runnable` v11 @kind object) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler$a;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4f05a0.  v0:= v10.`io.reactivex.rxjava3.schedulers.TestScheduler$a.a` @type ^`boolean` @kind boolean;
  #L4f05a4.  if v0 == 0 then goto L4f05ae;
  #L4f05a8.  v11:= `@@io.reactivex.rxjava3.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.rxjava3.internal.disposables.EmptyDisposable` @kind object;
  #L4f05ac.  return v11 @kind object;
  #L4f05ae.  v7:= new `io.reactivex.rxjava3.schedulers.TestScheduler$b`;
  #L4f05b2.  v2:= 0L;
  #L4f05b6.  v0:= v10.`io.reactivex.rxjava3.schedulers.TestScheduler$a.b` @type ^`io.reactivex.rxjava3.schedulers.TestScheduler` @kind object;
  #L4f05ba.  v5:= v0.`io.reactivex.rxjava3.schedulers.TestScheduler.c` @type ^`long` @kind wide;
  #L4f05be.  v8:= 1L;
  #L4f05c2.  v8:= v8 + v5 @kind long;
  #L4f05c4.  v0.`io.reactivex.rxjava3.schedulers.TestScheduler.c` @type ^`long` := v8 @kind wide;
  #L4f05c8.  v0:= v7 @kind object;
  #L4f05ca.  v1:= v10 @kind object;
  #L4f05cc.  v4:= v11 @kind object;
  #L4f05ce.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler$b;.<init>:(Lio/reactivex/rxjava3/schedulers/TestScheduler$a;JLjava/lang/Runnable;J)V` @kind direct;
  #L4f05d4.  v11:= v10.`io.reactivex.rxjava3.schedulers.TestScheduler$a.b` @type ^`io.reactivex.rxjava3.schedulers.TestScheduler` @kind object;
  #L4f05d8.  v11:= v11.`io.reactivex.rxjava3.schedulers.TestScheduler.b` @type ^`java.util.Queue` @kind object;
  #L4f05dc.  call temp:= `add`(v11, v7) @signature `Ljava/util/Queue;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4f05e2.  v11:= new `io.reactivex.rxjava3.schedulers.TestScheduler$a$a`;
  #L4f05e6.  call `<init>`(v11, v10, v7) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler$a$a;.<init>:(Lio/reactivex/rxjava3/schedulers/TestScheduler$a;Lio/reactivex/rxjava3/schedulers/TestScheduler$b;)V` @kind direct;
  #L4f05ec.  call temp:= `g`(v11) @signature `Ls0/d;.g:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind static;
  #L4f05f2.  v11:= temp @kind object;
  #L4f05f4.  return v11 @kind object;
}
procedure `io.reactivex.rxjava3.disposables.Disposable` `schedule`(`io.reactivex.rxjava3.schedulers.TestScheduler$a` v8 @kind this, `java.lang.Runnable` v9 @kind object, `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler$a;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4f0608.  v0:= v8.`io.reactivex.rxjava3.schedulers.TestScheduler$a.a` @type ^`boolean` @kind boolean;
  #L4f060c.  if v0 == 0 then goto L4f0616;
  #L4f0610.  v9:= `@@io.reactivex.rxjava3.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.rxjava3.internal.disposables.EmptyDisposable` @kind object;
  #L4f0614.  return v9 @kind object;
  #L4f0616.  v7:= new `io.reactivex.rxjava3.schedulers.TestScheduler$b`;
  #L4f061a.  v0:= v8.`io.reactivex.rxjava3.schedulers.TestScheduler$a.b` @type ^`io.reactivex.rxjava3.schedulers.TestScheduler` @kind object;
  #L4f061e.  v0:= v0.`io.reactivex.rxjava3.schedulers.TestScheduler.d` @type ^`long` @kind wide;
  #L4f0622.  call temp:= `toNanos`(v12, v10) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L4f0628.  v10:= temp @kind wide;
  #L4f062a.  v2:= v0 + v10 @kind long;
  #L4f062e.  v10:= v8.`io.reactivex.rxjava3.schedulers.TestScheduler$a.b` @type ^`io.reactivex.rxjava3.schedulers.TestScheduler` @kind object;
  #L4f0632.  v5:= v10.`io.reactivex.rxjava3.schedulers.TestScheduler.c` @type ^`long` @kind wide;
  #L4f0636.  v11:= 1L;
  #L4f063a.  v11:= v11 + v5 @kind long;
  #L4f063c.  v10.`io.reactivex.rxjava3.schedulers.TestScheduler.c` @type ^`long` := v11 @kind wide;
  #L4f0640.  v0:= v7 @kind object;
  #L4f0642.  v1:= v8 @kind object;
  #L4f0644.  v4:= v9 @kind object;
  #L4f0646.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler$b;.<init>:(Lio/reactivex/rxjava3/schedulers/TestScheduler$a;JLjava/lang/Runnable;J)V` @kind direct;
  #L4f064c.  v9:= v8.`io.reactivex.rxjava3.schedulers.TestScheduler$a.b` @type ^`io.reactivex.rxjava3.schedulers.TestScheduler` @kind object;
  #L4f0650.  v9:= v9.`io.reactivex.rxjava3.schedulers.TestScheduler.b` @type ^`java.util.Queue` @kind object;
  #L4f0654.  call temp:= `add`(v9, v7) @signature `Ljava/util/Queue;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4f065a.  v9:= new `io.reactivex.rxjava3.schedulers.TestScheduler$a$a`;
  #L4f065e.  call `<init>`(v9, v8, v7) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler$a$a;.<init>:(Lio/reactivex/rxjava3/schedulers/TestScheduler$a;Lio/reactivex/rxjava3/schedulers/TestScheduler$b;)V` @kind direct;
  #L4f0664.  call temp:= `g`(v9) @signature `Ls0/d;.g:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind static;
  #L4f066a.  v9:= temp @kind object;
  #L4f066c.  return v9 @kind object;
}
