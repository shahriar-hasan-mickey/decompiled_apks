record `io.reactivex.rxjava3.subscribers.TestSubscriber` @kind class @AccessFlag PUBLIC extends `io.reactivex.rxjava3.observers.BaseTestConsumer` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.subscribers.TestSubscriber.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `io.reactivex.rxjava3.subscribers.TestSubscriber.b` @AccessFlag PRIVATE_VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.subscribers.TestSubscriber.c` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.subscribers.TestSubscriber.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v3 @kind this) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L4f5094.  v0:= `@@io.reactivex.rxjava3.subscribers.TestSubscriber$a.a` @type ^`io.reactivex.rxjava3.subscribers.TestSubscriber$a` @kind object;
  #L4f5098.  v1:= 9223372036854775807L;
  #L4f50a2.  call `<init>`(v3, v0, v1) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @kind direct;
  #L4f50a8.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.<init>:(J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4f50bc.  v0:= `@@io.reactivex.rxjava3.subscribers.TestSubscriber$a.a` @type ^`io.reactivex.rxjava3.subscribers.TestSubscriber$a` @kind object;
  #L4f50c0.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @kind direct;
  #L4f50c6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f50d8.  v0:= 9223372036854775807L;
  #L4f50e2.  call `<init>`(v2, v3, v0) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @kind direct;
  #L4f50e8.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object, `long` v5 ) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L4f50fc.  call `<init>`(v3) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.<init>:()V` @kind direct;
  #L4f5102.  v0:= 0L;
  #L4f5106.  v2:= lcmp(v5, v0);
  #L4f510a.  if v2 < 0 then goto L4f5130;
  #L4f510e.  v3.`io.reactivex.rxjava3.subscribers.TestSubscriber.a` @type ^`org.reactivestreams.Subscriber` := v4 @kind object;
  #L4f5112.  v4:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f5116.  call `<init>`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f511c.  v3.`io.reactivex.rxjava3.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v4 @kind object;
  #L4f5120.  v4:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4f5124.  call `<init>`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:(J)V` @kind direct;
  #L4f512a.  v3.`io.reactivex.rxjava3.subscribers.TestSubscriber.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v4 @kind object;
  #L4f512e.  return @kind void;
  #L4f5130.  v4:= new `java.lang.IllegalArgumentException`;
  #L4f5134.  v5:= "Negative initial request not allowed" @kind object;
  #L4f5138.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f513e.  throw v4;
}
procedure `io.reactivex.rxjava3.subscribers.TestSubscriber` `create`() @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.create:()Lio/reactivex/rxjava3/subscribers/TestSubscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f5028.  v0:= new `io.reactivex.rxjava3.subscribers.TestSubscriber`;
  #L4f502c.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.<init>:()V` @kind direct;
  #L4f5032.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.subscribers.TestSubscriber` `create`(`long` v1 ) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.create:(J)Lio/reactivex/rxjava3/subscribers/TestSubscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f5044.  v0:= new `io.reactivex.rxjava3.subscribers.TestSubscriber`;
  #L4f5048.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.<init>:(J)V` @kind direct;
  #L4f504e.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.subscribers.TestSubscriber` `create`(`org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.create:(Lorg/reactivestreams/Subscriber;)Lio/reactivex/rxjava3/subscribers/TestSubscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f5060.  v0:= new `io.reactivex.rxjava3.subscribers.TestSubscriber`;
  #L4f5064.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4f506a.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.observers.BaseTestConsumer` `assertSubscribed`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.assertSubscribed:()Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @AccessFlag PROTECTED_SYNTHETIC {
    temp;
    v0;

  #L4f4fdc.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.assertSubscribed:()Lio/reactivex/rxjava3/subscribers/TestSubscriber;` @kind virtual;
  #L4f4fe2.  v0:= temp @kind object;
  #L4f4fe4.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.subscribers.TestSubscriber` `assertSubscribed`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.assertSubscribed:()Lio/reactivex/rxjava3/subscribers/TestSubscriber;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L4f4ff8.  v0:= v1.`io.reactivex.rxjava3.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f4ffc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f5002.  v0:= temp @kind object;
  #L4f5004.  if v0 == 0 then goto L4f500a;
  #L4f5008.  return v1 @kind object;
  #L4f500a.  v0:= "Not subscribed!" @kind object;
  #L4f500e.  call temp:= `fail`(v1, v0) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4f5014.  v0:= temp @kind object;
  #L4f5016.  throw v0;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4f5150.  v0:= v1.`io.reactivex.rxjava3.subscribers.TestSubscriber.b` @type ^`boolean` @kind boolean;
  #L4f5154.  if v0 != 0 then goto L4f5168;
  #L4f5158.  v0:= 1I;
  #L4f515a.  v1.`io.reactivex.rxjava3.subscribers.TestSubscriber.b` @type ^`boolean` := v0 @kind boolean;
  #L4f515e.  v0:= v1.`io.reactivex.rxjava3.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f5162.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4f5168.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v0 @kind this) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.dispose:()V` @AccessFlag PROTECTED_FINAL {
    temp;

  #L4f517c.  call `cancel`(v0) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.cancel:()V` @kind virtual;
  #L4f5182.  return @kind void;
}
procedure `boolean` `hasSubscription`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.hasSubscription:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4f4f84.  v0:= v1.`io.reactivex.rxjava3.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f4f88.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f4f8e.  v0:= temp @kind object;
  #L4f4f90.  if v0 == 0 then goto L4f4f98;
  #L4f4f94.  v0:= 1I;
  #L4f4f96.  goto L4f4f9a;
  #L4f4f98.  v0:= 0I;
  #L4f4f9a.  return v0;
}
procedure `boolean` `isCancelled`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.isCancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4f4fac.  v0:= v1.`io.reactivex.rxjava3.subscribers.TestSubscriber.b` @type ^`boolean` @kind boolean;
  #L4f4fb0.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.isDisposed:()Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L4f4fc4.  v0:= v1.`io.reactivex.rxjava3.subscribers.TestSubscriber.b` @type ^`boolean` @kind boolean;
  #L4f4fc8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v4 @kind this) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f5194.  v0:= v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L4f5198.  if v0 != 0 then goto L4f51ca;
  #L4f519c.  v0:= 1I;
  #L4f519e.  v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L4f51a2.  v0:= v4.`io.reactivex.rxjava3.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f51a6.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f51ac.  v0:= temp @kind object;
  #L4f51ae.  if v0 != 0 then goto L4f51ca;
  #L4f51b2.  v0:= v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4f51b6.  v1:= new `java.lang.IllegalStateException`;
  #L4f51ba.  v2:= "onSubscribe not called in proper order" @kind object;
  #L4f51be.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f51c4.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4f51ca.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4f51d0.  v0:= temp @kind object;
  #L4f51d2.  v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L4f51d6.  v0:= v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L4f51da.  v2:= 1L;
  #L4f51de.  v0:= v0 + v2 @kind long;
  #L4f51e0.  v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.completions` @type ^`long` := v0 @kind wide;
  #L4f51e4.  v0:= v4.`io.reactivex.rxjava3.subscribers.TestSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4f51e8.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4f51ee.  v0:= v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4f51f2.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4f51f8.  return @kind void;
  #L4f51fa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f51fc.  v1:= v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4f5200.  call `countDown`(v1) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4f5206.  throw v0;
  catch `java.lang.Throwable` @[L4f51ca..L4f51ee] goto L4f51fa;
}
procedure `void` `onError`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f5224.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L4f5228.  if v0 != 0 then goto L4f525a;
  #L4f522c.  v0:= 1I;
  #L4f522e.  v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L4f5232.  v0:= v3.`io.reactivex.rxjava3.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f5236.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f523c.  v0:= temp @kind object;
  #L4f523e.  if v0 != 0 then goto L4f525a;
  #L4f5242.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4f5246.  v1:= new `java.lang.IllegalStateException`;
  #L4f524a.  v2:= "onSubscribe not called in proper order" @kind object;
  #L4f524e.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f5254.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4f525a.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4f5260.  v0:= temp @kind object;
  #L4f5262.  v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L4f5266.  if v4 != 0 then goto L4f5284;
  #L4f526a.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4f526e.  v1:= new `java.lang.NullPointerException`;
  #L4f5272.  v2:= "onError received a null Throwable" @kind object;
  #L4f5276.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f527c.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4f5282.  goto L4f528e;
  #L4f5284.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4f5288.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4f528e.  v0:= v3.`io.reactivex.rxjava3.subscribers.TestSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4f5292.  call `onError`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f5298.  v4:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4f529c.  call `countDown`(v4) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4f52a2.  return @kind void;
  #L4f52a4.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f52a6.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4f52aa.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4f52b0.  throw v4;
  catch `java.lang.Throwable` @[L4f525a..L4f5298] goto L4f52a4;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f52d0.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L4f52d4.  if v0 != 0 then goto L4f5306;
  #L4f52d8.  v0:= 1I;
  #L4f52da.  v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L4f52de.  v0:= v3.`io.reactivex.rxjava3.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f52e2.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f52e8.  v0:= temp @kind object;
  #L4f52ea.  if v0 != 0 then goto L4f5306;
  #L4f52ee.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4f52f2.  v1:= new `java.lang.IllegalStateException`;
  #L4f52f6.  v2:= "onSubscribe not called in proper order" @kind object;
  #L4f52fa.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f5300.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4f5306.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4f530c.  v0:= temp @kind object;
  #L4f530e.  v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L4f5312.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L4f5316.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4f531c.  if v4 != 0 then goto L4f5338;
  #L4f5320.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4f5324.  v1:= new `java.lang.NullPointerException`;
  #L4f5328.  v2:= "onNext received a null value" @kind object;
  #L4f532c.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f5332.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4f5338.  v0:= v3.`io.reactivex.rxjava3.subscribers.TestSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4f533c.  call `onNext`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f5342.  return @kind void;
}
procedure `void` `onStart`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v0 @kind this) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.onStart:()V` @AccessFlag PROTECTED {
    temp;

  #L4f5354.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v5 @kind this, `org.reactivestreams.Subscription` v6 @kind object) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f5368.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4f536e.  v0:= temp @kind object;
  #L4f5370.  v5.`io.reactivex.rxjava3.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L4f5374.  if v6 != 0 then goto L4f5392;
  #L4f5378.  v6:= v5.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4f537c.  v0:= new `java.lang.NullPointerException`;
  #L4f5380.  v1:= "onSubscribe received a null Subscription" @kind object;
  #L4f5384.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f538a.  call temp:= `add`(v6, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4f5390.  return @kind void;
  #L4f5392.  v0:= v5.`io.reactivex.rxjava3.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f5396.  v1:= 0I;
  #L4f5398.  call temp:= `compareAndSet`(v0, v1, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f539e.  v0:= temp;
  #L4f53a0.  if v0 != 0 then goto L4f53f6;
  #L4f53a4.  call `cancel`(v6) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4f53aa.  v0:= v5.`io.reactivex.rxjava3.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f53ae.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f53b4.  v0:= temp @kind object;
  #L4f53b6.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4f53ba.  if v0 == v1 then goto L4f53f4;
  #L4f53be.  v0:= v5.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4f53c2.  v1:= new `java.lang.IllegalStateException`;
  #L4f53c6.  v2:= new `java.lang.StringBuilder`;
  #L4f53ca.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4f53d0.  v3:= "onSubscribe received multiple subscriptions: " @kind object;
  #L4f53d4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f53da.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f53e0.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4f53e6.  v6:= temp @kind object;
  #L4f53e8.  call `<init>`(v1, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f53ee.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4f53f4.  return @kind void;
  #L4f53f6.  v0:= v5.`io.reactivex.rxjava3.subscribers.TestSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4f53fa.  call `onSubscribe`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4f5400.  v0:= v5.`io.reactivex.rxjava3.subscribers.TestSubscriber.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4f5404.  v1:= 0L;
  #L4f5408.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4f540e.  v3:= temp @kind wide;
  #L4f5410.  v0:= lcmp(v3, v1);
  #L4f5414.  if v0 == 0 then goto L4f541e;
  #L4f5418.  call `request`(v6, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4f541e.  call `onStart`(v5) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.onStart:()V` @kind virtual;
  #L4f5424.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4f5438.  v0:= v2.`io.reactivex.rxjava3.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f543c.  v1:= v2.`io.reactivex.rxjava3.subscribers.TestSubscriber.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4f5440.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L4f5446.  return @kind void;
}
procedure `io.reactivex.rxjava3.subscribers.TestSubscriber` `requestMore`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.requestMore:(J)Lio/reactivex/rxjava3/subscribers/TestSubscriber;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4f507c.  call `request`(v0, v1) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.request:(J)V` @kind virtual;
  #L4f5082.  return v0 @kind object;
}
