record `io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.concurrent.CountDownLatch` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `java.lang.Object` `io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber.a` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber.b` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber.d` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/BlockingBaseSubscriber;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4dccdc.  v0:= 1I;
  #L4dccde.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L4dcce4.  return @kind void;
}
procedure `java.lang.Object` `blockingGet`(`io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/BlockingBaseSubscriber;.blockingGet:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4dcc60.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L4dcc66.  v0:= temp @kind wide;
  #L4dcc68.  v2:= 0L;
  #L4dcc6c.  v4:= lcmp(v0, v2);
  #L4dcc70.  if v4 == 0 then goto L4dcca4;
  #L4dcc74.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L4dcc7a.  call `await`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.await:()V` @kind virtual;
  #L4dcc80.  goto L4dcca4;
  #L4dcc82.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L4dcc84.  v1:= v5.`io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4dcc88.  v2:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4dcc8c.  v5.`io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4dcc90.  if v1 == 0 then goto L4dcc9a;
  #L4dcc94.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4dcc9a.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4dcca0.  v0:= temp @kind object;
  #L4dcca2.  throw v0;
  #L4dcca4.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber.b` @type ^`java.lang.Throwable` @kind object;
  #L4dcca8.  if v0 != 0 then goto L4dccb2;
  #L4dccac.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber.a` @type ^`java.lang.Object` @kind object;
  #L4dccb0.  return v0 @kind object;
  #L4dccb2.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4dccb8.  v0:= temp @kind object;
  #L4dccba.  throw v0;
  catch `java.lang.InterruptedException` @[L4dcc74..L4dcc80] goto L4dcc82;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/BlockingBaseSubscriber;.onComplete:()V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4dccf8.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4dccfe.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/BlockingBaseSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4dcd10.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4dcd14.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4dcd1a.  v0:= temp;
  #L4dcd1c.  if v0 == 0 then goto L4dcd52;
  #L4dcd20.  v2.`io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4dcd24.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber.d` @type ^`boolean` @kind boolean;
  #L4dcd28.  if v0 != 0 then goto L4dcd52;
  #L4dcd2c.  v0:= 9223372036854775807L;
  #L4dcd36.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4dcd3c.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber.d` @type ^`boolean` @kind boolean;
  #L4dcd40.  if v0 == 0 then goto L4dcd52;
  #L4dcd44.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4dcd48.  v2.`io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4dcd4c.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4dcd52.  return @kind void;
}
