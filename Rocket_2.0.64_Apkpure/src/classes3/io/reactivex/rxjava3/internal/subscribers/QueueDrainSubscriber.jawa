record `io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.rxjava3.internal.subscribers.d` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.internal.util.QueueDrain` @kind interface {
  `boolean` `io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.cancelled` @AccessFlag PROTECTED_VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.done` @AccessFlag PROTECTED_VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @AccessFlag PROTECTED_FINAL;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.error` @AccessFlag PROTECTED;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.queue` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4ddd1c.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/d;.<init>:()V` @kind direct;
  #L4ddd22.  v0.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4ddd26.  v0.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v2 @kind object;
  #L4ddd2a.  return @kind void;
}
procedure `boolean` `accept`(`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L4ddbfc.  v1:= 0I;
  #L4ddbfe.  return v1;
}
procedure `boolean` `cancelled`(`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.cancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4ddc10.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4ddc14.  return v0;
}
procedure `boolean` `done`(`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.done:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4ddc28.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` @kind boolean;
  #L4ddc2c.  return v0;
}
procedure `boolean` `enter`(`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4ddc40.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.e.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4ddc44.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ddc4a.  v0:= temp;
  #L4ddc4c.  if v0 != 0 then goto L4ddc54;
  #L4ddc50.  v0:= 1I;
  #L4ddc52.  goto L4ddc56;
  #L4ddc54.  v0:= 0I;
  #L4ddc56.  return v0;
}
procedure `java.lang.Throwable` `error`(`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.error:()Ljava/lang/Throwable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4ddcc4.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L4ddcc8.  return v0 @kind object;
}
procedure `boolean` `fastEnter`(`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.fastEnter:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4ddc68.  v0:= v3.`io.reactivex.rxjava3.internal.subscribers.e.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4ddc6c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4ddc72.  v0:= temp;
  #L4ddc74.  v1:= 1I;
  #L4ddc76.  v2:= 0I;
  #L4ddc78.  if v0 != 0 then goto L4ddc8e;
  #L4ddc7c.  v0:= v3.`io.reactivex.rxjava3.internal.subscribers.e.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4ddc80.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4ddc86.  v0:= temp;
  #L4ddc88.  if v0 == 0 then goto L4ddc8e;
  #L4ddc8c.  goto L4ddc90;
  #L4ddc8e.  v1:= 0I;
  #L4ddc90.  return v1;
}
procedure `void` `fastPathEmitMax`(`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` v7 @kind this, `java.lang.Object` v8 @kind object, `boolean` v9 , `io.reactivex.rxjava3.disposables.Disposable` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.fastPathEmitMax:(Ljava/lang/Object;ZLio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4ddd3c.  v0:= v7.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ddd40.  v1:= v7.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4ddd44.  call temp:= `fastEnter`(v7) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.fastEnter:()Z` @kind virtual;
  #L4ddd4a.  v2:= temp;
  #L4ddd4c.  if v2 == 0 then goto L4dddbc;
  #L4ddd50.  v2:= v7.`io.reactivex.rxjava3.internal.subscribers.c.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4ddd54.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4ddd5a.  v2:= temp @kind wide;
  #L4ddd5c.  v4:= 0L;
  #L4ddd60.  v6:= lcmp(v2, v4);
  #L4ddd64.  if v6 == 0 then goto L4ddda0;
  #L4ddd68.  call temp:= `accept`(v7, v0, v8) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @kind virtual;
  #L4ddd6e.  v8:= temp;
  #L4ddd70.  if v8 == 0 then goto L4ddd90;
  #L4ddd74.  v4:= 9223372036854775807L;
  #L4ddd7e.  v8:= lcmp(v2, v4);
  #L4ddd82.  if v8 == 0 then goto L4ddd90;
  #L4ddd86.  v2:= 1L;
  #L4ddd8a.  call temp:= `produced`(v7, v2) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L4ddd90.  v8:= -1I;
  #L4ddd92.  call temp:= `leave`(v7, v8) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L4ddd98.  v8:= temp;
  #L4ddd9a.  if v8 != 0 then goto L4dddd0;
  #L4ddd9e.  return @kind void;
  #L4ddda0.  call `dispose`(v10) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ddda6.  v8:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4dddaa.  v9:= "Could not emit buffer due to lack of requests" @kind object;
  #L4dddae.  call `<init>`(v8, v9) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4dddb4.  call `onError`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4dddba.  return @kind void;
  #L4dddbc.  call temp:= `offer`(v1, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4dddc2.  call temp:= `enter`(v7) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L4dddc8.  v8:= temp;
  #L4dddca.  if v8 != 0 then goto L4dddd0;
  #L4dddce.  return @kind void;
  #L4dddd0.  call `drainMaxLoop`(v1, v0, v9, v10, v7) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/internal/util/QueueDrain;)V` @kind static;
  #L4dddd6.  return @kind void;
}
procedure `void` `fastPathOrderedEmitMax`(`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` v7 @kind this, `java.lang.Object` v8 @kind object, `boolean` v9 , `io.reactivex.rxjava3.disposables.Disposable` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.fastPathOrderedEmitMax:(Ljava/lang/Object;ZLio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4ddde8.  v0:= v7.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4dddec.  v1:= v7.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4dddf0.  call temp:= `fastEnter`(v7) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.fastEnter:()Z` @kind virtual;
  #L4dddf6.  v2:= temp;
  #L4dddf8.  if v2 == 0 then goto L4dde82;
  #L4dddfc.  v2:= v7.`io.reactivex.rxjava3.internal.subscribers.c.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4dde00.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4dde06.  v2:= temp @kind wide;
  #L4dde08.  v4:= 0L;
  #L4dde0c.  v6:= lcmp(v2, v4);
  #L4dde10.  if v6 == 0 then goto L4dde60;
  #L4dde14.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4dde1a.  v4:= temp;
  #L4dde1c.  if v4 == 0 then goto L4dde58;
  #L4dde20.  call temp:= `accept`(v7, v0, v8) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @kind virtual;
  #L4dde26.  v8:= temp;
  #L4dde28.  if v8 == 0 then goto L4dde48;
  #L4dde2c.  v4:= 9223372036854775807L;
  #L4dde36.  v8:= lcmp(v2, v4);
  #L4dde3a.  if v8 == 0 then goto L4dde48;
  #L4dde3e.  v2:= 1L;
  #L4dde42.  call temp:= `produced`(v7, v2) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L4dde48.  v8:= -1I;
  #L4dde4a.  call temp:= `leave`(v7, v8) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L4dde50.  v8:= temp;
  #L4dde52.  if v8 != 0 then goto L4dde96;
  #L4dde56.  return @kind void;
  #L4dde58.  call temp:= `offer`(v1, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4dde5e.  goto L4dde96;
  #L4dde60.  v8:= 1I;
  #L4dde62.  v7.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v8 @kind boolean;
  #L4dde66.  call `dispose`(v10) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4dde6c.  v8:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4dde70.  v9:= "Could not emit buffer due to lack of requests" @kind object;
  #L4dde74.  call `<init>`(v8, v9) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4dde7a.  call `onError`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4dde80.  return @kind void;
  #L4dde82.  call temp:= `offer`(v1, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4dde88.  call temp:= `enter`(v7) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L4dde8e.  v8:= temp;
  #L4dde90.  if v8 != 0 then goto L4dde96;
  #L4dde94.  return @kind void;
  #L4dde96.  call `drainMaxLoop`(v1, v0, v9, v10, v7) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/internal/util/QueueDrain;)V` @kind static;
  #L4dde9c.  return @kind void;
}
procedure `int` `leave`(`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4ddca4.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.e.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4ddca8.  call temp:= `addAndGet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4ddcae.  v2:= temp;
  #L4ddcb0.  return v2;
}
procedure `long` `produced`(`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4ddcdc.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.c.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4ddce0.  v2:= -v2 @kind long;
  #L4ddce2.  call temp:= `addAndGet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4ddce8.  v2:= temp @kind wide;
  #L4ddcea.  return v2 @kind wide;
}
procedure `long` `requested`(`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.requested:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4ddcfc.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.c.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4ddd00.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4ddd06.  v0:= temp @kind wide;
  #L4ddd08.  return v0 @kind wide;
}
procedure `void` `requested`(`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4ddeb0.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4ddeb6.  v0:= temp;
  #L4ddeb8.  if v0 == 0 then goto L4ddec6;
  #L4ddebc.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.c.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4ddec0.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4ddec6.  return @kind void;
}
