record `io.reactivex.rxjava3.internal.subscribers.BlockingFirstSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber` @kind class {
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.subscribers.BlockingFirstSubscriber` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/BlockingFirstSubscriber;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4dcd64.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/BlockingBaseSubscriber;.<init>:()V` @kind direct;
  #L4dcd6a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.subscribers.BlockingFirstSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/BlockingFirstSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dcd7c.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber.a` @type ^`java.lang.Object` @kind object;
  #L4dcd80.  if v0 != 0 then goto L4dcd8a;
  #L4dcd84.  v1.`io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber.b` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4dcd88.  goto L4dcd90;
  #L4dcd8a.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4dcd90.  call `countDown`(v1) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4dcd96.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.subscribers.BlockingFirstSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/BlockingFirstSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dcda8.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber.a` @type ^`java.lang.Object` @kind object;
  #L4dcdac.  if v0 != 0 then goto L4dcdc4;
  #L4dcdb0.  v1.`io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber.a` @type ^`java.lang.Object` := v2 @kind object;
  #L4dcdb4.  v2:= v1.`io.reactivex.rxjava3.internal.subscribers.BlockingBaseSubscriber.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4dcdb8.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4dcdbe.  call `countDown`(v1) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4dcdc4.  return @kind void;
}
