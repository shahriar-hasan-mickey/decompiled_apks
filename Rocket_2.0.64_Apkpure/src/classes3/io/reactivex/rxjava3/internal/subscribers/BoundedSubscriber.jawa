record `io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `io.reactivex.rxjava3.observers.LambdaConsumerIntrospection` @kind interface {
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Action` `io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.d` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.e` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.f` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.g` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber` v0 @kind this, `io.reactivex.rxjava3.functions.Consumer` v1 @kind object, `io.reactivex.rxjava3.functions.Consumer` v2 @kind object, `io.reactivex.rxjava3.functions.Action` v3 @kind object, `io.reactivex.rxjava3.functions.Consumer` v4 @kind object, `int` v5 ) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.<init>:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Consumer;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4dcfc8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4dcfce.  v0.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.a` @type ^`io.reactivex.rxjava3.functions.Consumer` := v1 @kind object;
  #L4dcfd2.  v0.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.b` @type ^`io.reactivex.rxjava3.functions.Consumer` := v2 @kind object;
  #L4dcfd6.  v0.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.c` @type ^`io.reactivex.rxjava3.functions.Action` := v3 @kind object;
  #L4dcfda.  v0.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.d` @type ^`io.reactivex.rxjava3.functions.Consumer` := v4 @kind object;
  #L4dcfde.  v0.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.e` @type ^`int` := v5;
  #L4dcfe2.  v1:= v5 ^> 2;
  #L4dcfe6.  v5:= v5 - v1 @kind int;
  #L4dcfe8.  v0.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.g` @type ^`int` := v5;
  #L4dcfec.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L4dd000.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4dd006.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4dd018.  call `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.cancel:()V` @kind virtual;
  #L4dd01e.  return @kind void;
}
procedure `boolean` `hasCustomOnError`(`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.hasCustomOnError:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dcf7c.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4dcf80.  v1:= `@@io.reactivex.rxjava3.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4dcf84.  if v0 == v1 then goto L4dcf8c;
  #L4dcf88.  v0:= 1I;
  #L4dcf8a.  goto L4dcf8e;
  #L4dcf8c.  v0:= 0I;
  #L4dcf8e.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dcfa0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4dcfa6.  v0:= temp @kind object;
  #L4dcfa8.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4dcfac.  if v0 != v1 then goto L4dcfb4;
  #L4dcfb0.  v0:= 1I;
  #L4dcfb2.  goto L4dcfb6;
  #L4dcfb4.  v0:= 0I;
  #L4dcfb6.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dd030.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4dd036.  v0:= temp @kind object;
  #L4dd038.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4dd03c.  if v0 == v1 then goto L4dd060;
  #L4dd040.  call `lazySet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4dd046.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.c` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L4dd04a.  call `run`(v0) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L4dd050.  goto L4dd060;
  #L4dd052.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4dd054.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4dd05a.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4dd060.  return @kind void;
  catch `java.lang.Throwable` @[L4dd046..L4dd050] goto L4dd052;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4dd080.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4dd086.  v0:= temp @kind object;
  #L4dd088.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4dd08c.  if v0 == v1 then goto L4dd0ce;
  #L4dd090.  call `lazySet`(v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4dd096.  v0:= v4.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4dd09a.  call `accept`(v0, v5) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4dd0a0.  goto L4dd0d4;
  #L4dd0a2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4dd0a4.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4dd0aa.  v1:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L4dd0ae.  v2:= 2I;
  #L4dd0b0.  v2:= new `java.lang.Throwable`[v2];
  #L4dd0b4.  v3:= 0I;
  #L4dd0b6.  v2[v3]:= v5 @kind object;
  #L4dd0ba.  v5:= 1I;
  #L4dd0bc.  v2[v5]:= v0 @kind object;
  #L4dd0c0.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4dd0c6.  call `onError`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4dd0cc.  goto L4dd0d4;
  #L4dd0ce.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4dd0d4.  return @kind void;
  catch `java.lang.Throwable` @[L4dd096..L4dd0a0] goto L4dd0a2;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dd0f4.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.isDisposed:()Z` @kind virtual;
  #L4dd0fa.  v0:= temp;
  #L4dd0fc.  if v0 != 0 then goto L4dd160;
  #L4dd100.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.a` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4dd104.  call `accept`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4dd10a.  v3:= v2.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.f` @type ^`int`;
  #L4dd10e.  v3:= v3 + 1;
  #L4dd112.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.g` @type ^`int`;
  #L4dd116.  if v3 != v0 then goto L4dd13a;
  #L4dd11a.  v3:= 0I;
  #L4dd11c.  v2.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.f` @type ^`int` := v3;
  #L4dd120.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4dd126.  v3:= temp @kind object;
  #L4dd128.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L4dd12c.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.g` @type ^`int`;
  #L4dd130.  v0:= (`long`) v0 @kind i2l;
  #L4dd132.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4dd138.  goto L4dd160;
  #L4dd13a.  v2.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.f` @type ^`int` := v3;
  #L4dd13e.  goto L4dd160;
  #L4dd140.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4dd142.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4dd148.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4dd14e.  v0:= temp @kind object;
  #L4dd150.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4dd154.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4dd15a.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4dd160.  return @kind void;
  catch `java.lang.Throwable` @[L4dd100..L4dd13e] goto L4dd140;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dd180.  call temp:= `setOnce`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4dd186.  v0:= temp;
  #L4dd188.  if v0 == 0 then goto L4dd1ac;
  #L4dd18c.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.d` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4dd190.  call `accept`(v0, v1) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4dd196.  goto L4dd1ac;
  #L4dd198.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4dd19a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4dd1a0.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4dd1a6.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4dd1ac.  return @kind void;
  catch `java.lang.Throwable` @[L4dd18c..L4dd196] goto L4dd198;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dd1cc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4dd1d2.  v0:= temp @kind object;
  #L4dd1d4.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4dd1d8.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4dd1de.  return @kind void;
}
