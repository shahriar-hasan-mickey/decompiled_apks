record `io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.functions.Predicate` `io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Action` `io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.d` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber` v0 @kind this, `io.reactivex.rxjava3.functions.Predicate` v1 @kind object, `io.reactivex.rxjava3.functions.Consumer` v2 @kind object, `io.reactivex.rxjava3.functions.Action` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/ForEachWhileSubscriber;.<init>:(Lio/reactivex/rxjava3/functions/Predicate;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4dd2e8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4dd2ee.  v0.`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.a` @type ^`io.reactivex.rxjava3.functions.Predicate` := v1 @kind object;
  #L4dd2f2.  v0.`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.b` @type ^`io.reactivex.rxjava3.functions.Consumer` := v2 @kind object;
  #L4dd2f6.  v0.`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.c` @type ^`io.reactivex.rxjava3.functions.Action` := v3 @kind object;
  #L4dd2fa.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/ForEachWhileSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4dd30c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4dd312.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/ForEachWhileSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dd2c0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4dd2c6.  v0:= temp @kind object;
  #L4dd2c8.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4dd2cc.  if v0 != v1 then goto L4dd2d4;
  #L4dd2d0.  v0:= 1I;
  #L4dd2d2.  goto L4dd2d6;
  #L4dd2d4.  v0:= 0I;
  #L4dd2d6.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/ForEachWhileSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dd324.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.d` @type ^`boolean` @kind boolean;
  #L4dd328.  if v0 == 0 then goto L4dd32e;
  #L4dd32c.  return @kind void;
  #L4dd32e.  v0:= 1I;
  #L4dd330.  v1.`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.d` @type ^`boolean` := v0 @kind boolean;
  #L4dd334.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.c` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L4dd338.  call `run`(v0) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L4dd33e.  goto L4dd34e;
  #L4dd340.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4dd342.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4dd348.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4dd34e.  return @kind void;
  catch `java.lang.Throwable` @[L4dd334..L4dd33e] goto L4dd340;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/ForEachWhileSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4dd36c.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.d` @type ^`boolean` @kind boolean;
  #L4dd370.  if v0 == 0 then goto L4dd37c;
  #L4dd374.  call `onError`(v6) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4dd37a.  return @kind void;
  #L4dd37c.  v0:= 1I;
  #L4dd37e.  v5.`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.d` @type ^`boolean` := v0 @kind boolean;
  #L4dd382.  v1:= v5.`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4dd386.  call `accept`(v1, v6) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4dd38c.  goto L4dd3b6;
  #L4dd38e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4dd390.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4dd396.  v2:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L4dd39a.  v3:= 2I;
  #L4dd39c.  v3:= new `java.lang.Throwable`[v3];
  #L4dd3a0.  v4:= 0I;
  #L4dd3a2.  v3[v4]:= v6 @kind object;
  #L4dd3a6.  v3[v0]:= v1 @kind object;
  #L4dd3aa.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4dd3b0.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4dd3b6.  return @kind void;
  catch `java.lang.Throwable` @[L4dd382..L4dd38c] goto L4dd38e;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/ForEachWhileSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dd3d4.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.d` @type ^`boolean` @kind boolean;
  #L4dd3d8.  if v0 == 0 then goto L4dd3de;
  #L4dd3dc.  return @kind void;
  #L4dd3de.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.a` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L4dd3e2.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4dd3e8.  v2:= temp;
  #L4dd3ea.  if v2 != 0 then goto L4dd3fa;
  #L4dd3ee.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/ForEachWhileSubscriber;.dispose:()V` @kind virtual;
  #L4dd3f4.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/ForEachWhileSubscriber;.onComplete:()V` @kind virtual;
  #L4dd3fa.  return @kind void;
  #L4dd3fc.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4dd3fe.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4dd404.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/ForEachWhileSubscriber;.dispose:()V` @kind virtual;
  #L4dd40a.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscribers/ForEachWhileSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4dd410.  return @kind void;
  catch `java.lang.Throwable` @[L4dd3de..L4dd3ea] goto L4dd3fc;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/ForEachWhileSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dd430.  v0:= 9223372036854775807L;
  #L4dd43a.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L4dd440.  return @kind void;
}
