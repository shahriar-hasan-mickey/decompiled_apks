record `io.reactivex.rxjava3.internal.subscribers.FutureSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.CountDownLatch` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `java.util.concurrent.Future` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `java.lang.Object` `io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.a` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.b` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4dd5e8.  v0:= 1I;
  #L4dd5ea.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L4dd5f0.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4dd5f4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4dd5fa.  v1.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4dd5fe.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L4dd610.  return @kind void;
}
procedure `boolean` `cancel`(`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber` v2 @kind this, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.cancel:(Z)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dd454.  v3:= v2.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4dd458.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4dd45e.  v3:= temp @kind object;
  #L4dd460.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L4dd464.  if v3 == v2 then goto L4dd496;
  #L4dd468.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4dd46c.  if v3 != v0 then goto L4dd472;
  #L4dd470.  goto L4dd496;
  #L4dd472.  v1:= v2.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4dd476.  call temp:= `compareAndSet`(v1, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4dd47c.  v0:= temp;
  #L4dd47e.  if v0 == 0 then goto L4dd454;
  #L4dd482.  if v3 == 0 then goto L4dd48c;
  #L4dd486.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4dd48c.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4dd492.  v3:= 1I;
  #L4dd494.  return v3;
  #L4dd496.  v3:= 0I;
  #L4dd498.  return v3;
}
procedure `java.lang.Object` `get`(`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4dd504.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L4dd50a.  v0:= temp @kind wide;
  #L4dd50c.  v2:= 0L;
  #L4dd510.  v4:= lcmp(v0, v2);
  #L4dd514.  if v4 == 0 then goto L4dd524;
  #L4dd518.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L4dd51e.  call `await`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.await:()V` @kind virtual;
  #L4dd524.  call temp:= `isCancelled`(v5) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.isCancelled:()Z` @kind virtual;
  #L4dd52a.  v0:= temp;
  #L4dd52c.  if v0 != 0 then goto L4dd54a;
  #L4dd530.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.b` @type ^`java.lang.Throwable` @kind object;
  #L4dd534.  if v0 != 0 then goto L4dd53e;
  #L4dd538.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.a` @type ^`java.lang.Object` @kind object;
  #L4dd53c.  return v0 @kind object;
  #L4dd53e.  v1:= new `java.util.concurrent.ExecutionException`;
  #L4dd542.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/ExecutionException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L4dd548.  throw v1;
  #L4dd54a.  v0:= new `java.util.concurrent.CancellationException`;
  #L4dd54e.  call `<init>`(v0) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L4dd554.  throw v0;
}
procedure `java.lang.Object` `get`(`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber` v5 @kind this, `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.get:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4dd568.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L4dd56e.  v0:= temp @kind wide;
  #L4dd570.  v2:= 0L;
  #L4dd574.  v4:= lcmp(v0, v2);
  #L4dd578.  if v4 == 0 then goto L4dd5a4;
  #L4dd57c.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L4dd582.  call temp:= `await`(v5, v6, v8) @signature `Ljava/util/concurrent/CountDownLatch;.await:(JLjava/util/concurrent/TimeUnit;)Z` @kind virtual;
  #L4dd588.  v0:= temp;
  #L4dd58a.  if v0 == 0 then goto L4dd590;
  #L4dd58e.  goto L4dd5a4;
  #L4dd590.  v0:= new `java.util.concurrent.TimeoutException`;
  #L4dd594.  call temp:= `timeoutMessage`(v6, v8) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.timeoutMessage:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/String;` @kind static;
  #L4dd59a.  v6:= temp @kind object;
  #L4dd59c.  call `<init>`(v0, v6) @signature `Ljava/util/concurrent/TimeoutException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4dd5a2.  throw v0;
  #L4dd5a4.  call temp:= `isCancelled`(v5) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.isCancelled:()Z` @kind virtual;
  #L4dd5aa.  v6:= temp;
  #L4dd5ac.  if v6 != 0 then goto L4dd5ca;
  #L4dd5b0.  v6:= v5.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.b` @type ^`java.lang.Throwable` @kind object;
  #L4dd5b4.  if v6 != 0 then goto L4dd5be;
  #L4dd5b8.  v6:= v5.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.a` @type ^`java.lang.Object` @kind object;
  #L4dd5bc.  return v6 @kind object;
  #L4dd5be.  v7:= new `java.util.concurrent.ExecutionException`;
  #L4dd5c2.  call `<init>`(v7, v6) @signature `Ljava/util/concurrent/ExecutionException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L4dd5c8.  throw v7;
  #L4dd5ca.  v6:= new `java.util.concurrent.CancellationException`;
  #L4dd5ce.  call `<init>`(v6) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L4dd5d4.  throw v6;
}
procedure `boolean` `isCancelled`(`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dd4ac.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4dd4b0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4dd4b6.  v0:= temp @kind object;
  #L4dd4b8.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4dd4bc.  if v0 != v1 then goto L4dd4c4;
  #L4dd4c0.  v0:= 1I;
  #L4dd4c2.  goto L4dd4c6;
  #L4dd4c4.  v0:= 0I;
  #L4dd4c6.  return v0;
}
procedure `boolean` `isDone`(`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.isDone:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4dd4d8.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L4dd4de.  v0:= temp @kind wide;
  #L4dd4e0.  v2:= 0L;
  #L4dd4e4.  v4:= lcmp(v0, v2);
  #L4dd4e8.  if v4 != 0 then goto L4dd4f0;
  #L4dd4ec.  v0:= 1I;
  #L4dd4ee.  goto L4dd4f2;
  #L4dd4f0.  v0:= 0I;
  #L4dd4f2.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dd624.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.a` @type ^`java.lang.Object` @kind object;
  #L4dd628.  if v0 != 0 then goto L4dd642;
  #L4dd62c.  v0:= new `java.util.NoSuchElementException`;
  #L4dd630.  v1:= "The source is empty" @kind object;
  #L4dd634.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4dd63a.  call `onError`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4dd640.  return @kind void;
  #L4dd642.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4dd646.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4dd64c.  v0:= temp @kind object;
  #L4dd64e.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4dd652.  if v0 == v2 then goto L4dd676;
  #L4dd656.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4dd65a.  if v0 != v1 then goto L4dd660;
  #L4dd65e.  goto L4dd676;
  #L4dd660.  v1:= v2.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4dd664.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4dd66a.  v0:= temp;
  #L4dd66c.  if v0 == 0 then goto L4dd676;
  #L4dd670.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4dd676.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dd688.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.b` @type ^`java.lang.Throwable` @kind object;
  #L4dd68c.  if v0 != 0 then goto L4dd6c8;
  #L4dd690.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4dd694.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4dd69a.  v0:= temp @kind object;
  #L4dd69c.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4dd6a0.  if v0 == v2 then goto L4dd6c8;
  #L4dd6a4.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4dd6a8.  if v0 == v1 then goto L4dd6c8;
  #L4dd6ac.  v1:= v2.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4dd6b0.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4dd6b6.  v0:= temp;
  #L4dd6b8.  if v0 == 0 then goto L4dd6c8;
  #L4dd6bc.  v2.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.b` @type ^`java.lang.Throwable` := v3 @kind object;
  #L4dd6c0.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4dd6c6.  return @kind void;
  #L4dd6c8.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4dd6ce.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dd6e0.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.a` @type ^`java.lang.Object` @kind object;
  #L4dd6e4.  if v0 == 0 then goto L4dd714;
  #L4dd6e8.  v2:= v1.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4dd6ec.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4dd6f2.  v2:= temp @kind object;
  #L4dd6f4.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L4dd6f8.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4dd6fe.  v2:= new `java.lang.IndexOutOfBoundsException`;
  #L4dd702.  v0:= "More than one element received" @kind object;
  #L4dd706.  call `<init>`(v2, v0) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4dd70c.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4dd712.  return @kind void;
  #L4dd714.  v1.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.a` @type ^`java.lang.Object` := v2 @kind object;
  #L4dd718.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4dd72c.  v0:= v3.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4dd730.  v1:= 9223372036854775807L;
  #L4dd73a.  call temp:= `setOnce`(v0, v4, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L4dd740.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L4dd754.  return @kind void;
}
