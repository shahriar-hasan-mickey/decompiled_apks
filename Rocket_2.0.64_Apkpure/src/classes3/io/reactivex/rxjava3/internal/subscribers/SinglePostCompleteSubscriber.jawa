record `io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.downstream` @AccessFlag PROTECTED_FINAL;
  `long` `io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.produced` @AccessFlag PROTECTED;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.upstream` @AccessFlag PROTECTED;
  `java.lang.Object` `io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.value` @AccessFlag PROTECTED;
}
global `long` `@@io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/SinglePostCompleteSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4dded8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4ddede.  v0.`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4ddee2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/SinglePostCompleteSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ddef4.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4ddef8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4ddefe.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/SinglePostCompleteSubscriber;.complete:(Ljava/lang/Object;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4ddf10.  v0:= v9.`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.produced` @type ^`long` @kind wide;
  #L4ddf14.  v2:= 0L;
  #L4ddf18.  v4:= lcmp(v0, v2);
  #L4ddf1c.  if v4 == 0 then goto L4ddf26;
  #L4ddf20.  call temp:= `produced`(v9, v0) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4ddf26.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4ddf2c.  v0:= temp @kind wide;
  #L4ddf2e.  v4:= -9223372036854775808L;
  #L4ddf32.  v6:= v0 ^& v4 @kind long;
  #L4ddf36.  v8:= lcmp(v6, v2);
  #L4ddf3a.  if v8 == 0 then goto L4ddf46;
  #L4ddf3e.  call `onDrop`(v9, v10) @signature `Lio/reactivex/rxjava3/internal/subscribers/SinglePostCompleteSubscriber;.onDrop:(Ljava/lang/Object;)V` @kind virtual;
  #L4ddf44.  return @kind void;
  #L4ddf46.  v6:= 9223372036854775807L;
  #L4ddf50.  v0:= v0 ^& v6 @kind long;
  #L4ddf52.  v6:= lcmp(v0, v2);
  #L4ddf56.  if v6 == 0 then goto L4ddf80;
  #L4ddf5a.  v0:= -4.9E-324D;
  #L4ddf64.  call `lazySet`(v9, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L4ddf6a.  v0:= v9.`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ddf6e.  call `onNext`(v0, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ddf74.  v10:= v9.`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ddf78.  call `onComplete`(v10) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4ddf7e.  return @kind void;
  #L4ddf80.  v9.`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.value` @type ^`java.lang.Object` := v10 @kind object;
  #L4ddf84.  call temp:= `compareAndSet`(v9, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4ddf8a.  v0:= temp;
  #L4ddf8c.  if v0 == 0 then goto L4ddf92;
  #L4ddf90.  return @kind void;
  #L4ddf92.  v0:= 0I;
  #L4ddf94.  v9.`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.value` @type ^`java.lang.Object` := v0 @kind object;
  #L4ddf98.  goto L4ddf26;
}
procedure `void` `onDrop`(`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/SinglePostCompleteSubscriber;.onDrop:(Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;

  #L4ddfac.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/SinglePostCompleteSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ddfc0.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4ddfc4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4ddfca.  v0:= temp;
  #L4ddfcc.  if v0 == 0 then goto L4ddfde;
  #L4ddfd0.  v1.`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4ddfd4.  v2:= v1.`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ddfd8.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4ddfde.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber` v9 @kind this, `long` v10 ) @signature `Lio/reactivex/rxjava3/internal/subscribers/SinglePostCompleteSubscriber;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4ddff0.  call temp:= `validate`(v10) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4ddff6.  v0:= temp;
  #L4ddff8.  if v0 == 0 then goto L4de066;
  #L4ddffc.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4de002.  v0:= temp @kind wide;
  #L4de004.  v2:= -9223372036854775808L;
  #L4de008.  v4:= v0 ^& v2 @kind long;
  #L4de00c.  v6:= 0L;
  #L4de010.  v8:= lcmp(v4, v6);
  #L4de014.  if v8 == 0 then goto L4de048;
  #L4de018.  v10:= -4.9E-324D;
  #L4de022.  call temp:= `compareAndSet`(v9, v2, v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4de028.  v10:= temp;
  #L4de02a.  if v10 == 0 then goto L4de066;
  #L4de02e.  v10:= v9.`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4de032.  v11:= v9.`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L4de036.  call `onNext`(v10, v11) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4de03c.  v10:= v9.`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4de040.  call `onComplete`(v10) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4de046.  goto L4de066;
  #L4de048.  call temp:= `addCap`(v0, v10) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L4de04e.  v2:= temp @kind wide;
  #L4de050.  call temp:= `compareAndSet`(v9, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4de056.  v0:= temp;
  #L4de058.  if v0 == 0 then goto L4ddffc;
  #L4de05c.  v0:= v9.`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4de060.  call `request`(v0, v10) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4de066.  return @kind void;
}
