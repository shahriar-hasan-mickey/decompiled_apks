record `io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `io.reactivex.rxjava3.observers.LambdaConsumerIntrospection` @kind interface {
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Action` `io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber` v0 @kind this, `io.reactivex.rxjava3.functions.Consumer` v1 @kind object, `io.reactivex.rxjava3.functions.Consumer` v2 @kind object, `io.reactivex.rxjava3.functions.Action` v3 @kind object, `io.reactivex.rxjava3.functions.Consumer` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.<init>:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Consumer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4dd980.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4dd986.  v0.`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber.a` @type ^`io.reactivex.rxjava3.functions.Consumer` := v1 @kind object;
  #L4dd98a.  v0.`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber.b` @type ^`io.reactivex.rxjava3.functions.Consumer` := v2 @kind object;
  #L4dd98e.  v0.`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber.c` @type ^`io.reactivex.rxjava3.functions.Action` := v3 @kind object;
  #L4dd992.  v0.`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber.d` @type ^`io.reactivex.rxjava3.functions.Consumer` := v4 @kind object;
  #L4dd996.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L4dd9a8.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4dd9ae.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4dd9c0.  call `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.cancel:()V` @kind virtual;
  #L4dd9c6.  return @kind void;
}
procedure `boolean` `hasCustomOnError`(`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.hasCustomOnError:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dd934.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4dd938.  v1:= `@@io.reactivex.rxjava3.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4dd93c.  if v0 == v1 then goto L4dd944;
  #L4dd940.  v0:= 1I;
  #L4dd942.  goto L4dd946;
  #L4dd944.  v0:= 0I;
  #L4dd946.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dd958.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4dd95e.  v0:= temp @kind object;
  #L4dd960.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4dd964.  if v0 != v1 then goto L4dd96c;
  #L4dd968.  v0:= 1I;
  #L4dd96a.  goto L4dd96e;
  #L4dd96c.  v0:= 0I;
  #L4dd96e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dd9d8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4dd9de.  v0:= temp @kind object;
  #L4dd9e0.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4dd9e4.  if v0 == v1 then goto L4dda08;
  #L4dd9e8.  call `lazySet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4dd9ee.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber.c` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L4dd9f2.  call `run`(v0) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L4dd9f8.  goto L4dda08;
  #L4dd9fa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4dd9fc.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4dda02.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4dda08.  return @kind void;
  catch `java.lang.Throwable` @[L4dd9ee..L4dd9f8] goto L4dd9fa;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4dda28.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4dda2e.  v0:= temp @kind object;
  #L4dda30.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4dda34.  if v0 == v1 then goto L4dda76;
  #L4dda38.  call `lazySet`(v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4dda3e.  v0:= v4.`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4dda42.  call `accept`(v0, v5) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4dda48.  goto L4dda7c;
  #L4dda4a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4dda4c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4dda52.  v1:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L4dda56.  v2:= 2I;
  #L4dda58.  v2:= new `java.lang.Throwable`[v2];
  #L4dda5c.  v3:= 0I;
  #L4dda5e.  v2[v3]:= v5 @kind object;
  #L4dda62.  v5:= 1I;
  #L4dda64.  v2[v5]:= v0 @kind object;
  #L4dda68.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4dda6e.  call `onError`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4dda74.  goto L4dda7c;
  #L4dda76.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4dda7c.  return @kind void;
  catch `java.lang.Throwable` @[L4dda3e..L4dda48] goto L4dda4a;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dda9c.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.isDisposed:()Z` @kind virtual;
  #L4ddaa2.  v0:= temp;
  #L4ddaa4.  if v0 != 0 then goto L4ddad4;
  #L4ddaa8.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber.a` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4ddaac.  call `accept`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4ddab2.  goto L4ddad4;
  #L4ddab4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ddab6.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ddabc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ddac2.  v0:= temp @kind object;
  #L4ddac4.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4ddac8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4ddace.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ddad4.  return @kind void;
  catch `java.lang.Throwable` @[L4ddaa8..L4ddab2] goto L4ddab4;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ddaf4.  call temp:= `setOnce`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4ddafa.  v0:= temp;
  #L4ddafc.  if v0 == 0 then goto L4ddb20;
  #L4ddb00.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber.d` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4ddb04.  call `accept`(v0, v1) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4ddb0a.  goto L4ddb20;
  #L4ddb0c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ddb0e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ddb14.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4ddb1a.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ddb20.  return @kind void;
  catch `java.lang.Throwable` @[L4ddb00..L4ddb0a] goto L4ddb0c;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ddb40.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ddb46.  v0:= temp @kind object;
  #L4ddb48.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4ddb4c.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4ddb52.  return @kind void;
}
