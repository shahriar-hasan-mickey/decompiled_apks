record `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Scheduler$Worker` @kind class, `java.lang.Runnable` @kind interface {
  `boolean` `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.b` @AccessFlag FINAL;
  `java.util.concurrent.Executor` `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.g` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker` v1 @kind this, `java.util.concurrent.Executor` v2 @kind object, `boolean` v3 , `boolean` v4 ) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker;.<init>:(Ljava/util/concurrent/Executor;ZZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4da3f8.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.<init>:()V` @kind direct;
  #L4da3fe.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4da402.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4da408.  v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.f` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L4da40c.  v0:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L4da410.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4da416.  v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.g` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v0 @kind object;
  #L4da41a.  v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.c` @type ^`java.util.concurrent.Executor` := v2 @kind object;
  #L4da41e.  v2:= new `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue`;
  #L4da422.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4da428.  v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.d` @type ^`io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` := v2 @kind object;
  #L4da42c.  v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.a` @type ^`boolean` := v3 @kind boolean;
  #L4da430.  v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.b` @type ^`boolean` := v4 @kind boolean;
  #L4da434.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4da4b4.  v0:= v3.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.d` @type ^`io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` @kind object;
  #L4da4b8.  v1:= 1I;
  #L4da4ba.  v2:= v3.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @type ^`boolean` @kind boolean;
  #L4da4be.  if v2 == 0 then goto L4da4ca;
  #L4da4c2.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L4da4c8.  return @kind void;
  #L4da4ca.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4da4d0.  v2:= temp @kind object;
  #L4da4d2.  v2:= (`java.lang.Runnable`) v2 @kind object;
  #L4da4d6.  if v2 != 0 then goto L4da4fe;
  #L4da4da.  v2:= v3.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @type ^`boolean` @kind boolean;
  #L4da4de.  if v2 == 0 then goto L4da4ea;
  #L4da4e2.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L4da4e8.  return @kind void;
  #L4da4ea.  v2:= v3.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4da4ee.  v1:= -v1 @kind int;
  #L4da4f0.  call temp:= `addAndGet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4da4f6.  v1:= temp;
  #L4da4f8.  if v1 != 0 then goto L4da4ba;
  #L4da4fc.  return @kind void;
  #L4da4fe.  call `run`(v2) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L4da504.  v2:= v3.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @type ^`boolean` @kind boolean;
  #L4da508.  if v2 == 0 then goto L4da4ca;
  #L4da50c.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L4da512.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4da524.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.d` @type ^`io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` @kind object;
  #L4da528.  v1:= v2.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @type ^`boolean` @kind boolean;
  #L4da52c.  if v1 == 0 then goto L4da538;
  #L4da530.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L4da536.  return @kind void;
  #L4da538.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4da53e.  v1:= temp @kind object;
  #L4da540.  v1:= (`java.lang.Runnable`) v1 @kind object;
  #L4da544.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L4da54a.  v1:= v2.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @type ^`boolean` @kind boolean;
  #L4da54e.  if v1 == 0 then goto L4da55a;
  #L4da552.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L4da558.  return @kind void;
  #L4da55a.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4da55e.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4da564.  v0:= temp;
  #L4da566.  if v0 == 0 then goto L4da574;
  #L4da56a.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.c` @type ^`java.util.concurrent.Executor` @kind object;
  #L4da56e.  call `execute`(v0, v2) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L4da574.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4da448.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @type ^`boolean` @kind boolean;
  #L4da44c.  if v0 != 0 then goto L4da47a;
  #L4da450.  v0:= 1I;
  #L4da452.  v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @type ^`boolean` := v0 @kind boolean;
  #L4da456.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.g` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4da45a.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4da460.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4da464.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4da46a.  v0:= temp;
  #L4da46c.  if v0 != 0 then goto L4da47a;
  #L4da470.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.d` @type ^`io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` @kind object;
  #L4da474.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L4da47a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4da25c.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @type ^`boolean` @kind boolean;
  #L4da260.  return v0;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4da48c.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.b` @type ^`boolean` @kind boolean;
  #L4da490.  if v0 == 0 then goto L4da49c;
  #L4da494.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker;.b:()V` @kind virtual;
  #L4da49a.  goto L4da4a2;
  #L4da49c.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker;.a:()V` @kind virtual;
  #L4da4a2.  return @kind void;
}
procedure `io.reactivex.rxjava3.disposables.Disposable` `schedule`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker` v2 @kind this, `java.lang.Runnable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4da274.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @type ^`boolean` @kind boolean;
  #L4da278.  if v0 == 0 then goto L4da282;
  #L4da27c.  v3:= `@@io.reactivex.rxjava3.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.rxjava3.internal.disposables.EmptyDisposable` @kind object;
  #L4da280.  return v3 @kind object;
  #L4da282.  call temp:= `onSchedule`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onSchedule:(Ljava/lang/Runnable;)Ljava/lang/Runnable;` @kind static;
  #L4da288.  v3:= temp @kind object;
  #L4da28a.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.a` @type ^`boolean` @kind boolean;
  #L4da28e.  if v0 == 0 then goto L4da2ac;
  #L4da292.  v0:= new `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b`;
  #L4da296.  v1:= v2.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.g` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4da29a.  call `<init>`(v0, v3, v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.<init>:(Ljava/lang/Runnable;Lio/reactivex/rxjava3/disposables/DisposableContainer;)V` @kind direct;
  #L4da2a0.  v3:= v2.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.g` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4da2a4.  call temp:= `add`(v3, v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4da2aa.  goto L4da2b6;
  #L4da2ac.  v0:= new `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$a`;
  #L4da2b0.  call `<init>`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker$a;.<init>:(Ljava/lang/Runnable;)V` @kind direct;
  #L4da2b6.  v3:= v2.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.d` @type ^`io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` @kind object;
  #L4da2ba.  call temp:= `offer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4da2c0.  v3:= v2.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4da2c4.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4da2ca.  v3:= temp;
  #L4da2cc.  if v3 != 0 then goto L4da2fa;
  #L4da2d0.  v3:= v2.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.c` @type ^`java.util.concurrent.Executor` @kind object;
  #L4da2d4.  call `execute`(v3, v2) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L4da2da.  goto L4da2fa;
  #L4da2dc.  v3:= Exception @type ^`java.util.concurrent.RejectedExecutionException` @kind object;
  #L4da2de.  v0:= 1I;
  #L4da2e0.  v2.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @type ^`boolean` := v0 @kind boolean;
  #L4da2e4.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.d` @type ^`io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` @kind object;
  #L4da2e8.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L4da2ee.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4da2f4.  v3:= `@@io.reactivex.rxjava3.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.rxjava3.internal.disposables.EmptyDisposable` @kind object;
  #L4da2f8.  return v3 @kind object;
  #L4da2fa.  return v0 @kind object;
  catch `java.util.concurrent.RejectedExecutionException` @[L4da2d0..L4da2da] goto L4da2dc;
}
procedure `io.reactivex.rxjava3.disposables.Disposable` `schedule`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker` v4 @kind this, `java.lang.Runnable` v5 @kind object, `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4da31c.  v0:= 0L;
  #L4da320.  v2:= lcmp(v6, v0);
  #L4da324.  if v2 > 0 then goto L4da332;
  #L4da328.  call temp:= `schedule`(v4, v5) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4da32e.  v5:= temp @kind object;
  #L4da330.  return v5 @kind object;
  #L4da332.  v0:= v4.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @type ^`boolean` @kind boolean;
  #L4da336.  if v0 == 0 then goto L4da340;
  #L4da33a.  v5:= `@@io.reactivex.rxjava3.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.rxjava3.internal.disposables.EmptyDisposable` @kind object;
  #L4da33e.  return v5 @kind object;
  #L4da340.  v0:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4da344.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4da34a.  v1:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4da34e.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind direct;
  #L4da354.  call temp:= `onSchedule`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onSchedule:(Ljava/lang/Runnable;)Ljava/lang/Runnable;` @kind static;
  #L4da35a.  v5:= temp @kind object;
  #L4da35c.  v2:= new `io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable`;
  #L4da360.  v3:= new `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$c`;
  #L4da364.  call `<init>`(v3, v4, v1, v5) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker$c;.<init>:(Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker;Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;Ljava/lang/Runnable;)V` @kind direct;
  #L4da36a.  v5:= v4.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.g` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4da36e.  call `<init>`(v2, v3, v5) @signature `Lio/reactivex/rxjava3/internal/schedulers/ScheduledRunnable;.<init>:(Ljava/lang/Runnable;Lio/reactivex/rxjava3/disposables/DisposableContainer;)V` @kind direct;
  #L4da374.  v5:= v4.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.g` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4da378.  call temp:= `add`(v5, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4da37e.  v5:= v4.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.c` @type ^`java.util.concurrent.Executor` @kind object;
  #L4da382.  v3:= instanceof @variable v5 @type ^`java.util.concurrent.ScheduledExecutorService` @kind boolean;
  #L4da386.  if v3 == 0 then goto L4da3b2;
  #L4da38a.  v5:= (`java.util.concurrent.ScheduledExecutorService`) v5 @kind object;
  #L4da38e.  call temp:= `schedule`(v5, v2, v6, v8) @signature `Ljava/util/concurrent/ScheduledExecutorService;.schedule:(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;` @kind interface;
  #L4da394.  v5:= temp @kind object;
  #L4da396.  call `setFuture`(v2, v5) @signature `Lio/reactivex/rxjava3/internal/schedulers/ScheduledRunnable;.setFuture:(Ljava/util/concurrent/Future;)V` @kind virtual;
  #L4da39c.  goto L4da3ce;
  #L4da39e.  v5:= Exception @type ^`java.util.concurrent.RejectedExecutionException` @kind object;
  #L4da3a0.  v6:= 1I;
  #L4da3a2.  v4.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @type ^`boolean` := v6 @kind boolean;
  #L4da3a6.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4da3ac.  v5:= `@@io.reactivex.rxjava3.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.rxjava3.internal.disposables.EmptyDisposable` @kind object;
  #L4da3b0.  return v5 @kind object;
  #L4da3b2.  v5:= `@@io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.e` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4da3b6.  call temp:= `scheduleDirect`(v5, v2, v6, v8) @signature `Lio/reactivex/rxjava3/core/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4da3bc.  v5:= temp @kind object;
  #L4da3be.  v6:= new `io.reactivex.rxjava3.internal.schedulers.b`;
  #L4da3c2.  call `<init>`(v6, v5) @signature `Lio/reactivex/rxjava3/internal/schedulers/b;.<init>:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind direct;
  #L4da3c8.  call `setFuture`(v2, v6) @signature `Lio/reactivex/rxjava3/internal/schedulers/ScheduledRunnable;.setFuture:(Ljava/util/concurrent/Future;)V` @kind virtual;
  #L4da3ce.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4da3d4.  return v1 @kind object;
  catch `java.util.concurrent.RejectedExecutionException` @[L4da38a..L4da39c] goto L4da39e;
}
