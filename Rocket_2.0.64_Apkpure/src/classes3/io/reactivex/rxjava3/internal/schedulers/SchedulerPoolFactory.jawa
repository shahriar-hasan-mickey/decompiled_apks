record `io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory` @kind class @AccessFlag PUBLIC_FINAL {
}
global `boolean` `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.PURGE_ENABLED` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.PURGE_PERIOD_SECONDS` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicReference` `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.a` @AccessFlag STATIC_FINAL;
global `java.util.Map` `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.b` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4dba5c.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4dba60.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4dba66.  `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4dba6a.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L4dba6e.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L4dba74.  `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.b` @type ^`java.util.Map` := v0 @kind object;
  #L4dba78.  v0:= new `io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory$b`;
  #L4dba7c.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory$b;.<init>:()V` @kind direct;
  #L4dba82.  v1:= 1I;
  #L4dba84.  v2:= "rx3.purge-enabled" @kind object;
  #L4dba88.  call temp:= `a`(v1, v2, v1, v1, v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory;.a:(ZLjava/lang/String;ZZLio/reactivex/rxjava3/functions/Function;)Z` @kind static;
  #L4dba8e.  v2:= temp;
  #L4dba90.  `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.PURGE_ENABLED` @type ^`boolean` := v2 @kind boolean;
  #L4dba94.  v3:= "rx3.purge-period-seconds" @kind object;
  #L4dba98.  call temp:= `b`(v2, v3, v1, v1, v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory;.b:(ZLjava/lang/String;IILio/reactivex/rxjava3/functions/Function;)I` @kind static;
  #L4dba9e.  v0:= temp;
  #L4dbaa0.  `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.PURGE_PERIOD_SECONDS` @type ^`int` := v0;
  #L4dbaa4.  call `start`() @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory;.start:()V` @kind static;
  #L4dbaaa.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4dbabc.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4dbac2.  v0:= new `java.lang.IllegalStateException`;
  #L4dbac6.  v1:= "No instances!" @kind object;
  #L4dbaca.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4dbad0.  throw v0;
}
procedure `boolean` `a`(`boolean` v0 , `java.lang.String` v1 @kind object, `boolean` v2 , `boolean` v3 , `io.reactivex.rxjava3.functions.Function` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory;.a:(ZLjava/lang/String;ZZLio/reactivex/rxjava3/functions/Function;)Z` @AccessFlag STATIC {
    temp;

  #L4db9a0.  if v0 == 0 then goto L4db9ce;
  #L4db9a4.  call temp:= `apply`(v4, v1) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4db9aa.  v0:= temp @kind object;
  #L4db9ac.  v0:= (`java.lang.String`) v0 @kind object;
  #L4db9b0.  if v0 != 0 then goto L4db9b6;
  #L4db9b4.  return v2;
  #L4db9b6.  v1:= "true" @kind object;
  #L4db9ba.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4db9c0.  v0:= temp;
  #L4db9c2.  return v0;
  #L4db9c4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4db9c6.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4db9cc.  return v2;
  #L4db9ce.  return v3;
  catch `java.lang.Throwable` @[L4db9a4..L4db9c2] goto L4db9c4;
}
procedure `int` `b`(`boolean` v0 , `java.lang.String` v1 @kind object, `int` v2 , `int` v3 , `io.reactivex.rxjava3.functions.Function` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory;.b:(ZLjava/lang/String;IILio/reactivex/rxjava3/functions/Function;)I` @AccessFlag STATIC {
    temp;

  #L4db9ec.  if v0 == 0 then goto L4dba16;
  #L4db9f0.  call temp:= `apply`(v4, v1) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4db9f6.  v0:= temp @kind object;
  #L4db9f8.  v0:= (`java.lang.String`) v0 @kind object;
  #L4db9fc.  if v0 != 0 then goto L4dba02;
  #L4dba00.  return v2;
  #L4dba02.  call temp:= `parseInt`(v0) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L4dba08.  v0:= temp;
  #L4dba0a.  return v0;
  #L4dba0c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4dba0e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4dba14.  return v2;
  #L4dba16.  return v3;
  catch `java.lang.Throwable` @[L4db9f0..L4dba0a] goto L4dba0c;
}
procedure `void` `c`(`boolean` v1 , `java.util.concurrent.ScheduledExecutorService` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory;.c:(ZLjava/util/concurrent/ScheduledExecutorService;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L4dbb38.  if v1 == 0 then goto L4dbb54;
  #L4dbb3c.  v1:= instanceof @variable v2 @type ^`java.util.concurrent.ScheduledThreadPoolExecutor` @kind boolean;
  #L4dbb40.  if v1 == 0 then goto L4dbb54;
  #L4dbb44.  v1:= v2 @kind object;
  #L4dbb46.  v1:= (`java.util.concurrent.ScheduledThreadPoolExecutor`) v1 @kind object;
  #L4dbb4a.  v0:= `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.b` @type ^`java.util.Map` @kind object;
  #L4dbb4e.  call temp:= `put`(v0, v1, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4dbb54.  return @kind void;
}
procedure `java.util.concurrent.ScheduledExecutorService` `create`(`java.util.concurrent.ThreadFactory` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory;.create:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4dba34.  v0:= 1I;
  #L4dba36.  call temp:= `newScheduledThreadPool`(v0, v1) @signature `Ljava/util/concurrent/Executors;.newScheduledThreadPool:(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L4dba3c.  v1:= temp @kind object;
  #L4dba3e.  v0:= `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.PURGE_ENABLED` @type ^`boolean` @kind boolean;
  #L4dba42.  call `c`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory;.c:(ZLjava/util/concurrent/ScheduledExecutorService;)V` @kind static;
  #L4dba48.  return v1 @kind object;
}
procedure `void` `d`(`boolean` v11 ) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory;.d:(Z)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4dbb68.  if v11 == 0 then goto L4dbbcc;
  #L4dbb6c.  v11:= `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4dbb70.  call temp:= `get`(v11) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4dbb76.  v0:= temp @kind object;
  #L4dbb78.  v0:= (`java.util.concurrent.ScheduledExecutorService`) v0 @kind object;
  #L4dbb7c.  if v0 == 0 then goto L4dbb82;
  #L4dbb80.  return @kind void;
  #L4dbb82.  v1:= 1I;
  #L4dbb84.  v2:= new `io.reactivex.rxjava3.internal.schedulers.RxThreadFactory`;
  #L4dbb88.  v3:= "RxSchedulerPurge" @kind object;
  #L4dbb8c.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4dbb92.  call temp:= `newScheduledThreadPool`(v1, v2) @signature `Ljava/util/concurrent/Executors;.newScheduledThreadPool:(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L4dbb98.  v4:= temp @kind object;
  #L4dbb9a.  call temp:= `compareAndSet`(v11, v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4dbba0.  v11:= temp;
  #L4dbba2.  if v11 == 0 then goto L4dbbc4;
  #L4dbba6.  v5:= new `io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory$a`;
  #L4dbbaa.  call `<init>`(v5) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory$a;.<init>:()V` @kind direct;
  #L4dbbb0.  v11:= `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.PURGE_PERIOD_SECONDS` @type ^`int`;
  #L4dbbb4.  v6:= (`long`) v11 @kind i2l;
  #L4dbbb6.  v8:= (`long`) v11 @kind i2l;
  #L4dbbb8.  v10:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4dbbbc.  call temp:= `scheduleAtFixedRate`(v4, v5, v6, v8, v10) @signature `Ljava/util/concurrent/ScheduledExecutorService;.scheduleAtFixedRate:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;` @kind interface;
  #L4dbbc2.  return @kind void;
  #L4dbbc4.  call temp:= `shutdownNow`(v4) @signature `Ljava/util/concurrent/ScheduledExecutorService;.shutdownNow:()Ljava/util/List;` @kind interface;
  #L4dbbca.  goto L4dbb6c;
  #L4dbbcc.  return @kind void;
}
procedure `void` `shutdown`() @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory;.shutdown:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4dbae4.  v0:= `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4dbae8.  v1:= 0I;
  #L4dbaea.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4dbaf0.  v0:= temp @kind object;
  #L4dbaf2.  v0:= (`java.util.concurrent.ScheduledExecutorService`) v0 @kind object;
  #L4dbaf6.  if v0 == 0 then goto L4dbb00;
  #L4dbafa.  call temp:= `shutdownNow`(v0) @signature `Ljava/util/concurrent/ScheduledExecutorService;.shutdownNow:()Ljava/util/List;` @kind interface;
  #L4dbb00.  v0:= `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.b` @type ^`java.util.Map` @kind object;
  #L4dbb04.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4dbb0a.  return @kind void;
}
procedure `void` `start`() @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory;.start:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4dbb1c.  v0:= `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.PURGE_ENABLED` @type ^`boolean` @kind boolean;
  #L4dbb20.  call `d`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory;.d:(Z)V` @kind static;
  #L4dbb26.  return @kind void;
}
