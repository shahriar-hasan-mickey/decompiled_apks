record `io.reactivex.rxjava3.internal.schedulers.IoScheduler` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Scheduler` @kind class {
  `java.util.concurrent.ThreadFactory` `io.reactivex.rxjava3.internal.schedulers.IoScheduler.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.schedulers.IoScheduler.c` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.KEEP_ALIVE_TIME_DEFAULT` @AccessFlag PUBLIC_STATIC_FINAL;
global `io.reactivex.rxjava3.internal.schedulers.RxThreadFactory` `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.d` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.schedulers.RxThreadFactory` `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.e` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.f` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.TimeUnit` `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.g` @AccessFlag PRIVATE_STATIC_FINAL;
global `io.reactivex.rxjava3.internal.schedulers.IoScheduler$c` `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.h` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.schedulers.IoScheduler$a` `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.i` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4daec8.  v0:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4daecc.  `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.g` @type ^`java.util.concurrent.TimeUnit` := v0 @kind object;
  #L4daed0.  v0:= "rx3.io-keep-alive-time" @kind object;
  #L4daed4.  v1:= 60L;
  #L4daed8.  call temp:= `getLong`(v0, v1) @signature `Ljava/lang/Long;.getLong:(Ljava/lang/String;J)Ljava/lang/Long;` @kind static;
  #L4daede.  v0:= temp @kind object;
  #L4daee0.  call temp:= `longValue`(v0) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L4daee6.  v0:= temp @kind wide;
  #L4daee8.  `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.f` @type ^`long` := v0 @kind wide;
  #L4daeec.  v0:= new `io.reactivex.rxjava3.internal.schedulers.IoScheduler$c`;
  #L4daef0.  v1:= new `io.reactivex.rxjava3.internal.schedulers.RxThreadFactory`;
  #L4daef4.  v2:= "RxCachedThreadSchedulerShutdown" @kind object;
  #L4daef8.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4daefe.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L4daf04.  `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.h` @type ^`io.reactivex.rxjava3.internal.schedulers.IoScheduler$c` := v0 @kind object;
  #L4daf08.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/NewThreadWorker;.dispose:()V` @kind virtual;
  #L4daf0e.  v0:= "rx3.io-priority" @kind object;
  #L4daf12.  v1:= 5I;
  #L4daf14.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L4daf1a.  v0:= temp @kind object;
  #L4daf1c.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4daf22.  v0:= temp;
  #L4daf24.  v1:= 10I;
  #L4daf28.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4daf2e.  v0:= temp;
  #L4daf30.  v1:= 1I;
  #L4daf32.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L4daf38.  v0:= temp;
  #L4daf3a.  v1:= new `io.reactivex.rxjava3.internal.schedulers.RxThreadFactory`;
  #L4daf3e.  v2:= "RxCachedThreadScheduler" @kind object;
  #L4daf42.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L4daf48.  `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.d` @type ^`io.reactivex.rxjava3.internal.schedulers.RxThreadFactory` := v1 @kind object;
  #L4daf4c.  v2:= new `io.reactivex.rxjava3.internal.schedulers.RxThreadFactory`;
  #L4daf50.  v3:= "RxCachedWorkerPoolEvictor" @kind object;
  #L4daf54.  call `<init>`(v2, v3, v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L4daf5a.  `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.e` @type ^`io.reactivex.rxjava3.internal.schedulers.RxThreadFactory` := v2 @kind object;
  #L4daf5e.  v0:= new `io.reactivex.rxjava3.internal.schedulers.IoScheduler$a`;
  #L4daf62.  v2:= 0L;
  #L4daf66.  v4:= 0I;
  #L4daf68.  call `<init>`(v0, v2, v4, v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$a;.<init>:(JLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L4daf6e.  `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.i` @type ^`io.reactivex.rxjava3.internal.schedulers.IoScheduler$a` := v0 @kind object;
  #L4daf72.  call `e`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$a;.e:()V` @kind virtual;
  #L4daf78.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.IoScheduler` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4daf8c.  v0:= `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.d` @type ^`io.reactivex.rxjava3.internal.schedulers.RxThreadFactory` @kind object;
  #L4daf90.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L4daf96.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.IoScheduler` v1 @kind this, `java.util.concurrent.ThreadFactory` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4dafa8.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.<init>:()V` @kind direct;
  #L4dafae.  v1.`io.reactivex.rxjava3.internal.schedulers.IoScheduler.b` @type ^`java.util.concurrent.ThreadFactory` := v2 @kind object;
  #L4dafb2.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4dafb6.  v0:= `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.i` @type ^`io.reactivex.rxjava3.internal.schedulers.IoScheduler$a` @kind object;
  #L4dafba.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4dafc0.  v1.`io.reactivex.rxjava3.internal.schedulers.IoScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4dafc4.  call `start`(v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler;.start:()V` @kind virtual;
  #L4dafca.  return @kind void;
}
procedure `io.reactivex.rxjava3.core.Scheduler$Worker` `createWorker`(`io.reactivex.rxjava3.internal.schedulers.IoScheduler` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler;.createWorker:()Lio/reactivex/rxjava3/core/Scheduler$Worker;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dae9c.  v0:= new `io.reactivex.rxjava3.internal.schedulers.IoScheduler$b`;
  #L4daea0.  v1:= v2.`io.reactivex.rxjava3.internal.schedulers.IoScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4daea4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4daeaa.  v1:= temp @kind object;
  #L4daeac.  v1:= (`io.reactivex.rxjava3.internal.schedulers.IoScheduler$a`) v1 @kind object;
  #L4daeb0.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$b;.<init>:(Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$a;)V` @kind direct;
  #L4daeb6.  return v0 @kind object;
}
procedure `void` `shutdown`(`io.reactivex.rxjava3.internal.schedulers.IoScheduler` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler;.shutdown:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dafdc.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.IoScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4dafe0.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.i` @type ^`io.reactivex.rxjava3.internal.schedulers.IoScheduler$a` @kind object;
  #L4dafe4.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4dafea.  v0:= temp @kind object;
  #L4dafec.  v0:= (`io.reactivex.rxjava3.internal.schedulers.IoScheduler$a`) v0 @kind object;
  #L4daff0.  if v0 == v1 then goto L4daffa;
  #L4daff4.  call `e`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$a;.e:()V` @kind virtual;
  #L4daffa.  return @kind void;
}
procedure `int` `size`(`io.reactivex.rxjava3.internal.schedulers.IoScheduler` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dae6c.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.IoScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4dae70.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4dae76.  v0:= temp @kind object;
  #L4dae78.  v0:= (`io.reactivex.rxjava3.internal.schedulers.IoScheduler$a`) v0 @kind object;
  #L4dae7c.  v0:= v0.`io.reactivex.rxjava3.internal.schedulers.IoScheduler$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4dae80.  call temp:= `size`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.size:()I` @kind virtual;
  #L4dae86.  v0:= temp;
  #L4dae88.  return v0;
}
procedure `void` `start`(`io.reactivex.rxjava3.internal.schedulers.IoScheduler` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler;.start:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4db00c.  v0:= new `io.reactivex.rxjava3.internal.schedulers.IoScheduler$a`;
  #L4db010.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.f` @type ^`long` @kind wide;
  #L4db014.  v3:= `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.g` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4db018.  v4:= v5.`io.reactivex.rxjava3.internal.schedulers.IoScheduler.b` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L4db01c.  call `<init>`(v0, v1, v3, v4) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$a;.<init>:(JLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L4db022.  v1:= v5.`io.reactivex.rxjava3.internal.schedulers.IoScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4db026.  v2:= `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.i` @type ^`io.reactivex.rxjava3.internal.schedulers.IoScheduler$a` @kind object;
  #L4db02a.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4db030.  v1:= temp;
  #L4db032.  if v1 != 0 then goto L4db03c;
  #L4db036.  call `e`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$a;.e:()V` @kind virtual;
  #L4db03c.  return @kind void;
}
