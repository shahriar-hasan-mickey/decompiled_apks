record `io.reactivex.rxjava3.internal.schedulers.SchedulerWhen` @kind class @AccessFlag PUBLIC extends `io.reactivex.rxjava3.core.Scheduler` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.b` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.rxjava3.processors.FlowableProcessor` `io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.c` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.d` @AccessFlag PRIVATE;
}
global `io.reactivex.rxjava3.disposables.Disposable` `@@io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.disposables.Disposable` `@@io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerWhen;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4dbfc8.  v0:= new `io.reactivex.rxjava3.internal.schedulers.SchedulerWhen$g`;
  #L4dbfcc.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerWhen$g;.<init>:()V` @kind direct;
  #L4dbfd2.  `@@io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.e` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4dbfd6.  call temp:= `a`() @signature `Ls0/d;.a:()Lio/reactivex/rxjava3/disposables/Disposable;` @kind static;
  #L4dbfdc.  v0:= temp @kind object;
  #L4dbfde.  `@@io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4dbfe2.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.SchedulerWhen` v0 @kind this, `io.reactivex.rxjava3.functions.Function` v1 @kind object, `io.reactivex.rxjava3.core.Scheduler` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerWhen;.<init>:(Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/core/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4dbff4.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Scheduler;.<init>:()V` @kind direct;
  #L4dbffa.  v0.`io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.b` @type ^`io.reactivex.rxjava3.core.Scheduler` := v2 @kind object;
  #L4dbffe.  call temp:= `create`() @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:()Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind static;
  #L4dc004.  v2:= temp @kind object;
  #L4dc006.  call temp:= `toSerialized`(v2) @signature `Lio/reactivex/rxjava3/processors/FlowableProcessor;.toSerialized:()Lio/reactivex/rxjava3/processors/FlowableProcessor;` @kind virtual;
  #L4dc00c.  v2:= temp @kind object;
  #L4dc00e.  v0.`io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.c` @type ^`io.reactivex.rxjava3.processors.FlowableProcessor` := v2 @kind object;
  #L4dc012.  call temp:= `apply`(v1, v2) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4dc018.  v1:= temp @kind object;
  #L4dc01a.  v1:= (`io.reactivex.rxjava3.core.Completable`) v1 @kind object;
  #L4dc01e.  call temp:= `subscribe`(v1) @signature `Lio/reactivex/rxjava3/core/Completable;.subscribe:()Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4dc024.  v1:= temp @kind object;
  #L4dc026.  v0.`io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v1 @kind object;
  #L4dc02a.  return @kind void;
  #L4dc02c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4dc02e.  call temp:= `wrapOrThrow`(v1) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4dc034.  v1:= temp @kind object;
  #L4dc036.  throw v1;
  catch `java.lang.Throwable` @[L4dc012..L4dc02a] goto L4dc02c;
}
procedure `io.reactivex.rxjava3.core.Scheduler$Worker` `createWorker`(`io.reactivex.rxjava3.internal.schedulers.SchedulerWhen` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerWhen;.createWorker:()Lio/reactivex/rxjava3/core/Scheduler$Worker;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4dbf74.  v0:= v4.`io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.b` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4dbf78.  call temp:= `createWorker`(v0) @signature `Lio/reactivex/rxjava3/core/Scheduler;.createWorker:()Lio/reactivex/rxjava3/core/Scheduler$Worker;` @kind virtual;
  #L4dbf7e.  v0:= temp @kind object;
  #L4dbf80.  call temp:= `create`() @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:()Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind static;
  #L4dbf86.  v1:= temp @kind object;
  #L4dbf88.  call temp:= `toSerialized`(v1) @signature `Lio/reactivex/rxjava3/processors/FlowableProcessor;.toSerialized:()Lio/reactivex/rxjava3/processors/FlowableProcessor;` @kind virtual;
  #L4dbf8e.  v1:= temp @kind object;
  #L4dbf90.  v2:= new `io.reactivex.rxjava3.internal.schedulers.SchedulerWhen$a`;
  #L4dbf94.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerWhen$a;.<init>:(Lio/reactivex/rxjava3/core/Scheduler$Worker;)V` @kind direct;
  #L4dbf9a.  call temp:= `map`(v1, v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.map:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L4dbfa0.  v2:= temp @kind object;
  #L4dbfa2.  v3:= new `io.reactivex.rxjava3.internal.schedulers.SchedulerWhen$e`;
  #L4dbfa6.  call `<init>`(v3, v1, v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerWhen$e;.<init>:(Lio/reactivex/rxjava3/processors/FlowableProcessor;Lio/reactivex/rxjava3/core/Scheduler$Worker;)V` @kind direct;
  #L4dbfac.  v0:= v4.`io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.c` @type ^`io.reactivex.rxjava3.processors.FlowableProcessor` @kind object;
  #L4dbfb0.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4dbfb6.  return v3 @kind object;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.schedulers.SchedulerWhen` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerWhen;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dc054.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4dc058.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4dc05e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.schedulers.SchedulerWhen` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerWhen;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dbf54.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4dbf58.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4dbf5e.  v0:= temp;
  #L4dbf60.  return v0;
}
