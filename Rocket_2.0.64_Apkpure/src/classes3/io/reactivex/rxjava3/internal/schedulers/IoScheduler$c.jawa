record `io.reactivex.rxjava3.internal.schedulers.IoScheduler$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.schedulers.NewThreadWorker` @kind class {
  `long` `io.reactivex.rxjava3.internal.schedulers.IoScheduler$c.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.IoScheduler$c` v2 @kind this, `java.util.concurrent.ThreadFactory` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4dae34.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/schedulers/NewThreadWorker;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L4dae3a.  v0:= 0L;
  #L4dae3e.  v2.`io.reactivex.rxjava3.internal.schedulers.IoScheduler$c.c` @type ^`long` := v0 @kind wide;
  #L4dae42.  return @kind void;
}
procedure `long` `a`(`io.reactivex.rxjava3.internal.schedulers.IoScheduler$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$c;.a:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dae1c.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.IoScheduler$c.c` @type ^`long` @kind wide;
  #L4dae20.  return v0 @kind wide;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.schedulers.IoScheduler$c` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$c;.b:(J)V` @AccessFlag PUBLIC {
    temp;

  #L4dae54.  v0.`io.reactivex.rxjava3.internal.schedulers.IoScheduler$c.c` @type ^`long` := v1 @kind wide;
  #L4dae58.  return @kind void;
}
