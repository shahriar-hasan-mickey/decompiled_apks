record `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `io.reactivex.rxjava3.schedulers.SchedulerRunnableIntrospection` @kind interface {
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$b;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d9ea8.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4d9eae.  v1:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4d9eb2.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4d9eb8.  v0.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L4d9ebc.  v1:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4d9ec0.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4d9ec6.  v0.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b.b` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L4d9eca.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d9edc.  v0:= 0I;
  #L4d9ede.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4d9ee4.  v0:= temp @kind object;
  #L4d9ee6.  if v0 == 0 then goto L4d9efe;
  #L4d9eea.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d9eee.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4d9ef4.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b.b` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d9ef8.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4d9efe.  return @kind void;
}
procedure `java.lang.Runnable` `getWrappedRunnable`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$b;.getWrappedRunnable:()Ljava/lang/Runnable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d9e80.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d9e86.  v0:= temp @kind object;
  #L4d9e88.  v0:= (`java.lang.Runnable`) v0 @kind object;
  #L4d9e8c.  if v0 == 0 then goto L4d9e92;
  #L4d9e90.  goto L4d9e96;
  #L4d9e92.  v0:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_RUNNABLE` @type ^`java.lang.Runnable` @kind object;
  #L4d9e96.  return v0 @kind object;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d9e5c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d9e62.  v0:= temp @kind object;
  #L4d9e64.  if v0 != 0 then goto L4d9e6c;
  #L4d9e68.  v0:= 1I;
  #L4d9e6a.  goto L4d9e6e;
  #L4d9e6c.  v0:= 0I;
  #L4d9e6e.  return v0;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4d9f10.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d9f16.  v0:= temp @kind object;
  #L4d9f18.  v0:= (`java.lang.Runnable`) v0 @kind object;
  #L4d9f1c.  if v0 == 0 then goto L4d9f7a;
  #L4d9f20.  v1:= 0I;
  #L4d9f22.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L4d9f28.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4d9f2e.  v0:= v3.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d9f32.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4d9f36.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4d9f3c.  v0:= v3.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b.b` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d9f40.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4d9f46.  goto L4d9f7a;
  #L4d9f48.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d9f4a.  goto L4d9f72;
  #L4d9f4c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d9f4e.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4d9f54.  v1:= v3.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d9f58.  v2:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4d9f5c.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4d9f62.  v1:= v3.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b.b` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d9f66.  v2:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4d9f6a.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4d9f70.  throw v0;
  #L4d9f72.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d9f78.  throw v0;
  #L4d9f7a.  return @kind void;
  catch `java.lang.Throwable` @[L4d9f22..L4d9f28] goto L4d9f4c;
  catch `java.lang.Throwable` @[L4d9f28..L4d9f72] goto L4d9f48;
}
