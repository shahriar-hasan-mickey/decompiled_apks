record `io.reactivex.rxjava3.internal.schedulers.ComputationScheduler` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Scheduler` @kind class, `io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport` @kind interface {
  `java.util.concurrent.ThreadFactory` `io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.c` @AccessFlag FINAL;
}
global `io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b` `@@io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.d` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.schedulers.RxThreadFactory` `@@io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.e` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.f` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$c` `@@io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.g` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4d9bd8.  call temp:= `getRuntime`() @signature `Ljava/lang/Runtime;.getRuntime:()Ljava/lang/Runtime;` @kind static;
  #L4d9bde.  v0:= temp @kind object;
  #L4d9be0.  call temp:= `availableProcessors`(v0) @signature `Ljava/lang/Runtime;.availableProcessors:()I` @kind virtual;
  #L4d9be6.  v0:= temp;
  #L4d9be8.  v1:= "rx3.computation-threads" @kind object;
  #L4d9bec.  v2:= 0I;
  #L4d9bee.  call temp:= `getInteger`(v1, v2) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L4d9bf4.  v1:= temp @kind object;
  #L4d9bf6.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4d9bfc.  v1:= temp;
  #L4d9bfe.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler;.b:(II)I` @kind static;
  #L4d9c04.  v0:= temp;
  #L4d9c06.  `@@io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.f` @type ^`int` := v0;
  #L4d9c0a.  v0:= new `io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$c`;
  #L4d9c0e.  v1:= new `io.reactivex.rxjava3.internal.schedulers.RxThreadFactory`;
  #L4d9c12.  v3:= "RxComputationShutdown" @kind object;
  #L4d9c16.  call `<init>`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4d9c1c.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L4d9c22.  `@@io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.g` @type ^`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$c` := v0 @kind object;
  #L4d9c26.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/NewThreadWorker;.dispose:()V` @kind virtual;
  #L4d9c2c.  v0:= "rx3.computation-priority" @kind object;
  #L4d9c30.  v1:= 5I;
  #L4d9c32.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L4d9c38.  v0:= temp @kind object;
  #L4d9c3a.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4d9c40.  v0:= temp;
  #L4d9c42.  v1:= 10I;
  #L4d9c46.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4d9c4c.  v0:= temp;
  #L4d9c4e.  v1:= 1I;
  #L4d9c50.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L4d9c56.  v0:= temp;
  #L4d9c58.  v3:= new `io.reactivex.rxjava3.internal.schedulers.RxThreadFactory`;
  #L4d9c5c.  v4:= "RxComputationThreadPool" @kind object;
  #L4d9c60.  call `<init>`(v3, v4, v0, v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;IZ)V` @kind direct;
  #L4d9c66.  `@@io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.e` @type ^`io.reactivex.rxjava3.internal.schedulers.RxThreadFactory` := v3 @kind object;
  #L4d9c6a.  v0:= new `io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b`;
  #L4d9c6e.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$b;.<init>:(ILjava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L4d9c74.  `@@io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.d` @type ^`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b` := v0 @kind object;
  #L4d9c78.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$b;.b:()V` @kind virtual;
  #L4d9c7e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4d9c90.  v0:= `@@io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.e` @type ^`io.reactivex.rxjava3.internal.schedulers.RxThreadFactory` @kind object;
  #L4d9c94.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L4d9c9a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler` v1 @kind this, `java.util.concurrent.ThreadFactory` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4d9cac.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.<init>:()V` @kind direct;
  #L4d9cb2.  v1.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.b` @type ^`java.util.concurrent.ThreadFactory` := v2 @kind object;
  #L4d9cb6.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4d9cba.  v0:= `@@io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.d` @type ^`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b` @kind object;
  #L4d9cbe.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4d9cc4.  v1.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4d9cc8.  call `start`(v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler;.start:()V` @kind virtual;
  #L4d9cce.  return @kind void;
}
procedure `int` `b`(`int` v0 , `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler;.b:(II)I` @AccessFlag STATIC {
    temp;

  #L4d9b14.  if v1 <= 0 then goto L4d9b20;
  #L4d9b18.  if v1 <= v0 then goto L4d9b1e;
  #L4d9b1c.  goto L4d9b20;
  #L4d9b1e.  v0:= v1;
  #L4d9b20.  return v0;
}
procedure `io.reactivex.rxjava3.core.Scheduler$Worker` `createWorker`(`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler;.createWorker:()Lio/reactivex/rxjava3/core/Scheduler$Worker;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d9b34.  v0:= new `io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$a`;
  #L4d9b38.  v1:= v2.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d9b3c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d9b42.  v1:= temp @kind object;
  #L4d9b44.  v1:= (`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b`) v1 @kind object;
  #L4d9b48.  call temp:= `a`(v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$b;.a:()Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$c;` @kind virtual;
  #L4d9b4e.  v1:= temp @kind object;
  #L4d9b50.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$a;.<init>:(Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$c;)V` @kind direct;
  #L4d9b56.  return v0 @kind object;
}
procedure `void` `createWorkers`(`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler` v1 @kind this, `int` v2 , `io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport$WorkerCallback` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler;.createWorkers:(ILio/reactivex/rxjava3/internal/schedulers/SchedulerMultiWorkerSupport$WorkerCallback;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d9ce0.  v0:= "number > 0 required" @kind object;
  #L4d9ce4.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4d9cea.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d9cee.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d9cf4.  v0:= temp @kind object;
  #L4d9cf6.  v0:= (`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b`) v0 @kind object;
  #L4d9cfa.  call `createWorkers`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$b;.createWorkers:(ILio/reactivex/rxjava3/internal/schedulers/SchedulerMultiWorkerSupport$WorkerCallback;)V` @kind virtual;
  #L4d9d00.  return @kind void;
}
procedure `io.reactivex.rxjava3.disposables.Disposable` `scheduleDirect`(`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler` v1 @kind this, `java.lang.Runnable` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler;.scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d9b68.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d9b6c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d9b72.  v0:= temp @kind object;
  #L4d9b74.  v0:= (`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b`) v0 @kind object;
  #L4d9b78.  call temp:= `a`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$b;.a:()Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$c;` @kind virtual;
  #L4d9b7e.  v0:= temp @kind object;
  #L4d9b80.  call temp:= `scheduleDirect`(v0, v2, v3, v5) @signature `Lio/reactivex/rxjava3/internal/schedulers/NewThreadWorker;.scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4d9b86.  v2:= temp @kind object;
  #L4d9b88.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.disposables.Disposable` `schedulePeriodicallyDirect`(`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler` v8 @kind this, `java.lang.Runnable` v9 @kind object, `long` v10 , `long` v12 , `java.util.concurrent.TimeUnit` v14 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4d9b9c.  v0:= v8.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d9ba0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d9ba6.  v0:= temp @kind object;
  #L4d9ba8.  v0:= (`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b`) v0 @kind object;
  #L4d9bac.  call temp:= `a`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$b;.a:()Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$c;` @kind virtual;
  #L4d9bb2.  v1:= temp @kind object;
  #L4d9bb4.  v2:= v9 @kind object;
  #L4d9bb6.  v3:= v10 @kind wide;
  #L4d9bb8.  v5:= v12 @kind wide;
  #L4d9bba.  v7:= v14 @kind object;
  #L4d9bbc.  call temp:= `schedulePeriodicallyDirect`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/rxjava3/internal/schedulers/NewThreadWorker;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4d9bc2.  v9:= temp @kind object;
  #L4d9bc4.  return v9 @kind object;
}
procedure `void` `shutdown`(`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler;.shutdown:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d9d14.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d9d18.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.d` @type ^`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b` @kind object;
  #L4d9d1c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4d9d22.  v0:= temp @kind object;
  #L4d9d24.  v0:= (`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b`) v0 @kind object;
  #L4d9d28.  if v0 == v1 then goto L4d9d32;
  #L4d9d2c.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$b;.b:()V` @kind virtual;
  #L4d9d32.  return @kind void;
}
procedure `void` `start`(`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler;.start:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4d9d44.  v0:= new `io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b`;
  #L4d9d48.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.f` @type ^`int`;
  #L4d9d4c.  v2:= v3.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.b` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L4d9d50.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$b;.<init>:(ILjava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L4d9d56.  v1:= v3.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d9d5a.  v2:= `@@io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.d` @type ^`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b` @kind object;
  #L4d9d5e.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4d9d64.  v1:= temp;
  #L4d9d66.  if v1 != 0 then goto L4d9d70;
  #L4d9d6a.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$b;.b:()V` @kind virtual;
  #L4d9d70.  return @kind void;
}
