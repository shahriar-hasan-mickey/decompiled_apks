record `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `java.lang.Runnable` `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.DisposableContainer` `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.b` @AccessFlag FINAL;
  `java.lang.Thread` `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.c` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b` v0 @kind this, `java.lang.Runnable` v1 @kind object, `io.reactivex.rxjava3.disposables.DisposableContainer` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.<init>:(Ljava/lang/Runnable;Lio/reactivex/rxjava3/disposables/DisposableContainer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4da080.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4da086.  v0.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.a` @type ^`java.lang.Runnable` := v1 @kind object;
  #L4da08a.  v0.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.b` @type ^`io.reactivex.rxjava3.disposables.DisposableContainer` := v2 @kind object;
  #L4da08e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4da0a0.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.b` @type ^`io.reactivex.rxjava3.disposables.DisposableContainer` @kind object;
  #L4da0a4.  if v0 == 0 then goto L4da0ae;
  #L4da0a8.  call temp:= `delete`(v0, v1) @signature `Lio/reactivex/rxjava3/disposables/DisposableContainer;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind interface;
  #L4da0ae.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4da0c0.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4da0c6.  v0:= temp;
  #L4da0c8.  v1:= 2I;
  #L4da0ca.  if v0 < v1 then goto L4da0d0;
  #L4da0ce.  goto L4da11c;
  #L4da0d0.  v1:= 4I;
  #L4da0d2.  if v0 != 0 then goto L4da0ec;
  #L4da0d6.  v0:= 0I;
  #L4da0d8.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4da0de.  v0:= temp;
  #L4da0e0.  if v0 == 0 then goto L4da0c0;
  #L4da0e4.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.a:()V` @kind virtual;
  #L4da0ea.  goto L4da11c;
  #L4da0ec.  v0:= 1I;
  #L4da0ee.  v2:= 3I;
  #L4da0f0.  call temp:= `compareAndSet`(v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4da0f6.  v0:= temp;
  #L4da0f8.  if v0 == 0 then goto L4da0c0;
  #L4da0fc.  v0:= v3.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.c` @type ^`java.lang.Thread` @kind object;
  #L4da100.  if v0 == 0 then goto L4da110;
  #L4da104.  call `interrupt`(v0) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L4da10a.  v0:= 0I;
  #L4da10c.  v3.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.c` @type ^`java.lang.Thread` := v0 @kind object;
  #L4da110.  call `set`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L4da116.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.a:()V` @kind virtual;
  #L4da11c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4da058.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4da05e.  v0:= temp;
  #L4da060.  v1:= 2I;
  #L4da062.  if v0 < v1 then goto L4da06a;
  #L4da066.  v0:= 1I;
  #L4da068.  goto L4da06c;
  #L4da06a.  v0:= 0I;
  #L4da06c.  return v0;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4da130.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4da136.  v0:= temp;
  #L4da138.  if v0 != 0 then goto L4da1e0;
  #L4da13c.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4da142.  v0:= temp @kind object;
  #L4da144.  v5.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.c` @type ^`java.lang.Thread` := v0 @kind object;
  #L4da148.  v0:= 0I;
  #L4da14a.  v1:= 1I;
  #L4da14c.  call temp:= `compareAndSet`(v5, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4da152.  v0:= temp;
  #L4da154.  v2:= 0I;
  #L4da156.  if v0 == 0 then goto L4da1dc;
  #L4da15a.  v0:= 3I;
  #L4da15c.  v3:= 2I;
  #L4da15e.  v4:= v5.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.a` @type ^`java.lang.Runnable` @kind object;
  #L4da162.  call `run`(v4) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L4da168.  v5.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.c` @type ^`java.lang.Thread` := v2 @kind object;
  #L4da16c.  call temp:= `compareAndSet`(v5, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4da172.  v1:= temp;
  #L4da174.  if v1 == 0 then goto L4da180;
  #L4da178.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.a:()V` @kind virtual;
  #L4da17e.  goto L4da1e0;
  #L4da180.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4da186.  v1:= temp;
  #L4da188.  if v1 != v0 then goto L4da194;
  #L4da18c.  call `yield`() @signature `Ljava/lang/Thread;.yield:()V` @kind static;
  #L4da192.  goto L4da180;
  #L4da194.  call temp:= `interrupted`() @signature `Ljava/lang/Thread;.interrupted:()Z` @kind static;
  #L4da19a.  goto L4da1e0;
  #L4da19c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4da19e.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4da1a4.  throw v4;
  #L4da1a6.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4da1a8.  v5.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.c` @type ^`java.lang.Thread` := v2 @kind object;
  #L4da1ac.  call temp:= `compareAndSet`(v5, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4da1b2.  v1:= temp;
  #L4da1b4.  if v1 != 0 then goto L4da1d4;
  #L4da1b8.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4da1be.  v1:= temp;
  #L4da1c0.  if v1 != v0 then goto L4da1cc;
  #L4da1c4.  call `yield`() @signature `Ljava/lang/Thread;.yield:()V` @kind static;
  #L4da1ca.  goto L4da1b8;
  #L4da1cc.  call temp:= `interrupted`() @signature `Ljava/lang/Thread;.interrupted:()Z` @kind static;
  #L4da1d2.  goto L4da1da;
  #L4da1d4.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.a:()V` @kind virtual;
  #L4da1da.  throw v4;
  #L4da1dc.  v5.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.c` @type ^`java.lang.Thread` := v2 @kind object;
  #L4da1e0.  return @kind void;
  catch `java.lang.Throwable` @[L4da15e..L4da168] goto L4da19c;
  catch `java.lang.Throwable` @[L4da19e..L4da1a6] goto L4da1a6;
}
