record `io.reactivex.rxjava3.internal.schedulers.c` @kind class @AccessFlag FINAL extends `java.util.concurrent.Callable` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `java.lang.Runnable` `io.reactivex.rxjava3.internal.schedulers.c.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.schedulers.c.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.schedulers.c.c` @AccessFlag FINAL;
  `java.util.concurrent.ExecutorService` `io.reactivex.rxjava3.internal.schedulers.c.d` @AccessFlag FINAL;
  `java.lang.Thread` `io.reactivex.rxjava3.internal.schedulers.c.e` @AccessFlag ;
}
global `java.util.concurrent.FutureTask` `@@io.reactivex.rxjava3.internal.schedulers.c.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/schedulers/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L4da9a4.  v0:= new `java.util.concurrent.FutureTask`;
  #L4da9a8.  v1:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_RUNNABLE` @type ^`java.lang.Runnable` @kind object;
  #L4da9ac.  v2:= 0I;
  #L4da9ae.  call `<init>`(v0, v1, v2) @signature `Ljava/util/concurrent/FutureTask;.<init>:(Ljava/lang/Runnable;Ljava/lang/Object;)V` @kind direct;
  #L4da9b4.  `@@io.reactivex.rxjava3.internal.schedulers.c.f` @type ^`java.util.concurrent.FutureTask` := v0 @kind object;
  #L4da9b8.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.c` v0 @kind this, `java.lang.Runnable` v1 @kind object, `java.util.concurrent.ExecutorService` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/c;.<init>:(Ljava/lang/Runnable;Ljava/util/concurrent/ExecutorService;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4da9cc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4da9d2.  v0.`io.reactivex.rxjava3.internal.schedulers.c.a` @type ^`java.lang.Runnable` := v1 @kind object;
  #L4da9d6.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4da9da.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4da9e0.  v0.`io.reactivex.rxjava3.internal.schedulers.c.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4da9e4.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4da9e8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4da9ee.  v0.`io.reactivex.rxjava3.internal.schedulers.c.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4da9f2.  v0.`io.reactivex.rxjava3.internal.schedulers.c.d` @type ^`java.util.concurrent.ExecutorService` := v2 @kind object;
  #L4da9f6.  return @kind void;
}
procedure `java.lang.Void` `a`(`io.reactivex.rxjava3.internal.schedulers.c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/c;.a:()Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4da948.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4da94e.  v0:= temp @kind object;
  #L4da950.  v2.`io.reactivex.rxjava3.internal.schedulers.c.e` @type ^`java.lang.Thread` := v0 @kind object;
  #L4da954.  v0:= 0I;
  #L4da956.  v1:= v2.`io.reactivex.rxjava3.internal.schedulers.c.a` @type ^`java.lang.Runnable` @kind object;
  #L4da95a.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L4da960.  v2.`io.reactivex.rxjava3.internal.schedulers.c.e` @type ^`java.lang.Thread` := v0 @kind object;
  #L4da964.  v1:= v2.`io.reactivex.rxjava3.internal.schedulers.c.d` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L4da968.  call temp:= `submit`(v1, v2) @signature `Ljava/util/concurrent/ExecutorService;.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;` @kind interface;
  #L4da96e.  v1:= temp @kind object;
  #L4da970.  call `c`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/c;.c:(Ljava/util/concurrent/Future;)V` @kind virtual;
  #L4da976.  return v0 @kind object;
  #L4da978.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4da97a.  v2.`io.reactivex.rxjava3.internal.schedulers.c.e` @type ^`java.lang.Thread` := v0 @kind object;
  #L4da97e.  call `onError`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4da984.  throw v1;
  catch `java.lang.Throwable` @[L4da956..L4da976] goto L4da978;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.schedulers.c` v2 @kind this, `java.util.concurrent.Future` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/c;.b:(Ljava/util/concurrent/Future;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4daa88.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4daa8c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4daa92.  v0:= temp @kind object;
  #L4daa94.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L4daa98.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.c.f` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L4daa9c.  if v0 != v1 then goto L4daabe;
  #L4daaa0.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.c.e` @type ^`java.lang.Thread` @kind object;
  #L4daaa4.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4daaaa.  v1:= temp @kind object;
  #L4daaac.  if v0 == v1 then goto L4daab4;
  #L4daab0.  v0:= 1I;
  #L4daab2.  goto L4daab6;
  #L4daab4.  v0:= 0I;
  #L4daab6.  call temp:= `cancel`(v3, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L4daabc.  return @kind void;
  #L4daabe.  v1:= v2.`io.reactivex.rxjava3.internal.schedulers.c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4daac2.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4daac8.  v0:= temp;
  #L4daaca.  if v0 == 0 then goto L4daa88;
  #L4daace.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.schedulers.c` v2 @kind this, `java.util.concurrent.Future` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/c;.c:(Ljava/util/concurrent/Future;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4daae0.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.c.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4daae4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4daaea.  v0:= temp @kind object;
  #L4daaec.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L4daaf0.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.c.f` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L4daaf4.  if v0 != v1 then goto L4dab16;
  #L4daaf8.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.c.e` @type ^`java.lang.Thread` @kind object;
  #L4daafc.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4dab02.  v1:= temp @kind object;
  #L4dab04.  if v0 == v1 then goto L4dab0c;
  #L4dab08.  v0:= 1I;
  #L4dab0a.  goto L4dab0e;
  #L4dab0c.  v0:= 0I;
  #L4dab0e.  call temp:= `cancel`(v3, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L4dab14.  return @kind void;
  #L4dab16.  v1:= v2.`io.reactivex.rxjava3.internal.schedulers.c.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4dab1a.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4dab20.  v0:= temp;
  #L4dab22.  if v0 == 0 then goto L4daae0;
  #L4dab26.  return @kind void;
}
procedure `java.lang.Object` `call`(`io.reactivex.rxjava3.internal.schedulers.c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/c;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L4da92c.  call temp:= `a`(v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/c;.a:()Ljava/lang/Void;` @kind virtual;
  #L4da932.  v0:= temp @kind object;
  #L4da934.  return v0 @kind object;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.schedulers.c` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4daa08.  v0:= v6.`io.reactivex.rxjava3.internal.schedulers.c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4daa0c.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.c.f` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L4daa10.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4daa16.  v0:= temp @kind object;
  #L4daa18.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L4daa1c.  v2:= 1I;
  #L4daa1e.  v3:= 0I;
  #L4daa20.  if v0 == 0 then goto L4daa44;
  #L4daa24.  if v0 == v1 then goto L4daa44;
  #L4daa28.  v4:= v6.`io.reactivex.rxjava3.internal.schedulers.c.e` @type ^`java.lang.Thread` @kind object;
  #L4daa2c.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4daa32.  v5:= temp @kind object;
  #L4daa34.  if v4 == v5 then goto L4daa3c;
  #L4daa38.  v4:= 1I;
  #L4daa3a.  goto L4daa3e;
  #L4daa3c.  v4:= 0I;
  #L4daa3e.  call temp:= `cancel`(v0, v4) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L4daa44.  v0:= v6.`io.reactivex.rxjava3.internal.schedulers.c.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4daa48.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4daa4e.  v0:= temp @kind object;
  #L4daa50.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L4daa54.  if v0 == 0 then goto L4daa76;
  #L4daa58.  if v0 == v1 then goto L4daa76;
  #L4daa5c.  v1:= v6.`io.reactivex.rxjava3.internal.schedulers.c.e` @type ^`java.lang.Thread` @kind object;
  #L4daa60.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4daa66.  v4:= temp @kind object;
  #L4daa68.  if v1 == v4 then goto L4daa6e;
  #L4daa6c.  goto L4daa70;
  #L4daa6e.  v2:= 0I;
  #L4daa70.  call temp:= `cancel`(v0, v2) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L4daa76.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.schedulers.c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4da900.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4da904.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4da90a.  v0:= temp @kind object;
  #L4da90c.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.c.f` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L4da910.  if v0 != v1 then goto L4da918;
  #L4da914.  v0:= 1I;
  #L4da916.  goto L4da91a;
  #L4da918.  v0:= 0I;
  #L4da91a.  return v0;
}
