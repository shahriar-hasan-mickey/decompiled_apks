record `io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReferenceArray` @kind class, `java.lang.Runnable` @kind interface, `java.util.concurrent.Callable` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `java.lang.Runnable` `io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.a` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.b` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.c` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.d` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.e` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/schedulers/ScheduledRunnable;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4db648.  v0:= new `java.lang.Object`;
  #L4db64c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4db652.  `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.b` @type ^`java.lang.Object` := v0 @kind object;
  #L4db656.  v0:= new `java.lang.Object`;
  #L4db65a.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4db660.  `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` := v0 @kind object;
  #L4db664.  v0:= new `java.lang.Object`;
  #L4db668.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4db66e.  `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.d` @type ^`java.lang.Object` := v0 @kind object;
  #L4db672.  v0:= new `java.lang.Object`;
  #L4db676.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4db67c.  `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.e` @type ^`java.lang.Object` := v0 @kind object;
  #L4db680.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable` v1 @kind this, `java.lang.Runnable` v2 @kind object, `io.reactivex.rxjava3.disposables.DisposableContainer` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/ScheduledRunnable;.<init>:(Ljava/lang/Runnable;Lio/reactivex/rxjava3/disposables/DisposableContainer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4db694.  v0:= 3I;
  #L4db696.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L4db69c.  v1.`io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.a` @type ^`java.lang.Runnable` := v2 @kind object;
  #L4db6a0.  v2:= 0I;
  #L4db6a2.  call `lazySet`(v1, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L4db6a8.  return @kind void;
}
procedure `java.lang.Object` `call`(`io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ScheduledRunnable;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4db62c.  call `run`(v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/ScheduledRunnable;.run:()V` @kind virtual;
  #L4db632.  v0:= 0I;
  #L4db634.  return v0 @kind object;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable` v7 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ScheduledRunnable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4db6bc.  v0:= 1I;
  #L4db6be.  call temp:= `get`(v7, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4db6c4.  v1:= temp @kind object;
  #L4db6c6.  v2:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.e` @type ^`java.lang.Object` @kind object;
  #L4db6ca.  v3:= 0I;
  #L4db6cc.  if v1 == v2 then goto L4db71e;
  #L4db6d0.  v2:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` @kind object;
  #L4db6d4.  if v1 == v2 then goto L4db71e;
  #L4db6d8.  v4:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.d` @type ^`java.lang.Object` @kind object;
  #L4db6dc.  if v1 != v4 then goto L4db6e2;
  #L4db6e0.  goto L4db71e;
  #L4db6e2.  v5:= 2I;
  #L4db6e4.  call temp:= `get`(v7, v5) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4db6ea.  v5:= temp @kind object;
  #L4db6ec.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4db6f2.  v6:= temp @kind object;
  #L4db6f4.  if v5 == v6 then goto L4db6fc;
  #L4db6f8.  v5:= 1I;
  #L4db6fa.  goto L4db6fe;
  #L4db6fc.  v5:= 0I;
  #L4db6fe.  if v5 == 0 then goto L4db704;
  #L4db702.  v2:= v4 @kind object;
  #L4db704.  call temp:= `compareAndSet`(v7, v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4db70a.  v0:= temp;
  #L4db70c.  if v0 == 0 then goto L4db6bc;
  #L4db710.  if v1 == 0 then goto L4db71e;
  #L4db714.  v1:= (`java.util.concurrent.Future`) v1 @kind object;
  #L4db718.  call temp:= `cancel`(v1, v5) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L4db71e.  call temp:= `get`(v7, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4db724.  v0:= temp @kind object;
  #L4db726.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.e` @type ^`java.lang.Object` @kind object;
  #L4db72a.  if v0 == v1 then goto L4db752;
  #L4db72e.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.b` @type ^`java.lang.Object` @kind object;
  #L4db732.  if v0 == v1 then goto L4db752;
  #L4db736.  if v0 != 0 then goto L4db73c;
  #L4db73a.  goto L4db752;
  #L4db73c.  call temp:= `compareAndSet`(v7, v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4db742.  v1:= temp;
  #L4db744.  if v1 == 0 then goto L4db71e;
  #L4db748.  v0:= (`io.reactivex.rxjava3.disposables.DisposableContainer`) v0 @kind object;
  #L4db74c.  call temp:= `delete`(v0, v7) @signature `Lio/reactivex/rxjava3/disposables/DisposableContainer;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind interface;
  #L4db752.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ScheduledRunnable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4db5fc.  v0:= 0I;
  #L4db5fe.  call temp:= `get`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4db604.  v1:= temp @kind object;
  #L4db606.  v2:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.b` @type ^`java.lang.Object` @kind object;
  #L4db60a.  if v1 == v2 then goto L4db616;
  #L4db60e.  v2:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.e` @type ^`java.lang.Object` @kind object;
  #L4db612.  if v1 != v2 then goto L4db618;
  #L4db616.  v0:= 1I;
  #L4db618.  return v0;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ScheduledRunnable;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4db764.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4db76a.  v0:= temp @kind object;
  #L4db76c.  v1:= 2I;
  #L4db76e.  call `lazySet`(v5, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L4db774.  v0:= 0I;
  #L4db776.  v2:= 1I;
  #L4db778.  v3:= 0I;
  #L4db77a.  v4:= v5.`io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.a` @type ^`java.lang.Runnable` @kind object;
  #L4db77e.  call `run`(v4) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L4db784.  call `lazySet`(v5, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L4db78a.  call temp:= `get`(v5, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4db790.  v0:= temp @kind object;
  #L4db792.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.b` @type ^`java.lang.Object` @kind object;
  #L4db796.  if v0 == v1 then goto L4db7b8;
  #L4db79a.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.e` @type ^`java.lang.Object` @kind object;
  #L4db79e.  call temp:= `compareAndSet`(v5, v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4db7a4.  v1:= temp;
  #L4db7a6.  if v1 == 0 then goto L4db7b8;
  #L4db7aa.  if v0 == 0 then goto L4db7b8;
  #L4db7ae.  v0:= (`io.reactivex.rxjava3.disposables.DisposableContainer`) v0 @kind object;
  #L4db7b2.  call temp:= `delete`(v0, v5) @signature `Lio/reactivex/rxjava3/disposables/DisposableContainer;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind interface;
  #L4db7b8.  call temp:= `get`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4db7be.  v0:= temp @kind object;
  #L4db7c0.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` @kind object;
  #L4db7c4.  if v0 == v1 then goto L4db7e0;
  #L4db7c8.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.d` @type ^`java.lang.Object` @kind object;
  #L4db7cc.  if v0 == v1 then goto L4db7e0;
  #L4db7d0.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.e` @type ^`java.lang.Object` @kind object;
  #L4db7d4.  call temp:= `compareAndSet`(v5, v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4db7da.  v0:= temp;
  #L4db7dc.  if v0 == 0 then goto L4db7b8;
  #L4db7e0.  return @kind void;
  #L4db7e2.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4db7e4.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4db7ea.  throw v4;
  #L4db7ec.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4db7ee.  call `lazySet`(v5, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L4db7f4.  call temp:= `get`(v5, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4db7fa.  v0:= temp @kind object;
  #L4db7fc.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.b` @type ^`java.lang.Object` @kind object;
  #L4db800.  if v0 == v1 then goto L4db822;
  #L4db804.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.e` @type ^`java.lang.Object` @kind object;
  #L4db808.  call temp:= `compareAndSet`(v5, v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4db80e.  v1:= temp;
  #L4db810.  if v1 == 0 then goto L4db822;
  #L4db814.  if v0 == 0 then goto L4db822;
  #L4db818.  v0:= (`io.reactivex.rxjava3.disposables.DisposableContainer`) v0 @kind object;
  #L4db81c.  call temp:= `delete`(v0, v5) @signature `Lio/reactivex/rxjava3/disposables/DisposableContainer;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind interface;
  #L4db822.  call temp:= `get`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4db828.  v0:= temp @kind object;
  #L4db82a.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` @kind object;
  #L4db82e.  if v0 == v1 then goto L4db84c;
  #L4db832.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.d` @type ^`java.lang.Object` @kind object;
  #L4db836.  if v0 == v1 then goto L4db84c;
  #L4db83a.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.e` @type ^`java.lang.Object` @kind object;
  #L4db83e.  call temp:= `compareAndSet`(v5, v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4db844.  v0:= temp;
  #L4db846.  if v0 != 0 then goto L4db84c;
  #L4db84a.  goto L4db822;
  #L4db84c.  throw v4;
  catch `java.lang.Throwable` @[L4db77a..L4db784] goto L4db7e2;
  catch `java.lang.Throwable` @[L4db7e4..L4db7ec] goto L4db7ec;
}
procedure `void` `setFuture`(`io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable` v3 @kind this, `java.util.concurrent.Future` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/ScheduledRunnable;.setFuture:(Ljava/util/concurrent/Future;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4db878.  v0:= 1I;
  #L4db87a.  call temp:= `get`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4db880.  v1:= temp @kind object;
  #L4db882.  v2:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.e` @type ^`java.lang.Object` @kind object;
  #L4db886.  if v1 != v2 then goto L4db88c;
  #L4db88a.  return @kind void;
  #L4db88c.  v2:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` @kind object;
  #L4db890.  if v1 != v2 then goto L4db89e;
  #L4db894.  v0:= 0I;
  #L4db896.  call temp:= `cancel`(v4, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L4db89c.  return @kind void;
  #L4db89e.  v2:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.d` @type ^`java.lang.Object` @kind object;
  #L4db8a2.  if v1 != v2 then goto L4db8ae;
  #L4db8a6.  call temp:= `cancel`(v4, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L4db8ac.  return @kind void;
  #L4db8ae.  call temp:= `compareAndSet`(v3, v0, v1, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4db8b4.  v0:= temp;
  #L4db8b6.  if v0 == 0 then goto L4db878;
  #L4db8ba.  return @kind void;
}
