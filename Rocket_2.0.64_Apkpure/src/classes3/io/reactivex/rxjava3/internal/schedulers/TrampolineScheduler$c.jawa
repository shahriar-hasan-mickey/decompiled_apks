record `io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.Scheduler$Worker` @kind class {
  `java.util.concurrent.PriorityBlockingQueue` `io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.b` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.d` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/TrampolineScheduler$c;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4dc708.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.<init>:()V` @kind direct;
  #L4dc70e.  v0:= new `java.util.concurrent.PriorityBlockingQueue`;
  #L4dc712.  call `<init>`(v0) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.<init>:()V` @kind direct;
  #L4dc718.  v1.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.a` @type ^`java.util.concurrent.PriorityBlockingQueue` := v0 @kind object;
  #L4dc71c.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4dc720.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4dc726.  v1.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.b` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L4dc72a.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4dc72e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4dc734.  v1.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.c` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L4dc738.  return @kind void;
}
procedure `io.reactivex.rxjava3.disposables.Disposable` `a`(`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c` v1 @kind this, `java.lang.Runnable` v2 @kind object, `long` v3 ) @signature `Lio/reactivex/rxjava3/internal/schedulers/TrampolineScheduler$c;.a:(Ljava/lang/Runnable;J)Lio/reactivex/rxjava3/disposables/Disposable;` @AccessFlag  {
    temp;
    v0;

  #L4dc5e0.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.d` @type ^`boolean` @kind boolean;
  #L4dc5e4.  if v0 == 0 then goto L4dc5ee;
  #L4dc5e8.  v2:= `@@io.reactivex.rxjava3.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.rxjava3.internal.disposables.EmptyDisposable` @kind object;
  #L4dc5ec.  return v2 @kind object;
  #L4dc5ee.  v0:= new `io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$b`;
  #L4dc5f2.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4dc5f8.  v3:= temp @kind object;
  #L4dc5fa.  v4:= v1.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4dc5fe.  call temp:= `incrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L4dc604.  v4:= temp;
  #L4dc606.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/rxjava3/internal/schedulers/TrampolineScheduler$b;.<init>:(Ljava/lang/Runnable;Ljava/lang/Long;I)V` @kind direct;
  #L4dc60c.  v2:= v1.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.a` @type ^`java.util.concurrent.PriorityBlockingQueue` @kind object;
  #L4dc610.  call temp:= `add`(v2, v0) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L4dc616.  v2:= v1.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4dc61a.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4dc620.  v2:= temp;
  #L4dc622.  if v2 != 0 then goto L4dc680;
  #L4dc626.  v2:= 1I;
  #L4dc628.  v3:= v1.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.d` @type ^`boolean` @kind boolean;
  #L4dc62c.  if v3 == 0 then goto L4dc640;
  #L4dc630.  v2:= v1.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.a` @type ^`java.util.concurrent.PriorityBlockingQueue` @kind object;
  #L4dc634.  call `clear`(v2) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.clear:()V` @kind virtual;
  #L4dc63a.  v2:= `@@io.reactivex.rxjava3.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.rxjava3.internal.disposables.EmptyDisposable` @kind object;
  #L4dc63e.  return v2 @kind object;
  #L4dc640.  v3:= v1.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.a` @type ^`java.util.concurrent.PriorityBlockingQueue` @kind object;
  #L4dc644.  call temp:= `poll`(v3) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4dc64a.  v3:= temp @kind object;
  #L4dc64c.  v3:= (`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$b`) v3 @kind object;
  #L4dc650.  if v3 != 0 then goto L4dc66c;
  #L4dc654.  v3:= v1.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4dc658.  v2:= -v2 @kind int;
  #L4dc65a.  call temp:= `addAndGet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4dc660.  v2:= temp;
  #L4dc662.  if v2 != 0 then goto L4dc628;
  #L4dc666.  v2:= `@@io.reactivex.rxjava3.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.rxjava3.internal.disposables.EmptyDisposable` @kind object;
  #L4dc66a.  return v2 @kind object;
  #L4dc66c.  v4:= v3.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$b.d` @type ^`boolean` @kind boolean;
  #L4dc670.  if v4 != 0 then goto L4dc628;
  #L4dc674.  v3:= v3.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$b.a` @type ^`java.lang.Runnable` @kind object;
  #L4dc678.  call `run`(v3) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L4dc67e.  goto L4dc628;
  #L4dc680.  v2:= new `io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c$a`;
  #L4dc684.  call `<init>`(v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/TrampolineScheduler$c$a;.<init>:(Lio/reactivex/rxjava3/internal/schedulers/TrampolineScheduler$c;Lio/reactivex/rxjava3/internal/schedulers/TrampolineScheduler$b;)V` @kind direct;
  #L4dc68a.  call temp:= `g`(v2) @signature `Ls0/d;.g:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind static;
  #L4dc690.  v2:= temp @kind object;
  #L4dc692.  return v2 @kind object;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/TrampolineScheduler$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dc74c.  v0:= 1I;
  #L4dc74e.  v1.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.d` @type ^`boolean` := v0 @kind boolean;
  #L4dc752.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/TrampolineScheduler$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dc5c8.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.d` @type ^`boolean` @kind boolean;
  #L4dc5cc.  return v0;
}
procedure `io.reactivex.rxjava3.disposables.Disposable` `schedule`(`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c` v2 @kind this, `java.lang.Runnable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/TrampolineScheduler$c;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dc6a4.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4dc6a8.  call temp:= `now`(v2, v0) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4dc6ae.  v0:= temp @kind wide;
  #L4dc6b0.  call temp:= `a`(v2, v3, v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/TrampolineScheduler$c;.a:(Ljava/lang/Runnable;J)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4dc6b6.  v3:= temp @kind object;
  #L4dc6b8.  return v3 @kind object;
}
procedure `io.reactivex.rxjava3.disposables.Disposable` `schedule`(`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c` v2 @kind this, `java.lang.Runnable` v3 @kind object, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/TrampolineScheduler$c;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dc6cc.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4dc6d0.  call temp:= `now`(v2, v0) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4dc6d6.  v0:= temp @kind wide;
  #L4dc6d8.  call temp:= `toMillis`(v6, v4) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L4dc6de.  v4:= temp @kind wide;
  #L4dc6e0.  v0:= v0 + v4 @kind long;
  #L4dc6e2.  v4:= new `io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$a`;
  #L4dc6e6.  call `<init>`(v4, v3, v2, v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/TrampolineScheduler$a;.<init>:(Ljava/lang/Runnable;Lio/reactivex/rxjava3/internal/schedulers/TrampolineScheduler$c;J)V` @kind direct;
  #L4dc6ec.  call temp:= `a`(v2, v4, v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/TrampolineScheduler$c;.a:(Ljava/lang/Runnable;J)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4dc6f2.  v3:= temp @kind object;
  #L4dc6f4.  return v3 @kind object;
}
