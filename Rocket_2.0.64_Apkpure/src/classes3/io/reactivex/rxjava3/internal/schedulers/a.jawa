record `io.reactivex.rxjava3.internal.schedulers.a` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `io.reactivex.rxjava3.schedulers.SchedulerRunnableIntrospection` @kind interface {
  `java.lang.Runnable` `io.reactivex.rxjava3.internal.schedulers.a.runnable` @AccessFlag PROTECTED_FINAL;
  `java.lang.Thread` `io.reactivex.rxjava3.internal.schedulers.a.runner` @AccessFlag PROTECTED;
}
global `java.util.concurrent.FutureTask` `@@io.reactivex.rxjava3.internal.schedulers.a.DISPOSED` @AccessFlag PROTECTED_STATIC_FINAL;
global `java.util.concurrent.FutureTask` `@@io.reactivex.rxjava3.internal.schedulers.a.FINISHED` @AccessFlag PROTECTED_STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.schedulers.a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/schedulers/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L4d97cc.  v0:= new `java.util.concurrent.FutureTask`;
  #L4d97d0.  v1:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_RUNNABLE` @type ^`java.lang.Runnable` @kind object;
  #L4d97d4.  v2:= 0I;
  #L4d97d6.  call `<init>`(v0, v1, v2) @signature `Ljava/util/concurrent/FutureTask;.<init>:(Ljava/lang/Runnable;Ljava/lang/Object;)V` @kind direct;
  #L4d97dc.  `@@io.reactivex.rxjava3.internal.schedulers.a.FINISHED` @type ^`java.util.concurrent.FutureTask` := v0 @kind object;
  #L4d97e0.  v0:= new `java.util.concurrent.FutureTask`;
  #L4d97e4.  call `<init>`(v0, v1, v2) @signature `Ljava/util/concurrent/FutureTask;.<init>:(Ljava/lang/Runnable;Ljava/lang/Object;)V` @kind direct;
  #L4d97ea.  `@@io.reactivex.rxjava3.internal.schedulers.a.DISPOSED` @type ^`java.util.concurrent.FutureTask` := v0 @kind object;
  #L4d97ee.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.a` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/a;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d9800.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4d9806.  v0.`io.reactivex.rxjava3.internal.schedulers.a.runnable` @type ^`java.lang.Runnable` := v1 @kind object;
  #L4d980a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.schedulers.a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/a;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4d981c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d9822.  v0:= temp @kind object;
  #L4d9824.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L4d9828.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.a.FINISHED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L4d982c.  if v0 == v1 then goto L4d9864;
  #L4d9830.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.a.DISPOSED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L4d9834.  if v0 == v1 then goto L4d9864;
  #L4d9838.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4d983e.  v1:= temp;
  #L4d9840.  if v1 == 0 then goto L4d9864;
  #L4d9844.  if v0 == 0 then goto L4d9864;
  #L4d9848.  v1:= v3.`io.reactivex.rxjava3.internal.schedulers.a.runner` @type ^`java.lang.Thread` @kind object;
  #L4d984c.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4d9852.  v2:= temp @kind object;
  #L4d9854.  if v1 == v2 then goto L4d985c;
  #L4d9858.  v1:= 1I;
  #L4d985a.  goto L4d985e;
  #L4d985c.  v1:= 0I;
  #L4d985e.  call temp:= `cancel`(v0, v1) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L4d9864.  return @kind void;
}
procedure `java.lang.Runnable` `getWrappedRunnable`(`io.reactivex.rxjava3.internal.schedulers.a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/a;.getWrappedRunnable:()Ljava/lang/Runnable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d97b4.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.a.runnable` @type ^`java.lang.Runnable` @kind object;
  #L4d97b8.  return v0 @kind object;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.schedulers.a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/a;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4d977c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d9782.  v0:= temp @kind object;
  #L4d9784.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L4d9788.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.a.FINISHED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L4d978c.  if v0 == v1 then goto L4d979e;
  #L4d9790.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.a.DISPOSED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L4d9794.  if v0 != v1 then goto L4d979a;
  #L4d9798.  goto L4d979e;
  #L4d979a.  v0:= 0I;
  #L4d979c.  goto L4d97a0;
  #L4d979e.  v0:= 1I;
  #L4d97a0.  return v0;
}
procedure `void` `setFuture`(`io.reactivex.rxjava3.internal.schedulers.a` v2 @kind this, `java.util.concurrent.Future` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/a;.setFuture:(Ljava/util/concurrent/Future;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4d9878.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d987e.  v0:= temp @kind object;
  #L4d9880.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L4d9884.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.a.FINISHED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L4d9888.  if v0 != v1 then goto L4d988e;
  #L4d988c.  goto L4d98c0;
  #L4d988e.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.a.DISPOSED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L4d9892.  if v0 != v1 then goto L4d98b4;
  #L4d9896.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.a.runner` @type ^`java.lang.Thread` @kind object;
  #L4d989a.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4d98a0.  v1:= temp @kind object;
  #L4d98a2.  if v0 == v1 then goto L4d98aa;
  #L4d98a6.  v0:= 1I;
  #L4d98a8.  goto L4d98ac;
  #L4d98aa.  v0:= 0I;
  #L4d98ac.  call temp:= `cancel`(v3, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L4d98b2.  goto L4d98c0;
  #L4d98b4.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4d98ba.  v0:= temp;
  #L4d98bc.  if v0 == 0 then goto L4d9878;
  #L4d98c0.  return @kind void;
}
