record `io.reactivex.rxjava3.internal.schedulers.SchedulerWhen$f` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.SchedulerWhen$f` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerWhen$f;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4dbe84.  v0:= `@@io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.e` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4dbe88.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4dbe8e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.schedulers.SchedulerWhen$f` v2 @kind this, `io.reactivex.rxjava3.core.Scheduler$Worker` v3 @kind object, `io.reactivex.rxjava3.core.CompletableObserver` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerWhen$f;.a:(Lio/reactivex/rxjava3/core/Scheduler$Worker;Lio/reactivex/rxjava3/core/CompletableObserver;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4dbea0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4dbea6.  v0:= temp @kind object;
  #L4dbea8.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4dbeac.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4dbeb0.  if v0 != v1 then goto L4dbeb6;
  #L4dbeb4.  return @kind void;
  #L4dbeb6.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.e` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4dbeba.  if v0 == v1 then goto L4dbec0;
  #L4dbebe.  return @kind void;
  #L4dbec0.  call temp:= `b`(v2, v3, v4) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerWhen$f;.b:(Lio/reactivex/rxjava3/core/Scheduler$Worker;Lio/reactivex/rxjava3/core/CompletableObserver;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4dbec6.  v3:= temp @kind object;
  #L4dbec8.  call temp:= `compareAndSet`(v2, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4dbece.  v4:= temp;
  #L4dbed0.  if v4 != 0 then goto L4dbeda;
  #L4dbed4.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4dbeda.  return @kind void;
}
procedure `io.reactivex.rxjava3.disposables.Disposable` `b`(`io.reactivex.rxjava3.core.Scheduler$Worker` v0 @kind object, `io.reactivex.rxjava3.core.CompletableObserver` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerWhen$f;.b:(Lio/reactivex/rxjava3/core/Scheduler$Worker;Lio/reactivex/rxjava3/core/CompletableObserver;)Lio/reactivex/rxjava3/disposables/Disposable;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.schedulers.SchedulerWhen$f` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerWhen$f;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dbeec.  v0:= `@@io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4dbef0.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4dbef6.  v0:= temp @kind object;
  #L4dbef8.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4dbefc.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4dbf02.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.schedulers.SchedulerWhen$f` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerWhen$f;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dbe5c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4dbe62.  v0:= temp @kind object;
  #L4dbe64.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4dbe68.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4dbe6e.  v0:= temp;
  #L4dbe70.  return v0;
}
