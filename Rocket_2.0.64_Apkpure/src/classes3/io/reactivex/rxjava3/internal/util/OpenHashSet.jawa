record `io.reactivex.rxjava3.internal.util.OpenHashSet` @kind class @AccessFlag PUBLIC_FINAL {
  `float` `io.reactivex.rxjava3.internal.util.OpenHashSet.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.util.OpenHashSet.b` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.util.OpenHashSet.c` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.util.OpenHashSet.d` @AccessFlag ;
  `java.lang.Object`[] `io.reactivex.rxjava3.internal.util.OpenHashSet.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.util.OpenHashSet` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4e10a4.  v0:= 16I;
  #L4e10a8.  v1:= 0.75F;
  #L4e10ac.  call `<init>`(v2, v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.<init>:(IF)V` @kind direct;
  #L4e10b2.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.util.OpenHashSet` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4e10c4.  v0:= 0.75F;
  #L4e10c8.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.<init>:(IF)V` @kind direct;
  #L4e10ce.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.util.OpenHashSet` v1 @kind this, `int` v2 , `float` v3 ) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.<init>:(IF)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4e10e0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4e10e6.  v1.`io.reactivex.rxjava3.internal.util.OpenHashSet.a` @type ^`float` := v3;
  #L4e10ea.  call temp:= `roundToPowerOfTwo`(v2) @signature `Lio/reactivex/rxjava3/internal/util/Pow2;.roundToPowerOfTwo:(I)I` @kind static;
  #L4e10f0.  v2:= temp;
  #L4e10f2.  v0:= v2 + -1;
  #L4e10f6.  v1.`io.reactivex.rxjava3.internal.util.OpenHashSet.b` @type ^`int` := v0;
  #L4e10fa.  v0:= (`float`) v2 @kind i2f;
  #L4e10fc.  v3:= v3 * v0 @kind float;
  #L4e1100.  v3:= (`int`) v3 @kind f2i;
  #L4e1102.  v1.`io.reactivex.rxjava3.internal.util.OpenHashSet.d` @type ^`int` := v3;
  #L4e1106.  v2:= new `java.lang.Object`[v2];
  #L4e110a.  v1.`io.reactivex.rxjava3.internal.util.OpenHashSet.e` @type ^`java.lang.Object`[] := v2 @kind object;
  #L4e110e.  return @kind void;
}
procedure `int` `a`(`int` v1 ) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.a:(I)I` @AccessFlag STATIC {
    temp;
    v0;

  #L4e1050.  v0:= -1640531527I;
  #L4e1056.  v1:= v1 * v0 @kind int;
  #L4e105a.  v0:= v1 ^>> 16;
  #L4e105e.  v1:= v1 ^~ v0 @kind int;
  #L4e1060.  return v1;
}
procedure `boolean` `add`(`io.reactivex.rxjava3.internal.util.OpenHashSet` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4e0ef4.  v0:= v6.`io.reactivex.rxjava3.internal.util.OpenHashSet.e` @type ^`java.lang.Object`[] @kind object;
  #L4e0ef8.  v1:= v6.`io.reactivex.rxjava3.internal.util.OpenHashSet.b` @type ^`int`;
  #L4e0efc.  call temp:= `hashCode`(v7) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L4e0f02.  v2:= temp;
  #L4e0f04.  call temp:= `a`(v2) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.a:(I)I` @kind static;
  #L4e0f0a.  v2:= temp;
  #L4e0f0c.  v2:= v2 ^& v1 @kind int;
  #L4e0f0e.  v3:= v0[v2] @kind object;
  #L4e0f12.  v4:= 1I;
  #L4e0f14.  if v3 == 0 then goto L4e0f44;
  #L4e0f18.  call temp:= `equals`(v3, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4e0f1e.  v3:= temp;
  #L4e0f20.  v5:= 0I;
  #L4e0f22.  if v3 == 0 then goto L4e0f28;
  #L4e0f26.  return v5;
  #L4e0f28.  v2:= v2 + v4 @kind int;
  #L4e0f2a.  v2:= v2 ^& v1 @kind int;
  #L4e0f2c.  v3:= v0[v2] @kind object;
  #L4e0f30.  if v3 != 0 then goto L4e0f36;
  #L4e0f34.  goto L4e0f44;
  #L4e0f36.  call temp:= `equals`(v3, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4e0f3c.  v3:= temp;
  #L4e0f3e.  if v3 == 0 then goto L4e0f28;
  #L4e0f42.  return v5;
  #L4e0f44.  v0[v2]:= v7 @kind object;
  #L4e0f48.  v7:= v6.`io.reactivex.rxjava3.internal.util.OpenHashSet.c` @type ^`int`;
  #L4e0f4c.  v7:= v7 + v4 @kind int;
  #L4e0f4e.  v6.`io.reactivex.rxjava3.internal.util.OpenHashSet.c` @type ^`int` := v7;
  #L4e0f52.  v0:= v6.`io.reactivex.rxjava3.internal.util.OpenHashSet.d` @type ^`int`;
  #L4e0f56.  if v7 < v0 then goto L4e0f60;
  #L4e0f5a.  call `b`(v6) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.b:()V` @kind virtual;
  #L4e0f60.  return v4;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.util.OpenHashSet` v8 @kind this) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4e1120.  v0:= v8.`io.reactivex.rxjava3.internal.util.OpenHashSet.e` @type ^`java.lang.Object`[] @kind object;
  #L4e1124.  v1:= length @variable v0;
  #L4e1126.  v2:= v1 ^< 1;
  #L4e112a.  v3:= v2 + -1;
  #L4e112e.  v4:= new `java.lang.Object`[v2];
  #L4e1132.  v5:= v8.`io.reactivex.rxjava3.internal.util.OpenHashSet.c` @type ^`int`;
  #L4e1136.  v6:= v5 + -1;
  #L4e113a.  if v5 == 0 then goto L4e1184;
  #L4e113e.  v1:= v1 + -1;
  #L4e1142.  v5:= v0[v1] @kind object;
  #L4e1146.  if v5 != 0 then goto L4e114c;
  #L4e114a.  goto L4e113e;
  #L4e114c.  v5:= v0[v1] @kind object;
  #L4e1150.  call temp:= `hashCode`(v5) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L4e1156.  v5:= temp;
  #L4e1158.  call temp:= `a`(v5) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.a:(I)I` @kind static;
  #L4e115e.  v5:= temp;
  #L4e1160.  v5:= v5 ^& v3 @kind int;
  #L4e1162.  v7:= v4[v5] @kind object;
  #L4e1166.  if v7 == 0 then goto L4e1178;
  #L4e116a.  v5:= v5 + 1;
  #L4e116e.  v5:= v5 ^& v3 @kind int;
  #L4e1170.  v7:= v4[v5] @kind object;
  #L4e1174.  if v7 != 0 then goto L4e116a;
  #L4e1178.  v7:= v0[v1] @kind object;
  #L4e117c.  v4[v5]:= v7 @kind object;
  #L4e1180.  v5:= v6;
  #L4e1182.  goto L4e1136;
  #L4e1184.  v8.`io.reactivex.rxjava3.internal.util.OpenHashSet.b` @type ^`int` := v3;
  #L4e1188.  v0:= (`float`) v2 @kind i2f;
  #L4e118a.  v1:= v8.`io.reactivex.rxjava3.internal.util.OpenHashSet.a` @type ^`float`;
  #L4e118e.  v0:= v0 * v1 @kind float;
  #L4e1192.  v0:= (`int`) v0 @kind f2i;
  #L4e1194.  v8.`io.reactivex.rxjava3.internal.util.OpenHashSet.d` @type ^`int` := v0;
  #L4e1198.  v8.`io.reactivex.rxjava3.internal.util.OpenHashSet.e` @type ^`java.lang.Object`[] := v4 @kind object;
  #L4e119c.  return @kind void;
}
procedure `boolean` `c`(`io.reactivex.rxjava3.internal.util.OpenHashSet` v4 @kind this, `int` v5 , `java.lang.Object`[] v6 @kind object, `int` v7 ) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.c:(I[Ljava/lang/Object;I)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4e0fe8.  v0:= v4.`io.reactivex.rxjava3.internal.util.OpenHashSet.c` @type ^`int`;
  #L4e0fec.  v1:= 1I;
  #L4e0fee.  v0:= v0 - v1 @kind int;
  #L4e0ff0.  v4.`io.reactivex.rxjava3.internal.util.OpenHashSet.c` @type ^`int` := v0;
  #L4e0ff4.  v0:= v5 + 1;
  #L4e0ff8.  v0:= v0 ^& v7 @kind int;
  #L4e0ffa.  v2:= v6[v0] @kind object;
  #L4e0ffe.  if v2 != 0 then goto L4e100a;
  #L4e1002.  v7:= 0I;
  #L4e1004.  v6[v5]:= v7 @kind object;
  #L4e1008.  return v1;
  #L4e100a.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L4e1010.  v3:= temp;
  #L4e1012.  call temp:= `a`(v3) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.a:(I)I` @kind static;
  #L4e1018.  v3:= temp;
  #L4e101a.  v3:= v3 ^& v7 @kind int;
  #L4e101c.  if v5 > v0 then goto L4e102a;
  #L4e1020.  if v5 >= v3 then goto L4e1032;
  #L4e1024.  if v3 <= v0 then goto L4e103a;
  #L4e1028.  goto L4e1032;
  #L4e102a.  if v5 < v3 then goto L4e103a;
  #L4e102e.  if v3 <= v0 then goto L4e103a;
  #L4e1032.  v6[v5]:= v2 @kind object;
  #L4e1036.  v5:= v0;
  #L4e1038.  goto L4e0ff4;
  #L4e103a.  v0:= v0 + 1;
  #L4e103e.  goto L4e0ff8;
}
procedure `java.lang.Object`[] `keys`(`io.reactivex.rxjava3.internal.util.OpenHashSet` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.keys:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e108c.  v0:= v1.`io.reactivex.rxjava3.internal.util.OpenHashSet.e` @type ^`java.lang.Object`[] @kind object;
  #L4e1090.  return v0 @kind object;
}
procedure `boolean` `remove`(`io.reactivex.rxjava3.internal.util.OpenHashSet` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4e0f74.  v0:= v5.`io.reactivex.rxjava3.internal.util.OpenHashSet.e` @type ^`java.lang.Object`[] @kind object;
  #L4e0f78.  v1:= v5.`io.reactivex.rxjava3.internal.util.OpenHashSet.b` @type ^`int`;
  #L4e0f7c.  call temp:= `hashCode`(v6) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L4e0f82.  v2:= temp;
  #L4e0f84.  call temp:= `a`(v2) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.a:(I)I` @kind static;
  #L4e0f8a.  v2:= temp;
  #L4e0f8c.  v2:= v2 ^& v1 @kind int;
  #L4e0f8e.  v3:= v0[v2] @kind object;
  #L4e0f92.  v4:= 0I;
  #L4e0f94.  if v3 != 0 then goto L4e0f9a;
  #L4e0f98.  return v4;
  #L4e0f9a.  call temp:= `equals`(v3, v6) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4e0fa0.  v3:= temp;
  #L4e0fa2.  if v3 == 0 then goto L4e0fb0;
  #L4e0fa6.  call temp:= `c`(v5, v2, v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.c:(I[Ljava/lang/Object;I)Z` @kind virtual;
  #L4e0fac.  v6:= temp;
  #L4e0fae.  return v6;
  #L4e0fb0.  v2:= v2 + 1;
  #L4e0fb4.  v2:= v2 ^& v1 @kind int;
  #L4e0fb6.  v3:= v0[v2] @kind object;
  #L4e0fba.  if v3 != 0 then goto L4e0fc0;
  #L4e0fbe.  return v4;
  #L4e0fc0.  call temp:= `equals`(v3, v6) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4e0fc6.  v3:= temp;
  #L4e0fc8.  if v3 == 0 then goto L4e0fb0;
  #L4e0fcc.  call temp:= `c`(v5, v2, v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.c:(I[Ljava/lang/Object;I)Z` @kind virtual;
  #L4e0fd2.  v6:= temp;
  #L4e0fd4.  return v6;
}
procedure `int` `size`(`io.reactivex.rxjava3.internal.util.OpenHashSet` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e1074.  v0:= v1.`io.reactivex.rxjava3.internal.util.OpenHashSet.c` @type ^`int`;
  #L4e1078.  return v0;
}
