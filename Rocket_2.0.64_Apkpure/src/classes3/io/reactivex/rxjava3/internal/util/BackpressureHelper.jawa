record `io.reactivex.rxjava3.internal.util.BackpressureHelper` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.util.BackpressureHelper` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4dfbbc.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4dfbc2.  v0:= new `java.lang.IllegalStateException`;
  #L4dfbc6.  v1:= "No instances!" @kind object;
  #L4dfbca.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4dfbd0.  throw v0;
}
procedure `long` `add`(`java.util.concurrent.atomic.AtomicLong` v5 @kind object, `long` v6 ) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4df9ac.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4df9b2.  v0:= temp @kind wide;
  #L4df9b4.  v2:= 9223372036854775807L;
  #L4df9be.  v4:= lcmp(v0, v2);
  #L4df9c2.  if v4 != 0 then goto L4df9c8;
  #L4df9c6.  return v2 @kind wide;
  #L4df9c8.  call temp:= `addCap`(v0, v6) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L4df9ce.  v2:= temp @kind wide;
  #L4df9d0.  call temp:= `compareAndSet`(v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4df9d6.  v2:= temp;
  #L4df9d8.  if v2 == 0 then goto L4df9ac;
  #L4df9dc.  return v0 @kind wide;
}
procedure `long` `addCancel`(`java.util.concurrent.atomic.AtomicLong` v5 @kind object, `long` v6 ) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4df9f0.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4df9f6.  v0:= temp @kind wide;
  #L4df9f8.  v2:= -9223372036854775808L;
  #L4df9fc.  v4:= lcmp(v0, v2);
  #L4dfa00.  if v4 != 0 then goto L4dfa06;
  #L4dfa04.  return v2 @kind wide;
  #L4dfa06.  v2:= 9223372036854775807L;
  #L4dfa10.  v4:= lcmp(v0, v2);
  #L4dfa14.  if v4 != 0 then goto L4dfa1a;
  #L4dfa18.  return v2 @kind wide;
  #L4dfa1a.  call temp:= `addCap`(v0, v6) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L4dfa20.  v2:= temp @kind wide;
  #L4dfa22.  call temp:= `compareAndSet`(v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4dfa28.  v2:= temp;
  #L4dfa2a.  if v2 == 0 then goto L4df9f0;
  #L4dfa2e.  return v0 @kind wide;
}
procedure `long` `addCap`(`long` v1 , `long` v3 ) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCap:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4dfa40.  v1:= v1 + v3 @kind long;
  #L4dfa42.  v3:= 0L;
  #L4dfa46.  v0:= lcmp(v1, v3);
  #L4dfa4a.  if v0 >= 0 then goto L4dfa58;
  #L4dfa4e.  v1:= 9223372036854775807L;
  #L4dfa58.  return v1 @kind wide;
}
procedure `long` `multiplyCap`(`long` v7 , `long` v9 ) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4dfa6c.  v0:= v7 * v9 @kind long;
  #L4dfa70.  v2:= v7 ^| v9 @kind long;
  #L4dfa74.  v4:= 31I;
  #L4dfa78.  v2:= v2 ^>> v4 @kind long;
  #L4dfa7a.  v4:= 0L;
  #L4dfa7e.  v6:= lcmp(v2, v4);
  #L4dfa82.  if v6 == 0 then goto L4dfa9e;
  #L4dfa86.  v7:= v0 / v7 @kind long;
  #L4dfa8a.  v2:= lcmp(v7, v9);
  #L4dfa8e.  if v2 == 0 then goto L4dfa9e;
  #L4dfa92.  v7:= 9223372036854775807L;
  #L4dfa9c.  return v7 @kind wide;
  #L4dfa9e.  return v0 @kind wide;
}
procedure `long` `produced`(`java.util.concurrent.atomic.AtomicLong` v9 @kind object, `long` v10 ) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4dfab0.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4dfab6.  v0:= temp @kind wide;
  #L4dfab8.  v2:= 9223372036854775807L;
  #L4dfac2.  v4:= lcmp(v0, v2);
  #L4dfac6.  if v4 != 0 then goto L4dfacc;
  #L4dfaca.  return v2 @kind wide;
  #L4dfacc.  v2:= v0 - v10 @kind long;
  #L4dfad0.  v4:= 0L;
  #L4dfad4.  v6:= lcmp(v2, v4);
  #L4dfad8.  if v6 >= 0 then goto L4dfb10;
  #L4dfadc.  v6:= new `java.lang.IllegalStateException`;
  #L4dfae0.  v7:= new `java.lang.StringBuilder`;
  #L4dfae4.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4dfaea.  v8:= "More produced than requested: " @kind object;
  #L4dfaee.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4dfaf4.  call temp:= `append`(v7, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4dfafa.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4dfb00.  v2:= temp @kind object;
  #L4dfb02.  call `<init>`(v6, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4dfb08.  call `onError`(v6) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4dfb0e.  v2:= v4 @kind wide;
  #L4dfb10.  call temp:= `compareAndSet`(v9, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4dfb16.  v0:= temp;
  #L4dfb18.  if v0 == 0 then goto L4dfab0;
  #L4dfb1c.  return v2 @kind wide;
}
procedure `long` `producedCancel`(`java.util.concurrent.atomic.AtomicLong` v9 @kind object, `long` v10 ) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.producedCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4dfb30.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4dfb36.  v0:= temp @kind wide;
  #L4dfb38.  v2:= -9223372036854775808L;
  #L4dfb3c.  v4:= lcmp(v0, v2);
  #L4dfb40.  if v4 != 0 then goto L4dfb46;
  #L4dfb44.  return v2 @kind wide;
  #L4dfb46.  v2:= 9223372036854775807L;
  #L4dfb50.  v4:= lcmp(v0, v2);
  #L4dfb54.  if v4 != 0 then goto L4dfb5a;
  #L4dfb58.  return v2 @kind wide;
  #L4dfb5a.  v2:= v0 - v10 @kind long;
  #L4dfb5e.  v4:= 0L;
  #L4dfb62.  v6:= lcmp(v2, v4);
  #L4dfb66.  if v6 >= 0 then goto L4dfb9e;
  #L4dfb6a.  v6:= new `java.lang.IllegalStateException`;
  #L4dfb6e.  v7:= new `java.lang.StringBuilder`;
  #L4dfb72.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4dfb78.  v8:= "More produced than requested: " @kind object;
  #L4dfb7c.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4dfb82.  call temp:= `append`(v7, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4dfb88.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4dfb8e.  v2:= temp @kind object;
  #L4dfb90.  call `<init>`(v6, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4dfb96.  call `onError`(v6) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4dfb9c.  v2:= v4 @kind wide;
  #L4dfb9e.  call temp:= `compareAndSet`(v9, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4dfba4.  v0:= temp;
  #L4dfba6.  if v0 == 0 then goto L4dfb30;
  #L4dfbaa.  return v2 @kind wide;
}
