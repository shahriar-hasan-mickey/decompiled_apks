record `io.reactivex.rxjava3.internal.util.ObservableQueueDrain` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
procedure `void` `accept`(`io.reactivex.rxjava3.core.Observer` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/util/ObservableQueueDrain;.accept:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `cancelled`() @signature `Lio/reactivex/rxjava3/internal/util/ObservableQueueDrain;.cancelled:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `done`() @signature `Lio/reactivex/rxjava3/internal/util/ObservableQueueDrain;.done:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `enter`() @signature `Lio/reactivex/rxjava3/internal/util/ObservableQueueDrain;.enter:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Throwable` `error`() @signature `Lio/reactivex/rxjava3/internal/util/ObservableQueueDrain;.error:()Ljava/lang/Throwable;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `leave`(`int` v0 ) @signature `Lio/reactivex/rxjava3/internal/util/ObservableQueueDrain;.leave:(I)I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
