record `io.reactivex.rxjava3.internal.util.HalfSerializer` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.util.HalfSerializer` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4e04cc.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4e04d2.  v0:= new `java.lang.IllegalStateException`;
  #L4e04d6.  v1:= "No instances!" @kind object;
  #L4e04da.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e04e0.  throw v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.core.Observer` v0 @kind object, `java.util.concurrent.atomic.AtomicInteger` v1 @kind object, `io.reactivex.rxjava3.internal.util.AtomicThrowable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/rxjava3/core/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4e04f4.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4e04fa.  v1:= temp;
  #L4e04fc.  if v1 != 0 then goto L4e0506;
  #L4e0500.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4e0506.  return @kind void;
}
procedure `void` `onComplete`(`org.reactivestreams.Subscriber` v0 @kind object, `java.util.concurrent.atomic.AtomicInteger` v1 @kind object, `io.reactivex.rxjava3.internal.util.AtomicThrowable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4e0518.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4e051e.  v1:= temp;
  #L4e0520.  if v1 != 0 then goto L4e052a;
  #L4e0524.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4e052a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.core.Observer` v0 @kind object, `java.lang.Throwable` v1 @kind object, `java.util.concurrent.atomic.AtomicInteger` v2 @kind object, `io.reactivex.rxjava3.internal.util.AtomicThrowable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onError:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4e053c.  call temp:= `tryAddThrowableOrReport`(v3, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e0542.  v1:= temp;
  #L4e0544.  if v1 == 0 then goto L4e055a;
  #L4e0548.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4e054e.  v1:= temp;
  #L4e0550.  if v1 != 0 then goto L4e055a;
  #L4e0554.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4e055a.  return @kind void;
}
procedure `void` `onError`(`org.reactivestreams.Subscriber` v0 @kind object, `java.lang.Throwable` v1 @kind object, `java.util.concurrent.atomic.AtomicInteger` v2 @kind object, `io.reactivex.rxjava3.internal.util.AtomicThrowable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4e056c.  call temp:= `tryAddThrowableOrReport`(v3, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e0572.  v1:= temp;
  #L4e0574.  if v1 == 0 then goto L4e058a;
  #L4e0578.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4e057e.  v1:= temp;
  #L4e0580.  if v1 != 0 then goto L4e058a;
  #L4e0584.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4e058a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.core.Observer` v2 @kind object, `java.lang.Object` v3 @kind object, `java.util.concurrent.atomic.AtomicInteger` v4 @kind object, `io.reactivex.rxjava3.internal.util.AtomicThrowable` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onNext:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4e059c.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4e05a2.  v0:= temp;
  #L4e05a4.  if v0 != 0 then goto L4e05d0;
  #L4e05a8.  v0:= 0I;
  #L4e05aa.  v1:= 1I;
  #L4e05ac.  call temp:= `compareAndSet`(v4, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4e05b2.  v0:= temp;
  #L4e05b4.  if v0 == 0 then goto L4e05d0;
  #L4e05b8.  call `onNext`(v2, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4e05be.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4e05c4.  v3:= temp;
  #L4e05c6.  if v3 == 0 then goto L4e05d0;
  #L4e05ca.  call `tryTerminateConsumer`(v5, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4e05d0.  return @kind void;
}
procedure `boolean` `onNext`(`org.reactivestreams.Subscriber` v3 @kind object, `java.lang.Object` v4 @kind object, `java.util.concurrent.atomic.AtomicInteger` v5 @kind object, `io.reactivex.rxjava3.internal.util.AtomicThrowable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onNext:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4e0484.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4e048a.  v0:= temp;
  #L4e048c.  v1:= 0I;
  #L4e048e.  if v0 != 0 then goto L4e04ba;
  #L4e0492.  v0:= 1I;
  #L4e0494.  call temp:= `compareAndSet`(v5, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4e049a.  v2:= temp;
  #L4e049c.  if v2 == 0 then goto L4e04ba;
  #L4e04a0.  call `onNext`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4e04a6.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4e04ac.  v4:= temp;
  #L4e04ae.  if v4 != 0 then goto L4e04b4;
  #L4e04b2.  return v0;
  #L4e04b4.  call `tryTerminateConsumer`(v6, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4e04ba.  return v1;
}
