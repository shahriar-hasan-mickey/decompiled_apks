record `io.reactivex.rxjava3.internal.util.EndConsumerHelper` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.util.EndConsumerHelper` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/util/EndConsumerHelper;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4e00ac.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4e00b2.  v0:= new `java.lang.IllegalStateException`;
  #L4e00b6.  v1:= "No instances!" @kind object;
  #L4e00ba.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e00c0.  throw v0;
}
procedure `java.lang.String` `composeMessage`(`java.lang.String` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/util/EndConsumerHelper;.composeMessage:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4e005c.  v0:= new `java.lang.StringBuilder`;
  #L4e0060.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4e0066.  v1:= "It is not allowed to subscribe with a(n) " @kind object;
  #L4e006a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e0070.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e0076.  v1:= " multiple times. Please create a fresh instance of " @kind object;
  #L4e007a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e0080.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e0086.  v2:= " and subscribe that to the target source instead." @kind object;
  #L4e008a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e0090.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4e0096.  v2:= temp @kind object;
  #L4e0098.  return v2 @kind object;
}
procedure `void` `reportDoubleSubscription`(`java.lang.Class` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/util/EndConsumerHelper;.reportDoubleSubscription:(Ljava/lang/Class;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4e00d4.  v0:= new `io.reactivex.rxjava3.exceptions.ProtocolViolationException`;
  #L4e00d8.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L4e00de.  v1:= temp @kind object;
  #L4e00e0.  call temp:= `composeMessage`(v1) @signature `Lio/reactivex/rxjava3/internal/util/EndConsumerHelper;.composeMessage:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L4e00e6.  v1:= temp @kind object;
  #L4e00e8.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/exceptions/ProtocolViolationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e00ee.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4e00f4.  return @kind void;
}
procedure `boolean` `setOnce`(`java.util.concurrent.atomic.AtomicReference` v1 @kind object, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/util/EndConsumerHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;Ljava/lang/Class;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4dff4c.  v0:= "next is null" @kind object;
  #L4dff50.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4dff56.  v0:= 0I;
  #L4dff58.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4dff5e.  v0:= temp;
  #L4dff60.  if v0 != 0 then goto L4dff84;
  #L4dff64.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4dff6a.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4dff70.  v1:= temp @kind object;
  #L4dff72.  v2:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4dff76.  if v1 == v2 then goto L4dff80;
  #L4dff7a.  call `reportDoubleSubscription`(v3) @signature `Lio/reactivex/rxjava3/internal/util/EndConsumerHelper;.reportDoubleSubscription:(Ljava/lang/Class;)V` @kind static;
  #L4dff80.  v1:= 0I;
  #L4dff82.  return v1;
  #L4dff84.  v1:= 1I;
  #L4dff86.  return v1;
}
procedure `boolean` `setOnce`(`java.util.concurrent.atomic.AtomicReference` v1 @kind object, `org.reactivestreams.Subscription` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/util/EndConsumerHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;Ljava/lang/Class;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4dff98.  v0:= "next is null" @kind object;
  #L4dff9c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4dffa2.  v0:= 0I;
  #L4dffa4.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4dffaa.  v0:= temp;
  #L4dffac.  if v0 != 0 then goto L4dffd0;
  #L4dffb0.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4dffb6.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4dffbc.  v1:= temp @kind object;
  #L4dffbe.  v2:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4dffc2.  if v1 == v2 then goto L4dffcc;
  #L4dffc6.  call `reportDoubleSubscription`(v3) @signature `Lio/reactivex/rxjava3/internal/util/EndConsumerHelper;.reportDoubleSubscription:(Ljava/lang/Class;)V` @kind static;
  #L4dffcc.  v1:= 0I;
  #L4dffce.  return v1;
  #L4dffd0.  v1:= 1I;
  #L4dffd2.  return v1;
}
procedure `boolean` `validate`(`io.reactivex.rxjava3.disposables.Disposable` v1 @kind object, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/util/EndConsumerHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;Ljava/lang/Class;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4dffe4.  v0:= "next is null" @kind object;
  #L4dffe8.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4dffee.  if v1 == 0 then goto L4e000a;
  #L4dfff2.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4dfff8.  v2:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4dfffc.  if v1 == v2 then goto L4e0006;
  #L4e0000.  call `reportDoubleSubscription`(v3) @signature `Lio/reactivex/rxjava3/internal/util/EndConsumerHelper;.reportDoubleSubscription:(Ljava/lang/Class;)V` @kind static;
  #L4e0006.  v1:= 0I;
  #L4e0008.  return v1;
  #L4e000a.  v1:= 1I;
  #L4e000c.  return v1;
}
procedure `boolean` `validate`(`org.reactivestreams.Subscription` v1 @kind object, `org.reactivestreams.Subscription` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/util/EndConsumerHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;Ljava/lang/Class;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4e0020.  v0:= "next is null" @kind object;
  #L4e0024.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4e002a.  if v1 == 0 then goto L4e0046;
  #L4e002e.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4e0034.  v2:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4e0038.  if v1 == v2 then goto L4e0042;
  #L4e003c.  call `reportDoubleSubscription`(v3) @signature `Lio/reactivex/rxjava3/internal/util/EndConsumerHelper;.reportDoubleSubscription:(Ljava/lang/Class;)V` @kind static;
  #L4e0042.  v1:= 0I;
  #L4e0044.  return v1;
  #L4e0046.  v1:= 1I;
  #L4e0048.  return v1;
}
