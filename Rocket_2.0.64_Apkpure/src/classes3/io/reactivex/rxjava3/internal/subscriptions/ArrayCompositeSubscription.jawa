record `io.reactivex.rxjava3.internal.subscriptions.ArrayCompositeSubscription` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReferenceArray` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
}
global `long` `@@io.reactivex.rxjava3.internal.subscriptions.ArrayCompositeSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.subscriptions.ArrayCompositeSubscription` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/subscriptions/ArrayCompositeSubscription;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4de44c.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L4de452.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.subscriptions.ArrayCompositeSubscription` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/ArrayCompositeSubscription;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4de464.  v0:= 0I;
  #L4de466.  call temp:= `get`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4de46c.  v1:= temp @kind object;
  #L4de46e.  v2:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4de472.  if v1 == v2 then goto L4de4b6;
  #L4de476.  call temp:= `length`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L4de47c.  v1:= temp;
  #L4de47e.  if v0 >= v1 then goto L4de4b6;
  #L4de482.  call temp:= `get`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4de488.  v2:= temp @kind object;
  #L4de48a.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L4de48e.  v3:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4de492.  if v2 == v3 then goto L4de4b0;
  #L4de496.  call temp:= `getAndSet`(v4, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.getAndSet:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4de49c.  v2:= temp @kind object;
  #L4de49e.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L4de4a2.  if v2 == v3 then goto L4de4b0;
  #L4de4a6.  if v2 == 0 then goto L4de4b0;
  #L4de4aa.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4de4b0.  v0:= v0 + 1;
  #L4de4b4.  goto L4de47e;
  #L4de4b6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.subscriptions.ArrayCompositeSubscription` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/ArrayCompositeSubscription;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4de398.  v0:= 0I;
  #L4de39a.  call temp:= `get`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4de3a0.  v1:= temp @kind object;
  #L4de3a2.  v2:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4de3a6.  if v1 != v2 then goto L4de3ac;
  #L4de3aa.  v0:= 1I;
  #L4de3ac.  return v0;
}
procedure `org.reactivestreams.Subscription` `replaceResource`(`io.reactivex.rxjava3.internal.subscriptions.ArrayCompositeSubscription` v2 @kind this, `int` v3 , `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/ArrayCompositeSubscription;.replaceResource:(ILorg/reactivestreams/Subscription;)Lorg/reactivestreams/Subscription;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4de40c.  call temp:= `get`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4de412.  v0:= temp @kind object;
  #L4de414.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4de418.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4de41c.  if v0 != v1 then goto L4de42e;
  #L4de420.  if v4 == 0 then goto L4de42a;
  #L4de424.  call `cancel`(v4) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4de42a.  v3:= 0I;
  #L4de42c.  return v3 @kind object;
  #L4de42e.  call temp:= `compareAndSet`(v2, v3, v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4de434.  v1:= temp;
  #L4de436.  if v1 == 0 then goto L4de40c;
  #L4de43a.  return v0 @kind object;
}
procedure `boolean` `setResource`(`io.reactivex.rxjava3.internal.subscriptions.ArrayCompositeSubscription` v2 @kind this, `int` v3 , `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/ArrayCompositeSubscription;.setResource:(ILorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4de3c0.  call temp:= `get`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4de3c6.  v0:= temp @kind object;
  #L4de3c8.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4de3cc.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4de3d0.  if v0 != v1 then goto L4de3e2;
  #L4de3d4.  if v4 == 0 then goto L4de3de;
  #L4de3d8.  call `cancel`(v4) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4de3de.  v3:= 0I;
  #L4de3e0.  return v3;
  #L4de3e2.  call temp:= `compareAndSet`(v2, v3, v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4de3e8.  v1:= temp;
  #L4de3ea.  if v1 == 0 then goto L4de3c0;
  #L4de3ee.  if v0 == 0 then goto L4de3f8;
  #L4de3f2.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4de3f8.  v3:= 1I;
  #L4de3fa.  return v3;
}
