record `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` @kind class @AccessFlag PUBLIC extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.a` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.b` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.unbounded` @AccessFlag PROTECTED;
}
global `long` `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` v0 @kind this, `boolean` v1 ) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.<init>:(Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4ded34.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4ded3a.  v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.f` @type ^`boolean` := v1 @kind boolean;
  #L4ded3e.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4ded42.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4ded48.  v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4ded4c.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4ded50.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4ded56.  v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4ded5a.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4ded5e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4ded64.  v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4ded68.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.c:()V` @AccessFlag FINAL {
    temp;
    v0;

  #L4deda4.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4dedaa.  v0:= temp;
  #L4dedac.  if v0 == 0 then goto L4dedb2;
  #L4dedb0.  return @kind void;
  #L4dedb2.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.d:()V` @kind virtual;
  #L4dedb8.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ded7c.  v0:= v1.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.g` @type ^`boolean` @kind boolean;
  #L4ded80.  if v0 != 0 then goto L4ded90;
  #L4ded84.  v0:= 1I;
  #L4ded86.  v1.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.g` @type ^`boolean` := v0 @kind boolean;
  #L4ded8a.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.c:()V` @kind virtual;
  #L4ded90.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` v19 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.d:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L4dedcc.  v0:= v19 @kind object;
  #L4dedd0.  v1:= 0I;
  #L4dedd2.  v2:= 0L;
  #L4dedd6.  v4:= 1I;
  #L4dedd8.  v7:= v1 @kind object;
  #L4dedda.  v5:= v2 @kind wide;
  #L4deddc.  v8:= v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4dede0.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4dede6.  v8:= temp @kind object;
  #L4dede8.  v8:= (`org.reactivestreams.Subscription`) v8 @kind object;
  #L4dedec.  if v8 == 0 then goto L4dee00;
  #L4dedf0.  v8:= v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4dedf4.  call temp:= `getAndSet`(v8, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4dedfa.  v8:= temp @kind object;
  #L4dedfc.  v8:= (`org.reactivestreams.Subscription`) v8 @kind object;
  #L4dee00.  v9:= v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4dee04.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4dee0a.  v9:= temp @kind wide;
  #L4dee0c.  v11:= lcmp(v9, v2);
  #L4dee10.  if v11 == 0 then goto L4dee20;
  #L4dee14.  v9:= v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4dee18.  call temp:= `getAndSet`(v9, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4dee1e.  v9:= temp @kind wide;
  #L4dee20.  v11:= v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4dee24.  call temp:= `get`(v11) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4dee2a.  v11:= temp @kind wide;
  #L4dee2c.  v13:= lcmp(v11, v2);
  #L4dee30.  if v13 == 0 then goto L4dee40;
  #L4dee34.  v11:= v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4dee38.  call temp:= `getAndSet`(v11, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4dee3e.  v11:= temp @kind wide;
  #L4dee40.  v13:= v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.a` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4dee44.  v14:= v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.g` @type ^`boolean` @kind boolean;
  #L4dee48.  if v14 == 0 then goto L4dee66;
  #L4dee4c.  if v13 == 0 then goto L4dee5a;
  #L4dee50.  call `cancel`(v13) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4dee56.  v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.a` @type ^`org.reactivestreams.Subscription` := v1 @kind object;
  #L4dee5a.  if v8 == 0 then goto L4deee6;
  #L4dee5e.  call `cancel`(v8) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4dee64.  goto L4deee6;
  #L4dee66.  v14:= v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.b` @type ^`long` @kind wide;
  #L4dee6a.  v16:= 9223372036854775807L;
  #L4dee74.  v18:= lcmp(v14, v16);
  #L4dee78.  if v18 == 0 then goto L4deea2;
  #L4dee7c.  call temp:= `addCap`(v14, v9) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L4dee82.  v14:= temp @kind wide;
  #L4dee84.  v18:= lcmp(v14, v16);
  #L4dee88.  if v18 == 0 then goto L4dee9e;
  #L4dee8c.  v14:= v14 - v11 @kind long;
  #L4dee8e.  v11:= lcmp(v14, v2);
  #L4dee92.  if v11 >= 0 then goto L4dee9e;
  #L4dee96.  call `reportMoreProduced`(v14) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.reportMoreProduced:(J)V` @kind static;
  #L4dee9c.  v14:= v2 @kind wide;
  #L4dee9e.  v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.b` @type ^`long` := v14 @kind wide;
  #L4deea2.  if v8 == 0 then goto L4deed0;
  #L4deea6.  if v13 == 0 then goto L4deeb8;
  #L4deeaa.  v9:= v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.f` @type ^`boolean` @kind boolean;
  #L4deeae.  if v9 == 0 then goto L4deeb8;
  #L4deeb2.  call `cancel`(v13) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4deeb8.  v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.a` @type ^`org.reactivestreams.Subscription` := v8 @kind object;
  #L4deebc.  v9:= lcmp(v14, v2);
  #L4deec0.  if v9 == 0 then goto L4deee6;
  #L4deec4.  call temp:= `addCap`(v5, v14) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L4deeca.  v5:= temp @kind wide;
  #L4deecc.  v7:= v8 @kind object;
  #L4deece.  goto L4deee6;
  #L4deed0.  if v13 == 0 then goto L4deee6;
  #L4deed4.  v8:= lcmp(v9, v2);
  #L4deed8.  if v8 == 0 then goto L4deee6;
  #L4deedc.  call temp:= `addCap`(v5, v9) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L4deee2.  v5:= temp @kind wide;
  #L4deee4.  v7:= v13 @kind object;
  #L4deee6.  v4:= -v4 @kind int;
  #L4deee8.  call temp:= `addAndGet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4deeee.  v4:= temp;
  #L4deef0.  if v4 != 0 then goto L4deddc;
  #L4deef4.  v1:= lcmp(v5, v2);
  #L4deef8.  if v1 == 0 then goto L4def02;
  #L4deefc.  call `request`(v7, v5) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4def02.  return @kind void;
}
procedure `boolean` `isCancelled`(`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.isCancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4ded04.  v0:= v1.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.g` @type ^`boolean` @kind boolean;
  #L4ded08.  return v0;
}
procedure `boolean` `isUnbounded`(`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.isUnbounded:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4ded1c.  v0:= v1.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.unbounded` @type ^`boolean` @kind boolean;
  #L4ded20.  return v0;
}
procedure `void` `produced`(`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` v5 @kind this, `long` v6 ) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4def14.  v0:= v5.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.unbounded` @type ^`boolean` @kind boolean;
  #L4def18.  if v0 == 0 then goto L4def1e;
  #L4def1c.  return @kind void;
  #L4def1e.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4def24.  v0:= temp;
  #L4def26.  if v0 != 0 then goto L4def80;
  #L4def2a.  v0:= 0I;
  #L4def2c.  v1:= 1I;
  #L4def2e.  call temp:= `compareAndSet`(v5, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4def34.  v0:= temp;
  #L4def36.  if v0 == 0 then goto L4def80;
  #L4def3a.  v0:= v5.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.b` @type ^`long` @kind wide;
  #L4def3e.  v2:= 9223372036854775807L;
  #L4def48.  v4:= lcmp(v0, v2);
  #L4def4c.  if v4 == 0 then goto L4def6a;
  #L4def50.  v0:= v0 - v6 @kind long;
  #L4def52.  v6:= 0L;
  #L4def56.  v2:= lcmp(v0, v6);
  #L4def5a.  if v2 >= 0 then goto L4def66;
  #L4def5e.  call `reportMoreProduced`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.reportMoreProduced:(J)V` @kind static;
  #L4def64.  v0:= v6 @kind wide;
  #L4def66.  v5.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.b` @type ^`long` := v0 @kind wide;
  #L4def6a.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4def70.  v6:= temp;
  #L4def72.  if v6 != 0 then goto L4def78;
  #L4def76.  return @kind void;
  #L4def78.  call `d`(v5) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.d:()V` @kind virtual;
  #L4def7e.  return @kind void;
  #L4def80.  v0:= v5.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4def84.  call temp:= `add`(v0, v6) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4def8a.  call `c`(v5) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.c:()V` @kind virtual;
  #L4def90.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4defa4.  call temp:= `validate`(v7) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4defaa.  v0:= temp;
  #L4defac.  if v0 == 0 then goto L4df036;
  #L4defb0.  v0:= v6.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.unbounded` @type ^`boolean` @kind boolean;
  #L4defb4.  if v0 == 0 then goto L4defba;
  #L4defb8.  return @kind void;
  #L4defba.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4defc0.  v0:= temp;
  #L4defc2.  if v0 != 0 then goto L4df026;
  #L4defc6.  v0:= 0I;
  #L4defc8.  v1:= 1I;
  #L4defca.  call temp:= `compareAndSet`(v6, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4defd0.  v0:= temp;
  #L4defd2.  if v0 == 0 then goto L4df026;
  #L4defd6.  v2:= v6.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.b` @type ^`long` @kind wide;
  #L4defda.  v4:= 9223372036854775807L;
  #L4defe4.  v0:= lcmp(v2, v4);
  #L4defe8.  if v0 == 0 then goto L4df004;
  #L4defec.  call temp:= `addCap`(v2, v7) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L4deff2.  v2:= temp @kind wide;
  #L4deff4.  v6.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.b` @type ^`long` := v2 @kind wide;
  #L4deff8.  v0:= lcmp(v2, v4);
  #L4deffc.  if v0 != 0 then goto L4df004;
  #L4df000.  v6.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.unbounded` @type ^`boolean` := v1 @kind boolean;
  #L4df004.  v0:= v6.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.a` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4df008.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4df00e.  v1:= temp;
  #L4df010.  if v1 == 0 then goto L4df01a;
  #L4df014.  call `d`(v6) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.d:()V` @kind virtual;
  #L4df01a.  if v0 == 0 then goto L4df024;
  #L4df01e.  call `request`(v0, v7) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4df024.  return @kind void;
  #L4df026.  v0:= v6.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4df02a.  call temp:= `add`(v0, v7) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4df030.  call `c`(v6) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.c:()V` @kind virtual;
  #L4df036.  return @kind void;
}
procedure `void` `setSubscription`(`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` v5 @kind this, `org.reactivestreams.Subscription` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4df048.  v0:= v5.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.g` @type ^`boolean` @kind boolean;
  #L4df04c.  if v0 == 0 then goto L4df058;
  #L4df050.  call `cancel`(v6) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4df056.  return @kind void;
  #L4df058.  v0:= "s is null" @kind object;
  #L4df05c.  call temp:= `requireNonNull`(v6, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4df062.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4df068.  v0:= temp;
  #L4df06a.  if v0 != 0 then goto L4df0c2;
  #L4df06e.  v0:= 0I;
  #L4df070.  v1:= 1I;
  #L4df072.  call temp:= `compareAndSet`(v5, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4df078.  v0:= temp;
  #L4df07a.  if v0 == 0 then goto L4df0c2;
  #L4df07e.  v0:= v5.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.a` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4df082.  if v0 == 0 then goto L4df094;
  #L4df086.  v1:= v5.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.f` @type ^`boolean` @kind boolean;
  #L4df08a.  if v1 == 0 then goto L4df094;
  #L4df08e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4df094.  v5.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.a` @type ^`org.reactivestreams.Subscription` := v6 @kind object;
  #L4df098.  v0:= v5.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.b` @type ^`long` @kind wide;
  #L4df09c.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4df0a2.  v2:= temp;
  #L4df0a4.  if v2 == 0 then goto L4df0ae;
  #L4df0a8.  call `d`(v5) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.d:()V` @kind virtual;
  #L4df0ae.  v2:= 0L;
  #L4df0b2.  v4:= lcmp(v0, v2);
  #L4df0b6.  if v4 == 0 then goto L4df0c0;
  #L4df0ba.  call `request`(v6, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4df0c0.  return @kind void;
  #L4df0c2.  v0:= v5.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4df0c6.  call temp:= `getAndSet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4df0cc.  v6:= temp @kind object;
  #L4df0ce.  v6:= (`org.reactivestreams.Subscription`) v6 @kind object;
  #L4df0d2.  if v6 == 0 then goto L4df0e4;
  #L4df0d6.  v0:= v5.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.f` @type ^`boolean` @kind boolean;
  #L4df0da.  if v0 == 0 then goto L4df0e4;
  #L4df0de.  call `cancel`(v6) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4df0e4.  call `c`(v5) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.c:()V` @kind virtual;
  #L4df0ea.  return @kind void;
}
