record `io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class, `org.reactivestreams.Subscription` @kind interface {
}
global `io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper`[] `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.a` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L4df370.  v0:= new `io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper`;
  #L4df374.  v1:= "CANCELLED" @kind object;
  #L4df378.  v2:= 0I;
  #L4df37a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L4df380.  `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` := v0 @kind object;
  #L4df384.  v1:= 1I;
  #L4df386.  v1:= new `io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper`[v1];
  #L4df38a.  v1[v2]:= v0 @kind object;
  #L4df38e.  `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.a` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper`[] := v1 @kind object;
  #L4df392.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4df3a4.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L4df3aa.  return @kind void;
}
procedure `boolean` `cancel`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4df0fc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4df102.  v0:= temp @kind object;
  #L4df104.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4df108.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4df10c.  if v0 == v1 then goto L4df12e;
  #L4df110.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4df116.  v2:= temp @kind object;
  #L4df118.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L4df11c.  if v2 == v1 then goto L4df12e;
  #L4df120.  if v2 == 0 then goto L4df12a;
  #L4df124.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4df12a.  v2:= 1I;
  #L4df12c.  return v2;
  #L4df12e.  v2:= 0I;
  #L4df130.  return v2;
}
procedure `void` `deferredRequest`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object, `java.util.concurrent.atomic.AtomicLong` v3 @kind object, `long` v4 ) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4df3d0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4df3d6.  v0:= temp @kind object;
  #L4df3d8.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4df3dc.  if v0 == 0 then goto L4df3e8;
  #L4df3e0.  call `request`(v0, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4df3e6.  goto L4df424;
  #L4df3e8.  call temp:= `validate`(v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4df3ee.  v0:= temp;
  #L4df3f0.  if v0 == 0 then goto L4df424;
  #L4df3f4.  call temp:= `add`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4df3fa.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4df400.  v2:= temp @kind object;
  #L4df402.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L4df406.  if v2 == 0 then goto L4df424;
  #L4df40a.  v4:= 0L;
  #L4df40e.  call temp:= `getAndSet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4df414.  v0:= temp @kind wide;
  #L4df416.  v3:= lcmp(v0, v4);
  #L4df41a.  if v3 == 0 then goto L4df424;
  #L4df41e.  call `request`(v2, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4df424.  return @kind void;
}
procedure `boolean` `deferredSetOnce`(`java.util.concurrent.atomic.AtomicReference` v3 @kind object, `java.util.concurrent.atomic.AtomicLong` v4 @kind object, `org.reactivestreams.Subscription` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4df144.  call temp:= `setOnce`(v3, v5) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4df14a.  v3:= temp;
  #L4df14c.  if v3 == 0 then goto L4df16e;
  #L4df150.  v0:= 0L;
  #L4df154.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4df15a.  v3:= temp @kind wide;
  #L4df15c.  v2:= lcmp(v3, v0);
  #L4df160.  if v2 == 0 then goto L4df16a;
  #L4df164.  call `request`(v5, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4df16a.  v3:= 1I;
  #L4df16c.  return v3;
  #L4df16e.  v3:= 0I;
  #L4df170.  return v3;
}
procedure `boolean` `replace`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4df184.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4df18a.  v0:= temp @kind object;
  #L4df18c.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4df190.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4df194.  if v0 != v1 then goto L4df1a6;
  #L4df198.  if v3 == 0 then goto L4df1a2;
  #L4df19c.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4df1a2.  v2:= 0I;
  #L4df1a4.  return v2;
  #L4df1a6.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4df1ac.  v0:= temp;
  #L4df1ae.  if v0 == 0 then goto L4df184;
  #L4df1b2.  v2:= 1I;
  #L4df1b4.  return v2;
}
procedure `void` `reportMoreProduced`(`long` v3 ) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.reportMoreProduced:(J)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4df438.  v0:= new `io.reactivex.rxjava3.exceptions.ProtocolViolationException`;
  #L4df43c.  v1:= new `java.lang.StringBuilder`;
  #L4df440.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4df446.  v2:= "More produced than requested: " @kind object;
  #L4df44a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4df450.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4df456.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4df45c.  v3:= temp @kind object;
  #L4df45e.  call `<init>`(v0, v3) @signature `Lio/reactivex/rxjava3/exceptions/ProtocolViolationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4df464.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4df46a.  return @kind void;
}
procedure `void` `reportSubscriptionSet`() @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.reportSubscriptionSet:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4df47c.  v0:= new `io.reactivex.rxjava3.exceptions.ProtocolViolationException`;
  #L4df480.  v1:= "Subscription already set!" @kind object;
  #L4df484.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/exceptions/ProtocolViolationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4df48a.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4df490.  return @kind void;
}
procedure `boolean` `set`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4df1c8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4df1ce.  v0:= temp @kind object;
  #L4df1d0.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4df1d4.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4df1d8.  if v0 != v1 then goto L4df1ea;
  #L4df1dc.  if v3 == 0 then goto L4df1e6;
  #L4df1e0.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4df1e6.  v2:= 0I;
  #L4df1e8.  return v2;
  #L4df1ea.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4df1f0.  v1:= temp;
  #L4df1f2.  if v1 == 0 then goto L4df1c8;
  #L4df1f6.  if v0 == 0 then goto L4df200;
  #L4df1fa.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4df200.  v2:= 1I;
  #L4df202.  return v2;
}
procedure `boolean` `setOnce`(`java.util.concurrent.atomic.AtomicReference` v1 @kind object, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4df214.  v0:= "s is null" @kind object;
  #L4df218.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4df21e.  v0:= 0I;
  #L4df220.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4df226.  v0:= temp;
  #L4df228.  if v0 != 0 then goto L4df24c;
  #L4df22c.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4df232.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4df238.  v1:= temp @kind object;
  #L4df23a.  v2:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4df23e.  if v1 == v2 then goto L4df248;
  #L4df242.  call `reportSubscriptionSet`() @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.reportSubscriptionSet:()V` @kind static;
  #L4df248.  v1:= 0I;
  #L4df24a.  return v1;
  #L4df24c.  v1:= 1I;
  #L4df24e.  return v1;
}
procedure `boolean` `setOnce`(`java.util.concurrent.atomic.AtomicReference` v0 @kind object, `org.reactivestreams.Subscription` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4df260.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4df266.  v0:= temp;
  #L4df268.  if v0 == 0 then goto L4df276;
  #L4df26c.  call `request`(v1, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4df272.  v0:= 1I;
  #L4df274.  return v0;
  #L4df276.  v0:= 0I;
  #L4df278.  return v0;
}
procedure `boolean` `validate`(`long` v3 ) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4df28c.  v0:= 0L;
  #L4df290.  v2:= lcmp(v3, v0);
  #L4df294.  if v2 > 0 then goto L4df2ce;
  #L4df298.  v0:= new `java.lang.IllegalArgumentException`;
  #L4df29c.  v1:= new `java.lang.StringBuilder`;
  #L4df2a0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4df2a6.  v2:= "n > 0 required but it was " @kind object;
  #L4df2aa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4df2b0.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4df2b6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4df2bc.  v3:= temp @kind object;
  #L4df2be.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4df2c4.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4df2ca.  v3:= 0I;
  #L4df2cc.  return v3;
  #L4df2ce.  v3:= 1I;
  #L4df2d0.  return v3;
}
procedure `boolean` `validate`(`org.reactivestreams.Subscription` v1 @kind object, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4df2e4.  v0:= 0I;
  #L4df2e6.  if v2 != 0 then goto L4df300;
  #L4df2ea.  v1:= new `java.lang.NullPointerException`;
  #L4df2ee.  v2:= "next is null" @kind object;
  #L4df2f2.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4df2f8.  call `onError`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4df2fe.  return v0;
  #L4df300.  if v1 == 0 then goto L4df312;
  #L4df304.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4df30a.  call `reportSubscriptionSet`() @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.reportSubscriptionSet:()V` @kind static;
  #L4df310.  return v0;
  #L4df312.  v1:= 1I;
  #L4df314.  return v1;
}
procedure `io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.valueOf:(Ljava/lang/String;)Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4df328.  v0:= constclass @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4df32c.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L4df332.  v1:= temp @kind object;
  #L4df334.  v1:= (`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper`) v1 @kind object;
  #L4df338.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper`[] `values`() @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.values:()[Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4df34c.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.a` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper`[] @kind object;
  #L4df350.  call temp:= `clone`(v0) @signature `[Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.clone:()Ljava/lang/Object;` @kind virtual;
  #L4df356.  v0:= temp @kind object;
  #L4df358.  v0:= (`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper`[]) v0 @kind object;
  #L4df35c.  return v0 @kind object;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L4df3bc.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L4df4a4.  return @kind void;
}
