record `io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription` @kind class @AccessFlag PUBLIC extends `io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @AccessFlag PROTECTED_FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @AccessFlag PROTECTED;
}
global `long` `@@io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4de83c.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L4de842.  v0.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4de846.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4de858.  v0:= 4I;
  #L4de85a.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L4de860.  v0:= 0I;
  #L4de862.  v1.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v0 @kind object;
  #L4de866.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4de878.  v0:= 32I;
  #L4de87c.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4de882.  v0:= 0I;
  #L4de884.  v1.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v0 @kind object;
  #L4de888.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4de89c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4de8a2.  v0:= temp;
  #L4de8a4.  v1:= 8I;
  #L4de8a8.  v2:= 4I;
  #L4de8aa.  if v0 != v1 then goto L4de8da;
  #L4de8ae.  v3.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v4 @kind object;
  #L4de8b2.  v0:= 16I;
  #L4de8b6.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4de8bc.  v0:= v3.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4de8c0.  call `onNext`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4de8c6.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4de8cc.  v4:= temp;
  #L4de8ce.  if v4 == v2 then goto L4de8d8;
  #L4de8d2.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4de8d8.  return @kind void;
  #L4de8da.  v1:= v0 ^& -3;
  #L4de8de.  if v1 == 0 then goto L4de8e4;
  #L4de8e2.  return @kind void;
  #L4de8e4.  v1:= 2I;
  #L4de8e6.  if v0 != v1 then goto L4de910;
  #L4de8ea.  v0:= 3I;
  #L4de8ec.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4de8f2.  v0:= v3.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4de8f6.  call `onNext`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4de8fc.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4de902.  v4:= temp;
  #L4de904.  if v4 == v2 then goto L4de90e;
  #L4de908.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4de90e.  return @kind void;
  #L4de910.  v3.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v4 @kind object;
  #L4de914.  v0:= 0I;
  #L4de916.  v1:= 1I;
  #L4de918.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4de91e.  v0:= temp;
  #L4de920.  if v0 == 0 then goto L4de926;
  #L4de924.  return @kind void;
  #L4de926.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4de92c.  v0:= temp;
  #L4de92e.  if v0 != v2 then goto L4de8a4;
  #L4de932.  v4:= 0I;
  #L4de934.  v3.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v4 @kind object;
  #L4de938.  return @kind void;
}
procedure `boolean` `isCancelled`(`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.isCancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4de764.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4de76a.  v0:= temp;
  #L4de76c.  v1:= 4I;
  #L4de76e.  if v0 != v1 then goto L4de776;
  #L4de772.  v0:= 1I;
  #L4de774.  goto L4de778;
  #L4de776.  v0:= 0I;
  #L4de778.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4de78c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4de792.  v0:= temp;
  #L4de794.  v1:= 16I;
  #L4de798.  if v0 == v1 then goto L4de7a0;
  #L4de79c.  v0:= 1I;
  #L4de79e.  goto L4de7a2;
  #L4de7a0.  v0:= 0I;
  #L4de7a2.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4de804.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4de80a.  v0:= temp;
  #L4de80c.  v1:= 0I;
  #L4de80e.  v2:= 16I;
  #L4de812.  if v0 != v2 then goto L4de82a;
  #L4de816.  v0:= 32I;
  #L4de81a.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4de820.  v0:= v3.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L4de824.  v3.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v1 @kind object;
  #L4de828.  return v0 @kind object;
  #L4de82a.  return v1 @kind object;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4de94c.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4de952.  v2:= temp;
  #L4de954.  if v2 == 0 then goto L4de9bc;
  #L4de958.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4de95e.  v2:= temp;
  #L4de960.  v3:= v2 ^& -2;
  #L4de964.  if v3 == 0 then goto L4de96a;
  #L4de968.  return @kind void;
  #L4de96a.  v3:= 1I;
  #L4de96c.  if v2 != v3 then goto L4de9ac;
  #L4de970.  v2:= 3I;
  #L4de972.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4de978.  v2:= temp;
  #L4de97a.  if v2 == 0 then goto L4de9aa;
  #L4de97e.  v2:= v1.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L4de982.  if v2 == 0 then goto L4de9aa;
  #L4de986.  v3:= 0I;
  #L4de988.  v1.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v3 @kind object;
  #L4de98c.  v3:= v1.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4de990.  call `onNext`(v3, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4de996.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4de99c.  v2:= temp;
  #L4de99e.  v0:= 4I;
  #L4de9a0.  if v2 == v0 then goto L4de9aa;
  #L4de9a4.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4de9aa.  return @kind void;
  #L4de9ac.  v2:= 0I;
  #L4de9ae.  v3:= 2I;
  #L4de9b0.  call temp:= `compareAndSet`(v1, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4de9b6.  v2:= temp;
  #L4de9b8.  if v2 == 0 then goto L4de958;
  #L4de9bc.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4de7dc.  v0:= 2I;
  #L4de7de.  v2:= v2 ^& v0 @kind int;
  #L4de7e0.  if v2 == 0 then goto L4de7f0;
  #L4de7e4.  v2:= 8I;
  #L4de7e8.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4de7ee.  return v0;
  #L4de7f0.  v2:= 0I;
  #L4de7f2.  return v2;
}
procedure `boolean` `tryCancel`(`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.tryCancel:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4de7b4.  v0:= 4I;
  #L4de7b6.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L4de7bc.  v1:= temp;
  #L4de7be.  if v1 == v0 then goto L4de7c6;
  #L4de7c2.  v0:= 1I;
  #L4de7c4.  goto L4de7c8;
  #L4de7c6.  v0:= 0I;
  #L4de7c8.  return v0;
}
