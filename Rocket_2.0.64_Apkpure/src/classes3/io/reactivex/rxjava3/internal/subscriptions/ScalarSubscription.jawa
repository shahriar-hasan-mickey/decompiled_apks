record `io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind interface {
  `java.lang.Object` `io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/ScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4dec58.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4dec5e.  v0.`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription.b` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4dec62.  v0.`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription.a` @type ^`java.lang.Object` := v2 @kind object;
  #L4dec66.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/ScalarSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dec78.  v0:= 2I;
  #L4dec7a.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4dec80.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/ScalarSubscription;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dec94.  v0:= 1I;
  #L4dec96.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4dec9c.  return @kind void;
}
procedure `boolean` `isCancelled`(`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/ScalarSubscription;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4deb84.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4deb8a.  v0:= temp;
  #L4deb8c.  v1:= 2I;
  #L4deb8e.  if v0 != v1 then goto L4deb96;
  #L4deb92.  v0:= 1I;
  #L4deb94.  goto L4deb98;
  #L4deb96.  v0:= 0I;
  #L4deb98.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/ScalarSubscription;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4debac.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4debb2.  v0:= temp;
  #L4debb4.  if v0 == 0 then goto L4debbc;
  #L4debb8.  v0:= 1I;
  #L4debba.  goto L4debbe;
  #L4debbc.  v0:= 0I;
  #L4debbe.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/ScalarSubscription;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4debd0.  v2:= new `java.lang.UnsupportedOperationException`;
  #L4debd4.  v0:= "Should not be called!" @kind object;
  #L4debd8.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4debde.  throw v2;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/ScalarSubscription;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L4debf0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L4debf4.  v2:= "Should not be called!" @kind object;
  #L4debf8.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4debfe.  throw v1;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/ScalarSubscription;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dec28.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4dec2e.  v0:= temp;
  #L4dec30.  if v0 != 0 then goto L4dec42;
  #L4dec34.  v0:= 1I;
  #L4dec36.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4dec3c.  v0:= v1.`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription.a` @type ^`java.lang.Object` @kind object;
  #L4dec40.  return v0 @kind object;
  #L4dec42.  v0:= 0I;
  #L4dec44.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/subscriptions/ScalarSubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4decb0.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4decb6.  v2:= temp;
  #L4decb8.  if v2 != 0 then goto L4decbe;
  #L4decbc.  return @kind void;
  #L4decbe.  v2:= 0I;
  #L4decc0.  v3:= 1I;
  #L4decc2.  call temp:= `compareAndSet`(v1, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4decc8.  v2:= temp;
  #L4decca.  if v2 == 0 then goto L4decf0;
  #L4decce.  v2:= v1.`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription.b` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4decd2.  v3:= v1.`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription.a` @type ^`java.lang.Object` @kind object;
  #L4decd6.  call `onNext`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4decdc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4dece2.  v3:= temp;
  #L4dece4.  v0:= 2I;
  #L4dece6.  if v3 == v0 then goto L4decf0;
  #L4decea.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4decf0.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/subscriptions/ScalarSubscription;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L4dec10.  v1:= v1 ^& 1;
  #L4dec14.  return v1;
}
