record `io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/AsyncSubscription;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4de534.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4de53a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4de53e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4de544.  v1.`io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4de548.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4de54c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4de552.  v1.`io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4de556.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/AsyncSubscription;.<init>:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4de568.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/AsyncSubscription;.<init>:()V` @kind direct;
  #L4de56e.  v0:= v1.`io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4de572.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4de578.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/AsyncSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L4de58c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/AsyncSubscription;.dispose:()V` @kind virtual;
  #L4de592.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/AsyncSubscription;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4de5a4.  v0:= v1.`io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4de5a8.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4de5ae.  v0:= v1.`io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4de5b2.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4de5b8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/AsyncSubscription;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4de4c8.  v0:= v2.`io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4de4cc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4de4d2.  v0:= temp @kind object;
  #L4de4d4.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4de4d8.  if v0 != v1 then goto L4de4e0;
  #L4de4dc.  v0:= 1I;
  #L4de4de.  goto L4de4e2;
  #L4de4e0.  v0:= 0I;
  #L4de4e2.  return v0;
}
procedure `boolean` `replaceResource`(`io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/AsyncSubscription;.replaceResource:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4de4f4.  v0:= v1.`io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4de4f8.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4de4fe.  v2:= temp;
  #L4de500.  return v2;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/subscriptions/AsyncSubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4de5cc.  v0:= v1.`io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4de5d0.  call `deferredRequest`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L4de5d6.  return @kind void;
}
procedure `boolean` `setResource`(`io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/AsyncSubscription;.setResource:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4de514.  v0:= v1.`io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4de518.  call temp:= `set`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4de51e.  v2:= temp;
  #L4de520.  return v2;
}
procedure `void` `setSubscription`(`io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/AsyncSubscription;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4de5e8.  v0:= v1.`io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4de5ec.  call temp:= `deferredSetOnce`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4de5f2.  return @kind void;
}
