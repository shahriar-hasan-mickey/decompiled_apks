record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.e` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.f` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/core/Scheduler$Worker;Lorg/reactivestreams/Publisher;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a1db8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4a1dbe.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4a1dc2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v2 @kind object;
  #L4a1dc6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.f` @type ^`org.reactivestreams.Publisher` := v3 @kind object;
  #L4a1dca.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4a1dce.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4a1dd4.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4a1dd8.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4a1ddc.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a1de2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4a1de6.  v1:= v4 ^~ 1;
  #L4a1dea.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.e` @type ^`boolean` := v1 @kind boolean;
  #L4a1dee.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a` v2 @kind this, `long` v3 , `org.reactivestreams.Subscription` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn$a;.a:(JLorg/reactivestreams/Subscription;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4a1f4c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.e` @type ^`boolean` @kind boolean;
  #L4a1f50.  if v0 != 0 then goto L4a1f80;
  #L4a1f54.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4a1f5a.  v0:= temp @kind object;
  #L4a1f5c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a1f62.  v1:= temp @kind object;
  #L4a1f64.  if v0 != v1 then goto L4a1f6a;
  #L4a1f68.  goto L4a1f80;
  #L4a1f6a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4a1f6e.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a$a`;
  #L4a1f72.  call `<init>`(v1, v5, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn$a$a;.<init>:(Lorg/reactivestreams/Subscription;J)V` @kind direct;
  #L4a1f78.  call temp:= `schedule`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4a1f7e.  goto L4a1f86;
  #L4a1f80.  call `request`(v5, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a1f86.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a1e00.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a1e04.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4a1e0a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4a1e0e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4a1e14.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a1e28.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a1e2c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a1e32.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4a1e36.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4a1e3c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a1e50.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a1e54.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a1e5a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4a1e5e.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4a1e64.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a1e78.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a1e7c.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a1e82.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a` v5 @kind this, `org.reactivestreams.Subscription` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a1e94.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a1e98.  call temp:= `setOnce`(v0, v6) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4a1e9e.  v0:= temp;
  #L4a1ea0.  if v0 == 0 then goto L4a1ec2;
  #L4a1ea4.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a1ea8.  v1:= 0L;
  #L4a1eac.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4a1eb2.  v3:= temp @kind wide;
  #L4a1eb4.  v0:= lcmp(v3, v1);
  #L4a1eb8.  if v0 == 0 then goto L4a1ec2;
  #L4a1ebc.  call `a`(v5, v3, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn$a;.a:(JLorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4a1ec2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a1ed4.  call temp:= `validate`(v5) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4a1eda.  v0:= temp;
  #L4a1edc.  if v0 == 0 then goto L4a1f38;
  #L4a1ee0.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a1ee4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a1eea.  v0:= temp @kind object;
  #L4a1eec.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4a1ef0.  if v0 == 0 then goto L4a1efc;
  #L4a1ef4.  call `a`(v4, v5, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn$a;.a:(JLorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4a1efa.  goto L4a1f38;
  #L4a1efc.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a1f00.  call temp:= `add`(v0, v5) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4a1f06.  v5:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a1f0a.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a1f10.  v5:= temp @kind object;
  #L4a1f12.  v5:= (`org.reactivestreams.Subscription`) v5 @kind object;
  #L4a1f16.  if v5 == 0 then goto L4a1f38;
  #L4a1f1a.  v6:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a1f1e.  v0:= 0L;
  #L4a1f22.  call temp:= `getAndSet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4a1f28.  v2:= temp @kind wide;
  #L4a1f2a.  v6:= lcmp(v2, v0);
  #L4a1f2e.  if v6 == 0 then goto L4a1f38;
  #L4a1f32.  call `a`(v4, v2, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn$a;.a:(JLorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4a1f38.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a1f98.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4a1f9e.  v0:= temp @kind object;
  #L4a1fa0.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4a1fa6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.f` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4a1faa.  v1:= 0I;
  #L4a1fac.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.f` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L4a1fb0.  call `subscribe`(v0, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4a1fb6.  return @kind void;
}
