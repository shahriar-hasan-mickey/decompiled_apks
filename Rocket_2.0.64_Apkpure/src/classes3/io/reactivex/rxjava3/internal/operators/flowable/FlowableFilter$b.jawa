record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber` @kind class, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind interface {
  `io.reactivex.rxjava3.functions.Predicate` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$b.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFilter$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L490edc.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L490ee2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$b.a` @type ^`io.reactivex.rxjava3.functions.Predicate` := v2 @kind object;
  #L490ee6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFilter$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L490ef8.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFilter$b;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L490efe.  v3:= temp;
  #L490f00.  if v3 != 0 then goto L490f12;
  #L490f04.  v3:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L490f08.  v0:= 1L;
  #L490f0c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L490f12.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFilter$b;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L490e90.  v0:= v4.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.qs` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind object;
  #L490e94.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$b.a` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L490e98.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L490e9e.  v2:= temp @kind object;
  #L490ea0.  if v2 != 0 then goto L490ea8;
  #L490ea4.  v0:= 0I;
  #L490ea6.  return v0 @kind object;
  #L490ea8.  call temp:= `test`(v1, v2) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L490eae.  v3:= temp;
  #L490eb0.  if v3 == 0 then goto L490eb6;
  #L490eb4.  return v2 @kind object;
  #L490eb6.  v2:= v4.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.sourceMode` @type ^`int`;
  #L490eba.  v3:= 2I;
  #L490ebc.  if v2 != v3 then goto L490e98;
  #L490ec0.  v2:= 1L;
  #L490ec4.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L490eca.  goto L490e98;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$b` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFilter$b;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L490e74.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L490e7a.  v1:= temp;
  #L490e7c.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFilter$b;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L490e0c.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` @kind boolean;
  #L490e10.  if v0 == 0 then goto L490e18;
  #L490e14.  v3:= 0I;
  #L490e16.  return v3;
  #L490e18.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.sourceMode` @type ^`int`;
  #L490e1c.  v1:= 1I;
  #L490e1e.  if v0 == 0 then goto L490e30;
  #L490e22.  v3:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L490e26.  v0:= 0I;
  #L490e28.  call `onNext`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L490e2e.  return v1;
  #L490e30.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$b.a` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L490e34.  call temp:= `test`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L490e3a.  v0:= temp;
  #L490e3c.  if v0 == 0 then goto L490e4a;
  #L490e40.  v1:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L490e44.  call `onNext`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L490e4a.  return v0;
  #L490e4c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L490e4e.  call `fail`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L490e54.  return v1;
  catch `java.lang.Throwable` @[L490e30..L490e3c] goto L490e4c;
}
