record `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$d` `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.e` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.h` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.i` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$d` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.<init>:(Lorg/reactivestreams/Subscriber;ILio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$d;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ae10c.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L4ae112.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4ae116.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.f` @type ^`int` := v2;
  #L4ae11a.  v1:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L4ae11e.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4ae124.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.b` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v1 @kind object;
  #L4ae128.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4ae12c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4ae132.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.c` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4ae136.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4ae13a.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4ae140.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4ae144.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$d` := v3 @kind object;
  #L4ae148.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ae15c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.g` @type ^`boolean` @kind boolean;
  #L4ae160.  if v0 != 0 then goto L4ae18a;
  #L4ae164.  v0:= 1I;
  #L4ae166.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.g` @type ^`boolean` := v0 @kind boolean;
  #L4ae16a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.b` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4ae16e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4ae174.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ae17a.  v0:= temp;
  #L4ae17c.  if v0 != 0 then goto L4ae18a;
  #L4ae180.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L4ae184.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4ae18a.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ae19c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L4ae1a0.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4ae1a6.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L4ae1b8.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ae1be.  v0:= temp;
  #L4ae1c0.  if v0 == 0 then goto L4ae1c6;
  #L4ae1c4.  return @kind void;
  #L4ae1c6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.h` @type ^`boolean` @kind boolean;
  #L4ae1ca.  if v0 == 0 then goto L4ae1d6;
  #L4ae1ce.  call `e`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.e:()V` @kind virtual;
  #L4ae1d4.  goto L4ae1dc;
  #L4ae1d6.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.f:()V` @kind virtual;
  #L4ae1dc.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4ae1f0.  v0:= v6.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ae1f4.  v1:= v6.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L4ae1f8.  v2:= 1I;
  #L4ae1fa.  v3:= 1I;
  #L4ae1fc.  v4:= v6.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.g` @type ^`boolean` @kind boolean;
  #L4ae200.  if v4 == 0 then goto L4ae20c;
  #L4ae204.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4ae20a.  return @kind void;
  #L4ae20c.  v4:= v6.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ae210.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ae216.  v4:= temp @kind object;
  #L4ae218.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L4ae21c.  if v4 == 0 then goto L4ae22e;
  #L4ae220.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4ae226.  call `onError`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ae22c.  return @kind void;
  #L4ae22e.  call temp:= `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$d;.d:()I` @kind interface;
  #L4ae234.  v4:= temp;
  #L4ae236.  v5:= v6.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.f` @type ^`int`;
  #L4ae23a.  if v4 != v5 then goto L4ae242;
  #L4ae23e.  v4:= 1I;
  #L4ae240.  goto L4ae244;
  #L4ae242.  v4:= 0I;
  #L4ae244.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4ae24a.  v5:= temp;
  #L4ae24c.  if v5 != 0 then goto L4ae258;
  #L4ae250.  v5:= 0I;
  #L4ae252.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ae258.  if v4 == 0 then goto L4ae264;
  #L4ae25c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4ae262.  return @kind void;
  #L4ae264.  v3:= -v3 @kind int;
  #L4ae266.  call temp:= `addAndGet`(v6, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4ae26c.  v3:= temp;
  #L4ae26e.  if v3 != 0 then goto L4ae1fc;
  #L4ae272.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v10 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4ae284.  v0:= v10.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ae288.  v1:= v10.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L4ae28c.  v2:= v10.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.i` @type ^`long` @kind wide;
  #L4ae290.  v4:= 1I;
  #L4ae292.  v5:= v10.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4ae296.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4ae29c.  v5:= temp @kind wide;
  #L4ae29e.  v7:= lcmp(v2, v5);
  #L4ae2a2.  if v7 == 0 then goto L4ae31c;
  #L4ae2a6.  v8:= v10.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.g` @type ^`boolean` @kind boolean;
  #L4ae2aa.  if v8 == 0 then goto L4ae2b6;
  #L4ae2ae.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4ae2b4.  return @kind void;
  #L4ae2b6.  v8:= v10.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ae2ba.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ae2c0.  v8:= temp @kind object;
  #L4ae2c2.  v8:= (`java.lang.Throwable`) v8 @kind object;
  #L4ae2c6.  if v8 == 0 then goto L4ae2e0;
  #L4ae2ca.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4ae2d0.  v0:= v10.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ae2d4.  v1:= v10.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ae2d8.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4ae2de.  return @kind void;
  #L4ae2e0.  call temp:= `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$d;.c:()I` @kind interface;
  #L4ae2e6.  v8:= temp;
  #L4ae2e8.  v9:= v10.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.f` @type ^`int`;
  #L4ae2ec.  if v8 != v9 then goto L4ae2f8;
  #L4ae2f0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4ae2f6.  return @kind void;
  #L4ae2f8.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$d;.poll:()Ljava/lang/Object;` @kind interface;
  #L4ae2fe.  v8:= temp @kind object;
  #L4ae300.  if v8 != 0 then goto L4ae306;
  #L4ae304.  goto L4ae31c;
  #L4ae306.  v7:= `@@io.reactivex.rxjava3.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.rxjava3.internal.util.NotificationLite` @kind object;
  #L4ae30a.  if v8 == v7 then goto L4ae29e;
  #L4ae30e.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ae314.  v7:= 1L;
  #L4ae318.  v2:= v2 + v7 @kind long;
  #L4ae31a.  goto L4ae29e;
  #L4ae31c.  if v7 != 0 then goto L4ae37a;
  #L4ae320.  v5:= v10.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ae324.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ae32a.  v5:= temp @kind object;
  #L4ae32c.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L4ae330.  if v5 == 0 then goto L4ae34a;
  #L4ae334.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4ae33a.  v0:= v10.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ae33e.  v1:= v10.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ae342.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4ae348.  return @kind void;
  #L4ae34a.  call temp:= `peek`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$d;.peek:()Ljava/lang/Object;` @kind interface;
  #L4ae350.  v5:= temp @kind object;
  #L4ae352.  v6:= `@@io.reactivex.rxjava3.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.rxjava3.internal.util.NotificationLite` @kind object;
  #L4ae356.  if v5 != v6 then goto L4ae362;
  #L4ae35a.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$d;.b:()V` @kind interface;
  #L4ae360.  goto L4ae34a;
  #L4ae362.  call temp:= `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$d;.c:()I` @kind interface;
  #L4ae368.  v5:= temp;
  #L4ae36a.  v6:= v10.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.f` @type ^`int`;
  #L4ae36e.  if v5 != v6 then goto L4ae37a;
  #L4ae372.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4ae378.  return @kind void;
  #L4ae37a.  v10.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.i` @type ^`long` := v2 @kind wide;
  #L4ae37e.  v4:= -v4 @kind int;
  #L4ae380.  call temp:= `addAndGet`(v10, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4ae386.  v4:= temp;
  #L4ae388.  if v4 != 0 then goto L4ae292;
  #L4ae38c.  return @kind void;
}
procedure `boolean` `isCancelled`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.isCancelled:()Z` @AccessFlag  {
    temp;
    v0;

  #L4ae088.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.g` @type ^`boolean` @kind boolean;
  #L4ae08c.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ae0a0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L4ae0a4.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4ae0aa.  v0:= temp;
  #L4ae0ac.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ae3a0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L4ae3a4.  v1:= `@@io.reactivex.rxjava3.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.rxjava3.internal.util.NotificationLite` @kind object;
  #L4ae3a8.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4ae3ae.  call `drain`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.drain:()V` @kind virtual;
  #L4ae3b4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ae3c8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ae3cc.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4ae3d2.  v2:= temp;
  #L4ae3d4.  if v2 == 0 then goto L4ae3f6;
  #L4ae3d8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.b` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4ae3dc.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4ae3e2.  v2:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L4ae3e6.  v0:= `@@io.reactivex.rxjava3.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.rxjava3.internal.util.NotificationLite` @kind object;
  #L4ae3ea.  call temp:= `offer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4ae3f0.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.drain:()V` @kind virtual;
  #L4ae3f6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ae408.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.b` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4ae40c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4ae412.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ae424.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L4ae428.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4ae42e.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.drain:()V` @kind virtual;
  #L4ae434.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ae0e4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L4ae0e8.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$d;.poll:()Ljava/lang/Object;` @kind interface;
  #L4ae0ee.  v0:= temp @kind object;
  #L4ae0f0.  v1:= `@@io.reactivex.rxjava3.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.rxjava3.internal.util.NotificationLite` @kind object;
  #L4ae0f4.  if v0 == v1 then goto L4ae0e4;
  #L4ae0f8.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ae448.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4ae44e.  v0:= temp;
  #L4ae450.  if v0 == 0 then goto L4ae464;
  #L4ae454.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4ae458.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4ae45e.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.drain:()V` @kind virtual;
  #L4ae464.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ae0c0.  v0:= 2I;
  #L4ae0c2.  v2:= v2 ^& v0 @kind int;
  #L4ae0c4.  if v2 == 0 then goto L4ae0d0;
  #L4ae0c8.  v2:= 1I;
  #L4ae0ca.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.h` @type ^`boolean` := v2 @kind boolean;
  #L4ae0ce.  return v0;
  #L4ae0d0.  v2:= 0I;
  #L4ae0d2.  return v2;
}
