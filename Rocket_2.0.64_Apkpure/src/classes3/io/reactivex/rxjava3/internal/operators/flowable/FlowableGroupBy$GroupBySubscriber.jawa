record `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.d` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.f` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @AccessFlag FINAL;
  `java.util.Queue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.h` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.j` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.k` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.l` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.m` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.n` @AccessFlag ;
}
global `java.lang.Object` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.o` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L494fb0.  v0:= new `java.lang.Object`;
  #L494fb4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L494fba.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.o` @type ^`java.lang.Object` := v0 @kind object;
  #L494fbe.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object, `io.reactivex.rxjava3.functions.Function` v4 @kind object, `io.reactivex.rxjava3.functions.Function` v5 @kind object, `int` v6 , `boolean` v7 , `java.util.Map` v8 @kind object, `java.util.Queue` v9 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/Function;IZLjava/util/Map;Ljava/util/Queue;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L494fd0.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L494fd6.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L494fda.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L494fe0.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L494fe4.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L494fe8.  v1:= 1I;
  #L494fea.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L494ff0.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.l` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L494ff4.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L494ff8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L494ffe.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.m` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L495002.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.a` @type ^`org.reactivestreams.Subscriber` := v3 @kind object;
  #L495006.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.b` @type ^`io.reactivex.rxjava3.functions.Function` := v4 @kind object;
  #L49500a.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.c` @type ^`io.reactivex.rxjava3.functions.Function` := v5 @kind object;
  #L49500e.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.d` @type ^`int` := v6;
  #L495012.  v3:= v6 ^> 2;
  #L495016.  v6:= v6 - v3 @kind int;
  #L495018.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.e` @type ^`int` := v6;
  #L49501c.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.f` @type ^`boolean` := v7 @kind boolean;
  #L495020.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`java.util.Map` := v8 @kind object;
  #L495024.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.h` @type ^`java.util.Queue` := v9 @kind object;
  #L495028.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4950cc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.h` @type ^`java.util.Queue` @kind object;
  #L4950d0.  if v0 == 0 then goto L495110;
  #L4950d4.  v0:= 0I;
  #L4950d6.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.h` @type ^`java.util.Queue` @kind object;
  #L4950da.  call temp:= `poll`(v1) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4950e0.  v1:= temp @kind object;
  #L4950e2.  v1:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$b`) v1 @kind object;
  #L4950e6.  if v1 == 0 then goto L495100;
  #L4950ea.  v1:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` @kind object;
  #L4950ee.  call temp:= `m`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.m:()Z` @kind virtual;
  #L4950f4.  v1:= temp;
  #L4950f6.  if v1 == 0 then goto L4950d6;
  #L4950fa.  v0:= v0 + 1;
  #L4950fe.  goto L4950d6;
  #L495100.  if v0 == 0 then goto L495110;
  #L495104.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L495108.  v0:= -v0 @kind int;
  #L49510a.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L495110.  return @kind void;
}
procedure `java.lang.String` `b`(`long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.b:(J)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L494f70.  v0:= new `java.lang.StringBuilder`;
  #L494f74.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L494f7a.  v1:= "Unable to emit a new group (#" @kind object;
  #L494f7e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L494f84.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L494f8a.  v2:= ") due to lack of requests. Please make sure the downstream can always accept a new group as well as each group is consumed in order for the whole operator to be able to proceed." @kind object;
  #L494f8e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L494f94.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L494f9a.  v2:= temp @kind object;
  #L494f9c.  return v2 @kind object;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.c:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L495420.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.m` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L495424.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.e` @type ^`int`;
  #L495428.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49542e.  v2:= temp @kind wide;
  #L495430.  call temp:= `addCap`(v2, v7) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L495436.  v4:= temp @kind wide;
  #L495438.  call temp:= `compareAndSet`(v0, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L49543e.  v2:= temp;
  #L495440.  if v2 == 0 then goto L495428;
  #L495444.  v7:= (`long`) v1 @kind i2l;
  #L495446.  v2:= lcmp(v4, v7);
  #L49544a.  if v2 >= 0 then goto L495450;
  #L49544e.  return @kind void;
  #L495450.  v2:= v4 - v7 @kind long;
  #L495454.  call temp:= `compareAndSet`(v0, v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L49545a.  v2:= temp;
  #L49545c.  if v2 == 0 then goto L49546a;
  #L495460.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L495464.  call `request`(v2, v7) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L49546a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L495470.  v4:= temp @kind wide;
  #L495472.  goto L495444;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49503c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L495040.  v1:= 0I;
  #L495042.  v2:= 1I;
  #L495044.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L49504a.  v0:= temp;
  #L49504c.  if v0 == 0 then goto L495070;
  #L495050.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.a:()V` @kind direct;
  #L495056.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L49505a.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L495060.  v0:= temp;
  #L495062.  if v0 != 0 then goto L495070;
  #L495066.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49506a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L495070.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.cancel:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L495084.  if v2 == 0 then goto L49508a;
  #L495088.  goto L49508e;
  #L49508a.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.o` @type ^`java.lang.Object` @kind object;
  #L49508e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`java.util.Map` @kind object;
  #L495092.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L495098.  v2:= temp @kind object;
  #L49509a.  if v2 == 0 then goto L4950b8;
  #L49509e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4950a2.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4950a8.  v2:= temp;
  #L4950aa.  if v2 != 0 then goto L4950b8;
  #L4950ae.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4950b2.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4950b8.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L495124.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.n` @type ^`boolean` @kind boolean;
  #L495128.  if v0 != 0 then goto L495180;
  #L49512c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`java.util.Map` @kind object;
  #L495130.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L495136.  v0:= temp @kind object;
  #L495138.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L49513e.  v0:= temp @kind object;
  #L495140.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L495146.  v1:= temp;
  #L495148.  if v1 == 0 then goto L495160;
  #L49514c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L495152.  v1:= temp @kind object;
  #L495154.  v1:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$b`) v1 @kind object;
  #L495158.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$b;.onComplete:()V` @kind virtual;
  #L49515e.  goto L495140;
  #L495160.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`java.util.Map` @kind object;
  #L495164.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L49516a.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.a:()V` @kind direct;
  #L495170.  v0:= 1I;
  #L495172.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.n` @type ^`boolean` := v0 @kind boolean;
  #L495176.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49517a.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L495180.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L495194.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.n` @type ^`boolean` @kind boolean;
  #L495198.  if v0 == 0 then goto L4951a4;
  #L49519c.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4951a2.  return @kind void;
  #L4951a4.  v0:= 1I;
  #L4951a6.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.n` @type ^`boolean` := v0 @kind boolean;
  #L4951aa.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`java.util.Map` @kind object;
  #L4951ae.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4951b4.  v0:= temp @kind object;
  #L4951b6.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4951bc.  v0:= temp @kind object;
  #L4951be.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4951c4.  v1:= temp;
  #L4951c6.  if v1 == 0 then goto L4951de;
  #L4951ca.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4951d0.  v1:= temp @kind object;
  #L4951d2.  v1:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$b`) v1 @kind object;
  #L4951d6.  call `onError`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4951dc.  goto L4951be;
  #L4951de.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`java.util.Map` @kind object;
  #L4951e2.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4951e8.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.a:()V` @kind direct;
  #L4951ee.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4951f2.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4951f8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49520c.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.n` @type ^`boolean` @kind boolean;
  #L495210.  if v0 == 0 then goto L495216;
  #L495214.  return @kind void;
  #L495216.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L49521a.  call temp:= `apply`(v0, v7) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L495220.  v0:= temp @kind object;
  #L495222.  v1:= 0I;
  #L495224.  if v0 == 0 then goto L49522c;
  #L495228.  v2:= v0 @kind object;
  #L49522a.  goto L495230;
  #L49522c.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.o` @type ^`java.lang.Object` @kind object;
  #L495230.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`java.util.Map` @kind object;
  #L495234.  call temp:= `get`(v3, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L49523a.  v3:= temp @kind object;
  #L49523c.  v3:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$b`) v3 @kind object;
  #L495240.  if v3 != 0 then goto L49527c;
  #L495244.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L495248.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L49524e.  v1:= temp;
  #L495250.  if v1 == 0 then goto L495256;
  #L495254.  return @kind void;
  #L495256.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.d` @type ^`int`;
  #L49525a.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.f` @type ^`boolean` @kind boolean;
  #L49525e.  call temp:= `e`(v0, v1, v6, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$b;.e:(Ljava/lang/Object;ILio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;Z)Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$b;` @kind static;
  #L495264.  v3:= temp @kind object;
  #L495266.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`java.util.Map` @kind object;
  #L49526a.  call temp:= `put`(v1, v2, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L495270.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L495274.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L49527a.  v1:= 1I;
  #L49527c.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.c` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L495280.  call temp:= `apply`(v2, v7) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L495286.  v7:= temp @kind object;
  #L495288.  v2:= "The valueSelector returned a null value." @kind object;
  #L49528c.  call temp:= `nullCheck`(v7, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L495292.  v7:= temp @kind object;
  #L495294.  call `onNext`(v3, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$b;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49529a.  call `a`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.a:()V` @kind direct;
  #L4952a0.  if v1 == 0 then goto L49531a;
  #L4952a4.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.k` @type ^`long` @kind wide;
  #L4952a8.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4952ae.  v4:= temp @kind wide;
  #L4952b0.  v7:= lcmp(v1, v4);
  #L4952b4.  if v7 == 0 then goto L4952f4;
  #L4952b8.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.k` @type ^`long` @kind wide;
  #L4952bc.  v4:= 1L;
  #L4952c0.  v1:= v1 + v4 @kind long;
  #L4952c2.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.k` @type ^`long` := v1 @kind wide;
  #L4952c6.  v7:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4952ca.  call `onNext`(v7, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4952d0.  v7:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` @kind object;
  #L4952d4.  call temp:= `l`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.l:()Z` @kind virtual;
  #L4952da.  v7:= temp;
  #L4952dc.  if v7 == 0 then goto L49531a;
  #L4952e0.  call `cancel`(v6, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.cancel:(Ljava/lang/Object;)V` @kind virtual;
  #L4952e6.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$b;.onComplete:()V` @kind virtual;
  #L4952ec.  call `c`(v6, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.c:(J)V` @kind virtual;
  #L4952f2.  goto L49531a;
  #L4952f4.  v7:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4952f8.  call `cancel`(v7) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4952fe.  v7:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L495302.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.k` @type ^`long` @kind wide;
  #L495306.  call temp:= `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.b:(J)Ljava/lang/String;` @kind static;
  #L49530c.  v0:= temp @kind object;
  #L49530e.  call `<init>`(v7, v0) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L495314.  call `onError`(v6, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49531a.  return @kind void;
  #L49531c.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49531e.  call `throwIfFatal`(v7) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L495324.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L495328.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L49532e.  if v1 == 0 then goto L495376;
  #L495332.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.k` @type ^`long` @kind wide;
  #L495336.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49533c.  v4:= temp @kind wide;
  #L49533e.  v2:= lcmp(v0, v4);
  #L495342.  if v2 == 0 then goto L495352;
  #L495346.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49534a.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L495350.  goto L495376;
  #L495352.  v0:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L495356.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.k` @type ^`long` @kind wide;
  #L49535a.  call temp:= `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.b:(J)Ljava/lang/String;` @kind static;
  #L495360.  v1:= temp @kind object;
  #L495362.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L495368.  call temp:= `initCause`(v0, v7) @signature `Ljava/lang/RuntimeException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L49536e.  call `onError`(v6, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L495374.  return @kind void;
  #L495376.  call `onError`(v6, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49537c.  return @kind void;
  #L49537e.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L495380.  call `throwIfFatal`(v7) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L495386.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49538a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L495390.  call `onError`(v6, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L495396.  return @kind void;
  catch `java.lang.Throwable` @[L495216..L495222] goto L49537e;
  catch `java.lang.Throwable` @[L49527c..L495294] goto L49531c;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4953c0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4953c4.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4953ca.  v0:= temp;
  #L4953cc.  if v0 == 0 then goto L4953ea;
  #L4953d0.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4953d4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4953d8.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4953de.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.d` @type ^`int`;
  #L4953e2.  v0:= (`long`) v0 @kind i2l;
  #L4953e4.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4953ea.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4953fc.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L495402.  v0:= temp;
  #L495404.  if v0 == 0 then goto L49540e;
  #L495408.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L49540e.  return @kind void;
}
