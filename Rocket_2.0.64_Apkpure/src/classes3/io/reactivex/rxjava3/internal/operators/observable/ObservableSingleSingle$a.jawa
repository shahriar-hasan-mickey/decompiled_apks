record `io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.SingleObserver` `io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.a` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.c` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a` v0 @kind this, `io.reactivex.rxjava3.core.SingleObserver` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSingleSingle$a;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c8954.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c895a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` := v1 @kind object;
  #L4c895e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.b` @type ^`java.lang.Object` := v2 @kind object;
  #L4c8962.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSingleSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c8974.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c8978.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c897e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSingleSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c8934.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c8938.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4c893e.  v0:= temp;
  #L4c8940.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSingleSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c8990.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.e` @type ^`boolean` @kind boolean;
  #L4c8994.  if v0 == 0 then goto L4c899a;
  #L4c8998.  return @kind void;
  #L4c899a.  v0:= 1I;
  #L4c899c.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4c89a0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.d` @type ^`java.lang.Object` @kind object;
  #L4c89a4.  v1:= 0I;
  #L4c89a6.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.d` @type ^`java.lang.Object` := v1 @kind object;
  #L4c89aa.  if v0 != 0 then goto L4c89b2;
  #L4c89ae.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.b` @type ^`java.lang.Object` @kind object;
  #L4c89b2.  if v0 == 0 then goto L4c89c2;
  #L4c89b6.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4c89ba.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4c89c0.  goto L4c89d6;
  #L4c89c2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4c89c6.  v1:= new `java.util.NoSuchElementException`;
  #L4c89ca.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L4c89d0.  call `onError`(v0, v1) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c89d6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSingleSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c89e8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.e` @type ^`boolean` @kind boolean;
  #L4c89ec.  if v0 == 0 then goto L4c89f8;
  #L4c89f0.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c89f6.  return @kind void;
  #L4c89f8.  v0:= 1I;
  #L4c89fa.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4c89fe.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4c8a02.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c8a08.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSingleSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c8a1c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.e` @type ^`boolean` @kind boolean;
  #L4c8a20.  if v0 == 0 then goto L4c8a26;
  #L4c8a24.  return @kind void;
  #L4c8a26.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.d` @type ^`java.lang.Object` @kind object;
  #L4c8a2a.  if v0 == 0 then goto L4c8a58;
  #L4c8a2e.  v3:= 1I;
  #L4c8a30.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.e` @type ^`boolean` := v3 @kind boolean;
  #L4c8a34.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c8a38.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c8a3e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4c8a42.  v0:= new `java.lang.IllegalArgumentException`;
  #L4c8a46.  v1:= "Sequence contains more than one element!" @kind object;
  #L4c8a4a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c8a50.  call `onError`(v3, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c8a56.  return @kind void;
  #L4c8a58.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.d` @type ^`java.lang.Object` := v3 @kind object;
  #L4c8a5c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSingleSingle$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c8a70.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c8a74.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4c8a7a.  v0:= temp;
  #L4c8a7c.  if v0 == 0 then goto L4c8a8e;
  #L4c8a80.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4c8a84.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4c8a88.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4c8a8e.  return @kind void;
}
