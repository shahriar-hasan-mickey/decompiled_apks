record `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a$a` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.f` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.k` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.l` @AccessFlag VOLATILE;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.m` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.n` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4989a0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4989a6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4989aa.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4989ae.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4989b4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4989b8.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a$a`;
  #L4989bc.  call `<init>`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;)V` @kind direct;
  #L4989c2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a$a` := v2 @kind object;
  #L4989c6.  v2:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4989ca.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4989d0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v2 @kind object;
  #L4989d4.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4989d8.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4989de.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L4989e2.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L4989e8.  v2:= temp;
  #L4989ea.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.f` @type ^`int` := v2;
  #L4989ee.  v0:= v2 ^> 2;
  #L4989f2.  v2:= v2 - v0 @kind int;
  #L4989f4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.g` @type ^`int` := v2;
  #L4989f8.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L498a58.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L498a5e.  v0:= temp;
  #L498a60.  if v0 != 0 then goto L498a6a;
  #L498a64.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.b:()V` @kind virtual;
  #L498a6a.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a` v18 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L498a7c.  v0:= v18 @kind object;
  #L498a80.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L498a84.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.m` @type ^`long` @kind wide;
  #L498a88.  v4:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.n` @type ^`int`;
  #L498a8c.  v5:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.g` @type ^`int`;
  #L498a90.  v6:= 1I;
  #L498a92.  v7:= 1I;
  #L498a94.  v8:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L498a98.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L498a9e.  v8:= temp @kind wide;
  #L498aa0.  v11:= 2I;
  #L498aa2.  v12:= 0I;
  #L498aa4.  v13:= lcmp(v2, v8);
  #L498aa8.  if v13 == 0 then goto L498b7a;
  #L498aac.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.j` @type ^`boolean` @kind boolean;
  #L498ab0.  if v14 == 0 then goto L498abe;
  #L498ab4.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L498ab8.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L498abc.  return @kind void;
  #L498abe.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L498ac2.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L498ac8.  v14:= temp @kind object;
  #L498aca.  if v14 == 0 then goto L498ae6;
  #L498ace.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L498ad2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L498ad6.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L498ada.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L498ade.  call `tryTerminateConsumer`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L498ae4.  return @kind void;
  #L498ae6.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.l` @type ^`int`;
  #L498aea.  v15:= 1L;
  #L498aee.  if v14 != v6 then goto L498b08;
  #L498af2.  v10:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @type ^`java.lang.Object` @kind object;
  #L498af6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L498afa.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.l` @type ^`int` := v11;
  #L498afe.  call `onNext`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L498b04.  v2:= v2 + v15 @kind long;
  #L498b06.  goto L498aa0;
  #L498b08.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.k` @type ^`boolean` @kind boolean;
  #L498b0c.  v10:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L498b10.  if v10 == 0 then goto L498b1e;
  #L498b14.  call temp:= `poll`(v10) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L498b1a.  v10:= temp @kind object;
  #L498b1c.  goto L498b20;
  #L498b1e.  v10:= v12 @kind object;
  #L498b20.  if v10 != 0 then goto L498b2a;
  #L498b24.  v17:= 1I;
  #L498b28.  goto L498b2e;
  #L498b2a.  v17:= 0I;
  #L498b2e.  if v6 == 0 then goto L498b46;
  #L498b32.  if v17 == 0 then goto L498b46;
  #L498b36.  if v14 != v11 then goto L498b46;
  #L498b3a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L498b3e.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L498b44.  return @kind void;
  #L498b46.  if v17 == 0 then goto L498b4c;
  #L498b4a.  goto L498b7a;
  #L498b4c.  call `onNext`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L498b52.  v2:= v2 + v15 @kind long;
  #L498b54.  v4:= v4 + 1;
  #L498b58.  if v4 != v5 then goto L498b76;
  #L498b5c.  v4:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L498b60.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L498b66.  v4:= temp @kind object;
  #L498b68.  v4:= (`org.reactivestreams.Subscription`) v4 @kind object;
  #L498b6c.  v10:= (`long`) v5 @kind i2l;
  #L498b6e.  call `request`(v4, v10) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L498b74.  v4:= 0I;
  #L498b76.  v6:= 1I;
  #L498b78.  goto L498aa0;
  #L498b7a.  if v13 != 0 then goto L498bf4;
  #L498b7e.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.j` @type ^`boolean` @kind boolean;
  #L498b82.  if v6 == 0 then goto L498b90;
  #L498b86.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L498b8a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L498b8e.  return @kind void;
  #L498b90.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L498b94.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L498b9a.  v6:= temp @kind object;
  #L498b9c.  if v6 == 0 then goto L498bb8;
  #L498ba0.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L498ba4.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L498ba8.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L498bac.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L498bb0.  call `tryTerminateConsumer`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L498bb6.  return @kind void;
  #L498bb8.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.k` @type ^`boolean` @kind boolean;
  #L498bbc.  v8:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L498bc0.  if v8 == 0 then goto L498bd6;
  #L498bc4.  call temp:= `isEmpty`(v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L498bca.  v8:= temp;
  #L498bcc.  if v8 == 0 then goto L498bd2;
  #L498bd0.  goto L498bd6;
  #L498bd2.  v10:= 0I;
  #L498bd4.  goto L498bd8;
  #L498bd6.  v10:= 1I;
  #L498bd8.  if v6 == 0 then goto L498bf4;
  #L498bdc.  if v10 == 0 then goto L498bf4;
  #L498be0.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.l` @type ^`int`;
  #L498be4.  if v6 != v11 then goto L498bf4;
  #L498be8.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L498bec.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L498bf2.  return @kind void;
  #L498bf4.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.m` @type ^`long` := v2 @kind wide;
  #L498bf8.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.n` @type ^`int` := v4;
  #L498bfc.  v6:= -v7 @kind int;
  #L498bfe.  call temp:= `addAndGet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L498c04.  v7:= temp;
  #L498c06.  if v7 != 0 then goto L498c0c;
  #L498c0a.  return @kind void;
  #L498c0c.  v6:= 1I;
  #L498c0e.  goto L498a94;
}
procedure `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.c:()Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L498970.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L498974.  if v0 != 0 then goto L49898e;
  #L498978.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L49897c.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L498982.  v1:= temp;
  #L498984.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L49898a.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L49898e.  return v0 @kind object;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L498a0c.  v0:= 1I;
  #L498a0e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.j` @type ^`boolean` := v0 @kind boolean;
  #L498a12.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L498a16.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L498a1c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a$a` @kind object;
  #L498a20.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L498a26.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L498a2a.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L498a30.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L498a36.  v0:= temp;
  #L498a38.  if v0 != 0 then goto L498a46;
  #L498a3c.  v0:= 0I;
  #L498a3e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L498a42.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @type ^`java.lang.Object` := v0 @kind object;
  #L498a46.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L498d78.  v0:= 2I;
  #L498d7a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.l` @type ^`int` := v0;
  #L498d7e.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.a:()V` @kind virtual;
  #L498d84.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.e:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L498d98.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L498d9c.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L498da2.  v2:= temp;
  #L498da4.  if v2 == 0 then goto L498db8;
  #L498da8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L498dac.  call temp:= `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L498db2.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.a:()V` @kind virtual;
  #L498db8.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.f:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L498dcc.  v0:= 0I;
  #L498dce.  v1:= 1I;
  #L498dd0.  call temp:= `compareAndSet`(v6, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L498dd6.  v0:= temp;
  #L498dd8.  if v0 == 0 then goto L498e26;
  #L498ddc.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.m` @type ^`long` @kind wide;
  #L498de0.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L498de4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L498dea.  v4:= temp @kind wide;
  #L498dec.  v0:= lcmp(v4, v2);
  #L498df0.  if v0 == 0 then goto L498e10;
  #L498df4.  v0:= 1L;
  #L498df8.  v2:= v2 + v0 @kind long;
  #L498dfa.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.m` @type ^`long` := v2 @kind wide;
  #L498dfe.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L498e02.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L498e08.  v7:= 2I;
  #L498e0a.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.l` @type ^`int` := v7;
  #L498e0e.  goto L498e3c;
  #L498e10.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @type ^`java.lang.Object` := v7 @kind object;
  #L498e14.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.l` @type ^`int` := v1;
  #L498e18.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L498e1e.  v7:= temp;
  #L498e20.  if v7 != 0 then goto L498e3c;
  #L498e24.  return @kind void;
  #L498e26.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @type ^`java.lang.Object` := v7 @kind object;
  #L498e2a.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.l` @type ^`int` := v1;
  #L498e2e.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L498e34.  v7:= temp;
  #L498e36.  if v7 == 0 then goto L498e3c;
  #L498e3a.  return @kind void;
  #L498e3c.  call `b`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.b:()V` @kind virtual;
  #L498e42.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L498c24.  v0:= 1I;
  #L498c26.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.k` @type ^`boolean` := v0 @kind boolean;
  #L498c2a.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.a:()V` @kind virtual;
  #L498c30.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L498c44.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L498c48.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L498c4e.  v2:= temp;
  #L498c50.  if v2 == 0 then goto L498c64;
  #L498c54.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a$a` @kind object;
  #L498c58.  call temp:= `dispose`(v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L498c5e.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.a:()V` @kind virtual;
  #L498c64.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L498c78.  v0:= 0I;
  #L498c7a.  v1:= 1I;
  #L498c7c.  call temp:= `compareAndSet`(v7, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L498c82.  v2:= temp;
  #L498c84.  if v2 == 0 then goto L498d20;
  #L498c88.  v2:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.m` @type ^`long` @kind wide;
  #L498c8c.  v4:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L498c90.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L498c96.  v4:= temp @kind wide;
  #L498c98.  v6:= lcmp(v4, v2);
  #L498c9c.  if v6 == 0 then goto L498d04;
  #L498ca0.  v4:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L498ca4.  if v4 == 0 then goto L498cbe;
  #L498ca8.  call temp:= `isEmpty`(v4) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L498cae.  v5:= temp;
  #L498cb0.  if v5 == 0 then goto L498cb6;
  #L498cb4.  goto L498cbe;
  #L498cb6.  call temp:= `offer`(v4, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L498cbc.  goto L498d12;
  #L498cbe.  v4:= 1L;
  #L498cc2.  v2:= v2 + v4 @kind long;
  #L498cc4.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.m` @type ^`long` := v2 @kind wide;
  #L498cc8.  v2:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L498ccc.  call `onNext`(v2, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L498cd2.  v8:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.n` @type ^`int`;
  #L498cd6.  v8:= v8 + v1 @kind int;
  #L498cd8.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.g` @type ^`int`;
  #L498cdc.  if v8 != v1 then goto L498cfe;
  #L498ce0.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.n` @type ^`int` := v0;
  #L498ce4.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L498ce8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L498cee.  v0:= temp @kind object;
  #L498cf0.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L498cf4.  v1:= (`long`) v8 @kind i2l;
  #L498cf6.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L498cfc.  goto L498d12;
  #L498cfe.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.n` @type ^`int` := v8;
  #L498d02.  goto L498d12;
  #L498d04.  call temp:= `c`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.c:()Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L498d0a.  v0:= temp @kind object;
  #L498d0c.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L498d12.  call temp:= `decrementAndGet`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L498d18.  v8:= temp;
  #L498d1a.  if v8 != 0 then goto L498d3c;
  #L498d1e.  return @kind void;
  #L498d20.  call temp:= `c`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.c:()Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L498d26.  v0:= temp @kind object;
  #L498d28.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L498d2e.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L498d34.  v8:= temp;
  #L498d36.  if v8 == 0 then goto L498d3c;
  #L498d3a.  return @kind void;
  #L498d3c.  call `b`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.b:()V` @kind virtual;
  #L498d42.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L498d54.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L498d58.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.f` @type ^`int`;
  #L498d5c.  v1:= (`long`) v1 @kind i2l;
  #L498d5e.  call temp:= `setOnce`(v0, v4, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L498d64.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L498e54.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L498e58.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L498e5e.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.a:()V` @kind virtual;
  #L498e64.  return @kind void;
}
