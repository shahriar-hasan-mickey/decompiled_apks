record `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.f` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.h` @AccessFlag VOLATILE;
}
global `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a` `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.i` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4b47cc.  v0:= new `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a`;
  #L4b47d0.  v1:= 0I;
  #L4b47d2.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;)V` @kind direct;
  #L4b47d8.  `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.i` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a` := v0 @kind object;
  #L4b47dc.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b47f0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4b47f6.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4b47fa.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4b47fe.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.c` @type ^`boolean` := v3 @kind boolean;
  #L4b4802.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4b4806.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4b480c.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4b4810.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4b4814.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b481a.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4b481e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4b4864.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b4868.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.i` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a` @kind object;
  #L4b486c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4b4872.  v0:= temp @kind object;
  #L4b4874.  v0:= (`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a`) v0 @kind object;
  #L4b4878.  if v0 == 0 then goto L4b4886;
  #L4b487c.  if v0 == v1 then goto L4b4886;
  #L4b4880.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a$a;.a:()V` @kind virtual;
  #L4b4886.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a` v8 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4b4898.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4b489e.  v0:= temp;
  #L4b48a0.  if v0 == 0 then goto L4b48a6;
  #L4b48a4.  return @kind void;
  #L4b48a6.  v0:= v8.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b48aa.  v1:= v8.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b48ae.  v2:= v8.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b48b2.  v3:= 1I;
  #L4b48b4.  v4:= 1I;
  #L4b48b6.  v5:= v8.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.h` @type ^`boolean` @kind boolean;
  #L4b48ba.  if v5 == 0 then goto L4b48c0;
  #L4b48be.  return @kind void;
  #L4b48c0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b48c6.  v5:= temp @kind object;
  #L4b48c8.  if v5 == 0 then goto L4b48dc;
  #L4b48cc.  v5:= v8.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.c` @type ^`boolean` @kind boolean;
  #L4b48d0.  if v5 != 0 then goto L4b48dc;
  #L4b48d4.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4b48da.  return @kind void;
  #L4b48dc.  v5:= v8.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.g` @type ^`boolean` @kind boolean;
  #L4b48e0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b48e6.  v6:= temp @kind object;
  #L4b48e8.  v6:= (`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a`) v6 @kind object;
  #L4b48ec.  if v6 != 0 then goto L4b48f4;
  #L4b48f0.  v7:= 1I;
  #L4b48f2.  goto L4b48f6;
  #L4b48f4.  v7:= 0I;
  #L4b48f6.  if v5 == 0 then goto L4b4906;
  #L4b48fa.  if v7 == 0 then goto L4b4906;
  #L4b48fe.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4b4904.  return @kind void;
  #L4b4906.  if v7 != 0 then goto L4b4928;
  #L4b490a.  v5:= v6.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a.b` @type ^`java.lang.Object` @kind object;
  #L4b490e.  if v5 != 0 then goto L4b4914;
  #L4b4912.  goto L4b4928;
  #L4b4914.  v5:= 0I;
  #L4b4916.  call temp:= `compareAndSet`(v2, v6, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b491c.  v5:= v6.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a.b` @type ^`java.lang.Object` @kind object;
  #L4b4920.  call `onNext`(v0, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b4926.  goto L4b48b6;
  #L4b4928.  v4:= -v4 @kind int;
  #L4b492a.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4b4930.  v4:= temp;
  #L4b4932.  if v4 != 0 then goto L4b48b6;
  #L4b4936.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.c:(Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4b4948.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b494c.  v1:= 0I;
  #L4b494e.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b4954.  v3:= temp;
  #L4b4956.  if v3 == 0 then goto L4b4960;
  #L4b495a.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.b:()V` @kind virtual;
  #L4b4960.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.d:(Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4b4974.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b4978.  v1:= 0I;
  #L4b497a.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b4980.  v3:= temp;
  #L4b4982.  if v3 == 0 then goto L4b49b6;
  #L4b4986.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b498a.  call temp:= `tryAddThrowableOrReport`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b4990.  v3:= temp;
  #L4b4992.  if v3 == 0 then goto L4b49bc;
  #L4b4996.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.c` @type ^`boolean` @kind boolean;
  #L4b499a.  if v3 != 0 then goto L4b49ae;
  #L4b499e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b49a2.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b49a8.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.a:()V` @kind virtual;
  #L4b49ae.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.b:()V` @kind virtual;
  #L4b49b4.  goto L4b49bc;
  #L4b49b6.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b49bc.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b4830.  v0:= 1I;
  #L4b4832.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4b4836.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b483a.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b4840.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.a:()V` @kind virtual;
  #L4b4846.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b484a.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4b4850.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b47b4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.h` @type ^`boolean` @kind boolean;
  #L4b47b8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b49d0.  v0:= 1I;
  #L4b49d2.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4b49d6.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.b:()V` @kind virtual;
  #L4b49dc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b49f0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b49f4.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b49fa.  v2:= temp;
  #L4b49fc.  if v2 == 0 then goto L4b4a1a;
  #L4b4a00.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.c` @type ^`boolean` @kind boolean;
  #L4b4a04.  if v2 != 0 then goto L4b4a0e;
  #L4b4a08.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.a:()V` @kind virtual;
  #L4b4a0e.  v2:= 1I;
  #L4b4a10.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.g` @type ^`boolean` := v2 @kind boolean;
  #L4b4a14.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.b:()V` @kind virtual;
  #L4b4a1a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b4a2c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b4a30.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b4a36.  v0:= temp @kind object;
  #L4b4a38.  v0:= (`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a`) v0 @kind object;
  #L4b4a3c.  if v0 == 0 then goto L4b4a46;
  #L4b4a40.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a$a;.a:()V` @kind virtual;
  #L4b4a46.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4b4a4a.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b4a50.  v4:= temp @kind object;
  #L4b4a52.  v0:= "The mapper returned a null MaybeSource" @kind object;
  #L4b4a56.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b4a5c.  v4:= (`io.reactivex.rxjava3.core.MaybeSource`) v4 @kind object;
  #L4b4a60.  v0:= new `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a`;
  #L4b4a64.  call `<init>`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;)V` @kind direct;
  #L4b4a6a.  v1:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b4a6e.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b4a74.  v1:= temp @kind object;
  #L4b4a76.  v1:= (`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a`) v1 @kind object;
  #L4b4a7a.  v2:= `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.i` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a` @kind object;
  #L4b4a7e.  if v1 != v2 then goto L4b4a84;
  #L4b4a82.  goto L4b4a9a;
  #L4b4a84.  v2:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b4a88.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b4a8e.  v1:= temp;
  #L4b4a90.  if v1 == 0 then goto L4b4a6a;
  #L4b4a94.  call `subscribe`(v4, v0) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4b4a9a.  return @kind void;
  #L4b4a9c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b4a9e.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b4aa4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b4aa8.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b4aae.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b4ab2.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.i` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a` @kind object;
  #L4b4ab6.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4b4abc.  call `onError`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b4ac2.  return @kind void;
  catch `java.lang.Throwable` @[L4b4a46..L4b4a60] goto L4b4a9c;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b4ae0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b4ae4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b4aea.  v0:= temp;
  #L4b4aec.  if v0 == 0 then goto L4b4afe;
  #L4b4af0.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4b4af4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b4af8.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4b4afe.  return @kind void;
}
