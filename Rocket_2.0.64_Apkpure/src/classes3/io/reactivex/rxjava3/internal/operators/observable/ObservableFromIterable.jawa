record `io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Observable` @kind class {
  `java.lang.Iterable` `io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable` v0 @kind this, `java.lang.Iterable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFromIterable;.<init>:(Ljava/lang/Iterable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4bfb50.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Observable;.<init>:()V` @kind direct;
  #L4bfb56.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable.a` @type ^`java.lang.Iterable` := v1 @kind object;
  #L4bfb5a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable` v2 @kind this, `io.reactivex.rxjava3.core.Observer` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFromIterable;.subscribeActual:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bfb6c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable.a` @type ^`java.lang.Iterable` @kind object;
  #L4bfb70.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4bfb76.  v0:= temp @kind object;
  #L4bfb78.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4bfb7e.  v1:= temp;
  #L4bfb80.  if v1 != 0 then goto L4bfb8c;
  #L4bfb84.  call `complete`(v3) @signature `Lio/reactivex/rxjava3/internal/disposables/EmptyDisposable;.complete:(Lio/reactivex/rxjava3/core/Observer;)V` @kind static;
  #L4bfb8a.  return @kind void;
  #L4bfb8c.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a`;
  #L4bfb90.  call `<init>`(v1, v3, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFromIterable$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Ljava/util/Iterator;)V` @kind direct;
  #L4bfb96.  call `onSubscribe`(v3, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4bfb9c.  v3:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.d` @type ^`boolean` @kind boolean;
  #L4bfba0.  if v3 != 0 then goto L4bfbaa;
  #L4bfba4.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFromIterable$a;.a:()V` @kind virtual;
  #L4bfbaa.  return @kind void;
  #L4bfbac.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bfbae.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bfbb4.  call `error`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/Observer;)V` @kind static;
  #L4bfbba.  return @kind void;
  #L4bfbbc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bfbbe.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bfbc4.  call `error`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/Observer;)V` @kind static;
  #L4bfbca.  return @kind void;
  catch `java.lang.Throwable` @[L4bfb6c..L4bfb78] goto L4bfbbc;
  catch `java.lang.Throwable` @[L4bfb78..L4bfb80] goto L4bfbac;
}
