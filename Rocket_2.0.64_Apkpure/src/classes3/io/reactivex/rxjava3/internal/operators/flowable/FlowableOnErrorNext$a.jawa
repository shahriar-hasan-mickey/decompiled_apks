record `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.h` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.i` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.j` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.k` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.l` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnErrorNext$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L49afd0.  v0:= 0I;
  #L49afd2.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.<init>:(Z)V` @kind direct;
  #L49afd8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.h` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L49afdc.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.i` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L49afe0.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnErrorNext$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49aff4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.k` @type ^`boolean` @kind boolean;
  #L49aff8.  if v0 == 0 then goto L49affe;
  #L49affc.  return @kind void;
  #L49affe.  v0:= 1I;
  #L49b000.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.k` @type ^`boolean` := v0 @kind boolean;
  #L49b004.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.j` @type ^`boolean` := v0 @kind boolean;
  #L49b008.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49b00c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49b012.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnErrorNext$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49b024.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.j` @type ^`boolean` @kind boolean;
  #L49b028.  if v0 == 0 then goto L49b048;
  #L49b02c.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.k` @type ^`boolean` @kind boolean;
  #L49b030.  if v0 == 0 then goto L49b03c;
  #L49b034.  call `onError`(v7) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L49b03a.  return @kind void;
  #L49b03c.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49b040.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49b046.  return @kind void;
  #L49b048.  v0:= 1I;
  #L49b04a.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.j` @type ^`boolean` := v0 @kind boolean;
  #L49b04e.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.i` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L49b052.  call temp:= `apply`(v1, v7) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L49b058.  v1:= temp @kind object;
  #L49b05a.  v2:= "The nextSupplier returned a null Publisher" @kind object;
  #L49b05e.  call temp:= `requireNonNull`(v1, v2) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49b064.  v1:= (`org.reactivestreams.Publisher`) v1 @kind object;
  #L49b068.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.l` @type ^`long` @kind wide;
  #L49b06c.  v4:= 0L;
  #L49b070.  v7:= lcmp(v2, v4);
  #L49b074.  if v7 == 0 then goto L49b07e;
  #L49b078.  call `produced`(v6, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L49b07e.  call `subscribe`(v1, v6) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L49b084.  return @kind void;
  #L49b086.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49b088.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49b08e.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49b092.  v3:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L49b096.  v4:= 2I;
  #L49b098.  v4:= new `java.lang.Throwable`[v4];
  #L49b09c.  v5:= 0I;
  #L49b09e.  v4[v5]:= v7 @kind object;
  #L49b0a2.  v4[v0]:= v1 @kind object;
  #L49b0a6.  call `<init>`(v3, v4) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L49b0ac.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49b0b2.  return @kind void;
  catch `java.lang.Throwable` @[L49b04e..L49b068] goto L49b086;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnErrorNext$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49b0d0.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.k` @type ^`boolean` @kind boolean;
  #L49b0d4.  if v0 == 0 then goto L49b0da;
  #L49b0d8.  return @kind void;
  #L49b0da.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.j` @type ^`boolean` @kind boolean;
  #L49b0de.  if v0 != 0 then goto L49b0f0;
  #L49b0e2.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.l` @type ^`long` @kind wide;
  #L49b0e6.  v2:= 1L;
  #L49b0ea.  v0:= v0 + v2 @kind long;
  #L49b0ec.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.l` @type ^`long` := v0 @kind wide;
  #L49b0f0.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49b0f4.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L49b0fa.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a` v0 @kind this, `org.reactivestreams.Subscription` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnErrorNext$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;

  #L49b10c.  call `setSubscription`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L49b112.  return @kind void;
}
