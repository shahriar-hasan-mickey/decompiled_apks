record `io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a` @kind class {
  `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` `io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$c.k` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$c` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `int` v2 , `io.reactivex.rxjava3.internal.queue.SpscArrayQueue` v3 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelRunOn$c;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;ILio/reactivex/rxjava3/internal/queue/SpscArrayQueue;Lio/reactivex/rxjava3/core/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d2e4c.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelRunOn$a;.<init>:(ILio/reactivex/rxjava3/internal/queue/SpscArrayQueue;Lio/reactivex/rxjava3/core/Scheduler$Worker;)V` @kind direct;
  #L4d2e52.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$c.k` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L4d2e56.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$c` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelRunOn$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d2e68.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d2e6c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d2e72.  v0:= temp;
  #L4d2e74.  if v0 == 0 then goto L4d2e92;
  #L4d2e78.  v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.e` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4d2e7c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$c.k` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4d2e80.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d2e86.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.a` @type ^`int`;
  #L4d2e8a.  v0:= (`long`) v0 @kind i2l;
  #L4d2e8c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d2e92.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$c` v18 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelRunOn$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L4d2ea4.  v0:= v18 @kind object;
  #L4d2ea8.  v1:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.j` @type ^`int`;
  #L4d2eac.  v2:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscArrayQueue` @kind object;
  #L4d2eb0.  v3:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$c.k` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4d2eb4.  v4:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.b` @type ^`int`;
  #L4d2eb8.  v5:= 1I;
  #L4d2eba.  v6:= 1I;
  #L4d2ebc.  v7:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d2ec0.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d2ec6.  v7:= temp @kind wide;
  #L4d2ec8.  v9:= 0L;
  #L4d2ecc.  v11:= v9 @kind wide;
  #L4d2ece.  v13:= lcmp(v11, v7);
  #L4d2ed2.  if v13 == 0 then goto L4d2f72;
  #L4d2ed6.  v14:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.i` @type ^`boolean` @kind boolean;
  #L4d2eda.  if v14 == 0 then goto L4d2ee6;
  #L4d2ede.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L4d2ee4.  return @kind void;
  #L4d2ee6.  v14:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.f` @type ^`boolean` @kind boolean;
  #L4d2eea.  if v14 == 0 then goto L4d2f0e;
  #L4d2eee.  v15:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.g` @type ^`java.lang.Throwable` @kind object;
  #L4d2ef2.  if v15 == 0 then goto L4d2f0e;
  #L4d2ef6.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L4d2efc.  call `onError`(v3, v15) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d2f02.  v1:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d2f06.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d2f0c.  return @kind void;
  #L4d2f0e.  call temp:= `poll`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4d2f14.  v15:= temp @kind object;
  #L4d2f16.  v16:= 0I;
  #L4d2f1a.  if v15 != 0 then goto L4d2f24;
  #L4d2f1e.  v17:= 1I;
  #L4d2f22.  goto L4d2f28;
  #L4d2f24.  v17:= 0I;
  #L4d2f28.  if v14 == 0 then goto L4d2f42;
  #L4d2f2c.  if v17 == 0 then goto L4d2f42;
  #L4d2f30.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d2f36.  v1:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d2f3a.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d2f40.  return @kind void;
  #L4d2f42.  if v17 == 0 then goto L4d2f48;
  #L4d2f46.  goto L4d2f72;
  #L4d2f48.  call temp:= `tryOnNext`(v3, v15) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4d2f4e.  v13:= temp;
  #L4d2f50.  if v13 == 0 then goto L4d2f5a;
  #L4d2f54.  v13:= 1L;
  #L4d2f58.  v11:= v11 + v13 @kind long;
  #L4d2f5a.  v1:= v1 + 1;
  #L4d2f5e.  if v1 != v4 then goto L4d2ece;
  #L4d2f62.  v13:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d2f66.  v14:= (`long`) v1 @kind i2l;
  #L4d2f68.  call `request`(v13, v14) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d2f6e.  v1:= 0I;
  #L4d2f70.  goto L4d2ece;
  #L4d2f72.  if v13 != 0 then goto L4d2fcc;
  #L4d2f76.  v7:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.i` @type ^`boolean` @kind boolean;
  #L4d2f7a.  if v7 == 0 then goto L4d2f86;
  #L4d2f7e.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L4d2f84.  return @kind void;
  #L4d2f86.  v7:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.f` @type ^`boolean` @kind boolean;
  #L4d2f8a.  if v7 == 0 then goto L4d2fcc;
  #L4d2f8e.  v7:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.g` @type ^`java.lang.Throwable` @kind object;
  #L4d2f92.  if v7 == 0 then goto L4d2fae;
  #L4d2f96.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L4d2f9c.  call `onError`(v3, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d2fa2.  v1:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d2fa6.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d2fac.  return @kind void;
  #L4d2fae.  call temp:= `isEmpty`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4d2fb4.  v7:= temp;
  #L4d2fb6.  if v7 == 0 then goto L4d2fcc;
  #L4d2fba.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d2fc0.  v1:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d2fc4.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d2fca.  return @kind void;
  #L4d2fcc.  v7:= lcmp(v11, v9);
  #L4d2fd0.  if v7 == 0 then goto L4d2fde;
  #L4d2fd4.  v7:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d2fd8.  call temp:= `produced`(v7, v11) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4d2fde.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.j` @type ^`int` := v1;
  #L4d2fe2.  v6:= -v6 @kind int;
  #L4d2fe4.  call temp:= `addAndGet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4d2fea.  v6:= temp;
  #L4d2fec.  if v6 != 0 then goto L4d2ebc;
  #L4d2ff0.  return @kind void;
}
