record `io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.core.CompletableObserver` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$a.b` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$a.c` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$a.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/CompletableAndThenPublisher$a;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b144c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b1452.  v0.`io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4b1456.  v0.`io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$a.b` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L4b145a.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4b145e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4b1464.  v0.`io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4b1468.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/CompletableAndThenPublisher$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b147c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b1480.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b1486.  call temp:= `cancel`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b148c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/CompletableAndThenPublisher$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b14a0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$a.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4b14a4.  if v0 != 0 then goto L4b14b4;
  #L4b14a8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b14ac.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4b14b2.  goto L4b14c0;
  #L4b14b4.  v1:= 0I;
  #L4b14b6.  v2.`io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$a.b` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L4b14ba.  call `subscribe`(v0, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4b14c0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/CompletableAndThenPublisher$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b14d4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b14d8.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b14de.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/CompletableAndThenPublisher$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b14f0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b14f4.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b14fa.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/CompletableAndThenPublisher$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b150c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b1510.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b1516.  v0:= temp;
  #L4b1518.  if v0 == 0 then goto L4b152a;
  #L4b151c.  v1.`io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4b1520.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b1524.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4b152a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/CompletableAndThenPublisher$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b153c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4b1540.  call temp:= `deferredSetOnce`(v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4b1546.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/CompletableAndThenPublisher$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b1558.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4b155c.  call `deferredRequest`(v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L4b1562.  return @kind void;
}
