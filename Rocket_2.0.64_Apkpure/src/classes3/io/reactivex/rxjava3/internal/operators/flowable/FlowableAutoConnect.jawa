record `io.reactivex.rxjava3.internal.operators.flowable.FlowableAutoConnect` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Flowable` @kind class {
  `io.reactivex.rxjava3.flowables.ConnectableFlowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableAutoConnect.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableAutoConnect.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.operators.flowable.FlowableAutoConnect.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableAutoConnect.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAutoConnect` v0 @kind this, `io.reactivex.rxjava3.flowables.ConnectableFlowable` v1 @kind object, `int` v2 , `io.reactivex.rxjava3.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAutoConnect;.<init>:(Lio/reactivex/rxjava3/flowables/ConnectableFlowable;ILio/reactivex/rxjava3/functions/Consumer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L487d90.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.<init>:()V` @kind direct;
  #L487d96.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAutoConnect.b` @type ^`io.reactivex.rxjava3.flowables.ConnectableFlowable` := v1 @kind object;
  #L487d9a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAutoConnect.c` @type ^`int` := v2;
  #L487d9e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAutoConnect.d` @type ^`io.reactivex.rxjava3.functions.Consumer` := v3 @kind object;
  #L487da2.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L487da6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L487dac.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAutoConnect.e` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L487db0.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAutoConnect` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAutoConnect;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L487dc4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAutoConnect.b` @type ^`io.reactivex.rxjava3.flowables.ConnectableFlowable` @kind object;
  #L487dc8.  call `subscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L487dce.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAutoConnect.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L487dd2.  call temp:= `incrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L487dd8.  v2:= temp;
  #L487dda.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAutoConnect.c` @type ^`int`;
  #L487dde.  if v2 != v0 then goto L487df0;
  #L487de2.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAutoConnect.b` @type ^`io.reactivex.rxjava3.flowables.ConnectableFlowable` @kind object;
  #L487de6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAutoConnect.d` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L487dea.  call `connect`(v2, v0) @signature `Lio/reactivex/rxjava3/flowables/ConnectableFlowable;.connect:(Lio/reactivex/rxjava3/functions/Consumer;)V` @kind virtual;
  #L487df0.  return @kind void;
}
