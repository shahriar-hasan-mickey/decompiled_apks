record `io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$a;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d1978.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4d197e.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L4d1982.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4d1986.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d1998.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d199c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d19a2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d19b4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.d` @type ^`boolean` @kind boolean;
  #L4d19b8.  if v0 == 0 then goto L4d19be;
  #L4d19bc.  return @kind void;
  #L4d19be.  v0:= 1I;
  #L4d19c0.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4d19c4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4d19c8.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d19ce.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d19e0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.d` @type ^`boolean` @kind boolean;
  #L4d19e4.  if v0 == 0 then goto L4d19f0;
  #L4d19e8.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d19ee.  return @kind void;
  #L4d19f0.  v0:= 1I;
  #L4d19f2.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4d19f6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4d19fa.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d1a00.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d1a14.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.d` @type ^`boolean` @kind boolean;
  #L4d1a18.  if v0 == 0 then goto L4d1a1e;
  #L4d1a1c.  return @kind void;
  #L4d1a1e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4d1a22.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4d1a28.  v2:= temp @kind object;
  #L4d1a2a.  v0:= "The mapper returned a null value" @kind object;
  #L4d1a2e.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4d1a34.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4d1a38.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d1a3e.  return @kind void;
  #L4d1a40.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d1a42.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d1a48.  call `cancel`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$a;.cancel:()V` @kind virtual;
  #L4d1a4e.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d1a54.  return @kind void;
  catch `java.lang.Throwable` @[L4d1a1e..L4d1a34] goto L4d1a40;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d1a74.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d1a78.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d1a7e.  v0:= temp;
  #L4d1a80.  if v0 == 0 then goto L4d1a92;
  #L4d1a84.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4d1a88.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4d1a8c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d1a92.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d1aa4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d1aa8.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d1aae.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$a;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d1914.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.d` @type ^`boolean` @kind boolean;
  #L4d1918.  v1:= 0I;
  #L4d191a.  if v0 == 0 then goto L4d1920;
  #L4d191e.  return v1;
  #L4d1920.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4d1924.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4d192a.  v3:= temp @kind object;
  #L4d192c.  v0:= "The mapper returned a null value" @kind object;
  #L4d1930.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4d1936.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4d193a.  call temp:= `tryOnNext`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4d1940.  v3:= temp;
  #L4d1942.  return v3;
  #L4d1944.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d1946.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d194c.  call `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$a;.cancel:()V` @kind virtual;
  #L4d1952.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d1958.  return v1;
  catch `java.lang.Throwable` @[L4d1920..L4d1936] goto L4d1944;
}
