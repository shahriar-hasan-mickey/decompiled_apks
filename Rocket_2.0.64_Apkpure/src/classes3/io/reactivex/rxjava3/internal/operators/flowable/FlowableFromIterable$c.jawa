record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$c.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$c;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L494718.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$a;.<init>:(Ljava/util/Iterator;)V` @kind direct;
  #L49471e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$c.d` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L494722.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$c` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$c;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L494734.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` @kind object;
  #L494738.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49473c.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L494740.  if v2 == 0 then goto L494746;
  #L494744.  return @kind void;
  #L494746.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L49474c.  v2:= temp @kind object;
  #L49474e.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L494752.  if v3 == 0 then goto L494758;
  #L494756.  return @kind void;
  #L494758.  if v2 != 0 then goto L494772;
  #L49475c.  v0:= new `java.lang.NullPointerException`;
  #L494760.  v2:= "Iterator.next() returned a null value" @kind object;
  #L494764.  call `<init>`(v0, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49476a.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L494770.  return @kind void;
  #L494772.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L494778.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L49477c.  if v2 == 0 then goto L494782;
  #L494780.  return @kind void;
  #L494782.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L494788.  v2:= temp;
  #L49478a.  if v2 != 0 then goto L49473c;
  #L49478e.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L494792.  if v0 != 0 then goto L49479c;
  #L494796.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49479c.  return @kind void;
  #L49479e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4947a0.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4947a6.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4947ac.  return @kind void;
  #L4947ae.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4947b0.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4947b6.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4947bc.  return @kind void;
  catch `java.lang.Throwable` @[L494746..L49474e] goto L4947ae;
  catch `java.lang.Throwable` @[L494782..L49478a] goto L49479e;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$c` v8 @kind this, `long` v9 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$c;.e:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4947e8.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` @kind object;
  #L4947ec.  v1:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4947f0.  v2:= 0L;
  #L4947f4.  v4:= v2 @kind wide;
  #L4947f6.  v6:= lcmp(v4, v9);
  #L4947fa.  if v6 == 0 then goto L494888;
  #L4947fe.  v6:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L494802.  if v6 == 0 then goto L494808;
  #L494806.  return @kind void;
  #L494808.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L49480e.  v6:= temp @kind object;
  #L494810.  v7:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L494814.  if v7 == 0 then goto L49481a;
  #L494818.  return @kind void;
  #L49481a.  if v6 != 0 then goto L494834;
  #L49481e.  v9:= new `java.lang.NullPointerException`;
  #L494822.  v10:= "Iterator.next() returned a null value" @kind object;
  #L494826.  call `<init>`(v9, v10) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49482c.  call `onError`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L494832.  return @kind void;
  #L494834.  call `onNext`(v1, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L49483a.  v6:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L49483e.  if v6 == 0 then goto L494844;
  #L494842.  return @kind void;
  #L494844.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L49484a.  v6:= temp;
  #L49484c.  if v6 != 0 then goto L494860;
  #L494850.  v9:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L494854.  if v9 != 0 then goto L49485e;
  #L494858.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49485e.  return @kind void;
  #L494860.  v6:= 1L;
  #L494864.  v4:= v4 + v6 @kind long;
  #L494866.  goto L4947f6;
  #L494868.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49486a.  call `throwIfFatal`(v9) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L494870.  call `onError`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L494876.  return @kind void;
  #L494878.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49487a.  call `throwIfFatal`(v9) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L494880.  call `onError`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L494886.  return @kind void;
  #L494888.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49488e.  v9:= temp @kind wide;
  #L494890.  v6:= lcmp(v4, v9);
  #L494894.  if v6 != 0 then goto L4947f6;
  #L494898.  v9:= -v4 @kind long;
  #L49489a.  call temp:= `addAndGet`(v8, v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4948a0.  v9:= temp @kind wide;
  #L4948a2.  v4:= lcmp(v9, v2);
  #L4948a6.  if v4 != 0 then goto L4947f4;
  #L4948aa.  return @kind void;
  catch `java.lang.Throwable` @[L494808..L494810] goto L494878;
  catch `java.lang.Throwable` @[L494844..L49484c] goto L494868;
}
