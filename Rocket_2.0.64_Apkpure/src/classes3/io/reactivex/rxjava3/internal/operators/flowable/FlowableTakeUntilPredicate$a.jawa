record `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Predicate` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeUntilPredicate$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a33f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a33fa.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4a33fe.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.b` @type ^`io.reactivex.rxjava3.functions.Predicate` := v2 @kind object;
  #L4a3402.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeUntilPredicate$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a3414.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a3418.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a341e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeUntilPredicate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a3430.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.d` @type ^`boolean` @kind boolean;
  #L4a3434.  if v0 != 0 then goto L4a3448;
  #L4a3438.  v0:= 1I;
  #L4a343a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4a343e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a3442.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a3448.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeUntilPredicate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a345c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.d` @type ^`boolean` @kind boolean;
  #L4a3460.  if v0 != 0 then goto L4a3476;
  #L4a3464.  v0:= 1I;
  #L4a3466.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4a346a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a346e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a3474.  goto L4a347c;
  #L4a3476.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4a347c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeUntilPredicate$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a3490.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.d` @type ^`boolean` @kind boolean;
  #L4a3494.  if v0 != 0 then goto L4a34e6;
  #L4a3498.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a349c.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a34a2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.b` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L4a34a6.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4a34ac.  v2:= temp;
  #L4a34ae.  if v2 == 0 then goto L4a34e6;
  #L4a34b2.  v2:= 1I;
  #L4a34b4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.d` @type ^`boolean` := v2 @kind boolean;
  #L4a34b8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a34bc.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a34c2.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a34c6.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a34cc.  goto L4a34e6;
  #L4a34ce.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a34d0.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4a34d6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a34da.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a34e0.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeUntilPredicate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a34e6.  return @kind void;
  catch `java.lang.Throwable` @[L4a34a2..L4a34ae] goto L4a34ce;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeUntilPredicate$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a3504.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a3508.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4a350e.  v0:= temp;
  #L4a3510.  if v0 == 0 then goto L4a3522;
  #L4a3514.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4a3518.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a351c.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4a3522.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeUntilPredicate$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a3534.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a3538.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a353e.  return @kind void;
}
