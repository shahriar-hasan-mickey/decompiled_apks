record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.d` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.e` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.f` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a` v0 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` v1 @kind object, `long` v2 , `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;JI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a2148.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4a214e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` := v1 @kind object;
  #L4a2152.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.b` @type ^`long` := v2 @kind wide;
  #L4a2156.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.c` @type ^`int` := v4;
  #L4a215a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.a:()V` @AccessFlag PUBLIC {
    temp;

  #L4a216c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4a2172.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.b:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a2304.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.f` @type ^`int`;
  #L4a2308.  v1:= 1I;
  #L4a230a.  if v0 == v1 then goto L4a2320;
  #L4a230e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a2314.  v0:= temp @kind object;
  #L4a2316.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4a231a.  call `request`(v0, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a2320.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4a2184.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` @kind object;
  #L4a2188.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.b` @type ^`long` @kind wide;
  #L4a218c.  v3:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.k` @type ^`long` @kind wide;
  #L4a2190.  v5:= lcmp(v1, v3);
  #L4a2194.  if v5 != 0 then goto L4a21a4;
  #L4a2198.  v1:= 1I;
  #L4a219a.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.e` @type ^`boolean` := v1 @kind boolean;
  #L4a219e.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @kind virtual;
  #L4a21a4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4a21b8.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` @kind object;
  #L4a21bc.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.b` @type ^`long` @kind wide;
  #L4a21c0.  v3:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.k` @type ^`long` @kind wide;
  #L4a21c4.  v5:= lcmp(v1, v3);
  #L4a21c8.  if v5 != 0 then goto L4a2200;
  #L4a21cc.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a21d0.  call temp:= `tryAddThrowable`(v1, v7) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4a21d6.  v1:= temp;
  #L4a21d8.  if v1 == 0 then goto L4a2200;
  #L4a21dc.  v7:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L4a21e0.  v1:= 1I;
  #L4a21e2.  if v7 != 0 then goto L4a21f4;
  #L4a21e6.  v7:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a21ea.  call `cancel`(v7) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a21f0.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.e` @type ^`boolean` := v1 @kind boolean;
  #L4a21f4.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.e` @type ^`boolean` := v1 @kind boolean;
  #L4a21f8.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @kind virtual;
  #L4a21fe.  goto L4a2206;
  #L4a2200.  call `onError`(v7) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4a2206.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4a2218.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` @kind object;
  #L4a221c.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.b` @type ^`long` @kind wide;
  #L4a2220.  v3:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.k` @type ^`long` @kind wide;
  #L4a2224.  v5:= lcmp(v1, v3);
  #L4a2228.  if v5 != 0 then goto L4a2260;
  #L4a222c.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.f` @type ^`int`;
  #L4a2230.  if v1 != 0 then goto L4a225a;
  #L4a2234.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4a2238.  call temp:= `offer`(v1, v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4a223e.  v7:= temp;
  #L4a2240.  if v7 != 0 then goto L4a225a;
  #L4a2244.  v7:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4a2248.  v0:= "Queue full?!" @kind object;
  #L4a224c.  call `<init>`(v7, v0) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a2252.  call `onError`(v6, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a2258.  return @kind void;
  #L4a225a.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @kind virtual;
  #L4a2260.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a2274.  call temp:= `setOnce`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4a227a.  v0:= temp;
  #L4a227c.  if v0 == 0 then goto L4a22f0;
  #L4a2280.  v0:= instanceof @variable v4 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind boolean;
  #L4a2284.  if v0 == 0 then goto L4a22d2;
  #L4a2288.  v0:= v4 @kind object;
  #L4a228a.  v0:= (`io.reactivex.rxjava3.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L4a228e.  v1:= 7I;
  #L4a2290.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4a2296.  v1:= temp;
  #L4a2298.  v2:= 1I;
  #L4a229a.  if v1 != v2 then goto L4a22b6;
  #L4a229e.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.f` @type ^`int` := v1;
  #L4a22a2.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4a22a6.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.e` @type ^`boolean` := v2 @kind boolean;
  #L4a22aa.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` @kind object;
  #L4a22ae.  call `b`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @kind virtual;
  #L4a22b4.  return @kind void;
  #L4a22b6.  v2:= 2I;
  #L4a22b8.  if v1 != v2 then goto L4a22d2;
  #L4a22bc.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.f` @type ^`int` := v1;
  #L4a22c0.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4a22c4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.c` @type ^`int`;
  #L4a22c8.  v0:= (`long`) v0 @kind i2l;
  #L4a22ca.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a22d0.  return @kind void;
  #L4a22d2.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4a22d6.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.c` @type ^`int`;
  #L4a22da.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4a22e0.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4a22e4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.c` @type ^`int`;
  #L4a22e8.  v0:= (`long`) v0 @kind i2l;
  #L4a22ea.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a22f0.  return @kind void;
}
