record `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a` @kind class {
  `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$b.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$b` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$b;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cffc0.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$a;.<init>:(Lio/reactivex/rxjava3/functions/Predicate;)V` @kind direct;
  #L4cffc6.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L4cffca.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cffdc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` @kind boolean;
  #L4cffe0.  if v0 != 0 then goto L4cfff4;
  #L4cffe4.  v0:= 1I;
  #L4cffe6.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4cffea.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4cffee.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4cfff4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d0008.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` @kind boolean;
  #L4d000c.  if v0 == 0 then goto L4d0018;
  #L4d0010.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d0016.  return @kind void;
  #L4d0018.  v0:= 1I;
  #L4d001a.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4d001e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4d0022.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d0028.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d003c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d0040.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d0046.  v0:= temp;
  #L4d0048.  if v0 == 0 then goto L4d005a;
  #L4d004c.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.b` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4d0050.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4d0054.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d005a.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$b;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4cff64.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` @kind boolean;
  #L4cff68.  v1:= 0I;
  #L4cff6a.  if v0 != 0 then goto L4cffa0;
  #L4cff6e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.a` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L4cff72.  call temp:= `test`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4cff78.  v0:= temp;
  #L4cff7a.  if v0 == 0 then goto L4cffa0;
  #L4cff7e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4cff82.  call temp:= `tryOnNext`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4cff88.  v3:= temp;
  #L4cff8a.  return v3;
  #L4cff8c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cff8e.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4cff94.  call `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$a;.cancel:()V` @kind virtual;
  #L4cff9a.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4cffa0.  return v1;
  catch `java.lang.Throwable` @[L4cff6e..L4cff7a] goto L4cff8c;
}
