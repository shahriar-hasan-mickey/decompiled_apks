record `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.c` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.d` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.f` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounce$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L48e264.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L48e26a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L48e26e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L48e274.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L48e278.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L48e27c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L48e280.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a` v3 @kind this, `long` v4 , `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounce$a;.a:(JLjava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L48e2bc.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.e` @type ^`long` @kind wide;
  #L48e2c0.  v2:= lcmp(v4, v0);
  #L48e2c4.  if v2 != 0 then goto L48e310;
  #L48e2c8.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L48e2ce.  v4:= temp @kind wide;
  #L48e2d0.  v0:= 0L;
  #L48e2d4.  v2:= lcmp(v4, v0);
  #L48e2d8.  if v2 == 0 then goto L48e2f2;
  #L48e2dc.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48e2e0.  call `onNext`(v4, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48e2e6.  v4:= 1L;
  #L48e2ea.  call temp:= `produced`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L48e2f0.  goto L48e310;
  #L48e2f2.  call `cancel`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounce$a;.cancel:()V` @kind virtual;
  #L48e2f8.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48e2fc.  v5:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L48e300.  v6:= "Could not deliver value due to lack of requests" @kind object;
  #L48e304.  call `<init>`(v5, v6) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48e30a.  call `onError`(v4, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48e310.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounce$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48e294.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48e298.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48e29e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48e2a2.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L48e2a8.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounce$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48e324.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.f` @type ^`boolean` @kind boolean;
  #L48e328.  if v0 == 0 then goto L48e32e;
  #L48e32c.  return @kind void;
  #L48e32e.  v0:= 1I;
  #L48e330.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.f` @type ^`boolean` := v0 @kind boolean;
  #L48e334.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48e338.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48e33e.  v0:= temp @kind object;
  #L48e340.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L48e344.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L48e34a.  v1:= temp;
  #L48e34c.  if v1 != 0 then goto L48e372;
  #L48e350.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a$a`) v0 @kind object;
  #L48e354.  if v0 == 0 then goto L48e35e;
  #L48e358.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounce$a$a;.a:()V` @kind virtual;
  #L48e35e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48e362.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L48e368.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48e36c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L48e372.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounce$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48e384.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48e388.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L48e38e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48e392.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48e398.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounce$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48e3ac.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.f` @type ^`boolean` @kind boolean;
  #L48e3b0.  if v0 == 0 then goto L48e3b6;
  #L48e3b4.  return @kind void;
  #L48e3b6.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.e` @type ^`long` @kind wide;
  #L48e3ba.  v2:= 1L;
  #L48e3be.  v0:= v0 + v2 @kind long;
  #L48e3c0.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.e` @type ^`long` := v0 @kind wide;
  #L48e3c4.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48e3c8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48e3ce.  v2:= temp @kind object;
  #L48e3d0.  v2:= (`io.reactivex.rxjava3.disposables.Disposable`) v2 @kind object;
  #L48e3d4.  if v2 == 0 then goto L48e3de;
  #L48e3d8.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L48e3de.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L48e3e2.  call temp:= `apply`(v3, v6) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L48e3e8.  v3:= temp @kind object;
  #L48e3ea.  v4:= "The publisher supplied is null" @kind object;
  #L48e3ee.  call temp:= `requireNonNull`(v3, v4) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48e3f4.  v3:= (`org.reactivestreams.Publisher`) v3 @kind object;
  #L48e3f8.  v4:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a$a`;
  #L48e3fc.  call `<init>`(v4, v5, v0, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounce$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounce$a;JLjava/lang/Object;)V` @kind direct;
  #L48e402.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48e406.  call temp:= `compareAndSet`(v6, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L48e40c.  v6:= temp;
  #L48e40e.  if v6 == 0 then goto L48e418;
  #L48e412.  call `subscribe`(v3, v4) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L48e418.  return @kind void;
  #L48e41a.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48e41c.  call `throwIfFatal`(v6) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48e422.  call `cancel`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounce$a;.cancel:()V` @kind virtual;
  #L48e428.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48e42c.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48e432.  return @kind void;
  catch `java.lang.Throwable` @[L48e3de..L48e3f8] goto L48e41a;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounce$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48e450.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48e454.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L48e45a.  v0:= temp;
  #L48e45c.  if v0 == 0 then goto L48e47e;
  #L48e460.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L48e464.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48e468.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L48e46e.  v0:= 9223372036854775807L;
  #L48e478.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L48e47e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounce$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48e490.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L48e496.  v0:= temp;
  #L48e498.  if v0 == 0 then goto L48e4a2;
  #L48e49c.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L48e4a2.  return @kind void;
}
