record `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Consumer` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cfafc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4cfb02.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L4cfb06.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.b` @type ^`io.reactivex.rxjava3.functions.Consumer` := v2 @kind object;
  #L4cfb0a.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v3 @kind object;
  #L4cfb0e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cfb20.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cfb24.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4cfb2a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cfb3c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.e` @type ^`boolean` @kind boolean;
  #L4cfb40.  if v0 == 0 then goto L4cfb46;
  #L4cfb44.  return @kind void;
  #L4cfb46.  v0:= 1I;
  #L4cfb48.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.e` @type ^`boolean` := v0 @kind boolean;
  #L4cfb4c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4cfb50.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4cfb56.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cfb68.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.e` @type ^`boolean` @kind boolean;
  #L4cfb6c.  if v0 == 0 then goto L4cfb78;
  #L4cfb70.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4cfb76.  return @kind void;
  #L4cfb78.  v0:= 1I;
  #L4cfb7a.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.e` @type ^`boolean` := v0 @kind boolean;
  #L4cfb7e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4cfb82.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cfb88.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4cfb9c.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L4cfba2.  v3:= temp;
  #L4cfba4.  if v3 != 0 then goto L4cfbbe;
  #L4cfba8.  v3:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.e` @type ^`boolean` @kind boolean;
  #L4cfbac.  if v3 != 0 then goto L4cfbbe;
  #L4cfbb0.  v3:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cfbb4.  v0:= 1L;
  #L4cfbb8.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4cfbbe.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cfbd0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cfbd4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4cfbda.  v0:= temp;
  #L4cfbdc.  if v0 == 0 then goto L4cfbee;
  #L4cfbe0.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.d` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4cfbe4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4cfbe8.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4cfbee.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cfc00.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cfc04.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4cfc0a.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4cfa10.  v0:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.e` @type ^`boolean` @kind boolean;
  #L4cfa14.  v1:= 0I;
  #L4cfa16.  if v0 == 0 then goto L4cfa1c;
  #L4cfa1a.  return v1;
  #L4cfa1c.  v2:= 0L;
  #L4cfa20.  v0:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4cfa24.  call `accept`(v0, v10) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4cfa2a.  v0:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4cfa2e.  call temp:= `tryOnNext`(v0, v10) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4cfa34.  v10:= temp;
  #L4cfa36.  return v10;
  #L4cfa38.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cfa3a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4cfa40.  v4:= 1I;
  #L4cfa42.  v5:= 2I;
  #L4cfa44.  v6:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4cfa48.  v7:= 1L;
  #L4cfa4c.  v2:= v2 + v7 @kind long;
  #L4cfa4e.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4cfa54.  v7:= temp @kind object;
  #L4cfa56.  call temp:= `apply`(v6, v7, v0) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4cfa5c.  v6:= temp @kind object;
  #L4cfa5e.  v7:= "The errorHandler returned a null ParallelFailureHandling" @kind object;
  #L4cfa62.  call temp:= `requireNonNull`(v6, v7) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4cfa68.  v6:= (`io.reactivex.rxjava3.parallel.ParallelFailureHandling`) v6 @kind object;
  #L4cfa6c.  v7:= `@@io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$a.a` @type ^`int`[] @kind object;
  #L4cfa70.  call temp:= `ordinal`(v6) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L4cfa76.  v6:= temp;
  #L4cfa78.  v6:= v7[v6];
  #L4cfa7c.  if v6 == v4 then goto L4cfa20;
  #L4cfa80.  if v6 == v5 then goto L4cfaa4;
  #L4cfa84.  v10:= 3I;
  #L4cfa86.  if v6 == v10 then goto L4cfa98;
  #L4cfa8a.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.cancel:()V` @kind virtual;
  #L4cfa90.  call `onError`(v9, v0) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4cfa96.  return v1;
  #L4cfa98.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.cancel:()V` @kind virtual;
  #L4cfa9e.  call `onComplete`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.onComplete:()V` @kind virtual;
  #L4cfaa4.  return v1;
  #L4cfaa6.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cfaa8.  call `throwIfFatal`(v10) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4cfaae.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.cancel:()V` @kind virtual;
  #L4cfab4.  v2:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L4cfab8.  v3:= new `java.lang.Throwable`[v5];
  #L4cfabc.  v3[v1]:= v0 @kind object;
  #L4cfac0.  v3[v4]:= v10 @kind object;
  #L4cfac4.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4cfaca.  call `onError`(v9, v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4cfad0.  return v1;
  catch `java.lang.Throwable` @[L4cfa20..L4cfa2a] goto L4cfa38;
  catch `java.lang.Throwable` @[L4cfa44..L4cfa6c] goto L4cfaa6;
}
