record `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.Flowable` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.d` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.h` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.i` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.j` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.k` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.l` @AccessFlag ;
}
global `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[] `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.m` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[] `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.n` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L49b938.  v0:= 0I;
  #L49b93a.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[v0];
  #L49b93e.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.m` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[] := v1 @kind object;
  #L49b942.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[v0];
  #L49b946.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.n` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[] := v0 @kind object;
  #L49b94a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` v1 @kind this, `int` v2 , `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.<init>:(IZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L49b95c.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/core/Flowable;.<init>:()V` @kind direct;
  #L49b962.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.d` @type ^`int` := v2;
  #L49b966.  v0:= v2 ^> 2;
  #L49b96a.  v2:= v2 - v0 @kind int;
  #L49b96c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.e` @type ^`int` := v2;
  #L49b970.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.f` @type ^`boolean` := v3 @kind boolean;
  #L49b974.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L49b978.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L49b97e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L49b982.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L49b986.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L49b98c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L49b990.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L49b994.  v3:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.m` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[] @kind object;
  #L49b998.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L49b99e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L49b9a2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.dispose:()V` @AccessFlag  {
    temp;
    v0;

  #L49ba0c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` @kind boolean;
  #L49ba10.  if v0 != 0 then goto L49ba3c;
  #L49ba14.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49ba18.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L49ba1e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L49ba22.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L49ba28.  v0:= temp;
  #L49ba2a.  if v0 != 0 then goto L49ba3c;
  #L49ba2e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L49ba32.  if v0 == 0 then goto L49ba3c;
  #L49ba36.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L49ba3c.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` v4 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.e:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$b;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49b8b8.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49b8bc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49b8c2.  v0:= temp @kind object;
  #L49b8c4.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[]) v0 @kind object;
  #L49b8c8.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.n` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[] @kind object;
  #L49b8cc.  v2:= 0I;
  #L49b8ce.  if v0 != v1 then goto L49b8d4;
  #L49b8d2.  return v2;
  #L49b8d4.  v1:= length @variable v0;
  #L49b8d6.  v3:= v1 + 1;
  #L49b8da.  v3:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[v3];
  #L49b8de.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49b8e4.  v3[v1]:= v5 @kind object;
  #L49b8e8.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49b8ec.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L49b8f2.  v0:= temp;
  #L49b8f4.  if v0 == 0 then goto L49b8b8;
  #L49b8f8.  v5:= 1I;
  #L49b8fa.  return v5;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` v9 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L49b9b4.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49b9b8.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.n` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[] @kind object;
  #L49b9bc.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L49b9c2.  v0:= temp @kind object;
  #L49b9c4.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[]) v0 @kind object;
  #L49b9c8.  v1:= length @variable v0;
  #L49b9ca.  v2:= 0I;
  #L49b9cc.  if v2 >= v1 then goto L49b9f8;
  #L49b9d0.  v3:= v0[v2] @kind object;
  #L49b9d4.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49b9da.  v4:= temp @kind wide;
  #L49b9dc.  v6:= -9223372036854775808L;
  #L49b9e0.  v8:= lcmp(v4, v6);
  #L49b9e4.  if v8 == 0 then goto L49b9f2;
  #L49b9e8.  v3:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49b9ec.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49b9f2.  v2:= v2 + 1;
  #L49b9f6.  goto L49b9cc;
  #L49b9f8.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` v24 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;
    v23;

  #L49ba50.  v1:= v24 @kind object;
  #L49ba54.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L49ba58.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L49ba5e.  v0:= temp;
  #L49ba60.  if v0 == 0 then goto L49ba66;
  #L49ba64.  return @kind void;
  #L49ba66.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L49ba6a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.l` @type ^`int`;
  #L49ba6e.  v3:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.e` @type ^`int`;
  #L49ba72.  v4:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.i` @type ^`int`;
  #L49ba76.  v6:= 1I;
  #L49ba78.  if v4 == v6 then goto L49ba80;
  #L49ba7c.  v4:= 1I;
  #L49ba7e.  goto L49ba82;
  #L49ba80.  v4:= 0I;
  #L49ba82.  v7:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49ba86.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49ba8c.  v8:= temp @kind object;
  #L49ba8e.  v8:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[]) v8 @kind object;
  #L49ba92.  v9:= 1I;
  #L49ba94.  v10:= length @variable v8;
  #L49ba96.  if v0 == 0 then goto L49bca0;
  #L49ba9a.  if v10 == 0 then goto L49bca0;
  #L49ba9e.  v11:= length @variable v8;
  #L49baa0.  v12:= 9223372036854775807L;
  #L49baaa.  v15:= v12 @kind wide;
  #L49baac.  v14:= 0I;
  #L49baae.  v17:= -9223372036854775808L;
  #L49bab2.  if v14 >= v11 then goto L49baf4;
  #L49bab6.  v5:= v8[v14] @kind object;
  #L49baba.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49bac0.  v19:= temp @kind wide;
  #L49bac2.  v21:= v7 @kind object;
  #L49bac6.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b.c` @type ^`long` @kind wide;
  #L49baca.  v19:= v19 - v6 @kind long;
  #L49bace.  v5:= lcmp(v19, v17);
  #L49bad2.  if v5 == 0 then goto L49bae4;
  #L49bad6.  v5:= lcmp(v15, v19);
  #L49bada.  if v5 <= 0 then goto L49bae8;
  #L49bade.  v15:= v19 @kind wide;
  #L49bae2.  goto L49bae8;
  #L49bae4.  v10:= v10 + -1;
  #L49bae8.  v14:= v14 + 1;
  #L49baec.  v7:= v21 @kind object;
  #L49baf0.  v6:= 1I;
  #L49baf2.  goto L49baae;
  #L49baf4.  v21:= v7 @kind object;
  #L49baf8.  v5:= 0L;
  #L49bafc.  if v10 != 0 then goto L49bb02;
  #L49bb00.  v15:= v5 @kind wide;
  #L49bb02.  v7:= lcmp(v15, v5);
  #L49bb06.  if v7 == 0 then goto L49bc40;
  #L49bb0a.  call temp:= `isDisposed`(v24) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.isDisposed:()Z` @kind virtual;
  #L49bb10.  v10:= temp;
  #L49bb12.  if v10 == 0 then goto L49bb1e;
  #L49bb16.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L49bb1c.  return @kind void;
  #L49bb1e.  v10:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` @kind boolean;
  #L49bb22.  if v10 == 0 then goto L49bb3e;
  #L49bb26.  v11:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.f` @type ^`boolean` @kind boolean;
  #L49bb2a.  if v11 != 0 then goto L49bb3e;
  #L49bb2e.  v11:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.k` @type ^`java.lang.Throwable` @kind object;
  #L49bb32.  if v11 == 0 then goto L49bb3e;
  #L49bb36.  call `h`(v1, v11) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.h:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49bb3c.  return @kind void;
  #L49bb3e.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L49bb44.  v11:= temp @kind object;
  #L49bb46.  if v11 != 0 then goto L49bb4e;
  #L49bb4a.  v14:= 1I;
  #L49bb4c.  goto L49bb50;
  #L49bb4e.  v14:= 0I;
  #L49bb50.  if v10 == 0 then goto L49bb70;
  #L49bb54.  if v14 == 0 then goto L49bb70;
  #L49bb58.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.k` @type ^`java.lang.Throwable` @kind object;
  #L49bb5c.  if v0 == 0 then goto L49bb68;
  #L49bb60.  call `h`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.h:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49bb66.  goto L49bb6e;
  #L49bb68.  call `f`(v24) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.f:()V` @kind virtual;
  #L49bb6e.  return @kind void;
  #L49bb70.  if v14 == 0 then goto L49bb76;
  #L49bb74.  goto L49bc40;
  #L49bb76.  v7:= length @variable v8;
  #L49bb78.  v10:= 0I;
  #L49bb7a.  v14:= 0I;
  #L49bb7c.  v19:= 1L;
  #L49bb80.  if v10 >= v7 then goto L49bbce;
  #L49bb84.  v5:= v8[v10] @kind object;
  #L49bb88.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49bb8e.  v22:= temp @kind wide;
  #L49bb90.  v6:= lcmp(v22, v17);
  #L49bb94.  if v6 == 0 then goto L49bbb8;
  #L49bb98.  v6:= lcmp(v22, v12);
  #L49bb9c.  if v6 == 0 then goto L49bbac;
  #L49bba0.  v12:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b.c` @type ^`long` @kind wide;
  #L49bba4.  v12:= v12 + v19 @kind long;
  #L49bba8.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b.c` @type ^`long` := v12 @kind wide;
  #L49bbac.  v5:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49bbb0.  call `onNext`(v5, v11) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L49bbb6.  goto L49bbba;
  #L49bbb8.  v14:= 1I;
  #L49bbba.  v10:= v10 + 1;
  #L49bbbe.  v5:= 0L;
  #L49bbc2.  v12:= 9223372036854775807L;
  #L49bbcc.  goto L49bb7c;
  #L49bbce.  v15:= v15 - v19 @kind long;
  #L49bbd2.  if v4 == 0 then goto L49bbf8;
  #L49bbd6.  v2:= v2 + 1;
  #L49bbda.  if v2 != v3 then goto L49bbf8;
  #L49bbde.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49bbe2.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49bbe8.  v2:= temp @kind object;
  #L49bbea.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L49bbee.  v5:= (`long`) v3 @kind i2l;
  #L49bbf0.  call `request`(v2, v5) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L49bbf6.  v2:= 0I;
  #L49bbf8.  call temp:= `get`(v21) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49bbfe.  v5:= temp @kind object;
  #L49bc00.  v5:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[]) v5 @kind object;
  #L49bc04.  if v14 != 0 then goto L49bc20;
  #L49bc08.  if v5 == v8 then goto L49bc0e;
  #L49bc0c.  goto L49bc20;
  #L49bc0e.  v5:= 0L;
  #L49bc12.  v12:= 9223372036854775807L;
  #L49bc1c.  goto L49bb02;
  #L49bc20.  v8:= v5 @kind object;
  #L49bc22.  goto L49bcd2;
  #L49bc24.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49bc26.  v2:= v0 @kind object;
  #L49bc28.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49bc2e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49bc32.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L49bc38.  call `h`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.h:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49bc3e.  return @kind void;
  #L49bc40.  if v7 != 0 then goto L49bca4;
  #L49bc44.  call temp:= `isDisposed`(v24) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.isDisposed:()Z` @kind virtual;
  #L49bc4a.  v5:= temp;
  #L49bc4c.  if v5 == 0 then goto L49bc58;
  #L49bc50.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L49bc56.  return @kind void;
  #L49bc58.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` @kind boolean;
  #L49bc5c.  if v5 == 0 then goto L49bc78;
  #L49bc60.  v6:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.f` @type ^`boolean` @kind boolean;
  #L49bc64.  if v6 != 0 then goto L49bc78;
  #L49bc68.  v6:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.k` @type ^`java.lang.Throwable` @kind object;
  #L49bc6c.  if v6 == 0 then goto L49bc78;
  #L49bc70.  call `h`(v1, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.h:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49bc76.  return @kind void;
  #L49bc78.  if v5 == 0 then goto L49bca4;
  #L49bc7c.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L49bc82.  v5:= temp;
  #L49bc84.  if v5 == 0 then goto L49bca4;
  #L49bc88.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.k` @type ^`java.lang.Throwable` @kind object;
  #L49bc8c.  if v0 == 0 then goto L49bc98;
  #L49bc90.  call `h`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.h:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49bc96.  goto L49bc9e;
  #L49bc98.  call `f`(v24) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.f:()V` @kind virtual;
  #L49bc9e.  return @kind void;
  #L49bca0.  v21:= v7 @kind object;
  #L49bca4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.l` @type ^`int` := v2;
  #L49bca8.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L49bcac.  v6:= -v9 @kind int;
  #L49bcae.  call temp:= `addAndGet`(v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L49bcb4.  v9:= temp;
  #L49bcb6.  if v9 != 0 then goto L49bcbc;
  #L49bcba.  return @kind void;
  #L49bcbc.  if v0 != 0 then goto L49bcc4;
  #L49bcc0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L49bcc4.  call temp:= `get`(v21) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49bcca.  v5:= temp @kind object;
  #L49bccc.  v8:= v5 @kind object;
  #L49bcce.  v8:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[]) v8 @kind object;
  #L49bcd2.  v7:= v21 @kind object;
  #L49bcd6.  v6:= 1I;
  #L49bcd8.  goto L49ba94;
  catch `java.lang.Throwable` @[L49bb3e..L49bb46] goto L49bc24;
}
procedure `void` `h`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` v9 @kind this, `java.lang.Throwable` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.h:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L49bcf8.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49bcfc.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.n` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[] @kind object;
  #L49bd00.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L49bd06.  v0:= temp @kind object;
  #L49bd08.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[]) v0 @kind object;
  #L49bd0c.  v1:= length @variable v0;
  #L49bd0e.  v2:= 0I;
  #L49bd10.  if v2 >= v1 then goto L49bd3c;
  #L49bd14.  v3:= v0[v2] @kind object;
  #L49bd18.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49bd1e.  v4:= temp @kind wide;
  #L49bd20.  v6:= -9223372036854775808L;
  #L49bd24.  v8:= lcmp(v4, v6);
  #L49bd28.  if v8 == 0 then goto L49bd36;
  #L49bd2c.  v3:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49bd30.  call `onError`(v3, v10) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49bd36.  v2:= v2 + 1;
  #L49bd3a.  goto L49bd10;
  #L49bd3c.  return @kind void;
}
procedure `void` `i`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` v6 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.i:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$b;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49be98.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49be9c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49bea2.  v0:= temp @kind object;
  #L49bea4.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[]) v0 @kind object;
  #L49bea8.  v1:= length @variable v0;
  #L49beaa.  if v1 != 0 then goto L49beb0;
  #L49beae.  return @kind void;
  #L49beb0.  v2:= -1I;
  #L49beb2.  v3:= 0I;
  #L49beb4.  v4:= 0I;
  #L49beb6.  if v4 >= v1 then goto L49becc;
  #L49beba.  v5:= v0[v4] @kind object;
  #L49bebe.  if v5 != v7 then goto L49bec6;
  #L49bec2.  v2:= v4;
  #L49bec4.  goto L49becc;
  #L49bec6.  v4:= v4 + 1;
  #L49beca.  goto L49beb6;
  #L49becc.  if v2 >= 0 then goto L49bed2;
  #L49bed0.  return @kind void;
  #L49bed2.  v4:= 1I;
  #L49bed4.  if v1 != v4 then goto L49bede;
  #L49bed8.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.m` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[] @kind object;
  #L49bedc.  goto L49befc;
  #L49bede.  v5:= v1 + -1;
  #L49bee2.  v5:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[v5];
  #L49bee6.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49beec.  v3:= v2 + 1;
  #L49bef0.  v1:= v1 - v2 @kind int;
  #L49bef2.  v1:= v1 - v4 @kind int;
  #L49bef4.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49befa.  v1:= v5 @kind object;
  #L49befc.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49bf00.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L49bf06.  v0:= temp;
  #L49bf08.  if v0 == 0 then goto L49be98;
  #L49bf0c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.isDisposed:()Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L49b90c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49b910.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49b916.  v0:= temp @kind object;
  #L49b918.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L49b91c.  if v0 != v1 then goto L49b924;
  #L49b920.  v0:= 1I;
  #L49b922.  goto L49b926;
  #L49b924.  v0:= 0I;
  #L49b926.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49bd50.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` @kind boolean;
  #L49bd54.  if v0 != 0 then goto L49bd64;
  #L49bd58.  v0:= 1I;
  #L49bd5a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` := v0 @kind boolean;
  #L49bd5e.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.g:()V` @kind virtual;
  #L49bd64.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49bd78.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` @kind boolean;
  #L49bd7c.  if v0 == 0 then goto L49bd88;
  #L49bd80.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L49bd86.  return @kind void;
  #L49bd88.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.k` @type ^`java.lang.Throwable` := v2 @kind object;
  #L49bd8c.  v2:= 1I;
  #L49bd8e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` := v2 @kind boolean;
  #L49bd92.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.g:()V` @kind virtual;
  #L49bd98.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49bdac.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` @kind boolean;
  #L49bdb0.  if v0 == 0 then goto L49bdb6;
  #L49bdb4.  return @kind void;
  #L49bdb6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.i` @type ^`int`;
  #L49bdba.  if v0 != 0 then goto L49bdf6;
  #L49bdbe.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L49bdc2.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L49bdc8.  v2:= temp;
  #L49bdca.  if v2 != 0 then goto L49bdf6;
  #L49bdce.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49bdd2.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49bdd8.  v2:= temp @kind object;
  #L49bdda.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L49bdde.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L49bde4.  v2:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L49bde8.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L49bdee.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49bdf4.  return @kind void;
  #L49bdf6.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.g:()V` @kind virtual;
  #L49bdfc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49be10.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49be14.  call temp:= `setOnce`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L49be1a.  v0:= temp;
  #L49be1c.  if v0 == 0 then goto L49be86;
  #L49be20.  v0:= instanceof @variable v4 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind boolean;
  #L49be24.  if v0 == 0 then goto L49be6c;
  #L49be28.  v0:= v4 @kind object;
  #L49be2a.  v0:= (`io.reactivex.rxjava3.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L49be2e.  v1:= 3I;
  #L49be30.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L49be36.  v1:= temp;
  #L49be38.  v2:= 1I;
  #L49be3a.  if v1 != v2 then goto L49be52;
  #L49be3e.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.i` @type ^`int` := v1;
  #L49be42.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L49be46.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` := v2 @kind boolean;
  #L49be4a.  call `g`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.g:()V` @kind virtual;
  #L49be50.  return @kind void;
  #L49be52.  v2:= 2I;
  #L49be54.  if v1 != v2 then goto L49be6c;
  #L49be58.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.i` @type ^`int` := v1;
  #L49be5c.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L49be60.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.d` @type ^`int`;
  #L49be64.  call `request`(v4, v0) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.request:(Lorg/reactivestreams/Subscription;I)V` @kind static;
  #L49be6a.  return @kind void;
  #L49be6c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.d` @type ^`int`;
  #L49be70.  call temp:= `createQueue`(v0) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.createQueue:(I)Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;` @kind static;
  #L49be76.  v0:= temp @kind object;
  #L49be78.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L49be7c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.d` @type ^`int`;
  #L49be80.  call `request`(v4, v0) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.request:(Lorg/reactivestreams/Subscription;I)V` @kind static;
  #L49be86.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L49bf20.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`;
  #L49bf24.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;)V` @kind direct;
  #L49bf2a.  call `onSubscribe`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L49bf30.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.e:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$b;)Z` @kind virtual;
  #L49bf36.  v1:= temp;
  #L49bf38.  if v1 == 0 then goto L49bf58;
  #L49bf3c.  call temp:= `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$b;.a:()Z` @kind virtual;
  #L49bf42.  v3:= temp;
  #L49bf44.  if v3 == 0 then goto L49bf50;
  #L49bf48.  call `i`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.i:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$b;)V` @kind virtual;
  #L49bf4e.  return @kind void;
  #L49bf50.  call `g`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.g:()V` @kind virtual;
  #L49bf56.  goto L49bf6e;
  #L49bf58.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.k` @type ^`java.lang.Throwable` @kind object;
  #L49bf5c.  if v0 == 0 then goto L49bf68;
  #L49bf60.  call `onError`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49bf66.  goto L49bf6e;
  #L49bf68.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49bf6e.  return @kind void;
}
