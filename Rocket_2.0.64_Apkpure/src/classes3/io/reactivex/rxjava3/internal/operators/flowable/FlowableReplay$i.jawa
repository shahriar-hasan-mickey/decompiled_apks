record `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$f` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.b` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.e` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.f` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.g` @AccessFlag FINAL;
}
global `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[] `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.h` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[] `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.i` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L49e4ac.  v0:= 0I;
  #L49e4ae.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[v0];
  #L49e4b2.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.h` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[] := v1 @kind object;
  #L49e4b6.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[v0];
  #L49e4ba.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.i` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[] := v0 @kind object;
  #L49e4be.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i` v0 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$f` v1 @kind object, `java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$f;Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49e4d0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L49e4d6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$f` := v1 @kind object;
  #L49e4da.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L49e4de.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L49e4e2.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L49e4e8.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.e` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L49e4ec.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L49e4f0.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.h` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[] @kind object;
  #L49e4f4.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L49e4fa.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L49e4fe.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L49e502.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L49e508.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L49e50c.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i` v4 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.a:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49e42c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49e430.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49e436.  v0:= temp @kind object;
  #L49e438.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[]) v0 @kind object;
  #L49e43c.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.i` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[] @kind object;
  #L49e440.  v2:= 0I;
  #L49e442.  if v0 != v1 then goto L49e448;
  #L49e446.  return v2;
  #L49e448.  v1:= length @variable v0;
  #L49e44a.  v3:= v1 + 1;
  #L49e44e.  v3:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[v3];
  #L49e452.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49e458.  v3[v1]:= v5 @kind object;
  #L49e45c.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49e460.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L49e466.  v0:= temp;
  #L49e468.  if v0 == 0 then goto L49e42c;
  #L49e46c.  v5:= 1I;
  #L49e46e.  return v5;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i` v12 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L49e554.  v0:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L49e558.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L49e55e.  v1:= temp;
  #L49e560.  if v1 == 0 then goto L49e566;
  #L49e564.  return @kind void;
  #L49e566.  v1:= 1I;
  #L49e568.  call temp:= `isDisposed`(v12) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.isDisposed:()Z` @kind virtual;
  #L49e56e.  v2:= temp;
  #L49e570.  if v2 == 0 then goto L49e576;
  #L49e574.  return @kind void;
  #L49e576.  call temp:= `get`(v12) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49e57c.  v2:= temp @kind object;
  #L49e57e.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L49e582.  if v2 == 0 then goto L49e5dc;
  #L49e586.  v3:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.f` @type ^`long` @kind wide;
  #L49e58a.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49e58e.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49e594.  v5:= temp @kind object;
  #L49e596.  v5:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[]) v5 @kind object;
  #L49e59a.  v6:= length @variable v5;
  #L49e59c.  v7:= 0I;
  #L49e59e.  v8:= v3 @kind wide;
  #L49e5a0.  if v7 >= v6 then goto L49e5c2;
  #L49e5a4.  v10:= v5[v7] @kind object;
  #L49e5a8.  v10:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L49e5ac.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49e5b2.  v10:= temp @kind wide;
  #L49e5b4.  call temp:= `max`(v8, v10) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L49e5ba.  v8:= temp @kind wide;
  #L49e5bc.  v7:= v7 + 1;
  #L49e5c0.  goto L49e5a0;
  #L49e5c2.  v3:= v8 - v3 @kind long;
  #L49e5c6.  v5:= 0L;
  #L49e5ca.  v7:= lcmp(v3, v5);
  #L49e5ce.  if v7 == 0 then goto L49e5dc;
  #L49e5d2.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.f` @type ^`long` := v8 @kind wide;
  #L49e5d6.  call `request`(v2, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L49e5dc.  v1:= -v1 @kind int;
  #L49e5de.  call temp:= `addAndGet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L49e5e4.  v1:= temp;
  #L49e5e6.  if v1 != 0 then goto L49e568;
  #L49e5ea.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i` v6 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.c:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49e758.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49e75c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49e762.  v0:= temp @kind object;
  #L49e764.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[]) v0 @kind object;
  #L49e768.  v1:= length @variable v0;
  #L49e76a.  if v1 != 0 then goto L49e770;
  #L49e76e.  return @kind void;
  #L49e770.  v2:= -1I;
  #L49e772.  v3:= 0I;
  #L49e774.  v4:= 0I;
  #L49e776.  if v4 >= v1 then goto L49e794;
  #L49e77a.  v5:= v0[v4] @kind object;
  #L49e77e.  call temp:= `equals`(v5, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L49e784.  v5:= temp;
  #L49e786.  if v5 == 0 then goto L49e78e;
  #L49e78a.  v2:= v4;
  #L49e78c.  goto L49e794;
  #L49e78e.  v4:= v4 + 1;
  #L49e792.  goto L49e776;
  #L49e794.  if v2 >= 0 then goto L49e79a;
  #L49e798.  return @kind void;
  #L49e79a.  v4:= 1I;
  #L49e79c.  if v1 != v4 then goto L49e7a6;
  #L49e7a0.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.h` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[] @kind object;
  #L49e7a4.  goto L49e7c4;
  #L49e7a6.  v5:= v1 + -1;
  #L49e7aa.  v5:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[v5];
  #L49e7ae.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49e7b4.  v3:= v2 + 1;
  #L49e7b8.  v1:= v1 - v2 @kind int;
  #L49e7ba.  v1:= v1 - v4 @kind int;
  #L49e7bc.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49e7c2.  v1:= v5 @kind object;
  #L49e7c4.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49e7c8.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L49e7ce.  v0:= temp;
  #L49e7d0.  if v0 == 0 then goto L49e758;
  #L49e7d4.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49e520.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49e524.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.i` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[] @kind object;
  #L49e528.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L49e52e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49e532.  v1:= 0I;
  #L49e534.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L49e53a.  call temp:= `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L49e540.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49e480.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49e484.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49e48a.  v0:= temp @kind object;
  #L49e48c.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.i` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[] @kind object;
  #L49e490.  if v0 != v1 then goto L49e498;
  #L49e494.  v0:= 1I;
  #L49e496.  goto L49e49a;
  #L49e498.  v0:= 0I;
  #L49e49a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L49e5fc.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.b` @type ^`boolean` @kind boolean;
  #L49e600.  if v0 != 0 then goto L49e644;
  #L49e604.  v0:= 1I;
  #L49e606.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.b` @type ^`boolean` := v0 @kind boolean;
  #L49e60a.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$f` @kind object;
  #L49e60e.  call `complete`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$f;.complete:()V` @kind interface;
  #L49e614.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49e618.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.i` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[] @kind object;
  #L49e61c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L49e622.  v0:= temp @kind object;
  #L49e624.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[]) v0 @kind object;
  #L49e628.  v1:= length @variable v0;
  #L49e62a.  v2:= 0I;
  #L49e62c.  if v2 >= v1 then goto L49e644;
  #L49e630.  v3:= v0[v2] @kind object;
  #L49e634.  v4:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$f` @kind object;
  #L49e638.  call `c`(v4, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$f;.c:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;)V` @kind interface;
  #L49e63e.  v2:= v2 + 1;
  #L49e642.  goto L49e62c;
  #L49e644.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49e658.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.b` @type ^`boolean` @kind boolean;
  #L49e65c.  if v0 != 0 then goto L49e6a0;
  #L49e660.  v0:= 1I;
  #L49e662.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.b` @type ^`boolean` := v0 @kind boolean;
  #L49e666.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$f` @kind object;
  #L49e66a.  call `a`(v0, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$f;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L49e670.  v5:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49e674.  v0:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.i` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[] @kind object;
  #L49e678.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L49e67e.  v5:= temp @kind object;
  #L49e680.  v5:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[]) v5 @kind object;
  #L49e684.  v0:= length @variable v5;
  #L49e686.  v1:= 0I;
  #L49e688.  if v1 >= v0 then goto L49e6a6;
  #L49e68c.  v2:= v5[v1] @kind object;
  #L49e690.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$f` @kind object;
  #L49e694.  call `c`(v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$f;.c:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;)V` @kind interface;
  #L49e69a.  v1:= v1 + 1;
  #L49e69e.  goto L49e688;
  #L49e6a0.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L49e6a6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49e6b8.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.b` @type ^`boolean` @kind boolean;
  #L49e6bc.  if v0 != 0 then goto L49e6f6;
  #L49e6c0.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$f` @kind object;
  #L49e6c4.  call `b`(v0, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$f;.b:(Ljava/lang/Object;)V` @kind interface;
  #L49e6ca.  v5:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49e6ce.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49e6d4.  v5:= temp @kind object;
  #L49e6d6.  v5:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[]) v5 @kind object;
  #L49e6da.  v0:= length @variable v5;
  #L49e6dc.  v1:= 0I;
  #L49e6de.  if v1 >= v0 then goto L49e6f6;
  #L49e6e2.  v2:= v5[v1] @kind object;
  #L49e6e6.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$f` @kind object;
  #L49e6ea.  call `c`(v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$f;.c:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;)V` @kind interface;
  #L49e6f0.  v1:= v1 + 1;
  #L49e6f4.  goto L49e6de;
  #L49e6f6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i` v4 @kind this, `org.reactivestreams.Subscription` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49e708.  call temp:= `setOnce`(v4, v5) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L49e70e.  v5:= temp;
  #L49e710.  if v5 == 0 then goto L49e746;
  #L49e714.  call `b`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.b:()V` @kind virtual;
  #L49e71a.  v5:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49e71e.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49e724.  v5:= temp @kind object;
  #L49e726.  v5:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[]) v5 @kind object;
  #L49e72a.  v0:= length @variable v5;
  #L49e72c.  v1:= 0I;
  #L49e72e.  if v1 >= v0 then goto L49e746;
  #L49e732.  v2:= v5[v1] @kind object;
  #L49e736.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$f` @kind object;
  #L49e73a.  call `c`(v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$f;.c:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;)V` @kind interface;
  #L49e740.  v1:= v1 + 1;
  #L49e744.  goto L49e72e;
  #L49e746.  return @kind void;
}
