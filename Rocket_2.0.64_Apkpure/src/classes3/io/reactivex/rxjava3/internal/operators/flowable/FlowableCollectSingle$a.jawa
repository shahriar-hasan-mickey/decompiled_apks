record `io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.SingleObserver` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiConsumer` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a` v0 @kind this, `io.reactivex.rxjava3.core.SingleObserver` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.rxjava3.functions.BiConsumer` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCollectSingle$a;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;Ljava/lang/Object;Lio/reactivex/rxjava3/functions/BiConsumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48a5bc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48a5c2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` := v1 @kind object;
  #L48a5c6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.b` @type ^`io.reactivex.rxjava3.functions.BiConsumer` := v3 @kind object;
  #L48a5ca.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.c` @type ^`java.lang.Object` := v2 @kind object;
  #L48a5ce.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCollectSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48a5e0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48a5e4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48a5ea.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L48a5ee.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L48a5f2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCollectSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48a598.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48a59c.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L48a5a0.  if v0 != v1 then goto L48a5a8;
  #L48a5a4.  v0:= 1I;
  #L48a5a6.  goto L48a5aa;
  #L48a5a8.  v0:= 0I;
  #L48a5aa.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCollectSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48a604.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.e` @type ^`boolean` @kind boolean;
  #L48a608.  if v0 == 0 then goto L48a60e;
  #L48a60c.  return @kind void;
  #L48a60e.  v0:= 1I;
  #L48a610.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.e` @type ^`boolean` := v0 @kind boolean;
  #L48a614.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L48a618.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L48a61c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L48a620.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.c` @type ^`java.lang.Object` @kind object;
  #L48a624.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L48a62a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCollectSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48a63c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.e` @type ^`boolean` @kind boolean;
  #L48a640.  if v0 == 0 then goto L48a64c;
  #L48a644.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L48a64a.  return @kind void;
  #L48a64c.  v0:= 1I;
  #L48a64e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.e` @type ^`boolean` := v0 @kind boolean;
  #L48a652.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L48a656.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L48a65a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L48a65e.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48a664.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCollectSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48a678.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.e` @type ^`boolean` @kind boolean;
  #L48a67c.  if v0 == 0 then goto L48a682;
  #L48a680.  return @kind void;
  #L48a682.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.b` @type ^`io.reactivex.rxjava3.functions.BiConsumer` @kind object;
  #L48a686.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.c` @type ^`java.lang.Object` @kind object;
  #L48a68a.  call `accept`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/functions/BiConsumer;.accept:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L48a690.  goto L48a6aa;
  #L48a692.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48a694.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48a69a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48a69e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48a6a4.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCollectSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L48a6aa.  return @kind void;
  catch `java.lang.Throwable` @[L48a682..L48a690] goto L48a692;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCollectSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48a6c8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48a6cc.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L48a6d2.  v0:= temp;
  #L48a6d4.  if v0 == 0 then goto L48a6f6;
  #L48a6d8.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L48a6dc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L48a6e0.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L48a6e6.  v0:= 9223372036854775807L;
  #L48a6f0.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L48a6f6.  return @kind void;
}
