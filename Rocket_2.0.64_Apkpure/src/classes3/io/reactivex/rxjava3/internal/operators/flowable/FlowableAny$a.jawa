record `io.reactivex.rxjava3.internal.operators.flowable.FlowableAny$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `io.reactivex.rxjava3.functions.Predicate` `io.reactivex.rxjava3.internal.operators.flowable.FlowableAny$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableAny$a.b` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableAny$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableAny$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAny$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAny$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4879e8.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4879ee.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAny$a.a` @type ^`io.reactivex.rxjava3.functions.Predicate` := v2 @kind object;
  #L4879f2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAny$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAny$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L487a04.  call `cancel`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @kind super;
  #L487a0a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAny$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L487a0e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L487a14.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAny$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAny$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L487a28.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAny$a.c` @type ^`boolean` @kind boolean;
  #L487a2c.  if v0 != 0 then goto L487a40;
  #L487a30.  v0:= 1I;
  #L487a32.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAny$a.c` @type ^`boolean` := v0 @kind boolean;
  #L487a36.  v0:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L487a3a.  call `complete`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L487a40.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAny$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAny$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L487a54.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAny$a.c` @type ^`boolean` @kind boolean;
  #L487a58.  if v0 == 0 then goto L487a64;
  #L487a5c.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L487a62.  return @kind void;
  #L487a64.  v0:= 1I;
  #L487a66.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAny$a.c` @type ^`boolean` := v0 @kind boolean;
  #L487a6a.  v0:= v1.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L487a6e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L487a74.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAny$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAny$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L487a88.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAny$a.c` @type ^`boolean` @kind boolean;
  #L487a8c.  if v0 == 0 then goto L487a92;
  #L487a90.  return @kind void;
  #L487a92.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAny$a.a` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L487a96.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L487a9c.  v2:= temp;
  #L487a9e.  if v2 == 0 then goto L487abc;
  #L487aa2.  v2:= 1I;
  #L487aa4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAny$a.c` @type ^`boolean` := v2 @kind boolean;
  #L487aa8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAny$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L487aac.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L487ab2.  v2:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L487ab6.  call `complete`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L487abc.  return @kind void;
  #L487abe.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L487ac0.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L487ac6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAny$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L487aca.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L487ad0.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAny$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L487ad6.  return @kind void;
  catch `java.lang.Throwable` @[L487a92..L487a9e] goto L487abe;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAny$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAny$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L487af4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAny$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L487af8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L487afe.  v0:= temp;
  #L487b00.  if v0 == 0 then goto L487b22;
  #L487b04.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAny$a.b` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L487b08.  v0:= v2.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L487b0c.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L487b12.  v0:= 9223372036854775807L;
  #L487b1c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L487b22.  return @kind void;
}
