record `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$b` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.d` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.e` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.h` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.i` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.j` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.k` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.l` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.m` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.n` @AccessFlag VOLATILE;
}
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.o` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.p` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.q` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.r` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L49756c.  v0:= 1I;
  #L49756e.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L497574.  v0:= temp @kind object;
  #L497576.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.o` @type ^`java.lang.Integer` := v0 @kind object;
  #L49757a.  v0:= 2I;
  #L49757c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L497582.  v0:= temp @kind object;
  #L497584.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.p` @type ^`java.lang.Integer` := v0 @kind object;
  #L497588.  v0:= 3I;
  #L49758a.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L497590.  v0:= temp @kind object;
  #L497592.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.q` @type ^`java.lang.Integer` := v0 @kind object;
  #L497596.  v0:= 4I;
  #L497598.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L49759e.  v0:= temp @kind object;
  #L4975a0.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.r` @type ^`java.lang.Integer` := v0 @kind object;
  #L4975a4.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `io.reactivex.rxjava3.functions.Function` v4 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4975b8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4975be.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4975c2.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4975c6.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4975cc.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L4975d0.  v2:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L4975d4.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4975da.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v2 @kind object;
  #L4975de.  v2:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4975e2.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L4975e8.  v0:= temp;
  #L4975ea.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4975f0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L4975f4.  v2:= new `java.util.LinkedHashMap`;
  #L4975f8.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L4975fe.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.e` @type ^`java.util.Map` := v2 @kind object;
  #L497602.  v2:= new `java.util.LinkedHashMap`;
  #L497606.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L49760c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.f` @type ^`java.util.Map` := v2 @kind object;
  #L497610.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L497614.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L49761a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L49761e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.h` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L497622.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.i` @type ^`io.reactivex.rxjava3.functions.Function` := v4 @kind object;
  #L497626.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.j` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v5 @kind object;
  #L49762a.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L49762e.  v3:= 2I;
  #L497630.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L497636.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L49763a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L497b9c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L497ba0.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L497ba6.  v0:= temp;
  #L497ba8.  if v0 == 0 then goto L497bbe;
  #L497bac.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L497bb0.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L497bb6.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.g:()V` @kind virtual;
  #L497bbc.  goto L497bc4;
  #L497bbe.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L497bc4.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `boolean` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.b:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L497bd8.  @monitorenter v1
  #L497bda.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L497bde.  if v2 == 0 then goto L497be8;
  #L497be2.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L497be6.  goto L497bec;
  #L497be8.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L497bec.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L497bf2.  @monitorexit v1
  #L497bf4.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.g:()V` @kind virtual;
  #L497bfa.  return @kind void;
  #L497bfc.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L497bfe.  @monitorexit v1
  #L497c00.  throw v2;
  catch `java.lang.Throwable` @[L497bda..L497bf4] goto L497bfc;
  catch `java.lang.Throwable` @[L497bfe..L497c00] goto L497bfc;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.c:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L497b40.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L497b44.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L497b4a.  v0:= temp;
  #L497b4c.  if v0 == 0 then goto L497b58;
  #L497b50.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.g:()V` @kind virtual;
  #L497b56.  goto L497b5e;
  #L497b58.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L497b5e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49764c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.n` @type ^`boolean` @kind boolean;
  #L497650.  if v0 == 0 then goto L497656;
  #L497654.  return @kind void;
  #L497656.  v0:= 1I;
  #L497658.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.n` @type ^`boolean` := v0 @kind boolean;
  #L49765c.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.f:()V` @kind virtual;
  #L497662.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L497668.  v0:= temp;
  #L49766a.  if v0 != 0 then goto L497678;
  #L49766e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L497672.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L497678.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$d` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.d:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L497b70.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L497b74.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L497b7a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L497b7e.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L497b84.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.g:()V` @kind virtual;
  #L497b8a.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `boolean` v2 , `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.e:(ZLio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L497af0.  @monitorenter v1
  #L497af2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L497af6.  if v2 == 0 then goto L497b00;
  #L497afa.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.q` @type ^`java.lang.Integer` @kind object;
  #L497afe.  goto L497b04;
  #L497b00.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.r` @type ^`java.lang.Integer` @kind object;
  #L497b04.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L497b0a.  @monitorexit v1
  #L497b0c.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.g:()V` @kind virtual;
  #L497b12.  return @kind void;
  #L497b14.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L497b16.  @monitorexit v1
  #L497b18.  throw v2;
  catch `java.lang.Throwable` @[L497af2..L497b0c] goto L497b14;
  catch `java.lang.Throwable` @[L497b16..L497b18] goto L497b14;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.f:()V` @AccessFlag  {
    temp;
    v0;

  #L49768c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L497690.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L497696.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a` v17 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L4976a8.  v1:= v17 @kind object;
  #L4976ac.  call temp:= `getAndIncrement`(v17) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4976b2.  v0:= temp;
  #L4976b4.  if v0 == 0 then goto L4976ba;
  #L4976b8.  return @kind void;
  #L4976ba.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4976be.  v3:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4976c2.  v0:= 1I;
  #L4976c4.  v4:= 1I;
  #L4976c6.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.n` @type ^`boolean` @kind boolean;
  #L4976ca.  if v5 == 0 then goto L4976d6;
  #L4976ce.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4976d4.  return @kind void;
  #L4976d6.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4976da.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4976e0.  v5:= temp @kind object;
  #L4976e2.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L4976e6.  if v5 == 0 then goto L4976fe;
  #L4976ea.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4976f0.  call `f`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.f:()V` @kind virtual;
  #L4976f6.  call `h`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4976fc.  return @kind void;
  #L4976fe.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L497702.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L497708.  v5:= temp;
  #L49770a.  v6:= 0I;
  #L49770c.  if v5 != 0 then goto L497714;
  #L497710.  v5:= 1I;
  #L497712.  goto L497716;
  #L497714.  v5:= 0I;
  #L497716.  call temp:= `poll`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L49771c.  v7:= temp @kind object;
  #L49771e.  v7:= (`java.lang.Integer`) v7 @kind object;
  #L497722.  if v7 != 0 then goto L49772a;
  #L497726.  v8:= 1I;
  #L497728.  goto L49772c;
  #L49772a.  v8:= 0I;
  #L49772c.  if v5 == 0 then goto L49775a;
  #L497730.  if v8 == 0 then goto L49775a;
  #L497734.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L497738.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L49773e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.f` @type ^`java.util.Map` @kind object;
  #L497742.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L497748.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L49774c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L497752.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L497758.  return @kind void;
  #L49775a.  if v8 == 0 then goto L49776e;
  #L49775e.  v4:= -v4 @kind int;
  #L497760.  call temp:= `addAndGet`(v1, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L497766.  v4:= temp;
  #L497768.  if v4 != 0 then goto L4976c6;
  #L49776c.  return @kind void;
  #L49776e.  call temp:= `poll`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L497774.  v5:= temp @kind object;
  #L497776.  v8:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L49777a.  v9:= 1L;
  #L49777e.  v11:= "Could not emit value due to lack of requests" @kind object;
  #L497782.  v12:= "The resultSelector returned a null value" @kind object;
  #L497786.  if v7 != v8 then goto L4978b8;
  #L49778a.  v6:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.l` @type ^`int`;
  #L49778e.  v7:= v6 + 1;
  #L497792.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.l` @type ^`int` := v7;
  #L497796.  v7:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L49779a.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4977a0.  v8:= temp @kind object;
  #L4977a2.  call temp:= `put`(v7, v8, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4977a8.  v7:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.h` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4977ac.  call temp:= `apply`(v7, v5) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4977b2.  v7:= temp @kind object;
  #L4977b4.  v8:= "The leftEnd returned a null Publisher" @kind object;
  #L4977b8.  call temp:= `requireNonNull`(v7, v8) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4977be.  v7:= (`org.reactivestreams.Publisher`) v7 @kind object;
  #L4977c2.  v8:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c`;
  #L4977c6.  call `<init>`(v8, v1, v0, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$b;ZI)V` @kind direct;
  #L4977cc.  v6:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4977d0.  call temp:= `add`(v6, v8) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4977d6.  call `subscribe`(v7, v8) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4977dc.  v6:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4977e0.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4977e6.  v6:= temp @kind object;
  #L4977e8.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L4977ec.  if v6 == 0 then goto L497804;
  #L4977f0.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4977f6.  call `f`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.f:()V` @kind virtual;
  #L4977fc.  call `h`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L497802.  return @kind void;
  #L497804.  v6:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L497808.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49780e.  v6:= temp @kind wide;
  #L497810.  v8:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.f` @type ^`java.util.Map` @kind object;
  #L497814.  call temp:= `values`(v8) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L49781a.  v8:= temp @kind object;
  #L49781c.  call temp:= `iterator`(v8) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L497822.  v8:= temp @kind object;
  #L497824.  v13:= 0L;
  #L497828.  call temp:= `hasNext`(v8) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L49782e.  v16:= temp;
  #L497830.  if v16 == 0 then goto L497894;
  #L497834.  call temp:= `next`(v8) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L49783a.  v0:= temp @kind object;
  #L49783c.  v15:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.j` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L497840.  call temp:= `apply`(v15, v5, v0) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L497846.  v0:= temp @kind object;
  #L497848.  call temp:= `requireNonNull`(v0, v12) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49784e.  v15:= lcmp(v13, v6);
  #L497852.  if v15 == 0 then goto L497862;
  #L497856.  call `onNext`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L49785c.  v13:= v13 + v9 @kind long;
  #L49785e.  v0:= 1I;
  #L497860.  goto L497828;
  #L497862.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L497866.  v4:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L49786a.  call `<init>`(v4, v11) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L497870.  call temp:= `addThrowable`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L497876.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L49787c.  call `f`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.f:()V` @kind virtual;
  #L497882.  call `h`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L497888.  return @kind void;
  #L49788a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49788c.  call `i`(v1, v0, v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L497892.  return @kind void;
  #L497894.  v5:= 0L;
  #L497898.  v0:= lcmp(v13, v5);
  #L49789c.  if v0 == 0 then goto L497a3c;
  #L4978a0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4978a4.  call temp:= `produced`(v0, v13) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4978aa.  goto L497a3c;
  #L4978ae.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4978b0.  call `i`(v1, v0, v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L4978b6.  return @kind void;
  #L4978b8.  v0:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L4978bc.  if v7 != v0 then goto L4979ea;
  #L4978c0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.m` @type ^`int`;
  #L4978c4.  v7:= v0 + 1;
  #L4978c8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.m` @type ^`int` := v7;
  #L4978cc.  v7:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.f` @type ^`java.util.Map` @kind object;
  #L4978d0.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4978d6.  v8:= temp @kind object;
  #L4978d8.  call temp:= `put`(v7, v8, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4978de.  v7:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.i` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4978e2.  call temp:= `apply`(v7, v5) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4978e8.  v7:= temp @kind object;
  #L4978ea.  v8:= "The rightEnd returned a null Publisher" @kind object;
  #L4978ee.  call temp:= `requireNonNull`(v7, v8) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4978f4.  v7:= (`org.reactivestreams.Publisher`) v7 @kind object;
  #L4978f8.  v8:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c`;
  #L4978fc.  call `<init>`(v8, v1, v6, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$b;ZI)V` @kind direct;
  #L497902.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L497906.  call temp:= `add`(v0, v8) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L49790c.  call `subscribe`(v7, v8) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L497912.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L497916.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49791c.  v0:= temp @kind object;
  #L49791e.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L497922.  if v0 == 0 then goto L49793a;
  #L497926.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L49792c.  call `f`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.f:()V` @kind virtual;
  #L497932.  call `h`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L497938.  return @kind void;
  #L49793a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L49793e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L497944.  v6:= temp @kind wide;
  #L497946.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L49794a.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L497950.  v0:= temp @kind object;
  #L497952.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L497958.  v0:= temp @kind object;
  #L49795a.  v13:= 0L;
  #L49795e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L497964.  v8:= temp;
  #L497966.  if v8 == 0 then goto L4979c8;
  #L49796a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L497970.  v8:= temp @kind object;
  #L497972.  v15:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.j` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L497976.  call temp:= `apply`(v15, v8, v5) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L49797c.  v8:= temp @kind object;
  #L49797e.  call temp:= `requireNonNull`(v8, v12) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L497984.  v15:= lcmp(v13, v6);
  #L497988.  if v15 == 0 then goto L497996;
  #L49798c.  call `onNext`(v3, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L497992.  v13:= v13 + v9 @kind long;
  #L497994.  goto L49795e;
  #L497996.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49799a.  v4:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L49799e.  call `<init>`(v4, v11) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4979a4.  call temp:= `addThrowable`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4979aa.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4979b0.  call `f`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.f:()V` @kind virtual;
  #L4979b6.  call `h`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4979bc.  return @kind void;
  #L4979be.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4979c0.  call `i`(v1, v0, v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L4979c6.  return @kind void;
  #L4979c8.  v5:= 0L;
  #L4979cc.  v0:= lcmp(v13, v5);
  #L4979d0.  if v0 == 0 then goto L497a3c;
  #L4979d4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4979d8.  call temp:= `produced`(v0, v13) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4979de.  goto L497a3c;
  #L4979e0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4979e2.  call `i`(v1, v0, v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L4979e8.  return @kind void;
  #L4979ea.  v0:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.q` @type ^`java.lang.Integer` @kind object;
  #L4979ee.  if v7 != v0 then goto L497a18;
  #L4979f2.  v5:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c`) v5 @kind object;
  #L4979f6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4979fa.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c.c` @type ^`int`;
  #L4979fe.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L497a04.  v6:= temp @kind object;
  #L497a06.  call temp:= `remove`(v0, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L497a0c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L497a10.  call temp:= `remove`(v0, v5) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.remove:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L497a16.  goto L497a3c;
  #L497a18.  v5:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c`) v5 @kind object;
  #L497a1c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.f` @type ^`java.util.Map` @kind object;
  #L497a20.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c.c` @type ^`int`;
  #L497a24.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L497a2a.  v6:= temp @kind object;
  #L497a2c.  call temp:= `remove`(v0, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L497a32.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L497a36.  call temp:= `remove`(v0, v5) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.remove:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L497a3c.  v0:= 1I;
  #L497a3e.  goto L4976c6;
  catch `java.lang.Throwable` @[L4977a8..L4977c2] goto L4978ae;
  catch `java.lang.Throwable` @[L49783c..L49784e] goto L49788a;
  catch `java.lang.Throwable` @[L4978de..L4978f8] goto L4979e0;
  catch `java.lang.Throwable` @[L497972..L497984] goto L4979be;
}
procedure `void` `h`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L497a84.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L497a88.  call temp:= `terminate`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L497a8e.  v0:= temp @kind object;
  #L497a90.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L497a94.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L497a9a.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.f` @type ^`java.util.Map` @kind object;
  #L497a9e.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L497aa4.  call `onError`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L497aaa.  return @kind void;
}
procedure `void` `i`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object, `org.reactivestreams.Subscriber` v3 @kind object, `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)V` @AccessFlag  {
    temp;
    v0;

  #L497abc.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L497ac2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L497ac6.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L497acc.  call `clear`(v4) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L497ad2.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.f:()V` @kind virtual;
  #L497ad8.  call `h`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L497ade.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L497c28.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L497c2e.  v0:= temp;
  #L497c30.  if v0 == 0 then goto L497c3e;
  #L497c34.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L497c38.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L497c3e.  return @kind void;
}
