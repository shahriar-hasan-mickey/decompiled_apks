record `io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingSubscribe` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingSubscribe` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBlockingSubscribe;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L487e04.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L487e0a.  v0:= new `java.lang.IllegalStateException`;
  #L487e0e.  v1:= "No instances!" @kind object;
  #L487e12.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L487e18.  throw v0;
}
procedure `void` `subscribe`(`org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L487e2c.  v0:= new `io.reactivex.rxjava3.internal.util.BlockingIgnoringReceiver`;
  #L487e30.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/util/BlockingIgnoringReceiver;.<init>:()V` @kind direct;
  #L487e36.  v1:= new `io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber`;
  #L487e3a.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L487e40.  v2:= temp @kind object;
  #L487e42.  v3:= `@@io.reactivex.rxjava3.internal.functions.Functions.REQUEST_MAX` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L487e46.  call `<init>`(v1, v2, v0, v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.<init>:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Consumer;)V` @kind direct;
  #L487e4c.  call `subscribe`(v4, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L487e52.  call `awaitForComplete`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.awaitForComplete:(Ljava/util/concurrent/CountDownLatch;Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind static;
  #L487e58.  v4:= v0.`io.reactivex.rxjava3.internal.util.BlockingIgnoringReceiver.error` @type ^`java.lang.Throwable` @kind object;
  #L487e5c.  if v4 != 0 then goto L487e62;
  #L487e60.  return @kind void;
  #L487e62.  call temp:= `wrapOrThrow`(v4) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L487e68.  v4:= temp @kind object;
  #L487e6a.  throw v4;
}
procedure `void` `subscribe`(`org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.rxjava3.functions.Consumer` v3 @kind object, `io.reactivex.rxjava3.functions.Consumer` v4 @kind object, `io.reactivex.rxjava3.functions.Action` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L487e7c.  v0:= "onNext is null" @kind object;
  #L487e80.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L487e86.  v0:= "onError is null" @kind object;
  #L487e8a.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L487e90.  v0:= "onComplete is null" @kind object;
  #L487e94.  call temp:= `requireNonNull`(v5, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L487e9a.  v0:= new `io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber`;
  #L487e9e.  v1:= `@@io.reactivex.rxjava3.internal.functions.Functions.REQUEST_MAX` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L487ea2.  call `<init>`(v0, v3, v4, v5, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.<init>:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Consumer;)V` @kind direct;
  #L487ea8.  call `subscribe`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L487eae.  return @kind void;
}
procedure `void` `subscribe`(`org.reactivestreams.Publisher` v7 @kind object, `io.reactivex.rxjava3.functions.Consumer` v8 @kind object, `io.reactivex.rxjava3.functions.Consumer` v9 @kind object, `io.reactivex.rxjava3.functions.Action` v10 @kind object, `int` v11 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L487ec0.  v0:= "onNext is null" @kind object;
  #L487ec4.  call temp:= `requireNonNull`(v8, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L487eca.  v0:= "onError is null" @kind object;
  #L487ece.  call temp:= `requireNonNull`(v9, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L487ed4.  v0:= "onComplete is null" @kind object;
  #L487ed8.  call temp:= `requireNonNull`(v10, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L487ede.  v0:= "number > 0 required" @kind object;
  #L487ee2.  call temp:= `verifyPositive`(v11, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L487ee8.  v0:= new `io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber`;
  #L487eec.  call temp:= `boundedConsumer`(v11) @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.boundedConsumer:(I)Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L487ef2.  v5:= temp @kind object;
  #L487ef4.  v1:= v0 @kind object;
  #L487ef6.  v2:= v8 @kind object;
  #L487ef8.  v3:= v9 @kind object;
  #L487efa.  v4:= v10 @kind object;
  #L487efc.  v6:= v11;
  #L487efe.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.<init>:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Consumer;I)V` @kind direct;
  #L487f04.  call `subscribe`(v7, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L487f0a.  return @kind void;
}
procedure `void` `subscribe`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L487f1c.  v0:= new `java.util.concurrent.LinkedBlockingQueue`;
  #L487f20.  call `<init>`(v0) @signature `Ljava/util/concurrent/LinkedBlockingQueue;.<init>:()V` @kind direct;
  #L487f26.  v1:= new `io.reactivex.rxjava3.internal.subscribers.BlockingSubscriber`;
  #L487f2a.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/BlockingSubscriber;.<init>:(Ljava/util/Queue;)V` @kind direct;
  #L487f30.  call `subscribe`(v3, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L487f36.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BlockingSubscriber;.isCancelled:()Z` @kind virtual;
  #L487f3c.  v3:= temp;
  #L487f3e.  if v3 == 0 then goto L487f44;
  #L487f42.  goto L487f9e;
  #L487f44.  call temp:= `poll`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L487f4a.  v3:= temp @kind object;
  #L487f4c.  if v3 != 0 then goto L487f6c;
  #L487f50.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BlockingSubscriber;.isCancelled:()Z` @kind virtual;
  #L487f56.  v3:= temp;
  #L487f58.  if v3 == 0 then goto L487f5e;
  #L487f5c.  goto L487f9e;
  #L487f5e.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L487f64.  call temp:= `take`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.take:()Ljava/lang/Object;` @kind interface;
  #L487f6a.  v3:= temp @kind object;
  #L487f6c.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BlockingSubscriber;.isCancelled:()Z` @kind virtual;
  #L487f72.  v2:= temp;
  #L487f74.  if v2 == 0 then goto L487f7a;
  #L487f78.  goto L487f9e;
  #L487f7a.  v2:= `@@io.reactivex.rxjava3.internal.subscribers.BlockingSubscriber.TERMINATED` @type ^`java.lang.Object` @kind object;
  #L487f7e.  if v3 == v2 then goto L487f9e;
  #L487f82.  call temp:= `acceptFull`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.acceptFull:(Ljava/lang/Object;Lorg/reactivestreams/Subscriber;)Z` @kind static;
  #L487f88.  v3:= temp;
  #L487f8a.  if v3 == 0 then goto L487f36;
  #L487f8e.  goto L487f9e;
  #L487f90.  v3:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L487f92.  call `cancel`(v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BlockingSubscriber;.cancel:()V` @kind virtual;
  #L487f98.  call `onError`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L487f9e.  return @kind void;
  catch `java.lang.InterruptedException` @[L487f36..L487f8a] goto L487f90;
}
