record `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` @kind class {
  `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.n` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.o` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$b;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/core/Scheduler$Worker;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L499814.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.<init>:(Lio/reactivex/rxjava3/core/Scheduler$Worker;ZI)V` @kind direct;
  #L49981a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L49981e.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b` v14 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$b;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L4998dc.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4998e0.  v1:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4998e4.  v2:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` @kind wide;
  #L4998e8.  v4:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.o` @type ^`long` @kind wide;
  #L4998ec.  v6:= 1I;
  #L4998ee.  v7:= 1I;
  #L4998f0.  v8:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4998f4.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4998fa.  v8:= temp @kind wide;
  #L4998fc.  v10:= lcmp(v2, v8);
  #L499900.  if v10 == 0 then goto L49998e;
  #L499904.  v11:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L499908.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L49990e.  v12:= temp @kind object;
  #L499910.  if v12 != 0 then goto L499918;
  #L499914.  v13:= 1I;
  #L499916.  goto L49991a;
  #L499918.  v13:= 0I;
  #L49991a.  call temp:= `e`(v14, v11, v13, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L499920.  v11:= temp;
  #L499922.  if v11 == 0 then goto L499928;
  #L499926.  return @kind void;
  #L499928.  if v13 == 0 then goto L49992e;
  #L49992c.  goto L49998e;
  #L49992e.  call temp:= `tryOnNext`(v0, v12) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L499934.  v10:= temp;
  #L499936.  v11:= 1L;
  #L49993a.  if v10 == 0 then goto L499940;
  #L49993e.  v2:= v2 + v11 @kind long;
  #L499940.  v4:= v4 + v11 @kind long;
  #L499942.  v10:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.d` @type ^`int`;
  #L499946.  v10:= (`long`) v10 @kind i2l;
  #L499948.  v12:= lcmp(v4, v10);
  #L49994c.  if v12 != 0 then goto L4998fc;
  #L499950.  v10:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L499954.  call `request`(v10, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L49995a.  v4:= 0L;
  #L49995e.  goto L4998fc;
  #L499960.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L499962.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L499968.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v6 @kind boolean;
  #L49996c.  v3:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L499970.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L499976.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L49997c.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L499982.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L499986.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L49998c.  return @kind void;
  #L49998e.  if v10 != 0 then goto L4999ac;
  #L499992.  v8:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L499996.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L49999c.  v9:= temp;
  #L49999e.  call temp:= `e`(v14, v8, v9, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L4999a4.  v8:= temp;
  #L4999a6.  if v8 == 0 then goto L4999ac;
  #L4999aa.  return @kind void;
  #L4999ac.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` := v2 @kind wide;
  #L4999b0.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.o` @type ^`long` := v4 @kind wide;
  #L4999b4.  v7:= -v7 @kind int;
  #L4999b6.  call temp:= `addAndGet`(v14, v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4999bc.  v7:= temp;
  #L4999be.  if v7 != 0 then goto L4998f0;
  #L4999c2.  return @kind void;
  catch `java.lang.Throwable` @[L499908..L499910] goto L499960;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$b;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4999e0.  v0:= 1I;
  #L4999e2.  v1:= 1I;
  #L4999e4.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L4999e8.  if v2 == 0 then goto L4999ee;
  #L4999ec.  return @kind void;
  #L4999ee.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L4999f2.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4999f6.  v4:= 0I;
  #L4999f8.  call `onNext`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4999fe.  if v2 == 0 then goto L499a30;
  #L499a02.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v0 @kind boolean;
  #L499a06.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.j` @type ^`java.lang.Throwable` @kind object;
  #L499a0a.  if v0 == 0 then goto L499a1a;
  #L499a0e.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L499a12.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L499a18.  goto L499a24;
  #L499a1a.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L499a1e.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L499a24.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L499a28.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L499a2e.  return @kind void;
  #L499a30.  v1:= -v1 @kind int;
  #L499a32.  call temp:= `addAndGet`(v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L499a38.  v1:= temp;
  #L499a3a.  if v1 != 0 then goto L4999e4;
  #L499a3e.  return @kind void;
}
procedure `void` `h`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b` v10 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$b;.h:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L499a50.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L499a54.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L499a58.  v2:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` @kind wide;
  #L499a5c.  v4:= 1I;
  #L499a5e.  v5:= 1I;
  #L499a60.  v6:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L499a64.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L499a6a.  v6:= temp @kind wide;
  #L499a6c.  v8:= lcmp(v2, v6);
  #L499a70.  if v8 == 0 then goto L499adc;
  #L499a74.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L499a7a.  v8:= temp @kind object;
  #L499a7c.  v9:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L499a80.  if v9 == 0 then goto L499a86;
  #L499a84.  return @kind void;
  #L499a86.  if v8 != 0 then goto L499aa0;
  #L499a8a.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v4 @kind boolean;
  #L499a8e.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L499a94.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L499a98.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L499a9e.  return @kind void;
  #L499aa0.  call temp:= `tryOnNext`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L499aa6.  v8:= temp;
  #L499aa8.  if v8 == 0 then goto L499a6c;
  #L499aac.  v8:= 1L;
  #L499ab0.  v2:= v2 + v8 @kind long;
  #L499ab2.  goto L499a6c;
  #L499ab4.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L499ab6.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L499abc.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v4 @kind boolean;
  #L499ac0.  v2:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L499ac4.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L499aca.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L499ad0.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L499ad4.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L499ada.  return @kind void;
  #L499adc.  v6:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L499ae0.  if v6 == 0 then goto L499ae6;
  #L499ae4.  return @kind void;
  #L499ae6.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L499aec.  v6:= temp;
  #L499aee.  if v6 == 0 then goto L499b08;
  #L499af2.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v4 @kind boolean;
  #L499af6.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L499afc.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L499b00.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L499b06.  return @kind void;
  #L499b08.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` := v2 @kind wide;
  #L499b0c.  v5:= -v5 @kind int;
  #L499b0e.  call temp:= `addAndGet`(v10, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L499b14.  v5:= temp;
  #L499b16.  if v5 != 0 then goto L499a60;
  #L499b1a.  return @kind void;
  catch `java.lang.Throwable` @[L499a74..L499a7c] goto L499ab4;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L499830.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L499834.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L49983a.  v0:= temp;
  #L49983c.  if v0 == 0 then goto L4998c8;
  #L499840.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L499844.  v0:= instanceof @variable v4 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind boolean;
  #L499848.  if v0 == 0 then goto L4998a0;
  #L49984c.  v0:= v4 @kind object;
  #L49984e.  v0:= (`io.reactivex.rxjava3.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L499852.  v1:= 7I;
  #L499854.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L49985a.  v1:= temp;
  #L49985c.  v2:= 1I;
  #L49985e.  if v1 != v2 then goto L49987a;
  #L499862.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int` := v2;
  #L499866.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L49986a.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` := v2 @kind boolean;
  #L49986e.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L499872.  call `onSubscribe`(v4, v3) @signature `Lio/reactivex/rxjava3/core/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L499878.  return @kind void;
  #L49987a.  v2:= 2I;
  #L49987c.  if v1 != v2 then goto L4998a0;
  #L499880.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int` := v2;
  #L499884.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L499888.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L49988c.  call `onSubscribe`(v0, v3) @signature `Lio/reactivex/rxjava3/core/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L499892.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.c` @type ^`int`;
  #L499896.  v0:= (`long`) v0 @kind i2l;
  #L499898.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L49989e.  return @kind void;
  #L4998a0.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4998a4.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.c` @type ^`int`;
  #L4998a8.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4998ae.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4998b2.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4998b6.  call `onSubscribe`(v0, v3) @signature `Lio/reactivex/rxjava3/core/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4998bc.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.c` @type ^`int`;
  #L4998c0.  v0:= (`long`) v0 @kind i2l;
  #L4998c2.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4998c8.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$b;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4997b8.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4997bc.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4997c2.  v0:= temp @kind object;
  #L4997c4.  if v0 == 0 then goto L499802;
  #L4997c8.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int`;
  #L4997cc.  v2:= 1I;
  #L4997ce.  if v1 == v2 then goto L499802;
  #L4997d2.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.o` @type ^`long` @kind wide;
  #L4997d6.  v3:= 1L;
  #L4997da.  v1:= v1 + v3 @kind long;
  #L4997dc.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.d` @type ^`int`;
  #L4997e0.  v3:= (`long`) v3 @kind i2l;
  #L4997e2.  v5:= lcmp(v1, v3);
  #L4997e6.  if v5 != 0 then goto L4997fe;
  #L4997ea.  v3:= 0L;
  #L4997ee.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.o` @type ^`long` := v3 @kind wide;
  #L4997f2.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4997f6.  call `request`(v3, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4997fc.  goto L499802;
  #L4997fe.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.o` @type ^`long` := v1 @kind wide;
  #L499802.  return v0 @kind object;
}
