record `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$g` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.b` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.e` @AccessFlag FINAL;
}
global `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[] `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.f` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[] `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.g` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4c6050.  v0:= 0I;
  #L4c6052.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[v0];
  #L4c6056.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[] := v1 @kind object;
  #L4c605a.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[v0];
  #L4c605e.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.g` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[] := v0 @kind object;
  #L4c6062.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i` v0 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$g` v1 @kind object, `java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$g;Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c6074.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c607a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$g` := v1 @kind object;
  #L4c607e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4c6082.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c6086.  v2:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[] @kind object;
  #L4c608a.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4c6090.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4c6094.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4c6098.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4c609e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4c60a2.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i` v4 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.a:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$d;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c5fd0.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c5fd4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c5fda.  v0:= temp @kind object;
  #L4c5fdc.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[]) v0 @kind object;
  #L4c5fe0.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.g` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[] @kind object;
  #L4c5fe4.  v2:= 0I;
  #L4c5fe6.  if v0 != v1 then goto L4c5fec;
  #L4c5fea.  return v2;
  #L4c5fec.  v1:= length @variable v0;
  #L4c5fee.  v3:= v1 + 1;
  #L4c5ff2.  v3:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[v3];
  #L4c5ff6.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4c5ffc.  v3[v1]:= v5 @kind object;
  #L4c6000.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c6004.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c600a.  v0:= temp;
  #L4c600c.  if v0 == 0 then goto L4c5fd0;
  #L4c6010.  v5:= 1I;
  #L4c6012.  return v5;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i` v6 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.b:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$d;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4c61a0.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c61a4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c61aa.  v0:= temp @kind object;
  #L4c61ac.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[]) v0 @kind object;
  #L4c61b0.  v1:= length @variable v0;
  #L4c61b2.  if v1 != 0 then goto L4c61b8;
  #L4c61b6.  return @kind void;
  #L4c61b8.  v2:= -1I;
  #L4c61ba.  v3:= 0I;
  #L4c61bc.  v4:= 0I;
  #L4c61be.  if v4 >= v1 then goto L4c61dc;
  #L4c61c2.  v5:= v0[v4] @kind object;
  #L4c61c6.  call temp:= `equals`(v5, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4c61cc.  v5:= temp;
  #L4c61ce.  if v5 == 0 then goto L4c61d6;
  #L4c61d2.  v2:= v4;
  #L4c61d4.  goto L4c61dc;
  #L4c61d6.  v4:= v4 + 1;
  #L4c61da.  goto L4c61be;
  #L4c61dc.  if v2 >= 0 then goto L4c61e2;
  #L4c61e0.  return @kind void;
  #L4c61e2.  v4:= 1I;
  #L4c61e4.  if v1 != v4 then goto L4c61ee;
  #L4c61e8.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[] @kind object;
  #L4c61ec.  goto L4c620c;
  #L4c61ee.  v5:= v1 + -1;
  #L4c61f2.  v5:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[v5];
  #L4c61f6.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4c61fc.  v3:= v2 + 1;
  #L4c6200.  v1:= v1 - v2 @kind int;
  #L4c6202.  v1:= v1 - v4 @kind int;
  #L4c6204.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4c620a.  v1:= v5 @kind object;
  #L4c620c.  v2:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c6210.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c6216.  v0:= temp;
  #L4c6218.  if v0 == 0 then goto L4c61a0;
  #L4c621c.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c6230.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c6234.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c623a.  v0:= temp @kind object;
  #L4c623c.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[]) v0 @kind object;
  #L4c6240.  v1:= length @variable v0;
  #L4c6242.  v2:= 0I;
  #L4c6244.  if v2 >= v1 then goto L4c625c;
  #L4c6248.  v3:= v0[v2] @kind object;
  #L4c624c.  v4:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$g` @kind object;
  #L4c6250.  call `c`(v4, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$g;.c:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$d;)V` @kind interface;
  #L4c6256.  v2:= v2 + 1;
  #L4c625a.  goto L4c6244;
  #L4c625c.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c6270.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c6274.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.g` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[] @kind object;
  #L4c6278.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4c627e.  v0:= temp @kind object;
  #L4c6280.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[]) v0 @kind object;
  #L4c6284.  v1:= length @variable v0;
  #L4c6286.  v2:= 0I;
  #L4c6288.  if v2 >= v1 then goto L4c62a0;
  #L4c628c.  v3:= v0[v2] @kind object;
  #L4c6290.  v4:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$g` @kind object;
  #L4c6294.  call `c`(v4, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$g;.c:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$d;)V` @kind interface;
  #L4c629a.  v2:= v2 + 1;
  #L4c629e.  goto L4c6288;
  #L4c62a0.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c60b4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c60b8.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.g` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[] @kind object;
  #L4c60bc.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4c60c2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c60c6.  v1:= 0I;
  #L4c60c8.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c60ce.  call temp:= `dispose`(v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c60d4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c6024.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c6028.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c602e.  v0:= temp @kind object;
  #L4c6030.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.g` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[] @kind object;
  #L4c6034.  if v0 != v1 then goto L4c603c;
  #L4c6038.  v0:= 1I;
  #L4c603a.  goto L4c603e;
  #L4c603c.  v0:= 0I;
  #L4c603e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c60e8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.b` @type ^`boolean` @kind boolean;
  #L4c60ec.  if v0 != 0 then goto L4c6106;
  #L4c60f0.  v0:= 1I;
  #L4c60f2.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.b` @type ^`boolean` := v0 @kind boolean;
  #L4c60f6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$g` @kind object;
  #L4c60fa.  call `complete`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$g;.complete:()V` @kind interface;
  #L4c6100.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.d:()V` @kind virtual;
  #L4c6106.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c6118.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.b` @type ^`boolean` @kind boolean;
  #L4c611c.  if v0 != 0 then goto L4c6138;
  #L4c6120.  v0:= 1I;
  #L4c6122.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.b` @type ^`boolean` := v0 @kind boolean;
  #L4c6126.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$g` @kind object;
  #L4c612a.  call `a`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$g;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c6130.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.d:()V` @kind virtual;
  #L4c6136.  goto L4c613e;
  #L4c6138.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c613e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c6150.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.b` @type ^`boolean` @kind boolean;
  #L4c6154.  if v0 != 0 then goto L4c6168;
  #L4c6158.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$g` @kind object;
  #L4c615c.  call `b`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$g;.b:(Ljava/lang/Object;)V` @kind interface;
  #L4c6162.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.c:()V` @kind virtual;
  #L4c6168.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4c617c.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4c6182.  v1:= temp;
  #L4c6184.  if v1 == 0 then goto L4c618e;
  #L4c6188.  call `c`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.c:()V` @kind virtual;
  #L4c618e.  return @kind void;
}
