record `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.observers.BasicQueueDisposable` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.c` @AccessFlag ;
  `java.util.Iterator` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.d` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ac790.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/BasicQueueDisposable;.<init>:()V` @kind direct;
  #L4ac796.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4ac79a.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4ac79e.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ac7b0.  v0:= 0I;
  #L4ac7b2.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` := v0 @kind object;
  #L4ac7b6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ac7c8.  v0:= 1I;
  #L4ac7ca.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4ac7ce.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ac7d2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ac7d8.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4ac7dc.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4ac7e0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ac6f4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.e` @type ^`boolean` @kind boolean;
  #L4ac6f8.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ac70c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` @kind object;
  #L4ac710.  if v0 != 0 then goto L4ac718;
  #L4ac714.  v0:= 1I;
  #L4ac716.  goto L4ac71a;
  #L4ac718.  v0:= 0I;
  #L4ac71a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ac7f4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ac7f8.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4ac7fe.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ac810.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4ac814.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4ac818.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ac81c.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ac822.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ac834.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ac838.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ac83e.  v0:= temp;
  #L4ac840.  if v0 == 0 then goto L4ac852;
  #L4ac844.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4ac848.  v2:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ac84c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4ac852.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ac864.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ac868.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4ac86c.  call temp:= `apply`(v1, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4ac872.  v3:= temp @kind object;
  #L4ac874.  v3:= (`java.lang.Iterable`) v3 @kind object;
  #L4ac878.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4ac87e.  v3:= temp @kind object;
  #L4ac880.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ac886.  v1:= temp;
  #L4ac888.  if v1 != 0 then goto L4ac894;
  #L4ac88c.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4ac892.  return @kind void;
  #L4ac894.  v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` := v3 @kind object;
  #L4ac898.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.f` @type ^`boolean` @kind boolean;
  #L4ac89c.  if v1 == 0 then goto L4ac8b0;
  #L4ac8a0.  v3:= 0I;
  #L4ac8a2.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ac8a8.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4ac8ae.  return @kind void;
  #L4ac8b0.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.e` @type ^`boolean` @kind boolean;
  #L4ac8b4.  if v1 == 0 then goto L4ac8ba;
  #L4ac8b8.  return @kind void;
  #L4ac8ba.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4ac8c0.  v1:= temp @kind object;
  #L4ac8c2.  call `onNext`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ac8c8.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.e` @type ^`boolean` @kind boolean;
  #L4ac8cc.  if v1 == 0 then goto L4ac8d2;
  #L4ac8d0.  return @kind void;
  #L4ac8d2.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ac8d8.  v1:= temp;
  #L4ac8da.  if v1 != 0 then goto L4ac8b0;
  #L4ac8de.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4ac8e4.  return @kind void;
  #L4ac8e6.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac8e8.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ac8ee.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ac8f4.  return @kind void;
  #L4ac8f6.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac8f8.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ac8fe.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ac904.  return @kind void;
  #L4ac906.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac908.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ac90e.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ac914.  return @kind void;
  catch `java.lang.Throwable` @[L4ac868..L4ac888] goto L4ac906;
  catch `java.lang.Throwable` @[L4ac8ba..L4ac8c2] goto L4ac8f6;
  catch `java.lang.Throwable` @[L4ac8d2..L4ac8da] goto L4ac8e6;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ac750.  v0:= v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` @kind object;
  #L4ac754.  v1:= 0I;
  #L4ac756.  if v0 == 0 then goto L4ac77e;
  #L4ac75a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4ac760.  v2:= temp @kind object;
  #L4ac762.  v3:= "The iterator returned a null value" @kind object;
  #L4ac766.  call temp:= `requireNonNull`(v2, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ac76c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ac772.  v0:= temp;
  #L4ac774.  if v0 != 0 then goto L4ac77c;
  #L4ac778.  v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` := v1 @kind object;
  #L4ac77c.  return v2 @kind object;
  #L4ac77e.  return v1 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ac72c.  v0:= 2I;
  #L4ac72e.  v2:= v2 ^& v0 @kind int;
  #L4ac730.  if v2 == 0 then goto L4ac73c;
  #L4ac734.  v2:= 1I;
  #L4ac736.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.f` @type ^`boolean` := v2 @kind boolean;
  #L4ac73a.  return v0;
  #L4ac73c.  v2:= 0I;
  #L4ac73e.  return v2;
}
