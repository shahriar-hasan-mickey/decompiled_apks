record `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c.n` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/core/Scheduler$Worker;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L499b94.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.<init>:(Lio/reactivex/rxjava3/core/Scheduler$Worker;ZI)V` @kind direct;
  #L499b9a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L499b9e.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c` v12 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$c;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L499c5c.  v0:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L499c60.  v1:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L499c64.  v2:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` @kind wide;
  #L499c68.  v4:= 1I;
  #L499c6a.  v5:= 1I;
  #L499c6c.  v6:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L499c70.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L499c76.  v6:= temp @kind wide;
  #L499c78.  v8:= lcmp(v2, v6);
  #L499c7c.  if v8 == 0 then goto L499d22;
  #L499c80.  v9:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L499c84.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L499c8a.  v10:= temp @kind object;
  #L499c8c.  if v10 != 0 then goto L499c94;
  #L499c90.  v11:= 1I;
  #L499c92.  goto L499c96;
  #L499c94.  v11:= 0I;
  #L499c96.  call temp:= `e`(v12, v9, v11, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L499c9c.  v9:= temp;
  #L499c9e.  if v9 == 0 then goto L499ca4;
  #L499ca2.  return @kind void;
  #L499ca4.  if v11 == 0 then goto L499caa;
  #L499ca8.  goto L499d22;
  #L499caa.  call `onNext`(v0, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L499cb0.  v8:= 1L;
  #L499cb4.  v2:= v2 + v8 @kind long;
  #L499cb6.  v8:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.d` @type ^`int`;
  #L499cba.  v8:= (`long`) v8 @kind i2l;
  #L499cbc.  v10:= lcmp(v2, v8);
  #L499cc0.  if v10 != 0 then goto L499c78;
  #L499cc4.  v8:= 9223372036854775807L;
  #L499cce.  v10:= lcmp(v6, v8);
  #L499cd2.  if v10 == 0 then goto L499ce4;
  #L499cd6.  v6:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L499cda.  v7:= -v2 @kind long;
  #L499cdc.  call temp:= `addAndGet`(v6, v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L499ce2.  v6:= temp @kind wide;
  #L499ce4.  v8:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L499ce8.  call `request`(v8, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L499cee.  v2:= 0L;
  #L499cf2.  goto L499c78;
  #L499cf4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L499cf6.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L499cfc.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v4 @kind boolean;
  #L499d00.  v3:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L499d04.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L499d0a.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L499d10.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L499d16.  v0:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L499d1a.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L499d20.  return @kind void;
  #L499d22.  if v8 != 0 then goto L499d40;
  #L499d26.  v6:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L499d2a.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L499d30.  v7:= temp;
  #L499d32.  call temp:= `e`(v12, v6, v7, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L499d38.  v6:= temp;
  #L499d3a.  if v6 == 0 then goto L499d40;
  #L499d3e.  return @kind void;
  #L499d40.  call temp:= `get`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L499d46.  v6:= temp;
  #L499d48.  if v5 != v6 then goto L499d60;
  #L499d4c.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` := v2 @kind wide;
  #L499d50.  v5:= -v5 @kind int;
  #L499d52.  call temp:= `addAndGet`(v12, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L499d58.  v5:= temp;
  #L499d5a.  if v5 != 0 then goto L499c6c;
  #L499d5e.  return @kind void;
  #L499d60.  v5:= v6;
  #L499d62.  goto L499c6c;
  catch `java.lang.Throwable` @[L499c84..L499c8c] goto L499cf4;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$c;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L499d80.  v0:= 1I;
  #L499d82.  v1:= 1I;
  #L499d84.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L499d88.  if v2 == 0 then goto L499d8e;
  #L499d8c.  return @kind void;
  #L499d8e.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L499d92.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L499d96.  v4:= 0I;
  #L499d98.  call `onNext`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L499d9e.  if v2 == 0 then goto L499dd0;
  #L499da2.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v0 @kind boolean;
  #L499da6.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.j` @type ^`java.lang.Throwable` @kind object;
  #L499daa.  if v0 == 0 then goto L499dba;
  #L499dae.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L499db2.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L499db8.  goto L499dc4;
  #L499dba.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L499dbe.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L499dc4.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L499dc8.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L499dce.  return @kind void;
  #L499dd0.  v1:= -v1 @kind int;
  #L499dd2.  call temp:= `addAndGet`(v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L499dd8.  v1:= temp;
  #L499dda.  if v1 != 0 then goto L499d84;
  #L499dde.  return @kind void;
}
procedure `void` `h`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c` v10 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$c;.h:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L499df0.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L499df4.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L499df8.  v2:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` @kind wide;
  #L499dfc.  v4:= 1I;
  #L499dfe.  v5:= 1I;
  #L499e00.  v6:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L499e04.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L499e0a.  v6:= temp @kind wide;
  #L499e0c.  v8:= lcmp(v2, v6);
  #L499e10.  if v8 == 0 then goto L499e76;
  #L499e14.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L499e1a.  v8:= temp @kind object;
  #L499e1c.  v9:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L499e20.  if v9 == 0 then goto L499e26;
  #L499e24.  return @kind void;
  #L499e26.  if v8 != 0 then goto L499e40;
  #L499e2a.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v4 @kind boolean;
  #L499e2e.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L499e34.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L499e38.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L499e3e.  return @kind void;
  #L499e40.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L499e46.  v8:= 1L;
  #L499e4a.  v2:= v2 + v8 @kind long;
  #L499e4c.  goto L499e0c;
  #L499e4e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L499e50.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L499e56.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v4 @kind boolean;
  #L499e5a.  v2:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L499e5e.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L499e64.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L499e6a.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L499e6e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L499e74.  return @kind void;
  #L499e76.  v6:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L499e7a.  if v6 == 0 then goto L499e80;
  #L499e7e.  return @kind void;
  #L499e80.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L499e86.  v6:= temp;
  #L499e88.  if v6 == 0 then goto L499ea2;
  #L499e8c.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v4 @kind boolean;
  #L499e90.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L499e96.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L499e9a.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L499ea0.  return @kind void;
  #L499ea2.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` := v2 @kind wide;
  #L499ea6.  v5:= -v5 @kind int;
  #L499ea8.  call temp:= `addAndGet`(v10, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L499eae.  v5:= temp;
  #L499eb0.  if v5 != 0 then goto L499e00;
  #L499eb4.  return @kind void;
  catch `java.lang.Throwable` @[L499e14..L499e1c] goto L499e4e;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L499bb0.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L499bb4.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L499bba.  v0:= temp;
  #L499bbc.  if v0 == 0 then goto L499c48;
  #L499bc0.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L499bc4.  v0:= instanceof @variable v4 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind boolean;
  #L499bc8.  if v0 == 0 then goto L499c20;
  #L499bcc.  v0:= v4 @kind object;
  #L499bce.  v0:= (`io.reactivex.rxjava3.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L499bd2.  v1:= 7I;
  #L499bd4.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L499bda.  v1:= temp;
  #L499bdc.  v2:= 1I;
  #L499bde.  if v1 != v2 then goto L499bfa;
  #L499be2.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int` := v2;
  #L499be6.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L499bea.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` := v2 @kind boolean;
  #L499bee.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L499bf2.  call `onSubscribe`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L499bf8.  return @kind void;
  #L499bfa.  v2:= 2I;
  #L499bfc.  if v1 != v2 then goto L499c20;
  #L499c00.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int` := v2;
  #L499c04.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L499c08.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L499c0c.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L499c12.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.c` @type ^`int`;
  #L499c16.  v0:= (`long`) v0 @kind i2l;
  #L499c18.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L499c1e.  return @kind void;
  #L499c20.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L499c24.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.c` @type ^`int`;
  #L499c28.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L499c2e.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L499c32.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L499c36.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L499c3c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.c` @type ^`int`;
  #L499c40.  v0:= (`long`) v0 @kind i2l;
  #L499c42.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L499c48.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$c;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L499b38.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L499b3c.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L499b42.  v0:= temp @kind object;
  #L499b44.  if v0 == 0 then goto L499b82;
  #L499b48.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int`;
  #L499b4c.  v2:= 1I;
  #L499b4e.  if v1 == v2 then goto L499b82;
  #L499b52.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` @kind wide;
  #L499b56.  v3:= 1L;
  #L499b5a.  v1:= v1 + v3 @kind long;
  #L499b5c.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.d` @type ^`int`;
  #L499b60.  v3:= (`long`) v3 @kind i2l;
  #L499b62.  v5:= lcmp(v1, v3);
  #L499b66.  if v5 != 0 then goto L499b7e;
  #L499b6a.  v3:= 0L;
  #L499b6e.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` := v3 @kind wide;
  #L499b72.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L499b76.  call `request`(v3, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L499b7c.  goto L499b82;
  #L499b7e.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` := v1 @kind wide;
  #L499b82.  return v0 @kind object;
}
