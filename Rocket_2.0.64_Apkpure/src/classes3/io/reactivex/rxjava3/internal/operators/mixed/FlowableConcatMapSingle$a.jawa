record `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a$a` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.ErrorMode` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.h` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.i` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.k` @AccessFlag VOLATILE;
  `long` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.l` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.m` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.n` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.o` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 , `io.reactivex.rxjava3.internal.util.ErrorMode` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;ILio/reactivex/rxjava3/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b1ff0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4b1ff6.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4b1ffa.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4b1ffe.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.c` @type ^`int` := v3;
  #L4b2002.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.h` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` := v4 @kind object;
  #L4b2006.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4b200a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4b2010.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4b2014.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4b2018.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4b201e.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4b2022.  v1:= new `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a$a`;
  #L4b2026.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;)V` @kind direct;
  #L4b202c.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.f` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a$a` := v1 @kind object;
  #L4b2030.  v1:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4b2034.  call `<init>`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4b203a.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L4b203e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a` v15 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L4b20a4.  call temp:= `getAndIncrement`(v15) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4b20aa.  v0:= temp;
  #L4b20ac.  if v0 == 0 then goto L4b20b2;
  #L4b20b0.  return @kind void;
  #L4b20b2.  v0:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b20b6.  v1:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.h` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b20ba.  v2:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4b20be.  v3:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b20c2.  v4:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4b20c6.  v5:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.c` @type ^`int`;
  #L4b20ca.  v6:= v5 ^> 1;
  #L4b20ce.  v5:= v5 - v6 @kind int;
  #L4b20d0.  v6:= 1I;
  #L4b20d2.  v7:= 1I;
  #L4b20d4.  v8:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.k` @type ^`boolean` @kind boolean;
  #L4b20d8.  v9:= 0I;
  #L4b20da.  if v8 == 0 then goto L4b20ec;
  #L4b20de.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b20e4.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.n` @type ^`java.lang.Object` := v9 @kind object;
  #L4b20e8.  goto L4b21fe;
  #L4b20ec.  v8:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.o` @type ^`int`;
  #L4b20f0.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b20f6.  v10:= temp @kind object;
  #L4b20f8.  if v10 == 0 then goto L4b2122;
  #L4b20fc.  v10:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b2100.  if v1 == v10 then goto L4b2110;
  #L4b2104.  v10:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b2108.  if v1 != v10 then goto L4b2122;
  #L4b210c.  if v8 != 0 then goto L4b2122;
  #L4b2110.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b2116.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.n` @type ^`java.lang.Object` := v9 @kind object;
  #L4b211a.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4b2120.  return @kind void;
  #L4b2122.  v10:= 0I;
  #L4b2124.  if v8 != 0 then goto L4b21c4;
  #L4b2128.  v8:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.j` @type ^`boolean` @kind boolean;
  #L4b212c.  call temp:= `poll`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4b2132.  v9:= temp @kind object;
  #L4b2134.  if v9 != 0 then goto L4b213c;
  #L4b2138.  v11:= 1I;
  #L4b213a.  goto L4b213e;
  #L4b213c.  v11:= 0I;
  #L4b213e.  if v8 == 0 then goto L4b214e;
  #L4b2142.  if v11 == 0 then goto L4b214e;
  #L4b2146.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4b214c.  return @kind void;
  #L4b214e.  if v11 == 0 then goto L4b2154;
  #L4b2152.  goto L4b21fe;
  #L4b2154.  v8:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.m` @type ^`int`;
  #L4b2158.  v8:= v8 + v6 @kind int;
  #L4b215a.  if v8 != v5 then goto L4b2170;
  #L4b215e.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.m` @type ^`int` := v10;
  #L4b2162.  v8:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b2166.  v10:= (`long`) v5 @kind i2l;
  #L4b2168.  call `request`(v8, v10) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4b216e.  goto L4b2174;
  #L4b2170.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.m` @type ^`int` := v8;
  #L4b2174.  v8:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4b2178.  call temp:= `apply`(v8, v9) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b217e.  v8:= temp @kind object;
  #L4b2180.  v9:= "The mapper returned a null SingleSource" @kind object;
  #L4b2184.  call temp:= `requireNonNull`(v8, v9) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b218a.  v8:= (`io.reactivex.rxjava3.core.SingleSource`) v8 @kind object;
  #L4b218e.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.o` @type ^`int` := v6;
  #L4b2192.  v9:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.f` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a$a` @kind object;
  #L4b2196.  call `subscribe`(v8, v9) @signature `Lio/reactivex/rxjava3/core/SingleSource;.subscribe:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind interface;
  #L4b219c.  goto L4b21fe;
  #L4b219e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b21a0.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b21a6.  v4:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b21aa.  call `cancel`(v4) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b21b0.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b21b6.  call temp:= `tryAddThrowableOrReport`(v3, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b21bc.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4b21c2.  return @kind void;
  #L4b21c4.  v11:= 2I;
  #L4b21c6.  if v8 != v11 then goto L4b21fe;
  #L4b21ca.  v11:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.l` @type ^`long` @kind wide;
  #L4b21ce.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4b21d4.  v13:= temp @kind wide;
  #L4b21d6.  v8:= lcmp(v11, v13);
  #L4b21da.  if v8 == 0 then goto L4b21fe;
  #L4b21de.  v8:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.n` @type ^`java.lang.Object` @kind object;
  #L4b21e2.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.n` @type ^`java.lang.Object` := v9 @kind object;
  #L4b21e6.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b21ec.  v8:= 1L;
  #L4b21f0.  v11:= v11 + v8 @kind long;
  #L4b21f2.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.l` @type ^`long` := v11 @kind wide;
  #L4b21f6.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.o` @type ^`int` := v10;
  #L4b21fa.  goto L4b20d4;
  #L4b21fe.  v7:= -v7 @kind int;
  #L4b2200.  call temp:= `addAndGet`(v15, v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4b2206.  v7:= temp;
  #L4b2208.  if v7 != 0 then goto L4b20d4;
  #L4b220c.  return @kind void;
  catch `java.lang.Throwable` @[L4b2174..L4b218e] goto L4b219e;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4b222c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b2230.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b2236.  v2:= temp;
  #L4b2238.  if v2 == 0 then goto L4b225e;
  #L4b223c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.h` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b2240.  v0:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.END` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b2244.  if v2 == v0 then goto L4b2252;
  #L4b2248.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b224c.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b2252.  v2:= 0I;
  #L4b2254.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.o` @type ^`int` := v2;
  #L4b2258.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.a:()V` @kind virtual;
  #L4b225e.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.c:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;

  #L4b2270.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.n` @type ^`java.lang.Object` := v1 @kind object;
  #L4b2274.  v1:= 2I;
  #L4b2276.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.o` @type ^`int` := v1;
  #L4b227a.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.a:()V` @kind virtual;
  #L4b2280.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b2050.  v0:= 1I;
  #L4b2052.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.k` @type ^`boolean` := v0 @kind boolean;
  #L4b2056.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b205a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b2060.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.f` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a$a` @kind object;
  #L4b2064.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a$a;.a:()V` @kind virtual;
  #L4b206a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b206e.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4b2074.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4b207a.  v0:= temp;
  #L4b207c.  if v0 != 0 then goto L4b2090;
  #L4b2080.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4b2084.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b208a.  v0:= 0I;
  #L4b208c.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.n` @type ^`java.lang.Object` := v0 @kind object;
  #L4b2090.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b2294.  v0:= 1I;
  #L4b2296.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.j` @type ^`boolean` := v0 @kind boolean;
  #L4b229a.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.a:()V` @kind virtual;
  #L4b22a0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b22b4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b22b8.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b22be.  v2:= temp;
  #L4b22c0.  if v2 == 0 then goto L4b22e6;
  #L4b22c4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.h` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b22c8.  v0:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b22cc.  if v2 != v0 then goto L4b22da;
  #L4b22d0.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.f` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a$a` @kind object;
  #L4b22d4.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a$a;.a:()V` @kind virtual;
  #L4b22da.  v2:= 1I;
  #L4b22dc.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.j` @type ^`boolean` := v2 @kind boolean;
  #L4b22e0.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.a:()V` @kind virtual;
  #L4b22e6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b22f8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4b22fc.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4b2302.  v2:= temp;
  #L4b2304.  if v2 != 0 then goto L4b2328;
  #L4b2308.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b230c.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b2312.  v2:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4b2316.  v0:= "queue full?!" @kind object;
  #L4b231a.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b2320.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b2326.  return @kind void;
  #L4b2328.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.a:()V` @kind virtual;
  #L4b232e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b2340.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b2344.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4b234a.  v0:= temp;
  #L4b234c.  if v0 == 0 then goto L4b236a;
  #L4b2350.  v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.i` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4b2354.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b2358.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4b235e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.c` @type ^`int`;
  #L4b2362.  v0:= (`long`) v0 @kind i2l;
  #L4b2364.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4b236a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b237c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4b2380.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4b2386.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.a:()V` @kind virtual;
  #L4b238c.  return @kind void;
}
