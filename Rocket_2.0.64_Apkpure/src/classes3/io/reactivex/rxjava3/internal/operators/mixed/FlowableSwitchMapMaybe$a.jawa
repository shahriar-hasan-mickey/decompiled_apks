record `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.i` @AccessFlag VOLATILE;
  `long` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.j` @AccessFlag ;
}
global `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a` `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.k` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4b2928.  v0:= new `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a`;
  #L4b292c.  v1:= 0I;
  #L4b292e.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;)V` @kind direct;
  #L4b2934.  `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.k` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a` := v0 @kind object;
  #L4b2938.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b294c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4b2952.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4b2956.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4b295a.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.c` @type ^`boolean` := v3 @kind boolean;
  #L4b295e.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4b2962.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4b2968.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4b296c.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4b2970.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4b2976.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4b297a.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4b297e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b2984.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4b2988.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4b29d0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b29d4.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.k` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a` @kind object;
  #L4b29d8.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4b29de.  v0:= temp @kind object;
  #L4b29e0.  v0:= (`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a`) v0 @kind object;
  #L4b29e4.  if v0 == 0 then goto L4b29f2;
  #L4b29e8.  if v0 == v1 then goto L4b29f2;
  #L4b29ec.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a$a;.a:()V` @kind virtual;
  #L4b29f2.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a` v12 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4b2a04.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4b2a0a.  v0:= temp;
  #L4b2a0c.  if v0 == 0 then goto L4b2a12;
  #L4b2a10.  return @kind void;
  #L4b2a12.  v0:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b2a16.  v1:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b2a1a.  v2:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b2a1e.  v3:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4b2a22.  v4:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.j` @type ^`long` @kind wide;
  #L4b2a26.  v6:= 1I;
  #L4b2a28.  v7:= 1I;
  #L4b2a2a.  v8:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.i` @type ^`boolean` @kind boolean;
  #L4b2a2e.  if v8 == 0 then goto L4b2a34;
  #L4b2a32.  return @kind void;
  #L4b2a34.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b2a3a.  v8:= temp @kind object;
  #L4b2a3c.  if v8 == 0 then goto L4b2a50;
  #L4b2a40.  v8:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.c` @type ^`boolean` @kind boolean;
  #L4b2a44.  if v8 != 0 then goto L4b2a50;
  #L4b2a48.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4b2a4e.  return @kind void;
  #L4b2a50.  v8:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.h` @type ^`boolean` @kind boolean;
  #L4b2a54.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b2a5a.  v9:= temp @kind object;
  #L4b2a5c.  v9:= (`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a`) v9 @kind object;
  #L4b2a60.  if v9 != 0 then goto L4b2a68;
  #L4b2a64.  v10:= 1I;
  #L4b2a66.  goto L4b2a6a;
  #L4b2a68.  v10:= 0I;
  #L4b2a6a.  if v8 == 0 then goto L4b2a7a;
  #L4b2a6e.  if v10 == 0 then goto L4b2a7a;
  #L4b2a72.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4b2a78.  return @kind void;
  #L4b2a7a.  if v10 != 0 then goto L4b2ab2;
  #L4b2a7e.  v8:= v9.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a.b` @type ^`java.lang.Object` @kind object;
  #L4b2a82.  if v8 == 0 then goto L4b2ab2;
  #L4b2a86.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4b2a8c.  v10:= temp @kind wide;
  #L4b2a8e.  v8:= lcmp(v4, v10);
  #L4b2a92.  if v8 != 0 then goto L4b2a98;
  #L4b2a96.  goto L4b2ab2;
  #L4b2a98.  v8:= 0I;
  #L4b2a9a.  call temp:= `compareAndSet`(v2, v9, v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b2aa0.  v8:= v9.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a.b` @type ^`java.lang.Object` @kind object;
  #L4b2aa4.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b2aaa.  v8:= 1L;
  #L4b2aae.  v4:= v4 + v8 @kind long;
  #L4b2ab0.  goto L4b2a2a;
  #L4b2ab2.  v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.j` @type ^`long` := v4 @kind wide;
  #L4b2ab6.  v7:= -v7 @kind int;
  #L4b2ab8.  call temp:= `addAndGet`(v12, v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4b2abe.  v7:= temp;
  #L4b2ac0.  if v7 != 0 then goto L4b2a2a;
  #L4b2ac4.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.c:(Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4b2ad8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b2adc.  v1:= 0I;
  #L4b2ade.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b2ae4.  v3:= temp;
  #L4b2ae6.  if v3 == 0 then goto L4b2af0;
  #L4b2aea.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.b:()V` @kind virtual;
  #L4b2af0.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b299c.  v0:= 1I;
  #L4b299e.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4b29a2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b29a6.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b29ac.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.a:()V` @kind virtual;
  #L4b29b2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b29b6.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4b29bc.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.d:(Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4b2b04.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b2b08.  v1:= 0I;
  #L4b2b0a.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b2b10.  v3:= temp;
  #L4b2b12.  if v3 == 0 then goto L4b2b46;
  #L4b2b16.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b2b1a.  call temp:= `tryAddThrowableOrReport`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b2b20.  v3:= temp;
  #L4b2b22.  if v3 == 0 then goto L4b2b4c;
  #L4b2b26.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.c` @type ^`boolean` @kind boolean;
  #L4b2b2a.  if v3 != 0 then goto L4b2b3e;
  #L4b2b2e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b2b32.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b2b38.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.a:()V` @kind virtual;
  #L4b2b3e.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.b:()V` @kind virtual;
  #L4b2b44.  goto L4b2b4c;
  #L4b2b46.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b2b4c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b2b60.  v0:= 1I;
  #L4b2b62.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4b2b66.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.b:()V` @kind virtual;
  #L4b2b6c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b2b80.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b2b84.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b2b8a.  v2:= temp;
  #L4b2b8c.  if v2 == 0 then goto L4b2baa;
  #L4b2b90.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.c` @type ^`boolean` @kind boolean;
  #L4b2b94.  if v2 != 0 then goto L4b2b9e;
  #L4b2b98.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.a:()V` @kind virtual;
  #L4b2b9e.  v2:= 1I;
  #L4b2ba0.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.h` @type ^`boolean` := v2 @kind boolean;
  #L4b2ba4.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.b:()V` @kind virtual;
  #L4b2baa.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b2bbc.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b2bc0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b2bc6.  v0:= temp @kind object;
  #L4b2bc8.  v0:= (`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a`) v0 @kind object;
  #L4b2bcc.  if v0 == 0 then goto L4b2bd6;
  #L4b2bd0.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a$a;.a:()V` @kind virtual;
  #L4b2bd6.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4b2bda.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b2be0.  v4:= temp @kind object;
  #L4b2be2.  v0:= "The mapper returned a null MaybeSource" @kind object;
  #L4b2be6.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b2bec.  v4:= (`io.reactivex.rxjava3.core.MaybeSource`) v4 @kind object;
  #L4b2bf0.  v0:= new `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a`;
  #L4b2bf4.  call `<init>`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;)V` @kind direct;
  #L4b2bfa.  v1:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b2bfe.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b2c04.  v1:= temp @kind object;
  #L4b2c06.  v1:= (`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a`) v1 @kind object;
  #L4b2c0a.  v2:= `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.k` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a` @kind object;
  #L4b2c0e.  if v1 != v2 then goto L4b2c14;
  #L4b2c12.  goto L4b2c2a;
  #L4b2c14.  v2:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b2c18.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b2c1e.  v1:= temp;
  #L4b2c20.  if v1 == 0 then goto L4b2bfa;
  #L4b2c24.  call `subscribe`(v4, v0) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4b2c2a.  return @kind void;
  #L4b2c2c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b2c2e.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b2c34.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b2c38.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b2c3e.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b2c42.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.k` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a` @kind object;
  #L4b2c46.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4b2c4c.  call `onError`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b2c52.  return @kind void;
  catch `java.lang.Throwable` @[L4b2bd6..L4b2bf0] goto L4b2c2c;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b2c70.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b2c74.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4b2c7a.  v0:= temp;
  #L4b2c7c.  if v0 == 0 then goto L4b2c9e;
  #L4b2c80.  v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.g` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4b2c84.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b2c88.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4b2c8e.  v0:= 9223372036854775807L;
  #L4b2c98.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4b2c9e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b2cb0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4b2cb4.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4b2cba.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.b:()V` @kind virtual;
  #L4b2cc0.  return @kind void;
}
