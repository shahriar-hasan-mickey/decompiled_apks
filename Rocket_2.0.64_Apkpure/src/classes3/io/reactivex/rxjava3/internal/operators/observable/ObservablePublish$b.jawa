record `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.c` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.d` @AccessFlag ;
}
global `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[] `@@io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[] `@@io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.f` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4c42c8.  v0:= 0I;
  #L4c42ca.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[v0];
  #L4c42ce.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[] := v1 @kind object;
  #L4c42d2.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[v0];
  #L4c42d6.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[] := v0 @kind object;
  #L4c42da.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b` v1 @kind this, `java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4c42ec.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c42f2.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4c42f6.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4c42fc.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L4c4300.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4c4304.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c4308.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c430e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4c4312.  v2:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[] @kind object;
  #L4c4316.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4c431c.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b` v4 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.a:(Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$a;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c4254.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c425a.  v0:= temp @kind object;
  #L4c425c.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[]) v0 @kind object;
  #L4c4260.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[] @kind object;
  #L4c4264.  v2:= 0I;
  #L4c4266.  if v0 != v1 then goto L4c426c;
  #L4c426a.  return v2;
  #L4c426c.  v1:= length @variable v0;
  #L4c426e.  v3:= v1 + 1;
  #L4c4272.  v3:= new `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[v3];
  #L4c4276.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4c427c.  v3[v1]:= v5 @kind object;
  #L4c4280.  call temp:= `compareAndSet`(v4, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c4286.  v0:= temp;
  #L4c4288.  if v0 == 0 then goto L4c4254;
  #L4c428c.  v5:= 1I;
  #L4c428e.  return v5;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b` v6 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.b:(Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$a;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4c4470.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c4476.  v0:= temp @kind object;
  #L4c4478.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[]) v0 @kind object;
  #L4c447c.  v1:= length @variable v0;
  #L4c447e.  if v1 != 0 then goto L4c4484;
  #L4c4482.  return @kind void;
  #L4c4484.  v2:= -1I;
  #L4c4486.  v3:= 0I;
  #L4c4488.  v4:= 0I;
  #L4c448a.  if v4 >= v1 then goto L4c44a0;
  #L4c448e.  v5:= v0[v4] @kind object;
  #L4c4492.  if v5 != v7 then goto L4c449a;
  #L4c4496.  v2:= v4;
  #L4c4498.  goto L4c44a0;
  #L4c449a.  v4:= v4 + 1;
  #L4c449e.  goto L4c448a;
  #L4c44a0.  if v2 >= 0 then goto L4c44a6;
  #L4c44a4.  return @kind void;
  #L4c44a6.  v4:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[] @kind object;
  #L4c44aa.  v5:= 1I;
  #L4c44ac.  if v1 == v5 then goto L4c44cc;
  #L4c44b0.  v4:= v1 + -1;
  #L4c44b4.  v4:= new `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[v4];
  #L4c44b8.  call `arraycopy`(v0, v3, v4, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4c44be.  v3:= v2 + 1;
  #L4c44c2.  v1:= v1 - v2 @kind int;
  #L4c44c4.  v1:= v1 - v5 @kind int;
  #L4c44c6.  call `arraycopy`(v0, v3, v4, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4c44cc.  call temp:= `compareAndSet`(v6, v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c44d2.  v0:= temp;
  #L4c44d4.  if v0 == 0 then goto L4c4470;
  #L4c44d8.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c4330.  v0:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[] @kind object;
  #L4c4334.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4c433a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c433e.  v1:= 0I;
  #L4c4340.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c4346.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c434a.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c4350.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c42a0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c42a6.  v0:= temp @kind object;
  #L4c42a8.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[] @kind object;
  #L4c42ac.  if v0 != v1 then goto L4c42b4;
  #L4c42b0.  v0:= 1I;
  #L4c42b2.  goto L4c42b6;
  #L4c42b4.  v0:= 0I;
  #L4c42b6.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c4364.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c4368.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4c436c.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4c4372.  v0:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[] @kind object;
  #L4c4376.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4c437c.  v0:= temp @kind object;
  #L4c437e.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[]) v0 @kind object;
  #L4c4382.  v1:= length @variable v0;
  #L4c4384.  v2:= 0I;
  #L4c4386.  if v2 >= v1 then goto L4c439e;
  #L4c438a.  v3:= v0[v2] @kind object;
  #L4c438e.  v3:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c4392.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4c4398.  v2:= v2 + 1;
  #L4c439c.  goto L4c4386;
  #L4c439e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c43b0.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c43b4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c43ba.  v0:= temp @kind object;
  #L4c43bc.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4c43c0.  if v0 == v1 then goto L4c43fe;
  #L4c43c4.  v4.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.d` @type ^`java.lang.Throwable` := v5 @kind object;
  #L4c43c8.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c43cc.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4c43d2.  v0:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[] @kind object;
  #L4c43d6.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4c43dc.  v0:= temp @kind object;
  #L4c43de.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[]) v0 @kind object;
  #L4c43e2.  v1:= length @variable v0;
  #L4c43e4.  v2:= 0I;
  #L4c43e6.  if v2 >= v1 then goto L4c4404;
  #L4c43ea.  v3:= v0[v2] @kind object;
  #L4c43ee.  v3:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c43f2.  call `onError`(v3, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c43f8.  v2:= v2 + 1;
  #L4c43fc.  goto L4c43e6;
  #L4c43fe.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c4404.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c4418.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c441e.  v0:= temp @kind object;
  #L4c4420.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[]) v0 @kind object;
  #L4c4424.  v1:= length @variable v0;
  #L4c4426.  v2:= 0I;
  #L4c4428.  if v2 >= v1 then goto L4c4440;
  #L4c442c.  v3:= v0[v2] @kind object;
  #L4c4430.  v3:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c4434.  call `onNext`(v3, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c443a.  v2:= v2 + 1;
  #L4c443e.  goto L4c4428;
  #L4c4440.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4454.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c4458.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4c445e.  return @kind void;
}
