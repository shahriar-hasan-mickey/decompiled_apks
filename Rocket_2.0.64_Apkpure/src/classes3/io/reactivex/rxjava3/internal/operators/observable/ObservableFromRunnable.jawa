record `io.reactivex.rxjava3.internal.operators.observable.ObservableFromRunnable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Observable` @kind class, `io.reactivex.rxjava3.functions.Supplier` @kind interface {
  `java.lang.Runnable` `io.reactivex.rxjava3.internal.operators.observable.ObservableFromRunnable.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFromRunnable` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFromRunnable;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4bfd50.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Observable;.<init>:()V` @kind direct;
  #L4bfd56.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromRunnable.a` @type ^`java.lang.Runnable` := v1 @kind object;
  #L4bfd5a.  return @kind void;
}
procedure `java.lang.Object` `get`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFromRunnable` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFromRunnable;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bfd30.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromRunnable.a` @type ^`java.lang.Runnable` @kind object;
  #L4bfd34.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L4bfd3a.  v0:= 0I;
  #L4bfd3c.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFromRunnable` v2 @kind this, `io.reactivex.rxjava3.core.Observer` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFromRunnable;.subscribeActual:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4bfd6c.  v0:= new `io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable`;
  #L4bfd70.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/CancellableQueueFuseable;.<init>:()V` @kind direct;
  #L4bfd76.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4bfd7c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/CancellableQueueFuseable;.isDisposed:()Z` @kind virtual;
  #L4bfd82.  v1:= temp;
  #L4bfd84.  if v1 != 0 then goto L4bfdc8;
  #L4bfd88.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromRunnable.a` @type ^`java.lang.Runnable` @kind object;
  #L4bfd8c.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L4bfd92.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/CancellableQueueFuseable;.isDisposed:()Z` @kind virtual;
  #L4bfd98.  v0:= temp;
  #L4bfd9a.  if v0 != 0 then goto L4bfdc8;
  #L4bfd9e.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4bfda4.  goto L4bfdc8;
  #L4bfda6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bfda8.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bfdae.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/CancellableQueueFuseable;.isDisposed:()Z` @kind virtual;
  #L4bfdb4.  v0:= temp;
  #L4bfdb6.  if v0 != 0 then goto L4bfdc2;
  #L4bfdba.  call `onError`(v3, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bfdc0.  goto L4bfdc8;
  #L4bfdc2.  call `onError`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4bfdc8.  return @kind void;
  catch `java.lang.Throwable` @[L4bfd88..L4bfd92] goto L4bfda6;
}
