record `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a` `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.d` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.e` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b` v1 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a` v2 @kind object, `int` v3 , `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$a;ILorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L48774c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L487752.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L487756.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L48775c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L487760.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a` := v2 @kind object;
  #L487764.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.b` @type ^`int` := v3;
  #L487768.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.c` @type ^`org.reactivestreams.Subscriber` := v4 @kind object;
  #L48776c.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L487780.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L487786.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L487798.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.d` @type ^`boolean` @kind boolean;
  #L48779c.  if v0 == 0 then goto L4877ac;
  #L4877a0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4877a4.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4877aa.  goto L4877e4;
  #L4877ac.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a` @kind object;
  #L4877b0.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.b` @type ^`int`;
  #L4877b4.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$a;.b:(I)Z` @kind virtual;
  #L4877ba.  v0:= temp;
  #L4877bc.  if v0 == 0 then goto L4877d2;
  #L4877c0.  v0:= 1I;
  #L4877c2.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.d` @type ^`boolean` := v0 @kind boolean;
  #L4877c6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4877ca.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4877d0.  goto L4877e4;
  #L4877d2.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4877d8.  v0:= temp @kind object;
  #L4877da.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4877de.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4877e4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4877f8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.d` @type ^`boolean` @kind boolean;
  #L4877fc.  if v0 == 0 then goto L48780c;
  #L487800.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L487804.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48780a.  goto L48784a;
  #L48780c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a` @kind object;
  #L487810.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.b` @type ^`int`;
  #L487814.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$a;.b:(I)Z` @kind virtual;
  #L48781a.  v0:= temp;
  #L48781c.  if v0 == 0 then goto L487832;
  #L487820.  v0:= 1I;
  #L487822.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.d` @type ^`boolean` := v0 @kind boolean;
  #L487826.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48782a.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L487830.  goto L48784a;
  #L487832.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L487838.  v0:= temp @kind object;
  #L48783a.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L48783e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L487844.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L48784a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48785c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.d` @type ^`boolean` @kind boolean;
  #L487860.  if v0 == 0 then goto L487870;
  #L487864.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L487868.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48786e.  goto L4878a8;
  #L487870.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a` @kind object;
  #L487874.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.b` @type ^`int`;
  #L487878.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$a;.b:(I)Z` @kind virtual;
  #L48787e.  v0:= temp;
  #L487880.  if v0 == 0 then goto L487896;
  #L487884.  v0:= 1I;
  #L487886.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.d` @type ^`boolean` := v0 @kind boolean;
  #L48788a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48788e.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L487894.  goto L4878a8;
  #L487896.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48789c.  v3:= temp @kind object;
  #L48789e.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L4878a2.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4878a8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4878bc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4878c0.  call temp:= `deferredSetOnce`(v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4878c6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4878d8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4878dc.  call `deferredRequest`(v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L4878e2.  return @kind void;
}
