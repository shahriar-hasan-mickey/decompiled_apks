record `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$f` @kind interface {
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.b` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.c` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` v3 @kind this, `boolean` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L49dc84.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L49dc8a.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.a` @type ^`boolean` := v4 @kind boolean;
  #L49dc8e.  v4:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`;
  #L49dc92.  v0:= 0I;
  #L49dc94.  v1:= 0L;
  #L49dc98.  call `<init>`(v4, v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L49dc9e.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e` := v4 @kind object;
  #L49dca2.  call `set`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L49dca8.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L49dd30.  call temp:= `error`(v6) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L49dd36.  v6:= temp @kind object;
  #L49dd38.  v0:= 1I;
  #L49dd3a.  call temp:= `e`(v5, v6, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.e:(Ljava/lang/Object;Z)Ljava/lang/Object;` @kind virtual;
  #L49dd40.  v6:= temp @kind object;
  #L49dd42.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`;
  #L49dd46.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.d` @type ^`long` @kind wide;
  #L49dd4a.  v3:= 1L;
  #L49dd4e.  v1:= v1 + v3 @kind long;
  #L49dd50.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.d` @type ^`long` := v1 @kind wide;
  #L49dd54.  call `<init>`(v0, v6, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L49dd5a.  call `d`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.d:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;)V` @kind virtual;
  #L49dd60.  call `l`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.l:()V` @kind virtual;
  #L49dd66.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.b:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L49dd78.  call temp:= `next`(v6) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L49dd7e.  v6:= temp @kind object;
  #L49dd80.  v0:= 0I;
  #L49dd82.  call temp:= `e`(v5, v6, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.e:(Ljava/lang/Object;Z)Ljava/lang/Object;` @kind virtual;
  #L49dd88.  v6:= temp @kind object;
  #L49dd8a.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`;
  #L49dd8e.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.d` @type ^`long` @kind wide;
  #L49dd92.  v3:= 1L;
  #L49dd96.  v1:= v1 + v3 @kind long;
  #L49dd98.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.d` @type ^`long` := v1 @kind wide;
  #L49dd9c.  call `<init>`(v0, v6, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L49dda2.  call `d`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.d:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;)V` @kind virtual;
  #L49dda8.  call `k`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.k:()V` @kind virtual;
  #L49ddae.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` v13 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c` v14 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.c:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L49de10.  @monitorenter v14
  #L49de12.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.e` @type ^`boolean` @kind boolean;
  #L49de16.  v1:= 1I;
  #L49de18.  if v0 == 0 then goto L49de24;
  #L49de1c.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.f` @type ^`boolean` := v1 @kind boolean;
  #L49de20.  @monitorexit v14
  #L49de22.  return @kind void;
  #L49de24.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.e` @type ^`boolean` := v1 @kind boolean;
  #L49de28.  @monitorexit v14
  #L49de2a.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49de30.  v2:= temp @kind wide;
  #L49de32.  v4:= 9223372036854775807L;
  #L49de3c.  v0:= 0I;
  #L49de3e.  v6:= lcmp(v2, v4);
  #L49de42.  if v6 != 0 then goto L49de4a;
  #L49de46.  v4:= 1I;
  #L49de48.  goto L49de4c;
  #L49de4a.  v4:= 0I;
  #L49de4c.  call temp:= `a`(v14) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.a:()Ljava/lang/Object;` @kind virtual;
  #L49de52.  v5:= temp @kind object;
  #L49de54.  v5:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v5 @kind object;
  #L49de58.  v6:= 0L;
  #L49de5c.  if v5 != 0 then goto L49de7a;
  #L49de60.  call temp:= `f`(v13) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.f:()Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;` @kind virtual;
  #L49de66.  v5:= temp @kind object;
  #L49de68.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.c` @type ^`java.lang.Object` := v5 @kind object;
  #L49de6c.  v8:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L49de70.  v9:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e.b` @type ^`long` @kind wide;
  #L49de74.  call temp:= `add`(v8, v9) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L49de7a.  v8:= v6 @kind wide;
  #L49de7c.  v10:= 0I;
  #L49de7e.  v11:= lcmp(v2, v6);
  #L49de82.  if v11 == 0 then goto L49df14;
  #L49de86.  call temp:= `isDisposed`(v14) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.isDisposed:()Z` @kind virtual;
  #L49de8c.  v12:= temp;
  #L49de8e.  if v12 == 0 then goto L49de98;
  #L49de92.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.c` @type ^`java.lang.Object` := v10 @kind object;
  #L49de96.  return @kind void;
  #L49de98.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49de9e.  v12:= temp @kind object;
  #L49dea0.  v12:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v12 @kind object;
  #L49dea4.  if v12 == 0 then goto L49df14;
  #L49dea8.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e.a` @type ^`java.lang.Object` @kind object;
  #L49deac.  call temp:= `g`(v13, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L49deb2.  v5:= temp @kind object;
  #L49deb4.  v11:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.b` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49deb8.  call temp:= `accept`(v5, v11) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.accept:(Ljava/lang/Object;Lorg/reactivestreams/Subscriber;)Z` @kind static;
  #L49debe.  v11:= temp;
  #L49dec0.  if v11 == 0 then goto L49deca;
  #L49dec4.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.c` @type ^`java.lang.Object` := v10 @kind object;
  #L49dec8.  return @kind void;
  #L49deca.  v10:= 1L;
  #L49dece.  v8:= v8 + v10 @kind long;
  #L49ded0.  v2:= v2 - v10 @kind long;
  #L49ded2.  v5:= v12 @kind object;
  #L49ded4.  goto L49de7c;
  #L49ded6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49ded8.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49dede.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.c` @type ^`java.lang.Object` := v10 @kind object;
  #L49dee2.  call `dispose`(v14) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.dispose:()V` @kind virtual;
  #L49dee8.  call temp:= `isError`(v5) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L49deee.  v1:= temp;
  #L49def0.  if v1 != 0 then goto L49df0c;
  #L49def4.  call temp:= `isComplete`(v5) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L49defa.  v1:= temp;
  #L49defc.  if v1 != 0 then goto L49df0c;
  #L49df00.  v14:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.b` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49df04.  call `onError`(v14, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49df0a.  goto L49df12;
  #L49df0c.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L49df12.  return @kind void;
  #L49df14.  if v11 != 0 then goto L49df2a;
  #L49df18.  call temp:= `isDisposed`(v14) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.isDisposed:()Z` @kind virtual;
  #L49df1e.  v2:= temp;
  #L49df20.  if v2 == 0 then goto L49df2a;
  #L49df24.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.c` @type ^`java.lang.Object` := v10 @kind object;
  #L49df28.  return @kind void;
  #L49df2a.  v2:= lcmp(v8, v6);
  #L49df2e.  if v2 == 0 then goto L49df40;
  #L49df32.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.c` @type ^`java.lang.Object` := v5 @kind object;
  #L49df36.  if v4 != 0 then goto L49df40;
  #L49df3a.  call temp:= `b`(v14, v8) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.b:(J)J` @kind virtual;
  #L49df40.  @monitorenter v14
  #L49df42.  v2:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.f` @type ^`boolean` @kind boolean;
  #L49df46.  if v2 != 0 then goto L49df52;
  #L49df4a.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.e` @type ^`boolean` := v0 @kind boolean;
  #L49df4e.  @monitorexit v14
  #L49df50.  return @kind void;
  #L49df52.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.f` @type ^`boolean` := v0 @kind boolean;
  #L49df56.  @monitorexit v14
  #L49df58.  goto L49de2a;
  #L49df5c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49df5e.  @monitorexit v14
  #L49df60.  throw v0;
  #L49df62.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49df64.  @monitorexit v14
  #L49df66.  throw v0;
  catch `java.lang.Throwable` @[L49de12..L49de2a] goto L49df62;
  catch `java.lang.Throwable` @[L49deb4..L49dec8] goto L49ded6;
  catch `java.lang.Throwable` @[L49df42..L49df60] goto L49df5c;
  catch `java.lang.Throwable` @[L49df64..L49df66] goto L49df62;
}
procedure `void` `complete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.complete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49dce8.  call temp:= `complete`() @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L49dcee.  v0:= temp @kind object;
  #L49dcf0.  v1:= 1I;
  #L49dcf2.  call temp:= `e`(v6, v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.e:(Ljava/lang/Object;Z)Ljava/lang/Object;` @kind virtual;
  #L49dcf8.  v0:= temp @kind object;
  #L49dcfa.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`;
  #L49dcfe.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.d` @type ^`long` @kind wide;
  #L49dd02.  v4:= 1L;
  #L49dd06.  v2:= v2 + v4 @kind long;
  #L49dd08.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.d` @type ^`long` := v2 @kind wide;
  #L49dd0c.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L49dd12.  call `d`(v6, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.d:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;)V` @kind virtual;
  #L49dd18.  call `l`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.l:()V` @kind virtual;
  #L49dd1e.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.d:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;)V` @AccessFlag FINAL {
    temp;
    v0;

  #L49dcbc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e` @kind object;
  #L49dcc0.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L49dcc6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e` := v2 @kind object;
  #L49dcca.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.c` @type ^`int`;
  #L49dcce.  v2:= v2 + 1;
  #L49dcd2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.c` @type ^`int` := v2;
  #L49dcd6.  return @kind void;
}
procedure `java.lang.Object` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` v0 @kind this, `java.lang.Object` v1 @kind object, `boolean` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.e:(Ljava/lang/Object;Z)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L49dc5c.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.f:()Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;` @AccessFlag  {
    temp;
    v0;

  #L49dc3c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49dc42.  v0:= temp @kind object;
  #L49dc44.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v0 @kind object;
  #L49dc48.  return v0 @kind object;
}
procedure `java.lang.Object` `g`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L49dc70.  return v1 @kind object;
}
procedure `void` `h`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.h:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L49ddc0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49ddc6.  v0:= temp @kind object;
  #L49ddc8.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v0 @kind object;
  #L49ddcc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49ddd2.  v0:= temp @kind object;
  #L49ddd4.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v0 @kind object;
  #L49ddd8.  if v0 == 0 then goto L49ddf0;
  #L49dddc.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.c` @type ^`int`;
  #L49dde0.  v1:= v1 + -1;
  #L49dde4.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.c` @type ^`int` := v1;
  #L49dde8.  call `i`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.i:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;)V` @kind virtual;
  #L49ddee.  return @kind void;
  #L49ddf0.  v0:= new `java.lang.IllegalStateException`;
  #L49ddf4.  v1:= "Empty list!" @kind object;
  #L49ddf8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49ddfe.  throw v0;
}
procedure `void` `i`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` v4 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.i:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;)V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49dfa4.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.a` @type ^`boolean` @kind boolean;
  #L49dfa8.  if v0 == 0 then goto L49dfcc;
  #L49dfac.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`;
  #L49dfb0.  v1:= 0I;
  #L49dfb2.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e.b` @type ^`long` @kind wide;
  #L49dfb6.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L49dfbc.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49dfc2.  v5:= temp @kind object;
  #L49dfc4.  call `lazySet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L49dfca.  v5:= v0 @kind object;
  #L49dfcc.  call `set`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L49dfd2.  return @kind void;
}
procedure `void` `j`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.j:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L49dfe4.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49dfea.  v0:= temp @kind object;
  #L49dfec.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v0 @kind object;
  #L49dff0.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e.a` @type ^`java.lang.Object` @kind object;
  #L49dff4.  if v1 == 0 then goto L49e01c;
  #L49dff8.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`;
  #L49dffc.  v2:= 0I;
  #L49dffe.  v3:= 0L;
  #L49e002.  call `<init>`(v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L49e008.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49e00e.  v0:= temp @kind object;
  #L49e010.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L49e016.  call `set`(v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L49e01c.  return @kind void;
}
procedure `void` `k`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.k:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `l`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.l:()V` @AccessFlag  {
    temp;

  #L49e030.  call `j`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.j:()V` @kind virtual;
  #L49e036.  return @kind void;
}
