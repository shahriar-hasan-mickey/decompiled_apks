record `io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.c` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.d` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReduceMaybe$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c4cdc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c4ce2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4c4ce6.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v2 @kind object;
  #L4c4cea.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReduceMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4cfc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.e` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c4d00.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c4d06.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReduceMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4cbc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.e` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c4cc0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4c4cc6.  v0:= temp;
  #L4c4cc8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReduceMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c4d18.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.c` @type ^`boolean` @kind boolean;
  #L4c4d1c.  if v0 == 0 then goto L4c4d22;
  #L4c4d20.  return @kind void;
  #L4c4d22.  v0:= 1I;
  #L4c4d24.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4c4d28.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.d` @type ^`java.lang.Object` @kind object;
  #L4c4d2c.  v1:= 0I;
  #L4c4d2e.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.d` @type ^`java.lang.Object` := v1 @kind object;
  #L4c4d32.  if v0 == 0 then goto L4c4d42;
  #L4c4d36.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4c4d3a.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4c4d40.  goto L4c4d4c;
  #L4c4d42.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4c4d46.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4c4d4c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReduceMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4d60.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.c` @type ^`boolean` @kind boolean;
  #L4c4d64.  if v0 == 0 then goto L4c4d70;
  #L4c4d68.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c4d6e.  return @kind void;
  #L4c4d70.  v0:= 1I;
  #L4c4d72.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4c4d76.  v0:= 0I;
  #L4c4d78.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.d` @type ^`java.lang.Object` := v0 @kind object;
  #L4c4d7c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4c4d80.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c4d86.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReduceMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c4d98.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.c` @type ^`boolean` @kind boolean;
  #L4c4d9c.  if v0 != 0 then goto L4c4de2;
  #L4c4da0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.d` @type ^`java.lang.Object` @kind object;
  #L4c4da4.  if v0 != 0 then goto L4c4dae;
  #L4c4da8.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.d` @type ^`java.lang.Object` := v3 @kind object;
  #L4c4dac.  goto L4c4de2;
  #L4c4dae.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4c4db2.  call temp:= `apply`(v1, v0, v3) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c4db8.  v3:= temp @kind object;
  #L4c4dba.  v0:= "The reducer returned a null value" @kind object;
  #L4c4dbe.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c4dc4.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.d` @type ^`java.lang.Object` := v3 @kind object;
  #L4c4dc8.  goto L4c4de2;
  #L4c4dca.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c4dcc.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c4dd2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.e` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c4dd6.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c4ddc.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReduceMaybe$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c4de2.  return @kind void;
  catch `java.lang.Throwable` @[L4c4dae..L4c4dc8] goto L4c4dca;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReduceMaybe$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4e00.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.e` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c4e04.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4c4e0a.  v0:= temp;
  #L4c4e0c.  if v0 == 0 then goto L4c4e1e;
  #L4c4e10.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.e` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4c4e14.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4c4e18.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4c4e1e.  return @kind void;
}
