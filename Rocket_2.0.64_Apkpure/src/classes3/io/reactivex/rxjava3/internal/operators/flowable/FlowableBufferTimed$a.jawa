record `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.functions.Supplier` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.c` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.d` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.h` @AccessFlag FINAL;
  `java.util.Collection` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.i` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.j` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.k` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.l` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.m` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.rxjava3.functions.Supplier` v3 @kind object, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `int` v7 , `boolean` v8 , `io.reactivex.rxjava3.core.Scheduler$Worker` v9 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Supplier;JLjava/util/concurrent/TimeUnit;IZLio/reactivex/rxjava3/core/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4892b0.  v0:= new `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue`;
  #L4892b4.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4892ba.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L4892c0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.c` @type ^`io.reactivex.rxjava3.functions.Supplier` := v3 @kind object;
  #L4892c4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.d` @type ^`long` := v4 @kind wide;
  #L4892c8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.e` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L4892cc.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.f` @type ^`int` := v7;
  #L4892d0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.g` @type ^`boolean` := v8 @kind boolean;
  #L4892d4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v9 @kind object;
  #L4892d8.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L489274.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48927a.  v1:= 1I;
  #L48927c.  return v1;
}
procedure `boolean` `accept`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L489254.  v2:= (`java.util.Collection`) v2 @kind object;
  #L489258.  call temp:= `a`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @kind virtual;
  #L48925e.  v1:= temp;
  #L489260.  return v1;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4892ec.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4892f0.  if v0 != 0 then goto L489300;
  #L4892f4.  v0:= 1I;
  #L4892f6.  v1.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L4892fa.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.dispose:()V` @kind virtual;
  #L489300.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L489314.  @monitorenter v1
  #L489316.  v0:= 0I;
  #L489318.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` := v0 @kind object;
  #L48931c.  @monitorexit v1
  #L48931e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.k` @type ^`org.reactivestreams.Subscription` @kind object;
  #L489322.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L489328.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L48932c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L489332.  return @kind void;
  #L489334.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L489336.  @monitorexit v1
  #L489338.  throw v0;
  catch `java.lang.Throwable` @[L489318..L48931e] goto L489334;
  catch `java.lang.Throwable` @[L489336..L489338] goto L489334;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L489290.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L489294.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L48929a.  v0:= temp;
  #L48929c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L489360.  @monitorenter v3
  #L489362.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` @kind object;
  #L489366.  v1:= 0I;
  #L489368.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` := v1 @kind object;
  #L48936c.  @monitorexit v3
  #L48936e.  if v0 == 0 then goto L4893a8;
  #L489372.  v1:= v3.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L489376.  call temp:= `offer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L48937c.  v0:= 1I;
  #L48937e.  v3.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L489382.  call temp:= `enter`(v3) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L489388.  v0:= temp;
  #L48938a.  if v0 == 0 then goto L48939e;
  #L48938e.  v0:= v3.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L489392.  v1:= v3.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L489396.  v2:= 0I;
  #L489398.  call `drainMaxLoop`(v0, v1, v2, v3, v3) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/internal/util/QueueDrain;)V` @kind static;
  #L48939e.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4893a2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4893a8.  return @kind void;
  #L4893aa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4893ac.  @monitorexit v3
  #L4893ae.  throw v0;
  catch `java.lang.Throwable` @[L489362..L48936e] goto L4893aa;
  catch `java.lang.Throwable` @[L4893ac..L4893ae] goto L4893aa;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4893d4.  @monitorenter v1
  #L4893d6.  v0:= 0I;
  #L4893d8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` := v0 @kind object;
  #L4893dc.  @monitorexit v1
  #L4893de.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4893e2.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4893e8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4893ec.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4893f2.  return @kind void;
  #L4893f4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4893f6.  @monitorexit v1
  #L4893f8.  throw v2;
  catch `java.lang.Throwable` @[L4893d8..L4893de] goto L4893f4;
  catch `java.lang.Throwable` @[L4893f6..L4893f8] goto L4893f4;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L489420.  @monitorenter v7
  #L489422.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` @kind object;
  #L489426.  if v0 != 0 then goto L48942e;
  #L48942a.  @monitorexit v7
  #L48942c.  return @kind void;
  #L48942e.  call temp:= `add`(v0, v8) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L489434.  call temp:= `size`(v0) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L48943a.  v8:= temp;
  #L48943c.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.f` @type ^`int`;
  #L489440.  if v8 >= v1 then goto L489448;
  #L489444.  @monitorexit v7
  #L489446.  return @kind void;
  #L489448.  v8:= 0I;
  #L48944a.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` := v8 @kind object;
  #L48944e.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.l` @type ^`long` @kind wide;
  #L489452.  v3:= 1L;
  #L489456.  v1:= v1 + v3 @kind long;
  #L489458.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.l` @type ^`long` := v1 @kind wide;
  #L48945c.  @monitorexit v7
  #L48945e.  v8:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.g` @type ^`boolean` @kind boolean;
  #L489462.  if v8 == 0 then goto L489470;
  #L489466.  v8:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.j` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L48946a.  call `dispose`(v8) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L489470.  v8:= 0I;
  #L489472.  call `fastPathOrderedEmitMax`(v7, v0, v8, v7) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.fastPathOrderedEmitMax:(Ljava/lang/Object;ZLio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L489478.  v8:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.c` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L48947c.  call temp:= `get`(v8) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L489482.  v8:= temp @kind object;
  #L489484.  v0:= "The supplied buffer is null" @kind object;
  #L489488.  call temp:= `requireNonNull`(v8, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48948e.  v8:= (`java.util.Collection`) v8 @kind object;
  #L489492.  @monitorenter v7
  #L489494.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` := v8 @kind object;
  #L489498.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.m` @type ^`long` @kind wide;
  #L48949c.  v0:= v0 + v3 @kind long;
  #L48949e.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.m` @type ^`long` := v0 @kind wide;
  #L4894a2.  @monitorexit v7
  #L4894a4.  v8:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.g` @type ^`boolean` @kind boolean;
  #L4894a8.  if v8 == 0 then goto L4894c8;
  #L4894ac.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4894b0.  v4:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.d` @type ^`long` @kind wide;
  #L4894b4.  v6:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4894b8.  v1:= v7 @kind object;
  #L4894ba.  v2:= v4 @kind wide;
  #L4894bc.  call temp:= `schedulePeriodically`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4894c2.  v8:= temp @kind object;
  #L4894c4.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.j` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v8 @kind object;
  #L4894c8.  return @kind void;
  #L4894ca.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4894cc.  @monitorexit v7
  #L4894ce.  throw v8;
  #L4894d0.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4894d2.  call `throwIfFatal`(v8) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4894d8.  call `cancel`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.cancel:()V` @kind virtual;
  #L4894de.  v0:= v7.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4894e2.  call `onError`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4894e8.  return @kind void;
  #L4894ea.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4894ec.  @monitorexit v7
  #L4894ee.  throw v8;
  catch `java.lang.Throwable` @[L489422..L48945e] goto L4894ea;
  catch `java.lang.Throwable` @[L489478..L489492] goto L4894d0;
  catch `java.lang.Throwable` @[L489494..L4894a4] goto L4894ca;
  catch `java.lang.Throwable` @[L4894cc..L4894ce] goto L4894ca;
  catch `java.lang.Throwable` @[L4894ec..L4894ee] goto L4894ea;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a` v8 @kind this, `org.reactivestreams.Subscription` v9 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L489530.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.k` @type ^`org.reactivestreams.Subscription` @kind object;
  #L489534.  call temp:= `validate`(v0, v9) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L48953a.  v0:= temp;
  #L48953c.  if v0 != 0 then goto L489542;
  #L489540.  return @kind void;
  #L489542.  v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.k` @type ^`org.reactivestreams.Subscription` := v9 @kind object;
  #L489546.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.c` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L48954a.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L489550.  v0:= temp @kind object;
  #L489552.  v1:= "The supplied buffer is null" @kind object;
  #L489556.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48955c.  v0:= (`java.util.Collection`) v0 @kind object;
  #L489560.  v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` := v0 @kind object;
  #L489564.  v0:= v8.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L489568.  call `onSubscribe`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L48956e.  v1:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L489572.  v5:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.d` @type ^`long` @kind wide;
  #L489576.  v7:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L48957a.  v2:= v8 @kind object;
  #L48957c.  v3:= v5 @kind wide;
  #L48957e.  call temp:= `schedulePeriodically`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L489584.  v0:= temp @kind object;
  #L489586.  v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.j` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L48958a.  v0:= 9223372036854775807L;
  #L489594.  call `request`(v9, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L48959a.  return @kind void;
  #L48959c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48959e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4895a4.  v1:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4895a8.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4895ae.  call `cancel`(v9) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4895b4.  v9:= v8.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4895b8.  call `error`(v0, v9) @signature `Lio/reactivex/rxjava3/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L4895be.  return @kind void;
  catch `java.lang.Throwable` @[L489546..L489560] goto L48959c;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L4895dc.  call `requested`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @kind virtual;
  #L4895e2.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a` v7 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4895f4.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.c` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4895f8.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4895fe.  v0:= temp @kind object;
  #L489600.  v1:= "The supplied buffer is null" @kind object;
  #L489604.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48960a.  v0:= (`java.util.Collection`) v0 @kind object;
  #L48960e.  @monitorenter v7
  #L489610.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` @kind object;
  #L489614.  if v1 == 0 then goto L48963a;
  #L489618.  v2:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.l` @type ^`long` @kind wide;
  #L48961c.  v4:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.m` @type ^`long` @kind wide;
  #L489620.  v6:= lcmp(v2, v4);
  #L489624.  if v6 == 0 then goto L48962a;
  #L489628.  goto L48963a;
  #L48962a.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` := v0 @kind object;
  #L48962e.  @monitorexit v7
  #L489630.  v0:= 0I;
  #L489632.  call `fastPathOrderedEmitMax`(v7, v1, v0, v7) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.fastPathOrderedEmitMax:(Ljava/lang/Object;ZLio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L489638.  return @kind void;
  #L48963a.  @monitorexit v7
  #L48963c.  return @kind void;
  #L48963e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L489640.  @monitorexit v7
  #L489642.  throw v0;
  #L489644.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L489646.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48964c.  call `cancel`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.cancel:()V` @kind virtual;
  #L489652.  v1:= v7.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L489656.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48965c.  return @kind void;
  catch `java.lang.Throwable` @[L4895f4..L48960e] goto L489644;
  catch `java.lang.Throwable` @[L489610..L489630] goto L48963e;
  catch `java.lang.Throwable` @[L48963a..L489642] goto L48963e;
}
