record `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Flowable` @kind class {
  `io.reactivex.rxjava3.flowables.ConnectableFlowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.c` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.d` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.g` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` v7 @kind this, `io.reactivex.rxjava3.flowables.ConnectableFlowable` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;.<init>:(Lio/reactivex/rxjava3/flowables/ConnectableFlowable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L49d318.  v5:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L49d31c.  v2:= 1I;
  #L49d31e.  v3:= 0L;
  #L49d322.  v6:= 0I;
  #L49d324.  v0:= v7 @kind object;
  #L49d326.  v1:= v8 @kind object;
  #L49d328.  call `<init>`(v0, v1, v2, v3, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;.<init>:(Lio/reactivex/rxjava3/flowables/ConnectableFlowable;IJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)V` @kind direct;
  #L49d32e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` v0 @kind this, `io.reactivex.rxjava3.flowables.ConnectableFlowable` v1 @kind object, `int` v2 , `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.rxjava3.core.Scheduler` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;.<init>:(Lio/reactivex/rxjava3/flowables/ConnectableFlowable;IJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49d340.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.<init>:()V` @kind direct;
  #L49d346.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.b` @type ^`io.reactivex.rxjava3.flowables.ConnectableFlowable` := v1 @kind object;
  #L49d34a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.c` @type ^`int` := v2;
  #L49d34e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.d` @type ^`long` := v3 @kind wide;
  #L49d352.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.e` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L49d356.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.f` @type ^`io.reactivex.rxjava3.core.Scheduler` := v6 @kind object;
  #L49d35a.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` v5 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;.e:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L49d36c.  @monitorenter v5
  #L49d36e.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.g` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` @kind object;
  #L49d372.  if v0 == 0 then goto L49d3e6;
  #L49d376.  if v0 == v6 then goto L49d37c;
  #L49d37a.  goto L49d3e6;
  #L49d37c.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.c` @type ^`long` @kind wide;
  #L49d380.  v2:= 1L;
  #L49d384.  v0:= v0 - v2 @kind long;
  #L49d386.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.c` @type ^`long` := v0 @kind wide;
  #L49d38a.  v2:= 0L;
  #L49d38e.  v4:= lcmp(v0, v2);
  #L49d392.  if v4 != 0 then goto L49d3e2;
  #L49d396.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.d` @type ^`boolean` @kind boolean;
  #L49d39a.  if v0 != 0 then goto L49d3a0;
  #L49d39e.  goto L49d3e2;
  #L49d3a0.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.d` @type ^`long` @kind wide;
  #L49d3a4.  v4:= lcmp(v0, v2);
  #L49d3a8.  if v4 != 0 then goto L49d3b6;
  #L49d3ac.  call `g`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;.g:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;)V` @kind virtual;
  #L49d3b2.  @monitorexit v5
  #L49d3b4.  return @kind void;
  #L49d3b6.  v0:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L49d3ba.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L49d3c0.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L49d3c4.  @monitorexit v5
  #L49d3c6.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.f` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L49d3ca.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.d` @type ^`long` @kind wide;
  #L49d3ce.  v4:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L49d3d2.  call temp:= `scheduleDirect`(v1, v6, v2, v4) @signature `Lio/reactivex/rxjava3/core/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L49d3d8.  v6:= temp @kind object;
  #L49d3da.  call temp:= `replace`(v0, v6) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L49d3e0.  return @kind void;
  #L49d3e2.  @monitorexit v5
  #L49d3e4.  return @kind void;
  #L49d3e6.  @monitorexit v5
  #L49d3e8.  return @kind void;
  #L49d3ea.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49d3ec.  @monitorexit v5
  #L49d3ee.  throw v6;
  catch `java.lang.Throwable` @[L49d36e..L49d3c6] goto L49d3ea;
  catch `java.lang.Throwable` @[L49d3e2..L49d3ee] goto L49d3ea;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` v6 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;.f:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49d4c4.  @monitorenter v6
  #L49d4c6.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.g` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` @kind object;
  #L49d4ca.  if v0 != v7 then goto L49d50a;
  #L49d4ce.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L49d4d2.  v1:= 0I;
  #L49d4d4.  if v0 == 0 then goto L49d4e2;
  #L49d4d8.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L49d4de.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v1 @kind object;
  #L49d4e2.  v2:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.c` @type ^`long` @kind wide;
  #L49d4e6.  v4:= 1L;
  #L49d4ea.  v2:= v2 - v4 @kind long;
  #L49d4ec.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.c` @type ^`long` := v2 @kind wide;
  #L49d4f0.  v4:= 0L;
  #L49d4f4.  v7:= lcmp(v2, v4);
  #L49d4f8.  if v7 != 0 then goto L49d50a;
  #L49d4fc.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.g` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` := v1 @kind object;
  #L49d500.  v7:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.b` @type ^`io.reactivex.rxjava3.flowables.ConnectableFlowable` @kind object;
  #L49d504.  call `reset`(v7) @signature `Lio/reactivex/rxjava3/flowables/ConnectableFlowable;.reset:()V` @kind virtual;
  #L49d50a.  @monitorexit v6
  #L49d50c.  return @kind void;
  #L49d50e.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49d510.  @monitorexit v6
  #L49d512.  throw v7;
  catch `java.lang.Throwable` @[L49d4c6..L49d512] goto L49d50e;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` v5 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;.g:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L49d530.  @monitorenter v5
  #L49d532.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.c` @type ^`long` @kind wide;
  #L49d536.  v2:= 0L;
  #L49d53a.  v4:= lcmp(v0, v2);
  #L49d53e.  if v4 != 0 then goto L49d578;
  #L49d542.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.g` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` @kind object;
  #L49d546.  if v6 != v0 then goto L49d578;
  #L49d54a.  v0:= 0I;
  #L49d54c.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.g` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` := v0 @kind object;
  #L49d550.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49d556.  v0:= temp @kind object;
  #L49d558.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L49d55c.  call temp:= `dispose`(v6) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L49d562.  if v0 != 0 then goto L49d56e;
  #L49d566.  v0:= 1I;
  #L49d568.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.e` @type ^`boolean` := v0 @kind boolean;
  #L49d56c.  goto L49d578;
  #L49d56e.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.b` @type ^`io.reactivex.rxjava3.flowables.ConnectableFlowable` @kind object;
  #L49d572.  call `reset`(v6) @signature `Lio/reactivex/rxjava3/flowables/ConnectableFlowable;.reset:()V` @kind virtual;
  #L49d578.  @monitorexit v5
  #L49d57a.  return @kind void;
  #L49d57c.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49d57e.  @monitorexit v5
  #L49d580.  throw v6;
  catch `java.lang.Throwable` @[L49d532..L49d580] goto L49d57c;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` v7 @kind this, `org.reactivestreams.Subscriber` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L49d414.  @monitorenter v7
  #L49d416.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.g` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` @kind object;
  #L49d41a.  if v0 != 0 then goto L49d42c;
  #L49d41e.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a`;
  #L49d422.  call `<init>`(v0, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;)V` @kind direct;
  #L49d428.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.g` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` := v0 @kind object;
  #L49d42c.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.c` @type ^`long` @kind wide;
  #L49d430.  v3:= 0L;
  #L49d434.  v5:= lcmp(v1, v3);
  #L49d438.  if v5 != 0 then goto L49d44a;
  #L49d43c.  v3:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L49d440.  if v3 == 0 then goto L49d44a;
  #L49d444.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L49d44a.  v3:= 1L;
  #L49d44e.  v1:= v1 + v3 @kind long;
  #L49d450.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.c` @type ^`long` := v1 @kind wide;
  #L49d454.  v3:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.d` @type ^`boolean` @kind boolean;
  #L49d458.  v4:= 1I;
  #L49d45a.  if v3 != 0 then goto L49d472;
  #L49d45e.  v3:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.c` @type ^`int`;
  #L49d462.  v5:= (`long`) v3 @kind i2l;
  #L49d464.  v3:= lcmp(v1, v5);
  #L49d468.  if v3 != 0 then goto L49d472;
  #L49d46c.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.d` @type ^`boolean` := v4 @kind boolean;
  #L49d470.  goto L49d474;
  #L49d472.  v4:= 0I;
  #L49d474.  @monitorexit v7
  #L49d476.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.b` @type ^`io.reactivex.rxjava3.flowables.ConnectableFlowable` @kind object;
  #L49d47a.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b`;
  #L49d47e.  call `<init>`(v2, v8, v7, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;)V` @kind direct;
  #L49d484.  call `subscribe`(v1, v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V` @kind virtual;
  #L49d48a.  if v4 == 0 then goto L49d498;
  #L49d48e.  v8:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.b` @type ^`io.reactivex.rxjava3.flowables.ConnectableFlowable` @kind object;
  #L49d492.  call `connect`(v8, v0) @signature `Lio/reactivex/rxjava3/flowables/ConnectableFlowable;.connect:(Lio/reactivex/rxjava3/functions/Consumer;)V` @kind virtual;
  #L49d498.  return @kind void;
  #L49d49a.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49d49c.  @monitorexit v7
  #L49d49e.  throw v8;
  catch `java.lang.Throwable` @[L49d416..L49d476] goto L49d49a;
  catch `java.lang.Throwable` @[L49d49c..L49d49e] goto L49d49a;
}
