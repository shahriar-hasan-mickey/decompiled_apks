record `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.a` @kind class {
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Supplier` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed` v0 @kind this, `io.reactivex.rxjava3.core.Flowable` v1 @kind object, `io.reactivex.rxjava3.functions.Supplier` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed;.<init>:(Lio/reactivex/rxjava3/core/Flowable;Lio/reactivex/rxjava3/functions/Supplier;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a0284.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/a;.<init>:(Lio/reactivex/rxjava3/core/Flowable;)V` @kind direct;
  #L4a028a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v3 @kind object;
  #L4a028e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.c` @type ^`io.reactivex.rxjava3.functions.Supplier` := v2 @kind object;
  #L4a0292.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed` v5 @kind this, `org.reactivestreams.Subscriber` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a02a4.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.c` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4a02a8.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4a02ae.  v0:= temp @kind object;
  #L4a02b0.  v1:= "The seed supplied is null" @kind object;
  #L4a02b4.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4a02ba.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.a.source` @type ^`io.reactivex.rxjava3.core.Flowable` @kind object;
  #L4a02be.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a`;
  #L4a02c2.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4a02c6.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L4a02cc.  v4:= temp;
  #L4a02ce.  call `<init>`(v2, v6, v3, v0, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/BiFunction;Ljava/lang/Object;I)V` @kind direct;
  #L4a02d4.  call `subscribe`(v1, v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V` @kind virtual;
  #L4a02da.  return @kind void;
  #L4a02dc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a02de.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4a02e4.  call `error`(v0, v6) @signature `Lio/reactivex/rxjava3/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L4a02ea.  return @kind void;
  catch `java.lang.Throwable` @[L4a02a4..L4a02ba] goto L4a02dc;
}
