record `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.observers.DisposableObserver` @kind class, `java.util.Iterator` @kind interface {
  `io.reactivex.rxjava3.core.Notification` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.d` @AccessFlag ;
  `java.util.concurrent.Semaphore` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.f` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableLatest$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4b56b4.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/observers/DisposableObserver;.<init>:()V` @kind direct;
  #L4b56ba.  v0:= new `java.util.concurrent.Semaphore`;
  #L4b56be.  v1:= 0I;
  #L4b56c0.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/Semaphore;.<init>:(I)V` @kind direct;
  #L4b56c6.  v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.e` @type ^`java.util.concurrent.Semaphore` := v0 @kind object;
  #L4b56ca.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4b56ce.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b56d4.  v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4b56d8.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a` v1 @kind this, `io.reactivex.rxjava3.core.Notification` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableLatest$a;.a:(Lio/reactivex/rxjava3/core/Notification;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b5718.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b571c.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4b5722.  v2:= temp @kind object;
  #L4b5724.  if v2 != 0 then goto L4b572c;
  #L4b5728.  v2:= 1I;
  #L4b572a.  goto L4b572e;
  #L4b572c.  v2:= 0I;
  #L4b572e.  if v2 == 0 then goto L4b573c;
  #L4b5732.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.e` @type ^`java.util.concurrent.Semaphore` @kind object;
  #L4b5736.  call `release`(v2) @signature `Ljava/util/concurrent/Semaphore;.release:()V` @kind virtual;
  #L4b573c.  return @kind void;
}
procedure `boolean` `hasNext`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableLatest$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b55b0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` @kind object;
  #L4b55b4.  if v0 == 0 then goto L4b55dc;
  #L4b55b8.  call temp:= `isOnError`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnError:()Z` @kind virtual;
  #L4b55be.  v0:= temp;
  #L4b55c0.  if v0 != 0 then goto L4b55c6;
  #L4b55c4.  goto L4b55dc;
  #L4b55c6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` @kind object;
  #L4b55ca.  call temp:= `getError`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L4b55d0.  v0:= temp @kind object;
  #L4b55d2.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4b55d8.  v0:= temp @kind object;
  #L4b55da.  throw v0;
  #L4b55dc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` @kind object;
  #L4b55e0.  if v0 != 0 then goto L4b5648;
  #L4b55e4.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L4b55ea.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.e` @type ^`java.util.concurrent.Semaphore` @kind object;
  #L4b55ee.  call `acquire`(v0) @signature `Ljava/util/concurrent/Semaphore;.acquire:()V` @kind virtual;
  #L4b55f4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b55f8.  v1:= 0I;
  #L4b55fa.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4b5600.  v0:= temp @kind object;
  #L4b5602.  v0:= (`io.reactivex.rxjava3.core.Notification`) v0 @kind object;
  #L4b5606.  v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` := v0 @kind object;
  #L4b560a.  call temp:= `isOnError`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnError:()Z` @kind virtual;
  #L4b5610.  v1:= temp;
  #L4b5612.  if v1 != 0 then goto L4b5618;
  #L4b5616.  goto L4b5648;
  #L4b5618.  call temp:= `getError`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L4b561e.  v0:= temp @kind object;
  #L4b5620.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4b5626.  v0:= temp @kind object;
  #L4b5628.  throw v0;
  #L4b562a.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L4b562c.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/observers/DisposableObserver;.dispose:()V` @kind virtual;
  #L4b5632.  call temp:= `createOnError`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.createOnError:(Ljava/lang/Throwable;)Lio/reactivex/rxjava3/core/Notification;` @kind static;
  #L4b5638.  v1:= temp @kind object;
  #L4b563a.  v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` := v1 @kind object;
  #L4b563e.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4b5644.  v0:= temp @kind object;
  #L4b5646.  throw v0;
  #L4b5648.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` @kind object;
  #L4b564c.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnNext:()Z` @kind virtual;
  #L4b5652.  v0:= temp;
  #L4b5654.  return v0;
  catch `java.lang.InterruptedException` @[L4b55e4..L4b55f4] goto L4b562a;
}
procedure `java.lang.Object` `next`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableLatest$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b5678.  call temp:= `hasNext`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableLatest$a;.hasNext:()Z` @kind virtual;
  #L4b567e.  v0:= temp;
  #L4b5680.  if v0 == 0 then goto L4b5698;
  #L4b5684.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` @kind object;
  #L4b5688.  call temp:= `getValue`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L4b568e.  v0:= temp @kind object;
  #L4b5690.  v1:= 0I;
  #L4b5692.  v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` := v1 @kind object;
  #L4b5696.  return v0 @kind object;
  #L4b5698.  v0:= new `java.util.NoSuchElementException`;
  #L4b569c.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L4b56a2.  throw v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableLatest$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L4b56ec.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableLatest$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4b5700.  call `onError`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b5706.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableLatest$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4b5750.  v1:= (`io.reactivex.rxjava3.core.Notification`) v1 @kind object;
  #L4b5754.  call `a`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableLatest$a;.a:(Lio/reactivex/rxjava3/core/Notification;)V` @kind virtual;
  #L4b575a.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableLatest$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b576c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L4b5770.  v1:= "Read-only iterator." @kind object;
  #L4b5774.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b577a.  throw v0;
}
