record `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$b`[] `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.d` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.g` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.h` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.i` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.j` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.k` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.l` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.m` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `int` v4 , `int` v5 , `boolean` v6 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;IIZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L48a970.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L48a976.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L48a97a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L48a97e.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$b`[v4];
  #L48a982.  v3:= 0I;
  #L48a984.  if v3 >= v4 then goto L48a99c;
  #L48a988.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$b`;
  #L48a98c.  call `<init>`(v0, v1, v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;II)V` @kind direct;
  #L48a992.  v2[v3]:= v0 @kind object;
  #L48a996.  v3:= v3 + 1;
  #L48a99a.  goto L48a984;
  #L48a99c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$b`[] := v2 @kind object;
  #L48a9a0.  v2:= new `java.lang.Object`[v4];
  #L48a9a4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.e` @type ^`java.lang.Object`[] := v2 @kind object;
  #L48a9a8.  v2:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L48a9ac.  call `<init>`(v2, v5) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L48a9b2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L48a9b6.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L48a9ba.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L48a9c0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.k` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L48a9c4.  v2:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L48a9c8.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L48a9ce.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v2 @kind object;
  #L48a9d2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.f` @type ^`boolean` := v6 @kind boolean;
  #L48a9d6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48a9e8.  v0:= 1I;
  #L48a9ea.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.j` @type ^`boolean` := v0 @kind boolean;
  #L48a9ee.  call `e`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @kind virtual;
  #L48a9f4.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.drain:()V` @kind virtual;
  #L48a9fa.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48aa3c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L48aa40.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L48aa46.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L48aa58.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L48aa5e.  v0:= temp;
  #L48aa60.  if v0 == 0 then goto L48aa66;
  #L48aa64.  return @kind void;
  #L48aa66.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.g` @type ^`boolean` @kind boolean;
  #L48aa6a.  if v0 == 0 then goto L48aa76;
  #L48aa6e.  call `h`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.h:()V` @kind virtual;
  #L48aa74.  goto L48aa7c;
  #L48aa76.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.g:()V` @kind virtual;
  #L48aa7c.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48aa0c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$b`[] @kind object;
  #L48aa10.  v1:= length @variable v0;
  #L48aa12.  v2:= 0I;
  #L48aa14.  if v2 >= v1 then goto L48aa28;
  #L48aa18.  v3:= v0[v2] @kind object;
  #L48aa1c.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$b;.a:()V` @kind virtual;
  #L48aa22.  v2:= v2 + 1;
  #L48aa26.  goto L48aa14;
  #L48aa28.  return @kind void;
}
procedure `boolean` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v2 @kind this, `boolean` v3 , `boolean` v4 , `org.reactivestreams.Subscriber` v5 @kind object, `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.f:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L48a834.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.j` @type ^`boolean` @kind boolean;
  #L48a838.  v1:= 1I;
  #L48a83a.  if v0 == 0 then goto L48a856;
  #L48a83e.  call `e`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @kind virtual;
  #L48a844.  call `clear`(v6) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L48a84a.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48a84e.  call `tryTerminateAndReport`(v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L48a854.  return v1;
  #L48a856.  if v3 == 0 then goto L48a8b6;
  #L48a85a.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.f` @type ^`boolean` @kind boolean;
  #L48a85e.  if v3 == 0 then goto L48a878;
  #L48a862.  if v4 == 0 then goto L48a8b6;
  #L48a866.  call `e`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @kind virtual;
  #L48a86c.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48a870.  call `tryTerminateConsumer`(v3, v5) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L48a876.  return v1;
  #L48a878.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48a87c.  call temp:= `terminate`(v3) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L48a882.  v3:= temp @kind object;
  #L48a884.  if v3 == 0 then goto L48a8a4;
  #L48a888.  v0:= `@@io.reactivex.rxjava3.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L48a88c.  if v3 == v0 then goto L48a8a4;
  #L48a890.  call `e`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @kind virtual;
  #L48a896.  call `clear`(v6) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L48a89c.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48a8a2.  return v1;
  #L48a8a4.  if v4 == 0 then goto L48a8b6;
  #L48a8a8.  call `e`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @kind virtual;
  #L48a8ae.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L48a8b4.  return v1;
  #L48a8b6.  v3:= 0I;
  #L48a8b8.  return v3;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v14 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L48aa90.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48aa94.  v1:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L48aa98.  v2:= 1I;
  #L48aa9a.  v3:= 1I;
  #L48aa9c.  v4:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L48aaa0.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L48aaa6.  v4:= temp @kind wide;
  #L48aaa8.  v6:= 0L;
  #L48aaac.  v8:= v6 @kind wide;
  #L48aaae.  v10:= lcmp(v8, v4);
  #L48aab2.  if v10 == 0 then goto L48ab46;
  #L48aab6.  v11:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.l` @type ^`boolean` @kind boolean;
  #L48aaba.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L48aac0.  v12:= temp @kind object;
  #L48aac2.  if v12 != 0 then goto L48aaca;
  #L48aac6.  v13:= 1I;
  #L48aac8.  goto L48aacc;
  #L48aaca.  v13:= 0I;
  #L48aacc.  call temp:= `f`(v14, v11, v13, v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.f:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L48aad2.  v11:= temp;
  #L48aad4.  if v11 == 0 then goto L48aada;
  #L48aad8.  return @kind void;
  #L48aada.  if v13 == 0 then goto L48aae0;
  #L48aade.  goto L48ab46;
  #L48aae0.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L48aae6.  v10:= temp @kind object;
  #L48aae8.  v10:= (`java.lang.Object`[]) v10 @kind object;
  #L48aaec.  v11:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L48aaf0.  call temp:= `apply`(v11, v10) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L48aaf6.  v10:= temp @kind object;
  #L48aaf8.  v11:= "The combiner returned a null value" @kind object;
  #L48aafc.  call temp:= `requireNonNull`(v10, v11) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48ab02.  call `onNext`(v0, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48ab08.  v12:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$b`) v12 @kind object;
  #L48ab0c.  call `b`(v12) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$b;.b:()V` @kind virtual;
  #L48ab12.  v10:= 1L;
  #L48ab16.  v8:= v8 + v10 @kind long;
  #L48ab18.  goto L48aaae;
  #L48ab1a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48ab1c.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48ab22.  call `e`(v14) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @kind virtual;
  #L48ab28.  v2:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48ab2c.  call temp:= `addThrowable`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L48ab32.  v1:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48ab36.  call temp:= `terminate`(v1) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L48ab3c.  v1:= temp @kind object;
  #L48ab3e.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48ab44.  return @kind void;
  #L48ab46.  if v10 != 0 then goto L48ab64;
  #L48ab4a.  v10:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.l` @type ^`boolean` @kind boolean;
  #L48ab4e.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L48ab54.  v11:= temp;
  #L48ab56.  call temp:= `f`(v14, v10, v11, v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.f:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L48ab5c.  v10:= temp;
  #L48ab5e.  if v10 == 0 then goto L48ab64;
  #L48ab62.  return @kind void;
  #L48ab64.  v10:= lcmp(v8, v6);
  #L48ab68.  if v10 == 0 then goto L48ab8a;
  #L48ab6c.  v6:= 9223372036854775807L;
  #L48ab76.  v10:= lcmp(v4, v6);
  #L48ab7a.  if v10 == 0 then goto L48ab8a;
  #L48ab7e.  v4:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L48ab82.  v5:= -v8 @kind long;
  #L48ab84.  call temp:= `addAndGet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L48ab8a.  v3:= -v3 @kind int;
  #L48ab8c.  call temp:= `addAndGet`(v14, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L48ab92.  v3:= temp;
  #L48ab94.  if v3 != 0 then goto L48aa9c;
  #L48ab98.  return @kind void;
  catch `java.lang.Throwable` @[L48aaec..L48ab02] goto L48ab1a;
}
procedure `void` `h`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.h:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48abb8.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48abbc.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L48abc0.  v2:= 1I;
  #L48abc2.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.j` @type ^`boolean` @kind boolean;
  #L48abc6.  if v3 == 0 then goto L48abd2;
  #L48abca.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L48abd0.  return @kind void;
  #L48abd2.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48abd6.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48abdc.  v3:= temp @kind object;
  #L48abde.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L48abe2.  if v3 == 0 then goto L48abf4;
  #L48abe6.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L48abec.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48abf2.  return @kind void;
  #L48abf4.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.l` @type ^`boolean` @kind boolean;
  #L48abf8.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L48abfe.  v4:= temp;
  #L48ac00.  if v4 != 0 then goto L48ac0c;
  #L48ac04.  v5:= 0I;
  #L48ac06.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48ac0c.  if v3 == 0 then goto L48ac1c;
  #L48ac10.  if v4 == 0 then goto L48ac1c;
  #L48ac14.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L48ac1a.  return @kind void;
  #L48ac1c.  v2:= -v2 @kind int;
  #L48ac1e.  call temp:= `addAndGet`(v6, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L48ac24.  v2:= temp;
  #L48ac26.  if v2 != 0 then goto L48abc2;
  #L48ac2a.  return @kind void;
}
procedure `void` `i`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.i:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L48ac3c.  @monitorenter v2
  #L48ac3e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.e` @type ^`java.lang.Object`[] @kind object;
  #L48ac42.  v3:= v0[v3] @kind object;
  #L48ac46.  v1:= 1I;
  #L48ac48.  if v3 == 0 then goto L48ac66;
  #L48ac4c.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.i` @type ^`int`;
  #L48ac50.  v3:= v3 + v1 @kind int;
  #L48ac52.  v0:= length @variable v0;
  #L48ac54.  if v3 != v0 then goto L48ac5e;
  #L48ac58.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.l` @type ^`boolean` := v1 @kind boolean;
  #L48ac5c.  goto L48ac6a;
  #L48ac5e.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.i` @type ^`int` := v3;
  #L48ac62.  @monitorexit v2
  #L48ac64.  return @kind void;
  #L48ac66.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.l` @type ^`boolean` := v1 @kind boolean;
  #L48ac6a.  @monitorexit v2
  #L48ac6c.  call `drain`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.drain:()V` @kind virtual;
  #L48ac72.  return @kind void;
  #L48ac74.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48ac76.  @monitorexit v2
  #L48ac78.  throw v3;
  catch `java.lang.Throwable` @[L48ac3e..L48ac6c] goto L48ac74;
  catch `java.lang.Throwable` @[L48ac76..L48ac78] goto L48ac74;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48a8cc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L48a8d0.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L48a8d6.  v0:= temp;
  #L48a8d8.  return v0;
}
procedure `void` `j`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v1 @kind this, `int` v2 , `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.j:(ILjava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L48aca0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48aca4.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L48acaa.  v0:= temp;
  #L48acac.  if v0 == 0 then goto L48acd4;
  #L48acb0.  v3:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.f` @type ^`boolean` @kind boolean;
  #L48acb4.  if v3 != 0 then goto L48accc;
  #L48acb8.  call `e`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @kind virtual;
  #L48acbe.  v2:= 1I;
  #L48acc0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.l` @type ^`boolean` := v2 @kind boolean;
  #L48acc4.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.drain:()V` @kind virtual;
  #L48acca.  goto L48acda;
  #L48accc.  call `i`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.i:(I)V` @kind virtual;
  #L48acd2.  goto L48acda;
  #L48acd4.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L48acda.  return @kind void;
}
procedure `void` `k`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v3 @kind this, `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.k:(ILjava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L48acec.  @monitorenter v3
  #L48acee.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.e` @type ^`java.lang.Object`[] @kind object;
  #L48acf2.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.h` @type ^`int`;
  #L48acf6.  v2:= v0[v4] @kind object;
  #L48acfa.  if v2 != 0 then goto L48ad06;
  #L48acfe.  v1:= v1 + 1;
  #L48ad02.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.h` @type ^`int` := v1;
  #L48ad06.  v0[v4]:= v5 @kind object;
  #L48ad0a.  v5:= length @variable v0;
  #L48ad0c.  if v5 != v1 then goto L48ad2e;
  #L48ad10.  v5:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L48ad14.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$b`[] @kind object;
  #L48ad18.  v1:= v1[v4] @kind object;
  #L48ad1c.  call temp:= `clone`(v0) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L48ad22.  v0:= temp @kind object;
  #L48ad24.  call temp:= `offer`(v5, v1, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L48ad2a.  v5:= 0I;
  #L48ad2c.  goto L48ad30;
  #L48ad2e.  v5:= 1I;
  #L48ad30.  @monitorexit v3
  #L48ad32.  if v5 == 0 then goto L48ad46;
  #L48ad36.  v5:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$b`[] @kind object;
  #L48ad3a.  v4:= v5[v4] @kind object;
  #L48ad3e.  call `b`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$b;.b:()V` @kind virtual;
  #L48ad44.  goto L48ad4c;
  #L48ad46.  call `drain`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.drain:()V` @kind virtual;
  #L48ad4c.  return @kind void;
  #L48ad4e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48ad50.  @monitorexit v3
  #L48ad52.  throw v4;
  catch `java.lang.Throwable` @[L48acee..L48ad32] goto L48ad4e;
  catch `java.lang.Throwable` @[L48ad50..L48ad52] goto L48ad4e;
}
procedure `void` `l`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v4 @kind this, `org.reactivestreams.Publisher`[] v5 @kind object, `int` v6 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.l:([Lorg/reactivestreams/Publisher;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48ada8.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$b`[] @kind object;
  #L48adac.  v1:= 0I;
  #L48adae.  if v1 >= v6 then goto L48add8;
  #L48adb2.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.l` @type ^`boolean` @kind boolean;
  #L48adb6.  if v2 != 0 then goto L48add8;
  #L48adba.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.j` @type ^`boolean` @kind boolean;
  #L48adbe.  if v2 == 0 then goto L48adc4;
  #L48adc2.  goto L48add8;
  #L48adc4.  v2:= v5[v1] @kind object;
  #L48adc8.  v3:= v0[v1] @kind object;
  #L48adcc.  call `subscribe`(v2, v3) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L48add2.  v1:= v1 + 1;
  #L48add6.  goto L48adae;
  #L48add8.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L48a918.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L48a91c.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L48a922.  v0:= temp @kind object;
  #L48a924.  if v0 != 0 then goto L48a92c;
  #L48a928.  v0:= 0I;
  #L48a92a.  return v0 @kind object;
  #L48a92c.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L48a930.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L48a936.  v1:= temp @kind object;
  #L48a938.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L48a93c.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L48a940.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L48a946.  v1:= temp @kind object;
  #L48a948.  v2:= "The combiner returned a null value" @kind object;
  #L48a94c.  call temp:= `requireNonNull`(v1, v2) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48a952.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$b`) v0 @kind object;
  #L48a956.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$b;.b:()V` @kind virtual;
  #L48a95c.  return v1 @kind object;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48ad78.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L48ad7e.  v0:= temp;
  #L48ad80.  if v0 == 0 then goto L48ad94;
  #L48ad84.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L48ad88.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L48ad8e.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.drain:()V` @kind virtual;
  #L48ad94.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48a8ec.  v0:= v3 ^& 4;
  #L48a8f0.  v1:= 0I;
  #L48a8f2.  if v0 == 0 then goto L48a8f8;
  #L48a8f6.  return v1;
  #L48a8f8.  v3:= v3 ^& 2;
  #L48a8fc.  if v3 == 0 then goto L48a902;
  #L48a900.  v1:= 1I;
  #L48a902.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.g` @type ^`boolean` := v1 @kind boolean;
  #L48a906.  return v3;
}
