record `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.g` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.h` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.i` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.k` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.l` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `long` v5 , `java.util.concurrent.TimeUnit` v7 @kind object, `io.reactivex.rxjava3.core.Scheduler` v8 @kind object, `int` v9 , `boolean` v10 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4a2dec.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4a2df2.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4a2df6.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a2dfc.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L4a2e00.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4a2e04.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.b` @type ^`long` := v3 @kind wide;
  #L4a2e08.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.c` @type ^`long` := v5 @kind wide;
  #L4a2e0c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.d` @type ^`java.util.concurrent.TimeUnit` := v7 @kind object;
  #L4a2e10.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.e` @type ^`io.reactivex.rxjava3.core.Scheduler` := v8 @kind object;
  #L4a2e14.  v2:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4a2e18.  call `<init>`(v2, v9) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4a2e1e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L4a2e22.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.g` @type ^`boolean` := v10 @kind boolean;
  #L4a2e26.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a` v2 @kind this, `boolean` v3 , `org.reactivestreams.Subscriber` v4 @kind object, `boolean` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.a:(ZLorg/reactivestreams/Subscriber;Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4a2d7c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.j` @type ^`boolean` @kind boolean;
  #L4a2d80.  v1:= 1I;
  #L4a2d82.  if v0 == 0 then goto L4a2d92;
  #L4a2d86.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4a2d8a.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4a2d90.  return v1;
  #L4a2d92.  if v5 == 0 then goto L4a2db2;
  #L4a2d96.  if v3 == 0 then goto L4a2dd8;
  #L4a2d9a.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.l` @type ^`java.lang.Throwable` @kind object;
  #L4a2d9e.  if v3 == 0 then goto L4a2daa;
  #L4a2da2.  call `onError`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a2da8.  goto L4a2db0;
  #L4a2daa.  call `onComplete`(v4) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a2db0.  return v1;
  #L4a2db2.  v5:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.l` @type ^`java.lang.Throwable` @kind object;
  #L4a2db6.  if v5 == 0 then goto L4a2dcc;
  #L4a2dba.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4a2dbe.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4a2dc4.  call `onError`(v4, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a2dca.  return v1;
  #L4a2dcc.  if v3 == 0 then goto L4a2dd8;
  #L4a2dd0.  call `onComplete`(v4) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a2dd6.  return v1;
  #L4a2dd8.  v3:= 0I;
  #L4a2dda.  return v3;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a` v13 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L4a2e78.  call temp:= `getAndIncrement`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a2e7e.  v0:= temp;
  #L4a2e80.  if v0 == 0 then goto L4a2e86;
  #L4a2e84.  return @kind void;
  #L4a2e86.  v0:= v13.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a2e8a.  v1:= v13.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4a2e8e.  v2:= v13.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.g` @type ^`boolean` @kind boolean;
  #L4a2e92.  v3:= 1I;
  #L4a2e94.  v4:= 1I;
  #L4a2e96.  v5:= v13.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.k` @type ^`boolean` @kind boolean;
  #L4a2e9a.  if v5 == 0 then goto L4a2f1e;
  #L4a2e9e.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4a2ea4.  v5:= temp;
  #L4a2ea6.  call temp:= `a`(v13, v5, v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.a:(ZLorg/reactivestreams/Subscriber;Z)Z` @kind virtual;
  #L4a2eac.  v5:= temp;
  #L4a2eae.  if v5 == 0 then goto L4a2eb4;
  #L4a2eb2.  return @kind void;
  #L4a2eb4.  v5:= v13.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a2eb8.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a2ebe.  v5:= temp @kind wide;
  #L4a2ec0.  v7:= 0L;
  #L4a2ec4.  v9:= v7 @kind wide;
  #L4a2ec6.  call temp:= `peek`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.peek:()Ljava/lang/Object;` @kind virtual;
  #L4a2ecc.  v11:= temp @kind object;
  #L4a2ece.  if v11 != 0 then goto L4a2ed6;
  #L4a2ed2.  v11:= 1I;
  #L4a2ed4.  goto L4a2ed8;
  #L4a2ed6.  v11:= 0I;
  #L4a2ed8.  call temp:= `a`(v13, v11, v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.a:(ZLorg/reactivestreams/Subscriber;Z)Z` @kind virtual;
  #L4a2ede.  v11:= temp;
  #L4a2ee0.  if v11 == 0 then goto L4a2ee6;
  #L4a2ee4.  return @kind void;
  #L4a2ee6.  v11:= lcmp(v5, v9);
  #L4a2eea.  if v11 != 0 then goto L4a2f02;
  #L4a2eee.  v5:= lcmp(v9, v7);
  #L4a2ef2.  if v5 == 0 then goto L4a2f1e;
  #L4a2ef6.  v5:= v13.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a2efa.  call temp:= `produced`(v5, v9) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4a2f00.  goto L4a2f1e;
  #L4a2f02.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4a2f08.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4a2f0e.  v11:= temp @kind object;
  #L4a2f10.  call `onNext`(v0, v11) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a2f16.  v11:= 1L;
  #L4a2f1a.  v9:= v9 + v11 @kind long;
  #L4a2f1c.  goto L4a2ec6;
  #L4a2f1e.  v4:= -v4 @kind int;
  #L4a2f20.  call temp:= `addAndGet`(v13, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4a2f26.  v4:= temp;
  #L4a2f28.  if v4 != 0 then goto L4a2e96;
  #L4a2f2c.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a` v11 @kind this, `long` v12 , `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` v14 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.c:(JLio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4a3068.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.c` @type ^`long` @kind wide;
  #L4a306c.  v2:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.b` @type ^`long` @kind wide;
  #L4a3070.  v4:= 1I;
  #L4a3072.  v5:= 9223372036854775807L;
  #L4a307c.  v7:= lcmp(v2, v5);
  #L4a3080.  if v7 != 0 then goto L4a3088;
  #L4a3084.  v5:= 1I;
  #L4a3086.  goto L4a308a;
  #L4a3088.  v5:= 0I;
  #L4a308a.  call temp:= `isEmpty`(v14) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4a3090.  v6:= temp;
  #L4a3092.  if v6 != 0 then goto L4a30dc;
  #L4a3096.  call temp:= `peek`(v14) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.peek:()Ljava/lang/Object;` @kind virtual;
  #L4a309c.  v6:= temp @kind object;
  #L4a309e.  v6:= (`java.lang.Long`) v6 @kind object;
  #L4a30a2.  call temp:= `longValue`(v6) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L4a30a8.  v6:= temp @kind wide;
  #L4a30aa.  v8:= v12 - v0 @kind long;
  #L4a30ae.  v10:= lcmp(v6, v8);
  #L4a30b2.  if v10 < 0 then goto L4a30ce;
  #L4a30b6.  if v5 != 0 then goto L4a30dc;
  #L4a30ba.  call temp:= `size`(v14) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.size:()I` @kind virtual;
  #L4a30c0.  v6:= temp;
  #L4a30c2.  v6:= v6 ^> v4 @kind int;
  #L4a30c4.  v6:= (`long`) v6 @kind i2l;
  #L4a30c6.  v8:= lcmp(v6, v2);
  #L4a30ca.  if v8 <= 0 then goto L4a30dc;
  #L4a30ce.  call temp:= `poll`(v14) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4a30d4.  call temp:= `poll`(v14) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4a30da.  goto L4a308a;
  #L4a30dc.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a2e38.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.j` @type ^`boolean` @kind boolean;
  #L4a2e3c.  if v0 != 0 then goto L4a2e66;
  #L4a2e40.  v0:= 1I;
  #L4a2e42.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.j` @type ^`boolean` := v0 @kind boolean;
  #L4a2e46.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a2e4a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a2e50.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a2e56.  v0:= temp;
  #L4a2e58.  if v0 != 0 then goto L4a2e66;
  #L4a2e5c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4a2e60.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4a2e66.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a2f40.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.e` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4a2f44.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4a2f48.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4a2f4e.  v0:= temp @kind wide;
  #L4a2f50.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4a2f54.  call `c`(v3, v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.c:(JLio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4a2f5a.  v0:= 1I;
  #L4a2f5c.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.k` @type ^`boolean` := v0 @kind boolean;
  #L4a2f60.  call `b`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.b:()V` @kind virtual;
  #L4a2f66.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a2f78.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.g` @type ^`boolean` @kind boolean;
  #L4a2f7c.  if v0 == 0 then goto L4a2f9a;
  #L4a2f80.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.e` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4a2f84.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4a2f88.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4a2f8e.  v0:= temp @kind wide;
  #L4a2f90.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4a2f94.  call `c`(v3, v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.c:(JLio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4a2f9a.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.l` @type ^`java.lang.Throwable` := v4 @kind object;
  #L4a2f9e.  v4:= 1I;
  #L4a2fa0.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.k` @type ^`boolean` := v4 @kind boolean;
  #L4a2fa4.  call `b`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.b:()V` @kind virtual;
  #L4a2faa.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a2fbc.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4a2fc0.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.e` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4a2fc4.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4a2fc8.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4a2fce.  v1:= temp @kind wide;
  #L4a2fd0.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4a2fd6.  v3:= temp @kind object;
  #L4a2fd8.  call temp:= `offer`(v0, v3, v5) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4a2fde.  call `c`(v4, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.c:(JLio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4a2fe4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a2ff8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a2ffc.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4a3002.  v0:= temp;
  #L4a3004.  if v0 == 0 then goto L4a3026;
  #L4a3008.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.h` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4a300c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a3010.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4a3016.  v0:= 9223372036854775807L;
  #L4a3020.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a3026.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a3038.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4a303e.  v0:= temp;
  #L4a3040.  if v0 == 0 then goto L4a3054;
  #L4a3044.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a3048.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4a304e.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.b:()V` @kind virtual;
  #L4a3054.  return @kind void;
}
