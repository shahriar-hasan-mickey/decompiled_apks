record `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.ConcurrentLinkedQueue` @kind class, `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$d` @kind interface {
  `int` `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$a.a` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4ae048.  call `<init>`(v1) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.<init>:()V` @kind direct;
  #L4ae04e.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4ae052.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4ae058.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L4ae05c.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$a;.b:()V` @AccessFlag PUBLIC {
    temp;

  #L4ae070.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4ae076.  return @kind void;
}
procedure `int` `c`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$a;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4adfe4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$a.a` @type ^`int`;
  #L4adfe8.  return v0;
}
procedure `int` `d`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$a;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4adffc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4ae000.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4ae006.  v0:= temp;
  #L4ae008.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$a;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4adfa4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4adfa8.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4adfae.  call temp:= `offer`(v1, v2) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind super;
  #L4adfb4.  v2:= temp;
  #L4adfb6.  return v2;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$a;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L4adfc8.  v1:= new `java.lang.UnsupportedOperationException`;
  #L4adfcc.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L4adfd2.  throw v1;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ae01c.  call temp:= `poll`(v2) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.poll:()Ljava/lang/Object;` @kind super;
  #L4ae022.  v0:= temp @kind object;
  #L4ae024.  if v0 == 0 then goto L4ae034;
  #L4ae028.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$a.a` @type ^`int`;
  #L4ae02c.  v1:= v1 + 1;
  #L4ae030.  v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$a.a` @type ^`int` := v1;
  #L4ae034.  return v0 @kind object;
}
