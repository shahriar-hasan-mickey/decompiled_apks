record `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object, `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a92f0.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4a92f6.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4a92fa.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a930c.  v0:= 0I;
  #L4a930e.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4a9314.  v0:= temp @kind object;
  #L4a9316.  v0:= (`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache`) v0 @kind object;
  #L4a931a.  if v0 == 0 then goto L4a9324;
  #L4a931e.  call `b`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache;.b:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache$a;)V` @kind virtual;
  #L4a9324.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a92cc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a92d2.  v0:= temp @kind object;
  #L4a92d4.  if v0 != 0 then goto L4a92dc;
  #L4a92d8.  v0:= 1I;
  #L4a92da.  goto L4a92de;
  #L4a92dc.  v0:= 0I;
  #L4a92de.  return v0;
}
