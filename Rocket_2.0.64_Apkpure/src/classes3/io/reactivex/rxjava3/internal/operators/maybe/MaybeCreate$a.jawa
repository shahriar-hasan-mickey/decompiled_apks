record `io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.MaybeEmitter` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCreate$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4aa2e4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4aa2ea.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4aa2ee.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCreate$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4aa300.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4aa306.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCreate$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aa200.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4aa206.  v0:= temp @kind object;
  #L4aa208.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4aa20c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4aa212.  v0:= temp;
  #L4aa214.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCreate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4aa318.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4aa31e.  v0:= temp @kind object;
  #L4aa320.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4aa324.  if v0 == v1 then goto L4aa35c;
  #L4aa328.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4aa32e.  v0:= temp @kind object;
  #L4aa330.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4aa334.  if v0 == v1 then goto L4aa35c;
  #L4aa338.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4aa33c.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4aa342.  if v0 == 0 then goto L4aa35c;
  #L4aa346.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4aa34c.  goto L4aa35c;
  #L4aa34e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4aa350.  if v0 == 0 then goto L4aa35a;
  #L4aa354.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4aa35a.  throw v1;
  #L4aa35c.  return @kind void;
  catch `java.lang.Throwable` @[L4aa338..L4aa342] goto L4aa34e;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCreate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aa37c.  call temp:= `tryOnError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCreate$a;.tryOnError:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4aa382.  v0:= temp;
  #L4aa384.  if v0 != 0 then goto L4aa38e;
  #L4aa388.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4aa38e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCreate$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4aa3a0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4aa3a6.  v0:= temp @kind object;
  #L4aa3a8.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4aa3ac.  if v0 == v1 then goto L4aa400;
  #L4aa3b0.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4aa3b6.  v0:= temp @kind object;
  #L4aa3b8.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4aa3bc.  if v0 == v1 then goto L4aa400;
  #L4aa3c0.  if v3 != 0 then goto L4aa3dc;
  #L4aa3c4.  v3:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4aa3c8.  v1:= "onSuccess called with a null value." @kind object;
  #L4aa3cc.  call temp:= `createNullPointerException`(v1) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;` @kind static;
  #L4aa3d2.  v1:= temp @kind object;
  #L4aa3d4.  call `onError`(v3, v1) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4aa3da.  goto L4aa3e6;
  #L4aa3dc.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4aa3e0.  call `onSuccess`(v1, v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4aa3e6.  if v0 == 0 then goto L4aa400;
  #L4aa3ea.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4aa3f0.  goto L4aa400;
  #L4aa3f2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4aa3f4.  if v0 == 0 then goto L4aa3fe;
  #L4aa3f8.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4aa3fe.  throw v3;
  #L4aa400.  return @kind void;
  catch `java.lang.Throwable` @[L4aa3c4..L4aa3e6] goto L4aa3f2;
}
procedure `void` `setCancellable`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a` v1 @kind this, `io.reactivex.rxjava3.functions.Cancellable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCreate$a;.setCancellable:(Lio/reactivex/rxjava3/functions/Cancellable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aa420.  v0:= new `io.reactivex.rxjava3.internal.disposables.CancellableDisposable`;
  #L4aa424.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/CancellableDisposable;.<init>:(Lio/reactivex/rxjava3/functions/Cancellable;)V` @kind direct;
  #L4aa42a.  call `setDisposable`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCreate$a;.setDisposable:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L4aa430.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCreate$a;.setDisposable:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4aa444.  call temp:= `set`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4aa44a.  return @kind void;
}
procedure `java.lang.String` `toString`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCreate$a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4aa2a0.  v0:= 2I;
  #L4aa2a2.  v0:= new `java.lang.Object`[v0];
  #L4aa2a6.  v1:= constclass @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a` @kind object;
  #L4aa2aa.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L4aa2b0.  v1:= temp @kind object;
  #L4aa2b2.  v2:= 0I;
  #L4aa2b4.  v0[v2]:= v1 @kind object;
  #L4aa2b8.  call temp:= `toString`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.toString:()Ljava/lang/String;` @kind super;
  #L4aa2be.  v1:= temp @kind object;
  #L4aa2c0.  v2:= 1I;
  #L4aa2c2.  v0[v2]:= v1 @kind object;
  #L4aa2c6.  v1:= "%s{%s}" @kind object;
  #L4aa2ca.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4aa2d0.  v0:= temp @kind object;
  #L4aa2d2.  return v0 @kind object;
}
procedure `boolean` `tryOnError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCreate$a;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4aa228.  if v3 != 0 then goto L4aa238;
  #L4aa22c.  v3:= "onError called with a null Throwable." @kind object;
  #L4aa230.  call temp:= `createNullPointerException`(v3) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;` @kind static;
  #L4aa236.  v3:= temp @kind object;
  #L4aa238.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4aa23e.  v0:= temp @kind object;
  #L4aa240.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4aa244.  if v0 == v1 then goto L4aa27e;
  #L4aa248.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4aa24e.  v0:= temp @kind object;
  #L4aa250.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4aa254.  if v0 == v1 then goto L4aa27e;
  #L4aa258.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4aa25c.  call `onError`(v1, v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4aa262.  if v0 == 0 then goto L4aa26c;
  #L4aa266.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4aa26c.  v3:= 1I;
  #L4aa26e.  return v3;
  #L4aa270.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4aa272.  if v0 == 0 then goto L4aa27c;
  #L4aa276.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4aa27c.  throw v3;
  #L4aa27e.  v3:= 0I;
  #L4aa280.  return v3;
  catch `java.lang.Throwable` @[L4aa258..L4aa262] goto L4aa270;
}
