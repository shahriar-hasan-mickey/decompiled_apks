record `io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a` @kind class @AccessFlag ABSTRACT extends `io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription` @kind class {
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.b` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.c` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$a;.<init>:(II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49c43c.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/BasicQueueSubscription;.<init>:()V` @kind direct;
  #L49c442.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.b` @type ^`int` := v1;
  #L49c446.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.a` @type ^`int` := v2;
  #L49c44a.  return @kind void;
}
procedure `void` `a`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$a;.a:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$a;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49c45c.  v0:= 1I;
  #L49c45e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.c` @type ^`boolean` := v0 @kind boolean;
  #L49c462.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$a;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49c474.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.a` @type ^`int`;
  #L49c478.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.b` @type ^`int` := v0;
  #L49c47c.  return @kind void;
}
procedure `java.lang.Integer` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$a;.e:()Ljava/lang/Integer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L49c3ec.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.b` @type ^`int`;
  #L49c3f0.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.a` @type ^`int`;
  #L49c3f4.  if v0 != v1 then goto L49c3fc;
  #L49c3f8.  v0:= 0I;
  #L49c3fa.  return v0 @kind object;
  #L49c3fc.  v1:= v0 + 1;
  #L49c400.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.b` @type ^`int` := v1;
  #L49c404.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L49c40a.  v0:= temp @kind object;
  #L49c40c.  return v0 @kind object;
}
procedure `void` `f`(`long` v0 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$a;.f:(J)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$a;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L49c3b0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.b` @type ^`int`;
  #L49c3b4.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.a` @type ^`int`;
  #L49c3b8.  if v0 != v1 then goto L49c3c0;
  #L49c3bc.  v0:= 1I;
  #L49c3be.  goto L49c3c2;
  #L49c3c0.  v0:= 0I;
  #L49c3c2.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L49c420.  call temp:= `e`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$a;.e:()Ljava/lang/Integer;` @kind virtual;
  #L49c426.  v0:= temp @kind object;
  #L49c428.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a` v5 @kind this, `long` v6 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$a;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L49c490.  call temp:= `validate`(v6) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L49c496.  v0:= temp;
  #L49c498.  if v0 == 0 then goto L49c4d0;
  #L49c49c.  call temp:= `add`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L49c4a2.  v0:= temp @kind wide;
  #L49c4a4.  v2:= 0L;
  #L49c4a8.  v4:= lcmp(v0, v2);
  #L49c4ac.  if v4 != 0 then goto L49c4d0;
  #L49c4b0.  v0:= 9223372036854775807L;
  #L49c4ba.  v2:= lcmp(v6, v0);
  #L49c4be.  if v2 != 0 then goto L49c4ca;
  #L49c4c2.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$a;.a:()V` @kind virtual;
  #L49c4c8.  goto L49c4d0;
  #L49c4ca.  call `f`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$a;.f:(J)V` @kind virtual;
  #L49c4d0.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$a;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;

  #L49c3d4.  v1:= v1 ^& 1;
  #L49c3d8.  return v1;
}
