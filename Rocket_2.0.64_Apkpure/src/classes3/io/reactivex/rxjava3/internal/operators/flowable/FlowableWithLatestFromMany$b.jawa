record `io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$c`[] `io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.g` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4a81e0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4a81e6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4a81ea.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.b` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4a81ee.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$c`[v4];
  #L4a81f2.  v3:= 0I;
  #L4a81f4.  if v3 >= v4 then goto L4a820c;
  #L4a81f8.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$c`;
  #L4a81fc.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;I)V` @kind direct;
  #L4a8202.  v2[v3]:= v0 @kind object;
  #L4a8206.  v3:= v3 + 1;
  #L4a820a.  goto L4a81f4;
  #L4a820c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$c`[] := v2 @kind object;
  #L4a8210.  v2:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L4a8214.  call `<init>`(v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L4a821a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v2 @kind object;
  #L4a821e.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4a8222.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4a8228.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4a822c.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4a8230.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a8236.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L4a823a.  v2:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4a823e.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4a8244.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v2 @kind object;
  #L4a8248.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.a:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4a8294.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$c`[] @kind object;
  #L4a8298.  v1:= 0I;
  #L4a829a.  v2:= length @variable v0;
  #L4a829c.  if v1 >= v2 then goto L4a82b4;
  #L4a82a0.  if v1 == v4 then goto L4a82ae;
  #L4a82a4.  v2:= v0[v1] @kind object;
  #L4a82a8.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$c;.a:()V` @kind virtual;
  #L4a82ae.  v1:= v1 + 1;
  #L4a82b2.  goto L4a829a;
  #L4a82b4.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b` v0 @kind this, `int` v1 , `boolean` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.b:(IZ)V` @AccessFlag  {
    temp;

  #L4a82c8.  if v2 != 0 then goto L4a82f0;
  #L4a82cc.  v2:= 1I;
  #L4a82ce.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` := v2 @kind boolean;
  #L4a82d2.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a82d6.  call temp:= `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4a82dc.  call `a`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L4a82e2.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a82e6.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a82ea.  call `onComplete`(v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4a82f0.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b` v1 @kind this, `int` v2 , `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.c:(ILjava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4a8304.  v0:= 1I;
  #L4a8306.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` := v0 @kind boolean;
  #L4a830a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a830e.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4a8314.  call `a`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L4a831a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a831e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a8322.  call `onError`(v2, v3, v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4a8328.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a825c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a8260.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4a8266.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$c`[] @kind object;
  #L4a826a.  v1:= length @variable v0;
  #L4a826c.  v2:= 0I;
  #L4a826e.  if v2 >= v1 then goto L4a8282;
  #L4a8272.  v3:= v0[v2] @kind object;
  #L4a8276.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$c;.a:()V` @kind virtual;
  #L4a827c.  v2:= v2 + 1;
  #L4a8280.  goto L4a826e;
  #L4a8282.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b` v1 @kind this, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.d:(ILjava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;

  #L4a833c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L4a8340.  call `set`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L4a8346.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b` v5 @kind this, `org.reactivestreams.Publisher`[] v6 @kind object, `int` v7 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.e:([Lorg/reactivestreams/Publisher;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a8450.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$c`[] @kind object;
  #L4a8454.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a8458.  v2:= 0I;
  #L4a845a.  if v2 >= v7 then goto L4a8484;
  #L4a845e.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a8464.  v3:= temp @kind object;
  #L4a8466.  v4:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4a846a.  if v3 != v4 then goto L4a8470;
  #L4a846e.  return @kind void;
  #L4a8470.  v3:= v6[v2] @kind object;
  #L4a8474.  v4:= v0[v2] @kind object;
  #L4a8478.  call `subscribe`(v3, v4) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4a847e.  v2:= v2 + 1;
  #L4a8482.  goto L4a845a;
  #L4a8484.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a8358.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` @kind boolean;
  #L4a835c.  if v0 != 0 then goto L4a837c;
  #L4a8360.  v0:= 1I;
  #L4a8362.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` := v0 @kind boolean;
  #L4a8366.  v0:= -1I;
  #L4a8368.  call `a`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L4a836e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a8372.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a8376.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4a837c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a8390.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` @kind boolean;
  #L4a8394.  if v0 == 0 then goto L4a83a0;
  #L4a8398.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4a839e.  return @kind void;
  #L4a83a0.  v0:= 1I;
  #L4a83a2.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` := v0 @kind boolean;
  #L4a83a6.  v0:= -1I;
  #L4a83a8.  call `a`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L4a83ae.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a83b2.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a83b6.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4a83bc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a83d0.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L4a83d6.  v3:= temp;
  #L4a83d8.  if v3 != 0 then goto L4a83fe;
  #L4a83dc.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` @kind boolean;
  #L4a83e0.  if v3 != 0 then goto L4a83fe;
  #L4a83e4.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a83e8.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a83ee.  v3:= temp @kind object;
  #L4a83f0.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L4a83f4.  v0:= 1L;
  #L4a83f8.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a83fe.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a8410.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a8414.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a8418.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4a841e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a8430.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a8434.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a8438.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L4a843e.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a8144.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` @kind boolean;
  #L4a8148.  v1:= 0I;
  #L4a814a.  if v0 == 0 then goto L4a8150;
  #L4a814e.  return v1;
  #L4a8150.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L4a8154.  call temp:= `length`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L4a815a.  v2:= temp;
  #L4a815c.  v3:= v2 + 1;
  #L4a8160.  v3:= new `java.lang.Object`[v3];
  #L4a8164.  v3[v1]:= v6 @kind object;
  #L4a8168.  v6:= 0I;
  #L4a816a.  if v6 >= v2 then goto L4a8186;
  #L4a816e.  call temp:= `get`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4a8174.  v4:= temp @kind object;
  #L4a8176.  if v4 != 0 then goto L4a817c;
  #L4a817a.  return v1;
  #L4a817c.  v6:= v6 + 1;
  #L4a8180.  v3[v6]:= v4 @kind object;
  #L4a8184.  goto L4a816a;
  #L4a8186.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4a818a.  call temp:= `apply`(v6, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4a8190.  v6:= temp @kind object;
  #L4a8192.  v0:= "The combiner returned a null value" @kind object;
  #L4a8196.  call temp:= `requireNonNull`(v6, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4a819c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a81a0.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a81a4.  call temp:= `onNext`(v0, v6, v5, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onNext:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)Z` @kind static;
  #L4a81aa.  v6:= 1I;
  #L4a81ac.  return v6;
  #L4a81ae.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a81b0.  call `throwIfFatal`(v6) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4a81b6.  call `cancel`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.cancel:()V` @kind virtual;
  #L4a81bc.  call `onError`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a81c2.  return v1;
  catch `java.lang.Throwable` @[L4a8186..L4a819c] goto L4a81ae;
}
