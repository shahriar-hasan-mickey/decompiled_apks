record `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Observable` @kind class {
  `io.reactivex.rxjava3.core.Observable` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe` v0 @kind this, `io.reactivex.rxjava3.core.Observable` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe;.<init>:(Lio/reactivex/rxjava3/core/Observable;Lio/reactivex/rxjava3/functions/Function;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4b4b10.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Observable;.<init>:()V` @kind direct;
  #L4b4b16.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.a` @type ^`io.reactivex.rxjava3.core.Observable` := v1 @kind object;
  #L4b4b1a.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4b4b1e.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.c` @type ^`boolean` := v3 @kind boolean;
  #L4b4b22.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe` v4 @kind this, `io.reactivex.rxjava3.core.Observer` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe;.subscribeActual:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b4b34.  v0:= v4.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.a` @type ^`io.reactivex.rxjava3.core.Observable` @kind object;
  #L4b4b38.  v1:= v4.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4b4b3c.  call temp:= `b`(v0, v1, v5) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/a;.b:(Ljava/lang/Object;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/core/Observer;)Z` @kind static;
  #L4b4b42.  v0:= temp;
  #L4b4b44.  if v0 != 0 then goto L4b4b64;
  #L4b4b48.  v0:= v4.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.a` @type ^`io.reactivex.rxjava3.core.Observable` @kind object;
  #L4b4b4c.  v1:= new `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a`;
  #L4b4b50.  v2:= v4.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4b4b54.  v3:= v4.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.c` @type ^`boolean` @kind boolean;
  #L4b4b58.  call `<init>`(v1, v5, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;Z)V` @kind direct;
  #L4b4b5e.  call `subscribe`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Observable;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4b4b64.  return @kind void;
}
