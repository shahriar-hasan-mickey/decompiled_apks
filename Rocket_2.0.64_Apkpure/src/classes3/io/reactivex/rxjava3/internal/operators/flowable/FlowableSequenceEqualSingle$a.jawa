record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$b` @kind interface {
  `io.reactivex.rxjava3.core.SingleObserver` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiPredicate` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.f` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.g` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a` v0 @kind this, `io.reactivex.rxjava3.core.SingleObserver` v1 @kind object, `int` v2 , `io.reactivex.rxjava3.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;ILio/reactivex/rxjava3/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a08e0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4a08e6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` := v1 @kind object;
  #L4a08ea.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` := v3 @kind object;
  #L4a08ee.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c`;
  #L4a08f2.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$b;I)V` @kind direct;
  #L4a08f8.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` := v1 @kind object;
  #L4a08fc.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c`;
  #L4a0900.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$b;I)V` @kind direct;
  #L4a0906.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` := v1 @kind object;
  #L4a090a.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4a090e.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4a0914.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4a0918.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a0c14.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a0c18.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4a0c1e.  v2:= temp;
  #L4a0c20.  if v2 == 0 then goto L4a0c2a;
  #L4a0c24.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.drain:()V` @kind virtual;
  #L4a0c2a.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4a092c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4a0930.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.a:()V` @kind virtual;
  #L4a0936.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4a093a.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L4a0940.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4a0944.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.a:()V` @kind virtual;
  #L4a094a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4a094e.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L4a0954.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.c:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)V` @AccessFlag  {
    temp;
    v0;

  #L4a0c3c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4a0c40.  call `subscribe`(v2, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4a0c46.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4a0c4a.  call `subscribe`(v3, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4a0c50.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a0968.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4a096c.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.a:()V` @kind virtual;
  #L4a0972.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4a0976.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.a:()V` @kind virtual;
  #L4a097c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a0980.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4a0986.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a098c.  v0:= temp;
  #L4a098e.  if v0 != 0 then goto L4a09a6;
  #L4a0992.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4a0996.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L4a099c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4a09a0.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L4a09a6.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a` v10 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.drain:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4a09b8.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a09be.  v0:= temp;
  #L4a09c0.  if v0 == 0 then goto L4a09c6;
  #L4a09c4.  return @kind void;
  #L4a09c6.  v0:= 1I;
  #L4a09c8.  v1:= 1I;
  #L4a09ca.  v2:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4a09ce.  v2:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4a09d2.  v3:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4a09d6.  v3:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4a09da.  if v2 == 0 then goto L4a0b88;
  #L4a09de.  if v3 == 0 then goto L4a0b88;
  #L4a09e2.  call temp:= `isDisposed`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.isDisposed:()Z` @kind virtual;
  #L4a09e8.  v4:= temp;
  #L4a09ea.  if v4 == 0 then goto L4a0a04;
  #L4a09ee.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4a09f2.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L4a09f8.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4a09fc.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L4a0a02.  return @kind void;
  #L4a0a04.  v4:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a0a08.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a0a0e.  v4:= temp @kind object;
  #L4a0a10.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L4a0a14.  if v4 == 0 then goto L4a0a2e;
  #L4a0a18.  call `b`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L4a0a1e.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a0a22.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4a0a26.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind virtual;
  #L4a0a2c.  return @kind void;
  #L4a0a2e.  v4:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4a0a32.  v4:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.f` @type ^`boolean` @kind boolean;
  #L4a0a36.  v5:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.f` @type ^`java.lang.Object` @kind object;
  #L4a0a3a.  if v5 != 0 then goto L4a0a74;
  #L4a0a3e.  call temp:= `poll`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4a0a44.  v5:= temp @kind object;
  #L4a0a46.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.f` @type ^`java.lang.Object` := v5 @kind object;
  #L4a0a4a.  goto L4a0a74;
  #L4a0a4c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a0a4e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4a0a54.  call `b`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L4a0a5a.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a0a5e.  call temp:= `tryAddThrowableOrReport`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4a0a64.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a0a68.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4a0a6c.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind virtual;
  #L4a0a72.  return @kind void;
  #L4a0a74.  v6:= 0I;
  #L4a0a76.  if v5 != 0 then goto L4a0a7e;
  #L4a0a7a.  v7:= 1I;
  #L4a0a7c.  goto L4a0a80;
  #L4a0a7e.  v7:= 0I;
  #L4a0a80.  v8:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4a0a84.  v8:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.f` @type ^`boolean` @kind boolean;
  #L4a0a88.  v9:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.g` @type ^`java.lang.Object` @kind object;
  #L4a0a8c.  if v9 != 0 then goto L4a0ac6;
  #L4a0a90.  call temp:= `poll`(v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4a0a96.  v9:= temp @kind object;
  #L4a0a98.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.g` @type ^`java.lang.Object` := v9 @kind object;
  #L4a0a9c.  goto L4a0ac6;
  #L4a0a9e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a0aa0.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4a0aa6.  call `b`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L4a0aac.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a0ab0.  call temp:= `tryAddThrowableOrReport`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4a0ab6.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a0aba.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4a0abe.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind virtual;
  #L4a0ac4.  return @kind void;
  #L4a0ac6.  if v9 != 0 then goto L4a0acc;
  #L4a0aca.  v6:= 1I;
  #L4a0acc.  if v4 == 0 then goto L4a0aec;
  #L4a0ad0.  if v8 == 0 then goto L4a0aec;
  #L4a0ad4.  if v7 == 0 then goto L4a0aec;
  #L4a0ad8.  if v6 == 0 then goto L4a0aec;
  #L4a0adc.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4a0ae0.  v1:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L4a0ae4.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4a0aea.  return @kind void;
  #L4a0aec.  if v4 == 0 then goto L4a0b0e;
  #L4a0af0.  if v8 == 0 then goto L4a0b0e;
  #L4a0af4.  if v7 == v6 then goto L4a0b0e;
  #L4a0af8.  call `b`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L4a0afe.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4a0b02.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L4a0b06.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4a0b0c.  return @kind void;
  #L4a0b0e.  if v7 != 0 then goto L4a0bd4;
  #L4a0b12.  if v6 == 0 then goto L4a0b18;
  #L4a0b16.  goto L4a0bd4;
  #L4a0b18.  v4:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` @kind object;
  #L4a0b1c.  call temp:= `test`(v4, v5, v9) @signature `Lio/reactivex/rxjava3/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L4a0b22.  v4:= temp;
  #L4a0b24.  if v4 != 0 then goto L4a0b3e;
  #L4a0b28.  call `b`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L4a0b2e.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4a0b32.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L4a0b36.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4a0b3c.  return @kind void;
  #L4a0b3e.  v4:= 0I;
  #L4a0b40.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.f` @type ^`java.lang.Object` := v4 @kind object;
  #L4a0b44.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.g` @type ^`java.lang.Object` := v4 @kind object;
  #L4a0b48.  v4:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4a0b4c.  call `c`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.c:()V` @kind virtual;
  #L4a0b52.  v4:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4a0b56.  call `c`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.c:()V` @kind virtual;
  #L4a0b5c.  goto L4a09e2;
  #L4a0b60.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a0b62.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4a0b68.  call `b`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L4a0b6e.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a0b72.  call temp:= `tryAddThrowableOrReport`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4a0b78.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a0b7c.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4a0b80.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind virtual;
  #L4a0b86.  return @kind void;
  #L4a0b88.  call temp:= `isDisposed`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.isDisposed:()Z` @kind virtual;
  #L4a0b8e.  v2:= temp;
  #L4a0b90.  if v2 == 0 then goto L4a0baa;
  #L4a0b94.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4a0b98.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L4a0b9e.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4a0ba2.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L4a0ba8.  return @kind void;
  #L4a0baa.  v2:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a0bae.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a0bb4.  v2:= temp @kind object;
  #L4a0bb6.  v2:= (`java.lang.Throwable`) v2 @kind object;
  #L4a0bba.  if v2 == 0 then goto L4a0bd4;
  #L4a0bbe.  call `b`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L4a0bc4.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a0bc8.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4a0bcc.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind virtual;
  #L4a0bd2.  return @kind void;
  #L4a0bd4.  v1:= -v1 @kind int;
  #L4a0bd6.  call temp:= `addAndGet`(v10, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4a0bdc.  v1:= temp;
  #L4a0bde.  if v1 != 0 then goto L4a09ca;
  #L4a0be2.  return @kind void;
  catch `java.lang.Throwable` @[L4a0a3e..L4a0a46] goto L4a0a4c;
  catch `java.lang.Throwable` @[L4a0a90..L4a0a98] goto L4a0a9e;
  catch `java.lang.Throwable` @[L4a0b18..L4a0b24] goto L4a0b60;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a08b4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4a08b8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a08be.  v0:= temp @kind object;
  #L4a08c0.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4a08c4.  if v0 != v1 then goto L4a08cc;
  #L4a08c8.  v0:= 1I;
  #L4a08ca.  goto L4a08ce;
  #L4a08cc.  v0:= 0I;
  #L4a08ce.  return v0;
}
