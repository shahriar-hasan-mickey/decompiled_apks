record `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ba4f8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4ba4fe.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4ba502.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b$a.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b` := v2 @kind object;
  #L4ba506.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b$a;.a:()V` @AccessFlag  {
    temp;

  #L4ba518.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4ba51e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ba530.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b$a.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b` @kind object;
  #L4ba534.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.b:()V` @kind virtual;
  #L4ba53a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ba54c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b$a.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b` @kind object;
  #L4ba550.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.dispose:()V` @kind virtual;
  #L4ba556.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ba55a.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ba560.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ba574.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ba578.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ba57e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4ba590.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ba596.  return @kind void;
}
