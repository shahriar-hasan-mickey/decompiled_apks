record `io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek` `io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelPeek$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/operators/parallel/ParallelPeek;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d2234.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4d223a.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4d223e.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek` := v2 @kind object;
  #L4d2242.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelPeek$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d2254.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek` @kind object;
  #L4d2258.  v0:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek.i` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L4d225c.  call `run`(v0) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L4d2262.  goto L4d2272;
  #L4d2264.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d2266.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d226c.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d2272.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d2276.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d227c.  return @kind void;
  catch `java.lang.Throwable` @[L4d2254..L4d2262] goto L4d2264;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelPeek$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d229c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.d` @type ^`boolean` @kind boolean;
  #L4d22a0.  if v0 != 0 then goto L4d22f4;
  #L4d22a4.  v0:= 1I;
  #L4d22a6.  v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4d22aa.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek` @kind object;
  #L4d22ae.  v0:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek.e` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L4d22b2.  call `run`(v0) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L4d22b8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d22bc.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d22c2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek` @kind object;
  #L4d22c6.  v0:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek.f` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L4d22ca.  call `run`(v0) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L4d22d0.  goto L4d22f4;
  #L4d22d2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d22d4.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d22da.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d22e0.  goto L4d22f4;
  #L4d22e2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d22e4.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d22ea.  v1:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d22ee.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d22f4.  return @kind void;
  catch `java.lang.Throwable` @[L4d22aa..L4d22b8] goto L4d22e2;
  catch `java.lang.Throwable` @[L4d22c2..L4d22d0] goto L4d22d2;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelPeek$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4d2320.  v0:= v5.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.d` @type ^`boolean` @kind boolean;
  #L4d2324.  if v0 == 0 then goto L4d2330;
  #L4d2328.  call `onError`(v6) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d232e.  return @kind void;
  #L4d2330.  v0:= 1I;
  #L4d2332.  v5.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4d2336.  v1:= v5.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek` @kind object;
  #L4d233a.  v1:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek.d` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4d233e.  call `accept`(v1, v6) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4d2344.  goto L4d236a;
  #L4d2346.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d2348.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d234e.  v2:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L4d2352.  v3:= 2I;
  #L4d2354.  v3:= new `java.lang.Throwable`[v3];
  #L4d2358.  v4:= 0I;
  #L4d235a.  v3[v4]:= v6 @kind object;
  #L4d235e.  v3[v0]:= v1 @kind object;
  #L4d2362.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4d2368.  v6:= v2 @kind object;
  #L4d236a.  v0:= v5.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d236e.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d2374.  v6:= v5.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek` @kind object;
  #L4d2378.  v6:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek.f` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L4d237c.  call `run`(v6) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L4d2382.  goto L4d2392;
  #L4d2384.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d2386.  call `throwIfFatal`(v6) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d238c.  call `onError`(v6) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d2392.  return @kind void;
  catch `java.lang.Throwable` @[L4d2336..L4d2344] goto L4d2346;
  catch `java.lang.Throwable` @[L4d2374..L4d2382] goto L4d2384;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelPeek$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d23bc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.d` @type ^`boolean` @kind boolean;
  #L4d23c0.  if v0 != 0 then goto L4d240a;
  #L4d23c4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek` @kind object;
  #L4d23c8.  v0:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4d23cc.  call `accept`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4d23d2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d23d6.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d23dc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek` @kind object;
  #L4d23e0.  v0:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek.c` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4d23e4.  call `accept`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4d23ea.  goto L4d240a;
  #L4d23ec.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d23ee.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d23f4.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelPeek$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d23fa.  goto L4d240a;
  #L4d23fc.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d23fe.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d2404.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelPeek$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d240a.  return @kind void;
  catch `java.lang.Throwable` @[L4d23c4..L4d23d2] goto L4d23fc;
  catch `java.lang.Throwable` @[L4d23dc..L4d23ea] goto L4d23ec;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelPeek$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d2434.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d2438.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d243e.  v0:= temp;
  #L4d2440.  if v0 == 0 then goto L4d2484;
  #L4d2444.  v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4d2448.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek` @kind object;
  #L4d244c.  v0:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek.g` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4d2450.  call `accept`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4d2456.  v3:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d245a.  call `onSubscribe`(v3, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d2460.  goto L4d2484;
  #L4d2462.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d2464.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d246a.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d2470.  v3:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d2474.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.EmptySubscription.INSTANCE` @type ^`io.reactivex.rxjava3.internal.subscriptions.EmptySubscription` @kind object;
  #L4d2478.  call `onSubscribe`(v3, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d247e.  call `onError`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelPeek$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d2484.  return @kind void;
  catch `java.lang.Throwable` @[L4d2448..L4d2456] goto L4d2462;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelPeek$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d24a4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek` @kind object;
  #L4d24a8.  v0:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek.h` @type ^`io.reactivex.rxjava3.functions.LongConsumer` @kind object;
  #L4d24ac.  call `accept`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/LongConsumer;.accept:(J)V` @kind interface;
  #L4d24b2.  goto L4d24c2;
  #L4d24b4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d24b6.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d24bc.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d24c2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d24c6.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d24cc.  return @kind void;
  catch `java.lang.Throwable` @[L4d24a4..L4d24b2] goto L4d24b4;
}
