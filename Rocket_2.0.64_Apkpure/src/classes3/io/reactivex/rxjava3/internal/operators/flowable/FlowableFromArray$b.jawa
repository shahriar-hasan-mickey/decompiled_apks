record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$b.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromArray$b;.<init>:(Lorg/reactivestreams/Subscriber;[Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L493e88.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromArray$c;.<init>:([Ljava/lang/Object;)V` @kind direct;
  #L493e8e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$b.d` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L493e92.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$b` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromArray$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L493ea4.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.a` @type ^`java.lang.Object`[] @kind object;
  #L493ea8.  v1:= length @variable v0;
  #L493eaa.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$b.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L493eae.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int`;
  #L493eb2.  if v3 == v1 then goto L493f12;
  #L493eb6.  v4:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L493eba.  if v4 == 0 then goto L493ec0;
  #L493ebe.  return @kind void;
  #L493ec0.  v4:= v0[v3] @kind object;
  #L493ec4.  if v4 != 0 then goto L493f06;
  #L493ec8.  v0:= new `java.lang.NullPointerException`;
  #L493ecc.  v1:= new `java.lang.StringBuilder`;
  #L493ed0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L493ed6.  v4:= "The element at index " @kind object;
  #L493eda.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L493ee0.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L493ee6.  v3:= " is null" @kind object;
  #L493eea.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L493ef0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L493ef6.  v1:= temp @kind object;
  #L493ef8.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L493efe.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L493f04.  return @kind void;
  #L493f06.  call `onNext`(v2, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L493f0c.  v3:= v3 + 1;
  #L493f10.  goto L493eb2;
  #L493f12.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L493f16.  if v0 == 0 then goto L493f1c;
  #L493f1a.  return @kind void;
  #L493f1c.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L493f22.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$b` v10 @kind this, `long` v11 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromArray$b;.e:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L493f34.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.a` @type ^`java.lang.Object`[] @kind object;
  #L493f38.  v1:= length @variable v0;
  #L493f3a.  v2:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int`;
  #L493f3e.  v3:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$b.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L493f42.  v4:= 0L;
  #L493f46.  v6:= v4 @kind wide;
  #L493f48.  v8:= lcmp(v6, v11);
  #L493f4c.  if v8 == 0 then goto L493fb6;
  #L493f50.  if v2 == v1 then goto L493fb6;
  #L493f54.  v8:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L493f58.  if v8 == 0 then goto L493f5e;
  #L493f5c.  return @kind void;
  #L493f5e.  v8:= v0[v2] @kind object;
  #L493f62.  if v8 != 0 then goto L493fa4;
  #L493f66.  v11:= new `java.lang.NullPointerException`;
  #L493f6a.  v12:= new `java.lang.StringBuilder`;
  #L493f6e.  call `<init>`(v12) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L493f74.  v0:= "The element at index " @kind object;
  #L493f78.  call temp:= `append`(v12, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L493f7e.  call temp:= `append`(v12, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L493f84.  v0:= " is null" @kind object;
  #L493f88.  call temp:= `append`(v12, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L493f8e.  call temp:= `toString`(v12) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L493f94.  v12:= temp @kind object;
  #L493f96.  call `<init>`(v11, v12) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L493f9c.  call `onError`(v3, v11) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L493fa2.  return @kind void;
  #L493fa4.  call `onNext`(v3, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L493faa.  v8:= 1L;
  #L493fae.  v6:= v6 + v8 @kind long;
  #L493fb0.  v2:= v2 + 1;
  #L493fb4.  goto L493f48;
  #L493fb6.  if v2 != v1 then goto L493fca;
  #L493fba.  v11:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L493fbe.  if v11 != 0 then goto L493fc8;
  #L493fc2.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L493fc8.  return @kind void;
  #L493fca.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L493fd0.  v11:= temp @kind wide;
  #L493fd2.  v8:= lcmp(v6, v11);
  #L493fd6.  if v8 != 0 then goto L493f48;
  #L493fda.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int` := v2;
  #L493fde.  v11:= -v6 @kind long;
  #L493fe0.  call temp:= `addAndGet`(v10, v11) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L493fe6.  v11:= temp @kind wide;
  #L493fe8.  v6:= lcmp(v11, v4);
  #L493fec.  if v6 != 0 then goto L493f46;
  #L493ff0.  return @kind void;
}
