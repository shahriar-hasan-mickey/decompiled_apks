record `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$b` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.d` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.e` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.h` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.i` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.j` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.k` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.l` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.m` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.n` @AccessFlag VOLATILE;
}
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.o` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.p` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.q` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.r` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L495cc4.  v0:= 1I;
  #L495cc6.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L495ccc.  v0:= temp @kind object;
  #L495cce.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.o` @type ^`java.lang.Integer` := v0 @kind object;
  #L495cd2.  v0:= 2I;
  #L495cd4.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L495cda.  v0:= temp @kind object;
  #L495cdc.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.p` @type ^`java.lang.Integer` := v0 @kind object;
  #L495ce0.  v0:= 3I;
  #L495ce2.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L495ce8.  v0:= temp @kind object;
  #L495cea.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.q` @type ^`java.lang.Integer` := v0 @kind object;
  #L495cee.  v0:= 4I;
  #L495cf0.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L495cf6.  v0:= temp @kind object;
  #L495cf8.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.r` @type ^`java.lang.Integer` := v0 @kind object;
  #L495cfc.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `io.reactivex.rxjava3.functions.Function` v4 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L495d10.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L495d16.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L495d1a.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L495d1e.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L495d24.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L495d28.  v2:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L495d2c.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L495d32.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v2 @kind object;
  #L495d36.  v2:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L495d3a.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L495d40.  v0:= temp;
  #L495d42.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L495d48.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L495d4c.  v2:= new `java.util.LinkedHashMap`;
  #L495d50.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L495d56.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` := v2 @kind object;
  #L495d5a.  v2:= new `java.util.LinkedHashMap`;
  #L495d5e.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L495d64.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.f` @type ^`java.util.Map` := v2 @kind object;
  #L495d68.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L495d6c.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L495d72.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L495d76.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.h` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L495d7a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.i` @type ^`io.reactivex.rxjava3.functions.Function` := v4 @kind object;
  #L495d7e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.j` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v5 @kind object;
  #L495d82.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L495d86.  v3:= 2I;
  #L495d88.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L495d8e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L495d92.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4962cc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4962d0.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4962d6.  v0:= temp;
  #L4962d8.  if v0 == 0 then goto L4962ee;
  #L4962dc.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4962e0.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4962e6.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.g:()V` @kind virtual;
  #L4962ec.  goto L4962f4;
  #L4962ee.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4962f4.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `boolean` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.b:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L496308.  @monitorenter v1
  #L49630a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L49630e.  if v2 == 0 then goto L496318;
  #L496312.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L496316.  goto L49631c;
  #L496318.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L49631c.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L496322.  @monitorexit v1
  #L496324.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.g:()V` @kind virtual;
  #L49632a.  return @kind void;
  #L49632c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49632e.  @monitorexit v1
  #L496330.  throw v2;
  catch `java.lang.Throwable` @[L49630a..L496324] goto L49632c;
  catch `java.lang.Throwable` @[L49632e..L496330] goto L49632c;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.c:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L496270.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L496274.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L49627a.  v0:= temp;
  #L49627c.  if v0 == 0 then goto L496288;
  #L496280.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.g:()V` @kind virtual;
  #L496286.  goto L49628e;
  #L496288.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L49628e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L495da4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.n` @type ^`boolean` @kind boolean;
  #L495da8.  if v0 == 0 then goto L495dae;
  #L495dac.  return @kind void;
  #L495dae.  v0:= 1I;
  #L495db0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.n` @type ^`boolean` := v0 @kind boolean;
  #L495db4.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.f:()V` @kind virtual;
  #L495dba.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L495dc0.  v0:= temp;
  #L495dc2.  if v0 != 0 then goto L495dd0;
  #L495dc6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L495dca.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L495dd0.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$d` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.d:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4962a0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4962a4.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4962aa.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4962ae.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4962b4.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.g:()V` @kind virtual;
  #L4962ba.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `boolean` v2 , `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.e:(ZLio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L496220.  @monitorenter v1
  #L496222.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L496226.  if v2 == 0 then goto L496230;
  #L49622a.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.q` @type ^`java.lang.Integer` @kind object;
  #L49622e.  goto L496234;
  #L496230.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.r` @type ^`java.lang.Integer` @kind object;
  #L496234.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L49623a.  @monitorexit v1
  #L49623c.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.g:()V` @kind virtual;
  #L496242.  return @kind void;
  #L496244.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L496246.  @monitorexit v1
  #L496248.  throw v2;
  catch `java.lang.Throwable` @[L496222..L49623c] goto L496244;
  catch `java.lang.Throwable` @[L496246..L496248] goto L496244;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.f:()V` @AccessFlag  {
    temp;
    v0;

  #L495de4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L495de8.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L495dee.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a` v11 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L495e00.  call temp:= `getAndIncrement`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L495e06.  v0:= temp;
  #L495e08.  if v0 == 0 then goto L495e0e;
  #L495e0c.  return @kind void;
  #L495e0e.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L495e12.  v1:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L495e16.  v2:= 1I;
  #L495e18.  v3:= 1I;
  #L495e1a.  v4:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.n` @type ^`boolean` @kind boolean;
  #L495e1e.  if v4 == 0 then goto L495e2a;
  #L495e22.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L495e28.  return @kind void;
  #L495e2a.  v4:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L495e2e.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L495e34.  v4:= temp @kind object;
  #L495e36.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L495e3a.  if v4 == 0 then goto L495e52;
  #L495e3e.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L495e44.  call `f`(v11) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.f:()V` @kind virtual;
  #L495e4a.  call `h`(v11, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L495e50.  return @kind void;
  #L495e52.  v4:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L495e56.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L495e5c.  v4:= temp;
  #L495e5e.  v5:= 0I;
  #L495e60.  if v4 != 0 then goto L495e68;
  #L495e64.  v4:= 1I;
  #L495e66.  goto L495e6a;
  #L495e68.  v4:= 0I;
  #L495e6a.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L495e70.  v6:= temp @kind object;
  #L495e72.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L495e76.  if v6 != 0 then goto L495e7e;
  #L495e7a.  v7:= 1I;
  #L495e7c.  goto L495e80;
  #L495e7e.  v7:= 0I;
  #L495e80.  if v4 == 0 then goto L495ee2;
  #L495e84.  if v7 == 0 then goto L495ee2;
  #L495e88.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L495e8c.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L495e92.  v0:= temp @kind object;
  #L495e94.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L495e9a.  v0:= temp @kind object;
  #L495e9c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L495ea2.  v2:= temp;
  #L495ea4.  if v2 == 0 then goto L495ebc;
  #L495ea8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L495eae.  v2:= temp @kind object;
  #L495eb0.  v2:= (`io.reactivex.rxjava3.processors.UnicastProcessor`) v2 @kind object;
  #L495eb4.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L495eba.  goto L495e9c;
  #L495ebc.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L495ec0.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L495ec6.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.f` @type ^`java.util.Map` @kind object;
  #L495eca.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L495ed0.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L495ed4.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L495eda.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L495ee0.  return @kind void;
  #L495ee2.  if v7 == 0 then goto L495ef6;
  #L495ee6.  v3:= -v3 @kind int;
  #L495ee8.  call temp:= `addAndGet`(v11, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L495eee.  v3:= temp;
  #L495ef0.  if v3 != 0 then goto L495e1a;
  #L495ef4.  return @kind void;
  #L495ef6.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L495efc.  v4:= temp @kind object;
  #L495efe.  v7:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L495f02.  if v6 != v7 then goto L496024;
  #L495f06.  call temp:= `create`() @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:()Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind static;
  #L495f0c.  v5:= temp @kind object;
  #L495f0e.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.l` @type ^`int`;
  #L495f12.  v7:= v6 + 1;
  #L495f16.  v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.l` @type ^`int` := v7;
  #L495f1a.  v7:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L495f1e.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L495f24.  v8:= temp @kind object;
  #L495f26.  call temp:= `put`(v7, v8, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L495f2c.  v7:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.h` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L495f30.  call temp:= `apply`(v7, v4) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L495f36.  v7:= temp @kind object;
  #L495f38.  v8:= "The leftEnd returned a null Publisher" @kind object;
  #L495f3c.  call temp:= `requireNonNull`(v7, v8) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L495f42.  v7:= (`org.reactivestreams.Publisher`) v7 @kind object;
  #L495f46.  v8:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c`;
  #L495f4a.  call `<init>`(v8, v11, v2, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$b;ZI)V` @kind direct;
  #L495f50.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L495f54.  call temp:= `add`(v6, v8) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L495f5a.  call `subscribe`(v7, v8) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L495f60.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L495f64.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L495f6a.  v6:= temp @kind object;
  #L495f6c.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L495f70.  if v6 == 0 then goto L495f88;
  #L495f74.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L495f7a.  call `f`(v11) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.f:()V` @kind virtual;
  #L495f80.  call `h`(v11, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L495f86.  return @kind void;
  #L495f88.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.j` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L495f8c.  call temp:= `apply`(v6, v4, v5) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L495f92.  v4:= temp @kind object;
  #L495f94.  v6:= "The resultSelector returned a null value" @kind object;
  #L495f98.  call temp:= `requireNonNull`(v4, v6) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L495f9e.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L495fa2.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L495fa8.  v6:= temp @kind wide;
  #L495faa.  v8:= 0L;
  #L495fae.  v10:= lcmp(v6, v8);
  #L495fb2.  if v10 == 0 then goto L495ffa;
  #L495fb6.  call `onNext`(v1, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L495fbc.  v4:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L495fc0.  v6:= 1L;
  #L495fc4.  call temp:= `produced`(v4, v6) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L495fca.  v4:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.f` @type ^`java.util.Map` @kind object;
  #L495fce.  call temp:= `values`(v4) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L495fd4.  v4:= temp @kind object;
  #L495fd6.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L495fdc.  v4:= temp @kind object;
  #L495fde.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L495fe4.  v6:= temp;
  #L495fe6.  if v6 == 0 then goto L495e1a;
  #L495fea.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L495ff0.  v6:= temp @kind object;
  #L495ff2.  call `onNext`(v5, v6) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L495ff8.  goto L495fde;
  #L495ffa.  v2:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L495ffe.  v3:= "Could not emit value due to lack of requests" @kind object;
  #L496002.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L496008.  call `i`(v11, v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L49600e.  return @kind void;
  #L496010.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L496012.  call `i`(v11, v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L496018.  return @kind void;
  #L49601a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49601c.  call `i`(v11, v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L496022.  return @kind void;
  #L496024.  v7:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L496028.  if v6 != v7 then goto L4960e4;
  #L49602c.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.m` @type ^`int`;
  #L496030.  v7:= v6 + 1;
  #L496034.  v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.m` @type ^`int` := v7;
  #L496038.  v7:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.f` @type ^`java.util.Map` @kind object;
  #L49603c.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L496042.  v8:= temp @kind object;
  #L496044.  call temp:= `put`(v7, v8, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L49604a.  v7:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.i` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L49604e.  call temp:= `apply`(v7, v4) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L496054.  v7:= temp @kind object;
  #L496056.  v8:= "The rightEnd returned a null Publisher" @kind object;
  #L49605a.  call temp:= `requireNonNull`(v7, v8) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L496060.  v7:= (`org.reactivestreams.Publisher`) v7 @kind object;
  #L496064.  v8:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c`;
  #L496068.  call `<init>`(v8, v11, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$b;ZI)V` @kind direct;
  #L49606e.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L496072.  call temp:= `add`(v5, v8) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L496078.  call `subscribe`(v7, v8) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L49607e.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L496082.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L496088.  v5:= temp @kind object;
  #L49608a.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L49608e.  if v5 == 0 then goto L4960a6;
  #L496092.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L496098.  call `f`(v11) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.f:()V` @kind virtual;
  #L49609e.  call `h`(v11, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4960a4.  return @kind void;
  #L4960a6.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4960aa.  call temp:= `values`(v5) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4960b0.  v5:= temp @kind object;
  #L4960b2.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4960b8.  v5:= temp @kind object;
  #L4960ba.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4960c0.  v6:= temp;
  #L4960c2.  if v6 == 0 then goto L495e1a;
  #L4960c6.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4960cc.  v6:= temp @kind object;
  #L4960ce.  v6:= (`io.reactivex.rxjava3.processors.UnicastProcessor`) v6 @kind object;
  #L4960d2.  call `onNext`(v6, v4) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4960d8.  goto L4960ba;
  #L4960da.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4960dc.  call `i`(v11, v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L4960e2.  return @kind void;
  #L4960e4.  v5:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.q` @type ^`java.lang.Integer` @kind object;
  #L4960e8.  if v6 != v5 then goto L496124;
  #L4960ec.  v4:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c`) v4 @kind object;
  #L4960f0.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4960f4.  v6:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c.c` @type ^`int`;
  #L4960f8.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4960fe.  v6:= temp @kind object;
  #L496100.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L496106.  v5:= temp @kind object;
  #L496108.  v5:= (`io.reactivex.rxjava3.processors.UnicastProcessor`) v5 @kind object;
  #L49610c.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L496110.  call temp:= `remove`(v6, v4) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.remove:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L496116.  if v5 == 0 then goto L495e1a;
  #L49611a.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L496120.  goto L495e1a;
  #L496124.  v4:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c`) v4 @kind object;
  #L496128.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.f` @type ^`java.util.Map` @kind object;
  #L49612c.  v6:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c.c` @type ^`int`;
  #L496130.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L496136.  v6:= temp @kind object;
  #L496138.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L49613e.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L496142.  call temp:= `remove`(v5, v4) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.remove:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L496148.  goto L495e1a;
  catch `java.lang.Throwable` @[L495f2c..L495f46] goto L49601a;
  catch `java.lang.Throwable` @[L495f88..L495f9e] goto L496010;
  catch `java.lang.Throwable` @[L49604a..L496064] goto L4960da;
}
procedure `void` `h`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L496180.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L496184.  call temp:= `terminate`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L49618a.  v0:= temp @kind object;
  #L49618c.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L496190.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L496196.  v1:= temp @kind object;
  #L496198.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L49619e.  v1:= temp @kind object;
  #L4961a0.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4961a6.  v2:= temp;
  #L4961a8.  if v2 == 0 then goto L4961c0;
  #L4961ac.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4961b2.  v2:= temp @kind object;
  #L4961b4.  v2:= (`io.reactivex.rxjava3.processors.UnicastProcessor`) v2 @kind object;
  #L4961b8.  call `onError`(v2, v0) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4961be.  goto L4961a0;
  #L4961c0.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4961c4.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4961ca.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.f` @type ^`java.util.Map` @kind object;
  #L4961ce.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4961d4.  call `onError`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4961da.  return @kind void;
}
procedure `void` `i`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object, `org.reactivestreams.Subscriber` v3 @kind object, `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)V` @AccessFlag  {
    temp;
    v0;

  #L4961ec.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4961f2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4961f6.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4961fc.  call `clear`(v4) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L496202.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.f:()V` @kind virtual;
  #L496208.  call `h`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L49620e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L496358.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L49635e.  v0:= temp;
  #L496360.  if v0 == 0 then goto L49636e;
  #L496364.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L496368.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L49636e.  return @kind void;
}
