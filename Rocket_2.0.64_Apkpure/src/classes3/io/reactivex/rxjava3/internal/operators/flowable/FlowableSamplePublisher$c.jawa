record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.a` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.d` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.e` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L49f5a4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L49f5aa.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L49f5ae.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L49f5b4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.c` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L49f5b8.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L49f5bc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L49f5c2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L49f5c6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L49f5ca.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.b` @type ^`org.reactivestreams.Publisher` := v3 @kind object;
  #L49f5ce.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49f608.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49f60c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L49f612.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.b:()V` @kind virtual;
  #L49f618.  return @kind void;
}
procedure `void` `b`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.b:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49f62c.  v0:= 0I;
  #L49f62e.  call temp:= `getAndSet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L49f634.  v0:= temp @kind object;
  #L49f636.  if v0 == 0 then goto L49f68a;
  #L49f63a.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L49f63e.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49f644.  v1:= temp @kind wide;
  #L49f646.  v3:= 0L;
  #L49f64a.  v5:= lcmp(v1, v3);
  #L49f64e.  if v5 == 0 then goto L49f66c;
  #L49f652.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49f656.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L49f65c.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L49f660.  v1:= 1L;
  #L49f664.  call temp:= `produced`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L49f66a.  goto L49f68a;
  #L49f66c.  call `cancel`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.cancel:()V` @kind virtual;
  #L49f672.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49f676.  v1:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L49f67a.  v2:= "Couldn't emit value due to lack of requests!" @kind object;
  #L49f67e.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49f684.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49f68a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49f5e0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49f5e4.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L49f5ea.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49f5ee.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L49f5f4.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.d:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49f69c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49f6a0.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L49f6a6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49f6aa.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49f6b0.  return @kind void;
}
procedure `void` `e`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.e:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.f:(Lorg/reactivestreams/Subscription;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L49f7b4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49f7b8.  v1:= 9223372036854775807L;
  #L49f7c2.  call temp:= `setOnce`(v0, v4, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L49f7c8.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49f6c4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49f6c8.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L49f6ce.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.b:()V` @kind virtual;
  #L49f6d4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49f6e8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49f6ec.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L49f6f2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49f6f6.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49f6fc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L49f710.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L49f716.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49f728.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49f72c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L49f732.  v0:= temp;
  #L49f734.  if v0 == 0 then goto L49f77a;
  #L49f738.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.e` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L49f73c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49f740.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L49f746.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49f74a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49f750.  v0:= temp @kind object;
  #L49f752.  if v0 != 0 then goto L49f77a;
  #L49f756.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L49f75a.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$d`;
  #L49f75e.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$d;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;)V` @kind direct;
  #L49f764.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L49f76a.  v0:= 9223372036854775807L;
  #L49f774.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L49f77a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49f78c.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L49f792.  v0:= temp;
  #L49f794.  if v0 == 0 then goto L49f7a2;
  #L49f798.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L49f79c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L49f7a2.  return @kind void;
}
