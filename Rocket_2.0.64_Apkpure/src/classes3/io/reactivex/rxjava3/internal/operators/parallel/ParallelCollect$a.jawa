record `io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriber` @kind class {
  `io.reactivex.rxjava3.functions.BiConsumer` `io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect$a.a` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect$a.b` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.rxjava3.functions.BiConsumer` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelCollect$a;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Lio/reactivex/rxjava3/functions/BiConsumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cf69c.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/DeferredScalarSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4cf6a2.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect$a.b` @type ^`java.lang.Object` := v2 @kind object;
  #L4cf6a6.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect$a.a` @type ^`io.reactivex.rxjava3.functions.BiConsumer` := v3 @kind object;
  #L4cf6aa.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelCollect$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cf6bc.  call `cancel`(v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/DeferredScalarSubscriber;.cancel:()V` @kind super;
  #L4cf6c2.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cf6c6.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4cf6cc.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelCollect$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4cf6e0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect$a.c` @type ^`boolean` @kind boolean;
  #L4cf6e4.  if v0 == 0 then goto L4cf6ea;
  #L4cf6e8.  return @kind void;
  #L4cf6ea.  v0:= 1I;
  #L4cf6ec.  v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4cf6f0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect$a.b` @type ^`java.lang.Object` @kind object;
  #L4cf6f4.  v1:= 0I;
  #L4cf6f6.  v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect$a.b` @type ^`java.lang.Object` := v1 @kind object;
  #L4cf6fa.  call `complete`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L4cf700.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelCollect$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cf714.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect$a.c` @type ^`boolean` @kind boolean;
  #L4cf718.  if v0 == 0 then goto L4cf724;
  #L4cf71c.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4cf722.  return @kind void;
  #L4cf724.  v0:= 1I;
  #L4cf726.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4cf72a.  v0:= 0I;
  #L4cf72c.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect$a.b` @type ^`java.lang.Object` := v0 @kind object;
  #L4cf730.  v0:= v1.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cf734.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cf73a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelCollect$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4cf74c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect$a.c` @type ^`boolean` @kind boolean;
  #L4cf750.  if v0 == 0 then goto L4cf756;
  #L4cf754.  return @kind void;
  #L4cf756.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect$a.a` @type ^`io.reactivex.rxjava3.functions.BiConsumer` @kind object;
  #L4cf75a.  v1:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect$a.b` @type ^`java.lang.Object` @kind object;
  #L4cf75e.  call `accept`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/functions/BiConsumer;.accept:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L4cf764.  goto L4cf77a;
  #L4cf766.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cf768.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4cf76e.  call `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelCollect$a;.cancel:()V` @kind virtual;
  #L4cf774.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelCollect$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4cf77a.  return @kind void;
  catch `java.lang.Throwable` @[L4cf756..L4cf764] goto L4cf766;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelCollect$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4cf798.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cf79c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4cf7a2.  v0:= temp;
  #L4cf7a4.  if v0 == 0 then goto L4cf7c6;
  #L4cf7a8.  v2.`io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4cf7ac.  v0:= v2.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cf7b0.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4cf7b6.  v0:= 9223372036854775807L;
  #L4cf7c0.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4cf7c6.  return @kind void;
}
