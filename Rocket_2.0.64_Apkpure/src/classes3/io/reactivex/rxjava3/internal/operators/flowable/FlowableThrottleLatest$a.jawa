record `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.g` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.h` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.i` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.j` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.k` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.l` @AccessFlag VOLATILE;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.m` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.n` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleLatest$a;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler$Worker;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a3a4c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4a3a52.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4a3a56.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.b` @type ^`long` := v2 @kind wide;
  #L4a3a5a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L4a3a5e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v5 @kind object;
  #L4a3a62.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.e` @type ^`boolean` := v6 @kind boolean;
  #L4a3a66.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4a3a6a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4a3a70.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4a3a74.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4a3a78.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a3a7e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.g` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4a3a82.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a` v14 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleLatest$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L4a3ad8.  call temp:= `getAndIncrement`(v14) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a3ade.  v0:= temp;
  #L4a3ae0.  if v0 == 0 then goto L4a3ae6;
  #L4a3ae4.  return @kind void;
  #L4a3ae6.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a3aea.  v1:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a3aee.  v2:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a3af2.  v3:= 1I;
  #L4a3af4.  v4:= 1I;
  #L4a3af6.  v5:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.k` @type ^`boolean` @kind boolean;
  #L4a3afa.  v6:= 0I;
  #L4a3afc.  if v5 == 0 then goto L4a3b08;
  #L4a3b00.  call `lazySet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4a3b06.  return @kind void;
  #L4a3b08.  v5:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.i` @type ^`boolean` @kind boolean;
  #L4a3b0c.  if v5 == 0 then goto L4a3b34;
  #L4a3b10.  v7:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.j` @type ^`java.lang.Throwable` @kind object;
  #L4a3b14.  if v7 == 0 then goto L4a3b34;
  #L4a3b18.  call `lazySet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4a3b1e.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.j` @type ^`java.lang.Throwable` @kind object;
  #L4a3b22.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a3b28.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4a3b2c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4a3b32.  return @kind void;
  #L4a3b34.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a3b3a.  v7:= temp @kind object;
  #L4a3b3c.  v8:= 0I;
  #L4a3b3e.  if v7 != 0 then goto L4a3b46;
  #L4a3b42.  v7:= 1I;
  #L4a3b44.  goto L4a3b48;
  #L4a3b46.  v7:= 0I;
  #L4a3b48.  v9:= 1L;
  #L4a3b4c.  if v5 == 0 then goto L4a3bba;
  #L4a3b50.  if v7 != 0 then goto L4a3ba2;
  #L4a3b54.  v3:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.e` @type ^`boolean` @kind boolean;
  #L4a3b58.  if v3 == 0 then goto L4a3ba2;
  #L4a3b5c.  call temp:= `getAndSet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4a3b62.  v0:= temp @kind object;
  #L4a3b64.  v3:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.m` @type ^`long` @kind wide;
  #L4a3b68.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a3b6e.  v5:= temp @kind wide;
  #L4a3b70.  v1:= lcmp(v3, v5);
  #L4a3b74.  if v1 == 0 then goto L4a3b8c;
  #L4a3b78.  v3:= v3 + v9 @kind long;
  #L4a3b7a.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.m` @type ^`long` := v3 @kind wide;
  #L4a3b7e.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a3b84.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a3b8a.  goto L4a3bae;
  #L4a3b8c.  v0:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4a3b90.  v1:= "Could not emit final value due to lack of requests" @kind object;
  #L4a3b94.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a3b9a.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a3ba0.  goto L4a3bae;
  #L4a3ba2.  call `lazySet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4a3ba8.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a3bae.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4a3bb2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4a3bb8.  return @kind void;
  #L4a3bba.  if v7 == 0 then goto L4a3bd0;
  #L4a3bbe.  v5:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.l` @type ^`boolean` @kind boolean;
  #L4a3bc2.  if v5 == 0 then goto L4a3be2;
  #L4a3bc6.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.n` @type ^`boolean` := v8 @kind boolean;
  #L4a3bca.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.l` @type ^`boolean` := v8 @kind boolean;
  #L4a3bce.  goto L4a3be2;
  #L4a3bd0.  v5:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.n` @type ^`boolean` @kind boolean;
  #L4a3bd4.  if v5 == 0 then goto L4a3bf2;
  #L4a3bd8.  v5:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.l` @type ^`boolean` @kind boolean;
  #L4a3bdc.  if v5 == 0 then goto L4a3be2;
  #L4a3be0.  goto L4a3bf2;
  #L4a3be2.  v4:= -v4 @kind int;
  #L4a3be4.  call temp:= `addAndGet`(v14, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4a3bea.  v4:= temp;
  #L4a3bec.  if v4 != 0 then goto L4a3af6;
  #L4a3bf0.  return @kind void;
  #L4a3bf2.  call temp:= `getAndSet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4a3bf8.  v5:= temp @kind object;
  #L4a3bfa.  v6:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.m` @type ^`long` @kind wide;
  #L4a3bfe.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a3c04.  v11:= temp @kind wide;
  #L4a3c06.  v13:= lcmp(v6, v11);
  #L4a3c0a.  if v13 == 0 then goto L4a3c38;
  #L4a3c0e.  call `onNext`(v2, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a3c14.  v6:= v6 + v9 @kind long;
  #L4a3c16.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.m` @type ^`long` := v6 @kind wide;
  #L4a3c1a.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.l` @type ^`boolean` := v8 @kind boolean;
  #L4a3c1e.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.n` @type ^`boolean` := v3 @kind boolean;
  #L4a3c22.  v5:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4a3c26.  v6:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.b` @type ^`long` @kind wide;
  #L4a3c2a.  v8:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4a3c2e.  call temp:= `schedule`(v5, v14, v6, v8) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4a3c34.  goto L4a3af6;
  #L4a3c38.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a3c3c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a3c42.  v0:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4a3c46.  v1:= "Could not emit value due to lack of requests" @kind object;
  #L4a3c4a.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a3c50.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a3c56.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4a3c5a.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4a3c60.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleLatest$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a3a94.  v0:= 1I;
  #L4a3a96.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.k` @type ^`boolean` := v0 @kind boolean;
  #L4a3a9a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a3a9e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a3aa4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4a3aa8.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4a3aae.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a3ab4.  v0:= temp;
  #L4a3ab6.  if v0 != 0 then goto L4a3ac6;
  #L4a3aba.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a3abe.  v1:= 0I;
  #L4a3ac0.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4a3ac6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleLatest$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a3c74.  v0:= 1I;
  #L4a3c76.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4a3c7a.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleLatest$a;.a:()V` @kind virtual;
  #L4a3c80.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleLatest$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4a3c94.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.j` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4a3c98.  v1:= 1I;
  #L4a3c9a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.i` @type ^`boolean` := v1 @kind boolean;
  #L4a3c9e.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleLatest$a;.a:()V` @kind virtual;
  #L4a3ca4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleLatest$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a3cb8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a3cbc.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4a3cc2.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleLatest$a;.a:()V` @kind virtual;
  #L4a3cc8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleLatest$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a3cdc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a3ce0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4a3ce6.  v0:= temp;
  #L4a3ce8.  if v0 == 0 then goto L4a3d0a;
  #L4a3cec.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.h` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4a3cf0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a3cf4.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4a3cfa.  v0:= 9223372036854775807L;
  #L4a3d04.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a3d0a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleLatest$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a3d1c.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4a3d22.  v0:= temp;
  #L4a3d24.  if v0 == 0 then goto L4a3d32;
  #L4a3d28.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a3d2c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4a3d32.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleLatest$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a3d44.  v0:= 1I;
  #L4a3d46.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.l` @type ^`boolean` := v0 @kind boolean;
  #L4a3d4a.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleLatest$a;.a:()V` @kind virtual;
  #L4a3d50.  return @kind void;
}
