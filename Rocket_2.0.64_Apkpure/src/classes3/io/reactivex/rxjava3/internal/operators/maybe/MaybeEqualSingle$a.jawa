record `io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.SingleObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` `io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` `io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiPredicate` `io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a` v1 @kind this, `io.reactivex.rxjava3.core.SingleObserver` v2 @kind object, `io.reactivex.rxjava3.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$a;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;Lio/reactivex/rxjava3/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4ab944.  v0:= 2I;
  #L4ab946.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4ab94c.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` := v2 @kind object;
  #L4ab950.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.d` @type ^`io.reactivex.rxjava3.functions.BiPredicate` := v3 @kind object;
  #L4ab954.  v2:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b`;
  #L4ab958.  call `<init>`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$a;)V` @kind direct;
  #L4ab95e.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` := v2 @kind object;
  #L4ab962.  v2:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b`;
  #L4ab966.  call `<init>`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$a;)V` @kind direct;
  #L4ab96c.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` := v2 @kind object;
  #L4ab970.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4ab9ac.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4ab9b2.  v0:= temp;
  #L4ab9b4.  if v0 != 0 then goto L4aba24;
  #L4ab9b8.  v0:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L4ab9bc.  v0:= v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b.b` @type ^`java.lang.Object` @kind object;
  #L4ab9c0.  v1:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L4ab9c4.  v1:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b.b` @type ^`java.lang.Object` @kind object;
  #L4ab9c8.  if v0 == 0 then goto L4aba04;
  #L4ab9cc.  if v1 == 0 then goto L4aba04;
  #L4ab9d0.  v2:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.d` @type ^`io.reactivex.rxjava3.functions.BiPredicate` @kind object;
  #L4ab9d4.  call temp:= `test`(v2, v0, v1) @signature `Lio/reactivex/rxjava3/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L4ab9da.  v0:= temp;
  #L4ab9dc.  v1:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4ab9e0.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L4ab9e6.  v0:= temp @kind object;
  #L4ab9e8.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4ab9ee.  goto L4aba24;
  #L4ab9f0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ab9f2.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ab9f8.  v1:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4ab9fc.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4aba02.  return @kind void;
  #L4aba04.  v2:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4aba08.  if v0 != 0 then goto L4aba14;
  #L4aba0c.  if v1 != 0 then goto L4aba14;
  #L4aba10.  v0:= 1I;
  #L4aba12.  goto L4aba16;
  #L4aba14.  v0:= 0I;
  #L4aba16.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L4aba1c.  v0:= temp @kind object;
  #L4aba1e.  call `onSuccess`(v2, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4aba24.  return @kind void;
  catch `java.lang.Throwable` @[L4ab9d0..L4ab9dc] goto L4ab9f0;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$a;.b:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$b;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4aba44.  v0:= 0I;
  #L4aba46.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L4aba4c.  v0:= temp;
  #L4aba4e.  if v0 <= 0 then goto L4aba78;
  #L4aba52.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L4aba56.  if v2 != v0 then goto L4aba66;
  #L4aba5a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L4aba5e.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$b;.a:()V` @kind virtual;
  #L4aba64.  goto L4aba6c;
  #L4aba66.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$b;.a:()V` @kind virtual;
  #L4aba6c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4aba70.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4aba76.  goto L4aba7e;
  #L4aba78.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4aba7e.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a` v1 @kind this, `io.reactivex.rxjava3.core.MaybeSource` v2 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$a;.c:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;)V` @AccessFlag  {
    temp;
    v0;

  #L4aba90.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L4aba94.  call `subscribe`(v2, v0) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4aba9a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L4aba9e.  call `subscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4abaa4.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ab984.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L4ab988.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$b;.a:()V` @kind virtual;
  #L4ab98e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L4ab992.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$b;.a:()V` @kind virtual;
  #L4ab998.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ab918.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L4ab91c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ab922.  v0:= temp @kind object;
  #L4ab924.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4ab928.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ab92e.  v0:= temp;
  #L4ab930.  return v0;
}
