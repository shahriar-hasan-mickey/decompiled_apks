record `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$a` @kind class @AccessFlag SYNTHETIC {
}
global `int`[] `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$a.a` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L48c270.  call temp:= `values`() @signature `Lio/reactivex/rxjava3/internal/util/ErrorMode;.values:()[Lio/reactivex/rxjava3/internal/util/ErrorMode;` @kind static;
  #L48c276.  v0:= temp @kind object;
  #L48c278.  v0:= length @variable v0;
  #L48c27a.  v0:= new `int`[v0];
  #L48c27e.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$a.a` @type ^`int`[] := v0 @kind object;
  #L48c282.  v1:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L48c286.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L48c28c.  v1:= temp;
  #L48c28e.  v2:= 1I;
  #L48c290.  v0[v1]:= v2;
  #L48c294.  v0:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$a.a` @type ^`int`[] @kind object;
  #L48c298.  v1:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.END` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L48c29c.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L48c2a2.  v1:= temp;
  #L48c2a4.  v2:= 2I;
  #L48c2a6.  v0[v1]:= v2;
  #L48c2aa.  return @kind void;
  catch `java.lang.NoSuchFieldError` @[L48c282..L48c294] goto L48c294;
  catch `java.lang.NoSuchFieldError` @[L48c294..L48c2aa] goto L48c2aa;
}
