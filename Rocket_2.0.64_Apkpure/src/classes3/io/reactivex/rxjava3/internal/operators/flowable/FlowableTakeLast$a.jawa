record `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a` @kind class @AccessFlag FINAL extends `java.util.ArrayDeque` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a.d` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a.e` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a.g` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLast$a;.<init>:(Lorg/reactivestreams/Subscriber;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4a2a64.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L4a2a6a.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4a2a6e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a2a74.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L4a2a78.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4a2a7c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4a2a82.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a.g` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L4a2a86.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4a2a8a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a.b` @type ^`int` := v3;
  #L4a2a8e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a` v9 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLast$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4a2ac4.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a.g` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4a2ac8.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a2ace.  v0:= temp;
  #L4a2ad0.  if v0 != 0 then goto L4a2b68;
  #L4a2ad4.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a2ad8.  v1:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a2adc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a2ae2.  v1:= temp @kind wide;
  #L4a2ae4.  v3:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a.e` @type ^`boolean` @kind boolean;
  #L4a2ae8.  if v3 == 0 then goto L4a2aee;
  #L4a2aec.  return @kind void;
  #L4a2aee.  v3:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a.d` @type ^`boolean` @kind boolean;
  #L4a2af2.  if v3 == 0 then goto L4a2b58;
  #L4a2af6.  v3:= 0L;
  #L4a2afa.  v5:= v3 @kind wide;
  #L4a2afc.  v7:= lcmp(v5, v1);
  #L4a2b00.  if v7 == 0 then goto L4a2b30;
  #L4a2b04.  v7:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a.e` @type ^`boolean` @kind boolean;
  #L4a2b08.  if v7 == 0 then goto L4a2b0e;
  #L4a2b0c.  return @kind void;
  #L4a2b0e.  call temp:= `poll`(v9) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4a2b14.  v7:= temp @kind object;
  #L4a2b16.  if v7 != 0 then goto L4a2b22;
  #L4a2b1a.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a2b20.  return @kind void;
  #L4a2b22.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a2b28.  v7:= 1L;
  #L4a2b2c.  v5:= v5 + v7 @kind long;
  #L4a2b2e.  goto L4a2afc;
  #L4a2b30.  call temp:= `isEmpty`(v9) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L4a2b36.  v7:= temp;
  #L4a2b38.  if v7 == 0 then goto L4a2b44;
  #L4a2b3c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a2b42.  return @kind void;
  #L4a2b44.  v7:= lcmp(v5, v3);
  #L4a2b48.  if v7 == 0 then goto L4a2b58;
  #L4a2b4c.  v1:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a2b50.  call temp:= `produced`(v1, v5) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4a2b56.  v1:= temp @kind wide;
  #L4a2b58.  v3:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a.g` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4a2b5c.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4a2b62.  v3:= temp;
  #L4a2b64.  if v3 != 0 then goto L4a2ae4;
  #L4a2b68.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLast$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a2aa0.  v0:= 1I;
  #L4a2aa2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4a2aa6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a2aaa.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a2ab0.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLast$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a2b7c.  v0:= 1I;
  #L4a2b7e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4a2b82.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLast$a;.a:()V` @kind virtual;
  #L4a2b88.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLast$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a2b9c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a2ba0.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a2ba6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLast$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a2bb8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a.b` @type ^`int`;
  #L4a2bbc.  call temp:= `size`(v2) @signature `Ljava/util/ArrayDeque;.size:()I` @kind virtual;
  #L4a2bc2.  v1:= temp;
  #L4a2bc4.  if v0 != v1 then goto L4a2bce;
  #L4a2bc8.  call temp:= `poll`(v2) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4a2bce.  call temp:= `offer`(v2, v3) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4a2bd4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLast$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a2be8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a2bec.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4a2bf2.  v0:= temp;
  #L4a2bf4.  if v0 == 0 then goto L4a2c16;
  #L4a2bf8.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4a2bfc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a2c00.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4a2c06.  v0:= 9223372036854775807L;
  #L4a2c10.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a2c16.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLast$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a2c28.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4a2c2e.  v0:= temp;
  #L4a2c30.  if v0 == 0 then goto L4a2c44;
  #L4a2c34.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLast$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a2c38.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4a2c3e.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLast$a;.a:()V` @kind virtual;
  #L4a2c44.  return @kind void;
}
