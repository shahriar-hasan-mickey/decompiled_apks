record `io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$c`[] `io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.c` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b` v1 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v2 @kind object, `int` v3 , `io.reactivex.rxjava3.functions.Function` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$b;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;ILio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4b0e90.  call `<init>`(v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4b0e96.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v2 @kind object;
  #L4b0e9a.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.b` @type ^`io.reactivex.rxjava3.functions.Function` := v4 @kind object;
  #L4b0e9e.  v2:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$c`[v3];
  #L4b0ea2.  v4:= 0I;
  #L4b0ea4.  if v4 >= v3 then goto L4b0ebc;
  #L4b0ea8.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$c`;
  #L4b0eac.  call `<init>`(v0, v1, v4) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$b;I)V` @kind direct;
  #L4b0eb2.  v2[v4]:= v0 @kind object;
  #L4b0eb6.  v4:= v4 + 1;
  #L4b0eba.  goto L4b0ea4;
  #L4b0ebc.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.c` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$c`[] := v2 @kind object;
  #L4b0ec0.  v2:= new `java.lang.Object`[v3];
  #L4b0ec4.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.d` @type ^`java.lang.Object`[] := v2 @kind object;
  #L4b0ec8.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b` v4 @kind this, `int` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$b;.a:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b0f18.  v0:= v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.c` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$c`[] @kind object;
  #L4b0f1c.  v1:= length @variable v0;
  #L4b0f1e.  v2:= 0I;
  #L4b0f20.  if v2 >= v5 then goto L4b0f34;
  #L4b0f24.  v3:= v0[v2] @kind object;
  #L4b0f28.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$c;.a:()V` @kind virtual;
  #L4b0f2e.  v2:= v2 + 1;
  #L4b0f32.  goto L4b0f20;
  #L4b0f34.  v5:= v5 + 1;
  #L4b0f38.  if v5 >= v1 then goto L4b0f48;
  #L4b0f3c.  v2:= v0[v5] @kind object;
  #L4b0f40.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$c;.a:()V` @kind virtual;
  #L4b0f46.  goto L4b0f34;
  #L4b0f48.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$b;.b:(I)V` @AccessFlag  {
    temp;
    v0;

  #L4b0f5c.  v0:= 0I;
  #L4b0f5e.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L4b0f64.  v0:= temp;
  #L4b0f66.  if v0 <= 0 then goto L4b0f7a;
  #L4b0f6a.  call `a`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$b;.a:(I)V` @kind virtual;
  #L4b0f70.  v2:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4b0f74.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4b0f7a.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b` v1 @kind this, `java.lang.Throwable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$b;.c:(Ljava/lang/Throwable;I)V` @AccessFlag  {
    temp;
    v0;

  #L4b0f8c.  v0:= 0I;
  #L4b0f8e.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L4b0f94.  v0:= temp;
  #L4b0f96.  if v0 <= 0 then goto L4b0fac;
  #L4b0f9a.  call `a`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$b;.a:(I)V` @kind virtual;
  #L4b0fa0.  v3:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4b0fa4.  call `onError`(v3, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b0faa.  goto L4b0fb2;
  #L4b0fac.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b0fb2.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b` v1 @kind this, `java.lang.Object` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$b;.d:(Ljava/lang/Object;I)V` @AccessFlag  {
    temp;
    v0;

  #L4b0fc4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.d` @type ^`java.lang.Object`[] @kind object;
  #L4b0fc8.  v0[v3]:= v2 @kind object;
  #L4b0fcc.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4b0fd2.  v2:= temp;
  #L4b0fd4.  if v2 != 0 then goto L4b1010;
  #L4b0fd8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4b0fdc.  v3:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.d` @type ^`java.lang.Object`[] @kind object;
  #L4b0fe0.  call temp:= `apply`(v2, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b0fe6.  v2:= temp @kind object;
  #L4b0fe8.  v3:= "The zipper returned a null value" @kind object;
  #L4b0fec.  call temp:= `requireNonNull`(v2, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b0ff2.  v3:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4b0ff6.  call `onSuccess`(v3, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4b0ffc.  goto L4b1010;
  #L4b0ffe.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b1000.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b1006.  v3:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4b100a.  call `onError`(v3, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b1010.  return @kind void;
  catch `java.lang.Throwable` @[L4b0fd8..L4b0ff2] goto L4b0ffe;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b0edc.  v0:= 0I;
  #L4b0ede.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L4b0ee4.  v1:= temp;
  #L4b0ee6.  if v1 <= 0 then goto L4b0f04;
  #L4b0eea.  v1:= v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.c` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$c`[] @kind object;
  #L4b0eee.  v2:= length @variable v1;
  #L4b0ef0.  if v0 >= v2 then goto L4b0f04;
  #L4b0ef4.  v3:= v1[v0] @kind object;
  #L4b0ef8.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$c;.a:()V` @kind virtual;
  #L4b0efe.  v0:= v0 + 1;
  #L4b0f02.  goto L4b0ef0;
  #L4b0f04.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b0e6c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4b0e72.  v0:= temp;
  #L4b0e74.  if v0 > 0 then goto L4b0e7c;
  #L4b0e78.  v0:= 1I;
  #L4b0e7a.  goto L4b0e7e;
  #L4b0e7c.  v0:= 0I;
  #L4b0e7e.  return v0;
}
