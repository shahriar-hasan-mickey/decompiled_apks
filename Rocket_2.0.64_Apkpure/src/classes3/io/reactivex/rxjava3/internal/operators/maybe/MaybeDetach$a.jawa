record `io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.a` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.b` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDetach$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4aaf5c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4aaf62.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4aaf66.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDetach$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aaf78.  v0:= 0I;
  #L4aaf7a.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v0 @kind object;
  #L4aaf7e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4aaf82.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4aaf88.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4aaf8c.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4aaf90.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDetach$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aaf3c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4aaf40.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4aaf46.  v0:= temp;
  #L4aaf48.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDetach$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4aafa4.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4aafa8.  v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4aafac.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4aafb0.  if v0 == 0 then goto L4aafc0;
  #L4aafb4.  v1:= 0I;
  #L4aafb6.  v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4aafba.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4aafc0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDetach$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4aafd4.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4aafd8.  v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4aafdc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4aafe0.  if v0 == 0 then goto L4aaff0;
  #L4aafe4.  v1:= 0I;
  #L4aafe6.  v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4aafea.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4aaff0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDetach$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ab004.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ab008.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ab00e.  v0:= temp;
  #L4ab010.  if v0 == 0 then goto L4ab022;
  #L4ab014.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4ab018.  v2:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4ab01c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4ab022.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDetach$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ab034.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4ab038.  v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4ab03c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4ab040.  if v0 == 0 then goto L4ab050;
  #L4ab044.  v1:= 0I;
  #L4ab046.  v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4ab04a.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4ab050.  return @kind void;
}
