record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromFuture` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Flowable` @kind class {
  `java.util.concurrent.Future` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromFuture.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromFuture.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromFuture.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromFuture` v0 @kind this, `java.util.concurrent.Future` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromFuture;.<init>:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L494354.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.<init>:()V` @kind direct;
  #L49435a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromFuture.b` @type ^`java.util.concurrent.Future` := v1 @kind object;
  #L49435e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromFuture.c` @type ^`long` := v2 @kind wide;
  #L494362.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromFuture.d` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L494366.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromFuture` v5 @kind this, `org.reactivestreams.Subscriber` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromFuture;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L494378.  v0:= new `io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription`;
  #L49437c.  call `<init>`(v0, v6) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L494382.  call `onSubscribe`(v6, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L494388.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromFuture.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L49438c.  if v1 == 0 then goto L4943a2;
  #L494390.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromFuture.b` @type ^`java.util.concurrent.Future` @kind object;
  #L494394.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromFuture.c` @type ^`long` @kind wide;
  #L494398.  call temp:= `get`(v2, v3, v1) @signature `Ljava/util/concurrent/Future;.get:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @kind interface;
  #L49439e.  v1:= temp @kind object;
  #L4943a0.  goto L4943ae;
  #L4943a2.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromFuture.b` @type ^`java.util.concurrent.Future` @kind object;
  #L4943a6.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/Future;.get:()Ljava/lang/Object;` @kind interface;
  #L4943ac.  v1:= temp @kind object;
  #L4943ae.  if v1 != 0 then goto L4943c6;
  #L4943b2.  v0:= "The future returned a null value." @kind object;
  #L4943b6.  call temp:= `createNullPointerException`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;` @kind static;
  #L4943bc.  v0:= temp @kind object;
  #L4943be.  call `onError`(v6, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4943c4.  goto L4943cc;
  #L4943c6.  call `complete`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L4943cc.  return @kind void;
  #L4943ce.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4943d0.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4943d6.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.isCancelled:()Z` @kind virtual;
  #L4943dc.  v0:= temp;
  #L4943de.  if v0 != 0 then goto L4943e8;
  #L4943e2.  call `onError`(v6, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4943e8.  return @kind void;
  catch `java.lang.Throwable` @[L494388..L4943ae] goto L4943ce;
}
