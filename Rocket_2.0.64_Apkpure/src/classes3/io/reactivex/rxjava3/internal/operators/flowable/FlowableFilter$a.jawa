record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber` @kind class {
  `io.reactivex.rxjava3.functions.Predicate` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$a.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$a` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFilter$a;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L490dc4.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;)V` @kind direct;
  #L490dca.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$a.a` @type ^`io.reactivex.rxjava3.functions.Predicate` := v2 @kind object;
  #L490dce.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFilter$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L490de0.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFilter$a;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L490de6.  v3:= temp;
  #L490de8.  if v3 != 0 then goto L490dfa;
  #L490dec.  v3:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L490df0.  v0:= 1L;
  #L490df4.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L490dfa.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFilter$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L490d78.  v0:= v4.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.qs` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind object;
  #L490d7c.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$a.a` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L490d80.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L490d86.  v2:= temp @kind object;
  #L490d88.  if v2 != 0 then goto L490d90;
  #L490d8c.  v0:= 0I;
  #L490d8e.  return v0 @kind object;
  #L490d90.  call temp:= `test`(v1, v2) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L490d96.  v3:= temp;
  #L490d98.  if v3 == 0 then goto L490d9e;
  #L490d9c.  return v2 @kind object;
  #L490d9e.  v2:= v4.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L490da2.  v3:= 2I;
  #L490da4.  if v2 != v3 then goto L490d80;
  #L490da8.  v2:= 1L;
  #L490dac.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L490db2.  goto L490d80;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFilter$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L490d5c.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L490d62.  v1:= temp;
  #L490d64.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFilter$a;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L490cec.  v0:= v3.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L490cf0.  v1:= 0I;
  #L490cf2.  if v0 == 0 then goto L490cf8;
  #L490cf6.  return v1;
  #L490cf8.  v0:= v3.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L490cfc.  if v0 == 0 then goto L490d10;
  #L490d00.  v4:= v3.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L490d04.  v0:= 0I;
  #L490d06.  call temp:= `tryOnNext`(v4, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L490d0c.  v4:= temp;
  #L490d0e.  return v4;
  #L490d10.  v0:= 1I;
  #L490d12.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$a.a` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L490d16.  call temp:= `test`(v2, v4) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L490d1c.  v2:= temp;
  #L490d1e.  if v2 == 0 then goto L490d34;
  #L490d22.  v2:= v3.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L490d26.  call temp:= `tryOnNext`(v2, v4) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L490d2c.  v4:= temp;
  #L490d2e.  if v4 == 0 then goto L490d34;
  #L490d32.  v1:= 1I;
  #L490d34.  return v1;
  #L490d36.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L490d38.  call `fail`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L490d3e.  return v0;
  catch `java.lang.Throwable` @[L490d12..L490d1e] goto L490d36;
}
