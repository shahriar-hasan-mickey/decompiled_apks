record `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.rxjava3.core.FlowableEmitter` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48d634.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L48d63a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L48d63e.  v1:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L48d642.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L48d648.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b.b` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L48d64c.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.a:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L48d684.  call temp:= `isCancelled`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L48d68a.  v0:= temp;
  #L48d68c.  if v0 == 0 then goto L48d692;
  #L48d690.  return @kind void;
  #L48d692.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48d696.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L48d69c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b.b` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L48d6a0.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L48d6a6.  return @kind void;
  #L48d6a8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48d6aa.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b.b` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L48d6ae.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L48d6b4.  throw v0;
  catch `java.lang.Throwable` @[L48d692..L48d69c] goto L48d6a8;
}
procedure `boolean` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.b:(Ljava/lang/Throwable;)Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L48d4f8.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L48d4fe.  v0:= temp;
  #L48d500.  if v0 == 0 then goto L48d508;
  #L48d504.  v2:= 0I;
  #L48d506.  return v2;
  #L48d508.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48d50c.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48d512.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b.b` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L48d516.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L48d51c.  v2:= 1I;
  #L48d51e.  return v2;
  #L48d520.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48d522.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b.b` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L48d526.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L48d52c.  throw v2;
  catch `java.lang.Throwable` @[L48d508..L48d512] goto L48d520;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.c:()V` @AccessFlag  {
    temp;

  #L48d720.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d660.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b.b` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L48d664.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L48d66a.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.d:()V` @kind virtual;
  #L48d670.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.d:()V` @AccessFlag  {
    temp;

  #L48d734.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.e:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;

  #L48d56c.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.b:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L48d572.  v1:= temp;
  #L48d574.  return v1;
}
procedure `boolean` `isCancelled`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d54c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b.b` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L48d550.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.isDisposed:()Z` @kind virtual;
  #L48d556.  v0:= temp;
  #L48d558.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L48d6d4.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.a:()V` @kind virtual;
  #L48d6da.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d6ec.  if v2 != 0 then goto L48d6fc;
  #L48d6f0.  v2:= "onError called with a null Throwable." @kind object;
  #L48d6f4.  call temp:= `createNullPointerException`(v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;` @kind static;
  #L48d6fa.  v2:= temp @kind object;
  #L48d6fc.  call temp:= `e`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.e:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L48d702.  v0:= temp;
  #L48d704.  if v0 != 0 then goto L48d70e;
  #L48d708.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L48d70e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d748.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L48d74e.  v0:= temp;
  #L48d750.  if v0 == 0 then goto L48d760;
  #L48d754.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L48d75a.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.c:()V` @kind virtual;
  #L48d760.  return @kind void;
}
procedure `long` `requested`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.requested:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48d618.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L48d61e.  v0:= temp @kind wide;
  #L48d620.  return v0 @kind wide;
}
procedure `io.reactivex.rxjava3.core.FlowableEmitter` `serialize`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.serialize:()Lio/reactivex/rxjava3/core/FlowableEmitter;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d5b4.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i`;
  #L48d5b8.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;)V` @kind direct;
  #L48d5be.  return v0 @kind object;
}
procedure `void` `setCancellable`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` v1 @kind this, `io.reactivex.rxjava3.functions.Cancellable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.setCancellable:(Lio/reactivex/rxjava3/functions/Cancellable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d774.  v0:= new `io.reactivex.rxjava3.internal.disposables.CancellableDisposable`;
  #L48d778.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/CancellableDisposable;.<init>:(Lio/reactivex/rxjava3/functions/Cancellable;)V` @kind direct;
  #L48d77e.  call `setDisposable`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.setDisposable:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L48d784.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.setDisposable:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d798.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b.b` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L48d79c.  call temp:= `update`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.update:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L48d7a2.  return @kind void;
}
procedure `java.lang.String` `toString`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L48d5d0.  v0:= 2I;
  #L48d5d2.  v0:= new `java.lang.Object`[v0];
  #L48d5d6.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L48d5dc.  v1:= temp @kind object;
  #L48d5de.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L48d5e4.  v1:= temp @kind object;
  #L48d5e6.  v2:= 0I;
  #L48d5e8.  v0[v2]:= v1 @kind object;
  #L48d5ec.  call temp:= `toString`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.toString:()Ljava/lang/String;` @kind super;
  #L48d5f2.  v1:= temp @kind object;
  #L48d5f4.  v2:= 1I;
  #L48d5f6.  v0[v2]:= v1 @kind object;
  #L48d5fa.  v1:= "%s{%s}" @kind object;
  #L48d5fe.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L48d604.  v0:= temp @kind object;
  #L48d606.  return v0 @kind object;
}
procedure `boolean` `tryOnError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48d588.  if v1 != 0 then goto L48d598;
  #L48d58c.  v1:= "tryOnError called with a null Throwable." @kind object;
  #L48d590.  call temp:= `createNullPointerException`(v1) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;` @kind static;
  #L48d596.  v1:= temp @kind object;
  #L48d598.  call temp:= `e`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.e:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L48d59e.  v1:= temp;
  #L48d5a0.  return v1;
}
