record `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c`[] `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.g` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4ce8d8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4ce8de.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.a` @type ^`io.reactivex.rxjava3.core.Observer` := v2 @kind object;
  #L4ce8e2.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.b` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4ce8e6.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c`[v4];
  #L4ce8ea.  v3:= 0I;
  #L4ce8ec.  if v3 >= v4 then goto L4ce904;
  #L4ce8f0.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c`;
  #L4ce8f4.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;I)V` @kind direct;
  #L4ce8fa.  v2[v3]:= v0 @kind object;
  #L4ce8fe.  v3:= v3 + 1;
  #L4ce902.  goto L4ce8ec;
  #L4ce904.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c`[] := v2 @kind object;
  #L4ce908.  v2:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L4ce90c.  call `<init>`(v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L4ce912.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v2 @kind object;
  #L4ce916.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4ce91a.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4ce920.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4ce924.  v2:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4ce928.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4ce92e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v2 @kind object;
  #L4ce932.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.a:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4ce944.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c`[] @kind object;
  #L4ce948.  v1:= 0I;
  #L4ce94a.  v2:= length @variable v0;
  #L4ce94c.  if v1 >= v2 then goto L4ce964;
  #L4ce950.  if v1 == v4 then goto L4ce95e;
  #L4ce954.  v2:= v0[v1] @kind object;
  #L4ce958.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$c;.a:()V` @kind virtual;
  #L4ce95e.  v1:= v1 + 1;
  #L4ce962.  goto L4ce94a;
  #L4ce964.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` v0 @kind this, `int` v1 , `boolean` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.b:(IZ)V` @AccessFlag  {
    temp;

  #L4ce9b0.  if v2 != 0 then goto L4ce9ce;
  #L4ce9b4.  v2:= 1I;
  #L4ce9b6.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` := v2 @kind boolean;
  #L4ce9ba.  call `a`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L4ce9c0.  v1:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ce9c4.  v2:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ce9c8.  call `onComplete`(v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/rxjava3/core/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4ce9ce.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` v1 @kind this, `int` v2 , `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.c:(ILjava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4ce9e0.  v0:= 1I;
  #L4ce9e2.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` := v0 @kind boolean;
  #L4ce9e6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ce9ea.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4ce9f0.  call `a`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L4ce9f6.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ce9fa.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ce9fe.  call `onError`(v2, v3, v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onError:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4cea04.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` v1 @kind this, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.d:(ILjava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;

  #L4cea18.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L4cea1c.  call `set`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L4cea22.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ce978.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ce97c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4ce982.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c`[] @kind object;
  #L4ce986.  v1:= length @variable v0;
  #L4ce988.  v2:= 0I;
  #L4ce98a.  if v2 >= v1 then goto L4ce99e;
  #L4ce98e.  v3:= v0[v2] @kind object;
  #L4ce992.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$c;.a:()V` @kind virtual;
  #L4ce998.  v2:= v2 + 1;
  #L4ce99c.  goto L4ce98a;
  #L4ce99e.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` v5 @kind this, `io.reactivex.rxjava3.core.ObservableSource`[] v6 @kind object, `int` v7 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.e:([Lio/reactivex/rxjava3/core/ObservableSource;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4ceb60.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c`[] @kind object;
  #L4ceb64.  v1:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ceb68.  v2:= 0I;
  #L4ceb6a.  if v2 >= v7 then goto L4ceba4;
  #L4ceb6e.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ceb74.  v3:= temp @kind object;
  #L4ceb76.  v3:= (`io.reactivex.rxjava3.disposables.Disposable`) v3 @kind object;
  #L4ceb7a.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ceb80.  v3:= temp;
  #L4ceb82.  if v3 != 0 then goto L4ceba4;
  #L4ceb86.  v3:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` @kind boolean;
  #L4ceb8a.  if v3 == 0 then goto L4ceb90;
  #L4ceb8e.  goto L4ceba4;
  #L4ceb90.  v3:= v6[v2] @kind object;
  #L4ceb94.  v4:= v0[v2] @kind object;
  #L4ceb98.  call `subscribe`(v3, v4) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4ceb9e.  v2:= v2 + 1;
  #L4ceba2.  goto L4ceb6a;
  #L4ceba4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ce8ac.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ce8b0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ce8b6.  v0:= temp @kind object;
  #L4ce8b8.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4ce8bc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ce8c2.  v0:= temp;
  #L4ce8c4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4cea34.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` @kind boolean;
  #L4cea38.  if v0 != 0 then goto L4cea58;
  #L4cea3c.  v0:= 1I;
  #L4cea3e.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` := v0 @kind boolean;
  #L4cea42.  v0:= -1I;
  #L4cea44.  call `a`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L4cea4a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4cea4e.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4cea52.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/rxjava3/core/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4cea58.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4cea6c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` @kind boolean;
  #L4cea70.  if v0 == 0 then goto L4cea7c;
  #L4cea74.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4cea7a.  return @kind void;
  #L4cea7c.  v0:= 1I;
  #L4cea7e.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` := v0 @kind boolean;
  #L4cea82.  v0:= -1I;
  #L4cea84.  call `a`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L4cea8a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4cea8e.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4cea92.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onError:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4cea98.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ceaac.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` @kind boolean;
  #L4ceab0.  if v0 == 0 then goto L4ceab6;
  #L4ceab4.  return @kind void;
  #L4ceab6.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L4ceaba.  call temp:= `length`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L4ceac0.  v1:= temp;
  #L4ceac2.  v2:= v1 + 1;
  #L4ceac6.  v2:= new `java.lang.Object`[v2];
  #L4ceaca.  v3:= 0I;
  #L4ceacc.  v2[v3]:= v5 @kind object;
  #L4cead0.  if v3 >= v1 then goto L4ceaec;
  #L4cead4.  call temp:= `get`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4ceada.  v5:= temp @kind object;
  #L4ceadc.  if v5 != 0 then goto L4ceae2;
  #L4ceae0.  return @kind void;
  #L4ceae2.  v3:= v3 + 1;
  #L4ceae6.  v2[v3]:= v5 @kind object;
  #L4ceaea.  goto L4cead0;
  #L4ceaec.  v5:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4ceaf0.  call temp:= `apply`(v5, v2) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4ceaf6.  v5:= temp @kind object;
  #L4ceaf8.  v0:= "combiner returned a null value" @kind object;
  #L4ceafc.  call temp:= `requireNonNull`(v5, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ceb02.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ceb06.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ceb0a.  call `onNext`(v0, v5, v4, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onNext:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4ceb10.  return @kind void;
  #L4ceb12.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ceb14.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ceb1a.  call `dispose`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.dispose:()V` @kind virtual;
  #L4ceb20.  call `onError`(v4, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ceb26.  return @kind void;
  catch `java.lang.Throwable` @[L4ceaec..L4ceb02] goto L4ceb12;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ceb44.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ceb48.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ceb4e.  return @kind void;
}
