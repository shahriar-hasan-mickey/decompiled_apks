record `io.reactivex.rxjava3.internal.operators.maybe.MaybeError` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Maybe` @kind class {
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeError.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeError` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeError;.<init>:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4abc28.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.<init>:()V` @kind direct;
  #L4abc2e.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeError.a` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4abc32.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeError` v1 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeError;.subscribeActual:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L4abc44.  call temp:= `a`() @signature `Ls0/d;.a:()Lio/reactivex/rxjava3/disposables/Disposable;` @kind static;
  #L4abc4a.  v0:= temp @kind object;
  #L4abc4c.  call `onSubscribe`(v2, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4abc52.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeError.a` @type ^`java.lang.Throwable` @kind object;
  #L4abc56.  call `onError`(v2, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4abc5c.  return @kind void;
}
