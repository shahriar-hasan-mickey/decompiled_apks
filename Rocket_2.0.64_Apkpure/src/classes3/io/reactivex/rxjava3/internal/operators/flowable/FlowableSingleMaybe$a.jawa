record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.b` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.c` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingleMaybe$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a0f30.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a0f36.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4a0f3a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingleMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a0f4c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a0f50.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a0f56.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4a0f5a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4a0f5e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingleMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a0f0c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a0f10.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4a0f14.  if v0 != v1 then goto L4a0f1c;
  #L4a0f18.  v0:= 1I;
  #L4a0f1a.  goto L4a0f1e;
  #L4a0f1c.  v0:= 0I;
  #L4a0f1e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingleMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a0f70.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.c` @type ^`boolean` @kind boolean;
  #L4a0f74.  if v0 == 0 then goto L4a0f7a;
  #L4a0f78.  return @kind void;
  #L4a0f7a.  v0:= 1I;
  #L4a0f7c.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4a0f80.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4a0f84.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4a0f88.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.d` @type ^`java.lang.Object` @kind object;
  #L4a0f8c.  v1:= 0I;
  #L4a0f8e.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.d` @type ^`java.lang.Object` := v1 @kind object;
  #L4a0f92.  if v0 != 0 then goto L4a0fa2;
  #L4a0f96.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4a0f9a.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4a0fa0.  goto L4a0fac;
  #L4a0fa2.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4a0fa6.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4a0fac.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingleMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a0fc0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.c` @type ^`boolean` @kind boolean;
  #L4a0fc4.  if v0 == 0 then goto L4a0fd0;
  #L4a0fc8.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4a0fce.  return @kind void;
  #L4a0fd0.  v0:= 1I;
  #L4a0fd2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4a0fd6.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4a0fda.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4a0fde.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4a0fe2.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a0fe8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingleMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a0ffc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.c` @type ^`boolean` @kind boolean;
  #L4a1000.  if v0 == 0 then goto L4a1006;
  #L4a1004.  return @kind void;
  #L4a1006.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.d` @type ^`java.lang.Object` @kind object;
  #L4a100a.  if v0 == 0 then goto L4a1040;
  #L4a100e.  v3:= 1I;
  #L4a1010.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.c` @type ^`boolean` := v3 @kind boolean;
  #L4a1014.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a1018.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a101e.  v3:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4a1022.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4a1026.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4a102a.  v0:= new `java.lang.IllegalArgumentException`;
  #L4a102e.  v1:= "Sequence contains more than one element!" @kind object;
  #L4a1032.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a1038.  call `onError`(v3, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a103e.  return @kind void;
  #L4a1040.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.d` @type ^`java.lang.Object` := v3 @kind object;
  #L4a1044.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingleMaybe$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a1058.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a105c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4a1062.  v0:= temp;
  #L4a1064.  if v0 == 0 then goto L4a1086;
  #L4a1068.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4a106c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4a1070.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4a1076.  v0:= 9223372036854775807L;
  #L4a1080.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a1086.  return @kind void;
}
