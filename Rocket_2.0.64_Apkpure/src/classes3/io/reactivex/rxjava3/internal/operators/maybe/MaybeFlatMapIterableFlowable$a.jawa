record `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.d` @AccessFlag ;
  `java.util.Iterator` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.f` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.g` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ac380.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L4ac386.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4ac38a.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4ac38e.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4ac392.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4ac398.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4ac39c.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ac3b0.  v0:= 1I;
  #L4ac3b2.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.f` @type ^`boolean` := v0 @kind boolean;
  #L4ac3b6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ac3ba.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ac3c0.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4ac3c4.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4ac3c8.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ac3dc.  v0:= 0I;
  #L4ac3de.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` := v0 @kind object;
  #L4ac3e2.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v11 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4ac3f4.  call temp:= `getAndIncrement`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ac3fa.  v0:= temp;
  #L4ac3fc.  if v0 == 0 then goto L4ac402;
  #L4ac400.  return @kind void;
  #L4ac402.  v0:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ac406.  v1:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L4ac40a.  v2:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.g` @type ^`boolean` @kind boolean;
  #L4ac40e.  if v2 == 0 then goto L4ac426;
  #L4ac412.  if v1 == 0 then goto L4ac426;
  #L4ac416.  v1:= 0I;
  #L4ac418.  call `onNext`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ac41e.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4ac424.  return @kind void;
  #L4ac426.  v2:= 1I;
  #L4ac428.  if v1 == 0 then goto L4ac4d8;
  #L4ac42c.  v3:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4ac430.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4ac436.  v3:= temp @kind wide;
  #L4ac438.  v5:= 9223372036854775807L;
  #L4ac442.  v7:= lcmp(v3, v5);
  #L4ac446.  if v7 != 0 then goto L4ac452;
  #L4ac44a.  call `e`(v11, v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.e:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @kind virtual;
  #L4ac450.  return @kind void;
  #L4ac452.  v5:= 0L;
  #L4ac456.  v7:= v5 @kind wide;
  #L4ac458.  v9:= lcmp(v7, v3);
  #L4ac45c.  if v9 == 0 then goto L4ac4c6;
  #L4ac460.  v9:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L4ac464.  if v9 == 0 then goto L4ac46a;
  #L4ac468.  return @kind void;
  #L4ac46a.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4ac470.  v9:= temp @kind object;
  #L4ac472.  v10:= "The iterator returned a null value" @kind object;
  #L4ac476.  call temp:= `requireNonNull`(v9, v10) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ac47c.  call `onNext`(v0, v9) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ac482.  v9:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L4ac486.  if v9 == 0 then goto L4ac48c;
  #L4ac48a.  return @kind void;
  #L4ac48c.  v9:= 1L;
  #L4ac490.  v7:= v7 + v9 @kind long;
  #L4ac492.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ac498.  v9:= temp;
  #L4ac49a.  if v9 != 0 then goto L4ac458;
  #L4ac49e.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4ac4a4.  return @kind void;
  #L4ac4a6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac4a8.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ac4ae.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ac4b4.  return @kind void;
  #L4ac4b6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac4b8.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ac4be.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ac4c4.  return @kind void;
  #L4ac4c6.  v3:= lcmp(v7, v5);
  #L4ac4ca.  if v3 == 0 then goto L4ac4d8;
  #L4ac4ce.  v3:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4ac4d2.  call temp:= `produced`(v3, v7) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4ac4d8.  v2:= -v2 @kind int;
  #L4ac4da.  call temp:= `addAndGet`(v11, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4ac4e0.  v2:= temp;
  #L4ac4e2.  if v2 != 0 then goto L4ac4e8;
  #L4ac4e6.  return @kind void;
  #L4ac4e8.  if v1 != 0 then goto L4ac428;
  #L4ac4ec.  v1:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L4ac4f0.  goto L4ac428;
  catch `java.lang.Throwable` @[L4ac46a..L4ac47c] goto L4ac4b6;
  catch `java.lang.Throwable` @[L4ac492..L4ac49a] goto L4ac4a6;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `java.util.Iterator` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.e:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @AccessFlag  {
    temp;
    v0;

  #L4ac51c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L4ac520.  if v0 == 0 then goto L4ac526;
  #L4ac524.  return @kind void;
  #L4ac526.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4ac52c.  v0:= temp @kind object;
  #L4ac52e.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ac534.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L4ac538.  if v0 == 0 then goto L4ac53e;
  #L4ac53c.  return @kind void;
  #L4ac53e.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ac544.  v0:= temp;
  #L4ac546.  if v0 != 0 then goto L4ac51c;
  #L4ac54a.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4ac550.  return @kind void;
  #L4ac552.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac554.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ac55a.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ac560.  return @kind void;
  #L4ac562.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac564.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ac56a.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ac570.  return @kind void;
  catch `java.lang.Throwable` @[L4ac526..L4ac52e] goto L4ac562;
  catch `java.lang.Throwable` @[L4ac53e..L4ac546] goto L4ac552;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ac2fc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L4ac300.  if v0 != 0 then goto L4ac308;
  #L4ac304.  v0:= 1I;
  #L4ac306.  goto L4ac30a;
  #L4ac308.  v0:= 0I;
  #L4ac30a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ac59c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ac5a0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4ac5a6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ac5b8.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4ac5bc.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4ac5c0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ac5c4.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ac5ca.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ac5dc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ac5e0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ac5e6.  v0:= temp;
  #L4ac5e8.  if v0 == 0 then goto L4ac5fa;
  #L4ac5ec.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4ac5f0.  v2:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ac5f4.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4ac5fa.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ac60c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4ac610.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4ac616.  v2:= temp @kind object;
  #L4ac618.  v2:= (`java.lang.Iterable`) v2 @kind object;
  #L4ac61c.  call temp:= `iterator`(v2) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4ac622.  v2:= temp @kind object;
  #L4ac624.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ac62a.  v0:= temp;
  #L4ac62c.  if v0 != 0 then goto L4ac63c;
  #L4ac630.  v2:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ac634.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4ac63a.  return @kind void;
  #L4ac63c.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` := v2 @kind object;
  #L4ac640.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.drain:()V` @kind virtual;
  #L4ac646.  return @kind void;
  #L4ac648.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ac64a.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ac650.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ac654.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ac65a.  return @kind void;
  catch `java.lang.Throwable` @[L4ac60c..L4ac62c] goto L4ac648;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ac340.  v0:= v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L4ac344.  v1:= 0I;
  #L4ac346.  if v0 == 0 then goto L4ac36e;
  #L4ac34a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4ac350.  v2:= temp @kind object;
  #L4ac352.  v3:= "The iterator returned a null value" @kind object;
  #L4ac356.  call temp:= `requireNonNull`(v2, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ac35c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ac362.  v0:= temp;
  #L4ac364.  if v0 != 0 then goto L4ac36c;
  #L4ac368.  v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` := v1 @kind object;
  #L4ac36c.  return v2 @kind object;
  #L4ac36e.  return v1 @kind object;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ac678.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4ac67e.  v0:= temp;
  #L4ac680.  if v0 == 0 then goto L4ac694;
  #L4ac684.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4ac688.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4ac68e.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.drain:()V` @kind virtual;
  #L4ac694.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ac31c.  v0:= 2I;
  #L4ac31e.  v2:= v2 ^& v0 @kind int;
  #L4ac320.  if v2 == 0 then goto L4ac32c;
  #L4ac324.  v2:= 1I;
  #L4ac326.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.g` @type ^`boolean` := v2 @kind boolean;
  #L4ac32a.  return v0;
  #L4ac32c.  v2:= 0I;
  #L4ac32e.  return v2;
}
