record `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.f` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.g` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.h` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.i` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.j` @AccessFlag VOLATILE;
}
global `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.k` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c97d8.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a`;
  #L4c97dc.  v1:= 0I;
  #L4c97de.  v2:= -1L;
  #L4c97e2.  v4:= 1I;
  #L4c97e4.  call `<init>`(v0, v1, v2, v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;JI)V` @kind direct;
  #L4c97ea.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.k` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a` := v0 @kind object;
  #L4c97ee.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$a;.a:()V` @kind virtual;
  #L4c97f4.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `int` v4 , `boolean` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4c9808.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4c980e.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c9812.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c9818.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4c981c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` := v2 @kind object;
  #L4c9820.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.b` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4c9824.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.c` @type ^`int` := v4;
  #L4c9828.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.d` @type ^`boolean` := v5 @kind boolean;
  #L4c982c.  v2:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4c9830.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4c9836.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v2 @kind object;
  #L4c983a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4c9888.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c988c.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.k` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a` @kind object;
  #L4c9890.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4c9896.  v0:= temp @kind object;
  #L4c9898.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a`) v0 @kind object;
  #L4c989c.  if v0 == 0 then goto L4c98a6;
  #L4c98a0.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$a;.a:()V` @kind virtual;
  #L4c98a6.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` v13 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L4c98b8.  call temp:= `getAndIncrement`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c98be.  v0:= temp;
  #L4c98c0.  if v0 == 0 then goto L4c98c6;
  #L4c98c4.  return @kind void;
  #L4c98c6.  v0:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c98ca.  v1:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c98ce.  v2:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L4c98d2.  v3:= 1I;
  #L4c98d4.  v4:= 1I;
  #L4c98d6.  v5:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L4c98da.  if v5 == 0 then goto L4c98e0;
  #L4c98de.  return @kind void;
  #L4c98e0.  v5:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.f` @type ^`boolean` @kind boolean;
  #L4c98e4.  v6:= 0I;
  #L4c98e6.  if v5 == 0 then goto L4c9954;
  #L4c98ea.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c98f0.  v5:= temp @kind object;
  #L4c98f2.  if v5 != 0 then goto L4c98fa;
  #L4c98f6.  v5:= 1I;
  #L4c98f8.  goto L4c98fc;
  #L4c98fa.  v5:= 0I;
  #L4c98fc.  if v2 == 0 then goto L4c9928;
  #L4c9900.  if v5 == 0 then goto L4c9954;
  #L4c9904.  v1:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c9908.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c990e.  v1:= temp @kind object;
  #L4c9910.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L4c9914.  if v1 == 0 then goto L4c9920;
  #L4c9918.  call `onError`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c991e.  goto L4c9926;
  #L4c9920.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4c9926.  return @kind void;
  #L4c9928.  v7:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c992c.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c9932.  v7:= temp @kind object;
  #L4c9934.  v7:= (`java.lang.Throwable`) v7 @kind object;
  #L4c9938.  if v7 == 0 then goto L4c9948;
  #L4c993c.  v1:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c9940.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4c9946.  return @kind void;
  #L4c9948.  if v5 == 0 then goto L4c9954;
  #L4c994c.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4c9952.  return @kind void;
  #L4c9954.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c995a.  v5:= temp @kind object;
  #L4c995c.  v5:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a`) v5 @kind object;
  #L4c9960.  if v5 == 0 then goto L4c9a26;
  #L4c9964.  v7:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4c9968.  if v7 == 0 then goto L4c9a26;
  #L4c996c.  v8:= 0I;
  #L4c996e.  v9:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L4c9972.  if v9 == 0 then goto L4c9978;
  #L4c9976.  return @kind void;
  #L4c9978.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c997e.  v9:= temp @kind object;
  #L4c9980.  if v5 == v9 then goto L4c9988;
  #L4c9984.  v8:= 1I;
  #L4c9986.  goto L4c9a16;
  #L4c9988.  if v2 != 0 then goto L4c99ac;
  #L4c998c.  v9:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c9990.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c9996.  v9:= temp @kind object;
  #L4c9998.  v9:= (`java.lang.Throwable`) v9 @kind object;
  #L4c999c.  if v9 == 0 then goto L4c99ac;
  #L4c99a0.  v1:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c99a4.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4c99aa.  return @kind void;
  #L4c99ac.  v9:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.e` @type ^`boolean` @kind boolean;
  #L4c99b0.  v10:= 0I;
  #L4c99b2.  call temp:= `poll`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4c99b8.  v11:= temp @kind object;
  #L4c99ba.  goto L4c99f8;
  #L4c99bc.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c99be.  call `throwIfFatal`(v8) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c99c4.  v11:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c99c8.  call temp:= `tryAddThrowableOrReport`(v11, v8) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4c99ce.  call temp:= `compareAndSet`(v1, v5, v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c99d4.  if v2 != 0 then goto L4c99ee;
  #L4c99d8.  call `a`(v13) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.a:()V` @kind virtual;
  #L4c99de.  v8:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c99e2.  call `dispose`(v8) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c99e8.  v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.f` @type ^`boolean` := v3 @kind boolean;
  #L4c99ec.  goto L4c99f4;
  #L4c99ee.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$a;.a:()V` @kind virtual;
  #L4c99f4.  v11:= v10 @kind object;
  #L4c99f6.  v8:= 1I;
  #L4c99f8.  if v11 != 0 then goto L4c9a00;
  #L4c99fc.  v12:= 1I;
  #L4c99fe.  goto L4c9a02;
  #L4c9a00.  v12:= 0I;
  #L4c9a02.  if v9 == 0 then goto L4c9a12;
  #L4c9a06.  if v12 == 0 then goto L4c9a12;
  #L4c9a0a.  call temp:= `compareAndSet`(v1, v5, v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c9a10.  goto L4c9984;
  #L4c9a12.  if v12 == 0 then goto L4c9a1e;
  #L4c9a16.  if v8 == 0 then goto L4c9a26;
  #L4c9a1a.  goto L4c98d6;
  #L4c9a1e.  call `onNext`(v0, v11) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c9a24.  goto L4c996e;
  #L4c9a26.  v4:= -v4 @kind int;
  #L4c9a28.  call temp:= `addAndGet`(v13, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4c9a2e.  v4:= temp;
  #L4c9a30.  if v4 != 0 then goto L4c98d6;
  #L4c9a34.  return @kind void;
  catch `java.lang.Throwable` @[L4c99b2..L4c99ba] goto L4c99bc;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` v5 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a` v6 @kind object, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.c:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c9a54.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.b` @type ^`long` @kind wide;
  #L4c9a58.  v2:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.j` @type ^`long` @kind wide;
  #L4c9a5c.  v4:= lcmp(v0, v2);
  #L4c9a60.  if v4 != 0 then goto L4c9a98;
  #L4c9a64.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c9a68.  call temp:= `tryAddThrowable`(v0, v7) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4c9a6e.  v0:= temp;
  #L4c9a70.  if v0 == 0 then goto L4c9a98;
  #L4c9a74.  v7:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L4c9a78.  v0:= 1I;
  #L4c9a7a.  if v7 != 0 then goto L4c9a8c;
  #L4c9a7e.  v7:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c9a82.  call `dispose`(v7) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c9a88.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.f` @type ^`boolean` := v0 @kind boolean;
  #L4c9a8c.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4c9a90.  call `b`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.b:()V` @kind virtual;
  #L4c9a96.  goto L4c9a9e;
  #L4c9a98.  call `onError`(v7) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c9a9e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c984c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L4c9850.  if v0 != 0 then goto L4c9874;
  #L4c9854.  v0:= 1I;
  #L4c9856.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.g` @type ^`boolean` := v0 @kind boolean;
  #L4c985a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c985e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c9864.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.a:()V` @kind virtual;
  #L4c986a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c986e.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4c9874.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c97c0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L4c97c4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c9ab0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.f` @type ^`boolean` @kind boolean;
  #L4c9ab4.  if v0 != 0 then goto L4c9ac4;
  #L4c9ab8.  v0:= 1I;
  #L4c9aba.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.f` @type ^`boolean` := v0 @kind boolean;
  #L4c9abe.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.b:()V` @kind virtual;
  #L4c9ac4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c9ad8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.f` @type ^`boolean` @kind boolean;
  #L4c9adc.  if v0 != 0 then goto L4c9b0c;
  #L4c9ae0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c9ae4.  call temp:= `tryAddThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4c9aea.  v0:= temp;
  #L4c9aec.  if v0 == 0 then goto L4c9b0c;
  #L4c9af0.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L4c9af4.  if v2 != 0 then goto L4c9afe;
  #L4c9af8.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.a:()V` @kind virtual;
  #L4c9afe.  v2:= 1I;
  #L4c9b00.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.f` @type ^`boolean` := v2 @kind boolean;
  #L4c9b04.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.b:()V` @kind virtual;
  #L4c9b0a.  goto L4c9b12;
  #L4c9b0c.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c9b12.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c9b24.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.j` @type ^`long` @kind wide;
  #L4c9b28.  v2:= 1L;
  #L4c9b2c.  v0:= v0 + v2 @kind long;
  #L4c9b2e.  v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.j` @type ^`long` := v0 @kind wide;
  #L4c9b32.  v2:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c9b36.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c9b3c.  v2:= temp @kind object;
  #L4c9b3e.  v2:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a`) v2 @kind object;
  #L4c9b42.  if v2 == 0 then goto L4c9b4c;
  #L4c9b46.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$a;.a:()V` @kind virtual;
  #L4c9b4c.  v2:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c9b50.  call temp:= `apply`(v2, v5) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c9b56.  v5:= temp @kind object;
  #L4c9b58.  v2:= "The ObservableSource returned is null" @kind object;
  #L4c9b5c.  call temp:= `requireNonNull`(v5, v2) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c9b62.  v5:= (`io.reactivex.rxjava3.core.ObservableSource`) v5 @kind object;
  #L4c9b66.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a`;
  #L4c9b6a.  v3:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.c` @type ^`int`;
  #L4c9b6e.  call `<init>`(v2, v4, v0, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;JI)V` @kind direct;
  #L4c9b74.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c9b78.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c9b7e.  v0:= temp @kind object;
  #L4c9b80.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a`) v0 @kind object;
  #L4c9b84.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.k` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a` @kind object;
  #L4c9b88.  if v0 != v1 then goto L4c9b8e;
  #L4c9b8c.  goto L4c9ba4;
  #L4c9b8e.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c9b92.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c9b98.  v0:= temp;
  #L4c9b9a.  if v0 == 0 then goto L4c9b74;
  #L4c9b9e.  call `subscribe`(v5, v2) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4c9ba4.  return @kind void;
  #L4c9ba6.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c9ba8.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c9bae.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c9bb2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c9bb8.  call `onError`(v4, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c9bbe.  return @kind void;
  catch `java.lang.Throwable` @[L4c9b4c..L4c9b66] goto L4c9ba6;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c9bdc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c9be0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4c9be6.  v0:= temp;
  #L4c9be8.  if v0 == 0 then goto L4c9bfa;
  #L4c9bec.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4c9bf0.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c9bf4.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4c9bfa.  return @kind void;
}
