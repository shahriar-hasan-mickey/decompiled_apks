record `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a$a` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.g` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.h` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.i` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.k` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.l` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b9410.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4b9416.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4b941a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4b941e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.c` @type ^`int` := v3;
  #L4b9422.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.f` @type ^`boolean` := v4 @kind boolean;
  #L4b9426.  v2:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4b942a.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4b9430.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v2 @kind object;
  #L4b9434.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a$a`;
  #L4b9438.  call `<init>`(v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a;)V` @kind direct;
  #L4b943e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a$a` := v2 @kind object;
  #L4b9442.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a` v7 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4b948c.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4b9492.  v0:= temp;
  #L4b9494.  if v0 == 0 then goto L4b949a;
  #L4b9498.  return @kind void;
  #L4b949a.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b949e.  v1:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4b94a2.  v2:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b94a6.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.i` @type ^`boolean` @kind boolean;
  #L4b94aa.  if v3 != 0 then goto L4b95c8;
  #L4b94ae.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.k` @type ^`boolean` @kind boolean;
  #L4b94b2.  if v3 == 0 then goto L4b94be;
  #L4b94b6.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b94bc.  return @kind void;
  #L4b94be.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.f` @type ^`boolean` @kind boolean;
  #L4b94c2.  v4:= 1I;
  #L4b94c4.  if v3 != 0 then goto L4b94ea;
  #L4b94c8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b94ce.  v3:= temp @kind object;
  #L4b94d0.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L4b94d4.  if v3 == 0 then goto L4b94ea;
  #L4b94d8.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b94de.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.k` @type ^`boolean` := v4 @kind boolean;
  #L4b94e2.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4b94e8.  return @kind void;
  #L4b94ea.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.j` @type ^`boolean` @kind boolean;
  #L4b94ee.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4b94f4.  v5:= temp @kind object;
  #L4b94f6.  if v5 != 0 then goto L4b94fe;
  #L4b94fa.  v6:= 1I;
  #L4b94fc.  goto L4b9500;
  #L4b94fe.  v6:= 0I;
  #L4b9500.  if v3 == 0 then goto L4b9514;
  #L4b9504.  if v6 == 0 then goto L4b9514;
  #L4b9508.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.k` @type ^`boolean` := v4 @kind boolean;
  #L4b950c.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4b9512.  return @kind void;
  #L4b9514.  if v6 != 0 then goto L4b95c8;
  #L4b9518.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4b951c.  call temp:= `apply`(v3, v5) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b9522.  v3:= temp @kind object;
  #L4b9524.  v5:= "The mapper returned a null ObservableSource" @kind object;
  #L4b9528.  call temp:= `requireNonNull`(v3, v5) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b952e.  v3:= (`io.reactivex.rxjava3.core.ObservableSource`) v3 @kind object;
  #L4b9532.  v5:= instanceof @variable v3 @type ^`io.reactivex.rxjava3.functions.Supplier` @kind boolean;
  #L4b9536.  if v5 == 0 then goto L4b956a;
  #L4b953a.  v3:= (`io.reactivex.rxjava3.functions.Supplier`) v3 @kind object;
  #L4b953e.  call temp:= `get`(v3) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4b9544.  v3:= temp @kind object;
  #L4b9546.  if v3 == 0 then goto L4b94a6;
  #L4b954a.  v4:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.k` @type ^`boolean` @kind boolean;
  #L4b954e.  if v4 != 0 then goto L4b94a6;
  #L4b9552.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b9558.  goto L4b94a6;
  #L4b955a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b955c.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b9562.  call temp:= `tryAddThrowableOrReport`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b9568.  goto L4b94a6;
  #L4b956a.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.i` @type ^`boolean` := v4 @kind boolean;
  #L4b956e.  v4:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a$a` @kind object;
  #L4b9572.  call `subscribe`(v3, v4) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4b9578.  goto L4b95c8;
  #L4b957a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b957c.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b9582.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.k` @type ^`boolean` := v4 @kind boolean;
  #L4b9586.  v4:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b958a.  call `dispose`(v4) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b9590.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b9596.  call temp:= `tryAddThrowableOrReport`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b959c.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4b95a2.  return @kind void;
  #L4b95a4.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b95a6.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b95ac.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.k` @type ^`boolean` := v4 @kind boolean;
  #L4b95b0.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b95b4.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b95ba.  call temp:= `tryAddThrowableOrReport`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b95c0.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4b95c6.  return @kind void;
  #L4b95c8.  call temp:= `decrementAndGet`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4b95ce.  v3:= temp;
  #L4b95d0.  if v3 != 0 then goto L4b94a6;
  #L4b95d4.  return @kind void;
  catch `java.lang.Throwable` @[L4b94ee..L4b94f6] goto L4b95a4;
  catch `java.lang.Throwable` @[L4b9518..L4b9532] goto L4b957a;
  catch `java.lang.Throwable` @[L4b953a..L4b9546] goto L4b955a;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b9454.  v0:= 1I;
  #L4b9456.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.k` @type ^`boolean` := v0 @kind boolean;
  #L4b945a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b945e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b9464.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a$a` @kind object;
  #L4b9468.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a$a;.a:()V` @kind virtual;
  #L4b946e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b9472.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4b9478.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b93f8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.k` @type ^`boolean` @kind boolean;
  #L4b93fc.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b9608.  v0:= 1I;
  #L4b960a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.j` @type ^`boolean` := v0 @kind boolean;
  #L4b960e.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a;.a:()V` @kind virtual;
  #L4b9614.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b9628.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b962c.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b9632.  v2:= temp;
  #L4b9634.  if v2 == 0 then goto L4b9644;
  #L4b9638.  v2:= 1I;
  #L4b963a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.j` @type ^`boolean` := v2 @kind boolean;
  #L4b963e.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a;.a:()V` @kind virtual;
  #L4b9644.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b9658.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.l` @type ^`int`;
  #L4b965c.  if v0 != 0 then goto L4b966a;
  #L4b9660.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4b9664.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4b966a.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a;.a:()V` @kind virtual;
  #L4b9670.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a` v2 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b9684.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b9688.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b968e.  v0:= temp;
  #L4b9690.  if v0 == 0 then goto L4b9708;
  #L4b9694.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v3 @kind object;
  #L4b9698.  v0:= instanceof @variable v3 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind boolean;
  #L4b969c.  if v0 == 0 then goto L4b96ec;
  #L4b96a0.  v3:= (`io.reactivex.rxjava3.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L4b96a4.  v0:= 3I;
  #L4b96a6.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4b96ac.  v0:= temp;
  #L4b96ae.  v1:= 1I;
  #L4b96b0.  if v0 != v1 then goto L4b96d2;
  #L4b96b4.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.l` @type ^`int` := v0;
  #L4b96b8.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4b96bc.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.j` @type ^`boolean` := v1 @kind boolean;
  #L4b96c0.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b96c4.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4b96ca.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a;.a:()V` @kind virtual;
  #L4b96d0.  return @kind void;
  #L4b96d2.  v1:= 2I;
  #L4b96d4.  if v0 != v1 then goto L4b96ec;
  #L4b96d8.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.l` @type ^`int` := v0;
  #L4b96dc.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4b96e0.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b96e4.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4b96ea.  return @kind void;
  #L4b96ec.  v3:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4b96f0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.c` @type ^`int`;
  #L4b96f4.  call `<init>`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4b96fa.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4b96fe.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b9702.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4b9708.  return @kind void;
}
