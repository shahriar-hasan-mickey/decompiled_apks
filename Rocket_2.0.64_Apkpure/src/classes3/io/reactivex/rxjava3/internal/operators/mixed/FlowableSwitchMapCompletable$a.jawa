record `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.CompletableObserver` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.f` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.g` @AccessFlag ;
}
global `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a$a` `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.h` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4b2508.  v0:= new `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a$a`;
  #L4b250c.  v1:= 0I;
  #L4b250e.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;)V` @kind direct;
  #L4b2514.  `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.h` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a$a` := v0 @kind object;
  #L4b2518.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a` v0 @kind this, `io.reactivex.rxjava3.core.CompletableObserver` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.<init>:(Lio/reactivex/rxjava3/core/CompletableObserver;Lio/reactivex/rxjava3/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b252c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b2532.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` := v1 @kind object;
  #L4b2536.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4b253a.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.c` @type ^`boolean` := v3 @kind boolean;
  #L4b253e.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4b2542.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4b2548.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4b254c.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4b2550.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b2556.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4b255a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4b2598.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b259c.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.h` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a$a` @kind object;
  #L4b25a0.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4b25a6.  v0:= temp @kind object;
  #L4b25a8.  v0:= (`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a$a`) v0 @kind object;
  #L4b25ac.  if v0 == 0 then goto L4b25ba;
  #L4b25b0.  if v0 == v1 then goto L4b25ba;
  #L4b25b4.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a$a;.a:()V` @kind virtual;
  #L4b25ba.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a$a` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.b:(Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4b25cc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b25d0.  v1:= 0I;
  #L4b25d2.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b25d8.  v3:= temp;
  #L4b25da.  if v3 == 0 then goto L4b25f4;
  #L4b25de.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.f` @type ^`boolean` @kind boolean;
  #L4b25e2.  if v3 == 0 then goto L4b25f4;
  #L4b25e6.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b25ea.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4b25ee.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4b25f4.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.c:(Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4b2608.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b260c.  v1:= 0I;
  #L4b260e.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b2614.  v3:= temp;
  #L4b2616.  if v3 == 0 then goto L4b266a;
  #L4b261a.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b261e.  call temp:= `tryAddThrowableOrReport`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b2624.  v3:= temp;
  #L4b2626.  if v3 == 0 then goto L4b2670;
  #L4b262a.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.c` @type ^`boolean` @kind boolean;
  #L4b262e.  if v3 == 0 then goto L4b264a;
  #L4b2632.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.f` @type ^`boolean` @kind boolean;
  #L4b2636.  if v3 == 0 then goto L4b2670;
  #L4b263a.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b263e.  v4:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4b2642.  call `tryTerminateConsumer`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4b2648.  goto L4b2670;
  #L4b264a.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b264e.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b2654.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.a:()V` @kind virtual;
  #L4b265a.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b265e.  v4:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4b2662.  call `tryTerminateConsumer`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4b2668.  goto L4b2670;
  #L4b266a.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b2670.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b256c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b2570.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b2576.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.a:()V` @kind virtual;
  #L4b257c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b2580.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4b2586.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b24dc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b24e0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b24e6.  v0:= temp @kind object;
  #L4b24e8.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.h` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a$a` @kind object;
  #L4b24ec.  if v0 != v1 then goto L4b24f4;
  #L4b24f0.  v0:= 1I;
  #L4b24f2.  goto L4b24f6;
  #L4b24f4.  v0:= 0I;
  #L4b24f6.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b2684.  v0:= 1I;
  #L4b2686.  v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.f` @type ^`boolean` := v0 @kind boolean;
  #L4b268a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b268e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b2694.  v0:= temp @kind object;
  #L4b2696.  if v0 != 0 then goto L4b26a8;
  #L4b269a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b269e.  v1:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4b26a2.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4b26a8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b26bc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b26c0.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b26c6.  v2:= temp;
  #L4b26c8.  if v2 == 0 then goto L4b26f0;
  #L4b26cc.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.c` @type ^`boolean` @kind boolean;
  #L4b26d0.  if v2 == 0 then goto L4b26dc;
  #L4b26d4.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.onComplete:()V` @kind virtual;
  #L4b26da.  goto L4b26f0;
  #L4b26dc.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.a:()V` @kind virtual;
  #L4b26e2.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b26e6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4b26ea.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4b26f0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b2704.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4b2708.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b270e.  v4:= temp @kind object;
  #L4b2710.  v0:= "The mapper returned a null CompletableSource" @kind object;
  #L4b2714.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b271a.  v4:= (`io.reactivex.rxjava3.core.CompletableSource`) v4 @kind object;
  #L4b271e.  v0:= new `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a$a`;
  #L4b2722.  call `<init>`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;)V` @kind direct;
  #L4b2728.  v1:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b272c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b2732.  v1:= temp @kind object;
  #L4b2734.  v1:= (`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a$a`) v1 @kind object;
  #L4b2738.  v2:= `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.h` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a$a` @kind object;
  #L4b273c.  if v1 != v2 then goto L4b2742;
  #L4b2740.  goto L4b2762;
  #L4b2742.  v2:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b2746.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b274c.  v2:= temp;
  #L4b274e.  if v2 == 0 then goto L4b2728;
  #L4b2752.  if v1 == 0 then goto L4b275c;
  #L4b2756.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a$a;.a:()V` @kind virtual;
  #L4b275c.  call `subscribe`(v4, v0) @signature `Lio/reactivex/rxjava3/core/CompletableSource;.subscribe:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind interface;
  #L4b2762.  return @kind void;
  #L4b2764.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b2766.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b276c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b2770.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b2776.  call `onError`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b277c.  return @kind void;
  catch `java.lang.Throwable` @[L4b2704..L4b271e] goto L4b2764;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b279c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b27a0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4b27a6.  v0:= temp;
  #L4b27a8.  if v0 == 0 then goto L4b27ca;
  #L4b27ac.  v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4b27b0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4b27b4.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4b27ba.  v0:= 9223372036854775807L;
  #L4b27c4.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4b27ca.  return @kind void;
}
