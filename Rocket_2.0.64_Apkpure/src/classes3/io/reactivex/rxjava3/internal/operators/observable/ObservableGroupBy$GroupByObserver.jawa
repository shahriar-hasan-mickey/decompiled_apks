record `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.e` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.g` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.h` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.i` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4c0178.  v0:= new `java.lang.Object`;
  #L4c017c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c0182.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.i` @type ^`java.lang.Object` := v0 @kind object;
  #L4c0186.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `io.reactivex.rxjava3.functions.Function` v4 @kind object, `int` v5 , `boolean` v6 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/Function;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4c0198.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4c019e.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4c01a2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4c01a8.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L4c01ac.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.a` @type ^`io.reactivex.rxjava3.core.Observer` := v2 @kind object;
  #L4c01b0.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.b` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4c01b4.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.c` @type ^`io.reactivex.rxjava3.functions.Function` := v4 @kind object;
  #L4c01b8.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.d` @type ^`int` := v5;
  #L4c01bc.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.e` @type ^`boolean` := v6 @kind boolean;
  #L4c01c0.  v2:= new `java.util.concurrent.ConcurrentHashMap`;
  #L4c01c4.  call `<init>`(v2) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L4c01ca.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` := v2 @kind object;
  #L4c01ce.  v2:= 1I;
  #L4c01d0.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4c01d6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;.cancel:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c01e8.  if v2 == 0 then goto L4c01ee;
  #L4c01ec.  goto L4c01f2;
  #L4c01ee.  v2:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.i` @type ^`java.lang.Object` @kind object;
  #L4c01f2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` @kind object;
  #L4c01f6.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c01fc.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c0202.  v2:= temp;
  #L4c0204.  if v2 != 0 then goto L4c0212;
  #L4c0208.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c020c.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c0212.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c0224.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4c0228.  v1:= 0I;
  #L4c022a.  v2:= 1I;
  #L4c022c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4c0232.  v0:= temp;
  #L4c0234.  if v0 == 0 then goto L4c024e;
  #L4c0238.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c023e.  v0:= temp;
  #L4c0240.  if v0 != 0 then goto L4c024e;
  #L4c0244.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c0248.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c024e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c0158.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4c015c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4c0162.  v0:= temp;
  #L4c0164.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c0260.  v0:= new `java.util.ArrayList`;
  #L4c0264.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` @kind object;
  #L4c0268.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4c026e.  v1:= temp @kind object;
  #L4c0270.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L4c0276.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` @kind object;
  #L4c027a.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4c0280.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4c0286.  v0:= temp @kind object;
  #L4c0288.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4c028e.  v1:= temp;
  #L4c0290.  if v1 == 0 then goto L4c02a8;
  #L4c0294.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4c029a.  v1:= temp @kind object;
  #L4c029c.  v1:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$a`) v1 @kind object;
  #L4c02a0.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$a;.onComplete:()V` @kind virtual;
  #L4c02a6.  goto L4c0288;
  #L4c02a8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c02ac.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4c02b2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c02c4.  v0:= new `java.util.ArrayList`;
  #L4c02c8.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` @kind object;
  #L4c02cc.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4c02d2.  v1:= temp @kind object;
  #L4c02d4.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L4c02da.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` @kind object;
  #L4c02de.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4c02e4.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4c02ea.  v0:= temp @kind object;
  #L4c02ec.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4c02f2.  v1:= temp;
  #L4c02f4.  if v1 == 0 then goto L4c030c;
  #L4c02f8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4c02fe.  v1:= temp @kind object;
  #L4c0300.  v1:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$a`) v1 @kind object;
  #L4c0304.  call `onError`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c030a.  goto L4c02ec;
  #L4c030c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c0310.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c0316.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c0328.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c032c.  call temp:= `apply`(v0, v5) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c0332.  v0:= temp @kind object;
  #L4c0334.  if v0 == 0 then goto L4c033c;
  #L4c0338.  v1:= v0 @kind object;
  #L4c033a.  goto L4c0340;
  #L4c033c.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.i` @type ^`java.lang.Object` @kind object;
  #L4c0340.  v2:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` @kind object;
  #L4c0344.  call temp:= `get`(v2, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c034a.  v2:= temp @kind object;
  #L4c034c.  v2:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$a`) v2 @kind object;
  #L4c0350.  v3:= 0I;
  #L4c0352.  if v2 != 0 then goto L4c038a;
  #L4c0356.  v2:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4c035a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4c0360.  v2:= temp;
  #L4c0362.  if v2 == 0 then goto L4c0368;
  #L4c0366.  return @kind void;
  #L4c0368.  v2:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.d` @type ^`int`;
  #L4c036c.  v3:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.e` @type ^`boolean` @kind boolean;
  #L4c0370.  call temp:= `d`(v0, v2, v4, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$a;.d:(Ljava/lang/Object;ILio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;Z)Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$a;` @kind static;
  #L4c0376.  v2:= temp @kind object;
  #L4c0378.  v3:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` @kind object;
  #L4c037c.  call temp:= `put`(v3, v1, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c0382.  call temp:= `getAndIncrement`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c0388.  v3:= 1I;
  #L4c038a.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.c` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c038e.  call temp:= `apply`(v1, v5) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c0394.  v5:= temp @kind object;
  #L4c0396.  v1:= "The value supplied is null" @kind object;
  #L4c039a.  call temp:= `requireNonNull`(v5, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c03a0.  call `onNext`(v2, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$a;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4c03a6.  if v3 == 0 then goto L4c03d0;
  #L4c03aa.  v5:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c03ae.  call `onNext`(v5, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c03b4.  v5:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$a.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b` @kind object;
  #L4c03b8.  call temp:= `g`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.g:()Z` @kind virtual;
  #L4c03be.  v5:= temp;
  #L4c03c0.  if v5 == 0 then goto L4c03d0;
  #L4c03c4.  call `cancel`(v4, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;.cancel:(Ljava/lang/Object;)V` @kind virtual;
  #L4c03ca.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$a;.onComplete:()V` @kind virtual;
  #L4c03d0.  return @kind void;
  #L4c03d2.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c03d4.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c03da.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c03de.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c03e4.  if v3 == 0 then goto L4c03f2;
  #L4c03e8.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c03ec.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c03f2.  call `onError`(v4, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c03f8.  return @kind void;
  #L4c03fa.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c03fc.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c0402.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c0406.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c040c.  call `onError`(v4, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c0412.  return @kind void;
  catch `java.lang.Throwable` @[L4c0328..L4c0334] goto L4c03fa;
  catch `java.lang.Throwable` @[L4c038a..L4c03a0] goto L4c03d2;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c043c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c0440.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4c0446.  v0:= temp;
  #L4c0448.  if v0 == 0 then goto L4c045a;
  #L4c044c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4c0450.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c0454.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4c045a.  return @kind void;
}
