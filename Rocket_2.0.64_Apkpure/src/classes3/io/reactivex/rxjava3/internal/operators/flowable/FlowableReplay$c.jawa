record `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.c` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.e` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.f` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c` v0 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i` v1 @kind object, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49e0e0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L49e0e6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i` := v1 @kind object;
  #L49e0ea.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.b` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L49e0ee.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L49e0f2.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L49e0f8.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L49e0fc.  return @kind void;
}
procedure `java.lang.Object` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.a:()Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;

  #L49e0ac.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.c` @type ^`java.lang.Object` @kind object;
  #L49e0b0.  return v0 @kind object;
}
procedure `long` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.b:(J)J` @AccessFlag PUBLIC {
    temp;

  #L49e0c4.  call temp:= `producedCancel`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.producedCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L49e0ca.  v1:= temp @kind wide;
  #L49e0cc.  return v1 @kind wide;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L49e110.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.dispose:()V` @kind virtual;
  #L49e116.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L49e128.  v0:= -9223372036854775808L;
  #L49e12c.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L49e132.  v2:= temp @kind wide;
  #L49e134.  v4:= lcmp(v2, v0);
  #L49e138.  if v4 == 0 then goto L49e156;
  #L49e13c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i` @kind object;
  #L49e140.  call `c`(v0, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.c:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;)V` @kind virtual;
  #L49e146.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i` @kind object;
  #L49e14a.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.b:()V` @kind virtual;
  #L49e150.  v0:= 0I;
  #L49e152.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.c` @type ^`java.lang.Object` := v0 @kind object;
  #L49e156.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L49e080.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49e086.  v0:= temp @kind wide;
  #L49e088.  v2:= -9223372036854775808L;
  #L49e08c.  v4:= lcmp(v0, v2);
  #L49e090.  if v4 != 0 then goto L49e098;
  #L49e094.  v0:= 1I;
  #L49e096.  goto L49e09a;
  #L49e098.  v0:= 0I;
  #L49e09a.  return v0;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c` v5 @kind this, `long` v6 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L49e168.  call temp:= `validate`(v6) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L49e16e.  v0:= temp;
  #L49e170.  if v0 == 0 then goto L49e1aa;
  #L49e174.  call temp:= `addCancel`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L49e17a.  v0:= temp @kind wide;
  #L49e17c.  v2:= -9223372036854775808L;
  #L49e180.  v4:= lcmp(v0, v2);
  #L49e184.  if v4 == 0 then goto L49e1aa;
  #L49e188.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L49e18c.  call temp:= `add`(v0, v6) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L49e192.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i` @kind object;
  #L49e196.  call `b`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.b:()V` @kind virtual;
  #L49e19c.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i` @kind object;
  #L49e1a0.  v6:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$f` @kind object;
  #L49e1a4.  call `c`(v6, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$f;.c:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;)V` @kind interface;
  #L49e1aa.  return @kind void;
}
