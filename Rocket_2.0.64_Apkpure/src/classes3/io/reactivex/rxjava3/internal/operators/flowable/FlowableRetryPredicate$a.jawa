record `io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Predicate` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a.d` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a.e` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a.f` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `io.reactivex.rxjava3.functions.Predicate` v4 @kind object, `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRetryPredicate$a;.<init>:(Lorg/reactivestreams/Subscriber;JLio/reactivex/rxjava3/functions/Predicate;Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49f190.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L49f196.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L49f19a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a.b` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` := v5 @kind object;
  #L49f19e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a.c` @type ^`org.reactivestreams.Publisher` := v6 @kind object;
  #L49f1a2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a.d` @type ^`io.reactivex.rxjava3.functions.Predicate` := v4 @kind object;
  #L49f1a6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a.e` @type ^`long` := v2 @kind wide;
  #L49f1aa.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRetryPredicate$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49f2cc.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L49f2d2.  v0:= temp;
  #L49f2d4.  if v0 != 0 then goto L49f322;
  #L49f2d8.  v0:= 1I;
  #L49f2da.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a.b` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L49f2de.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.isCancelled:()Z` @kind virtual;
  #L49f2e4.  v1:= temp;
  #L49f2e6.  if v1 == 0 then goto L49f2ec;
  #L49f2ea.  return @kind void;
  #L49f2ec.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a.f` @type ^`long` @kind wide;
  #L49f2f0.  v3:= 0L;
  #L49f2f4.  v5:= lcmp(v1, v3);
  #L49f2f8.  if v5 == 0 then goto L49f30a;
  #L49f2fc.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a.f` @type ^`long` := v3 @kind wide;
  #L49f300.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a.b` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L49f304.  call `produced`(v3, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L49f30a.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a.c` @type ^`org.reactivestreams.Publisher` @kind object;
  #L49f30e.  call `subscribe`(v1, v6) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L49f314.  v0:= -v0 @kind int;
  #L49f316.  call temp:= `addAndGet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L49f31c.  v0:= temp;
  #L49f31e.  if v0 != 0 then goto L49f2da;
  #L49f322.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRetryPredicate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49f1bc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49f1c0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49f1c6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRetryPredicate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L49f1d8.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a.e` @type ^`long` @kind wide;
  #L49f1dc.  v2:= 9223372036854775807L;
  #L49f1e6.  v4:= lcmp(v0, v2);
  #L49f1ea.  if v4 == 0 then goto L49f1fa;
  #L49f1ee.  v2:= 1L;
  #L49f1f2.  v2:= v0 - v2 @kind long;
  #L49f1f6.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a.e` @type ^`long` := v2 @kind wide;
  #L49f1fa.  v2:= 0L;
  #L49f1fe.  v4:= lcmp(v0, v2);
  #L49f202.  if v4 != 0 then goto L49f212;
  #L49f206.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49f20a.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49f210.  goto L49f234;
  #L49f212.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a.d` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L49f216.  call temp:= `test`(v0, v6) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L49f21c.  v0:= temp;
  #L49f21e.  if v0 != 0 then goto L49f22e;
  #L49f222.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49f226.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49f22c.  return @kind void;
  #L49f22e.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRetryPredicate$a;.a:()V` @kind virtual;
  #L49f234.  return @kind void;
  #L49f236.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49f238.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49f23e.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49f242.  v2:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L49f246.  v3:= 2I;
  #L49f248.  v3:= new `java.lang.Throwable`[v3];
  #L49f24c.  v4:= 0I;
  #L49f24e.  v3[v4]:= v6 @kind object;
  #L49f252.  v6:= 1I;
  #L49f254.  v3[v6]:= v0 @kind object;
  #L49f258.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L49f25e.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49f264.  return @kind void;
  catch `java.lang.Throwable` @[L49f212..L49f21e] goto L49f236;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRetryPredicate$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49f284.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a.f` @type ^`long` @kind wide;
  #L49f288.  v2:= 1L;
  #L49f28c.  v0:= v0 + v2 @kind long;
  #L49f28e.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a.f` @type ^`long` := v0 @kind wide;
  #L49f292.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49f296.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L49f29c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRetryPredicate$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49f2b0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$a.b` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L49f2b4.  call `setSubscription`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L49f2ba.  return @kind void;
}
