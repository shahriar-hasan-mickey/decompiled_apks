record `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.i` @AccessFlag VOLATILE;
  `long` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.j` @AccessFlag ;
}
global `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a$a` `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.k` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4b2e04.  v0:= new `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a$a`;
  #L4b2e08.  v1:= 0I;
  #L4b2e0a.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;)V` @kind direct;
  #L4b2e10.  `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.k` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a$a` := v0 @kind object;
  #L4b2e14.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b2e28.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4b2e2e.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4b2e32.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4b2e36.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.c` @type ^`boolean` := v3 @kind boolean;
  #L4b2e3a.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4b2e3e.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4b2e44.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4b2e48.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4b2e4c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4b2e52.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4b2e56.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4b2e5a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b2e60.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4b2e64.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4b2eac.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b2eb0.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.k` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a$a` @kind object;
  #L4b2eb4.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4b2eba.  v0:= temp @kind object;
  #L4b2ebc.  v0:= (`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a$a`) v0 @kind object;
  #L4b2ec0.  if v0 == 0 then goto L4b2ece;
  #L4b2ec4.  if v0 == v1 then goto L4b2ece;
  #L4b2ec8.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a$a;.a:()V` @kind virtual;
  #L4b2ece.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a` v12 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4b2ee0.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4b2ee6.  v0:= temp;
  #L4b2ee8.  if v0 == 0 then goto L4b2eee;
  #L4b2eec.  return @kind void;
  #L4b2eee.  v0:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b2ef2.  v1:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b2ef6.  v2:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b2efa.  v3:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4b2efe.  v4:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.j` @type ^`long` @kind wide;
  #L4b2f02.  v6:= 1I;
  #L4b2f04.  v7:= 1I;
  #L4b2f06.  v8:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.i` @type ^`boolean` @kind boolean;
  #L4b2f0a.  if v8 == 0 then goto L4b2f10;
  #L4b2f0e.  return @kind void;
  #L4b2f10.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b2f16.  v8:= temp @kind object;
  #L4b2f18.  if v8 == 0 then goto L4b2f2c;
  #L4b2f1c.  v8:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.c` @type ^`boolean` @kind boolean;
  #L4b2f20.  if v8 != 0 then goto L4b2f2c;
  #L4b2f24.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4b2f2a.  return @kind void;
  #L4b2f2c.  v8:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.h` @type ^`boolean` @kind boolean;
  #L4b2f30.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b2f36.  v9:= temp @kind object;
  #L4b2f38.  v9:= (`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a$a`) v9 @kind object;
  #L4b2f3c.  if v9 != 0 then goto L4b2f44;
  #L4b2f40.  v10:= 1I;
  #L4b2f42.  goto L4b2f46;
  #L4b2f44.  v10:= 0I;
  #L4b2f46.  if v8 == 0 then goto L4b2f56;
  #L4b2f4a.  if v10 == 0 then goto L4b2f56;
  #L4b2f4e.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4b2f54.  return @kind void;
  #L4b2f56.  if v10 != 0 then goto L4b2f8e;
  #L4b2f5a.  v8:= v9.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a$a.b` @type ^`java.lang.Object` @kind object;
  #L4b2f5e.  if v8 == 0 then goto L4b2f8e;
  #L4b2f62.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4b2f68.  v10:= temp @kind wide;
  #L4b2f6a.  v8:= lcmp(v4, v10);
  #L4b2f6e.  if v8 != 0 then goto L4b2f74;
  #L4b2f72.  goto L4b2f8e;
  #L4b2f74.  v8:= 0I;
  #L4b2f76.  call temp:= `compareAndSet`(v2, v9, v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b2f7c.  v8:= v9.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a$a.b` @type ^`java.lang.Object` @kind object;
  #L4b2f80.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b2f86.  v8:= 1L;
  #L4b2f8a.  v4:= v4 + v8 @kind long;
  #L4b2f8c.  goto L4b2f06;
  #L4b2f8e.  v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.j` @type ^`long` := v4 @kind wide;
  #L4b2f92.  v7:= -v7 @kind int;
  #L4b2f94.  call temp:= `addAndGet`(v12, v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4b2f9a.  v7:= temp;
  #L4b2f9c.  if v7 != 0 then goto L4b2f06;
  #L4b2fa0.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.c:(Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4b2fb4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b2fb8.  v1:= 0I;
  #L4b2fba.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b2fc0.  v3:= temp;
  #L4b2fc2.  if v3 == 0 then goto L4b2ff6;
  #L4b2fc6.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b2fca.  call temp:= `tryAddThrowableOrReport`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b2fd0.  v3:= temp;
  #L4b2fd2.  if v3 == 0 then goto L4b2ffc;
  #L4b2fd6.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.c` @type ^`boolean` @kind boolean;
  #L4b2fda.  if v3 != 0 then goto L4b2fee;
  #L4b2fde.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b2fe2.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b2fe8.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.a:()V` @kind virtual;
  #L4b2fee.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.b:()V` @kind virtual;
  #L4b2ff4.  goto L4b2ffc;
  #L4b2ff6.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b2ffc.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b2e78.  v0:= 1I;
  #L4b2e7a.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4b2e7e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b2e82.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b2e88.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.a:()V` @kind virtual;
  #L4b2e8e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b2e92.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4b2e98.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b3010.  v0:= 1I;
  #L4b3012.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4b3016.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.b:()V` @kind virtual;
  #L4b301c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b3030.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b3034.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b303a.  v2:= temp;
  #L4b303c.  if v2 == 0 then goto L4b305a;
  #L4b3040.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.c` @type ^`boolean` @kind boolean;
  #L4b3044.  if v2 != 0 then goto L4b304e;
  #L4b3048.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.a:()V` @kind virtual;
  #L4b304e.  v2:= 1I;
  #L4b3050.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.h` @type ^`boolean` := v2 @kind boolean;
  #L4b3054.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.b:()V` @kind virtual;
  #L4b305a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b306c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b3070.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b3076.  v0:= temp @kind object;
  #L4b3078.  v0:= (`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a$a`) v0 @kind object;
  #L4b307c.  if v0 == 0 then goto L4b3086;
  #L4b3080.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a$a;.a:()V` @kind virtual;
  #L4b3086.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4b308a.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b3090.  v4:= temp @kind object;
  #L4b3092.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L4b3096.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b309c.  v4:= (`io.reactivex.rxjava3.core.SingleSource`) v4 @kind object;
  #L4b30a0.  v0:= new `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a$a`;
  #L4b30a4.  call `<init>`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;)V` @kind direct;
  #L4b30aa.  v1:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b30ae.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b30b4.  v1:= temp @kind object;
  #L4b30b6.  v1:= (`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a$a`) v1 @kind object;
  #L4b30ba.  v2:= `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.k` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a$a` @kind object;
  #L4b30be.  if v1 != v2 then goto L4b30c4;
  #L4b30c2.  goto L4b30da;
  #L4b30c4.  v2:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b30c8.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b30ce.  v1:= temp;
  #L4b30d0.  if v1 == 0 then goto L4b30aa;
  #L4b30d4.  call `subscribe`(v4, v0) @signature `Lio/reactivex/rxjava3/core/SingleSource;.subscribe:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind interface;
  #L4b30da.  return @kind void;
  #L4b30dc.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b30de.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b30e4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b30e8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b30ee.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b30f2.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.k` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a$a` @kind object;
  #L4b30f6.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4b30fc.  call `onError`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b3102.  return @kind void;
  catch `java.lang.Throwable` @[L4b3086..L4b30a0] goto L4b30dc;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b3120.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b3124.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4b312a.  v0:= temp;
  #L4b312c.  if v0 == 0 then goto L4b314e;
  #L4b3130.  v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.g` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4b3134.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b3138.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4b313e.  v0:= 9223372036854775807L;
  #L4b3148.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4b314e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b3160.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4b3164.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4b316a.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.b:()V` @kind virtual;
  #L4b3170.  return @kind void;
}
