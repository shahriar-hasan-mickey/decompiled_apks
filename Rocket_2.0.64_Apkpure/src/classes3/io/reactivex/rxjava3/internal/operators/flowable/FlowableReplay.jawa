record `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.flowables.ConnectableFlowable` @kind class, `io.reactivex.rxjava3.internal.fuseable.HasUpstreamPublisher` @kind interface {
  `io.reactivex.rxjava3.core.Flowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Supplier` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.d` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.e` @AccessFlag FINAL;
}
global `io.reactivex.rxjava3.functions.Supplier` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L49ee28.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$b`;
  #L49ee2c.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$b;.<init>:()V` @kind direct;
  #L49ee32.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.f` @type ^`io.reactivex.rxjava3.functions.Supplier` := v0 @kind object;
  #L49ee36.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object, `io.reactivex.rxjava3.core.Flowable` v2 @kind object, `java.util.concurrent.atomic.AtomicReference` v3 @kind object, `io.reactivex.rxjava3.functions.Supplier` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/rxjava3/core/Flowable;Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/functions/Supplier;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L49ee48.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/flowables/ConnectableFlowable;.<init>:()V` @kind direct;
  #L49ee4e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.e` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L49ee52.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.b` @type ^`io.reactivex.rxjava3.core.Flowable` := v2 @kind object;
  #L49ee56.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L49ee5a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.d` @type ^`io.reactivex.rxjava3.functions.Supplier` := v4 @kind object;
  #L49ee5e.  return @kind void;
}
procedure `io.reactivex.rxjava3.flowables.ConnectableFlowable` `create`(`io.reactivex.rxjava3.core.Flowable` v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/rxjava3/core/Flowable;IZ)Lio/reactivex/rxjava3/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49ed24.  v0:= 2147483647I;
  #L49ed2a.  if v2 != v0 then goto L49ed38;
  #L49ed2e.  call temp:= `createFrom`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.createFrom:(Lio/reactivex/rxjava3/core/Flowable;)Lio/reactivex/rxjava3/flowables/ConnectableFlowable;` @kind static;
  #L49ed34.  v1:= temp @kind object;
  #L49ed36.  return v1 @kind object;
  #L49ed38.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$g`;
  #L49ed3c.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$g;.<init>:(IZ)V` @kind direct;
  #L49ed42.  call temp:= `e`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.e:(Lio/reactivex/rxjava3/core/Flowable;Lio/reactivex/rxjava3/functions/Supplier;)Lio/reactivex/rxjava3/flowables/ConnectableFlowable;` @kind static;
  #L49ed48.  v1:= temp @kind object;
  #L49ed4a.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.flowables.ConnectableFlowable` `create`(`io.reactivex.rxjava3.core.Flowable` v8 @kind object, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.rxjava3.core.Scheduler` v12 @kind object, `int` v13 , `boolean` v14 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/rxjava3/core/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;IZ)Lio/reactivex/rxjava3/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L49edc0.  v7:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$j`;
  #L49edc4.  v0:= v7 @kind object;
  #L49edc6.  v1:= v13;
  #L49edc8.  v2:= v9 @kind wide;
  #L49edca.  v4:= v11 @kind object;
  #L49edcc.  v5:= v12 @kind object;
  #L49edce.  v6:= v14;
  #L49edd0.  call `<init>`(v0, v1, v2, v4, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$j;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;Z)V` @kind direct;
  #L49edd6.  call temp:= `e`(v8, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.e:(Lio/reactivex/rxjava3/core/Flowable;Lio/reactivex/rxjava3/functions/Supplier;)Lio/reactivex/rxjava3/flowables/ConnectableFlowable;` @kind static;
  #L49eddc.  v8:= temp @kind object;
  #L49edde.  return v8 @kind object;
}
procedure `io.reactivex.rxjava3.flowables.ConnectableFlowable` `create`(`io.reactivex.rxjava3.core.Flowable` v7 @kind object, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.rxjava3.core.Scheduler` v11 @kind object, `boolean` v12 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/rxjava3/core/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;Z)Lio/reactivex/rxjava3/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L49ed94.  v5:= 2147483647I;
  #L49ed9a.  v0:= v7 @kind object;
  #L49ed9c.  v1:= v8 @kind wide;
  #L49ed9e.  v3:= v10 @kind object;
  #L49eda0.  v4:= v11 @kind object;
  #L49eda2.  v6:= v12;
  #L49eda4.  call temp:= `create`(v0, v1, v3, v4, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/rxjava3/core/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;IZ)Lio/reactivex/rxjava3/flowables/ConnectableFlowable;` @kind static;
  #L49edaa.  v7:= temp @kind object;
  #L49edac.  return v7 @kind object;
}
procedure `io.reactivex.rxjava3.flowables.ConnectableFlowable` `createFrom`(`io.reactivex.rxjava3.core.Flowable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.createFrom:(Lio/reactivex/rxjava3/core/Flowable;)Lio/reactivex/rxjava3/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49edf0.  v0:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.f` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L49edf4.  call temp:= `e`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.e:(Lio/reactivex/rxjava3/core/Flowable;Lio/reactivex/rxjava3/functions/Supplier;)Lio/reactivex/rxjava3/flowables/ConnectableFlowable;` @kind static;
  #L49edfa.  v1:= temp @kind object;
  #L49edfc.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.flowables.ConnectableFlowable` `e`(`io.reactivex.rxjava3.core.Flowable` v3 @kind object, `io.reactivex.rxjava3.functions.Supplier` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.e:(Lio/reactivex/rxjava3/core/Flowable;Lio/reactivex/rxjava3/functions/Supplier;)Lio/reactivex/rxjava3/flowables/ConnectableFlowable;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L49ed5c.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L49ed60.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L49ed66.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$h`;
  #L49ed6a.  call `<init>`(v1, v0, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$h;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/functions/Supplier;)V` @kind direct;
  #L49ed70.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay`;
  #L49ed74.  call `<init>`(v2, v1, v3, v0, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/rxjava3/core/Flowable;Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/functions/Supplier;)V` @kind direct;
  #L49ed7a.  call temp:= `onAssembly`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/flowables/ConnectableFlowable;)Lio/reactivex/rxjava3/flowables/ConnectableFlowable;` @kind static;
  #L49ed80.  v3:= temp @kind object;
  #L49ed82.  return v3 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `multicastSelector`(`io.reactivex.rxjava3.functions.Supplier` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.multicastSelector:(Lio/reactivex/rxjava3/functions/Supplier;Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49ed08.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$d`;
  #L49ed0c.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$d;.<init>:(Lio/reactivex/rxjava3/functions/Supplier;Lio/reactivex/rxjava3/functions/Function;)V` @kind direct;
  #L49ed12.  return v0 @kind object;
}
procedure `void` `connect`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay` v4 @kind this, `io.reactivex.rxjava3.functions.Consumer` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.connect:(Lio/reactivex/rxjava3/functions/Consumer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49ee70.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49ee74.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49ee7a.  v0:= temp @kind object;
  #L49ee7c.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i`) v0 @kind object;
  #L49ee80.  if v0 == 0 then goto L49ee90;
  #L49ee84.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.isDisposed:()Z` @kind virtual;
  #L49ee8a.  v1:= temp;
  #L49ee8c.  if v1 == 0 then goto L49eec2;
  #L49ee90.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.d` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L49ee94.  call temp:= `get`(v1) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L49ee9a.  v1:= temp @kind object;
  #L49ee9c.  v1:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$f`) v1 @kind object;
  #L49eea0.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i`;
  #L49eea4.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49eea8.  call `<init>`(v2, v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$f;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L49eeae.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49eeb2.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L49eeb8.  v0:= temp;
  #L49eeba.  if v0 != 0 then goto L49eec0;
  #L49eebe.  goto L49ee70;
  #L49eec0.  v0:= v2 @kind object;
  #L49eec2.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L49eec6.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L49eecc.  v1:= temp;
  #L49eece.  v2:= 1I;
  #L49eed0.  v3:= 0I;
  #L49eed2.  if v1 != 0 then goto L49eeea;
  #L49eed6.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L49eeda.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L49eee0.  v1:= temp;
  #L49eee2.  if v1 == 0 then goto L49eeea;
  #L49eee6.  v1:= 1I;
  #L49eee8.  goto L49eeec;
  #L49eeea.  v1:= 0I;
  #L49eeec.  call `accept`(v5, v0) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L49eef2.  if v1 == 0 then goto L49ef00;
  #L49eef6.  v5:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.b` @type ^`io.reactivex.rxjava3.core.Flowable` @kind object;
  #L49eefa.  call `subscribe`(v5, v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V` @kind virtual;
  #L49ef00.  return @kind void;
  #L49ef02.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49ef04.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49ef0a.  if v1 == 0 then goto L49ef18;
  #L49ef0e.  v0:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L49ef12.  call temp:= `compareAndSet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L49ef18.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49ef1e.  call temp:= `wrapOrThrow`(v5) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L49ef24.  v5:= temp @kind object;
  #L49ef26.  throw v5;
  #L49ef28.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49ef2a.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49ef30.  call temp:= `wrapOrThrow`(v5) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L49ef36.  v5:= temp @kind object;
  #L49ef38.  throw v5;
  catch `java.lang.Throwable` @[L49ee90..L49eea0] goto L49ef28;
  catch `java.lang.Throwable` @[L49eeec..L49eef2] goto L49ef02;
}
procedure `void` `reset`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49ef64.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49ef68.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49ef6e.  v0:= temp @kind object;
  #L49ef70.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i`) v0 @kind object;
  #L49ef74.  if v0 == 0 then goto L49ef90;
  #L49ef78.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.isDisposed:()Z` @kind virtual;
  #L49ef7e.  v1:= temp;
  #L49ef80.  if v1 == 0 then goto L49ef90;
  #L49ef84.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49ef88.  v2:= 0I;
  #L49ef8a.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L49ef90.  return @kind void;
}
procedure `org.reactivestreams.Publisher` `source`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.source:()Lorg/reactivestreams/Publisher;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49ee10.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.b` @type ^`io.reactivex.rxjava3.core.Flowable` @kind object;
  #L49ee14.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L49efa4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.e` @type ^`org.reactivestreams.Publisher` @kind object;
  #L49efa8.  call `subscribe`(v0, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L49efae.  return @kind void;
}
