record `io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.c` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `long` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableIntervalRange$a;.<init>:(Lorg/reactivestreams/Subscriber;JJ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4972a4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4972aa.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4972ae.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4972b4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4972b8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4972bc.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.c` @type ^`long` := v3 @kind wide;
  #L4972c0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.b` @type ^`long` := v5 @kind wide;
  #L4972c4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableIntervalRange$a;.a:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49740c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L497410.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L497416.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableIntervalRange$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4972d8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4972dc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4972e2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableIntervalRange$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4972f4.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4972fa.  v0:= temp;
  #L4972fc.  if v0 == 0 then goto L497306;
  #L497300.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L497306.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a` v8 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableIntervalRange$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L497318.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49731c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L497322.  v0:= temp @kind object;
  #L497324.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L497328.  if v0 == v1 then goto L4973fa;
  #L49732c.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L497332.  v2:= temp @kind wide;
  #L497334.  v4:= 0L;
  #L497338.  v0:= lcmp(v2, v4);
  #L49733c.  if v0 == 0 then goto L4973ac;
  #L497340.  v4:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.c` @type ^`long` @kind wide;
  #L497344.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L497348.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L49734e.  v6:= temp @kind object;
  #L497350.  call `onNext`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L497356.  v6:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.b` @type ^`long` @kind wide;
  #L49735a.  v0:= lcmp(v4, v6);
  #L49735e.  if v0 != 0 then goto L497388;
  #L497362.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L497366.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49736c.  v0:= temp @kind object;
  #L49736e.  if v0 == v1 then goto L49737c;
  #L497372.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L497376.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49737c.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L497380.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L497386.  return @kind void;
  #L497388.  v0:= 1L;
  #L49738c.  v4:= v4 + v0 @kind long;
  #L49738e.  v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.c` @type ^`long` := v4 @kind wide;
  #L497392.  v0:= 9223372036854775807L;
  #L49739c.  v4:= lcmp(v2, v0);
  #L4973a0.  if v4 == 0 then goto L4973fa;
  #L4973a4.  call temp:= `decrementAndGet`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L4973aa.  goto L4973fa;
  #L4973ac.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4973b0.  v1:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4973b4.  v2:= new `java.lang.StringBuilder`;
  #L4973b8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4973be.  v3:= "Can't deliver value " @kind object;
  #L4973c2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4973c8.  v3:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.c` @type ^`long` @kind wide;
  #L4973cc.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4973d2.  v3:= " due to lack of requests" @kind object;
  #L4973d6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4973dc.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4973e2.  v2:= temp @kind object;
  #L4973e4.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4973ea.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4973f0.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4973f4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4973fa.  return @kind void;
}
