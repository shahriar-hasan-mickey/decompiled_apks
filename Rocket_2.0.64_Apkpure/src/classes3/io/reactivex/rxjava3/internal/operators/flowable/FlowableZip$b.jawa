record `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.d` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.e` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.f` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.g` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b` v0 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a8b30.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4a8b36.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` := v1 @kind object;
  #L4a8b3a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.b` @type ^`int` := v2;
  #L4a8b3e.  v1:= v2 ^> 2;
  #L4a8b42.  v2:= v2 - v1 @kind int;
  #L4a8b44.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.c` @type ^`int` := v2;
  #L4a8b48.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L4a8b5c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4a8b62.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a8b74.  v0:= 1I;
  #L4a8b76.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.f` @type ^`boolean` := v0 @kind boolean;
  #L4a8b7a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` @kind object;
  #L4a8b7e.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.b:()V` @kind virtual;
  #L4a8b84.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a8b98.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` @kind object;
  #L4a8b9c.  call `c`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.c:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$b;Ljava/lang/Throwable;)V` @kind virtual;
  #L4a8ba2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a8bb4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.g` @type ^`int`;
  #L4a8bb8.  v1:= 2I;
  #L4a8bba.  if v0 == v1 then goto L4a8bc8;
  #L4a8bbe.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4a8bc2.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4a8bc8.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` @kind object;
  #L4a8bcc.  call `b`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.b:()V` @kind virtual;
  #L4a8bd2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a8be4.  call temp:= `setOnce`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4a8bea.  v0:= temp;
  #L4a8bec.  if v0 == 0 then goto L4a8c60;
  #L4a8bf0.  v0:= instanceof @variable v4 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind boolean;
  #L4a8bf4.  if v0 == 0 then goto L4a8c42;
  #L4a8bf8.  v0:= v4 @kind object;
  #L4a8bfa.  v0:= (`io.reactivex.rxjava3.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L4a8bfe.  v1:= 7I;
  #L4a8c00.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4a8c06.  v1:= temp;
  #L4a8c08.  v2:= 1I;
  #L4a8c0a.  if v1 != v2 then goto L4a8c26;
  #L4a8c0e.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.g` @type ^`int` := v1;
  #L4a8c12.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4a8c16.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.f` @type ^`boolean` := v2 @kind boolean;
  #L4a8c1a.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` @kind object;
  #L4a8c1e.  call `b`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.b:()V` @kind virtual;
  #L4a8c24.  return @kind void;
  #L4a8c26.  v2:= 2I;
  #L4a8c28.  if v1 != v2 then goto L4a8c42;
  #L4a8c2c.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.g` @type ^`int` := v1;
  #L4a8c30.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4a8c34.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.b` @type ^`int`;
  #L4a8c38.  v0:= (`long`) v0 @kind i2l;
  #L4a8c3a.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a8c40.  return @kind void;
  #L4a8c42.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4a8c46.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.b` @type ^`int`;
  #L4a8c4a.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4a8c50.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4a8c54.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.b` @type ^`int`;
  #L4a8c58.  v0:= (`long`) v0 @kind i2l;
  #L4a8c5a.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a8c60.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a8c74.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.g` @type ^`int`;
  #L4a8c78.  v1:= 1I;
  #L4a8c7a.  if v0 == v1 then goto L4a8cb2;
  #L4a8c7e.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.e` @type ^`long` @kind wide;
  #L4a8c82.  v0:= v0 + v4 @kind long;
  #L4a8c84.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.c` @type ^`int`;
  #L4a8c88.  v4:= (`long`) v4 @kind i2l;
  #L4a8c8a.  v2:= lcmp(v0, v4);
  #L4a8c8e.  if v2 < 0 then goto L4a8cae;
  #L4a8c92.  v4:= 0L;
  #L4a8c96.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.e` @type ^`long` := v4 @kind wide;
  #L4a8c9a.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a8ca0.  v4:= temp @kind object;
  #L4a8ca2.  v4:= (`org.reactivestreams.Subscription`) v4 @kind object;
  #L4a8ca6.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a8cac.  goto L4a8cb2;
  #L4a8cae.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.e` @type ^`long` := v0 @kind wide;
  #L4a8cb2.  return @kind void;
}
