record `io.reactivex.rxjava3.internal.operators.single.SingleCache` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Single` @kind class, `io.reactivex.rxjava3.core.SingleObserver` @kind interface {
  `io.reactivex.rxjava3.core.SingleSource` `io.reactivex.rxjava3.internal.operators.single.SingleCache.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.single.SingleCache.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.single.SingleCache.c` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.single.SingleCache.d` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.single.SingleCache.e` @AccessFlag ;
}
global `io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[] `@@io.reactivex.rxjava3.internal.operators.single.SingleCache.f` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[] `@@io.reactivex.rxjava3.internal.operators.single.SingleCache.g` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleCache;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4d3a94.  v0:= 0I;
  #L4d3a96.  v1:= new `io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[v0];
  #L4d3a9a.  `@@io.reactivex.rxjava3.internal.operators.single.SingleCache.f` @type ^`io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[] := v1 @kind object;
  #L4d3a9e.  v0:= new `io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[v0];
  #L4d3aa2.  `@@io.reactivex.rxjava3.internal.operators.single.SingleCache.g` @type ^`io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[] := v0 @kind object;
  #L4d3aa6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.single.SingleCache` v1 @kind this, `io.reactivex.rxjava3.core.SingleSource` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleCache;.<init>:(Lio/reactivex/rxjava3/core/SingleSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4d3ab8.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/core/Single;.<init>:()V` @kind direct;
  #L4d3abe.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleCache.a` @type ^`io.reactivex.rxjava3.core.SingleSource` := v2 @kind object;
  #L4d3ac2.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4d3ac6.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4d3acc.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleCache.b` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L4d3ad0.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4d3ad4.  v0:= `@@io.reactivex.rxjava3.internal.operators.single.SingleCache.f` @type ^`io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[] @kind object;
  #L4d3ad8.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4d3ade.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4d3ae2.  return @kind void;
}
procedure `boolean` `c`(`io.reactivex.rxjava3.internal.operators.single.SingleCache` v4 @kind this, `io.reactivex.rxjava3.internal.operators.single.SingleCache$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleCache;.c:(Lio/reactivex/rxjava3/internal/operators/single/SingleCache$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4d3a40.  v0:= v4.`io.reactivex.rxjava3.internal.operators.single.SingleCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d3a44.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d3a4a.  v0:= temp @kind object;
  #L4d3a4c.  v0:= (`io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[]) v0 @kind object;
  #L4d3a50.  v1:= `@@io.reactivex.rxjava3.internal.operators.single.SingleCache.g` @type ^`io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[] @kind object;
  #L4d3a54.  v2:= 0I;
  #L4d3a56.  if v0 != v1 then goto L4d3a5c;
  #L4d3a5a.  return v2;
  #L4d3a5c.  v1:= length @variable v0;
  #L4d3a5e.  v3:= v1 + 1;
  #L4d3a62.  v3:= new `io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[v3];
  #L4d3a66.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4d3a6c.  v3[v1]:= v5 @kind object;
  #L4d3a70.  v1:= v4.`io.reactivex.rxjava3.internal.operators.single.SingleCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d3a74.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4d3a7a.  v0:= temp;
  #L4d3a7c.  if v0 == 0 then goto L4d3a40;
  #L4d3a80.  v5:= 1I;
  #L4d3a82.  return v5;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.single.SingleCache` v6 @kind this, `io.reactivex.rxjava3.internal.operators.single.SingleCache$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleCache;.d:(Lio/reactivex/rxjava3/internal/operators/single/SingleCache$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4d3bb0.  v0:= v6.`io.reactivex.rxjava3.internal.operators.single.SingleCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d3bb4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d3bba.  v0:= temp @kind object;
  #L4d3bbc.  v0:= (`io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[]) v0 @kind object;
  #L4d3bc0.  v1:= length @variable v0;
  #L4d3bc2.  if v1 != 0 then goto L4d3bc8;
  #L4d3bc6.  return @kind void;
  #L4d3bc8.  v2:= -1I;
  #L4d3bca.  v3:= 0I;
  #L4d3bcc.  v4:= 0I;
  #L4d3bce.  if v4 >= v1 then goto L4d3be4;
  #L4d3bd2.  v5:= v0[v4] @kind object;
  #L4d3bd6.  if v5 != v7 then goto L4d3bde;
  #L4d3bda.  v2:= v4;
  #L4d3bdc.  goto L4d3be4;
  #L4d3bde.  v4:= v4 + 1;
  #L4d3be2.  goto L4d3bce;
  #L4d3be4.  if v2 >= 0 then goto L4d3bea;
  #L4d3be8.  return @kind void;
  #L4d3bea.  v4:= 1I;
  #L4d3bec.  if v1 != v4 then goto L4d3bf6;
  #L4d3bf0.  v1:= `@@io.reactivex.rxjava3.internal.operators.single.SingleCache.f` @type ^`io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[] @kind object;
  #L4d3bf4.  goto L4d3c14;
  #L4d3bf6.  v5:= v1 + -1;
  #L4d3bfa.  v5:= new `io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[v5];
  #L4d3bfe.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4d3c04.  v3:= v2 + 1;
  #L4d3c08.  v1:= v1 - v2 @kind int;
  #L4d3c0a.  v1:= v1 - v4 @kind int;
  #L4d3c0c.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4d3c12.  v1:= v5 @kind object;
  #L4d3c14.  v2:= v6.`io.reactivex.rxjava3.internal.operators.single.SingleCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d3c18.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4d3c1e.  v0:= temp;
  #L4d3c20.  if v0 == 0 then goto L4d3bb0;
  #L4d3c24.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.single.SingleCache` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleCache;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4d3af4.  v5.`io.reactivex.rxjava3.internal.operators.single.SingleCache.e` @type ^`java.lang.Throwable` := v6 @kind object;
  #L4d3af8.  v0:= v5.`io.reactivex.rxjava3.internal.operators.single.SingleCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d3afc.  v1:= `@@io.reactivex.rxjava3.internal.operators.single.SingleCache.g` @type ^`io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[] @kind object;
  #L4d3b00.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4d3b06.  v0:= temp @kind object;
  #L4d3b08.  v0:= (`io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[]) v0 @kind object;
  #L4d3b0c.  v1:= length @variable v0;
  #L4d3b0e.  v2:= 0I;
  #L4d3b10.  if v2 >= v1 then goto L4d3b34;
  #L4d3b14.  v3:= v0[v2] @kind object;
  #L4d3b18.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleCache$a;.isDisposed:()Z` @kind virtual;
  #L4d3b1e.  v4:= temp;
  #L4d3b20.  if v4 != 0 then goto L4d3b2e;
  #L4d3b24.  v3:= v3.`io.reactivex.rxjava3.internal.operators.single.SingleCache$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d3b28.  call `onError`(v3, v6) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d3b2e.  v2:= v2 + 1;
  #L4d3b32.  goto L4d3b10;
  #L4d3b34.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.single.SingleCache` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleCache;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4d3b48.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.single.SingleCache` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleCache;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4d3b5c.  v5.`io.reactivex.rxjava3.internal.operators.single.SingleCache.d` @type ^`java.lang.Object` := v6 @kind object;
  #L4d3b60.  v0:= v5.`io.reactivex.rxjava3.internal.operators.single.SingleCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d3b64.  v1:= `@@io.reactivex.rxjava3.internal.operators.single.SingleCache.g` @type ^`io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[] @kind object;
  #L4d3b68.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4d3b6e.  v0:= temp @kind object;
  #L4d3b70.  v0:= (`io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[]) v0 @kind object;
  #L4d3b74.  v1:= length @variable v0;
  #L4d3b76.  v2:= 0I;
  #L4d3b78.  if v2 >= v1 then goto L4d3b9c;
  #L4d3b7c.  v3:= v0[v2] @kind object;
  #L4d3b80.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleCache$a;.isDisposed:()Z` @kind virtual;
  #L4d3b86.  v4:= temp;
  #L4d3b88.  if v4 != 0 then goto L4d3b96;
  #L4d3b8c.  v3:= v3.`io.reactivex.rxjava3.internal.operators.single.SingleCache$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d3b90.  call `onSuccess`(v3, v6) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4d3b96.  v2:= v2 + 1;
  #L4d3b9a.  goto L4d3b78;
  #L4d3b9c.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.single.SingleCache` v2 @kind this, `io.reactivex.rxjava3.core.SingleObserver` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleCache;.subscribeActual:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4d3c38.  v0:= new `io.reactivex.rxjava3.internal.operators.single.SingleCache$a`;
  #L4d3c3c.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleCache$a;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;Lio/reactivex/rxjava3/internal/operators/single/SingleCache;)V` @kind direct;
  #L4d3c42.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4d3c48.  call temp:= `c`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleCache;.c:(Lio/reactivex/rxjava3/internal/operators/single/SingleCache$a;)Z` @kind virtual;
  #L4d3c4e.  v1:= temp;
  #L4d3c50.  if v1 == 0 then goto L4d3c82;
  #L4d3c54.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleCache$a;.isDisposed:()Z` @kind virtual;
  #L4d3c5a.  v3:= temp;
  #L4d3c5c.  if v3 == 0 then goto L4d3c66;
  #L4d3c60.  call `d`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleCache;.d:(Lio/reactivex/rxjava3/internal/operators/single/SingleCache$a;)V` @kind virtual;
  #L4d3c66.  v3:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleCache.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4d3c6a.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d3c70.  v3:= temp;
  #L4d3c72.  if v3 != 0 then goto L4d3c80;
  #L4d3c76.  v3:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleCache.a` @type ^`io.reactivex.rxjava3.core.SingleSource` @kind object;
  #L4d3c7a.  call `subscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/SingleSource;.subscribe:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind interface;
  #L4d3c80.  return @kind void;
  #L4d3c82.  v0:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleCache.e` @type ^`java.lang.Throwable` @kind object;
  #L4d3c86.  if v0 == 0 then goto L4d3c92;
  #L4d3c8a.  call `onError`(v3, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d3c90.  goto L4d3c9c;
  #L4d3c92.  v0:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleCache.d` @type ^`java.lang.Object` @kind object;
  #L4d3c96.  call `onSuccess`(v3, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4d3c9c.  return @kind void;
}
