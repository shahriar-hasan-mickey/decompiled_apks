record `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatten$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4acf24.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4acf2a.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4acf2e.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4acf32.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatten$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4acf44.  call temp:= `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4acf4a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4acf4e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4acf54.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatten$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4acefc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4acf02.  v0:= temp @kind object;
  #L4acf04.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4acf08.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4acf0e.  v0:= temp;
  #L4acf10.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatten$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4acf68.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4acf6c.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4acf72.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatten$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4acf84.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4acf88.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4acf8e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatten$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4acfa0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4acfa4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4acfaa.  v0:= temp;
  #L4acfac.  if v0 == 0 then goto L4acfbe;
  #L4acfb0.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4acfb4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4acfb8.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4acfbe.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatten$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4acfd0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4acfd4.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4acfda.  v2:= temp @kind object;
  #L4acfdc.  v0:= "The mapper returned a null MaybeSource" @kind object;
  #L4acfe0.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4acfe6.  v2:= (`io.reactivex.rxjava3.core.MaybeSource`) v2 @kind object;
  #L4acfea.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatten$a;.isDisposed:()Z` @kind virtual;
  #L4acff0.  v0:= temp;
  #L4acff2.  if v0 != 0 then goto L4ad006;
  #L4acff6.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$a$a`;
  #L4acffa.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatten$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatten$a;)V` @kind direct;
  #L4ad000.  call `subscribe`(v2, v0) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4ad006.  return @kind void;
  #L4ad008.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ad00a.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ad010.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4ad014.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ad01a.  return @kind void;
  catch `java.lang.Throwable` @[L4acfd0..L4acfea] goto L4ad008;
}
