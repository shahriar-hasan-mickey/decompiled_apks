record `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface {
  `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c.c` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c` v0 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cebb8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4cebbe.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` := v1 @kind object;
  #L4cebc2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c.b` @type ^`int` := v2;
  #L4cebc6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$c;.a:()V` @AccessFlag PUBLIC {
    temp;

  #L4cebd8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4cebde.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4cebf0.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` @kind object;
  #L4cebf4.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c.b` @type ^`int`;
  #L4cebf8.  v2:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c.c` @type ^`boolean` @kind boolean;
  #L4cebfc.  call `b`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.b:(IZ)V` @kind virtual;
  #L4cec02.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4cec14.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` @kind object;
  #L4cec18.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c.b` @type ^`int`;
  #L4cec1c.  call `c`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.c:(ILjava/lang/Throwable;)V` @kind virtual;
  #L4cec22.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4cec34.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c.c` @type ^`boolean` @kind boolean;
  #L4cec38.  if v0 != 0 then goto L4cec42;
  #L4cec3c.  v0:= 1I;
  #L4cec3e.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c.c` @type ^`boolean` := v0 @kind boolean;
  #L4cec42.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` @kind object;
  #L4cec46.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c.b` @type ^`int`;
  #L4cec4a.  call `d`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.d:(ILjava/lang/Object;)V` @kind virtual;
  #L4cec50.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$c;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4cec64.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4cec6a.  return @kind void;
}
