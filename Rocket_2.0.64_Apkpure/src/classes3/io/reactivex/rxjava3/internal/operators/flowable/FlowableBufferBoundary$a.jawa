record `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Supplier` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.h` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.i` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.j` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.k` @AccessFlag VOLATILE;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.l` @AccessFlag ;
  `java.util.Map` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.m` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.n` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `io.reactivex.rxjava3.functions.Supplier` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/Supplier;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L488754.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L48875a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L48875e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.b` @type ^`io.reactivex.rxjava3.functions.Supplier` := v4 @kind object;
  #L488762.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.c` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L488766.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.d` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L48876a.  v1:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L48876e.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L488774.  v2:= temp;
  #L488776.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L48877c.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.j` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v1 @kind object;
  #L488780.  v1:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L488784.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L48878a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v1 @kind object;
  #L48878e.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L488792.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L488798.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L48879c.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4887a0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4887a6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4887aa.  v1:= new `java.util.LinkedHashMap`;
  #L4887ae.  call `<init>`(v1) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L4887b4.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.m` @type ^`java.util.Map` := v1 @kind object;
  #L4887b8.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4887bc.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4887c2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4887c6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.a:(Lio/reactivex/rxjava3/disposables/Disposable;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4887d8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4887dc.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4887e2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4887e6.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4887ec.  call `onError`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4887f2.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` v3 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$b` v4 @kind object, `long` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.b:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$b;J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L488874.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L488878.  call temp:= `delete`(v0, v4) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L48887e.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L488882.  call temp:= `size`(v4) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.size:()I` @kind virtual;
  #L488888.  v4:= temp;
  #L48888a.  v0:= 1I;
  #L48888c.  if v4 != 0 then goto L48889e;
  #L488890.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L488894.  call temp:= `cancel`(v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L48889a.  v4:= 1I;
  #L48889c.  goto L4888a0;
  #L48889e.  v4:= 0I;
  #L4888a0.  @monitorenter v3
  #L4888a2.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.m` @type ^`java.util.Map` @kind object;
  #L4888a6.  if v1 != 0 then goto L4888ae;
  #L4888aa.  @monitorexit v3
  #L4888ac.  return @kind void;
  #L4888ae.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.j` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4888b2.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4888b8.  v5:= temp @kind object;
  #L4888ba.  call temp:= `remove`(v1, v5) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4888c0.  v5:= temp @kind object;
  #L4888c2.  call temp:= `offer`(v2, v5) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4888c8.  @monitorexit v3
  #L4888ca.  if v4 == 0 then goto L4888d2;
  #L4888ce.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4888d2.  call `c`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.c:()V` @kind virtual;
  #L4888d8.  return @kind void;
  #L4888da.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4888dc.  @monitorexit v3
  #L4888de.  throw v4;
  catch `java.lang.Throwable` @[L4888a2..L4888ca] goto L4888da;
  catch `java.lang.Throwable` @[L4888dc..L4888de] goto L4888da;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` v12 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L488904.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L48890a.  v0:= temp;
  #L48890c.  if v0 == 0 then goto L488912;
  #L488910.  return @kind void;
  #L488912.  v0:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.n` @type ^`long` @kind wide;
  #L488916.  v2:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48891a.  v3:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.j` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L48891e.  v4:= 1I;
  #L488920.  v5:= 1I;
  #L488922.  v6:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L488926.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L48892c.  v6:= temp @kind wide;
  #L48892e.  v8:= lcmp(v0, v6);
  #L488932.  if v8 == 0 then goto L4889aa;
  #L488936.  v9:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.k` @type ^`boolean` @kind boolean;
  #L48893a.  if v9 == 0 then goto L488946;
  #L48893e.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L488944.  return @kind void;
  #L488946.  v9:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.i` @type ^`boolean` @kind boolean;
  #L48894a.  if v9 == 0 then goto L488970;
  #L48894e.  v10:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L488952.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L488958.  v10:= temp @kind object;
  #L48895a.  if v10 == 0 then goto L488970;
  #L48895e.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L488964.  v0:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L488968.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L48896e.  return @kind void;
  #L488970.  call temp:= `poll`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L488976.  v10:= temp @kind object;
  #L488978.  v10:= (`java.util.Collection`) v10 @kind object;
  #L48897c.  if v10 != 0 then goto L488984;
  #L488980.  v11:= 1I;
  #L488982.  goto L488986;
  #L488984.  v11:= 0I;
  #L488986.  if v9 == 0 then goto L488996;
  #L48898a.  if v11 == 0 then goto L488996;
  #L48898e.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L488994.  return @kind void;
  #L488996.  if v11 == 0 then goto L48899c;
  #L48899a.  goto L4889aa;
  #L48899c.  call `onNext`(v2, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4889a2.  v8:= 1L;
  #L4889a6.  v0:= v0 + v8 @kind long;
  #L4889a8.  goto L48892e;
  #L4889aa.  if v8 != 0 then goto L4889fc;
  #L4889ae.  v6:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.k` @type ^`boolean` @kind boolean;
  #L4889b2.  if v6 == 0 then goto L4889be;
  #L4889b6.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4889bc.  return @kind void;
  #L4889be.  v6:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.i` @type ^`boolean` @kind boolean;
  #L4889c2.  if v6 == 0 then goto L4889fc;
  #L4889c6.  v6:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4889ca.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4889d0.  v6:= temp @kind object;
  #L4889d2.  if v6 == 0 then goto L4889e8;
  #L4889d6.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4889dc.  v0:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4889e0.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4889e6.  return @kind void;
  #L4889e8.  call temp:= `isEmpty`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4889ee.  v6:= temp;
  #L4889f0.  if v6 == 0 then goto L4889fc;
  #L4889f4.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4889fa.  return @kind void;
  #L4889fc.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.n` @type ^`long` := v0 @kind wide;
  #L488a00.  v5:= -v5 @kind int;
  #L488a02.  call temp:= `addAndGet`(v12, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L488a08.  v5:= temp;
  #L488a0a.  if v5 != 0 then goto L488922;
  #L488a0e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L488804.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L488808.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L48880e.  v0:= temp;
  #L488810.  if v0 == 0 then goto L48884c;
  #L488814.  v0:= 1I;
  #L488816.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.k` @type ^`boolean` := v0 @kind boolean;
  #L48881a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L48881e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L488824.  @monitorenter v1
  #L488826.  v0:= 0I;
  #L488828.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.m` @type ^`java.util.Map` := v0 @kind object;
  #L48882c.  @monitorexit v1
  #L48882e.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L488834.  v0:= temp;
  #L488836.  if v0 == 0 then goto L48884c;
  #L48883a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.j` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L48883e.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L488844.  goto L48884c;
  #L488846.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L488848.  @monitorexit v1
  #L48884a.  throw v0;
  #L48884c.  return @kind void;
  catch `java.lang.Throwable` @[L488828..L48882e] goto L488846;
  catch `java.lang.Throwable` @[L488848..L48884a] goto L488846;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.d:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L488bc0.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.b` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L488bc4.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L488bca.  v0:= temp @kind object;
  #L488bcc.  v1:= "The bufferSupplier returned a null Collection" @kind object;
  #L488bd0.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L488bd6.  v0:= (`java.util.Collection`) v0 @kind object;
  #L488bda.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.d` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L488bde.  call temp:= `apply`(v1, v6) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L488be4.  v6:= temp @kind object;
  #L488be6.  v1:= "The bufferClose returned a null Publisher" @kind object;
  #L488bea.  call temp:= `requireNonNull`(v6, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L488bf0.  v6:= (`org.reactivestreams.Publisher`) v6 @kind object;
  #L488bf4.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.l` @type ^`long` @kind wide;
  #L488bf8.  v3:= 1L;
  #L488bfc.  v3:= v3 + v1 @kind long;
  #L488bfe.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.l` @type ^`long` := v3 @kind wide;
  #L488c02.  @monitorenter v5
  #L488c04.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.m` @type ^`java.util.Map` @kind object;
  #L488c08.  if v3 != 0 then goto L488c10;
  #L488c0c.  @monitorexit v5
  #L488c0e.  return @kind void;
  #L488c10.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L488c16.  v4:= temp @kind object;
  #L488c18.  call temp:= `put`(v3, v4, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L488c1e.  @monitorexit v5
  #L488c20.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$b`;
  #L488c24.  call `<init>`(v0, v5, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;J)V` @kind direct;
  #L488c2a.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L488c2e.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L488c34.  call `subscribe`(v6, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L488c3a.  return @kind void;
  #L488c3c.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L488c3e.  @monitorexit v5
  #L488c40.  throw v6;
  #L488c42.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L488c44.  call `throwIfFatal`(v6) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L488c4a.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L488c4e.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L488c54.  call `onError`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L488c5a.  return @kind void;
  catch `java.lang.Throwable` @[L488bc0..L488bf4] goto L488c42;
  catch `java.lang.Throwable` @[L488c04..L488c20] goto L488c3c;
  catch `java.lang.Throwable` @[L488c3e..L488c40] goto L488c3c;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a$a` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.e:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a$a;)V` @AccessFlag  {
    temp;
    v0;

  #L488c8c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L488c90.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L488c96.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L488c9a.  call temp:= `size`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.size:()I` @kind virtual;
  #L488ca0.  v2:= temp;
  #L488ca2.  if v2 != 0 then goto L488cbc;
  #L488ca6.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L488caa.  call temp:= `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L488cb0.  v2:= 1I;
  #L488cb2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.i` @type ^`boolean` := v2 @kind boolean;
  #L488cb6.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.c:()V` @kind virtual;
  #L488cbc.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L488a20.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L488a24.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L488a2a.  @monitorenter v3
  #L488a2c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.m` @type ^`java.util.Map` @kind object;
  #L488a30.  if v0 != 0 then goto L488a38;
  #L488a34.  @monitorexit v3
  #L488a36.  return @kind void;
  #L488a38.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L488a3e.  v0:= temp @kind object;
  #L488a40.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L488a46.  v0:= temp @kind object;
  #L488a48.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L488a4e.  v1:= temp;
  #L488a50.  if v1 == 0 then goto L488a6c;
  #L488a54.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L488a5a.  v1:= temp @kind object;
  #L488a5c.  v1:= (`java.util.Collection`) v1 @kind object;
  #L488a60.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.j` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L488a64.  call temp:= `offer`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L488a6a.  goto L488a48;
  #L488a6c.  v0:= 0I;
  #L488a6e.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.m` @type ^`java.util.Map` := v0 @kind object;
  #L488a72.  @monitorexit v3
  #L488a74.  v0:= 1I;
  #L488a76.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.i` @type ^`boolean` := v0 @kind boolean;
  #L488a7a.  call `c`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.c:()V` @kind virtual;
  #L488a80.  return @kind void;
  #L488a82.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L488a84.  @monitorexit v3
  #L488a86.  throw v0;
  catch `java.lang.Throwable` @[L488a2c..L488a74] goto L488a82;
  catch `java.lang.Throwable` @[L488a84..L488a86] goto L488a82;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L488aac.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L488ab0.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L488ab6.  v2:= temp;
  #L488ab8.  if v2 == 0 then goto L488ae4;
  #L488abc.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L488ac0.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L488ac6.  @monitorenter v1
  #L488ac8.  v2:= 0I;
  #L488aca.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.m` @type ^`java.util.Map` := v2 @kind object;
  #L488ace.  @monitorexit v1
  #L488ad0.  v2:= 1I;
  #L488ad2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.i` @type ^`boolean` := v2 @kind boolean;
  #L488ad6.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.c:()V` @kind virtual;
  #L488adc.  goto L488ae4;
  #L488ade.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L488ae0.  @monitorexit v1
  #L488ae2.  throw v2;
  #L488ae4.  return @kind void;
  catch `java.lang.Throwable` @[L488aca..L488ad0] goto L488ade;
  catch `java.lang.Throwable` @[L488ae0..L488ae2] goto L488ade;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L488b0c.  @monitorenter v2
  #L488b0e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.m` @type ^`java.util.Map` @kind object;
  #L488b12.  if v0 != 0 then goto L488b1a;
  #L488b16.  @monitorexit v2
  #L488b18.  return @kind void;
  #L488b1a.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L488b20.  v0:= temp @kind object;
  #L488b22.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L488b28.  v0:= temp @kind object;
  #L488b2a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L488b30.  v1:= temp;
  #L488b32.  if v1 == 0 then goto L488b4a;
  #L488b36.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L488b3c.  v1:= temp @kind object;
  #L488b3e.  v1:= (`java.util.Collection`) v1 @kind object;
  #L488b42.  call temp:= `add`(v1, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L488b48.  goto L488b2a;
  #L488b4a.  @monitorexit v2
  #L488b4c.  return @kind void;
  #L488b4e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L488b50.  @monitorexit v2
  #L488b52.  throw v3;
  catch `java.lang.Throwable` @[L488b0e..L488b52] goto L488b4e;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L488b70.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L488b74.  call temp:= `setOnce`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L488b7a.  v0:= temp;
  #L488b7c.  if v0 == 0 then goto L488bae;
  #L488b80.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a$a`;
  #L488b84.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;)V` @kind direct;
  #L488b8a.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L488b8e.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L488b94.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.c` @type ^`org.reactivestreams.Publisher` @kind object;
  #L488b98.  call `subscribe`(v1, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L488b9e.  v0:= 9223372036854775807L;
  #L488ba8.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L488bae.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L488cd0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L488cd4.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L488cda.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.c:()V` @kind virtual;
  #L488ce0.  return @kind void;
}
