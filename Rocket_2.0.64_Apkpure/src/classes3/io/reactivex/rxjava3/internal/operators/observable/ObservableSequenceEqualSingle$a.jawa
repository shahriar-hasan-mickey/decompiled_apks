record `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.SingleObserver` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiPredicate` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.disposables.ArrayCompositeDisposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b`[] `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.g` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.h` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.i` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a` v0 @kind this, `io.reactivex.rxjava3.core.SingleObserver` v1 @kind object, `int` v2 , `io.reactivex.rxjava3.core.ObservableSource` v3 @kind object, `io.reactivex.rxjava3.core.ObservableSource` v4 @kind object, `io.reactivex.rxjava3.functions.BiPredicate` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$a;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;ILio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c82f0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4c82f6.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` := v1 @kind object;
  #L4c82fa.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.d` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v3 @kind object;
  #L4c82fe.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v4 @kind object;
  #L4c8302.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` := v5 @kind object;
  #L4c8306.  v1:= 2I;
  #L4c8308.  v3:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b`[v1];
  #L4c830c.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b`[] := v3 @kind object;
  #L4c8310.  v4:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b`;
  #L4c8314.  v5:= 0I;
  #L4c8316.  call `<init>`(v4, v0, v5, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$a;II)V` @kind direct;
  #L4c831c.  v3[v5]:= v4 @kind object;
  #L4c8320.  v4:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b`;
  #L4c8324.  v5:= 1I;
  #L4c8326.  call `<init>`(v4, v0, v5, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$a;II)V` @kind direct;
  #L4c832c.  v3[v5]:= v4 @kind object;
  #L4c8330.  v2:= new `io.reactivex.rxjava3.internal.disposables.ArrayCompositeDisposable`;
  #L4c8334.  call `<init>`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/ArrayCompositeDisposable;.<init>:(I)V` @kind direct;
  #L4c833a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.disposables.ArrayCompositeDisposable` := v2 @kind object;
  #L4c833e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a` v1 @kind this, `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` v2 @kind object, `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$a;.a:(Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @AccessFlag  {
    temp;
    v0;

  #L4c8350.  v0:= 1I;
  #L4c8352.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4c8356.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c835c.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c8362.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a` v12 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4c83cc.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c83d2.  v0:= temp;
  #L4c83d4.  if v0 == 0 then goto L4c83da;
  #L4c83d8.  return @kind void;
  #L4c83da.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b`[] @kind object;
  #L4c83de.  v1:= 0I;
  #L4c83e0.  v2:= v0[v1] @kind object;
  #L4c83e4.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c83e8.  v4:= 1I;
  #L4c83ea.  v0:= v0[v4] @kind object;
  #L4c83ee.  v5:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c83f2.  v6:= 1I;
  #L4c83f4.  v7:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.g` @type ^`boolean` @kind boolean;
  #L4c83f8.  if v7 == 0 then goto L4c840a;
  #L4c83fc.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c8402.  call `clear`(v5) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c8408.  return @kind void;
  #L4c840a.  v7:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b.d` @type ^`boolean` @kind boolean;
  #L4c840e.  if v7 == 0 then goto L4c842c;
  #L4c8412.  v8:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b.e` @type ^`java.lang.Throwable` @kind object;
  #L4c8416.  if v8 == 0 then goto L4c842c;
  #L4c841a.  call `a`(v12, v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$a;.a:(Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4c8420.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4c8424.  call `onError`(v0, v8) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c842a.  return @kind void;
  #L4c842c.  v8:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b.d` @type ^`boolean` @kind boolean;
  #L4c8430.  if v8 == 0 then goto L4c844e;
  #L4c8434.  v9:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b.e` @type ^`java.lang.Throwable` @kind object;
  #L4c8438.  if v9 == 0 then goto L4c844e;
  #L4c843c.  call `a`(v12, v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$a;.a:(Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4c8442.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4c8446.  call `onError`(v0, v9) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c844c.  return @kind void;
  #L4c844e.  v9:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.h` @type ^`java.lang.Object` @kind object;
  #L4c8452.  if v9 != 0 then goto L4c8462;
  #L4c8456.  call temp:= `poll`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4c845c.  v9:= temp @kind object;
  #L4c845e.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.h` @type ^`java.lang.Object` := v9 @kind object;
  #L4c8462.  v9:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.h` @type ^`java.lang.Object` @kind object;
  #L4c8466.  if v9 != 0 then goto L4c846e;
  #L4c846a.  v9:= 1I;
  #L4c846c.  goto L4c8470;
  #L4c846e.  v9:= 0I;
  #L4c8470.  v10:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.i` @type ^`java.lang.Object` @kind object;
  #L4c8474.  if v10 != 0 then goto L4c8484;
  #L4c8478.  call temp:= `poll`(v5) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4c847e.  v10:= temp @kind object;
  #L4c8480.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.i` @type ^`java.lang.Object` := v10 @kind object;
  #L4c8484.  v10:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.i` @type ^`java.lang.Object` @kind object;
  #L4c8488.  if v10 != 0 then goto L4c8490;
  #L4c848c.  v11:= 1I;
  #L4c848e.  goto L4c8492;
  #L4c8490.  v11:= 0I;
  #L4c8492.  if v7 == 0 then goto L4c84b2;
  #L4c8496.  if v8 == 0 then goto L4c84b2;
  #L4c849a.  if v9 == 0 then goto L4c84b2;
  #L4c849e.  if v11 == 0 then goto L4c84b2;
  #L4c84a2.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4c84a6.  v1:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L4c84aa.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4c84b0.  return @kind void;
  #L4c84b2.  if v7 == 0 then goto L4c84d4;
  #L4c84b6.  if v8 == 0 then goto L4c84d4;
  #L4c84ba.  if v9 == v11 then goto L4c84d4;
  #L4c84be.  call `a`(v12, v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$a;.a:(Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4c84c4.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4c84c8.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L4c84cc.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4c84d2.  return @kind void;
  #L4c84d4.  if v9 != 0 then goto L4c852c;
  #L4c84d8.  if v11 != 0 then goto L4c852c;
  #L4c84dc.  v7:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` @kind object;
  #L4c84e0.  v8:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.h` @type ^`java.lang.Object` @kind object;
  #L4c84e4.  call temp:= `test`(v7, v8, v10) @signature `Lio/reactivex/rxjava3/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L4c84ea.  v7:= temp;
  #L4c84ec.  if v7 != 0 then goto L4c8506;
  #L4c84f0.  call `a`(v12, v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$a;.a:(Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4c84f6.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4c84fa.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L4c84fe.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4c8504.  return @kind void;
  #L4c8506.  v7:= 0I;
  #L4c8508.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.h` @type ^`java.lang.Object` := v7 @kind object;
  #L4c850c.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.i` @type ^`java.lang.Object` := v7 @kind object;
  #L4c8510.  goto L4c852c;
  #L4c8512.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c8514.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c851a.  call `a`(v12, v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$a;.a:(Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4c8520.  v1:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4c8524.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c852a.  return @kind void;
  #L4c852c.  if v9 != 0 then goto L4c8534;
  #L4c8530.  if v11 == 0 then goto L4c83f4;
  #L4c8534.  v6:= -v6 @kind int;
  #L4c8536.  call temp:= `addAndGet`(v12, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4c853c.  v6:= temp;
  #L4c853e.  if v6 != 0 then goto L4c83f4;
  #L4c8542.  return @kind void;
  catch `java.lang.Throwable` @[L4c84dc..L4c84ec] goto L4c8512;
}
procedure `boolean` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$a;.c:(Lio/reactivex/rxjava3/disposables/Disposable;I)Z` @AccessFlag  {
    temp;
    v0;

  #L4c82d0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L4c82d4.  call temp:= `setResource`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/ArrayCompositeDisposable;.setResource:(ILio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c82da.  v2:= temp;
  #L4c82dc.  return v2;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$a;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4c8560.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b`[] @kind object;
  #L4c8564.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.d` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4c8568.  v2:= 0I;
  #L4c856a.  v2:= v0[v2] @kind object;
  #L4c856e.  call `subscribe`(v1, v2) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4c8574.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4c8578.  v2:= 1I;
  #L4c857a.  v0:= v0[v2] @kind object;
  #L4c857e.  call `subscribe`(v1, v0) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4c8584.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c8374.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.g` @type ^`boolean` @kind boolean;
  #L4c8378.  if v0 != 0 then goto L4c83ba;
  #L4c837c.  v0:= 1I;
  #L4c837e.  v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4c8382.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L4c8386.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/ArrayCompositeDisposable;.dispose:()V` @kind virtual;
  #L4c838c.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c8392.  v1:= temp;
  #L4c8394.  if v1 != 0 then goto L4c83ba;
  #L4c8398.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b`[] @kind object;
  #L4c839c.  v2:= 0I;
  #L4c839e.  v2:= v1[v2] @kind object;
  #L4c83a2.  v2:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c83a6.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c83ac.  v0:= v1[v0] @kind object;
  #L4c83b0.  v0:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c83b4.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c83ba.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c82b8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.g` @type ^`boolean` @kind boolean;
  #L4c82bc.  return v0;
}
