record `io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a$a` `io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilMaybe$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4af6b8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4af6be.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4af6c2.  v1:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a$a`;
  #L4af6c6.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilMaybe$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilMaybe$a;)V` @kind direct;
  #L4af6cc.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a$a` := v1 @kind object;
  #L4af6d0.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilMaybe$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4af7d0.  call temp:= `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4af7d6.  v0:= temp;
  #L4af7d8.  if v0 == 0 then goto L4af7e6;
  #L4af7dc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4af7e0.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4af7e6.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilMaybe$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4af7f8.  call temp:= `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4af7fe.  v0:= temp;
  #L4af800.  if v0 == 0 then goto L4af810;
  #L4af804.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4af808.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4af80e.  goto L4af816;
  #L4af810.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4af816.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4af6e4.  call temp:= `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4af6ea.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a$a` @kind object;
  #L4af6ee.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4af6f4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4af690.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4af696.  v0:= temp @kind object;
  #L4af698.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4af69c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4af6a2.  v0:= temp;
  #L4af6a4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4af708.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a$a` @kind object;
  #L4af70c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4af712.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4af716.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4af71c.  v1:= temp @kind object;
  #L4af71e.  if v1 == v0 then goto L4af72c;
  #L4af722.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4af726.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4af72c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4af740.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a$a` @kind object;
  #L4af744.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4af74a.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4af74e.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4af754.  v1:= temp @kind object;
  #L4af756.  if v1 == v0 then goto L4af766;
  #L4af75a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4af75e.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4af764.  goto L4af76c;
  #L4af766.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4af76c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilMaybe$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4af780.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4af786.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilMaybe$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4af798.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a$a` @kind object;
  #L4af79c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4af7a2.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4af7a6.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4af7ac.  v1:= temp @kind object;
  #L4af7ae.  if v1 == v0 then goto L4af7bc;
  #L4af7b2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4af7b6.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4af7bc.  return @kind void;
}
