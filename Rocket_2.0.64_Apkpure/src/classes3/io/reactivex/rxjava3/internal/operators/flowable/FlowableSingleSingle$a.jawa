record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.SingleObserver` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.a` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.d` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a` v0 @kind this, `io.reactivex.rxjava3.core.SingleObserver` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingleSingle$a;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a112c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a1132.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` := v1 @kind object;
  #L4a1136.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.b` @type ^`java.lang.Object` := v2 @kind object;
  #L4a113a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingleSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a114c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a1150.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a1156.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4a115a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4a115e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingleSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a1108.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a110c.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4a1110.  if v0 != v1 then goto L4a1118;
  #L4a1114.  v0:= 1I;
  #L4a1116.  goto L4a111a;
  #L4a1118.  v0:= 0I;
  #L4a111a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingleSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a1170.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.d` @type ^`boolean` @kind boolean;
  #L4a1174.  if v0 == 0 then goto L4a117a;
  #L4a1178.  return @kind void;
  #L4a117a.  v0:= 1I;
  #L4a117c.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4a1180.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4a1184.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4a1188.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.e` @type ^`java.lang.Object` @kind object;
  #L4a118c.  v1:= 0I;
  #L4a118e.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.e` @type ^`java.lang.Object` := v1 @kind object;
  #L4a1192.  if v0 != 0 then goto L4a119a;
  #L4a1196.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.b` @type ^`java.lang.Object` @kind object;
  #L4a119a.  if v0 == 0 then goto L4a11aa;
  #L4a119e.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4a11a2.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4a11a8.  goto L4a11be;
  #L4a11aa.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4a11ae.  v1:= new `java.util.NoSuchElementException`;
  #L4a11b2.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L4a11b8.  call `onError`(v0, v1) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a11be.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingleSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a11d0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.d` @type ^`boolean` @kind boolean;
  #L4a11d4.  if v0 == 0 then goto L4a11e0;
  #L4a11d8.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4a11de.  return @kind void;
  #L4a11e0.  v0:= 1I;
  #L4a11e2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4a11e6.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4a11ea.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4a11ee.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4a11f2.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a11f8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingleSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a120c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.d` @type ^`boolean` @kind boolean;
  #L4a1210.  if v0 == 0 then goto L4a1216;
  #L4a1214.  return @kind void;
  #L4a1216.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.e` @type ^`java.lang.Object` @kind object;
  #L4a121a.  if v0 == 0 then goto L4a1250;
  #L4a121e.  v3:= 1I;
  #L4a1220.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.d` @type ^`boolean` := v3 @kind boolean;
  #L4a1224.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a1228.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a122e.  v3:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4a1232.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4a1236.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4a123a.  v0:= new `java.lang.IllegalArgumentException`;
  #L4a123e.  v1:= "Sequence contains more than one element!" @kind object;
  #L4a1242.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a1248.  call `onError`(v3, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a124e.  return @kind void;
  #L4a1250.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.e` @type ^`java.lang.Object` := v3 @kind object;
  #L4a1254.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingleSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a1268.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a126c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4a1272.  v0:= temp;
  #L4a1274.  if v0 == 0 then goto L4a1296;
  #L4a1278.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4a127c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4a1280.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4a1286.  v0:= 9223372036854775807L;
  #L4a1290.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a1296.  return @kind void;
}
