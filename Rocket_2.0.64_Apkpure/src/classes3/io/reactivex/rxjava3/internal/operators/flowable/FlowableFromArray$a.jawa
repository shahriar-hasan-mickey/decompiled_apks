record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c` @kind class {
  `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$a.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$a` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromArray$a;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;[Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L493d08.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromArray$c;.<init>:([Ljava/lang/Object;)V` @kind direct;
  #L493d0e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L493d12.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromArray$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L493d24.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.a` @type ^`java.lang.Object`[] @kind object;
  #L493d28.  v1:= length @variable v0;
  #L493d2a.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L493d2e.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int`;
  #L493d32.  if v3 == v1 then goto L493d92;
  #L493d36.  v4:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L493d3a.  if v4 == 0 then goto L493d40;
  #L493d3e.  return @kind void;
  #L493d40.  v4:= v0[v3] @kind object;
  #L493d44.  if v4 != 0 then goto L493d86;
  #L493d48.  v0:= new `java.lang.NullPointerException`;
  #L493d4c.  v1:= new `java.lang.StringBuilder`;
  #L493d50.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L493d56.  v4:= "The element at index " @kind object;
  #L493d5a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L493d60.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L493d66.  v3:= " is null" @kind object;
  #L493d6a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L493d70.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L493d76.  v1:= temp @kind object;
  #L493d78.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L493d7e.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L493d84.  return @kind void;
  #L493d86.  call temp:= `tryOnNext`(v2, v4) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L493d8c.  v3:= v3 + 1;
  #L493d90.  goto L493d32;
  #L493d92.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L493d96.  if v0 == 0 then goto L493d9c;
  #L493d9a.  return @kind void;
  #L493d9c.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L493da2.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$a` v10 @kind this, `long` v11 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromArray$a;.e:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L493db4.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.a` @type ^`java.lang.Object`[] @kind object;
  #L493db8.  v1:= length @variable v0;
  #L493dba.  v2:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int`;
  #L493dbe.  v3:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L493dc2.  v4:= 0L;
  #L493dc6.  v6:= v4 @kind wide;
  #L493dc8.  v8:= lcmp(v6, v11);
  #L493dcc.  if v8 == 0 then goto L493e3c;
  #L493dd0.  if v2 == v1 then goto L493e3c;
  #L493dd4.  v8:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L493dd8.  if v8 == 0 then goto L493dde;
  #L493ddc.  return @kind void;
  #L493dde.  v8:= v0[v2] @kind object;
  #L493de2.  if v8 != 0 then goto L493e24;
  #L493de6.  v11:= new `java.lang.NullPointerException`;
  #L493dea.  v12:= new `java.lang.StringBuilder`;
  #L493dee.  call `<init>`(v12) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L493df4.  v0:= "The element at index " @kind object;
  #L493df8.  call temp:= `append`(v12, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L493dfe.  call temp:= `append`(v12, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L493e04.  v0:= " is null" @kind object;
  #L493e08.  call temp:= `append`(v12, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L493e0e.  call temp:= `toString`(v12) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L493e14.  v12:= temp @kind object;
  #L493e16.  call `<init>`(v11, v12) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L493e1c.  call `onError`(v3, v11) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L493e22.  return @kind void;
  #L493e24.  call temp:= `tryOnNext`(v3, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L493e2a.  v8:= temp;
  #L493e2c.  if v8 == 0 then goto L493e36;
  #L493e30.  v8:= 1L;
  #L493e34.  v6:= v6 + v8 @kind long;
  #L493e36.  v2:= v2 + 1;
  #L493e3a.  goto L493dc8;
  #L493e3c.  if v2 != v1 then goto L493e50;
  #L493e40.  v11:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L493e44.  if v11 != 0 then goto L493e4e;
  #L493e48.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L493e4e.  return @kind void;
  #L493e50.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L493e56.  v11:= temp @kind wide;
  #L493e58.  v8:= lcmp(v6, v11);
  #L493e5c.  if v8 != 0 then goto L493dc8;
  #L493e60.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int` := v2;
  #L493e64.  v11:= -v6 @kind long;
  #L493e66.  call temp:= `addAndGet`(v10, v11) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L493e6c.  v11:= temp @kind wide;
  #L493e6e.  v6:= lcmp(v11, v4);
  #L493e72.  if v6 != 0 then goto L493dc6;
  #L493e76.  return @kind void;
}
