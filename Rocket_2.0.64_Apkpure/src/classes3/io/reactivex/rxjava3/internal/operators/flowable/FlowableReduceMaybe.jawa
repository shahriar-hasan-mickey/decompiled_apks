record `io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Maybe` @kind class, `io.reactivex.rxjava3.internal.fuseable.HasUpstreamPublisher` @kind interface, `io.reactivex.rxjava3.internal.fuseable.FuseToFlowable` @kind interface {
  `io.reactivex.rxjava3.core.Flowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe` v0 @kind this, `io.reactivex.rxjava3.core.Flowable` v1 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReduceMaybe;.<init>:(Lio/reactivex/rxjava3/core/Flowable;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49ce54.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.<init>:()V` @kind direct;
  #L49ce5a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe.a` @type ^`io.reactivex.rxjava3.core.Flowable` := v1 @kind object;
  #L49ce5e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v2 @kind object;
  #L49ce62.  return @kind void;
}
procedure `io.reactivex.rxjava3.core.Flowable` `fuseToFlowable`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReduceMaybe;.fuseToFlowable:()Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49ce10.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce`;
  #L49ce14.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe.a` @type ^`io.reactivex.rxjava3.core.Flowable` @kind object;
  #L49ce18.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L49ce1c.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReduce;.<init>:(Lio/reactivex/rxjava3/core/Flowable;Lio/reactivex/rxjava3/functions/BiFunction;)V` @kind direct;
  #L49ce22.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Flowable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49ce28.  v0:= temp @kind object;
  #L49ce2a.  return v0 @kind object;
}
procedure `org.reactivestreams.Publisher` `source`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReduceMaybe;.source:()Lorg/reactivestreams/Publisher;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49ce3c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe.a` @type ^`io.reactivex.rxjava3.core.Flowable` @kind object;
  #L49ce40.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe` v3 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReduceMaybe;.subscribeActual:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L49ce74.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe.a` @type ^`io.reactivex.rxjava3.core.Flowable` @kind object;
  #L49ce78.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a`;
  #L49ce7c.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L49ce80.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReduceMaybe$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;Lio/reactivex/rxjava3/functions/BiFunction;)V` @kind direct;
  #L49ce86.  call `subscribe`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V` @kind virtual;
  #L49ce8c.  return @kind void;
}
