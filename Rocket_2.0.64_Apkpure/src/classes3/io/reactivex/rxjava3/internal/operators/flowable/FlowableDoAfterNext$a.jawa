record `io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber` @kind class {
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext$a.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext$a` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Consumer` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoAfterNext$a;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Consumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48f78c.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;)V` @kind direct;
  #L48f792.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext$a.a` @type ^`io.reactivex.rxjava3.functions.Consumer` := v2 @kind object;
  #L48f796.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoAfterNext$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48f7a8.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L48f7ac.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48f7b2.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L48f7b6.  if v0 != 0 then goto L48f7ce;
  #L48f7ba.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext$a.a` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L48f7be.  call `accept`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L48f7c4.  goto L48f7ce;
  #L48f7c6.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48f7c8.  call `fail`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L48f7ce.  return @kind void;
  catch `java.lang.Throwable` @[L48f7ba..L48f7c4] goto L48f7c6;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoAfterNext$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48f760.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.qs` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind object;
  #L48f764.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L48f76a.  v0:= temp @kind object;
  #L48f76c.  if v0 == 0 then goto L48f77a;
  #L48f770.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext$a.a` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L48f774.  call `accept`(v1, v0) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L48f77a.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoAfterNext$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L48f744.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L48f74a.  v1:= temp;
  #L48f74c.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoAfterNext$a;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48f704.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L48f708.  call temp:= `tryOnNext`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L48f70e.  v0:= temp;
  #L48f710.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext$a.a` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L48f714.  call `accept`(v1, v3) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L48f71a.  goto L48f724;
  #L48f71c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48f71e.  call `fail`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L48f724.  return v0;
  catch `java.lang.Throwable` @[L48f710..L48f71a] goto L48f71c;
}
