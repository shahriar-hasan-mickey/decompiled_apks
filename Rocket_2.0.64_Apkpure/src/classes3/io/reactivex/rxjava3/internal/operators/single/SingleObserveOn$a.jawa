record `io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.SingleObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.SingleObserver` `io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.c` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a` v0 @kind this, `io.reactivex.rxjava3.core.SingleObserver` v1 @kind object, `io.reactivex.rxjava3.core.Scheduler` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleObserveOn$a;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;Lio/reactivex/rxjava3/core/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d73d8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4d73de.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` := v1 @kind object;
  #L4d73e2.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler` := v2 @kind object;
  #L4d73e6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleObserveOn$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4d73f8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d73fe.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleObserveOn$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d73b0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d73b6.  v0:= temp @kind object;
  #L4d73b8.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4d73bc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4d73c2.  v0:= temp;
  #L4d73c4.  return v0;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleObserveOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4d7410.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.d` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4d7414.  v1:= v0.`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4d7418.  call temp:= `scheduleDirect`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4d741e.  v1:= temp @kind object;
  #L4d7420.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4d7426.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleObserveOn$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4d7438.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4d743e.  v1:= temp;
  #L4d7440.  if v1 == 0 then goto L4d744e;
  #L4d7444.  v1:= v0.`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d7448.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4d744e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleObserveOn$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4d7460.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4d7464.  v1:= v0.`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4d7468.  call temp:= `scheduleDirect`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4d746e.  v1:= temp @kind object;
  #L4d7470.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4d7476.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleObserveOn$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d7488.  v0:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.d` @type ^`java.lang.Throwable` @kind object;
  #L4d748c.  if v0 == 0 then goto L4d749c;
  #L4d7490.  v1:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d7494.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d749a.  goto L4d74aa;
  #L4d749c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d74a0.  v1:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.c` @type ^`java.lang.Object` @kind object;
  #L4d74a4.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4d74aa.  return @kind void;
}
