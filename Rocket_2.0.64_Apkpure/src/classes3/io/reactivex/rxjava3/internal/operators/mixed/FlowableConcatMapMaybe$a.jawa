record `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a$a` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.ErrorMode` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.h` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.i` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.k` @AccessFlag VOLATILE;
  `long` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.l` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.m` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.n` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.o` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 , `io.reactivex.rxjava3.internal.util.ErrorMode` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;ILio/reactivex/rxjava3/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b1ae4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4b1aea.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4b1aee.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4b1af2.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.c` @type ^`int` := v3;
  #L4b1af6.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` := v4 @kind object;
  #L4b1afa.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4b1afe.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4b1b04.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4b1b08.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4b1b0c.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4b1b12.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4b1b16.  v1:= new `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a$a`;
  #L4b1b1a.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;)V` @kind direct;
  #L4b1b20.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.f` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a$a` := v1 @kind object;
  #L4b1b24.  v1:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4b1b28.  call `<init>`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4b1b2e.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L4b1b32.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a` v15 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L4b1b98.  call temp:= `getAndIncrement`(v15) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4b1b9e.  v0:= temp;
  #L4b1ba0.  if v0 == 0 then goto L4b1ba6;
  #L4b1ba4.  return @kind void;
  #L4b1ba6.  v0:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b1baa.  v1:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b1bae.  v2:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4b1bb2.  v3:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b1bb6.  v4:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4b1bba.  v5:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.c` @type ^`int`;
  #L4b1bbe.  v6:= v5 ^> 1;
  #L4b1bc2.  v5:= v5 - v6 @kind int;
  #L4b1bc4.  v6:= 1I;
  #L4b1bc6.  v7:= 1I;
  #L4b1bc8.  v8:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.k` @type ^`boolean` @kind boolean;
  #L4b1bcc.  v9:= 0I;
  #L4b1bce.  if v8 == 0 then goto L4b1be0;
  #L4b1bd2.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b1bd8.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.n` @type ^`java.lang.Object` := v9 @kind object;
  #L4b1bdc.  goto L4b1cf2;
  #L4b1be0.  v8:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.o` @type ^`int`;
  #L4b1be4.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b1bea.  v10:= temp @kind object;
  #L4b1bec.  if v10 == 0 then goto L4b1c16;
  #L4b1bf0.  v10:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b1bf4.  if v1 == v10 then goto L4b1c04;
  #L4b1bf8.  v10:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b1bfc.  if v1 != v10 then goto L4b1c16;
  #L4b1c00.  if v8 != 0 then goto L4b1c16;
  #L4b1c04.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b1c0a.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.n` @type ^`java.lang.Object` := v9 @kind object;
  #L4b1c0e.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4b1c14.  return @kind void;
  #L4b1c16.  v10:= 0I;
  #L4b1c18.  if v8 != 0 then goto L4b1cb8;
  #L4b1c1c.  v8:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.j` @type ^`boolean` @kind boolean;
  #L4b1c20.  call temp:= `poll`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4b1c26.  v9:= temp @kind object;
  #L4b1c28.  if v9 != 0 then goto L4b1c30;
  #L4b1c2c.  v11:= 1I;
  #L4b1c2e.  goto L4b1c32;
  #L4b1c30.  v11:= 0I;
  #L4b1c32.  if v8 == 0 then goto L4b1c42;
  #L4b1c36.  if v11 == 0 then goto L4b1c42;
  #L4b1c3a.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4b1c40.  return @kind void;
  #L4b1c42.  if v11 == 0 then goto L4b1c48;
  #L4b1c46.  goto L4b1cf2;
  #L4b1c48.  v8:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.m` @type ^`int`;
  #L4b1c4c.  v8:= v8 + v6 @kind int;
  #L4b1c4e.  if v8 != v5 then goto L4b1c64;
  #L4b1c52.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.m` @type ^`int` := v10;
  #L4b1c56.  v8:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b1c5a.  v10:= (`long`) v5 @kind i2l;
  #L4b1c5c.  call `request`(v8, v10) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4b1c62.  goto L4b1c68;
  #L4b1c64.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.m` @type ^`int` := v8;
  #L4b1c68.  v8:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4b1c6c.  call temp:= `apply`(v8, v9) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b1c72.  v8:= temp @kind object;
  #L4b1c74.  v9:= "The mapper returned a null MaybeSource" @kind object;
  #L4b1c78.  call temp:= `requireNonNull`(v8, v9) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b1c7e.  v8:= (`io.reactivex.rxjava3.core.MaybeSource`) v8 @kind object;
  #L4b1c82.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.o` @type ^`int` := v6;
  #L4b1c86.  v9:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.f` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a$a` @kind object;
  #L4b1c8a.  call `subscribe`(v8, v9) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4b1c90.  goto L4b1cf2;
  #L4b1c92.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b1c94.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b1c9a.  v4:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b1c9e.  call `cancel`(v4) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b1ca4.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b1caa.  call temp:= `tryAddThrowableOrReport`(v3, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b1cb0.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4b1cb6.  return @kind void;
  #L4b1cb8.  v11:= 2I;
  #L4b1cba.  if v8 != v11 then goto L4b1cf2;
  #L4b1cbe.  v11:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.l` @type ^`long` @kind wide;
  #L4b1cc2.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4b1cc8.  v13:= temp @kind wide;
  #L4b1cca.  v8:= lcmp(v11, v13);
  #L4b1cce.  if v8 == 0 then goto L4b1cf2;
  #L4b1cd2.  v8:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.n` @type ^`java.lang.Object` @kind object;
  #L4b1cd6.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.n` @type ^`java.lang.Object` := v9 @kind object;
  #L4b1cda.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b1ce0.  v8:= 1L;
  #L4b1ce4.  v11:= v11 + v8 @kind long;
  #L4b1ce6.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.l` @type ^`long` := v11 @kind wide;
  #L4b1cea.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.o` @type ^`int` := v10;
  #L4b1cee.  goto L4b1bc8;
  #L4b1cf2.  v7:= -v7 @kind int;
  #L4b1cf4.  call temp:= `addAndGet`(v15, v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4b1cfa.  v7:= temp;
  #L4b1cfc.  if v7 != 0 then goto L4b1bc8;
  #L4b1d00.  return @kind void;
  catch `java.lang.Throwable` @[L4b1c68..L4b1c82] goto L4b1c92;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4b1d20.  v0:= 0I;
  #L4b1d22.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.o` @type ^`int` := v0;
  #L4b1d26.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L4b1d2c.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.c:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4b1d40.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b1d44.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b1d4a.  v2:= temp;
  #L4b1d4c.  if v2 == 0 then goto L4b1d72;
  #L4b1d50.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b1d54.  v0:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.END` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b1d58.  if v2 == v0 then goto L4b1d66;
  #L4b1d5c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b1d60.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b1d66.  v2:= 0I;
  #L4b1d68.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.o` @type ^`int` := v2;
  #L4b1d6c.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L4b1d72.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b1b44.  v0:= 1I;
  #L4b1b46.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.k` @type ^`boolean` := v0 @kind boolean;
  #L4b1b4a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b1b4e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b1b54.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.f` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a$a` @kind object;
  #L4b1b58.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a$a;.a:()V` @kind virtual;
  #L4b1b5e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b1b62.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4b1b68.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4b1b6e.  v0:= temp;
  #L4b1b70.  if v0 != 0 then goto L4b1b84;
  #L4b1b74.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4b1b78.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b1b7e.  v0:= 0I;
  #L4b1b80.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.n` @type ^`java.lang.Object` := v0 @kind object;
  #L4b1b84.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.d:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;

  #L4b1d84.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.n` @type ^`java.lang.Object` := v1 @kind object;
  #L4b1d88.  v1:= 2I;
  #L4b1d8a.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.o` @type ^`int` := v1;
  #L4b1d8e.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L4b1d94.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b1da8.  v0:= 1I;
  #L4b1daa.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.j` @type ^`boolean` := v0 @kind boolean;
  #L4b1dae.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L4b1db4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b1dc8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b1dcc.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b1dd2.  v2:= temp;
  #L4b1dd4.  if v2 == 0 then goto L4b1dfa;
  #L4b1dd8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b1ddc.  v0:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b1de0.  if v2 != v0 then goto L4b1dee;
  #L4b1de4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.f` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a$a` @kind object;
  #L4b1de8.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a$a;.a:()V` @kind virtual;
  #L4b1dee.  v2:= 1I;
  #L4b1df0.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.j` @type ^`boolean` := v2 @kind boolean;
  #L4b1df4.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L4b1dfa.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b1e0c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4b1e10.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4b1e16.  v2:= temp;
  #L4b1e18.  if v2 != 0 then goto L4b1e3c;
  #L4b1e1c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b1e20.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b1e26.  v2:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4b1e2a.  v0:= "queue full?!" @kind object;
  #L4b1e2e.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b1e34.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b1e3a.  return @kind void;
  #L4b1e3c.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L4b1e42.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b1e54.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b1e58.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4b1e5e.  v0:= temp;
  #L4b1e60.  if v0 == 0 then goto L4b1e7e;
  #L4b1e64.  v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.i` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4b1e68.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b1e6c.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4b1e72.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.c` @type ^`int`;
  #L4b1e76.  v0:= (`long`) v0 @kind i2l;
  #L4b1e78.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4b1e7e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b1e90.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4b1e94.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4b1e9a.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L4b1ea0.  return @kind void;
}
