record `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.functions.Supplier` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.c` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.d` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.e` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.g` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.h` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.i` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.rxjava3.functions.Supplier` v3 @kind object, `long` v4 , `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v9 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Supplier;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L489a90.  v0:= new `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue`;
  #L489a94.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L489a9a.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L489aa0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.c` @type ^`io.reactivex.rxjava3.functions.Supplier` := v3 @kind object;
  #L489aa4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.d` @type ^`long` := v4 @kind wide;
  #L489aa8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.e` @type ^`long` := v6 @kind wide;
  #L489aac.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.f` @type ^`java.util.concurrent.TimeUnit` := v8 @kind object;
  #L489ab0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v9 @kind object;
  #L489ab4.  v2:= new `java.util.LinkedList`;
  #L489ab8.  call `<init>`(v2) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L489abe.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.h` @type ^`java.util.List` := v2 @kind object;
  #L489ac2.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c` v0 @kind object, `java.lang.Object` v1 @kind object, `boolean` v2 , `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.b:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;Ljava/lang/Object;ZLio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L489ad4.  call `fastPathOrderedEmitMax`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.fastPathOrderedEmitMax:(Ljava/lang/Object;ZLio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L489ada.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L489a74.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L489a7a.  v1:= 1I;
  #L489a7c.  return v1;
}
procedure `boolean` `accept`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L489a54.  v2:= (`java.util.Collection`) v2 @kind object;
  #L489a58.  call temp:= `a`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @kind virtual;
  #L489a5e.  v1:= temp;
  #L489a60.  return v1;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.c:()V` @AccessFlag  {
    temp;
    v0;

  #L489b20.  @monitorenter v1
  #L489b22.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.h` @type ^`java.util.List` @kind object;
  #L489b26.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L489b2c.  @monitorexit v1
  #L489b2e.  return @kind void;
  #L489b30.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L489b32.  @monitorexit v1
  #L489b34.  throw v0;
  catch `java.lang.Throwable` @[L489b22..L489b34] goto L489b30;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L489aec.  v0:= 1I;
  #L489aee.  v1.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L489af2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L489af6.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L489afc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L489b00.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L489b06.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.c:()V` @kind virtual;
  #L489b0c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L489b54.  @monitorenter v4
  #L489b56.  v0:= new `java.util.ArrayList`;
  #L489b5a.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.h` @type ^`java.util.List` @kind object;
  #L489b5e.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L489b64.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.h` @type ^`java.util.List` @kind object;
  #L489b68.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L489b6e.  @monitorexit v4
  #L489b70.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L489b76.  v0:= temp @kind object;
  #L489b78.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L489b7e.  v1:= temp;
  #L489b80.  if v1 == 0 then goto L489b9c;
  #L489b84.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L489b8a.  v1:= temp @kind object;
  #L489b8c.  v1:= (`java.util.Collection`) v1 @kind object;
  #L489b90.  v2:= v4.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L489b94.  call temp:= `offer`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L489b9a.  goto L489b78;
  #L489b9c.  v0:= 1I;
  #L489b9e.  v4.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L489ba2.  call temp:= `enter`(v4) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L489ba8.  v0:= temp;
  #L489baa.  if v0 == 0 then goto L489bc2;
  #L489bae.  v0:= v4.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L489bb2.  v1:= v4.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L489bb6.  v2:= 0I;
  #L489bb8.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L489bbc.  call `drainMaxLoop`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/internal/util/QueueDrain;)V` @kind static;
  #L489bc2.  return @kind void;
  #L489bc4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L489bc6.  @monitorexit v4
  #L489bc8.  throw v0;
  catch `java.lang.Throwable` @[L489b56..L489b70] goto L489bc4;
  catch `java.lang.Throwable` @[L489bc6..L489bc8] goto L489bc4;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L489bf0.  v0:= 1I;
  #L489bf2.  v1.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L489bf6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L489bfa.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L489c00.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.c:()V` @kind virtual;
  #L489c06.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L489c0a.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L489c10.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L489c24.  @monitorenter v2
  #L489c26.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.h` @type ^`java.util.List` @kind object;
  #L489c2a.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L489c30.  v0:= temp @kind object;
  #L489c32.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L489c38.  v1:= temp;
  #L489c3a.  if v1 == 0 then goto L489c52;
  #L489c3e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L489c44.  v1:= temp @kind object;
  #L489c46.  v1:= (`java.util.Collection`) v1 @kind object;
  #L489c4a.  call temp:= `add`(v1, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L489c50.  goto L489c32;
  #L489c52.  @monitorexit v2
  #L489c54.  return @kind void;
  #L489c56.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L489c58.  @monitorexit v2
  #L489c5a.  throw v3;
  catch `java.lang.Throwable` @[L489c26..L489c5a] goto L489c56;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c` v10 @kind this, `org.reactivestreams.Subscription` v11 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L489c78.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L489c7c.  call temp:= `validate`(v0, v11) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L489c82.  v0:= temp;
  #L489c84.  if v0 != 0 then goto L489c8a;
  #L489c88.  return @kind void;
  #L489c8a.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.i` @type ^`org.reactivestreams.Subscription` := v11 @kind object;
  #L489c8e.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.c` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L489c92.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L489c98.  v0:= temp @kind object;
  #L489c9a.  v1:= "The supplied buffer is null" @kind object;
  #L489c9e.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L489ca4.  v0:= (`java.util.Collection`) v0 @kind object;
  #L489ca8.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.h` @type ^`java.util.List` @kind object;
  #L489cac.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L489cb2.  v1:= v10.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L489cb6.  call `onSubscribe`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L489cbc.  v1:= 9223372036854775807L;
  #L489cc6.  call `request`(v11, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L489ccc.  v3:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L489cd0.  v7:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.e` @type ^`long` @kind wide;
  #L489cd4.  v9:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L489cd8.  v4:= v10 @kind object;
  #L489cda.  v5:= v7 @kind wide;
  #L489cdc.  call temp:= `schedulePeriodically`(v3, v4, v5, v7, v9) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L489ce2.  v11:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L489ce6.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c$a`;
  #L489cea.  call `<init>`(v1, v10, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;Ljava/util/Collection;)V` @kind direct;
  #L489cf0.  v2:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.d` @type ^`long` @kind wide;
  #L489cf4.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L489cf8.  call temp:= `schedule`(v11, v1, v2, v0) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L489cfe.  return @kind void;
  #L489d00.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L489d02.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L489d08.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L489d0c.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L489d12.  call `cancel`(v11) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L489d18.  v11:= v10.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L489d1c.  call `error`(v0, v11) @signature `Lio/reactivex/rxjava3/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L489d22.  return @kind void;
  catch `java.lang.Throwable` @[L489c8e..L489ca8] goto L489d00;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L489d40.  call `requested`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @kind virtual;
  #L489d46.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L489d58.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L489d5c.  if v0 == 0 then goto L489d62;
  #L489d60.  return @kind void;
  #L489d62.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.c` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L489d66.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L489d6c.  v0:= temp @kind object;
  #L489d6e.  v1:= "The supplied buffer is null" @kind object;
  #L489d72.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L489d78.  v0:= (`java.util.Collection`) v0 @kind object;
  #L489d7c.  @monitorenter v5
  #L489d7e.  v1:= v5.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L489d82.  if v1 == 0 then goto L489d8a;
  #L489d86.  @monitorexit v5
  #L489d88.  return @kind void;
  #L489d8a.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.h` @type ^`java.util.List` @kind object;
  #L489d8e.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L489d94.  @monitorexit v5
  #L489d96.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L489d9a.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c$a`;
  #L489d9e.  call `<init>`(v2, v5, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;Ljava/util/Collection;)V` @kind direct;
  #L489da4.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.d` @type ^`long` @kind wide;
  #L489da8.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L489dac.  call temp:= `schedule`(v1, v2, v3, v0) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L489db2.  return @kind void;
  #L489db4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L489db6.  @monitorexit v5
  #L489db8.  throw v0;
  #L489dba.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L489dbc.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L489dc2.  call `cancel`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.cancel:()V` @kind virtual;
  #L489dc8.  v1:= v5.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L489dcc.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L489dd2.  return @kind void;
  catch `java.lang.Throwable` @[L489d62..L489d7c] goto L489dba;
  catch `java.lang.Throwable` @[L489d7e..L489d96] goto L489db4;
  catch `java.lang.Throwable` @[L489db6..L489db8] goto L489db4;
}
