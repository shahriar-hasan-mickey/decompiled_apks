record `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$c` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.f` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.i` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.j` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.k` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.l` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.m` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.n` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.o` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.p` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.core.ObservableSource` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cd228.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4cd22e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4cd232.  v1:= new `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue`;
  #L4cd236.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4cd23c.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L4cd240.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.b` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v2 @kind object;
  #L4cd244.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.c` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4cd248.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.d` @type ^`int` := v4;
  #L4cd24c.  v1:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L4cd250.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4cd256.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v1 @kind object;
  #L4cd25a.  v1:= new `java.util.ArrayList`;
  #L4cd25e.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4cd264.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.g` @type ^`java.util.List` := v1 @kind object;
  #L4cd268.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4cd26c.  v2:= 1L;
  #L4cd270.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:(J)V` @kind direct;
  #L4cd276.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4cd27a.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4cd27e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4cd284.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4cd288.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4cd28c.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4cd292.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.o` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4cd296.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$c`;
  #L4cd29a.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;)V` @kind direct;
  #L4cd2a0.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$c` := v1 @kind object;
  #L4cd2a4.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4cd2a8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4cd2ae.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.k` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4cd2b2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.a:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$a;)V` @AccessFlag  {
    temp;
    v0;

  #L4cd2c4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4cd2c8.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4cd2ce.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4cd2d4.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4cd2e8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.p` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4cd2ec.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4cd2f2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$c` @kind object;
  #L4cd2f6.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4cd2fc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4cd300.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4cd306.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.o` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4cd30a.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4cd310.  v2:= temp;
  #L4cd312.  if v2 == 0 then goto L4cd322;
  #L4cd316.  v2:= 1I;
  #L4cd318.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.m` @type ^`boolean` := v2 @kind boolean;
  #L4cd31c.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4cd322.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v9 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4cd3b0.  call temp:= `getAndIncrement`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4cd3b6.  v0:= temp;
  #L4cd3b8.  if v0 == 0 then goto L4cd3be;
  #L4cd3bc.  return @kind void;
  #L4cd3be.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4cd3c2.  v1:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4cd3c6.  v2:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.g` @type ^`java.util.List` @kind object;
  #L4cd3ca.  v3:= 1I;
  #L4cd3cc.  v4:= 1I;
  #L4cd3ce.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.l` @type ^`boolean` @kind boolean;
  #L4cd3d2.  if v5 == 0 then goto L4cd3e6;
  #L4cd3d6.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4cd3dc.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4cd3e2.  goto L4cd586;
  #L4cd3e6.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.m` @type ^`boolean` @kind boolean;
  #L4cd3ea.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4cd3f0.  v6:= temp @kind object;
  #L4cd3f2.  if v6 != 0 then goto L4cd3fa;
  #L4cd3f6.  v7:= 1I;
  #L4cd3f8.  goto L4cd3fc;
  #L4cd3fa.  v7:= 0I;
  #L4cd3fc.  if v5 == 0 then goto L4cd420;
  #L4cd400.  if v7 != 0 then goto L4cd414;
  #L4cd404.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.o` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4cd408.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cd40e.  v5:= temp @kind object;
  #L4cd410.  if v5 == 0 then goto L4cd420;
  #L4cd414.  call `g`(v9, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.g:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4cd41a.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.l` @type ^`boolean` := v3 @kind boolean;
  #L4cd41e.  goto L4cd3ce;
  #L4cd420.  if v7 != 0 then goto L4cd546;
  #L4cd424.  v5:= instanceof @variable v6 @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$b` @kind boolean;
  #L4cd428.  if v5 == 0 then goto L4cd4ee;
  #L4cd42c.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4cd430.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4cd436.  v5:= temp;
  #L4cd438.  if v5 != 0 then goto L4cd3ce;
  #L4cd43c.  v6:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$b`) v6 @kind object;
  #L4cd440.  v5:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$b.a` @type ^`java.lang.Object` @kind object;
  #L4cd444.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.c` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4cd448.  call temp:= `apply`(v6, v5) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4cd44e.  v5:= temp @kind object;
  #L4cd450.  v6:= "The closingIndicator returned a null ObservableSource" @kind object;
  #L4cd454.  call temp:= `requireNonNull`(v5, v6) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4cd45a.  v5:= (`io.reactivex.rxjava3.core.ObservableSource`) v5 @kind object;
  #L4cd45e.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4cd462.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndIncrement:()J` @kind virtual;
  #L4cd468.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.d` @type ^`int`;
  #L4cd46c.  call temp:= `create`(v6, v9) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @kind static;
  #L4cd472.  v6:= temp @kind object;
  #L4cd474.  v7:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a`;
  #L4cd478.  call `<init>`(v7, v9, v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;Lio/reactivex/rxjava3/subjects/UnicastSubject;)V` @kind direct;
  #L4cd47e.  call `onNext`(v0, v7) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cd484.  call temp:= `d`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$a;.d:()Z` @kind virtual;
  #L4cd48a.  v8:= temp;
  #L4cd48c.  if v8 == 0 then goto L4cd498;
  #L4cd490.  call `onComplete`(v6) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4cd496.  goto L4cd3ce;
  #L4cd498.  call temp:= `add`(v2, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4cd49e.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4cd4a2.  call temp:= `add`(v6, v7) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4cd4a8.  call `subscribe`(v5, v7) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4cd4ae.  goto L4cd3ce;
  #L4cd4b0.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cd4b2.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4cd4b8.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.p` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4cd4bc.  call `dispose`(v6) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4cd4c2.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$c` @kind object;
  #L4cd4c6.  call `a`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4cd4cc.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4cd4d0.  call `dispose`(v6) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4cd4d6.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4cd4dc.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.o` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4cd4e0.  call temp:= `tryAddThrowableOrReport`(v6, v5) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4cd4e6.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.m` @type ^`boolean` := v3 @kind boolean;
  #L4cd4ea.  goto L4cd3ce;
  #L4cd4ee.  v5:= instanceof @variable v6 @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a` @kind boolean;
  #L4cd4f2.  if v5 == 0 then goto L4cd51e;
  #L4cd4f6.  v5:= v6 @kind object;
  #L4cd4f8.  v5:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a`) v5 @kind object;
  #L4cd4fc.  v5:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a.b` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` @kind object;
  #L4cd500.  call temp:= `remove`(v2, v5) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L4cd506.  v7:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4cd50a.  v6:= (`io.reactivex.rxjava3.disposables.Disposable`) v6 @kind object;
  #L4cd50e.  call temp:= `delete`(v7, v6) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4cd514.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4cd51a.  goto L4cd3ce;
  #L4cd51e.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4cd524.  v5:= temp @kind object;
  #L4cd526.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4cd52c.  v7:= temp;
  #L4cd52e.  if v7 == 0 then goto L4cd3ce;
  #L4cd532.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4cd538.  v7:= temp @kind object;
  #L4cd53a.  v7:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v7 @kind object;
  #L4cd53e.  call `onNext`(v7, v6) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4cd544.  goto L4cd526;
  #L4cd546.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.n` @type ^`boolean` @kind boolean;
  #L4cd54a.  if v5 == 0 then goto L4cd586;
  #L4cd54e.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4cd554.  v5:= temp;
  #L4cd556.  if v5 != 0 then goto L4cd586;
  #L4cd55a.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.p` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4cd55e.  call `dispose`(v5) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4cd564.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$c` @kind object;
  #L4cd568.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4cd56e.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4cd572.  call `dispose`(v5) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4cd578.  call `g`(v9, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.g:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4cd57e.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.l` @type ^`boolean` := v3 @kind boolean;
  #L4cd582.  goto L4cd3ce;
  #L4cd586.  v4:= -v4 @kind int;
  #L4cd588.  call temp:= `addAndGet`(v9, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4cd58e.  v4:= temp;
  #L4cd590.  if v4 != 0 then goto L4cd3ce;
  #L4cd594.  return @kind void;
  catch `java.lang.Throwable` @[L4cd444..L4cd45e] goto L4cd4b0;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.d:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4cd690.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4cd694.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$b`;
  #L4cd698.  call `<init>`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$b;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4cd69e.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4cd6a4.  call `c`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4cd6aa.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4cd334.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4cd338.  v1:= 0I;
  #L4cd33a.  v2:= 1I;
  #L4cd33c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4cd342.  v0:= temp;
  #L4cd344.  if v0 == 0 then goto L4cd39e;
  #L4cd348.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4cd34c.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L4cd352.  v0:= temp @kind wide;
  #L4cd354.  v3:= 0L;
  #L4cd358.  v5:= lcmp(v0, v3);
  #L4cd35c.  if v5 != 0 then goto L4cd394;
  #L4cd360.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.p` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4cd364.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4cd36a.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$c` @kind object;
  #L4cd36e.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4cd374.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4cd378.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4cd37e.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.o` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4cd382.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4cd388.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.l` @type ^`boolean` := v2 @kind boolean;
  #L4cd38c.  call `c`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4cd392.  goto L4cd39e;
  #L4cd394.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$c` @kind object;
  #L4cd398.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4cd39e.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.e:()V` @AccessFlag  {
    temp;
    v0;

  #L4cd6bc.  v0:= 1I;
  #L4cd6be.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.n` @type ^`boolean` := v0 @kind boolean;
  #L4cd6c2.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4cd6c8.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.f:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4cd6dc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.p` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4cd6e0.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4cd6e6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4cd6ea.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4cd6f0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.o` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4cd6f4.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4cd6fa.  v2:= temp;
  #L4cd6fc.  if v2 == 0 then goto L4cd70c;
  #L4cd700.  v2:= 1I;
  #L4cd702.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.m` @type ^`boolean` := v2 @kind boolean;
  #L4cd706.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4cd70c.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v3 @kind this, `io.reactivex.rxjava3.core.Observer` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.g:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4cd780.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.o` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4cd784.  call temp:= `terminate`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4cd78a.  v0:= temp @kind object;
  #L4cd78c.  if v0 != 0 then goto L4cd7c4;
  #L4cd790.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.g` @type ^`java.util.List` @kind object;
  #L4cd794.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4cd79a.  v0:= temp @kind object;
  #L4cd79c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4cd7a2.  v1:= temp;
  #L4cd7a4.  if v1 == 0 then goto L4cd7bc;
  #L4cd7a8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4cd7ae.  v1:= temp @kind object;
  #L4cd7b0.  v1:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v1 @kind object;
  #L4cd7b4.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4cd7ba.  goto L4cd79c;
  #L4cd7bc.  call `onComplete`(v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4cd7c2.  goto L4cd7fe;
  #L4cd7c4.  v1:= `@@io.reactivex.rxjava3.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L4cd7c8.  if v0 == v1 then goto L4cd7fe;
  #L4cd7cc.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.g` @type ^`java.util.List` @kind object;
  #L4cd7d0.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4cd7d6.  v1:= temp @kind object;
  #L4cd7d8.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4cd7de.  v2:= temp;
  #L4cd7e0.  if v2 == 0 then goto L4cd7f8;
  #L4cd7e4.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4cd7ea.  v2:= temp @kind object;
  #L4cd7ec.  v2:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v2 @kind object;
  #L4cd7f0.  call `onError`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4cd7f6.  goto L4cd7d8;
  #L4cd7f8.  call `onError`(v4, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cd7fe.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cd208.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4cd20c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4cd212.  v0:= temp;
  #L4cd214.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cd5b4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$c` @kind object;
  #L4cd5b8.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4cd5be.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4cd5c2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4cd5c8.  v0:= 1I;
  #L4cd5ca.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.m` @type ^`boolean` := v0 @kind boolean;
  #L4cd5ce.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4cd5d4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cd5e8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$c` @kind object;
  #L4cd5ec.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4cd5f2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4cd5f6.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4cd5fc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.o` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4cd600.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4cd606.  v2:= temp;
  #L4cd608.  if v2 == 0 then goto L4cd618;
  #L4cd60c.  v2:= 1I;
  #L4cd60e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.m` @type ^`boolean` := v2 @kind boolean;
  #L4cd612.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4cd618.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cd62c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4cd630.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4cd636.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4cd63c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cd650.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.p` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4cd654.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4cd65a.  v0:= temp;
  #L4cd65c.  if v0 == 0 then goto L4cd67c;
  #L4cd660.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.p` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4cd664.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4cd668.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4cd66e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.b` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4cd672.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$c` @kind object;
  #L4cd676.  call `subscribe`(v2, v0) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4cd67c.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4cd720.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4cd724.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L4cd72a.  v0:= temp @kind wide;
  #L4cd72c.  v2:= 0L;
  #L4cd730.  v4:= lcmp(v0, v2);
  #L4cd734.  if v4 != 0 then goto L4cd76c;
  #L4cd738.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.p` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4cd73c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4cd742.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$c` @kind object;
  #L4cd746.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4cd74c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4cd750.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4cd756.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.o` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4cd75a.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4cd760.  v0:= 1I;
  #L4cd762.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.l` @type ^`boolean` := v0 @kind boolean;
  #L4cd766.  call `c`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4cd76c.  return @kind void;
}
