record `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$d` `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$a` v0 @kind this, `long` v1 , `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$d` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeout$a;.<init>:(JLio/reactivex/rxjava3/internal/operators/observable/ObservableTimeout$d;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cafd0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4cafd6.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$a.b` @type ^`long` := v1 @kind wide;
  #L4cafda.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$d` := v3 @kind object;
  #L4cafde.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeout$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4caff0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4caff6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeout$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cafa8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cafae.  v0:= temp @kind object;
  #L4cafb0.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4cafb4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4cafba.  v0:= temp;
  #L4cafbc.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeout$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4cb008.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cb00e.  v0:= temp @kind object;
  #L4cb010.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4cb014.  if v0 == v1 then goto L4cb02c;
  #L4cb018.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4cb01e.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$d` @kind object;
  #L4cb022.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$a.b` @type ^`long` @kind wide;
  #L4cb026.  call `b`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeoutTimed$d;.b:(J)V` @kind interface;
  #L4cb02c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeout$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4cb040.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cb046.  v0:= temp @kind object;
  #L4cb048.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4cb04c.  if v0 == v1 then goto L4cb066;
  #L4cb050.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4cb056.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$d` @kind object;
  #L4cb05a.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$a.b` @type ^`long` @kind wide;
  #L4cb05e.  call `a`(v0, v1, v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeout$d;.a:(JLjava/lang/Throwable;)V` @kind interface;
  #L4cb064.  goto L4cb06c;
  #L4cb066.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4cb06c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeout$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4cb080.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cb086.  v3:= temp @kind object;
  #L4cb088.  v3:= (`io.reactivex.rxjava3.disposables.Disposable`) v3 @kind object;
  #L4cb08c.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4cb090.  if v3 == v0 then goto L4cb0ae;
  #L4cb094.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4cb09a.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4cb0a0.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$d` @kind object;
  #L4cb0a4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$a.b` @type ^`long` @kind wide;
  #L4cb0a8.  call `b`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeoutTimed$d;.b:(J)V` @kind interface;
  #L4cb0ae.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeout$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4cb0c0.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4cb0c6.  return @kind void;
}
