record `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.CompletableObserver` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.f` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.g` @AccessFlag ;
}
global `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a$a` `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.h` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4b43e4.  v0:= new `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a$a`;
  #L4b43e8.  v1:= 0I;
  #L4b43ea.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;)V` @kind direct;
  #L4b43f0.  `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.h` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a$a` := v0 @kind object;
  #L4b43f4.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a` v0 @kind this, `io.reactivex.rxjava3.core.CompletableObserver` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.<init>:(Lio/reactivex/rxjava3/core/CompletableObserver;Lio/reactivex/rxjava3/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b4408.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b440e.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` := v1 @kind object;
  #L4b4412.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4b4416.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.c` @type ^`boolean` := v3 @kind boolean;
  #L4b441a.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4b441e.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4b4424.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4b4428.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4b442c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b4432.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4b4436.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4b4474.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b4478.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.h` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a$a` @kind object;
  #L4b447c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4b4482.  v0:= temp @kind object;
  #L4b4484.  v0:= (`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a$a`) v0 @kind object;
  #L4b4488.  if v0 == 0 then goto L4b4496;
  #L4b448c.  if v0 == v1 then goto L4b4496;
  #L4b4490.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a$a;.a:()V` @kind virtual;
  #L4b4496.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a$a` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.b:(Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4b44a8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b44ac.  v1:= 0I;
  #L4b44ae.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b44b4.  v3:= temp;
  #L4b44b6.  if v3 == 0 then goto L4b44d0;
  #L4b44ba.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.f` @type ^`boolean` @kind boolean;
  #L4b44be.  if v3 == 0 then goto L4b44d0;
  #L4b44c2.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b44c6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4b44ca.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4b44d0.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.c:(Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4b44e4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b44e8.  v1:= 0I;
  #L4b44ea.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b44f0.  v3:= temp;
  #L4b44f2.  if v3 == 0 then goto L4b4546;
  #L4b44f6.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b44fa.  call temp:= `tryAddThrowableOrReport`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b4500.  v3:= temp;
  #L4b4502.  if v3 == 0 then goto L4b454c;
  #L4b4506.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.c` @type ^`boolean` @kind boolean;
  #L4b450a.  if v3 == 0 then goto L4b4526;
  #L4b450e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.f` @type ^`boolean` @kind boolean;
  #L4b4512.  if v3 == 0 then goto L4b454c;
  #L4b4516.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b451a.  v4:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4b451e.  call `tryTerminateConsumer`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4b4524.  goto L4b454c;
  #L4b4526.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b452a.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b4530.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.a:()V` @kind virtual;
  #L4b4536.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b453a.  v4:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4b453e.  call `tryTerminateConsumer`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4b4544.  goto L4b454c;
  #L4b4546.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b454c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b4448.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b444c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b4452.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.a:()V` @kind virtual;
  #L4b4458.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b445c.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4b4462.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b43b8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b43bc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b43c2.  v0:= temp @kind object;
  #L4b43c4.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.h` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a$a` @kind object;
  #L4b43c8.  if v0 != v1 then goto L4b43d0;
  #L4b43cc.  v0:= 1I;
  #L4b43ce.  goto L4b43d2;
  #L4b43d0.  v0:= 0I;
  #L4b43d2.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b4560.  v0:= 1I;
  #L4b4562.  v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.f` @type ^`boolean` := v0 @kind boolean;
  #L4b4566.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b456a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b4570.  v0:= temp @kind object;
  #L4b4572.  if v0 != 0 then goto L4b4584;
  #L4b4576.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b457a.  v1:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4b457e.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4b4584.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b4598.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b459c.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b45a2.  v2:= temp;
  #L4b45a4.  if v2 == 0 then goto L4b45cc;
  #L4b45a8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.c` @type ^`boolean` @kind boolean;
  #L4b45ac.  if v2 == 0 then goto L4b45b8;
  #L4b45b0.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.onComplete:()V` @kind virtual;
  #L4b45b6.  goto L4b45cc;
  #L4b45b8.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.a:()V` @kind virtual;
  #L4b45be.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b45c2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4b45c6.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4b45cc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b45e0.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4b45e4.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b45ea.  v4:= temp @kind object;
  #L4b45ec.  v0:= "The mapper returned a null CompletableSource" @kind object;
  #L4b45f0.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b45f6.  v4:= (`io.reactivex.rxjava3.core.CompletableSource`) v4 @kind object;
  #L4b45fa.  v0:= new `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a$a`;
  #L4b45fe.  call `<init>`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;)V` @kind direct;
  #L4b4604.  v1:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b4608.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b460e.  v1:= temp @kind object;
  #L4b4610.  v1:= (`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a$a`) v1 @kind object;
  #L4b4614.  v2:= `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.h` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a$a` @kind object;
  #L4b4618.  if v1 != v2 then goto L4b461e;
  #L4b461c.  goto L4b463e;
  #L4b461e.  v2:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b4622.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b4628.  v2:= temp;
  #L4b462a.  if v2 == 0 then goto L4b4604;
  #L4b462e.  if v1 == 0 then goto L4b4638;
  #L4b4632.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a$a;.a:()V` @kind virtual;
  #L4b4638.  call `subscribe`(v4, v0) @signature `Lio/reactivex/rxjava3/core/CompletableSource;.subscribe:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind interface;
  #L4b463e.  return @kind void;
  #L4b4640.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b4642.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b4648.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b464c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b4652.  call `onError`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b4658.  return @kind void;
  catch `java.lang.Throwable` @[L4b45e0..L4b45fa] goto L4b4640;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b4678.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b467c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b4682.  v0:= temp;
  #L4b4684.  if v0 == 0 then goto L4b4696;
  #L4b4688.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4b468c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4b4690.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4b4696.  return @kind void;
}
