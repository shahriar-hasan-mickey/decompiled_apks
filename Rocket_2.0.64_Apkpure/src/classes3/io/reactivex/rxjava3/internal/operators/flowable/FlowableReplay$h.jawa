record `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$h` @kind class @AccessFlag FINAL extends `org.reactivestreams.Publisher` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$h.a` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.rxjava3.functions.Supplier` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$h.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$h` v0 @kind this, `java.util.concurrent.atomic.AtomicReference` v1 @kind object, `io.reactivex.rxjava3.functions.Supplier` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$h;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/functions/Supplier;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49e358.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49e35e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$h.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L49e362.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$h.b` @type ^`io.reactivex.rxjava3.functions.Supplier` := v2 @kind object;
  #L49e366.  return @kind void;
}
procedure `void` `subscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$h` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$h;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49e378.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$h.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49e37c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49e382.  v0:= temp @kind object;
  #L49e384.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i`) v0 @kind object;
  #L49e388.  if v0 != 0 then goto L49e3d2;
  #L49e38c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$h.b` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L49e390.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L49e396.  v0:= temp @kind object;
  #L49e398.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$f`) v0 @kind object;
  #L49e39c.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i`;
  #L49e3a0.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$h.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49e3a4.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$f;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L49e3aa.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$h.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49e3ae.  v2:= 0I;
  #L49e3b0.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L49e3b6.  v0:= temp;
  #L49e3b8.  if v0 != 0 then goto L49e3be;
  #L49e3bc.  goto L49e378;
  #L49e3be.  v0:= v1 @kind object;
  #L49e3c0.  goto L49e3d2;
  #L49e3c2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49e3c4.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49e3ca.  call `error`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L49e3d0.  return @kind void;
  #L49e3d2.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`;
  #L49e3d6.  call `<init>`(v1, v0, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L49e3dc.  call `onSubscribe`(v4, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L49e3e2.  call temp:= `a`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.a:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;)Z` @kind virtual;
  #L49e3e8.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.isDisposed:()Z` @kind virtual;
  #L49e3ee.  v4:= temp;
  #L49e3f0.  if v4 == 0 then goto L49e3fc;
  #L49e3f4.  call `c`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.c:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;)V` @kind virtual;
  #L49e3fa.  return @kind void;
  #L49e3fc.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.b:()V` @kind virtual;
  #L49e402.  v4:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$f` @kind object;
  #L49e406.  call `c`(v4, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$f;.c:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;)V` @kind interface;
  #L49e40c.  return @kind void;
  catch `java.lang.Throwable` @[L49e38c..L49e39c] goto L49e3c2;
}
