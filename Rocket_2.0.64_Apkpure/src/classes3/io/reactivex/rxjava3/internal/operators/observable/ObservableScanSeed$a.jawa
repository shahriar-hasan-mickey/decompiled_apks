record `io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.c` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScanSeed$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/BiFunction;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c7ce4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c7cea.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4c7cee.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v2 @kind object;
  #L4c7cf2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.c` @type ^`java.lang.Object` := v3 @kind object;
  #L4c7cf6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScanSeed$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c7d08.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c7d0c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c7d12.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScanSeed$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c7cc4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c7cc8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4c7cce.  v0:= temp;
  #L4c7cd0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScanSeed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c7d24.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.e` @type ^`boolean` @kind boolean;
  #L4c7d28.  if v0 == 0 then goto L4c7d2e;
  #L4c7d2c.  return @kind void;
  #L4c7d2e.  v0:= 1I;
  #L4c7d30.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4c7d34.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c7d38.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4c7d3e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScanSeed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c7d50.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.e` @type ^`boolean` @kind boolean;
  #L4c7d54.  if v0 == 0 then goto L4c7d60;
  #L4c7d58.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c7d5e.  return @kind void;
  #L4c7d60.  v0:= 1I;
  #L4c7d62.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4c7d66.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c7d6a.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c7d70.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScanSeed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c7d84.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.e` @type ^`boolean` @kind boolean;
  #L4c7d88.  if v0 == 0 then goto L4c7d8e;
  #L4c7d8c.  return @kind void;
  #L4c7d8e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.c` @type ^`java.lang.Object` @kind object;
  #L4c7d92.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4c7d96.  call temp:= `apply`(v1, v0, v3) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c7d9c.  v3:= temp @kind object;
  #L4c7d9e.  v0:= "The accumulator returned a null value" @kind object;
  #L4c7da2.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c7da8.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.c` @type ^`java.lang.Object` := v3 @kind object;
  #L4c7dac.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c7db0.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c7db6.  return @kind void;
  #L4c7db8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c7dba.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c7dc0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c7dc4.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c7dca.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScanSeed$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c7dd0.  return @kind void;
  catch `java.lang.Throwable` @[L4c7d92..L4c7da8] goto L4c7db8;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScanSeed$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c7df0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c7df4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4c7dfa.  v0:= temp;
  #L4c7dfc.  if v0 == 0 then goto L4c7e1c;
  #L4c7e00.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4c7e04.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c7e08.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4c7e0e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c7e12.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.c` @type ^`java.lang.Object` @kind object;
  #L4c7e16.  call `onNext`(v2, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c7e1c.  return @kind void;
}
