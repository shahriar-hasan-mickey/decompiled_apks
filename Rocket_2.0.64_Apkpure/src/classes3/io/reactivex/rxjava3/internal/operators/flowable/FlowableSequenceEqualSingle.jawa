record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Single` @kind class, `io.reactivex.rxjava3.internal.fuseable.FuseToFlowable` @kind interface {
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle.a` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiPredicate` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.rxjava3.functions.BiPredicate` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle;.<init>:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/rxjava3/functions/BiPredicate;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a0c98.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Single;.<init>:()V` @kind direct;
  #L4a0c9e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle.a` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L4a0ca2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle.b` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L4a0ca6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle.c` @type ^`io.reactivex.rxjava3.functions.BiPredicate` := v3 @kind object;
  #L4a0caa.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle.d` @type ^`int` := v4;
  #L4a0cae.  return @kind void;
}
procedure `io.reactivex.rxjava3.core.Flowable` `fuseToFlowable`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle;.fuseToFlowable:()Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a0c64.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual`;
  #L4a0c68.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle.a` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4a0c6c.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4a0c70.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle.c` @type ^`io.reactivex.rxjava3.functions.BiPredicate` @kind object;
  #L4a0c74.  v4:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle.d` @type ^`int`;
  #L4a0c78.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual;.<init>:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/rxjava3/functions/BiPredicate;I)V` @kind direct;
  #L4a0c7e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Flowable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L4a0c84.  v0:= temp @kind object;
  #L4a0c86.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle` v3 @kind this, `io.reactivex.rxjava3.core.SingleObserver` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle;.subscribeActual:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a0cc0.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a`;
  #L4a0cc4.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle.d` @type ^`int`;
  #L4a0cc8.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle.c` @type ^`io.reactivex.rxjava3.functions.BiPredicate` @kind object;
  #L4a0ccc.  call `<init>`(v0, v4, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;ILio/reactivex/rxjava3/functions/BiPredicate;)V` @kind direct;
  #L4a0cd2.  call `onSubscribe`(v4, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4a0cd8.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle.a` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4a0cdc.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4a0ce0.  call `c`(v0, v4, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.c:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)V` @kind virtual;
  #L4a0ce6.  return @kind void;
}
