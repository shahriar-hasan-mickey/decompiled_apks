record `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$c.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d00c8.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$a;.<init>:(Lio/reactivex/rxjava3/functions/Predicate;)V` @kind direct;
  #L4d00ce.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$c.d` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4d00d2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d00e4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` @kind boolean;
  #L4d00e8.  if v0 != 0 then goto L4d00fc;
  #L4d00ec.  v0:= 1I;
  #L4d00ee.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4d00f2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d00f6.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d00fc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d0110.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` @kind boolean;
  #L4d0114.  if v0 == 0 then goto L4d0120;
  #L4d0118.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d011e.  return @kind void;
  #L4d0120.  v0:= 1I;
  #L4d0122.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4d0126.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d012a.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d0130.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$c` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d0144.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d0148.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d014e.  v0:= temp;
  #L4d0150.  if v0 == 0 then goto L4d0162;
  #L4d0154.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.b` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4d0158.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d015c.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d0162.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$c;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d006c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` @kind boolean;
  #L4d0070.  v1:= 0I;
  #L4d0072.  if v0 != 0 then goto L4d00a8;
  #L4d0076.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.a` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L4d007a.  call temp:= `test`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4d0080.  v0:= temp;
  #L4d0082.  if v0 == 0 then goto L4d00a8;
  #L4d0086.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d008a.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d0090.  v3:= 1I;
  #L4d0092.  return v3;
  #L4d0094.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d0096.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d009c.  call `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$a;.cancel:()V` @kind virtual;
  #L4d00a2.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d00a8.  return v1;
  catch `java.lang.Throwable` @[L4d0076..L4d0082] goto L4d0094;
}
