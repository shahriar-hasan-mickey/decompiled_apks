record `io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBlockingSubscribe;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4b6858.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b685e.  v0:= new `java.lang.IllegalStateException`;
  #L4b6862.  v1:= "No instances!" @kind object;
  #L4b6866.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b686c.  throw v0;
}
procedure `void` `subscribe`(`io.reactivex.rxjava3.core.ObservableSource` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBlockingSubscribe;.subscribe:(Lio/reactivex/rxjava3/core/ObservableSource;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b6880.  v0:= new `io.reactivex.rxjava3.internal.util.BlockingIgnoringReceiver`;
  #L4b6884.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/util/BlockingIgnoringReceiver;.<init>:()V` @kind direct;
  #L4b688a.  v1:= new `io.reactivex.rxjava3.internal.observers.LambdaObserver`;
  #L4b688e.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4b6894.  v2:= temp @kind object;
  #L4b6896.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4b689c.  v3:= temp @kind object;
  #L4b689e.  call `<init>`(v1, v2, v0, v0, v3) @signature `Lio/reactivex/rxjava3/internal/observers/LambdaObserver;.<init>:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Consumer;)V` @kind direct;
  #L4b68a4.  call `subscribe`(v4, v1) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4b68aa.  call `awaitForComplete`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.awaitForComplete:(Ljava/util/concurrent/CountDownLatch;Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind static;
  #L4b68b0.  v4:= v0.`io.reactivex.rxjava3.internal.util.BlockingIgnoringReceiver.error` @type ^`java.lang.Throwable` @kind object;
  #L4b68b4.  if v4 != 0 then goto L4b68ba;
  #L4b68b8.  return @kind void;
  #L4b68ba.  call temp:= `wrapOrThrow`(v4) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4b68c0.  v4:= temp @kind object;
  #L4b68c2.  throw v4;
}
procedure `void` `subscribe`(`io.reactivex.rxjava3.core.ObservableSource` v3 @kind object, `io.reactivex.rxjava3.core.Observer` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBlockingSubscribe;.subscribe:(Lio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4b68d4.  v0:= new `java.util.concurrent.LinkedBlockingQueue`;
  #L4b68d8.  call `<init>`(v0) @signature `Ljava/util/concurrent/LinkedBlockingQueue;.<init>:()V` @kind direct;
  #L4b68de.  v1:= new `io.reactivex.rxjava3.internal.observers.BlockingObserver`;
  #L4b68e2.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingObserver;.<init>:(Ljava/util/Queue;)V` @kind direct;
  #L4b68e8.  call `onSubscribe`(v4, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4b68ee.  call `subscribe`(v3, v1) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4b68f4.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingObserver;.isDisposed:()Z` @kind virtual;
  #L4b68fa.  v3:= temp;
  #L4b68fc.  if v3 == 0 then goto L4b6902;
  #L4b6900.  goto L4b6948;
  #L4b6902.  call temp:= `poll`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4b6908.  v3:= temp @kind object;
  #L4b690a.  if v3 != 0 then goto L4b6928;
  #L4b690e.  call temp:= `take`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.take:()Ljava/lang/Object;` @kind interface;
  #L4b6914.  v3:= temp @kind object;
  #L4b6916.  goto L4b6928;
  #L4b6918.  v3:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L4b691a.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingObserver;.dispose:()V` @kind virtual;
  #L4b6920.  call `onError`(v4, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b6926.  return @kind void;
  #L4b6928.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingObserver;.isDisposed:()Z` @kind virtual;
  #L4b692e.  v2:= temp;
  #L4b6930.  if v2 != 0 then goto L4b6948;
  #L4b6934.  v2:= `@@io.reactivex.rxjava3.internal.observers.BlockingObserver.TERMINATED` @type ^`java.lang.Object` @kind object;
  #L4b6938.  if v3 == v2 then goto L4b6948;
  #L4b693c.  call temp:= `acceptFull`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.acceptFull:(Ljava/lang/Object;Lio/reactivex/rxjava3/core/Observer;)Z` @kind static;
  #L4b6942.  v3:= temp;
  #L4b6944.  if v3 == 0 then goto L4b68f4;
  #L4b6948.  return @kind void;
  catch `java.lang.InterruptedException` @[L4b690e..L4b6916] goto L4b6918;
}
procedure `void` `subscribe`(`io.reactivex.rxjava3.core.ObservableSource` v2 @kind object, `io.reactivex.rxjava3.functions.Consumer` v3 @kind object, `io.reactivex.rxjava3.functions.Consumer` v4 @kind object, `io.reactivex.rxjava3.functions.Action` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBlockingSubscribe;.subscribe:(Lio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4b696c.  v0:= "onNext is null" @kind object;
  #L4b6970.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b6976.  v0:= "onError is null" @kind object;
  #L4b697a.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b6980.  v0:= "onComplete is null" @kind object;
  #L4b6984.  call temp:= `requireNonNull`(v5, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b698a.  v0:= new `io.reactivex.rxjava3.internal.observers.LambdaObserver`;
  #L4b698e.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4b6994.  v1:= temp @kind object;
  #L4b6996.  call `<init>`(v0, v3, v4, v5, v1) @signature `Lio/reactivex/rxjava3/internal/observers/LambdaObserver;.<init>:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Consumer;)V` @kind direct;
  #L4b699c.  call `subscribe`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBlockingSubscribe;.subscribe:(Lio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/core/Observer;)V` @kind static;
  #L4b69a2.  return @kind void;
}
