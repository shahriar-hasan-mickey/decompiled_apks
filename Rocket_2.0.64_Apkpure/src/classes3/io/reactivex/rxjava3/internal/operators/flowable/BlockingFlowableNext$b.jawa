record `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.subscribers.DisposableSubscriber` @kind class {
  `java.util.concurrent.BlockingQueue` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b.b` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$b;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4870a0.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/subscribers/DisposableSubscriber;.<init>:()V` @kind direct;
  #L4870a6.  v0:= new `java.util.concurrent.ArrayBlockingQueue`;
  #L4870aa.  v1:= 1I;
  #L4870ac.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/ArrayBlockingQueue;.<init>:(I)V` @kind direct;
  #L4870b2.  v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b.b` @type ^`java.util.concurrent.BlockingQueue` := v0 @kind object;
  #L4870b6.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4870ba.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4870c0.  v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b.c` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L4870c4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` v2 @kind this, `io.reactivex.rxjava3.core.Notification` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$b;.a:(Lio/reactivex/rxjava3/core/Notification;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L487104.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L487108.  v1:= 0I;
  #L48710a.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L487110.  v0:= temp;
  #L487112.  v1:= 1I;
  #L487114.  if v0 == v1 then goto L487124;
  #L487118.  call temp:= `isOnNext`(v3) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnNext:()Z` @kind virtual;
  #L48711e.  v0:= temp;
  #L487120.  if v0 != 0 then goto L487158;
  #L487124.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b.b` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L487128.  call temp:= `offer`(v0, v3) @signature `Ljava/util/concurrent/BlockingQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L48712e.  v0:= temp;
  #L487130.  if v0 != 0 then goto L487158;
  #L487134.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b.b` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L487138.  call temp:= `poll`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L48713e.  v0:= temp @kind object;
  #L487140.  v0:= (`io.reactivex.rxjava3.core.Notification`) v0 @kind object;
  #L487144.  if v0 == 0 then goto L487124;
  #L487148.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnNext:()Z` @kind virtual;
  #L48714e.  v1:= temp;
  #L487150.  if v1 != 0 then goto L487124;
  #L487154.  v3:= v0 @kind object;
  #L487156.  goto L487124;
  #L487158.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L487188.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L48718c.  v1:= 1I;
  #L48718e.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L487194.  return @kind void;
}
procedure `io.reactivex.rxjava3.core.Notification` `c`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$b;.c:()Lio/reactivex/rxjava3/core/Notification;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L487070.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$b;.b:()V` @kind virtual;
  #L487076.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L48707c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b.b` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L487080.  call temp:= `take`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.take:()Ljava/lang/Object;` @kind interface;
  #L487086.  v0:= temp @kind object;
  #L487088.  v0:= (`io.reactivex.rxjava3.core.Notification`) v0 @kind object;
  #L48708c.  return v0 @kind object;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L4870d8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4870ec.  call `onError`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4870f2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L48716c.  v1:= (`io.reactivex.rxjava3.core.Notification`) v1 @kind object;
  #L487170.  call `a`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$b;.a:(Lio/reactivex/rxjava3/core/Notification;)V` @kind virtual;
  #L487176.  return @kind void;
}
