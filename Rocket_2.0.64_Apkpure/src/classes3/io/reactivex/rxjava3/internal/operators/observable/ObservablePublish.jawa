record `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.observables.ConnectableObservable` @kind class, `io.reactivex.rxjava3.internal.fuseable.HasUpstreamObservableSource` @kind interface {
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish` v0 @kind this, `io.reactivex.rxjava3.core.ObservableSource` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish;.<init>:(Lio/reactivex/rxjava3/core/ObservableSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4c4718.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/observables/ConnectableObservable;.<init>:()V` @kind direct;
  #L4c471e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.a` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v1 @kind object;
  #L4c4722.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c4726.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c472c.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4c4730.  return @kind void;
}
procedure `void` `connect`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish` v4 @kind this, `io.reactivex.rxjava3.functions.Consumer` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish;.connect:(Lio/reactivex/rxjava3/functions/Consumer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c4744.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c4748.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c474e.  v0:= temp @kind object;
  #L4c4750.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b`) v0 @kind object;
  #L4c4754.  if v0 == 0 then goto L4c4764;
  #L4c4758.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.isDisposed:()Z` @kind virtual;
  #L4c475e.  v1:= temp;
  #L4c4760.  if v1 == 0 then goto L4c4786;
  #L4c4764.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b`;
  #L4c4768.  v2:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c476c.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L4c4772.  v2:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c4776.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c477c.  v0:= temp;
  #L4c477e.  if v0 != 0 then goto L4c4784;
  #L4c4782.  goto L4c4744;
  #L4c4784.  v0:= v1 @kind object;
  #L4c4786.  v1:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4c478a.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4c4790.  v1:= temp;
  #L4c4792.  v2:= 1I;
  #L4c4794.  v3:= 0I;
  #L4c4796.  if v1 != 0 then goto L4c47ac;
  #L4c479a.  v1:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4c479e.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4c47a4.  v1:= temp;
  #L4c47a6.  if v1 == 0 then goto L4c47ac;
  #L4c47aa.  goto L4c47ae;
  #L4c47ac.  v2:= 0I;
  #L4c47ae.  call `accept`(v5, v0) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4c47b4.  if v2 == 0 then goto L4c47c2;
  #L4c47b8.  v5:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.a` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4c47bc.  call `subscribe`(v5, v0) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4c47c2.  return @kind void;
  #L4c47c4.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c47c6.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c47cc.  call temp:= `wrapOrThrow`(v5) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4c47d2.  v5:= temp @kind object;
  #L4c47d4.  throw v5;
  catch `java.lang.Throwable` @[L4c47ae..L4c47b4] goto L4c47c4;
}
procedure `void` `reset`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c47f4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c47f8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c47fe.  v0:= temp @kind object;
  #L4c4800.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b`) v0 @kind object;
  #L4c4804.  if v0 == 0 then goto L4c4820;
  #L4c4808.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.isDisposed:()Z` @kind virtual;
  #L4c480e.  v1:= temp;
  #L4c4810.  if v1 == 0 then goto L4c4820;
  #L4c4814.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c4818.  v2:= 0I;
  #L4c481a.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c4820.  return @kind void;
}
procedure `io.reactivex.rxjava3.core.ObservableSource` `source`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish;.source:()Lio/reactivex/rxjava3/core/ObservableSource;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4700.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.a` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4c4704.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish` v3 @kind this, `io.reactivex.rxjava3.core.Observer` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish;.subscribeActual:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L4c4834.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c4838.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c483e.  v0:= temp @kind object;
  #L4c4840.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b`) v0 @kind object;
  #L4c4844.  if v0 != 0 then goto L4c486a;
  #L4c4848.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b`;
  #L4c484c.  v2:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c4850.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L4c4856.  v2:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c485a.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c4860.  v0:= temp;
  #L4c4862.  if v0 != 0 then goto L4c4868;
  #L4c4866.  goto L4c4834;
  #L4c4868.  v0:= v1 @kind object;
  #L4c486a.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`;
  #L4c486e.  call `<init>`(v1, v4, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;)V` @kind direct;
  #L4c4874.  call `onSubscribe`(v4, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4c487a.  call temp:= `a`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.a:(Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$a;)Z` @kind virtual;
  #L4c4880.  v2:= temp;
  #L4c4882.  if v2 == 0 then goto L4c489a;
  #L4c4886.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$a;.isDisposed:()Z` @kind virtual;
  #L4c488c.  v4:= temp;
  #L4c488e.  if v4 == 0 then goto L4c4898;
  #L4c4892.  call `b`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.b:(Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$a;)V` @kind virtual;
  #L4c4898.  return @kind void;
  #L4c489a.  v0:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.d` @type ^`java.lang.Throwable` @kind object;
  #L4c489e.  if v0 == 0 then goto L4c48aa;
  #L4c48a2.  call `onError`(v4, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c48a8.  goto L4c48b0;
  #L4c48aa.  call `onComplete`(v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4c48b0.  return @kind void;
}
