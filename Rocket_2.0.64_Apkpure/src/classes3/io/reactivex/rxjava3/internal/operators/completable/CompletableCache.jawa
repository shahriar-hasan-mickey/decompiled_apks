record `io.reactivex.rxjava3.internal.operators.completable.CompletableCache` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Completable` @kind class, `io.reactivex.rxjava3.core.CompletableObserver` @kind interface {
  `io.reactivex.rxjava3.core.CompletableSource` `io.reactivex.rxjava3.internal.operators.completable.CompletableCache.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.completable.CompletableCache.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.completable.CompletableCache.c` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.completable.CompletableCache.d` @AccessFlag ;
}
global `io.reactivex.rxjava3.internal.operators.completable.CompletableCache$a`[] `@@io.reactivex.rxjava3.internal.operators.completable.CompletableCache.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.operators.completable.CompletableCache$a`[] `@@io.reactivex.rxjava3.internal.operators.completable.CompletableCache.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableCache;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L482d48.  v0:= 0I;
  #L482d4a.  v1:= new `io.reactivex.rxjava3.internal.operators.completable.CompletableCache$a`[v0];
  #L482d4e.  `@@io.reactivex.rxjava3.internal.operators.completable.CompletableCache.e` @type ^`io.reactivex.rxjava3.internal.operators.completable.CompletableCache$a`[] := v1 @kind object;
  #L482d52.  v0:= new `io.reactivex.rxjava3.internal.operators.completable.CompletableCache$a`[v0];
  #L482d56.  `@@io.reactivex.rxjava3.internal.operators.completable.CompletableCache.f` @type ^`io.reactivex.rxjava3.internal.operators.completable.CompletableCache$a`[] := v0 @kind object;
  #L482d5a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.completable.CompletableCache` v1 @kind this, `io.reactivex.rxjava3.core.CompletableSource` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableCache;.<init>:(Lio/reactivex/rxjava3/core/CompletableSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L482d6c.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/core/Completable;.<init>:()V` @kind direct;
  #L482d72.  v1.`io.reactivex.rxjava3.internal.operators.completable.CompletableCache.a` @type ^`io.reactivex.rxjava3.core.CompletableSource` := v2 @kind object;
  #L482d76.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L482d7a.  v0:= `@@io.reactivex.rxjava3.internal.operators.completable.CompletableCache.e` @type ^`io.reactivex.rxjava3.internal.operators.completable.CompletableCache$a`[] @kind object;
  #L482d7e.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L482d84.  v1.`io.reactivex.rxjava3.internal.operators.completable.CompletableCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L482d88.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L482d8c.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L482d92.  v1.`io.reactivex.rxjava3.internal.operators.completable.CompletableCache.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L482d96.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.rxjava3.internal.operators.completable.CompletableCache` v4 @kind this, `io.reactivex.rxjava3.internal.operators.completable.CompletableCache$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableCache;.e:(Lio/reactivex/rxjava3/internal/operators/completable/CompletableCache$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L482cf4.  v0:= v4.`io.reactivex.rxjava3.internal.operators.completable.CompletableCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L482cf8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L482cfe.  v0:= temp @kind object;
  #L482d00.  v0:= (`io.reactivex.rxjava3.internal.operators.completable.CompletableCache$a`[]) v0 @kind object;
  #L482d04.  v1:= `@@io.reactivex.rxjava3.internal.operators.completable.CompletableCache.f` @type ^`io.reactivex.rxjava3.internal.operators.completable.CompletableCache$a`[] @kind object;
  #L482d08.  v2:= 0I;
  #L482d0a.  if v0 != v1 then goto L482d10;
  #L482d0e.  return v2;
  #L482d10.  v1:= length @variable v0;
  #L482d12.  v3:= v1 + 1;
  #L482d16.  v3:= new `io.reactivex.rxjava3.internal.operators.completable.CompletableCache$a`[v3];
  #L482d1a.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L482d20.  v3[v1]:= v5 @kind object;
  #L482d24.  v1:= v4.`io.reactivex.rxjava3.internal.operators.completable.CompletableCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L482d28.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L482d2e.  v0:= temp;
  #L482d30.  if v0 == 0 then goto L482cf4;
  #L482d34.  v5:= 1I;
  #L482d36.  return v5;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.completable.CompletableCache` v6 @kind this, `io.reactivex.rxjava3.internal.operators.completable.CompletableCache$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableCache;.f:(Lio/reactivex/rxjava3/internal/operators/completable/CompletableCache$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L482e60.  v0:= v6.`io.reactivex.rxjava3.internal.operators.completable.CompletableCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L482e64.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L482e6a.  v0:= temp @kind object;
  #L482e6c.  v0:= (`io.reactivex.rxjava3.internal.operators.completable.CompletableCache$a`[]) v0 @kind object;
  #L482e70.  v1:= length @variable v0;
  #L482e72.  if v1 != 0 then goto L482e78;
  #L482e76.  return @kind void;
  #L482e78.  v2:= -1I;
  #L482e7a.  v3:= 0I;
  #L482e7c.  v4:= 0I;
  #L482e7e.  if v4 >= v1 then goto L482e94;
  #L482e82.  v5:= v0[v4] @kind object;
  #L482e86.  if v5 != v7 then goto L482e8e;
  #L482e8a.  v2:= v4;
  #L482e8c.  goto L482e94;
  #L482e8e.  v4:= v4 + 1;
  #L482e92.  goto L482e7e;
  #L482e94.  if v2 >= 0 then goto L482e9a;
  #L482e98.  return @kind void;
  #L482e9a.  v4:= 1I;
  #L482e9c.  if v1 != v4 then goto L482ea6;
  #L482ea0.  v1:= `@@io.reactivex.rxjava3.internal.operators.completable.CompletableCache.e` @type ^`io.reactivex.rxjava3.internal.operators.completable.CompletableCache$a`[] @kind object;
  #L482ea4.  goto L482ec4;
  #L482ea6.  v5:= v1 + -1;
  #L482eaa.  v5:= new `io.reactivex.rxjava3.internal.operators.completable.CompletableCache$a`[v5];
  #L482eae.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L482eb4.  v3:= v2 + 1;
  #L482eb8.  v1:= v1 - v2 @kind int;
  #L482eba.  v1:= v1 - v4 @kind int;
  #L482ebc.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L482ec2.  v1:= v5 @kind object;
  #L482ec4.  v2:= v6.`io.reactivex.rxjava3.internal.operators.completable.CompletableCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L482ec8.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L482ece.  v0:= temp;
  #L482ed0.  if v0 == 0 then goto L482e60;
  #L482ed4.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.completable.CompletableCache` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableCache;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L482da8.  v0:= v5.`io.reactivex.rxjava3.internal.operators.completable.CompletableCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L482dac.  v1:= `@@io.reactivex.rxjava3.internal.operators.completable.CompletableCache.f` @type ^`io.reactivex.rxjava3.internal.operators.completable.CompletableCache$a`[] @kind object;
  #L482db0.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L482db6.  v0:= temp @kind object;
  #L482db8.  v0:= (`io.reactivex.rxjava3.internal.operators.completable.CompletableCache$a`[]) v0 @kind object;
  #L482dbc.  v1:= length @variable v0;
  #L482dbe.  v2:= 0I;
  #L482dc0.  if v2 >= v1 then goto L482de4;
  #L482dc4.  v3:= v0[v2] @kind object;
  #L482dc8.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L482dce.  v4:= temp;
  #L482dd0.  if v4 != 0 then goto L482dde;
  #L482dd4.  v3:= v3.`io.reactivex.rxjava3.internal.operators.completable.CompletableCache$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L482dd8.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onComplete:()V` @kind interface;
  #L482dde.  v2:= v2 + 1;
  #L482de2.  goto L482dc0;
  #L482de4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.completable.CompletableCache` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableCache;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L482df8.  v5.`io.reactivex.rxjava3.internal.operators.completable.CompletableCache.d` @type ^`java.lang.Throwable` := v6 @kind object;
  #L482dfc.  v0:= v5.`io.reactivex.rxjava3.internal.operators.completable.CompletableCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L482e00.  v1:= `@@io.reactivex.rxjava3.internal.operators.completable.CompletableCache.f` @type ^`io.reactivex.rxjava3.internal.operators.completable.CompletableCache$a`[] @kind object;
  #L482e04.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L482e0a.  v0:= temp @kind object;
  #L482e0c.  v0:= (`io.reactivex.rxjava3.internal.operators.completable.CompletableCache$a`[]) v0 @kind object;
  #L482e10.  v1:= length @variable v0;
  #L482e12.  v2:= 0I;
  #L482e14.  if v2 >= v1 then goto L482e38;
  #L482e18.  v3:= v0[v2] @kind object;
  #L482e1c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L482e22.  v4:= temp;
  #L482e24.  if v4 != 0 then goto L482e32;
  #L482e28.  v3:= v3.`io.reactivex.rxjava3.internal.operators.completable.CompletableCache$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L482e2c.  call `onError`(v3, v6) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L482e32.  v2:= v2 + 1;
  #L482e36.  goto L482e14;
  #L482e38.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.completable.CompletableCache` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableCache;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L482e4c.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.completable.CompletableCache` v2 @kind this, `io.reactivex.rxjava3.core.CompletableObserver` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableCache;.subscribeActual:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L482ee8.  v0:= new `io.reactivex.rxjava3.internal.operators.completable.CompletableCache$a`;
  #L482eec.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableCache$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/completable/CompletableCache;Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind direct;
  #L482ef2.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L482ef8.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableCache;.e:(Lio/reactivex/rxjava3/internal/operators/completable/CompletableCache$a;)Z` @kind virtual;
  #L482efe.  v1:= temp;
  #L482f00.  if v1 == 0 then goto L482f36;
  #L482f04.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableCache$a;.isDisposed:()Z` @kind virtual;
  #L482f0a.  v3:= temp;
  #L482f0c.  if v3 == 0 then goto L482f16;
  #L482f10.  call `f`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableCache;.f:(Lio/reactivex/rxjava3/internal/operators/completable/CompletableCache$a;)V` @kind virtual;
  #L482f16.  v3:= v2.`io.reactivex.rxjava3.internal.operators.completable.CompletableCache.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L482f1a.  v0:= 0I;
  #L482f1c.  v1:= 1I;
  #L482f1e.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L482f24.  v3:= temp;
  #L482f26.  if v3 == 0 then goto L482f4c;
  #L482f2a.  v3:= v2.`io.reactivex.rxjava3.internal.operators.completable.CompletableCache.a` @type ^`io.reactivex.rxjava3.core.CompletableSource` @kind object;
  #L482f2e.  call `subscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/CompletableSource;.subscribe:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind interface;
  #L482f34.  goto L482f4c;
  #L482f36.  v0:= v2.`io.reactivex.rxjava3.internal.operators.completable.CompletableCache.d` @type ^`java.lang.Throwable` @kind object;
  #L482f3a.  if v0 == 0 then goto L482f46;
  #L482f3e.  call `onError`(v3, v0) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L482f44.  goto L482f4c;
  #L482f46.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onComplete:()V` @kind interface;
  #L482f4c.  return @kind void;
}
