record `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$d` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$d.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$d` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$d;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Predicate;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d051c.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$b;.<init>:(Lio/reactivex/rxjava3/functions/Predicate;Lio/reactivex/rxjava3/functions/BiFunction;)V` @kind direct;
  #L4d0522.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$d.e` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4d0526.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$d` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$d;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d0538.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b.d` @type ^`boolean` @kind boolean;
  #L4d053c.  if v0 != 0 then goto L4d0550;
  #L4d0540.  v0:= 1I;
  #L4d0542.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b.d` @type ^`boolean` := v0 @kind boolean;
  #L4d0546.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$d.e` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d054a.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d0550.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$d` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$d;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d0564.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b.d` @type ^`boolean` @kind boolean;
  #L4d0568.  if v0 == 0 then goto L4d0574;
  #L4d056c.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d0572.  return @kind void;
  #L4d0574.  v0:= 1I;
  #L4d0576.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b.d` @type ^`boolean` := v0 @kind boolean;
  #L4d057a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$d.e` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d057e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d0584.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$d` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$d;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d0598.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d059c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d05a2.  v0:= temp;
  #L4d05a4.  if v0 == 0 then goto L4d05b6;
  #L4d05a8.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4d05ac.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$d.e` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d05b0.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d05b6.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$d` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$d;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4d042c.  v0:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b.d` @type ^`boolean` @kind boolean;
  #L4d0430.  v1:= 0I;
  #L4d0432.  if v0 != 0 then goto L4d04f0;
  #L4d0436.  v2:= 0L;
  #L4d043a.  v0:= 1I;
  #L4d043c.  v4:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b.a` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L4d0440.  call temp:= `test`(v4, v10) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4d0446.  v2:= temp;
  #L4d0448.  if v2 == 0 then goto L4d0458;
  #L4d044c.  v1:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$d.e` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d0450.  call `onNext`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d0456.  return v0;
  #L4d0458.  return v1;
  #L4d045a.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d045c.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d0462.  v5:= 2I;
  #L4d0464.  v6:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4d0468.  v7:= 1L;
  #L4d046c.  v2:= v2 + v7 @kind long;
  #L4d046e.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4d0474.  v7:= temp @kind object;
  #L4d0476.  call temp:= `apply`(v6, v7, v4) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4d047c.  v6:= temp @kind object;
  #L4d047e.  v7:= "The errorHandler returned a null ParallelFailureHandling" @kind object;
  #L4d0482.  call temp:= `requireNonNull`(v6, v7) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4d0488.  v6:= (`io.reactivex.rxjava3.parallel.ParallelFailureHandling`) v6 @kind object;
  #L4d048c.  v7:= `@@io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$a.a` @type ^`int`[] @kind object;
  #L4d0490.  call temp:= `ordinal`(v6) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L4d0496.  v6:= temp;
  #L4d0498.  v6:= v7[v6];
  #L4d049c.  if v6 == v0 then goto L4d043a;
  #L4d04a0.  if v6 == v5 then goto L4d04c4;
  #L4d04a4.  v10:= 3I;
  #L4d04a6.  if v6 == v10 then goto L4d04b8;
  #L4d04aa.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$b;.cancel:()V` @kind virtual;
  #L4d04b0.  call `onError`(v9, v4) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$d;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d04b6.  return v1;
  #L4d04b8.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$b;.cancel:()V` @kind virtual;
  #L4d04be.  call `onComplete`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$d;.onComplete:()V` @kind virtual;
  #L4d04c4.  return v1;
  #L4d04c6.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d04c8.  call `throwIfFatal`(v10) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d04ce.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$b;.cancel:()V` @kind virtual;
  #L4d04d4.  v2:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L4d04d8.  v3:= new `java.lang.Throwable`[v5];
  #L4d04dc.  v3[v1]:= v4 @kind object;
  #L4d04e0.  v3[v0]:= v10 @kind object;
  #L4d04e4.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4d04ea.  call `onError`(v9, v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$d;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d04f0.  return v1;
  catch `java.lang.Throwable` @[L4d043c..L4d0448] goto L4d045a;
  catch `java.lang.Throwable` @[L4d0464..L4d048c] goto L4d04c6;
}
