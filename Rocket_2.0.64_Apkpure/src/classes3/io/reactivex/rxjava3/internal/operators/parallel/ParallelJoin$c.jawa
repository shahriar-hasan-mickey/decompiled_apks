record `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a`[] `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.e` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.f` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4d10f0.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4d10f6.  v0:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4d10fa.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4d1100.  v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v0 @kind object;
  #L4d1104.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4d1108.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4d110e.  v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L4d1112.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4d1116.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4d111c.  v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L4d1120.  v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.a` @type ^`org.reactivestreams.Subscriber` := v3 @kind object;
  #L4d1124.  v3:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a`[v4];
  #L4d1128.  v0:= 0I;
  #L4d112a.  if v0 >= v4 then goto L4d1142;
  #L4d112e.  v1:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a`;
  #L4d1132.  call `<init>`(v1, v2, v5) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;I)V` @kind direct;
  #L4d1138.  v3[v0]:= v1 @kind object;
  #L4d113c.  v0:= v0 + 1;
  #L4d1140.  goto L4d112a;
  #L4d1142.  v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.b` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a`[] := v3 @kind object;
  #L4d1146.  v3:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4d114a.  call `lazySet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4d1150.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4d119c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.b` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a`[] @kind object;
  #L4d11a0.  v1:= length @variable v0;
  #L4d11a2.  v2:= 0I;
  #L4d11a4.  if v2 >= v1 then goto L4d11b8;
  #L4d11a8.  v3:= v0[v2] @kind object;
  #L4d11ac.  call temp:= `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;.a:()Z` @kind virtual;
  #L4d11b2.  v2:= v2 + 1;
  #L4d11b6.  goto L4d11a4;
  #L4d11b8.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4d11cc.  v0:= v5.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.b` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a`[] @kind object;
  #L4d11d0.  v1:= length @variable v0;
  #L4d11d2.  v2:= 0I;
  #L4d11d4.  if v2 >= v1 then goto L4d11e8;
  #L4d11d8.  v3:= v0[v2] @kind object;
  #L4d11dc.  v4:= 0I;
  #L4d11de.  v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v4 @kind object;
  #L4d11e2.  v2:= v2 + 1;
  #L4d11e6.  goto L4d11d4;
  #L4d11e8.  return @kind void;
}
procedure `void` `c`() @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.c:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d1164.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.e` @type ^`boolean` @kind boolean;
  #L4d1168.  if v0 != 0 then goto L4d118a;
  #L4d116c.  v0:= 1I;
  #L4d116e.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.e` @type ^`boolean` := v0 @kind boolean;
  #L4d1172.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.a:()V` @kind virtual;
  #L4d1178.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d117e.  v0:= temp;
  #L4d1180.  if v0 != 0 then goto L4d118a;
  #L4d1184.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.b:()V` @kind virtual;
  #L4d118a.  return @kind void;
}
procedure `void` `d`() @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.d:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `e`(`java.lang.Throwable` v0 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.e:(Ljava/lang/Throwable;)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.f:(Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;Ljava/lang/Object;)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d11fc.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4d1202.  v0:= temp;
  #L4d1204.  if v0 == 0 then goto L4d1218;
  #L4d1208.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d120c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4d1212.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.c:()V` @kind virtual;
  #L4d1218.  return @kind void;
}
