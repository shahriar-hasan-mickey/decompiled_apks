record `io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Predicate` `io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeUntilPredicate$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ca5c8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ca5ce.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4ca5d2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.b` @type ^`io.reactivex.rxjava3.functions.Predicate` := v2 @kind object;
  #L4ca5d6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeUntilPredicate$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ca5e8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ca5ec.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ca5f2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeUntilPredicate$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ca5a8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ca5ac.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4ca5b2.  v0:= temp;
  #L4ca5b4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeUntilPredicate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ca604.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.d` @type ^`boolean` @kind boolean;
  #L4ca608.  if v0 != 0 then goto L4ca61c;
  #L4ca60c.  v0:= 1I;
  #L4ca60e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4ca612.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ca616.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4ca61c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeUntilPredicate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ca630.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.d` @type ^`boolean` @kind boolean;
  #L4ca634.  if v0 != 0 then goto L4ca64a;
  #L4ca638.  v0:= 1I;
  #L4ca63a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4ca63e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ca642.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ca648.  goto L4ca650;
  #L4ca64a.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4ca650.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeUntilPredicate$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ca664.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.d` @type ^`boolean` @kind boolean;
  #L4ca668.  if v0 != 0 then goto L4ca6ba;
  #L4ca66c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ca670.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ca676.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.b` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L4ca67a.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4ca680.  v2:= temp;
  #L4ca682.  if v2 == 0 then goto L4ca6ba;
  #L4ca686.  v2:= 1I;
  #L4ca688.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.d` @type ^`boolean` := v2 @kind boolean;
  #L4ca68c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ca690.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ca696.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ca69a.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4ca6a0.  goto L4ca6ba;
  #L4ca6a2.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ca6a4.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ca6aa.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ca6ae.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ca6b4.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeUntilPredicate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ca6ba.  return @kind void;
  catch `java.lang.Throwable` @[L4ca676..L4ca682] goto L4ca6a2;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeUntilPredicate$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ca6d8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ca6dc.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ca6e2.  v0:= temp;
  #L4ca6e4.  if v0 == 0 then goto L4ca6f6;
  #L4ca6e8.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4ca6ec.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ca6f0.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4ca6f6.  return @kind void;
}
