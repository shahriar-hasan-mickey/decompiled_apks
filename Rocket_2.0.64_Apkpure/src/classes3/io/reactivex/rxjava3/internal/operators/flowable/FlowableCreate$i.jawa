record `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableEmitter` @kind interface {
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.d` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i` v1 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L48de64.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L48de6a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` := v2 @kind object;
  #L48de6e.  v2:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L48de72.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L48de78.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v2 @kind object;
  #L48de7c.  v2:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L48de80.  v0:= 16I;
  #L48de84.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L48de8a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.c` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v2 @kind object;
  #L48de8e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L48dea0.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L48dea6.  v0:= temp;
  #L48dea8.  if v0 != 0 then goto L48deb2;
  #L48deac.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.b:()V` @kind virtual;
  #L48deb2.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i` v8 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L48dec4.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L48dec8.  v1:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.c` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L48decc.  v2:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48ded0.  v3:= 1I;
  #L48ded2.  v4:= 1I;
  #L48ded4.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L48deda.  v5:= temp;
  #L48dedc.  if v5 == 0 then goto L48dee8;
  #L48dee0.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L48dee6.  return @kind void;
  #L48dee8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48deee.  v5:= temp @kind object;
  #L48def0.  if v5 == 0 then goto L48df02;
  #L48def4.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L48defa.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Emitter;)V` @kind virtual;
  #L48df00.  return @kind void;
  #L48df02.  v5:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.d` @type ^`boolean` @kind boolean;
  #L48df06.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L48df0c.  v6:= temp @kind object;
  #L48df0e.  if v6 != 0 then goto L48df16;
  #L48df12.  v7:= 1I;
  #L48df14.  goto L48df18;
  #L48df16.  v7:= 0I;
  #L48df18.  if v5 == 0 then goto L48df28;
  #L48df1c.  if v7 == 0 then goto L48df28;
  #L48df20.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.onComplete:()V` @kind virtual;
  #L48df26.  return @kind void;
  #L48df28.  if v7 == 0 then goto L48df3c;
  #L48df2c.  v4:= -v4 @kind int;
  #L48df2e.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L48df34.  v4:= temp;
  #L48df36.  if v4 != 0 then goto L48ded4;
  #L48df3a.  return @kind void;
  #L48df3c.  call `onNext`(v0, v6) @signature `Lio/reactivex/rxjava3/core/Emitter;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48df42.  goto L48ded4;
}
procedure `boolean` `isCancelled`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48dd94.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L48dd98.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L48dd9e.  v0:= temp;
  #L48dda0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48df54.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L48df58.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L48df5e.  v0:= temp;
  #L48df60.  if v0 != 0 then goto L48df7a;
  #L48df64.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.d` @type ^`boolean` @kind boolean;
  #L48df68.  if v0 == 0 then goto L48df6e;
  #L48df6c.  goto L48df7a;
  #L48df6e.  v0:= 1I;
  #L48df70.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.d` @type ^`boolean` := v0 @kind boolean;
  #L48df74.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.a:()V` @kind virtual;
  #L48df7a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48df8c.  call temp:= `tryOnError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.tryOnError:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L48df92.  v0:= temp;
  #L48df94.  if v0 != 0 then goto L48df9e;
  #L48df98.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L48df9e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48dfb0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L48dfb4.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L48dfba.  v0:= temp;
  #L48dfbc.  if v0 != 0 then goto L48e040;
  #L48dfc0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.d` @type ^`boolean` @kind boolean;
  #L48dfc4.  if v0 == 0 then goto L48dfca;
  #L48dfc8.  goto L48e040;
  #L48dfca.  if v3 != 0 then goto L48dfe2;
  #L48dfce.  v3:= "onNext called with a null value." @kind object;
  #L48dfd2.  call temp:= `createNullPointerException`(v3) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;` @kind static;
  #L48dfd8.  v3:= temp @kind object;
  #L48dfda.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L48dfe0.  return @kind void;
  #L48dfe2.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L48dfe8.  v0:= temp;
  #L48dfea.  if v0 != 0 then goto L48e016;
  #L48dfee.  v0:= 0I;
  #L48dff0.  v1:= 1I;
  #L48dff2.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L48dff8.  v0:= temp;
  #L48dffa.  if v0 == 0 then goto L48e016;
  #L48dffe.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L48e002.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Emitter;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48e008.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L48e00e.  v3:= temp;
  #L48e010.  if v3 != 0 then goto L48e032;
  #L48e014.  return @kind void;
  #L48e016.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.c` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L48e01a.  @monitorenter v0
  #L48e01c.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L48e022.  @monitorexit v0
  #L48e024.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L48e02a.  v3:= temp;
  #L48e02c.  if v3 == 0 then goto L48e032;
  #L48e030.  return @kind void;
  #L48e032.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.b:()V` @kind virtual;
  #L48e038.  return @kind void;
  #L48e03a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48e03c.  @monitorexit v0
  #L48e03e.  throw v3;
  #L48e040.  return @kind void;
  catch `java.lang.Throwable` @[L48e01c..L48e024] goto L48e03a;
  catch `java.lang.Throwable` @[L48e03c..L48e03e] goto L48e03a;
}
procedure `long` `requested`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.requested:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48de44.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L48de48.  call temp:= `requested`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.requested:()J` @kind virtual;
  #L48de4e.  v0:= temp @kind wide;
  #L48de50.  return v0 @kind wide;
}
procedure `io.reactivex.rxjava3.core.FlowableEmitter` `serialize`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.serialize:()Lio/reactivex/rxjava3/core/FlowableEmitter;` @AccessFlag PUBLIC {
    temp;

  #L48de10.  return v0 @kind object;
}
procedure `void` `setCancellable`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i` v1 @kind this, `io.reactivex.rxjava3.functions.Cancellable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.setCancellable:(Lio/reactivex/rxjava3/functions/Cancellable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48e068.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L48e06c.  call `setCancellable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.setCancellable:(Lio/reactivex/rxjava3/functions/Cancellable;)V` @kind virtual;
  #L48e072.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.setDisposable:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48e084.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L48e088.  call `setDisposable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.setDisposable:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L48e08e.  return @kind void;
}
procedure `java.lang.String` `toString`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48de24.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L48de28.  call temp:= `toString`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.toString:()Ljava/lang/String;` @kind virtual;
  #L48de2e.  v0:= temp @kind object;
  #L48de30.  return v0 @kind object;
}
procedure `boolean` `tryOnError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48ddb4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L48ddb8.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L48ddbe.  v0:= temp;
  #L48ddc0.  v1:= 0I;
  #L48ddc2.  if v0 != 0 then goto L48ddfe;
  #L48ddc6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.d` @type ^`boolean` @kind boolean;
  #L48ddca.  if v0 == 0 then goto L48ddd0;
  #L48ddce.  goto L48ddfe;
  #L48ddd0.  if v3 != 0 then goto L48dde0;
  #L48ddd4.  v3:= "onError called with a null Throwable." @kind object;
  #L48ddd8.  call temp:= `createNullPointerException`(v3) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;` @kind static;
  #L48ddde.  v3:= temp @kind object;
  #L48dde0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48dde4.  call temp:= `tryAddThrowable`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L48ddea.  v3:= temp;
  #L48ddec.  if v3 == 0 then goto L48ddfe;
  #L48ddf0.  v3:= 1I;
  #L48ddf2.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.d` @type ^`boolean` := v3 @kind boolean;
  #L48ddf6.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.a:()V` @kind virtual;
  #L48ddfc.  return v3;
  #L48ddfe.  return v1;
}
