record `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `io.reactivex.rxjava3.core.ObservableSource` @kind interface {
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.e` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.f` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.g` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.i` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b` v1 @kind this, `int` v2 , `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver` v3 @kind object, `java.lang.Object` v4 @kind object, `boolean` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.<init>:(ILio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;Ljava/lang/Object;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4c0624.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4c062a.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4c062e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4c0634.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L4c0638.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c063c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c0642.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4c0646.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4c064a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4c0650.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L4c0654.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4c0658.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4c065e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v0 @kind object;
  #L4c0662.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver` := v3 @kind object;
  #L4c0666.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.a` @type ^`java.lang.Object` := v4 @kind object;
  #L4c066a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.d` @type ^`boolean` := v5 @kind boolean;
  #L4c066e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4c0680.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c0684.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4c068a.  v0:= temp;
  #L4c068c.  v0:= v0 ^& 2;
  #L4c0690.  if v0 != 0 then goto L4c06a2;
  #L4c0694.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver` @kind object;
  #L4c0698.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.a` @type ^`java.lang.Object` @kind object;
  #L4c069c.  call `cancel`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;.cancel:(Ljava/lang/Object;)V` @kind virtual;
  #L4c06a2.  return @kind void;
}
procedure `boolean` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b` v3 @kind this, `boolean` v4 , `boolean` v5 , `io.reactivex.rxjava3.core.Observer` v6 @kind object, `boolean` v7 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.b:(ZZLio/reactivex/rxjava3/core/Observer;Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4c0520.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4c0524.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4c052a.  v0:= temp;
  #L4c052c.  v1:= 1I;
  #L4c052e.  v2:= 0I;
  #L4c0530.  if v0 == 0 then goto L4c0550;
  #L4c0534.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c0538.  call `clear`(v4) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c053e.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c0542.  call `lazySet`(v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4c0548.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.a:()V` @kind virtual;
  #L4c054e.  return v1;
  #L4c0550.  if v4 == 0 then goto L4c05b8;
  #L4c0554.  if v7 == 0 then goto L4c057e;
  #L4c0558.  if v5 == 0 then goto L4c05b8;
  #L4c055c.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.f` @type ^`java.lang.Throwable` @kind object;
  #L4c0560.  v5:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c0564.  call `lazySet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4c056a.  if v4 == 0 then goto L4c0576;
  #L4c056e.  call `onError`(v6, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c0574.  goto L4c057c;
  #L4c0576.  call `onComplete`(v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4c057c.  return v1;
  #L4c057e.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.f` @type ^`java.lang.Throwable` @kind object;
  #L4c0582.  if v4 == 0 then goto L4c05a2;
  #L4c0586.  v5:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c058a.  call `clear`(v5) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c0590.  v5:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c0594.  call `lazySet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4c059a.  call `onError`(v6, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c05a0.  return v1;
  #L4c05a2.  if v5 == 0 then goto L4c05b8;
  #L4c05a6.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c05aa.  call `lazySet`(v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4c05b0.  call `onComplete`(v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4c05b6.  return v1;
  #L4c05b8.  v4:= 0I;
  #L4c05ba.  return v4;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b` v8 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4c06f8.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c06fe.  v0:= temp;
  #L4c0700.  if v0 == 0 then goto L4c0706;
  #L4c0704.  return @kind void;
  #L4c0706.  v0:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c070a.  v1:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.d` @type ^`boolean` @kind boolean;
  #L4c070e.  v2:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c0712.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c0718.  v2:= temp @kind object;
  #L4c071a.  v2:= (`io.reactivex.rxjava3.core.Observer`) v2 @kind object;
  #L4c071e.  v3:= 1I;
  #L4c0720.  v4:= 1I;
  #L4c0722.  if v2 == 0 then goto L4c0758;
  #L4c0726.  v5:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.e` @type ^`boolean` @kind boolean;
  #L4c072a.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4c0730.  v6:= temp @kind object;
  #L4c0732.  if v6 != 0 then goto L4c073a;
  #L4c0736.  v7:= 1I;
  #L4c0738.  goto L4c073c;
  #L4c073a.  v7:= 0I;
  #L4c073c.  call temp:= `b`(v8, v5, v7, v2, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.b:(ZZLio/reactivex/rxjava3/core/Observer;Z)Z` @kind virtual;
  #L4c0742.  v5:= temp;
  #L4c0744.  if v5 == 0 then goto L4c074a;
  #L4c0748.  return @kind void;
  #L4c074a.  if v7 == 0 then goto L4c0750;
  #L4c074e.  goto L4c0758;
  #L4c0750.  call `onNext`(v2, v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c0756.  goto L4c0726;
  #L4c0758.  v4:= -v4 @kind int;
  #L4c075a.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4c0760.  v4:= temp;
  #L4c0762.  if v4 != 0 then goto L4c0768;
  #L4c0766.  return @kind void;
  #L4c0768.  if v2 != 0 then goto L4c0722;
  #L4c076c.  v2:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c0770.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c0776.  v2:= temp @kind object;
  #L4c0778.  v2:= (`io.reactivex.rxjava3.core.Observer`) v2 @kind object;
  #L4c077c.  goto L4c0722;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c0790.  v0:= 1I;
  #L4c0792.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.e` @type ^`boolean` := v0 @kind boolean;
  #L4c0796.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.c:()V` @kind virtual;
  #L4c079c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c06b4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4c06b8.  v1:= 0I;
  #L4c06ba.  v2:= 1I;
  #L4c06bc.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4c06c2.  v0:= temp;
  #L4c06c4.  if v0 == 0 then goto L4c06e6;
  #L4c06c8.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c06ce.  v0:= temp;
  #L4c06d0.  if v0 != 0 then goto L4c06e6;
  #L4c06d4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c06d8.  v1:= 0I;
  #L4c06da.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4c06e0.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.a:()V` @kind virtual;
  #L4c06e6.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.e:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4c07b0.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.f` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4c07b4.  v1:= 1I;
  #L4c07b6.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.e` @type ^`boolean` := v1 @kind boolean;
  #L4c07ba.  call `c`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.c:()V` @kind virtual;
  #L4c07c0.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.f:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c07d4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c07d8.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4c07de.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.c:()V` @kind virtual;
  #L4c07e4.  return @kind void;
}
procedure `boolean` `g`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.g:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4c05ec.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c05f0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4c05f6.  v0:= temp;
  #L4c05f8.  v1:= 0I;
  #L4c05fa.  if v0 != 0 then goto L4c0612;
  #L4c05fe.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c0602.  v2:= 2I;
  #L4c0604.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4c060a.  v0:= temp;
  #L4c060c.  if v0 == 0 then goto L4c0612;
  #L4c0610.  v1:= 1I;
  #L4c0612.  return v1;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c05cc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4c05d0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4c05d6.  v0:= temp;
  #L4c05d8.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b` v3 @kind this, `io.reactivex.rxjava3.core.Observer` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c07f8.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c07fc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4c0802.  v0:= temp;
  #L4c0804.  v1:= v0 ^& 1;
  #L4c0808.  if v1 == 0 then goto L4c0822;
  #L4c080c.  v0:= new `java.lang.IllegalStateException`;
  #L4c0810.  v1:= "Only one Observer allowed!" @kind object;
  #L4c0814.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c081a.  call `error`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/Observer;)V` @kind static;
  #L4c0820.  return @kind void;
  #L4c0822.  v1:= v0 ^| 1;
  #L4c0826.  v2:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c082a.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4c0830.  v0:= temp;
  #L4c0832.  if v0 == 0 then goto L4c07f8;
  #L4c0836.  call `onSubscribe`(v4, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4c083c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c0840.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4c0846.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4c084a.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4c0850.  v4:= temp;
  #L4c0852.  if v4 == 0 then goto L4c0864;
  #L4c0856.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c085a.  v0:= 0I;
  #L4c085c.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4c0862.  goto L4c086a;
  #L4c0864.  call `c`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.c:()V` @kind virtual;
  #L4c086a.  return @kind void;
}
