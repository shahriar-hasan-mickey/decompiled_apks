record `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a` @kind class @AccessFlag ABSTRACT extends `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.rxjava3.functions.Predicate` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.b` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a` v0 @kind this, `io.reactivex.rxjava3.functions.Predicate` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$a;.<init>:(Lio/reactivex/rxjava3/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cfedc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4cfee2.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.a` @type ^`io.reactivex.rxjava3.functions.Predicate` := v1 @kind object;
  #L4cfee6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$a;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4cfef8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cfefc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4cff02.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4cff14.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4cff1a.  v3:= temp;
  #L4cff1c.  if v3 != 0 then goto L4cff36;
  #L4cff20.  v3:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` @kind boolean;
  #L4cff24.  if v3 != 0 then goto L4cff36;
  #L4cff28.  v3:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cff2c.  v0:= 1L;
  #L4cff30.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4cff36.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$a;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4cff48.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cff4c.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4cff52.  return @kind void;
}
