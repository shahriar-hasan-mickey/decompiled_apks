record `io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b`[] `io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.c` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.f` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ceeac.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4ceeb2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4ceeb6.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4ceeba.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b`[v3];
  #L4ceebe.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b`[] := v1 @kind object;
  #L4ceec2.  v1:= new `java.lang.Object`[v3];
  #L4ceec6.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.d` @type ^`java.lang.Object`[] := v1 @kind object;
  #L4ceeca.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.e` @type ^`boolean` := v4 @kind boolean;
  #L4ceece.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.a:()V` @AccessFlag  {
    temp;

  #L4ceee0.  call `d`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.d:()V` @kind virtual;
  #L4ceee6.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.b:()V` @kind virtual;
  #L4ceeec.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4cef00.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b`[] @kind object;
  #L4cef04.  v1:= length @variable v0;
  #L4cef06.  v2:= 0I;
  #L4cef08.  if v2 >= v1 then goto L4cef1c;
  #L4cef0c.  v3:= v0[v2] @kind object;
  #L4cef10.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$b;.a:()V` @kind virtual;
  #L4cef16.  v2:= v2 + 1;
  #L4cef1a.  goto L4cef08;
  #L4cef1c.  return @kind void;
}
procedure `boolean` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a` v2 @kind this, `boolean` v3 , `boolean` v4 , `io.reactivex.rxjava3.core.Observer` v5 @kind object, `boolean` v6 , `io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.c:(ZZLio/reactivex/rxjava3/core/Observer;ZLio/reactivex/rxjava3/internal/operators/observable/ObservableZip$b;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4cee10.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` @kind boolean;
  #L4cee14.  v1:= 1I;
  #L4cee16.  if v0 == 0 then goto L4cee22;
  #L4cee1a.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.a:()V` @kind virtual;
  #L4cee20.  return v1;
  #L4cee22.  if v3 == 0 then goto L4cee80;
  #L4cee26.  if v6 == 0 then goto L4cee50;
  #L4cee2a.  if v4 == 0 then goto L4cee80;
  #L4cee2e.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b.d` @type ^`java.lang.Throwable` @kind object;
  #L4cee32.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` := v1 @kind boolean;
  #L4cee36.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.a:()V` @kind virtual;
  #L4cee3c.  if v3 == 0 then goto L4cee48;
  #L4cee40.  call `onError`(v5, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cee46.  goto L4cee4e;
  #L4cee48.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4cee4e.  return v1;
  #L4cee50.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b.d` @type ^`java.lang.Throwable` @kind object;
  #L4cee54.  if v3 == 0 then goto L4cee6a;
  #L4cee58.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` := v1 @kind boolean;
  #L4cee5c.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.a:()V` @kind virtual;
  #L4cee62.  call `onError`(v5, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cee68.  return v1;
  #L4cee6a.  if v4 == 0 then goto L4cee80;
  #L4cee6e.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` := v1 @kind boolean;
  #L4cee72.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.a:()V` @kind virtual;
  #L4cee78.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4cee7e.  return v1;
  #L4cee80.  v3:= 0I;
  #L4cee82.  return v3;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4cef30.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b`[] @kind object;
  #L4cef34.  v1:= length @variable v0;
  #L4cef36.  v2:= 0I;
  #L4cef38.  if v2 >= v1 then goto L4cef50;
  #L4cef3c.  v3:= v0[v2] @kind object;
  #L4cef40.  v3:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4cef44.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4cef4a.  v2:= v2 + 1;
  #L4cef4e.  goto L4cef38;
  #L4cef50.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cef64.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` @kind boolean;
  #L4cef68.  if v0 != 0 then goto L4cef8a;
  #L4cef6c.  v0:= 1I;
  #L4cef6e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` := v0 @kind boolean;
  #L4cef72.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.b:()V` @kind virtual;
  #L4cef78.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4cef7e.  v0:= temp;
  #L4cef80.  if v0 != 0 then goto L4cef8a;
  #L4cef84.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.d:()V` @kind virtual;
  #L4cef8a.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a` v20 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;

  #L4cef9c.  v7:= v20 @kind object;
  #L4cefa0.  call temp:= `getAndIncrement`(v20) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4cefa6.  v0:= temp;
  #L4cefa8.  if v0 == 0 then goto L4cefae;
  #L4cefac.  return @kind void;
  #L4cefae.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b`[] @kind object;
  #L4cefb2.  v8:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4cefb6.  v9:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.d` @type ^`java.lang.Object`[] @kind object;
  #L4cefba.  v10:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.e` @type ^`boolean` @kind boolean;
  #L4cefbe.  v11:= 1I;
  #L4cefc0.  v12:= 1I;
  #L4cefc2.  v13:= length @variable v0;
  #L4cefc4.  v14:= 0I;
  #L4cefc6.  v15:= 0I;
  #L4cefc8.  v16:= 0I;
  #L4cefcc.  v17:= 0I;
  #L4cefd0.  if v15 >= v13 then goto L4cf058;
  #L4cefd4.  v6:= v0[v15] @kind object;
  #L4cefd8.  v1:= v9[v17] @kind object;
  #L4cefdc.  if v1 != 0 then goto L4cf028;
  #L4cefe0.  v2:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b.c` @type ^`boolean` @kind boolean;
  #L4cefe4.  v1:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4cefe8.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4cefee.  v18:= temp @kind object;
  #L4ceff0.  if v18 != 0 then goto L4ceffa;
  #L4ceff4.  v19:= 1I;
  #L4ceff8.  goto L4ceffe;
  #L4ceffa.  v19:= 0I;
  #L4ceffe.  v1:= v20 @kind object;
  #L4cf002.  v3:= v19;
  #L4cf006.  v4:= v8 @kind object;
  #L4cf008.  v5:= v10;
  #L4cf00a.  call temp:= `c`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.c:(ZZLio/reactivex/rxjava3/core/Observer;ZLio/reactivex/rxjava3/internal/operators/observable/ObservableZip$b;)Z` @kind virtual;
  #L4cf010.  v1:= temp;
  #L4cf012.  if v1 == 0 then goto L4cf018;
  #L4cf016.  return @kind void;
  #L4cf018.  if v19 != 0 then goto L4cf022;
  #L4cf01c.  v9[v17]:= v18 @kind object;
  #L4cf020.  goto L4cf04e;
  #L4cf022.  v16:= v16 + 1;
  #L4cf026.  goto L4cf04e;
  #L4cf028.  v1:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b.c` @type ^`boolean` @kind boolean;
  #L4cf02c.  if v1 == 0 then goto L4cf04e;
  #L4cf030.  if v10 != 0 then goto L4cf04e;
  #L4cf034.  v1:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b.d` @type ^`java.lang.Throwable` @kind object;
  #L4cf038.  if v1 == 0 then goto L4cf04e;
  #L4cf03c.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` := v11 @kind boolean;
  #L4cf040.  call `a`(v20) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.a:()V` @kind virtual;
  #L4cf046.  call `onError`(v8, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cf04c.  return @kind void;
  #L4cf04e.  v17:= v17 + 1;
  #L4cf052.  v15:= v15 + 1;
  #L4cf056.  goto L4cefd0;
  #L4cf058.  if v16 == 0 then goto L4cf06c;
  #L4cf05c.  v1:= -v12 @kind int;
  #L4cf05e.  call temp:= `addAndGet`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4cf064.  v12:= temp;
  #L4cf066.  if v12 != 0 then goto L4cefc2;
  #L4cf06a.  return @kind void;
  #L4cf06c.  v1:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4cf070.  call temp:= `clone`(v9) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L4cf076.  v2:= temp @kind object;
  #L4cf078.  call temp:= `apply`(v1, v2) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4cf07e.  v1:= temp @kind object;
  #L4cf080.  v2:= "The zipper returned a null value" @kind object;
  #L4cf084.  call temp:= `requireNonNull`(v1, v2) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4cf08a.  call `onNext`(v8, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cf090.  v1:= 0I;
  #L4cf092.  call `fill`(v9, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L4cf098.  goto L4cefc2;
  #L4cf09a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cf09c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4cf0a2.  call `a`(v20) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.a:()V` @kind virtual;
  #L4cf0a8.  call `onError`(v8, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cf0ae.  return @kind void;
  catch `java.lang.Throwable` @[L4cf06c..L4cf08a] goto L4cf09a;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a` v5 @kind this, `io.reactivex.rxjava3.core.ObservableSource`[] v6 @kind object, `int` v7 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.f:([Lio/reactivex/rxjava3/core/ObservableSource;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4cf0cc.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b`[] @kind object;
  #L4cf0d0.  v1:= length @variable v0;
  #L4cf0d2.  v2:= 0I;
  #L4cf0d4.  v3:= 0I;
  #L4cf0d6.  if v3 >= v1 then goto L4cf0ee;
  #L4cf0da.  v4:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b`;
  #L4cf0de.  call `<init>`(v4, v5, v7) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;I)V` @kind direct;
  #L4cf0e4.  v0[v3]:= v4 @kind object;
  #L4cf0e8.  v3:= v3 + 1;
  #L4cf0ec.  goto L4cf0d6;
  #L4cf0ee.  call `lazySet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4cf0f4.  v7:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4cf0f8.  call `onSubscribe`(v7, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4cf0fe.  if v2 >= v1 then goto L4cf120;
  #L4cf102.  v7:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` @kind boolean;
  #L4cf106.  if v7 == 0 then goto L4cf10c;
  #L4cf10a.  return @kind void;
  #L4cf10c.  v7:= v6[v2] @kind object;
  #L4cf110.  v3:= v0[v2] @kind object;
  #L4cf114.  call `subscribe`(v7, v3) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4cf11a.  v2:= v2 + 1;
  #L4cf11e.  goto L4cf0fe;
  #L4cf120.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cee94.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` @kind boolean;
  #L4cee98.  return v0;
}
