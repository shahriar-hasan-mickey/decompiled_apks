record `io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b`[] `io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4b6110.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b6116.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4b611a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4b6120.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L4b6124.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v2 @kind object;
  #L4b6128.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b`[v3];
  #L4b612c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b`[] := v2 @kind object;
  #L4b6130.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a` v7 @kind this, `io.reactivex.rxjava3.core.ObservableSource`[] v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$a;.a:([Lio/reactivex/rxjava3/core/ObservableSource;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4b6190.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b`[] @kind object;
  #L4b6194.  v1:= length @variable v0;
  #L4b6196.  v2:= 0I;
  #L4b6198.  v3:= 0I;
  #L4b619a.  if v3 >= v1 then goto L4b61b8;
  #L4b619e.  v4:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b`;
  #L4b61a2.  v5:= v3 + 1;
  #L4b61a6.  v6:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b61aa.  call `<init>`(v4, v7, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$a;ILio/reactivex/rxjava3/core/Observer;)V` @kind direct;
  #L4b61b0.  v0[v3]:= v4 @kind object;
  #L4b61b4.  v3:= v5;
  #L4b61b6.  goto L4b619a;
  #L4b61b8.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4b61bc.  call `lazySet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4b61c2.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b61c6.  call `onSubscribe`(v3, v7) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4b61cc.  if v2 >= v1 then goto L4b61f6;
  #L4b61d0.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4b61d4.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4b61da.  v3:= temp;
  #L4b61dc.  if v3 == 0 then goto L4b61e2;
  #L4b61e0.  return @kind void;
  #L4b61e2.  v3:= v8[v2] @kind object;
  #L4b61e6.  v4:= v0[v2] @kind object;
  #L4b61ea.  call `subscribe`(v3, v4) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4b61f0.  v2:= v2 + 1;
  #L4b61f4.  goto L4b61cc;
  #L4b61f6.  return @kind void;
}
procedure `boolean` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a` v4 @kind this, `int` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$a;.b:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b60b8.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4b60bc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4b60c2.  v0:= temp;
  #L4b60c4.  v1:= 0I;
  #L4b60c6.  if v0 != 0 then goto L4b60fe;
  #L4b60ca.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4b60ce.  call temp:= `compareAndSet`(v0, v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4b60d4.  v0:= temp;
  #L4b60d6.  if v0 == 0 then goto L4b60fe;
  #L4b60da.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b`[] @kind object;
  #L4b60de.  v2:= length @variable v0;
  #L4b60e0.  if v1 >= v2 then goto L4b60fa;
  #L4b60e4.  v3:= v1 + 1;
  #L4b60e8.  if v3 == v5 then goto L4b60f6;
  #L4b60ec.  v1:= v0[v1] @kind object;
  #L4b60f0.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$b;.a:()V` @kind virtual;
  #L4b60f6.  v1:= v3;
  #L4b60f8.  goto L4b60e0;
  #L4b60fa.  v5:= 1I;
  #L4b60fc.  return v5;
  #L4b60fe.  return v1;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b6144.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4b6148.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4b614e.  v0:= temp;
  #L4b6150.  v1:= -1I;
  #L4b6152.  if v0 == v1 then goto L4b617c;
  #L4b6156.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4b615a.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4b6160.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b`[] @kind object;
  #L4b6164.  v1:= length @variable v0;
  #L4b6166.  v2:= 0I;
  #L4b6168.  if v2 >= v1 then goto L4b617c;
  #L4b616c.  v3:= v0[v2] @kind object;
  #L4b6170.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$b;.a:()V` @kind virtual;
  #L4b6176.  v2:= v2 + 1;
  #L4b617a.  goto L4b6168;
  #L4b617c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b608c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4b6090.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4b6096.  v0:= temp;
  #L4b6098.  v1:= -1I;
  #L4b609a.  if v0 != v1 then goto L4b60a2;
  #L4b609e.  v0:= 1I;
  #L4b60a0.  goto L4b60a4;
  #L4b60a2.  v0:= 0I;
  #L4b60a4.  return v0;
}
