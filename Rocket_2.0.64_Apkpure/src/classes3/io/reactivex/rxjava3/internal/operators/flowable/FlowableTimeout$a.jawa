record `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$c` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a` v0 @kind this, `long` v1 , `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$c` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$a;.<init>:(JLio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a3f64.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4a3f6a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a.b` @type ^`long` := v1 @kind wide;
  #L4a3f6e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$c` := v3 @kind object;
  #L4a3f72.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4a3f84.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4a3f8a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a3f3c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a3f42.  v0:= temp @kind object;
  #L4a3f44.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4a3f48.  if v0 != v1 then goto L4a3f50;
  #L4a3f4c.  v0:= 1I;
  #L4a3f4e.  goto L4a3f52;
  #L4a3f50.  v0:= 0I;
  #L4a3f52.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a3f9c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a3fa2.  v0:= temp @kind object;
  #L4a3fa4.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4a3fa8.  if v0 == v1 then goto L4a3fc0;
  #L4a3fac.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4a3fb2.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$c` @kind object;
  #L4a3fb6.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a.b` @type ^`long` @kind wide;
  #L4a3fba.  call `b`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$d;.b:(J)V` @kind interface;
  #L4a3fc0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a3fd4.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a3fda.  v0:= temp @kind object;
  #L4a3fdc.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4a3fe0.  if v0 == v1 then goto L4a3ffa;
  #L4a3fe4.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4a3fea.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$c` @kind object;
  #L4a3fee.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a.b` @type ^`long` @kind wide;
  #L4a3ff2.  call `a`(v0, v1, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$c;.a:(JLjava/lang/Throwable;)V` @kind interface;
  #L4a3ff8.  goto L4a4000;
  #L4a3ffa.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4a4000.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a4014.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a401a.  v3:= temp @kind object;
  #L4a401c.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L4a4020.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4a4024.  if v3 == v0 then goto L4a4042;
  #L4a4028.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a402e.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4a4034.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$c` @kind object;
  #L4a4038.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a.b` @type ^`long` @kind wide;
  #L4a403c.  call `b`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$d;.b:(J)V` @kind interface;
  #L4a4042.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a4054.  v0:= 9223372036854775807L;
  #L4a405e.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L4a4064.  return @kind void;
}
