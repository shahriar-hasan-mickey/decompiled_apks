record `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Observable` @kind class {
  `io.reactivex.rxjava3.observables.ConnectableObservable` `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` v7 @kind this, `io.reactivex.rxjava3.observables.ConnectableObservable` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;.<init>:(Lio/reactivex/rxjava3/observables/ConnectableObservable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4c5284.  v5:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4c5288.  v2:= 1I;
  #L4c528a.  v3:= 0L;
  #L4c528e.  v6:= 0I;
  #L4c5290.  v0:= v7 @kind object;
  #L4c5292.  v1:= v8 @kind object;
  #L4c5294.  call `<init>`(v0, v1, v2, v3, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;.<init>:(Lio/reactivex/rxjava3/observables/ConnectableObservable;IJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)V` @kind direct;
  #L4c529a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` v0 @kind this, `io.reactivex.rxjava3.observables.ConnectableObservable` v1 @kind object, `int` v2 , `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.rxjava3.core.Scheduler` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;.<init>:(Lio/reactivex/rxjava3/observables/ConnectableObservable;IJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4c52ac.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Observable;.<init>:()V` @kind direct;
  #L4c52b2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.a` @type ^`io.reactivex.rxjava3.observables.ConnectableObservable` := v1 @kind object;
  #L4c52b6.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.b` @type ^`int` := v2;
  #L4c52ba.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.c` @type ^`long` := v3 @kind wide;
  #L4c52be.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.d` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L4c52c2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.e` @type ^`io.reactivex.rxjava3.core.Scheduler` := v6 @kind object;
  #L4c52c6.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` v5 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;.d:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c52d8.  @monitorenter v5
  #L4c52da.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` @kind object;
  #L4c52de.  if v0 == 0 then goto L4c5352;
  #L4c52e2.  if v0 == v6 then goto L4c52e8;
  #L4c52e6.  goto L4c5352;
  #L4c52e8.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.c` @type ^`long` @kind wide;
  #L4c52ec.  v2:= 1L;
  #L4c52f0.  v0:= v0 - v2 @kind long;
  #L4c52f2.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.c` @type ^`long` := v0 @kind wide;
  #L4c52f6.  v2:= 0L;
  #L4c52fa.  v4:= lcmp(v0, v2);
  #L4c52fe.  if v4 != 0 then goto L4c534e;
  #L4c5302.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.d` @type ^`boolean` @kind boolean;
  #L4c5306.  if v0 != 0 then goto L4c530c;
  #L4c530a.  goto L4c534e;
  #L4c530c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.c` @type ^`long` @kind wide;
  #L4c5310.  v4:= lcmp(v0, v2);
  #L4c5314.  if v4 != 0 then goto L4c5322;
  #L4c5318.  call `f`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;.f:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$a;)V` @kind virtual;
  #L4c531e.  @monitorexit v5
  #L4c5320.  return @kind void;
  #L4c5322.  v0:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4c5326.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4c532c.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4c5330.  @monitorexit v5
  #L4c5332.  v1:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.e` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4c5336.  v2:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.c` @type ^`long` @kind wide;
  #L4c533a.  v4:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4c533e.  call temp:= `scheduleDirect`(v1, v6, v2, v4) @signature `Lio/reactivex/rxjava3/core/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4c5344.  v6:= temp @kind object;
  #L4c5346.  call temp:= `replace`(v0, v6) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c534c.  return @kind void;
  #L4c534e.  @monitorexit v5
  #L4c5350.  return @kind void;
  #L4c5352.  @monitorexit v5
  #L4c5354.  return @kind void;
  #L4c5356.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c5358.  @monitorexit v5
  #L4c535a.  throw v6;
  catch `java.lang.Throwable` @[L4c52da..L4c5332] goto L4c5356;
  catch `java.lang.Throwable` @[L4c534e..L4c535a] goto L4c5356;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` v6 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;.e:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4c5430.  @monitorenter v6
  #L4c5432.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` @kind object;
  #L4c5436.  if v0 != v7 then goto L4c5476;
  #L4c543a.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c543e.  v1:= 0I;
  #L4c5440.  if v0 == 0 then goto L4c544e;
  #L4c5444.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c544a.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v1 @kind object;
  #L4c544e.  v2:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.c` @type ^`long` @kind wide;
  #L4c5452.  v4:= 1L;
  #L4c5456.  v2:= v2 - v4 @kind long;
  #L4c5458.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.c` @type ^`long` := v2 @kind wide;
  #L4c545c.  v4:= 0L;
  #L4c5460.  v7:= lcmp(v2, v4);
  #L4c5464.  if v7 != 0 then goto L4c5476;
  #L4c5468.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` := v1 @kind object;
  #L4c546c.  v7:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.a` @type ^`io.reactivex.rxjava3.observables.ConnectableObservable` @kind object;
  #L4c5470.  call `reset`(v7) @signature `Lio/reactivex/rxjava3/observables/ConnectableObservable;.reset:()V` @kind virtual;
  #L4c5476.  @monitorexit v6
  #L4c5478.  return @kind void;
  #L4c547a.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c547c.  @monitorexit v6
  #L4c547e.  throw v7;
  catch `java.lang.Throwable` @[L4c5432..L4c547e] goto L4c547a;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` v5 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;.f:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c549c.  @monitorenter v5
  #L4c549e.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.c` @type ^`long` @kind wide;
  #L4c54a2.  v2:= 0L;
  #L4c54a6.  v4:= lcmp(v0, v2);
  #L4c54aa.  if v4 != 0 then goto L4c54e4;
  #L4c54ae.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` @kind object;
  #L4c54b2.  if v6 != v0 then goto L4c54e4;
  #L4c54b6.  v0:= 0I;
  #L4c54b8.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` := v0 @kind object;
  #L4c54bc.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c54c2.  v0:= temp @kind object;
  #L4c54c4.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4c54c8.  call temp:= `dispose`(v6) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c54ce.  if v0 != 0 then goto L4c54da;
  #L4c54d2.  v0:= 1I;
  #L4c54d4.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4c54d8.  goto L4c54e4;
  #L4c54da.  v6:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.a` @type ^`io.reactivex.rxjava3.observables.ConnectableObservable` @kind object;
  #L4c54de.  call `reset`(v6) @signature `Lio/reactivex/rxjava3/observables/ConnectableObservable;.reset:()V` @kind virtual;
  #L4c54e4.  @monitorexit v5
  #L4c54e6.  return @kind void;
  #L4c54e8.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c54ea.  @monitorexit v5
  #L4c54ec.  throw v6;
  catch `java.lang.Throwable` @[L4c549e..L4c54ec] goto L4c54e8;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` v7 @kind this, `io.reactivex.rxjava3.core.Observer` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;.subscribeActual:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4c5380.  @monitorenter v7
  #L4c5382.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` @kind object;
  #L4c5386.  if v0 != 0 then goto L4c5398;
  #L4c538a.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a`;
  #L4c538e.  call `<init>`(v0, v7) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;)V` @kind direct;
  #L4c5394.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` := v0 @kind object;
  #L4c5398.  v1:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.c` @type ^`long` @kind wide;
  #L4c539c.  v3:= 0L;
  #L4c53a0.  v5:= lcmp(v1, v3);
  #L4c53a4.  if v5 != 0 then goto L4c53b6;
  #L4c53a8.  v3:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c53ac.  if v3 == 0 then goto L4c53b6;
  #L4c53b0.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c53b6.  v3:= 1L;
  #L4c53ba.  v1:= v1 + v3 @kind long;
  #L4c53bc.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.c` @type ^`long` := v1 @kind wide;
  #L4c53c0.  v3:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.d` @type ^`boolean` @kind boolean;
  #L4c53c4.  v4:= 1I;
  #L4c53c6.  if v3 != 0 then goto L4c53de;
  #L4c53ca.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.b` @type ^`int`;
  #L4c53ce.  v5:= (`long`) v3 @kind i2l;
  #L4c53d0.  v3:= lcmp(v1, v5);
  #L4c53d4.  if v3 != 0 then goto L4c53de;
  #L4c53d8.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.d` @type ^`boolean` := v4 @kind boolean;
  #L4c53dc.  goto L4c53e0;
  #L4c53de.  v4:= 0I;
  #L4c53e0.  @monitorexit v7
  #L4c53e2.  v1:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.a` @type ^`io.reactivex.rxjava3.observables.ConnectableObservable` @kind object;
  #L4c53e6.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b`;
  #L4c53ea.  call `<init>`(v2, v8, v7, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$b;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$a;)V` @kind direct;
  #L4c53f0.  call `subscribe`(v1, v2) @signature `Lio/reactivex/rxjava3/core/Observable;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4c53f6.  if v4 == 0 then goto L4c5404;
  #L4c53fa.  v8:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.a` @type ^`io.reactivex.rxjava3.observables.ConnectableObservable` @kind object;
  #L4c53fe.  call `connect`(v8, v0) @signature `Lio/reactivex/rxjava3/observables/ConnectableObservable;.connect:(Lio/reactivex/rxjava3/functions/Consumer;)V` @kind virtual;
  #L4c5404.  return @kind void;
  #L4c5406.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c5408.  @monitorexit v7
  #L4c540a.  throw v8;
  catch `java.lang.Throwable` @[L4c5382..L4c53e2] goto L4c5406;
  catch `java.lang.Throwable` @[L4c5408..L4c540a] goto L4c5406;
}
