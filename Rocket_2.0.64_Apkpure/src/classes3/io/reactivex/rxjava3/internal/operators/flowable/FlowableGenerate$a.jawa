record `io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.rxjava3.core.Emitter` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.c` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.f` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.g` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v2 @kind object, `io.reactivex.rxjava3.functions.Consumer` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGenerate$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/BiFunction;Lio/reactivex/rxjava3/functions/Consumer;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L494c4c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L494c52.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L494c56.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v2 @kind object;
  #L494c5a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.c` @type ^`io.reactivex.rxjava3.functions.Consumer` := v3 @kind object;
  #L494c5e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` := v4 @kind object;
  #L494c62.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGenerate$a;.a:(Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L494cbc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.c` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L494cc0.  call `accept`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L494cc6.  goto L494cd6;
  #L494cc8.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L494cca.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L494cd0.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L494cd6.  return @kind void;
  catch `java.lang.Throwable` @[L494cbc..L494cc6] goto L494cc8;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGenerate$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L494c74.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.e` @type ^`boolean` @kind boolean;
  #L494c78.  if v0 != 0 then goto L494caa;
  #L494c7c.  v0:= 1I;
  #L494c7e.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.e` @type ^`boolean` := v0 @kind boolean;
  #L494c82.  v0:= 1L;
  #L494c86.  call temp:= `add`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L494c8c.  v0:= temp @kind wide;
  #L494c8e.  v2:= 0L;
  #L494c92.  v4:= lcmp(v0, v2);
  #L494c96.  if v4 != 0 then goto L494caa;
  #L494c9a.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` @kind object;
  #L494c9e.  v1:= 0I;
  #L494ca0.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` := v1 @kind object;
  #L494ca4.  call `a`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGenerate$a;.a:(Ljava/lang/Object;)V` @kind direct;
  #L494caa.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGenerate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L494cf4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.f` @type ^`boolean` @kind boolean;
  #L494cf8.  if v0 != 0 then goto L494d0c;
  #L494cfc.  v0:= 1I;
  #L494cfe.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.f` @type ^`boolean` := v0 @kind boolean;
  #L494d02.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L494d06.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L494d0c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGenerate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L494d20.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.f` @type ^`boolean` @kind boolean;
  #L494d24.  if v0 == 0 then goto L494d30;
  #L494d28.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L494d2e.  goto L494d50;
  #L494d30.  if v2 != 0 then goto L494d40;
  #L494d34.  v2:= "onError called with a null Throwable." @kind object;
  #L494d38.  call temp:= `createNullPointerException`(v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;` @kind static;
  #L494d3e.  v2:= temp @kind object;
  #L494d40.  v0:= 1I;
  #L494d42.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.f` @type ^`boolean` := v0 @kind boolean;
  #L494d46.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L494d4a.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L494d50.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGenerate$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L494d64.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.f` @type ^`boolean` @kind boolean;
  #L494d68.  if v0 != 0 then goto L494db2;
  #L494d6c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.g` @type ^`boolean` @kind boolean;
  #L494d70.  if v0 == 0 then goto L494d8a;
  #L494d74.  v2:= new `java.lang.IllegalStateException`;
  #L494d78.  v0:= "onNext already called in this generate turn" @kind object;
  #L494d7c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L494d82.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGenerate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L494d88.  goto L494db2;
  #L494d8a.  if v2 != 0 then goto L494da2;
  #L494d8e.  v2:= "onNext called with a null value." @kind object;
  #L494d92.  call temp:= `createNullPointerException`(v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;` @kind static;
  #L494d98.  v2:= temp @kind object;
  #L494d9a.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGenerate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L494da0.  goto L494db2;
  #L494da2.  v0:= 1I;
  #L494da4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.g` @type ^`boolean` := v0 @kind boolean;
  #L494da8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L494dac.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L494db2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a` v9 @kind this, `long` v10 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGenerate$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L494dc4.  call temp:= `validate`(v10) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L494dca.  v0:= temp;
  #L494dcc.  if v0 != 0 then goto L494dd2;
  #L494dd0.  return @kind void;
  #L494dd2.  call temp:= `add`(v9, v10) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L494dd8.  v0:= temp @kind wide;
  #L494dda.  v2:= 0L;
  #L494dde.  v4:= lcmp(v0, v2);
  #L494de2.  if v4 == 0 then goto L494de8;
  #L494de6.  return @kind void;
  #L494de8.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` @kind object;
  #L494dec.  v1:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L494df0.  v4:= v2 @kind wide;
  #L494df2.  v6:= lcmp(v4, v10);
  #L494df6.  if v6 == 0 then goto L494e5e;
  #L494dfa.  v6:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.e` @type ^`boolean` @kind boolean;
  #L494dfe.  v7:= 0I;
  #L494e00.  if v6 == 0 then goto L494e10;
  #L494e04.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` := v7 @kind object;
  #L494e08.  call `a`(v9, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGenerate$a;.a:(Ljava/lang/Object;)V` @kind direct;
  #L494e0e.  return @kind void;
  #L494e10.  v6:= 0I;
  #L494e12.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.g` @type ^`boolean` := v6 @kind boolean;
  #L494e16.  v6:= 1I;
  #L494e18.  call temp:= `apply`(v1, v0, v9) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L494e1e.  v0:= temp @kind object;
  #L494e20.  v8:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.f` @type ^`boolean` @kind boolean;
  #L494e24.  if v8 == 0 then goto L494e38;
  #L494e28.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.e` @type ^`boolean` := v6 @kind boolean;
  #L494e2c.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` := v7 @kind object;
  #L494e30.  call `a`(v9, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGenerate$a;.a:(Ljava/lang/Object;)V` @kind direct;
  #L494e36.  return @kind void;
  #L494e38.  v6:= 1L;
  #L494e3c.  v4:= v4 + v6 @kind long;
  #L494e3e.  goto L494df2;
  #L494e40.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L494e42.  call `throwIfFatal`(v10) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L494e48.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.e` @type ^`boolean` := v6 @kind boolean;
  #L494e4c.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` := v7 @kind object;
  #L494e50.  call `onError`(v9, v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGenerate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L494e56.  call `a`(v9, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGenerate$a;.a:(Ljava/lang/Object;)V` @kind direct;
  #L494e5c.  return @kind void;
  #L494e5e.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L494e64.  v10:= temp @kind wide;
  #L494e66.  v6:= lcmp(v4, v10);
  #L494e6a.  if v6 != 0 then goto L494df2;
  #L494e6e.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` := v0 @kind object;
  #L494e72.  v10:= -v4 @kind long;
  #L494e74.  call temp:= `addAndGet`(v9, v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L494e7a.  v10:= temp @kind wide;
  #L494e7c.  v4:= lcmp(v10, v2);
  #L494e80.  if v4 != 0 then goto L494df0;
  #L494e84.  return @kind void;
  catch `java.lang.Throwable` @[L494e18..L494e20] goto L494e40;
}
