record `io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.a` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.d` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.rxjava3.functions.Consumer` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUsing$a;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Lio/reactivex/rxjava3/functions/Consumer;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a53ac.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4a53b2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4a53b6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.b` @type ^`java.lang.Object` := v2 @kind object;
  #L4a53ba.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.c` @type ^`io.reactivex.rxjava3.functions.Consumer` := v3 @kind object;
  #L4a53be.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.d` @type ^`boolean` := v4 @kind boolean;
  #L4a53c2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUsing$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4a5420.  v0:= 0I;
  #L4a5422.  v1:= 1I;
  #L4a5424.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4a542a.  v0:= temp;
  #L4a542c.  if v0 == 0 then goto L4a544e;
  #L4a5430.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.c` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4a5434.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.b` @type ^`java.lang.Object` @kind object;
  #L4a5438.  call `accept`(v0, v1) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4a543e.  goto L4a544e;
  #L4a5440.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a5442.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4a5448.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4a544e.  return @kind void;
  catch `java.lang.Throwable` @[L4a5430..L4a543e] goto L4a5440;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUsing$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a53d4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.d` @type ^`boolean` @kind boolean;
  #L4a53d8.  if v0 == 0 then goto L4a53f6;
  #L4a53dc.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUsing$a;.a:()V` @kind virtual;
  #L4a53e2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a53e6.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a53ec.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4a53f0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4a53f4.  goto L4a540e;
  #L4a53f6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a53fa.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a5400.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4a5404.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4a5408.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUsing$a;.a:()V` @kind virtual;
  #L4a540e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUsing$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a546c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.d` @type ^`boolean` @kind boolean;
  #L4a5470.  if v0 == 0 then goto L4a54be;
  #L4a5474.  v0:= 0I;
  #L4a5476.  v1:= 1I;
  #L4a5478.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4a547e.  v0:= temp;
  #L4a5480.  if v0 == 0 then goto L4a54a8;
  #L4a5484.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.c` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4a5488.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.b` @type ^`java.lang.Object` @kind object;
  #L4a548c.  call `accept`(v0, v1) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4a5492.  goto L4a54a8;
  #L4a5494.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a5496.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4a549c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a54a0.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a54a6.  return @kind void;
  #L4a54a8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a54ac.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a54b2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a54b6.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a54bc.  goto L4a54d8;
  #L4a54be.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a54c2.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a54c8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a54cc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a54d2.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUsing$a;.a:()V` @kind virtual;
  #L4a54d8.  return @kind void;
  catch `java.lang.Throwable` @[L4a5484..L4a5492] goto L4a5494;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUsing$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4a54f8.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.d` @type ^`boolean` @kind boolean;
  #L4a54fc.  if v0 == 0 then goto L4a5568;
  #L4a5500.  v0:= 0I;
  #L4a5502.  v1:= 0I;
  #L4a5504.  v2:= 1I;
  #L4a5506.  call temp:= `compareAndSet`(v6, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4a550c.  v3:= temp;
  #L4a550e.  if v3 == 0 then goto L4a552a;
  #L4a5512.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.c` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4a5516.  v4:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.b` @type ^`java.lang.Object` @kind object;
  #L4a551a.  call `accept`(v3, v4) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4a5520.  goto L4a552a;
  #L4a5522.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a5524.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4a552a.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a552e.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a5534.  if v0 == 0 then goto L4a555c;
  #L4a5538.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a553c.  v4:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L4a5540.  v5:= 2I;
  #L4a5542.  v5:= new `java.lang.Throwable`[v5];
  #L4a5546.  v5[v1]:= v7 @kind object;
  #L4a554a.  v5[v2]:= v0 @kind object;
  #L4a554e.  call `<init>`(v4, v5) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4a5554.  call `onError`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a555a.  goto L4a5582;
  #L4a555c.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a5560.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a5566.  goto L4a5582;
  #L4a5568.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a556c.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a5572.  v7:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a5576.  call `cancel`(v7) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a557c.  call `a`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUsing$a;.a:()V` @kind virtual;
  #L4a5582.  return @kind void;
  catch `java.lang.Throwable` @[L4a5512..L4a5520] goto L4a5522;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUsing$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a55a0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a55a4.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a55aa.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUsing$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a55bc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a55c0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4a55c6.  v0:= temp;
  #L4a55c8.  if v0 == 0 then goto L4a55da;
  #L4a55cc.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4a55d0.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a55d4.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4a55da.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUsing$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a55ec.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a55f0.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a55f6.  return @kind void;
}
