record `io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.SingleObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.SingleObserver` `io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval$a.a` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval$a.c` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval$a` v0 @kind this, `io.reactivex.rxjava3.core.SingleObserver` v1 @kind object, `java.util.concurrent.TimeUnit` v2 @kind object, `io.reactivex.rxjava3.core.Scheduler` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTimeInterval$a;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;Ljava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d7c14.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4d7c1a.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` := v1 @kind object;
  #L4d7c1e.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval$a.b` @type ^`java.util.concurrent.TimeUnit` := v2 @kind object;
  #L4d7c22.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval$a.c` @type ^`io.reactivex.rxjava3.core.Scheduler` := v3 @kind object;
  #L4d7c26.  if v4 == 0 then goto L4d7c34;
  #L4d7c2a.  call temp:= `now`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4d7c30.  v1:= temp @kind wide;
  #L4d7c32.  goto L4d7c38;
  #L4d7c34.  v1:= 0L;
  #L4d7c38.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval$a.d` @type ^`long` := v1 @kind wide;
  #L4d7c3c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTimeInterval$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d7c50.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval$a.e` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4d7c54.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d7c5a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTimeInterval$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d7bf4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval$a.e` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4d7bf8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4d7bfe.  v0:= temp;
  #L4d7c00.  return v0;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTimeInterval$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d7c6c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d7c70.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d7c76.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTimeInterval$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d7c88.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval$a.e` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4d7c8c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4d7c92.  v0:= temp;
  #L4d7c94.  if v0 == 0 then goto L4d7ca6;
  #L4d7c98.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval$a.e` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4d7c9c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d7ca0.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4d7ca6.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval$a` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTimeInterval$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4d7cb8.  v0:= v6.`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d7cbc.  v1:= new `io.reactivex.rxjava3.schedulers.Timed`;
  #L4d7cc0.  v2:= v6.`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval$a.c` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4d7cc4.  v3:= v6.`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval$a.b` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4d7cc8.  call temp:= `now`(v2, v3) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4d7cce.  v2:= temp @kind wide;
  #L4d7cd0.  v4:= v6.`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval$a.d` @type ^`long` @kind wide;
  #L4d7cd4.  v2:= v2 - v4 @kind long;
  #L4d7cd6.  v4:= v6.`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval$a.b` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4d7cda.  call `<init>`(v1, v7, v2, v4) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.<init>:(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L4d7ce0.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4d7ce6.  return @kind void;
}
