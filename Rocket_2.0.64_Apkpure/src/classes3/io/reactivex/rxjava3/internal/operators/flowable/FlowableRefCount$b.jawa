record `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.d` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` v2 @kind object, `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49d1d0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L49d1d6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L49d1da.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` := v2 @kind object;
  #L49d1de.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` := v3 @kind object;
  #L49d1e2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49d1f4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49d1f8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L49d1fe.  v0:= 0I;
  #L49d200.  v1:= 1I;
  #L49d202.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L49d208.  v0:= temp;
  #L49d20a.  if v0 == 0 then goto L49d21c;
  #L49d20e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` @kind object;
  #L49d212.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` @kind object;
  #L49d216.  call `e`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;.e:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;)V` @kind virtual;
  #L49d21c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49d230.  v0:= 0I;
  #L49d232.  v1:= 1I;
  #L49d234.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L49d23a.  v0:= temp;
  #L49d23c.  if v0 == 0 then goto L49d258;
  #L49d240.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` @kind object;
  #L49d244.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` @kind object;
  #L49d248.  call `f`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;.f:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;)V` @kind virtual;
  #L49d24e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49d252.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49d258.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49d26c.  v0:= 0I;
  #L49d26e.  v1:= 1I;
  #L49d270.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L49d276.  v0:= temp;
  #L49d278.  if v0 == 0 then goto L49d296;
  #L49d27c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` @kind object;
  #L49d280.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` @kind object;
  #L49d284.  call `f`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;.f:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;)V` @kind virtual;
  #L49d28a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49d28e.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49d294.  goto L49d29c;
  #L49d296.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L49d29c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49d2b0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49d2b4.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L49d2ba.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49d2cc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49d2d0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L49d2d6.  v0:= temp;
  #L49d2d8.  if v0 == 0 then goto L49d2ea;
  #L49d2dc.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.d` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L49d2e0.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49d2e4.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L49d2ea.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49d2fc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49d300.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L49d306.  return @kind void;
}
