record `io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface {
  `io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a` `io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.d` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b` v0 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a` v1 @kind object, `int` v2 , `io.reactivex.rxjava3.core.Observer` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$a;ILio/reactivex/rxjava3/core/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b6208.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b620e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a` := v1 @kind object;
  #L4b6212.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.b` @type ^`int` := v2;
  #L4b6216.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.c` @type ^`io.reactivex.rxjava3.core.Observer` := v3 @kind object;
  #L4b621a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$b;.a:()V` @AccessFlag PUBLIC {
    temp;

  #L4b622c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b6232.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b6244.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.d` @type ^`boolean` @kind boolean;
  #L4b6248.  if v0 == 0 then goto L4b6258;
  #L4b624c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.c` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b6250.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4b6256.  goto L4b627c;
  #L4b6258.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a` @kind object;
  #L4b625c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.b` @type ^`int`;
  #L4b6260.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$a;.b:(I)Z` @kind virtual;
  #L4b6266.  v0:= temp;
  #L4b6268.  if v0 == 0 then goto L4b627c;
  #L4b626c.  v0:= 1I;
  #L4b626e.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.d` @type ^`boolean` := v0 @kind boolean;
  #L4b6272.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.c` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b6276.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4b627c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b6290.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.d` @type ^`boolean` @kind boolean;
  #L4b6294.  if v0 == 0 then goto L4b62a4;
  #L4b6298.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.c` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b629c.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b62a2.  goto L4b62d0;
  #L4b62a4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a` @kind object;
  #L4b62a8.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.b` @type ^`int`;
  #L4b62ac.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$a;.b:(I)Z` @kind virtual;
  #L4b62b2.  v0:= temp;
  #L4b62b4.  if v0 == 0 then goto L4b62ca;
  #L4b62b8.  v0:= 1I;
  #L4b62ba.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.d` @type ^`boolean` := v0 @kind boolean;
  #L4b62be.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.c` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b62c2.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b62c8.  goto L4b62d0;
  #L4b62ca.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b62d0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b62e4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.d` @type ^`boolean` @kind boolean;
  #L4b62e8.  if v0 == 0 then goto L4b62f8;
  #L4b62ec.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.c` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b62f0.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b62f6.  goto L4b6330;
  #L4b62f8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a` @kind object;
  #L4b62fc.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.b` @type ^`int`;
  #L4b6300.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$a;.b:(I)Z` @kind virtual;
  #L4b6306.  v0:= temp;
  #L4b6308.  if v0 == 0 then goto L4b631e;
  #L4b630c.  v0:= 1I;
  #L4b630e.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.d` @type ^`boolean` := v0 @kind boolean;
  #L4b6312.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.c` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b6316.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b631c.  goto L4b6330;
  #L4b631e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b6324.  v3:= temp @kind object;
  #L4b6326.  v3:= (`io.reactivex.rxjava3.disposables.Disposable`) v3 @kind object;
  #L4b632a.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b6330.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4b6344.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b634a.  return @kind void;
}
