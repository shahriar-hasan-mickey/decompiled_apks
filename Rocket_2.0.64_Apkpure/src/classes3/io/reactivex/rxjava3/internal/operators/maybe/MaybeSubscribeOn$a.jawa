record `io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeSubscribeOn$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4af0e0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4af0e6.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn$a.b` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4af0ea.  v1:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4af0ee.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4af0f4.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn$a.a` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L4af0f8.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeSubscribeOn$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4af10c.  call temp:= `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4af112.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn$a.a` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4af116.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4af11c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeSubscribeOn$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4af0b8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4af0be.  v0:= temp @kind object;
  #L4af0c0.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4af0c4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4af0ca.  v0:= temp;
  #L4af0cc.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeSubscribeOn$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4af130.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn$a.b` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4af134.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4af13a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeSubscribeOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4af14c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn$a.b` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4af150.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4af156.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeSubscribeOn$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4af168.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4af16e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeSubscribeOn$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4af180.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn$a.b` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4af184.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4af18a.  return @kind void;
}
