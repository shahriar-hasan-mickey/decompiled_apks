record `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.rxjava3.core.SingleObserver` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.d` @AccessFlag ;
  `java.util.Iterator` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.f` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.g` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d5e0c.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L4d5e12.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4d5e16.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4d5e1a.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4d5e1e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4d5e24.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4d5e28.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d5e3c.  v0:= 1I;
  #L4d5e3e.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.f` @type ^`boolean` := v0 @kind boolean;
  #L4d5e42.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4d5e46.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d5e4c.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4d5e50.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4d5e54.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d5e68.  v0:= 0I;
  #L4d5e6a.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` := v0 @kind object;
  #L4d5e6e.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a` v11 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4d5e80.  call temp:= `getAndIncrement`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d5e86.  v0:= temp;
  #L4d5e88.  if v0 == 0 then goto L4d5e8e;
  #L4d5e8c.  return @kind void;
  #L4d5e8e.  v0:= v11.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d5e92.  v1:= v11.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L4d5e96.  v2:= v11.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.g` @type ^`boolean` @kind boolean;
  #L4d5e9a.  if v2 == 0 then goto L4d5eb2;
  #L4d5e9e.  if v1 == 0 then goto L4d5eb2;
  #L4d5ea2.  v1:= 0I;
  #L4d5ea4.  call `onNext`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d5eaa.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d5eb0.  return @kind void;
  #L4d5eb2.  v2:= 1I;
  #L4d5eb4.  if v1 == 0 then goto L4d5f64;
  #L4d5eb8.  v3:= v11.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d5ebc.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d5ec2.  v3:= temp @kind wide;
  #L4d5ec4.  v5:= 9223372036854775807L;
  #L4d5ece.  v7:= lcmp(v3, v5);
  #L4d5ed2.  if v7 != 0 then goto L4d5ede;
  #L4d5ed6.  call `e`(v11, v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.e:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @kind virtual;
  #L4d5edc.  return @kind void;
  #L4d5ede.  v5:= 0L;
  #L4d5ee2.  v7:= v5 @kind wide;
  #L4d5ee4.  v9:= lcmp(v7, v3);
  #L4d5ee8.  if v9 == 0 then goto L4d5f52;
  #L4d5eec.  v9:= v11.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L4d5ef0.  if v9 == 0 then goto L4d5ef6;
  #L4d5ef4.  return @kind void;
  #L4d5ef6.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4d5efc.  v9:= temp @kind object;
  #L4d5efe.  v10:= "The iterator returned a null value" @kind object;
  #L4d5f02.  call temp:= `requireNonNull`(v9, v10) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4d5f08.  call `onNext`(v0, v9) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d5f0e.  v9:= v11.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L4d5f12.  if v9 == 0 then goto L4d5f18;
  #L4d5f16.  return @kind void;
  #L4d5f18.  v9:= 1L;
  #L4d5f1c.  v7:= v7 + v9 @kind long;
  #L4d5f1e.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4d5f24.  v9:= temp;
  #L4d5f26.  if v9 != 0 then goto L4d5ee4;
  #L4d5f2a.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d5f30.  return @kind void;
  #L4d5f32.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d5f34.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d5f3a.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d5f40.  return @kind void;
  #L4d5f42.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d5f44.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d5f4a.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d5f50.  return @kind void;
  #L4d5f52.  v3:= lcmp(v7, v5);
  #L4d5f56.  if v3 == 0 then goto L4d5f64;
  #L4d5f5a.  v3:= v11.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d5f5e.  call temp:= `produced`(v3, v7) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4d5f64.  v2:= -v2 @kind int;
  #L4d5f66.  call temp:= `addAndGet`(v11, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4d5f6c.  v2:= temp;
  #L4d5f6e.  if v2 != 0 then goto L4d5f74;
  #L4d5f72.  return @kind void;
  #L4d5f74.  if v1 != 0 then goto L4d5eb4;
  #L4d5f78.  v1:= v11.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L4d5f7c.  goto L4d5eb4;
  catch `java.lang.Throwable` @[L4d5ef6..L4d5f08] goto L4d5f42;
  catch `java.lang.Throwable` @[L4d5f1e..L4d5f26] goto L4d5f32;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `java.util.Iterator` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.e:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @AccessFlag  {
    temp;
    v0;

  #L4d5fa8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L4d5fac.  if v0 == 0 then goto L4d5fb2;
  #L4d5fb0.  return @kind void;
  #L4d5fb2.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4d5fb8.  v0:= temp @kind object;
  #L4d5fba.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d5fc0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L4d5fc4.  if v0 == 0 then goto L4d5fca;
  #L4d5fc8.  return @kind void;
  #L4d5fca.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4d5fd0.  v0:= temp;
  #L4d5fd2.  if v0 != 0 then goto L4d5fa8;
  #L4d5fd6.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d5fdc.  return @kind void;
  #L4d5fde.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d5fe0.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d5fe6.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d5fec.  return @kind void;
  #L4d5fee.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d5ff0.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d5ff6.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d5ffc.  return @kind void;
  catch `java.lang.Throwable` @[L4d5fb2..L4d5fba] goto L4d5fee;
  catch `java.lang.Throwable` @[L4d5fca..L4d5fd2] goto L4d5fde;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d5d88.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L4d5d8c.  if v0 != 0 then goto L4d5d94;
  #L4d5d90.  v0:= 1I;
  #L4d5d92.  goto L4d5d96;
  #L4d5d94.  v0:= 0I;
  #L4d5d96.  return v0;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d6028.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4d602c.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4d6030.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d6034.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d603a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d604c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4d6050.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4d6056.  v0:= temp;
  #L4d6058.  if v0 == 0 then goto L4d606a;
  #L4d605c.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4d6060.  v2:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d6064.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d606a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d607c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4d6080.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4d6086.  v2:= temp @kind object;
  #L4d6088.  v2:= (`java.lang.Iterable`) v2 @kind object;
  #L4d608c.  call temp:= `iterator`(v2) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4d6092.  v2:= temp @kind object;
  #L4d6094.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4d609a.  v0:= temp;
  #L4d609c.  if v0 != 0 then goto L4d60ac;
  #L4d60a0.  v2:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d60a4.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d60aa.  return @kind void;
  #L4d60ac.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` := v2 @kind object;
  #L4d60b0.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.drain:()V` @kind virtual;
  #L4d60b6.  return @kind void;
  #L4d60b8.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d60ba.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d60c0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d60c4.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d60ca.  return @kind void;
  catch `java.lang.Throwable` @[L4d607c..L4d609c] goto L4d60b8;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4d5dcc.  v0:= v4.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L4d5dd0.  v1:= 0I;
  #L4d5dd2.  if v0 == 0 then goto L4d5dfa;
  #L4d5dd6.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4d5ddc.  v2:= temp @kind object;
  #L4d5dde.  v3:= "The iterator returned a null value" @kind object;
  #L4d5de2.  call temp:= `requireNonNull`(v2, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4d5de8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4d5dee.  v0:= temp;
  #L4d5df0.  if v0 != 0 then goto L4d5df8;
  #L4d5df4.  v4.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` := v1 @kind object;
  #L4d5df8.  return v2 @kind object;
  #L4d5dfa.  return v1 @kind object;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d60e8.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4d60ee.  v0:= temp;
  #L4d60f0.  if v0 == 0 then goto L4d6104;
  #L4d60f4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d60f8.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4d60fe.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.drain:()V` @kind virtual;
  #L4d6104.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d5da8.  v0:= 2I;
  #L4d5daa.  v2:= v2 ^& v0 @kind int;
  #L4d5dac.  if v2 == 0 then goto L4d5db8;
  #L4d5db0.  v2:= 1I;
  #L4d5db2.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.g` @type ^`boolean` := v2 @kind boolean;
  #L4d5db6.  return v0;
  #L4d5db8.  v2:= 0I;
  #L4d5dba.  return v2;
}
