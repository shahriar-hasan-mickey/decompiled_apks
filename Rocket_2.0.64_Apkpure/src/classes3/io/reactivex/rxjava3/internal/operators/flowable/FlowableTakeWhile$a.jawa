record `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Predicate` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeWhile$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a35f0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a35f6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4a35fa.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.b` @type ^`io.reactivex.rxjava3.functions.Predicate` := v2 @kind object;
  #L4a35fe.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeWhile$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a3610.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a3614.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a361a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeWhile$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a362c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.d` @type ^`boolean` @kind boolean;
  #L4a3630.  if v0 == 0 then goto L4a3636;
  #L4a3634.  return @kind void;
  #L4a3636.  v0:= 1I;
  #L4a3638.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4a363c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a3640.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a3646.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeWhile$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a3658.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.d` @type ^`boolean` @kind boolean;
  #L4a365c.  if v0 == 0 then goto L4a3668;
  #L4a3660.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4a3666.  return @kind void;
  #L4a3668.  v0:= 1I;
  #L4a366a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4a366e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a3672.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a3678.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeWhile$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a368c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.d` @type ^`boolean` @kind boolean;
  #L4a3690.  if v0 == 0 then goto L4a3696;
  #L4a3694.  return @kind void;
  #L4a3696.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.b` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L4a369a.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4a36a0.  v0:= temp;
  #L4a36a2.  if v0 != 0 then goto L4a36c2;
  #L4a36a6.  v2:= 1I;
  #L4a36a8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.d` @type ^`boolean` := v2 @kind boolean;
  #L4a36ac.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a36b0.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a36b6.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a36ba.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a36c0.  return @kind void;
  #L4a36c2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a36c6.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a36cc.  return @kind void;
  #L4a36ce.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a36d0.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4a36d6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a36da.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a36e0.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeWhile$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a36e6.  return @kind void;
  catch `java.lang.Throwable` @[L4a3696..L4a36a2] goto L4a36ce;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeWhile$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a3704.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a3708.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4a370e.  v0:= temp;
  #L4a3710.  if v0 == 0 then goto L4a3722;
  #L4a3714.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4a3718.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a371c.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4a3722.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeWhile$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a3734.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a3738.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a373e.  return @kind void;
}
