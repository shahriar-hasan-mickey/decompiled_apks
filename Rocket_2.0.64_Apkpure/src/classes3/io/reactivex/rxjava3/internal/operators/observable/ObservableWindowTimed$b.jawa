record `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a` @kind class, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.m` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.n` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.o` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.p` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.q` @AccessFlag ;
  `io.reactivex.rxjava3.subjects.UnicastSubject` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.r` @AccessFlag ;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.s` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b` v6 @kind this, `io.reactivex.rxjava3.core.Observer` v7 @kind object, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.rxjava3.core.Scheduler` v11 @kind object, `int` v12 , `long` v13 , `boolean` v15 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b;.<init>:(Lio/reactivex/rxjava3/core/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;IJZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4cdbcc.  v0:= v6 @kind object;
  #L4cdbce.  v1:= v7 @kind object;
  #L4cdbd0.  v2:= v8 @kind wide;
  #L4cdbd2.  v4:= v10 @kind object;
  #L4cdbd4.  v5:= v12;
  #L4cdbd6.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;JLjava/util/concurrent/TimeUnit;I)V` @kind direct;
  #L4cdbdc.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.m` @type ^`io.reactivex.rxjava3.core.Scheduler` := v11 @kind object;
  #L4cdbe0.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.o` @type ^`long` := v13 @kind wide;
  #L4cdbe4.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.n` @type ^`boolean` := v15 @kind boolean;
  #L4cdbe8.  if v15 == 0 then goto L4cdbfa;
  #L4cdbec.  call temp:= `createWorker`(v11) @signature `Lio/reactivex/rxjava3/core/Scheduler;.createWorker:()Lio/reactivex/rxjava3/core/Scheduler$Worker;` @kind virtual;
  #L4cdbf2.  v7:= temp @kind object;
  #L4cdbf4.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.p` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v7 @kind object;
  #L4cdbf8.  goto L4cdc00;
  #L4cdbfa.  v7:= 0I;
  #L4cdbfc.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.p` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v7 @kind object;
  #L4cdc00.  v7:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4cdc04.  call `<init>`(v7) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4cdc0a.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.s` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v7 @kind object;
  #L4cdc0e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4cdc44.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.s` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4cdc48.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4cdc4e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.p` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4cdc52.  if v0 == 0 then goto L4cdc5c;
  #L4cdc56.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4cdc5c.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b` v11 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4cdc70.  v0:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4cdc74.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4cdc7a.  v0:= temp;
  #L4cdc7c.  if v0 != 0 then goto L4cdd20;
  #L4cdc80.  v0:= 1L;
  #L4cdc84.  v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`long` := v0 @kind wide;
  #L4cdc88.  v2:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4cdc8c.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4cdc92.  v2:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.e` @type ^`int`;
  #L4cdc96.  call temp:= `create`(v2, v11) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @kind static;
  #L4cdc9c.  v2:= temp @kind object;
  #L4cdc9e.  v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.r` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v2 @kind object;
  #L4cdca2.  v3:= new `io.reactivex.rxjava3.internal.operators.observable.b`;
  #L4cdca6.  call `<init>`(v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.<init>:(Lio/reactivex/rxjava3/subjects/Subject;)V` @kind direct;
  #L4cdcac.  v2:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4cdcb0.  call `onNext`(v2, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cdcb6.  v5:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b$a`;
  #L4cdcba.  call `<init>`(v5, v11, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b;J)V` @kind direct;
  #L4cdcc0.  v0:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.n` @type ^`boolean` @kind boolean;
  #L4cdcc4.  if v0 == 0 then goto L4cdcea;
  #L4cdcc8.  v0:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.s` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4cdccc.  v4:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.p` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4cdcd0.  v8:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.c` @type ^`long` @kind wide;
  #L4cdcd4.  v10:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4cdcd8.  v6:= v8 @kind wide;
  #L4cdcda.  call temp:= `schedulePeriodically`(v4, v5, v6, v8, v10) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4cdce0.  v1:= temp @kind object;
  #L4cdce2.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4cdce8.  goto L4cdd0a;
  #L4cdcea.  v0:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.s` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4cdcee.  v4:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.m` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4cdcf2.  v8:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.c` @type ^`long` @kind wide;
  #L4cdcf6.  v10:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4cdcfa.  v6:= v8 @kind wide;
  #L4cdcfc.  call temp:= `schedulePeriodicallyDirect`(v4, v5, v6, v8, v10) @signature `Lio/reactivex/rxjava3/core/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4cdd02.  v1:= temp @kind object;
  #L4cdd04.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4cdd0a.  call temp:= `d`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.d:()Z` @kind virtual;
  #L4cdd10.  v0:= temp;
  #L4cdd12.  if v0 == 0 then goto L4cdd20;
  #L4cdd16.  v0:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.r` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` @kind object;
  #L4cdd1a.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4cdd20.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b` v12 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4cdd34.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4cdd3a.  v0:= temp;
  #L4cdd3c.  if v0 == 0 then goto L4cdd42;
  #L4cdd40.  return @kind void;
  #L4cdd42.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4cdd46.  v1:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4cdd4a.  v2:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.r` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` @kind object;
  #L4cdd4e.  v3:= 1I;
  #L4cdd50.  v4:= 1I;
  #L4cdd52.  v5:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.k` @type ^`boolean` @kind boolean;
  #L4cdd56.  v6:= 0I;
  #L4cdd58.  if v5 == 0 then goto L4cdd6a;
  #L4cdd5c.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4cdd62.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.r` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v6 @kind object;
  #L4cdd66.  v2:= v6 @kind object;
  #L4cdd68.  goto L4cde2c;
  #L4cdd6a.  v5:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.g` @type ^`boolean` @kind boolean;
  #L4cdd6e.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4cdd74.  v6:= temp @kind object;
  #L4cdd76.  if v6 != 0 then goto L4cdd7e;
  #L4cdd7a.  v7:= 1I;
  #L4cdd7c.  goto L4cdd80;
  #L4cdd7e.  v7:= 0I;
  #L4cdd80.  if v5 == 0 then goto L4cddbe;
  #L4cdd84.  if v7 == 0 then goto L4cddbe;
  #L4cdd88.  v5:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.h` @type ^`java.lang.Throwable` @kind object;
  #L4cdd8c.  if v5 == 0 then goto L4cdda2;
  #L4cdd90.  if v2 == 0 then goto L4cdd9a;
  #L4cdd94.  call `onError`(v2, v5) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4cdd9a.  call `onError`(v1, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cdda0.  goto L4cddb2;
  #L4cdda2.  if v2 == 0 then goto L4cddac;
  #L4cdda6.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4cddac.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4cddb2.  call `a`(v12) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b;.a:()V` @kind virtual;
  #L4cddb8.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.k` @type ^`boolean` := v3 @kind boolean;
  #L4cddbc.  goto L4cdd52;
  #L4cddbe.  if v7 != 0 then goto L4cde2c;
  #L4cddc2.  v5:= instanceof @variable v6 @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b$a` @kind boolean;
  #L4cddc6.  v7:= 0L;
  #L4cddca.  if v5 == 0 then goto L4cddf8;
  #L4cddce.  v6:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b$a`) v6 @kind object;
  #L4cddd2.  v5:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b$a.b` @type ^`long` @kind wide;
  #L4cddd6.  v9:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`long` @kind wide;
  #L4cddda.  v11:= lcmp(v5, v9);
  #L4cddde.  if v11 == 0 then goto L4cddea;
  #L4cdde2.  v5:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.n` @type ^`boolean` @kind boolean;
  #L4cdde6.  if v5 != 0 then goto L4cdd52;
  #L4cddea.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.q` @type ^`long` := v7 @kind wide;
  #L4cddee.  call temp:= `f`(v12, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b;.f:(Lio/reactivex/rxjava3/subjects/UnicastSubject;)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @kind virtual;
  #L4cddf4.  v2:= temp @kind object;
  #L4cddf6.  goto L4cdd52;
  #L4cddf8.  if v2 == 0 then goto L4cdd52;
  #L4cddfc.  call `onNext`(v2, v6) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4cde02.  v5:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.q` @type ^`long` @kind wide;
  #L4cde06.  v9:= 1L;
  #L4cde0a.  v5:= v5 + v9 @kind long;
  #L4cde0c.  v9:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.o` @type ^`long` @kind wide;
  #L4cde10.  v11:= lcmp(v5, v9);
  #L4cde14.  if v11 != 0 then goto L4cde26;
  #L4cde18.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.q` @type ^`long` := v7 @kind wide;
  #L4cde1c.  call temp:= `f`(v12, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b;.f:(Lio/reactivex/rxjava3/subjects/UnicastSubject;)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @kind virtual;
  #L4cde22.  v2:= temp @kind object;
  #L4cde24.  goto L4cdd52;
  #L4cde26.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.q` @type ^`long` := v5 @kind wide;
  #L4cde2a.  goto L4cdd52;
  #L4cde2c.  v4:= -v4 @kind int;
  #L4cde2e.  call temp:= `addAndGet`(v12, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4cde34.  v4:= temp;
  #L4cde36.  if v4 != 0 then goto L4cdd52;
  #L4cde3a.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b` v1 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b$a` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b;.e:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b$a;)V` @AccessFlag  {
    temp;
    v0;

  #L4cdc20.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4cdc24.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4cdc2a.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b;.c:()V` @kind virtual;
  #L4cdc30.  return @kind void;
}
procedure `io.reactivex.rxjava3.subjects.UnicastSubject` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b` v11 @kind this, `io.reactivex.rxjava3.subjects.UnicastSubject` v12 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b;.f:(Lio/reactivex/rxjava3/subjects/UnicastSubject;)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4cdb14.  if v12 == 0 then goto L4cdb20;
  #L4cdb18.  call `onComplete`(v12) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4cdb1e.  v12:= 0I;
  #L4cdb20.  v0:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4cdb24.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4cdb2a.  v0:= temp;
  #L4cdb2c.  if v0 == 0 then goto L4cdb38;
  #L4cdb30.  call `a`(v11) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b;.a:()V` @kind virtual;
  #L4cdb36.  goto L4cdbb8;
  #L4cdb38.  v0:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`long` @kind wide;
  #L4cdb3c.  v2:= 1L;
  #L4cdb40.  v0:= v0 + v2 @kind long;
  #L4cdb42.  v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`long` := v0 @kind wide;
  #L4cdb46.  v12:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4cdb4a.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4cdb50.  v12:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.e` @type ^`int`;
  #L4cdb54.  call temp:= `create`(v12, v11) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @kind static;
  #L4cdb5a.  v12:= temp @kind object;
  #L4cdb5c.  v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.r` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v12 @kind object;
  #L4cdb60.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.b`;
  #L4cdb64.  call `<init>`(v2, v12) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.<init>:(Lio/reactivex/rxjava3/subjects/Subject;)V` @kind direct;
  #L4cdb6a.  v3:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4cdb6e.  call `onNext`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cdb74.  v3:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.n` @type ^`boolean` @kind boolean;
  #L4cdb78.  if v3 == 0 then goto L4cdba6;
  #L4cdb7c.  v3:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.s` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4cdb80.  v4:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.p` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4cdb84.  v5:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b$a`;
  #L4cdb88.  call `<init>`(v5, v11, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b;J)V` @kind direct;
  #L4cdb8e.  v8:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.c` @type ^`long` @kind wide;
  #L4cdb92.  v10:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4cdb96.  v6:= v8 @kind wide;
  #L4cdb98.  call temp:= `schedulePeriodically`(v4, v5, v6, v8, v10) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4cdb9e.  v0:= temp @kind object;
  #L4cdba0.  call temp:= `update`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.update:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4cdba6.  call temp:= `d`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.d:()Z` @kind virtual;
  #L4cdbac.  v0:= temp;
  #L4cdbae.  if v0 == 0 then goto L4cdbb8;
  #L4cdbb2.  call `onComplete`(v12) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4cdbb8.  return v12 @kind object;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b;.run:()V` @AccessFlag PUBLIC {
    temp;

  #L4cde4c.  call `d`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$a;.d:()V` @kind virtual;
  #L4cde52.  return @kind void;
}
