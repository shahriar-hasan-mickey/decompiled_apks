record `io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a` @kind class {
  `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$b.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$b` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$b;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49c4e4.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$a;.<init>:(II)V` @kind direct;
  #L49c4ea.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L49c4ee.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49c500.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.a` @type ^`int`;
  #L49c504.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L49c508.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.b` @type ^`int`;
  #L49c50c.  if v2 == v0 then goto L49c52e;
  #L49c510.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.c` @type ^`boolean` @kind boolean;
  #L49c514.  if v3 == 0 then goto L49c51a;
  #L49c518.  return @kind void;
  #L49c51a.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L49c520.  v3:= temp @kind object;
  #L49c522.  call temp:= `tryOnNext`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L49c528.  v2:= v2 + 1;
  #L49c52c.  goto L49c50c;
  #L49c52e.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.c` @type ^`boolean` @kind boolean;
  #L49c532.  if v0 == 0 then goto L49c538;
  #L49c536.  return @kind void;
  #L49c538.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49c53e.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$b` v9 @kind this, `long` v10 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$b;.f:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L49c550.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.a` @type ^`int`;
  #L49c554.  v1:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.b` @type ^`int`;
  #L49c558.  v2:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L49c55c.  v3:= 0L;
  #L49c560.  v5:= v3 @kind wide;
  #L49c562.  v7:= lcmp(v5, v10);
  #L49c566.  if v7 == 0 then goto L49c598;
  #L49c56a.  if v1 == v0 then goto L49c598;
  #L49c56e.  v7:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.c` @type ^`boolean` @kind boolean;
  #L49c572.  if v7 == 0 then goto L49c578;
  #L49c576.  return @kind void;
  #L49c578.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L49c57e.  v7:= temp @kind object;
  #L49c580.  call temp:= `tryOnNext`(v2, v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L49c586.  v7:= temp;
  #L49c588.  if v7 == 0 then goto L49c592;
  #L49c58c.  v7:= 1L;
  #L49c590.  v5:= v5 + v7 @kind long;
  #L49c592.  v1:= v1 + 1;
  #L49c596.  goto L49c562;
  #L49c598.  if v1 != v0 then goto L49c5ac;
  #L49c59c.  v10:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.c` @type ^`boolean` @kind boolean;
  #L49c5a0.  if v10 != 0 then goto L49c5aa;
  #L49c5a4.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49c5aa.  return @kind void;
  #L49c5ac.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49c5b2.  v10:= temp @kind wide;
  #L49c5b4.  v7:= lcmp(v5, v10);
  #L49c5b8.  if v7 != 0 then goto L49c562;
  #L49c5bc.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.b` @type ^`int` := v1;
  #L49c5c0.  v10:= -v5 @kind long;
  #L49c5c2.  call temp:= `addAndGet`(v9, v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L49c5c8.  v10:= temp @kind wide;
  #L49c5ca.  v5:= lcmp(v10, v3);
  #L49c5ce.  if v5 != 0 then goto L49c560;
  #L49c5d2.  return @kind void;
}
