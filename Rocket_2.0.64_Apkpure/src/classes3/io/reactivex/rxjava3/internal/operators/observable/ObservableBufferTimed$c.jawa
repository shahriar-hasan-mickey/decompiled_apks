record `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.observers.QueueDrainObserver` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.functions.Supplier` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.c` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.d` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.f` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.h` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object, `io.reactivex.rxjava3.functions.Supplier` v3 @kind object, `long` v4 , `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v9 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$c;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Supplier;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4b805c.  v0:= new `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue`;
  #L4b8060.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4b8066.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L4b806c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.b` @type ^`io.reactivex.rxjava3.functions.Supplier` := v3 @kind object;
  #L4b8070.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.c` @type ^`long` := v4 @kind wide;
  #L4b8074.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.d` @type ^`long` := v6 @kind wide;
  #L4b8078.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.e` @type ^`java.util.concurrent.TimeUnit` := v8 @kind object;
  #L4b807c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.f` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v9 @kind object;
  #L4b8080.  v2:= new `java.util.LinkedList`;
  #L4b8084.  call `<init>`(v2) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L4b808a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.g` @type ^`java.util.List` := v2 @kind object;
  #L4b808e.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c` v0 @kind object, `java.lang.Object` v1 @kind object, `boolean` v2 , `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$c;.b:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$c;Ljava/lang/Object;ZLio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4b80d4.  call `fastPathOrderedEmit`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.fastPathOrderedEmit:(Ljava/lang/Object;ZLio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L4b80da.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c` v0 @kind object, `java.lang.Object` v1 @kind object, `boolean` v2 , `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$c;.c:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$c;Ljava/lang/Object;ZLio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4b80ec.  call `fastPathOrderedEmit`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.fastPathOrderedEmit:(Ljava/lang/Object;ZLio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L4b80f2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$c;.a:(Lio/reactivex/rxjava3/core/Observer;Ljava/util/Collection;)V` @AccessFlag PUBLIC {
    temp;

  #L4b80bc.  call `onNext`(v1, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b80c2.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$c;.accept:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4b80a0.  v2:= (`java.util.Collection`) v2 @kind object;
  #L4b80a4.  call `a`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$c;.a:(Lio/reactivex/rxjava3/core/Observer;Ljava/util/Collection;)V` @kind virtual;
  #L4b80aa.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$c;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L4b8104.  @monitorenter v1
  #L4b8106.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.g` @type ^`java.util.List` @kind object;
  #L4b810a.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4b8110.  @monitorexit v1
  #L4b8112.  return @kind void;
  #L4b8114.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b8116.  @monitorexit v1
  #L4b8118.  throw v0;
  catch `java.lang.Throwable` @[L4b8106..L4b8118] goto L4b8114;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b8138.  v0:= v1.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4b813c.  if v0 != 0 then goto L4b8160;
  #L4b8140.  v0:= 1I;
  #L4b8142.  v1.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L4b8146.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$c;.d:()V` @kind virtual;
  #L4b814c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b8150.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b8156.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.f` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4b815a.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b8160.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b8044.  v0:= v1.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4b8048.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b8174.  @monitorenter v4
  #L4b8176.  v0:= new `java.util.ArrayList`;
  #L4b817a.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.g` @type ^`java.util.List` @kind object;
  #L4b817e.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L4b8184.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.g` @type ^`java.util.List` @kind object;
  #L4b8188.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4b818e.  @monitorexit v4
  #L4b8190.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4b8196.  v0:= temp @kind object;
  #L4b8198.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4b819e.  v1:= temp;
  #L4b81a0.  if v1 == 0 then goto L4b81bc;
  #L4b81a4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4b81aa.  v1:= temp @kind object;
  #L4b81ac.  v1:= (`java.util.Collection`) v1 @kind object;
  #L4b81b0.  v2:= v4.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4b81b4.  call temp:= `offer`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4b81ba.  goto L4b8198;
  #L4b81bc.  v0:= 1I;
  #L4b81be.  v4.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4b81c2.  call temp:= `enter`(v4) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L4b81c8.  v0:= temp;
  #L4b81ca.  if v0 == 0 then goto L4b81e2;
  #L4b81ce.  v0:= v4.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4b81d2.  v1:= v4.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b81d6.  v2:= 0I;
  #L4b81d8.  v3:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.f` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4b81dc.  call `drainLoop`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;Lio/reactivex/rxjava3/core/Observer;ZLio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/internal/util/ObservableQueueDrain;)V` @kind static;
  #L4b81e2.  return @kind void;
  #L4b81e4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b81e6.  @monitorexit v4
  #L4b81e8.  throw v0;
  catch `java.lang.Throwable` @[L4b8176..L4b8190] goto L4b81e4;
  catch `java.lang.Throwable` @[L4b81e6..L4b81e8] goto L4b81e4;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b8210.  v0:= 1I;
  #L4b8212.  v1.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4b8216.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$c;.d:()V` @kind virtual;
  #L4b821c.  v0:= v1.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b8220.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b8226.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.f` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4b822a.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b8230.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b8244.  @monitorenter v2
  #L4b8246.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.g` @type ^`java.util.List` @kind object;
  #L4b824a.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4b8250.  v0:= temp @kind object;
  #L4b8252.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4b8258.  v1:= temp;
  #L4b825a.  if v1 == 0 then goto L4b8272;
  #L4b825e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4b8264.  v1:= temp @kind object;
  #L4b8266.  v1:= (`java.util.Collection`) v1 @kind object;
  #L4b826a.  call temp:= `add`(v1, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4b8270.  goto L4b8252;
  #L4b8272.  @monitorexit v2
  #L4b8274.  return @kind void;
  #L4b8276.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b8278.  @monitorexit v2
  #L4b827a.  throw v3;
  catch `java.lang.Throwable` @[L4b8246..L4b827a] goto L4b8276;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c` v8 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v9 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$c;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4b8298.  v0:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b829c.  call temp:= `validate`(v0, v9) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b82a2.  v0:= temp;
  #L4b82a4.  if v0 == 0 then goto L4b8330;
  #L4b82a8.  v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v9 @kind object;
  #L4b82ac.  v0:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.b` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4b82b0.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4b82b6.  v0:= temp @kind object;
  #L4b82b8.  v1:= "The buffer supplied is null" @kind object;
  #L4b82bc.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b82c2.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4b82c6.  v9:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.g` @type ^`java.util.List` @kind object;
  #L4b82ca.  call temp:= `add`(v9, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4b82d0.  v9:= v8.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b82d4.  call `onSubscribe`(v9, v8) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4b82da.  v1:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.f` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4b82de.  v5:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.d` @type ^`long` @kind wide;
  #L4b82e2.  v7:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4b82e6.  v2:= v8 @kind object;
  #L4b82e8.  v3:= v5 @kind wide;
  #L4b82ea.  call temp:= `schedulePeriodically`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4b82f0.  v9:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.f` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4b82f4.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c$b`;
  #L4b82f8.  call `<init>`(v1, v8, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$c$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$c;Ljava/util/Collection;)V` @kind direct;
  #L4b82fe.  v2:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.c` @type ^`long` @kind wide;
  #L4b8302.  v0:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4b8306.  call temp:= `schedule`(v9, v1, v2, v0) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4b830c.  goto L4b8330;
  #L4b830e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b8310.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b8316.  call `dispose`(v9) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b831c.  v9:= v8.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b8320.  call `error`(v0, v9) @signature `Lio/reactivex/rxjava3/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/Observer;)V` @kind static;
  #L4b8326.  v9:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.f` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4b832a.  call `dispose`(v9) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b8330.  return @kind void;
  catch `java.lang.Throwable` @[L4b82ac..L4b82c6] goto L4b830e;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4b8350.  v0:= v5.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4b8354.  if v0 == 0 then goto L4b835a;
  #L4b8358.  return @kind void;
  #L4b835a.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.b` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4b835e.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4b8364.  v0:= temp @kind object;
  #L4b8366.  v1:= "The bufferSupplier returned a null buffer" @kind object;
  #L4b836a.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b8370.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4b8374.  @monitorenter v5
  #L4b8376.  v1:= v5.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4b837a.  if v1 == 0 then goto L4b8382;
  #L4b837e.  @monitorexit v5
  #L4b8380.  return @kind void;
  #L4b8382.  v1:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.g` @type ^`java.util.List` @kind object;
  #L4b8386.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4b838c.  @monitorexit v5
  #L4b838e.  v1:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.f` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4b8392.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c$a`;
  #L4b8396.  call `<init>`(v2, v5, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$c$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$c;Ljava/util/Collection;)V` @kind direct;
  #L4b839c.  v3:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.c` @type ^`long` @kind wide;
  #L4b83a0.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$c.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4b83a4.  call temp:= `schedule`(v1, v2, v3, v0) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4b83aa.  return @kind void;
  #L4b83ac.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b83ae.  @monitorexit v5
  #L4b83b0.  throw v0;
  #L4b83b2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b83b4.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b83ba.  v1:= v5.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b83be.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b83c4.  call `dispose`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$c;.dispose:()V` @kind virtual;
  #L4b83ca.  return @kind void;
  catch `java.lang.Throwable` @[L4b835a..L4b8374] goto L4b83b2;
  catch `java.lang.Throwable` @[L4b8376..L4b838e] goto L4b83ac;
  catch `java.lang.Throwable` @[L4b83ae..L4b83b0] goto L4b83ac;
}
