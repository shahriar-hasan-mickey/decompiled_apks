record `io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.observers.BasicFuseableObserver` @kind class {
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiPredicate` `io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `io.reactivex.rxjava3.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableDistinctUntilChanged$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bc744.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.<init>:(Lio/reactivex/rxjava3/core/Observer;)V` @kind direct;
  #L4bc74a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.a` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4bc74e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` := v3 @kind object;
  #L4bc752.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableDistinctUntilChanged$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4bc764.  v0:= v3.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.done` @type ^`boolean` @kind boolean;
  #L4bc768.  if v0 == 0 then goto L4bc76e;
  #L4bc76c.  return @kind void;
  #L4bc76e.  v0:= v3.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.sourceMode` @type ^`int`;
  #L4bc772.  if v0 == 0 then goto L4bc782;
  #L4bc776.  v0:= v3.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4bc77a.  call `onNext`(v0, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bc780.  return @kind void;
  #L4bc782.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.a` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4bc786.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4bc78c.  v0:= temp @kind object;
  #L4bc78e.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.d` @type ^`boolean` @kind boolean;
  #L4bc792.  if v1 == 0 then goto L4bc7b0;
  #L4bc796.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` @kind object;
  #L4bc79a.  v2:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @type ^`java.lang.Object` @kind object;
  #L4bc79e.  call temp:= `test`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L4bc7a4.  v1:= temp;
  #L4bc7a6.  v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v0 @kind object;
  #L4bc7aa.  if v1 == 0 then goto L4bc7ba;
  #L4bc7ae.  return @kind void;
  #L4bc7b0.  v1:= 1I;
  #L4bc7b2.  v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.d` @type ^`boolean` := v1 @kind boolean;
  #L4bc7b6.  v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v0 @kind object;
  #L4bc7ba.  v0:= v3.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4bc7be.  call `onNext`(v0, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bc7c4.  return @kind void;
  #L4bc7c6.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bc7c8.  call `fail`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bc7ce.  return @kind void;
  catch `java.lang.Throwable` @[L4bc782..L4bc7ba] goto L4bc7c6;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableDistinctUntilChanged$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4bc6e0.  v0:= v4.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.qd` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind object;
  #L4bc6e4.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4bc6ea.  v0:= temp @kind object;
  #L4bc6ec.  if v0 != 0 then goto L4bc6f4;
  #L4bc6f0.  v0:= 0I;
  #L4bc6f2.  return v0 @kind object;
  #L4bc6f4.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.a` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4bc6f8.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4bc6fe.  v1:= temp @kind object;
  #L4bc700.  v2:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.d` @type ^`boolean` @kind boolean;
  #L4bc704.  if v2 != 0 then goto L4bc714;
  #L4bc708.  v2:= 1I;
  #L4bc70a.  v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.d` @type ^`boolean` := v2 @kind boolean;
  #L4bc70e.  v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4bc712.  return v0 @kind object;
  #L4bc714.  v2:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` @kind object;
  #L4bc718.  v3:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @type ^`java.lang.Object` @kind object;
  #L4bc71c.  call temp:= `test`(v2, v3, v1) @signature `Lio/reactivex/rxjava3/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L4bc722.  v2:= temp;
  #L4bc724.  if v2 != 0 then goto L4bc72e;
  #L4bc728.  v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4bc72c.  return v0 @kind object;
  #L4bc72e.  v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4bc732.  goto L4bc6e0;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableDistinctUntilChanged$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L4bc6c4.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L4bc6ca.  v1:= temp;
  #L4bc6cc.  return v1;
}
