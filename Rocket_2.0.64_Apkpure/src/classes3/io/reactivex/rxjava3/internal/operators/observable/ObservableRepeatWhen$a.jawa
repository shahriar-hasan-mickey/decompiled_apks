record `io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.subjects.Subject` `io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a$a` `io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.g` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.h` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.subjects.Subject` v2 @kind object, `io.reactivex.rxjava3.core.ObservableSource` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/subjects/Subject;Lio/reactivex/rxjava3/core/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c583c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4c5842.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4c5846.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.d` @type ^`io.reactivex.rxjava3.subjects.Subject` := v2 @kind object;
  #L4c584a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.g` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v3 @kind object;
  #L4c584e.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4c5852.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4c5858.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4c585c.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4c5860.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4c5866.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4c586a.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a$a`;
  #L4c586e.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a;)V` @kind direct;
  #L4c5874.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a$a` := v1 @kind object;
  #L4c5878.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c587c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c5882.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4c5886.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4c58c0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c58c4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c58ca.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c58ce.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c58d2.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/rxjava3/core/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4c58d8.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4c58ec.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c58f0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c58f6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c58fa.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c58fe.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onError:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4c5904.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a;.c:()V` @AccessFlag  {
    temp;

  #L4c5918.  call `d`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a;.d:()V` @kind virtual;
  #L4c591e.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L4c59d0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c59d4.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c59da.  v0:= temp;
  #L4c59dc.  if v0 != 0 then goto L4c5a16;
  #L4c59e0.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a;.isDisposed:()Z` @kind virtual;
  #L4c59e6.  v0:= temp;
  #L4c59e8.  if v0 == 0 then goto L4c59ee;
  #L4c59ec.  return @kind void;
  #L4c59ee.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.h` @type ^`boolean` @kind boolean;
  #L4c59f2.  if v0 != 0 then goto L4c5a06;
  #L4c59f6.  v0:= 1I;
  #L4c59f8.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4c59fc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.g` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4c5a00.  call `subscribe`(v0, v1) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4c5a06.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c5a0a.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c5a10.  v0:= temp;
  #L4c5a12.  if v0 != 0 then goto L4c59e0;
  #L4c5a16.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c5898.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c589c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c58a2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a$a` @kind object;
  #L4c58a6.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c58ac.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c5810.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c5814.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c581a.  v0:= temp @kind object;
  #L4c581c.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4c5820.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4c5826.  v0:= temp;
  #L4c5828.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c5930.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c5934.  v1:= 0I;
  #L4c5936.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4c593c.  v0:= 0I;
  #L4c593e.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4c5942.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.d` @type ^`io.reactivex.rxjava3.subjects.Subject` @kind object;
  #L4c5946.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c594c.  v0:= temp @kind object;
  #L4c594e.  call `onNext`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c5954.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c5968.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a$a` @kind object;
  #L4c596c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c5972.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c5976.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c597a.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onError:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4c5980.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c5994.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c5998.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c599c.  call `onNext`(v0, v3, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onNext:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4c59a2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c59b4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c59b8.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4c59be.  return @kind void;
}
