record `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.d` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.e` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.f` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatIterable$a;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a9c54.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4a9c5a.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4a9c5e.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.e` @type ^`java.util.Iterator` := v2 @kind object;
  #L4a9c62.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4a9c66.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a9c6c.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4a9c70.  v1:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4a9c74.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4a9c7a.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.d` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L4a9c7e.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4a9c82.  v2:= `@@io.reactivex.rxjava3.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.rxjava3.internal.util.NotificationLite` @kind object;
  #L4a9c86.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4a9c8c.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4a9c90.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a` v11 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatIterable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4a9cc0.  call temp:= `getAndIncrement`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a9cc6.  v0:= temp;
  #L4a9cc8.  if v0 == 0 then goto L4a9cce;
  #L4a9ccc.  return @kind void;
  #L4a9cce.  v0:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a9cd2.  v1:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a9cd6.  v2:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.d` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4a9cda.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4a9ce0.  v3:= temp;
  #L4a9ce2.  v4:= 0I;
  #L4a9ce4.  if v3 == 0 then goto L4a9cf0;
  #L4a9ce8.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4a9cee.  return @kind void;
  #L4a9cf0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a9cf6.  v3:= temp @kind object;
  #L4a9cf8.  if v3 == 0 then goto L4a9dac;
  #L4a9cfc.  v5:= `@@io.reactivex.rxjava3.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.rxjava3.internal.util.NotificationLite` @kind object;
  #L4a9d00.  v6:= 1I;
  #L4a9d02.  if v3 == v5 then goto L4a9d3c;
  #L4a9d06.  v7:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.f` @type ^`long` @kind wide;
  #L4a9d0a.  v5:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a9d0e.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a9d14.  v9:= temp @kind wide;
  #L4a9d16.  v5:= lcmp(v7, v9);
  #L4a9d1a.  if v5 == 0 then goto L4a9d36;
  #L4a9d1e.  v9:= 1L;
  #L4a9d22.  v7:= v7 + v9 @kind long;
  #L4a9d24.  v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.f` @type ^`long` := v7 @kind wide;
  #L4a9d28.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4a9d2e.  call `onNext`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a9d34.  goto L4a9d42;
  #L4a9d36.  v3:= 0I;
  #L4a9d38.  v6:= 0I;
  #L4a9d3a.  goto L4a9d42;
  #L4a9d3c.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4a9d42.  if v6 == 0 then goto L4a9dac;
  #L4a9d46.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4a9d4c.  v3:= temp;
  #L4a9d4e.  if v3 != 0 then goto L4a9dac;
  #L4a9d52.  v3:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.e` @type ^`java.util.Iterator` @kind object;
  #L4a9d56.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4a9d5c.  v3:= temp;
  #L4a9d5e.  if v3 == 0 then goto L4a9d94;
  #L4a9d62.  v3:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.e` @type ^`java.util.Iterator` @kind object;
  #L4a9d66.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4a9d6c.  v3:= temp @kind object;
  #L4a9d6e.  v4:= "The source Iterator returned a null MaybeSource" @kind object;
  #L4a9d72.  call temp:= `requireNonNull`(v3, v4) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4a9d78.  v3:= (`io.reactivex.rxjava3.core.MaybeSource`) v3 @kind object;
  #L4a9d7c.  call `subscribe`(v3, v11) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4a9d82.  goto L4a9dac;
  #L4a9d84.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a9d86.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4a9d8c.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a9d92.  return @kind void;
  #L4a9d94.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a9d9a.  goto L4a9dac;
  #L4a9d9c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a9d9e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4a9da4.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a9daa.  return @kind void;
  #L4a9dac.  call temp:= `decrementAndGet`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4a9db2.  v3:= temp;
  #L4a9db4.  if v3 != 0 then goto L4a9cda;
  #L4a9db8.  return @kind void;
  catch `java.lang.Throwable` @[L4a9d52..L4a9d5e] goto L4a9d9c;
  catch `java.lang.Throwable` @[L4a9d62..L4a9d7c] goto L4a9d84;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatIterable$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a9ca4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.d` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4a9ca8.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4a9cae.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatIterable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a9de4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a9de8.  v1:= `@@io.reactivex.rxjava3.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.rxjava3.internal.util.NotificationLite` @kind object;
  #L4a9dec.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4a9df2.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatIterable$a;.a:()V` @kind virtual;
  #L4a9df8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatIterable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a9e0c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a9e10.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a9e16.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatIterable$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a9e28.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.d` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4a9e2c.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4a9e32.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatIterable$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a9e44.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a9e48.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4a9e4e.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatIterable$a;.a:()V` @kind virtual;
  #L4a9e54.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatIterable$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a9e68.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4a9e6e.  v0:= temp;
  #L4a9e70.  if v0 == 0 then goto L4a9e84;
  #L4a9e74.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a9e78.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4a9e7e.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatIterable$a;.a:()V` @kind virtual;
  #L4a9e84.  return @kind void;
}
