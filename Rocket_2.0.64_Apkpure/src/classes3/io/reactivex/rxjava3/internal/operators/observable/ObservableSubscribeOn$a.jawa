record `io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSubscribeOn$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c93ec.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c93f2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4c93f6.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c93fa.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c9400.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4c9404.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSubscribeOn$a;.a:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag  {
    temp;

  #L4c94ac.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4c94b2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSubscribeOn$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c9418.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c941c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c9422.  call temp:= `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c9428.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSubscribeOn$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c93c4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c93ca.  v0:= temp @kind object;
  #L4c93cc.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4c93d0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4c93d6.  v0:= temp;
  #L4c93d8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSubscribeOn$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c943c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c9440.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4c9446.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSubscribeOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c9458.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c945c.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c9462.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSubscribeOn$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c9474.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c9478.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c947e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSubscribeOn$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c9490.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c9494.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4c949a.  return @kind void;
}
