record `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.observables.ConnectableObservable` @kind class, `io.reactivex.rxjava3.internal.fuseable.HasUpstreamObservableSource` @kind interface {
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$b` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.d` @AccessFlag FINAL;
}
global `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$b` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.e` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4c68f0.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$n`;
  #L4c68f4.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$n;.<init>:()V` @kind direct;
  #L4c68fa.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$b` := v0 @kind object;
  #L4c68fe.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay` v0 @kind this, `io.reactivex.rxjava3.core.ObservableSource` v1 @kind object, `io.reactivex.rxjava3.core.ObservableSource` v2 @kind object, `java.util.concurrent.atomic.AtomicReference` v3 @kind object, `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$b` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.<init>:(Lio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/core/ObservableSource;Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$b;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4c6910.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/observables/ConnectableObservable;.<init>:()V` @kind direct;
  #L4c6916.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.d` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v1 @kind object;
  #L4c691a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.a` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v2 @kind object;
  #L4c691e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L4c6922.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$b` := v4 @kind object;
  #L4c6926.  return @kind void;
}
procedure `io.reactivex.rxjava3.observables.ConnectableObservable` `create`(`io.reactivex.rxjava3.core.ObservableSource` v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.create:(Lio/reactivex/rxjava3/core/ObservableSource;IZ)Lio/reactivex/rxjava3/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c6804.  v0:= 2147483647I;
  #L4c680a.  if v2 != v0 then goto L4c6818;
  #L4c680e.  call temp:= `createFrom`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.createFrom:(Lio/reactivex/rxjava3/core/ObservableSource;)Lio/reactivex/rxjava3/observables/ConnectableObservable;` @kind static;
  #L4c6814.  v1:= temp @kind object;
  #L4c6816.  return v1 @kind object;
  #L4c6818.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$h`;
  #L4c681c.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$h;.<init>:(IZ)V` @kind direct;
  #L4c6822.  call temp:= `d`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.d:(Lio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$b;)Lio/reactivex/rxjava3/observables/ConnectableObservable;` @kind static;
  #L4c6828.  v1:= temp @kind object;
  #L4c682a.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.observables.ConnectableObservable` `create`(`io.reactivex.rxjava3.core.ObservableSource` v8 @kind object, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.rxjava3.core.Scheduler` v12 @kind object, `int` v13 , `boolean` v14 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.create:(Lio/reactivex/rxjava3/core/ObservableSource;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;IZ)Lio/reactivex/rxjava3/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4c68a0.  v7:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$k`;
  #L4c68a4.  v0:= v7 @kind object;
  #L4c68a6.  v1:= v13;
  #L4c68a8.  v2:= v9 @kind wide;
  #L4c68aa.  v4:= v11 @kind object;
  #L4c68ac.  v5:= v12 @kind object;
  #L4c68ae.  v6:= v14;
  #L4c68b0.  call `<init>`(v0, v1, v2, v4, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$k;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;Z)V` @kind direct;
  #L4c68b6.  call temp:= `d`(v8, v7) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.d:(Lio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$b;)Lio/reactivex/rxjava3/observables/ConnectableObservable;` @kind static;
  #L4c68bc.  v8:= temp @kind object;
  #L4c68be.  return v8 @kind object;
}
procedure `io.reactivex.rxjava3.observables.ConnectableObservable` `create`(`io.reactivex.rxjava3.core.ObservableSource` v7 @kind object, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.rxjava3.core.Scheduler` v11 @kind object, `boolean` v12 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.create:(Lio/reactivex/rxjava3/core/ObservableSource;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;Z)Lio/reactivex/rxjava3/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4c6874.  v5:= 2147483647I;
  #L4c687a.  v0:= v7 @kind object;
  #L4c687c.  v1:= v8 @kind wide;
  #L4c687e.  v3:= v10 @kind object;
  #L4c6880.  v4:= v11 @kind object;
  #L4c6882.  v6:= v12;
  #L4c6884.  call temp:= `create`(v0, v1, v3, v4, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.create:(Lio/reactivex/rxjava3/core/ObservableSource;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;IZ)Lio/reactivex/rxjava3/observables/ConnectableObservable;` @kind static;
  #L4c688a.  v7:= temp @kind object;
  #L4c688c.  return v7 @kind object;
}
procedure `io.reactivex.rxjava3.observables.ConnectableObservable` `createFrom`(`io.reactivex.rxjava3.core.ObservableSource` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.createFrom:(Lio/reactivex/rxjava3/core/ObservableSource;)Lio/reactivex/rxjava3/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c68d0.  v0:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$b` @kind object;
  #L4c68d4.  call temp:= `d`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.d:(Lio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$b;)Lio/reactivex/rxjava3/observables/ConnectableObservable;` @kind static;
  #L4c68da.  v1:= temp @kind object;
  #L4c68dc.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.observables.ConnectableObservable` `d`(`io.reactivex.rxjava3.core.ObservableSource` v3 @kind object, `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$b` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.d:(Lio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$b;)Lio/reactivex/rxjava3/observables/ConnectableObservable;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4c683c.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c6840.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c6846.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$j`;
  #L4c684a.  call `<init>`(v1, v0, v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$j;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$b;)V` @kind direct;
  #L4c6850.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay`;
  #L4c6854.  call `<init>`(v2, v1, v3, v0, v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.<init>:(Lio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/core/ObservableSource;Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$b;)V` @kind direct;
  #L4c685a.  call temp:= `onAssembly`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/observables/ConnectableObservable;)Lio/reactivex/rxjava3/observables/ConnectableObservable;` @kind static;
  #L4c6860.  v3:= temp @kind object;
  #L4c6862.  return v3 @kind object;
}
procedure `io.reactivex.rxjava3.core.Observable` `multicastSelector`(`io.reactivex.rxjava3.functions.Supplier` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.multicastSelector:(Lio/reactivex/rxjava3/functions/Supplier;Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c67c8.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$e`;
  #L4c67cc.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$e;.<init>:(Lio/reactivex/rxjava3/functions/Supplier;Lio/reactivex/rxjava3/functions/Function;)V` @kind direct;
  #L4c67d2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Observable;)Lio/reactivex/rxjava3/core/Observable;` @kind static;
  #L4c67d8.  v1:= temp @kind object;
  #L4c67da.  return v1 @kind object;
}
procedure `void` `connect`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay` v4 @kind this, `io.reactivex.rxjava3.functions.Consumer` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.connect:(Lio/reactivex/rxjava3/functions/Consumer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c6938.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c693c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c6942.  v0:= temp @kind object;
  #L4c6944.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i`) v0 @kind object;
  #L4c6948.  if v0 == 0 then goto L4c6958;
  #L4c694c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.isDisposed:()Z` @kind virtual;
  #L4c6952.  v1:= temp;
  #L4c6954.  if v1 == 0 then goto L4c6986;
  #L4c6958.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$b` @kind object;
  #L4c695c.  call temp:= `call`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$b;.call:()Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$g;` @kind interface;
  #L4c6962.  v1:= temp @kind object;
  #L4c6964.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i`;
  #L4c6968.  v3:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c696c.  call `<init>`(v2, v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$g;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L4c6972.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c6976.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c697c.  v0:= temp;
  #L4c697e.  if v0 != 0 then goto L4c6984;
  #L4c6982.  goto L4c6938;
  #L4c6984.  v0:= v2 @kind object;
  #L4c6986.  v1:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4c698a.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4c6990.  v1:= temp;
  #L4c6992.  v2:= 1I;
  #L4c6994.  v3:= 0I;
  #L4c6996.  if v1 != 0 then goto L4c69ae;
  #L4c699a.  v1:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4c699e.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4c69a4.  v1:= temp;
  #L4c69a6.  if v1 == 0 then goto L4c69ae;
  #L4c69aa.  v1:= 1I;
  #L4c69ac.  goto L4c69b0;
  #L4c69ae.  v1:= 0I;
  #L4c69b0.  call `accept`(v5, v0) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4c69b6.  if v1 == 0 then goto L4c69c4;
  #L4c69ba.  v5:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.a` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4c69be.  call `subscribe`(v5, v0) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4c69c4.  return @kind void;
  #L4c69c6.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c69c8.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c69ce.  if v1 == 0 then goto L4c69dc;
  #L4c69d2.  v0:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4c69d6.  call temp:= `compareAndSet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4c69dc.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c69e2.  call temp:= `wrapOrThrow`(v5) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4c69e8.  v5:= temp @kind object;
  #L4c69ea.  throw v5;
  catch `java.lang.Throwable` @[L4c69b0..L4c69b6] goto L4c69c6;
}
procedure `void` `reset`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c6a08.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c6a0c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c6a12.  v0:= temp @kind object;
  #L4c6a14.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i`) v0 @kind object;
  #L4c6a18.  if v0 == 0 then goto L4c6a34;
  #L4c6a1c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.isDisposed:()Z` @kind virtual;
  #L4c6a22.  v1:= temp;
  #L4c6a24.  if v1 == 0 then goto L4c6a34;
  #L4c6a28.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c6a2c.  v2:= 0I;
  #L4c6a2e.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c6a34.  return @kind void;
}
procedure `io.reactivex.rxjava3.core.ObservableSource` `source`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.source:()Lio/reactivex/rxjava3/core/ObservableSource;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c67ec.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.a` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4c67f0.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.subscribeActual:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L4c6a48.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.d` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4c6a4c.  call `subscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4c6a52.  return @kind void;
}
