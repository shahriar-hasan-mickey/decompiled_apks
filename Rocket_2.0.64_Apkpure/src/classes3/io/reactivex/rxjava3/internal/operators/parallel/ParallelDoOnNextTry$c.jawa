record `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Consumer` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cfd04.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4cfd0a.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4cfd0e.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.b` @type ^`io.reactivex.rxjava3.functions.Consumer` := v2 @kind object;
  #L4cfd12.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v3 @kind object;
  #L4cfd16.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cfd28.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cfd2c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4cfd32.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cfd44.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.e` @type ^`boolean` @kind boolean;
  #L4cfd48.  if v0 == 0 then goto L4cfd4e;
  #L4cfd4c.  return @kind void;
  #L4cfd4e.  v0:= 1I;
  #L4cfd50.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.e` @type ^`boolean` := v0 @kind boolean;
  #L4cfd54.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cfd58.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4cfd5e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cfd70.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.e` @type ^`boolean` @kind boolean;
  #L4cfd74.  if v0 == 0 then goto L4cfd80;
  #L4cfd78.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4cfd7e.  return @kind void;
  #L4cfd80.  v0:= 1I;
  #L4cfd82.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.e` @type ^`boolean` := v0 @kind boolean;
  #L4cfd86.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cfd8a.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cfd90.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4cfda4.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L4cfdaa.  v3:= temp;
  #L4cfdac.  if v3 != 0 then goto L4cfdbe;
  #L4cfdb0.  v3:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cfdb4.  v0:= 1L;
  #L4cfdb8.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4cfdbe.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cfdd0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cfdd4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4cfdda.  v0:= temp;
  #L4cfddc.  if v0 == 0 then goto L4cfdee;
  #L4cfde0.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.d` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4cfde4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cfde8.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4cfdee.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cfe00.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cfe04.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4cfe0a.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4cfc1c.  v0:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.e` @type ^`boolean` @kind boolean;
  #L4cfc20.  v1:= 0I;
  #L4cfc22.  if v0 == 0 then goto L4cfc28;
  #L4cfc26.  return v1;
  #L4cfc28.  v2:= 0L;
  #L4cfc2c.  v0:= 1I;
  #L4cfc2e.  v4:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4cfc32.  call `accept`(v4, v10) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4cfc38.  v1:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cfc3c.  call `onNext`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cfc42.  return v0;
  #L4cfc44.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cfc46.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4cfc4c.  v5:= 2I;
  #L4cfc4e.  v6:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4cfc52.  v7:= 1L;
  #L4cfc56.  v2:= v2 + v7 @kind long;
  #L4cfc58.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4cfc5e.  v7:= temp @kind object;
  #L4cfc60.  call temp:= `apply`(v6, v7, v4) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4cfc66.  v6:= temp @kind object;
  #L4cfc68.  v7:= "The errorHandler returned a null ParallelFailureHandling" @kind object;
  #L4cfc6c.  call temp:= `requireNonNull`(v6, v7) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4cfc72.  v6:= (`io.reactivex.rxjava3.parallel.ParallelFailureHandling`) v6 @kind object;
  #L4cfc76.  v7:= `@@io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$a.a` @type ^`int`[] @kind object;
  #L4cfc7a.  call temp:= `ordinal`(v6) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L4cfc80.  v6:= temp;
  #L4cfc82.  v6:= v7[v6];
  #L4cfc86.  if v6 == v0 then goto L4cfc2c;
  #L4cfc8a.  if v6 == v5 then goto L4cfcae;
  #L4cfc8e.  v10:= 3I;
  #L4cfc90.  if v6 == v10 then goto L4cfca2;
  #L4cfc94.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.cancel:()V` @kind virtual;
  #L4cfc9a.  call `onError`(v9, v4) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4cfca0.  return v1;
  #L4cfca2.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.cancel:()V` @kind virtual;
  #L4cfca8.  call `onComplete`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.onComplete:()V` @kind virtual;
  #L4cfcae.  return v1;
  #L4cfcb0.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cfcb2.  call `throwIfFatal`(v10) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4cfcb8.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.cancel:()V` @kind virtual;
  #L4cfcbe.  v2:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L4cfcc2.  v3:= new `java.lang.Throwable`[v5];
  #L4cfcc6.  v3[v1]:= v4 @kind object;
  #L4cfcca.  v3[v0]:= v10 @kind object;
  #L4cfcce.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4cfcd4.  call `onError`(v9, v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4cfcda.  return v1;
  catch `java.lang.Throwable` @[L4cfc2e..L4cfc38] goto L4cfc44;
  catch `java.lang.Throwable` @[L4cfc4e..L4cfc76] goto L4cfcb0;
}
