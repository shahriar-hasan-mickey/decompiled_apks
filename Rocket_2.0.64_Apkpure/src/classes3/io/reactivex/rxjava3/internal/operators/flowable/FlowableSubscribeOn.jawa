record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.a` @kind class {
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn` v0 @kind this, `io.reactivex.rxjava3.core.Flowable` v1 @kind object, `io.reactivex.rxjava3.core.Scheduler` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn;.<init>:(Lio/reactivex/rxjava3/core/Flowable;Lio/reactivex/rxjava3/core/Scheduler;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a1fc8.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/a;.<init>:(Lio/reactivex/rxjava3/core/Flowable;)V` @kind direct;
  #L4a1fce.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn.b` @type ^`io.reactivex.rxjava3.core.Scheduler` := v2 @kind object;
  #L4a1fd2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn.c` @type ^`boolean` := v3 @kind boolean;
  #L4a1fd6.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn` v4 @kind this, `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a1fe8.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn.b` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4a1fec.  call temp:= `createWorker`(v0) @signature `Lio/reactivex/rxjava3/core/Scheduler;.createWorker:()Lio/reactivex/rxjava3/core/Scheduler$Worker;` @kind virtual;
  #L4a1ff2.  v0:= temp @kind object;
  #L4a1ff4.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a`;
  #L4a1ff8.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.a.source` @type ^`io.reactivex.rxjava3.core.Flowable` @kind object;
  #L4a1ffc.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn.c` @type ^`boolean` @kind boolean;
  #L4a2000.  call `<init>`(v1, v5, v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/core/Scheduler$Worker;Lorg/reactivestreams/Publisher;Z)V` @kind direct;
  #L4a2006.  call `onSubscribe`(v5, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4a200c.  call temp:= `schedule`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4a2012.  return @kind void;
}
