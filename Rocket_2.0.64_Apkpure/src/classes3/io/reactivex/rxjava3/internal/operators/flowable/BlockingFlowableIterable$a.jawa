record `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `java.util.Iterator` @kind interface, `java.lang.Runnable` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.internal.queue.SpscArrayQueue` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.c` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.d` @AccessFlag FINAL;
  `java.util.concurrent.locks.Condition` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.e` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.f` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.g` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.h` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L486894.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L48689a.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L48689e.  call `<init>`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4868a4.  v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscArrayQueue` := v0 @kind object;
  #L4868a8.  v0:= (`long`) v3 @kind i2l;
  #L4868aa.  v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.b` @type ^`long` := v0 @kind wide;
  #L4868ae.  v0:= v3 ^> 2;
  #L4868b2.  v3:= v3 - v0 @kind int;
  #L4868b4.  v0:= (`long`) v3 @kind i2l;
  #L4868b6.  v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.c` @type ^`long` := v0 @kind wide;
  #L4868ba.  v3:= new `java.util.concurrent.locks.ReentrantLock`;
  #L4868be.  call `<init>`(v3) @signature `Ljava/util/concurrent/locks/ReentrantLock;.<init>:()V` @kind direct;
  #L4868c4.  v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.d` @type ^`java.util.concurrent.locks.Lock` := v3 @kind object;
  #L4868c8.  call temp:= `newCondition`(v3) @signature `Ljava/util/concurrent/locks/Lock;.newCondition:()Ljava/util/concurrent/locks/Condition;` @kind interface;
  #L4868ce.  v3:= temp @kind object;
  #L4868d0.  v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.e` @type ^`java.util.concurrent.locks.Condition` := v3 @kind object;
  #L4868d4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4869ec.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4869f0.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L4869f6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.e` @type ^`java.util.concurrent.locks.Condition` @kind object;
  #L4869fa.  call `signalAll`(v0) @signature `Ljava/util/concurrent/locks/Condition;.signalAll:()V` @kind interface;
  #L486a00.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L486a04.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L486a0a.  return @kind void;
  #L486a0c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L486a0e.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L486a12.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L486a18.  throw v0;
  catch `java.lang.Throwable` @[L4869f6..L486a00] goto L486a0c;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4868e8.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4868ee.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.a:()V` @kind virtual;
  #L4868f4.  return @kind void;
}
procedure `boolean` `hasNext`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L486714.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.isDisposed:()Z` @kind virtual;
  #L48671a.  v0:= temp;
  #L48671c.  v1:= 0I;
  #L48671e.  if v0 == 0 then goto L486736;
  #L486722.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.h` @type ^`java.lang.Throwable` @kind object;
  #L486726.  if v0 != 0 then goto L48672c;
  #L48672a.  return v1;
  #L48672c.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L486732.  v0:= temp @kind object;
  #L486734.  throw v0;
  #L486736.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.g` @type ^`boolean` @kind boolean;
  #L48673a.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscArrayQueue` @kind object;
  #L48673e.  call temp:= `isEmpty`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.isEmpty:()Z` @kind virtual;
  #L486744.  v2:= temp;
  #L486746.  if v0 == 0 then goto L486762;
  #L48674a.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.h` @type ^`java.lang.Throwable` @kind object;
  #L48674e.  if v0 != 0 then goto L486758;
  #L486752.  if v2 == 0 then goto L486762;
  #L486756.  return v1;
  #L486758.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L48675e.  v0:= temp @kind object;
  #L486760.  throw v0;
  #L486762.  if v2 == 0 then goto L4867d4;
  #L486766.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L48676c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L486770.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L486776.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.g` @type ^`boolean` @kind boolean;
  #L48677a.  if v0 != 0 then goto L4867a6;
  #L48677e.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscArrayQueue` @kind object;
  #L486782.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.isEmpty:()Z` @kind virtual;
  #L486788.  v0:= temp;
  #L48678a.  if v0 == 0 then goto L4867a6;
  #L48678e.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.isDisposed:()Z` @kind virtual;
  #L486794.  v0:= temp;
  #L486796.  if v0 != 0 then goto L4867a6;
  #L48679a.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.e` @type ^`java.util.concurrent.locks.Condition` @kind object;
  #L48679e.  call `await`(v0) @signature `Ljava/util/concurrent/locks/Condition;.await:()V` @kind interface;
  #L4867a4.  goto L486776;
  #L4867a6.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4867aa.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L4867b0.  goto L486714;
  #L4867b2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4867b4.  goto L4867c8;
  #L4867b6.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L4867b8.  call `run`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.run:()V` @kind virtual;
  #L4867be.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4867c4.  v0:= temp @kind object;
  #L4867c6.  throw v0;
  #L4867c8.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4867cc.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L4867d2.  throw v0;
  #L4867d4.  v0:= 1I;
  #L4867d6.  return v0;
  catch `java.lang.InterruptedException` @[L486776..L4867a4] goto L4867b6;
  catch `java.lang.Throwable` @[L486776..L4867a4] goto L4867b2;
  catch `java.lang.Throwable` @[L4867b8..L4867c8] goto L4867b2;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L486800.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L486806.  v0:= temp @kind object;
  #L486808.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L48680c.  if v0 != v1 then goto L486814;
  #L486810.  v0:= 1I;
  #L486812.  goto L486816;
  #L486814.  v0:= 0I;
  #L486816.  return v0;
}
procedure `java.lang.Object` `next`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L486828.  call temp:= `hasNext`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.hasNext:()Z` @kind virtual;
  #L48682e.  v0:= temp;
  #L486830.  if v0 == 0 then goto L486878;
  #L486834.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscArrayQueue` @kind object;
  #L486838.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L48683e.  v0:= temp @kind object;
  #L486840.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.f` @type ^`long` @kind wide;
  #L486844.  v3:= 1L;
  #L486848.  v1:= v1 + v3 @kind long;
  #L48684a.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.c` @type ^`long` @kind wide;
  #L48684e.  v5:= lcmp(v1, v3);
  #L486852.  if v5 != 0 then goto L486872;
  #L486856.  v3:= 0L;
  #L48685a.  v6.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.f` @type ^`long` := v3 @kind wide;
  #L48685e.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L486864.  v3:= temp @kind object;
  #L486866.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L48686a.  call `request`(v3, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L486870.  goto L486876;
  #L486872.  v6.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.f` @type ^`long` := v1 @kind wide;
  #L486876.  return v0 @kind object;
  #L486878.  v0:= new `java.util.NoSuchElementException`;
  #L48687c.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L486882.  throw v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L486908.  v0:= 1I;
  #L48690a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.g` @type ^`boolean` := v0 @kind boolean;
  #L48690e.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.a:()V` @kind virtual;
  #L486914.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L486928.  v0.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.h` @type ^`java.lang.Throwable` := v1 @kind object;
  #L48692c.  v1:= 1I;
  #L48692e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.g` @type ^`boolean` := v1 @kind boolean;
  #L486932.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.a:()V` @kind virtual;
  #L486938.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48694c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscArrayQueue` @kind object;
  #L486950.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L486956.  v2:= temp;
  #L486958.  if v2 != 0 then goto L486978;
  #L48695c.  call temp:= `cancel`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L486962.  v2:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L486966.  v0:= "Queue full?!" @kind object;
  #L48696a.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L486970.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L486976.  goto L48697e;
  #L486978.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.a:()V` @kind virtual;
  #L48697e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L486990.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.b` @type ^`long` @kind wide;
  #L486994.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L48699a.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4869ac.  v0:= new `java.lang.UnsupportedOperationException`;
  #L4869b0.  v1:= "remove" @kind object;
  #L4869b4.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4869ba.  throw v0;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.run:()V` @AccessFlag PUBLIC {
    temp;

  #L4869cc.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4869d2.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.a:()V` @kind virtual;
  #L4869d8.  return @kind void;
}
