record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.i` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.k` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49258c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L492592.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L492596.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.h` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L49259a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.b` @type ^`boolean` := v3 @kind boolean;
  #L49259e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.c` @type ^`int` := v4;
  #L4925a2.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4925a6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4925ac.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4925b0.  v1:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L4925b4.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4925ba.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v1 @kind object;
  #L4925be.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4925c2.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4925c8.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4925cc.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4925d0.  v2:= 1I;
  #L4925d2.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4925d8.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4925dc.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4925e0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4925e6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4925ea.  return @kind void;
}
procedure `boolean` `a`(`boolean` v0 , `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.a:(ZLio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)Z` @AccessFlag STATIC {
    temp;

  #L492500.  if v0 == 0 then goto L492518;
  #L492504.  if v1 == 0 then goto L492514;
  #L492508.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L49250e.  v0:= temp;
  #L492510.  if v0 == 0 then goto L492518;
  #L492514.  v0:= 1I;
  #L492516.  goto L49251a;
  #L492518.  v0:= 0I;
  #L49251a.  return v0;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L492634.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L492638.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49263e.  v0:= temp @kind object;
  #L492640.  v0:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L492644.  if v0 == 0 then goto L49264e;
  #L492648.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L49264e.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.c:()V` @AccessFlag  {
    temp;
    v0;

  #L492660.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L492666.  v0:= temp;
  #L492668.  if v0 != 0 then goto L492672;
  #L49266c.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.d:()V` @kind virtual;
  #L492672.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4925fc.  v0:= 1I;
  #L4925fe.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.k` @type ^`boolean` := v0 @kind boolean;
  #L492602.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L492606.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L49260c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L492610.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L492616.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L49261a.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L492620.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` v17 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L492684.  v0:= v17 @kind object;
  #L492688.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49268c.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L492690.  v3:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L492694.  v4:= 1I;
  #L492696.  v5:= 1I;
  #L492698.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L49269c.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4926a2.  v6:= temp @kind wide;
  #L4926a4.  v8:= 0L;
  #L4926a8.  v10:= v8 @kind wide;
  #L4926aa.  v12:= 0I;
  #L4926ac.  v13:= lcmp(v10, v6);
  #L4926b0.  if v13 == 0 then goto L492756;
  #L4926b4.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.k` @type ^`boolean` @kind boolean;
  #L4926b8.  if v14 == 0 then goto L4926c4;
  #L4926bc.  call `b`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.b:()V` @kind virtual;
  #L4926c2.  return @kind void;
  #L4926c4.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.b` @type ^`boolean` @kind boolean;
  #L4926c8.  if v14 != 0 then goto L4926f2;
  #L4926cc.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4926d0.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4926d6.  v14:= temp @kind object;
  #L4926d8.  v14:= (`java.lang.Throwable`) v14 @kind object;
  #L4926dc.  if v14 == 0 then goto L4926f2;
  #L4926e0.  call `b`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.b:()V` @kind virtual;
  #L4926e6.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4926ea.  call `tryTerminateConsumer`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4926f0.  return @kind void;
  #L4926f2.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4926f8.  v14:= temp;
  #L4926fa.  if v14 != 0 then goto L492702;
  #L4926fe.  v14:= 1I;
  #L492700.  goto L492704;
  #L492702.  v14:= 0I;
  #L492704.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49270a.  v15:= temp @kind object;
  #L49270c.  v15:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v15 @kind object;
  #L492710.  if v15 == 0 then goto L49271e;
  #L492714.  call temp:= `poll`(v15) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L49271a.  v15:= temp @kind object;
  #L49271c.  goto L492720;
  #L49271e.  v15:= 0I;
  #L492720.  if v15 != 0 then goto L49272a;
  #L492724.  v16:= 1I;
  #L492728.  goto L49272e;
  #L49272a.  v16:= 0I;
  #L49272e.  if v14 == 0 then goto L492742;
  #L492732.  if v16 == 0 then goto L492742;
  #L492736.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L49273a.  call `tryTerminateConsumer`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L492740.  return @kind void;
  #L492742.  if v16 == 0 then goto L492748;
  #L492746.  goto L492756;
  #L492748.  call `onNext`(v1, v15) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L49274e.  v12:= 1L;
  #L492752.  v10:= v10 + v12 @kind long;
  #L492754.  goto L4926aa;
  #L492756.  if v13 != 0 then goto L4927dc;
  #L49275a.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.k` @type ^`boolean` @kind boolean;
  #L49275e.  if v6 == 0 then goto L49276a;
  #L492762.  call `b`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.b:()V` @kind virtual;
  #L492768.  return @kind void;
  #L49276a.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.b` @type ^`boolean` @kind boolean;
  #L49276e.  if v6 != 0 then goto L492798;
  #L492772.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L492776.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49277c.  v6:= temp @kind object;
  #L49277e.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L492782.  if v6 == 0 then goto L492798;
  #L492786.  call `b`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.b:()V` @kind virtual;
  #L49278c.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L492790.  call `tryTerminateConsumer`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L492796.  return @kind void;
  #L492798.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L49279e.  v6:= temp;
  #L4927a0.  if v6 != 0 then goto L4927a8;
  #L4927a4.  v6:= 1I;
  #L4927a6.  goto L4927aa;
  #L4927a8.  v6:= 0I;
  #L4927aa.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4927b0.  v7:= temp @kind object;
  #L4927b2.  v7:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v7 @kind object;
  #L4927b6.  if v7 == 0 then goto L4927c6;
  #L4927ba.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4927c0.  v7:= temp;
  #L4927c2.  if v7 == 0 then goto L4927c8;
  #L4927c6.  v12:= 1I;
  #L4927c8.  if v6 == 0 then goto L4927dc;
  #L4927cc.  if v12 == 0 then goto L4927dc;
  #L4927d0.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4927d4.  call `tryTerminateConsumer`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4927da.  return @kind void;
  #L4927dc.  v6:= lcmp(v10, v8);
  #L4927e0.  if v6 == 0 then goto L492806;
  #L4927e4.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4927e8.  call temp:= `produced`(v6, v10) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4927ee.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.c` @type ^`int`;
  #L4927f2.  v7:= 2147483647I;
  #L4927f8.  if v6 == v7 then goto L492806;
  #L4927fc.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L492800.  call `request`(v6, v10) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L492806.  v5:= -v5 @kind int;
  #L492808.  call temp:= `addAndGet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L49280e.  v5:= temp;
  #L492810.  if v5 != 0 then goto L492698;
  #L492814.  return @kind void;
}
procedure `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.e:()Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L49252c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L492530.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L492536.  v0:= temp @kind object;
  #L492538.  v0:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L49253c.  if v0 == 0 then goto L492542;
  #L492540.  return v0 @kind object;
  #L492542.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L492546.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L49254c.  v1:= temp;
  #L49254e.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L492554.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L492558.  v2:= 0I;
  #L49255a.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L492560.  v1:= temp;
  #L492562.  if v1 == 0 then goto L492568;
  #L492566.  return v0 @kind object;
  #L492568.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49256c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L492572.  v0:= temp @kind object;
  #L492574.  v0:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L492578.  return v0 @kind object;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` v5 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a$a` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.f:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L492828.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L49282c.  call temp:= `delete`(v0, v6) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L492832.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L492838.  v6:= temp;
  #L49283a.  v0:= 1L;
  #L49283e.  v2:= 2147483647I;
  #L492844.  if v6 != 0 then goto L4928be;
  #L492848.  v6:= 0I;
  #L49284a.  v3:= 1I;
  #L49284c.  call temp:= `compareAndSet`(v5, v6, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L492852.  v4:= temp;
  #L492854.  if v4 == 0 then goto L4928be;
  #L492858.  v4:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L49285c.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L492862.  v4:= temp;
  #L492864.  if v4 != 0 then goto L49286a;
  #L492868.  v6:= 1I;
  #L49286a.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49286e.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L492874.  v3:= temp @kind object;
  #L492876.  v3:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v3 @kind object;
  #L49287a.  call temp:= `a`(v6, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.a:(ZLio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)Z` @kind static;
  #L492880.  v6:= temp;
  #L492882.  if v6 == 0 then goto L492896;
  #L492886.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L49288a.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49288e.  call `tryTerminateConsumer`(v6, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L492894.  return @kind void;
  #L492896.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.c` @type ^`int`;
  #L49289a.  if v6 == v2 then goto L4928a8;
  #L49289e.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4928a2.  call `request`(v6, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4928a8.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4928ae.  v6:= temp;
  #L4928b0.  if v6 != 0 then goto L4928b6;
  #L4928b4.  return @kind void;
  #L4928b6.  call `d`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.d:()V` @kind virtual;
  #L4928bc.  goto L4928e0;
  #L4928be.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4928c2.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4928c8.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.c` @type ^`int`;
  #L4928cc.  if v6 == v2 then goto L4928da;
  #L4928d0.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4928d4.  call `request`(v6, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4928da.  call `c`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.c:()V` @kind virtual;
  #L4928e0.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.g:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4928f4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4928f8.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4928fe.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L492902.  call temp:= `tryAddThrowableOrReport`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L492908.  v3:= temp;
  #L49290a.  if v3 == 0 then goto L492958;
  #L49290e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.b` @type ^`boolean` @kind boolean;
  #L492912.  if v3 != 0 then goto L49292c;
  #L492916.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49291a.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L492920.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L492924.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L49292a.  goto L492948;
  #L49292c.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.c` @type ^`int`;
  #L492930.  v4:= 2147483647I;
  #L492936.  if v3 == v4 then goto L492948;
  #L49293a.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49293e.  v0:= 1L;
  #L492942.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L492948.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L49294c.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L492952.  call `c`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.c:()V` @kind virtual;
  #L492958.  return @kind void;
}
procedure `void` `h`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` v5 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a$a` v6 @kind object, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.h:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a$a;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L49296c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L492970.  call temp:= `delete`(v0, v6) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L492976.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L49297c.  v6:= temp;
  #L49297e.  if v6 != 0 then goto L492a40;
  #L492982.  v6:= 0I;
  #L492984.  v0:= 1I;
  #L492986.  call temp:= `compareAndSet`(v5, v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L49298c.  v1:= temp;
  #L49298e.  if v1 == 0 then goto L492a40;
  #L492992.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L492996.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L49299c.  v1:= temp;
  #L49299e.  if v1 != 0 then goto L4929a4;
  #L4929a2.  v6:= 1I;
  #L4929a4.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4929a8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4929ae.  v0:= temp @kind wide;
  #L4929b0.  v2:= 0L;
  #L4929b4.  v4:= lcmp(v0, v2);
  #L4929b8.  if v4 == 0 then goto L492a1a;
  #L4929bc.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4929c0.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4929c6.  v7:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4929ca.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4929d0.  v7:= temp @kind object;
  #L4929d2.  v7:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v7 @kind object;
  #L4929d6.  call temp:= `a`(v6, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.a:(ZLio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)Z` @kind static;
  #L4929dc.  v6:= temp;
  #L4929de.  if v6 == 0 then goto L4929f2;
  #L4929e2.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4929e6.  v7:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4929ea.  call `tryTerminateConsumer`(v6, v7) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4929f0.  return @kind void;
  #L4929f2.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4929f6.  v0:= 1L;
  #L4929fa.  call temp:= `produced`(v6, v0) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L492a00.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.c` @type ^`int`;
  #L492a04.  v7:= 2147483647I;
  #L492a0a.  if v6 == v7 then goto L492a2c;
  #L492a0e.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L492a12.  call `request`(v6, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L492a18.  goto L492a2c;
  #L492a1a.  call temp:= `e`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.e:()Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;` @kind virtual;
  #L492a20.  v6:= temp @kind object;
  #L492a22.  @monitorenter v6
  #L492a24.  call temp:= `offer`(v6, v7) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L492a2a.  @monitorexit v6
  #L492a2c.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L492a32.  v6:= temp;
  #L492a34.  if v6 != 0 then goto L492a6a;
  #L492a38.  return @kind void;
  #L492a3a.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L492a3c.  @monitorexit v6
  #L492a3e.  throw v7;
  #L492a40.  call temp:= `e`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.e:()Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;` @kind virtual;
  #L492a46.  v6:= temp @kind object;
  #L492a48.  @monitorenter v6
  #L492a4a.  call temp:= `offer`(v6, v7) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L492a50.  @monitorexit v6
  #L492a52.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L492a56.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L492a5c.  call temp:= `getAndIncrement`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L492a62.  v6:= temp;
  #L492a64.  if v6 == 0 then goto L492a6a;
  #L492a68.  return @kind void;
  #L492a6a.  call `d`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.d:()V` @kind virtual;
  #L492a70.  return @kind void;
  #L492a72.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L492a74.  @monitorexit v6
  #L492a76.  throw v7;
  catch `java.lang.Throwable` @[L492a24..L492a2c] goto L492a3a;
  catch `java.lang.Throwable` @[L492a3c..L492a3e] goto L492a3a;
  catch `java.lang.Throwable` @[L492a4a..L492a52] goto L492a72;
  catch `java.lang.Throwable` @[L492a74..L492a76] goto L492a72;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L492ab0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L492ab4.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L492aba.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.c:()V` @kind virtual;
  #L492ac0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L492ad4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L492ad8.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L492ade.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L492ae2.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L492ae8.  v2:= temp;
  #L492aea.  if v2 == 0 then goto L492b06;
  #L492aee.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.b` @type ^`boolean` @kind boolean;
  #L492af2.  if v2 != 0 then goto L492b00;
  #L492af6.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L492afa.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L492b00.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.c:()V` @kind virtual;
  #L492b06.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L492b18.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.h` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L492b1c.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L492b22.  v3:= temp @kind object;
  #L492b24.  v0:= "The mapper returned a null MaybeSource" @kind object;
  #L492b28.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L492b2e.  v3:= (`io.reactivex.rxjava3.core.MaybeSource`) v3 @kind object;
  #L492b32.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L492b36.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L492b3c.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a$a`;
  #L492b40.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;)V` @kind direct;
  #L492b46.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.k` @type ^`boolean` @kind boolean;
  #L492b4a.  if v1 != 0 then goto L492b64;
  #L492b4e.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L492b52.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L492b58.  v1:= temp;
  #L492b5a.  if v1 == 0 then goto L492b64;
  #L492b5e.  call `subscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L492b64.  return @kind void;
  #L492b66.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L492b68.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L492b6e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L492b72.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L492b78.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L492b7e.  return @kind void;
  catch `java.lang.Throwable` @[L492b18..L492b32] goto L492b66;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L492b9c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L492ba0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L492ba6.  v0:= temp;
  #L492ba8.  if v0 == 0 then goto L492be2;
  #L492bac.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L492bb0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L492bb4.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L492bba.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.c` @type ^`int`;
  #L492bbe.  v1:= 2147483647I;
  #L492bc4.  if v0 != v1 then goto L492bda;
  #L492bc8.  v0:= 9223372036854775807L;
  #L492bd2.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L492bd8.  goto L492be2;
  #L492bda.  v0:= (`long`) v0 @kind i2l;
  #L492bdc.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L492be2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L492bf4.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L492bfa.  v0:= temp;
  #L492bfc.  if v0 == 0 then goto L492c10;
  #L492c00.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L492c04.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L492c0a.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.c:()V` @kind virtual;
  #L492c10.  return @kind void;
}
