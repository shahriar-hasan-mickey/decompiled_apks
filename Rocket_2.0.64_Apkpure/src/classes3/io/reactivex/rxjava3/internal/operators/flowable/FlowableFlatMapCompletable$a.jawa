record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.h` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L491d64.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L491d6a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L491d6e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.c` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L491d72.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.d` @type ^`boolean` := v3 @kind boolean;
  #L491d76.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L491d7a.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L491d80.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L491d84.  v1:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L491d88.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L491d8e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v1 @kind object;
  #L491d92.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.f` @type ^`int` := v4;
  #L491d96.  v1:= 1I;
  #L491d98.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L491d9e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L491db0.  v0:= 1I;
  #L491db2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.h` @type ^`boolean` := v0 @kind boolean;
  #L491db6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L491dba.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L491dc0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L491dc4.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L491dca.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L491dce.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L491dd4.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;

  #L491de8.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a$a` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.e:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a$a;)V` @AccessFlag  {
    temp;
    v0;

  #L491dfc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L491e00.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L491e06.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.onComplete:()V` @kind virtual;
  #L491e0c.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a$a` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.f:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L491e20.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L491e24.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L491e2a.  call `onError`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L491e30.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L491d24.  v0:= 1I;
  #L491d26.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L491e44.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L491e4a.  v0:= temp;
  #L491e4c.  if v0 != 0 then goto L491e60;
  #L491e50.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L491e54.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L491e58.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L491e5e.  goto L491e7c;
  #L491e60.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.f` @type ^`int`;
  #L491e64.  v1:= 2147483647I;
  #L491e6a.  if v0 == v1 then goto L491e7c;
  #L491e6e.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L491e72.  v1:= 1L;
  #L491e76.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L491e7c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L491e90.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L491e94.  call temp:= `tryAddThrowableOrReport`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L491e9a.  v3:= temp;
  #L491e9c.  if v3 == 0 then goto L491f0a;
  #L491ea0.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.d` @type ^`boolean` @kind boolean;
  #L491ea4.  if v3 == 0 then goto L491ee2;
  #L491ea8.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L491eae.  v3:= temp;
  #L491eb0.  if v3 != 0 then goto L491ec4;
  #L491eb4.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L491eb8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L491ebc.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L491ec2.  goto L491f0a;
  #L491ec4.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.f` @type ^`int`;
  #L491ec8.  v0:= 2147483647I;
  #L491ece.  if v3 == v0 then goto L491f0a;
  #L491ed2.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L491ed6.  v0:= 1L;
  #L491eda.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L491ee0.  goto L491f0a;
  #L491ee2.  v3:= 1I;
  #L491ee4.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.h` @type ^`boolean` := v3 @kind boolean;
  #L491ee8.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L491eec.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L491ef2.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L491ef6.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L491efc.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L491f00.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L491f04.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L491f0a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L491f1c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.c` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L491f20.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L491f26.  v3:= temp @kind object;
  #L491f28.  v0:= "The mapper returned a null CompletableSource" @kind object;
  #L491f2c.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L491f32.  v3:= (`io.reactivex.rxjava3.core.CompletableSource`) v3 @kind object;
  #L491f36.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L491f3c.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a$a`;
  #L491f40.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;)V` @kind direct;
  #L491f46.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.h` @type ^`boolean` @kind boolean;
  #L491f4a.  if v1 != 0 then goto L491f64;
  #L491f4e.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L491f52.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L491f58.  v1:= temp;
  #L491f5a.  if v1 == 0 then goto L491f64;
  #L491f5e.  call `subscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/CompletableSource;.subscribe:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind interface;
  #L491f64.  return @kind void;
  #L491f66.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L491f68.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L491f6e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L491f72.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L491f78.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L491f7e.  return @kind void;
  catch `java.lang.Throwable` @[L491f1c..L491f36] goto L491f66;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L491f9c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L491fa0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L491fa6.  v0:= temp;
  #L491fa8.  if v0 == 0 then goto L491fe2;
  #L491fac.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L491fb0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L491fb4.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L491fba.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.f` @type ^`int`;
  #L491fbe.  v1:= 2147483647I;
  #L491fc4.  if v0 != v1 then goto L491fda;
  #L491fc8.  v0:= 9223372036854775807L;
  #L491fd2.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L491fd8.  goto L491fe2;
  #L491fda.  v0:= (`long`) v0 @kind i2l;
  #L491fdc.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L491fe2.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L491d50.  v0:= 0I;
  #L491d52.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L491ff4.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L491d38.  v1:= v1 ^& 2;
  #L491d3c.  return v1;
}
