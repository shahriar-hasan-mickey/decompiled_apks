record `io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.parallel.ParallelFlowable` @kind class {
  `io.reactivex.rxjava3.parallel.ParallelFlowable` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap.d` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap` v0 @kind this, `io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 , `int` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFlatMap;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Function;ZII)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4d07f4.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L4d07fa.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` := v1 @kind object;
  #L4d07fe.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4d0802.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap.c` @type ^`boolean` := v3 @kind boolean;
  #L4d0806.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap.d` @type ^`int` := v4;
  #L4d080a.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap.e` @type ^`int` := v5;
  #L4d080e.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFlatMap;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d07d4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` @kind object;
  #L4d07d8.  call temp:= `parallelism`(v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L4d07de.  v0:= temp;
  #L4d07e0.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap` v8 @kind this, `org.reactivestreams.Subscriber`[] v9 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFlatMap;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4d0820.  call temp:= `validate`(v8, v9) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L4d0826.  v0:= temp;
  #L4d0828.  if v0 != 0 then goto L4d082e;
  #L4d082c.  return @kind void;
  #L4d082e.  v0:= length @variable v9;
  #L4d0830.  v1:= new `org.reactivestreams.Subscriber`[v0];
  #L4d0834.  v2:= 0I;
  #L4d0836.  if v2 >= v0 then goto L4d0860;
  #L4d083a.  v3:= v9[v2] @kind object;
  #L4d083e.  v4:= v8.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4d0842.  v5:= v8.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap.c` @type ^`boolean` @kind boolean;
  #L4d0846.  v6:= v8.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap.d` @type ^`int`;
  #L4d084a.  v7:= v8.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap.e` @type ^`int`;
  #L4d084e.  call temp:= `subscribe`(v3, v4, v5, v6, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap;.subscribe:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;ZII)Lio/reactivex/rxjava3/core/FlowableSubscriber;` @kind static;
  #L4d0854.  v3:= temp @kind object;
  #L4d0856.  v1[v2]:= v3 @kind object;
  #L4d085a.  v2:= v2 + 1;
  #L4d085e.  goto L4d0836;
  #L4d0860.  v9:= v8.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` @kind object;
  #L4d0864.  call `subscribe`(v9, v1) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4d086a.  return @kind void;
}
