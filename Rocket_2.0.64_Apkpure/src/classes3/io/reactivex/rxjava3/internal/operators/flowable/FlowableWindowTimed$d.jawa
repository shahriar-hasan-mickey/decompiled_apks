record `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a` @kind class, `java.lang.Runnable` @kind interface {
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.n` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.o` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.p` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.q` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.r` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4a7858.  v0:= new `java.lang.Object`;
  #L4a785c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a7862.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.q` @type ^`java.lang.Object` := v0 @kind object;
  #L4a7866.  v0:= new `java.lang.Object`;
  #L4a786a.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a7870.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.r` @type ^`java.lang.Object` := v0 @kind object;
  #L4a7874.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d` v6 @kind this, `org.reactivestreams.Subscriber` v7 @kind object, `long` v8 , `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v13 @kind object, `int` v14 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;.<init>:(Lorg/reactivestreams/Subscriber;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler$Worker;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4a7888.  v0:= v6 @kind object;
  #L4a788a.  v1:= v7 @kind object;
  #L4a788c.  v2:= v8 @kind wide;
  #L4a788e.  v4:= v12 @kind object;
  #L4a7890.  v5:= v14;
  #L4a7892.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;I)V` @kind direct;
  #L4a7898.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.n` @type ^`long` := v10 @kind wide;
  #L4a789c.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.o` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v13 @kind object;
  #L4a78a0.  v7:= new `java.util.LinkedList`;
  #L4a78a4.  call `<init>`(v7) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L4a78aa.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.p` @type ^`java.util.List` := v7 @kind object;
  #L4a78ae.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4a78f0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.o` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4a78f4.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4a78fa.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d` v15 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L4a790c.  v0:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a7910.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4a7916.  v0:= temp;
  #L4a7918.  if v0 != 0 then goto L4a7a14;
  #L4a791c.  v0:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a7920.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a7926.  v0:= temp @kind wide;
  #L4a7928.  v2:= 0L;
  #L4a792c.  v4:= 1I;
  #L4a792e.  v5:= lcmp(v0, v2);
  #L4a7932.  if v5 == 0 then goto L4a79e0;
  #L4a7936.  v0:= 1L;
  #L4a793a.  v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`long` := v0 @kind wide;
  #L4a793e.  v0:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4a7942.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a7948.  v0:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.e` @type ^`int`;
  #L4a794c.  call temp:= `create`(v0, v15) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind static;
  #L4a7952.  v0:= temp @kind object;
  #L4a7954.  v1:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.p` @type ^`java.util.List` @kind object;
  #L4a7958.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4a795e.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.b`;
  #L4a7962.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.<init>:(Lio/reactivex/rxjava3/processors/FlowableProcessor;)V` @kind direct;
  #L4a7968.  v2:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a796c.  call `onNext`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a7972.  v2:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.o` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4a7976.  v3:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d$a`;
  #L4a797a.  v5:= 0I;
  #L4a797c.  call `<init>`(v3, v15, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;Z)V` @kind direct;
  #L4a7982.  v5:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.c` @type ^`long` @kind wide;
  #L4a7986.  v7:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4a798a.  call temp:= `schedule`(v2, v3, v5, v7) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4a7990.  v8:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.o` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4a7994.  v9:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d$a`;
  #L4a7998.  call `<init>`(v9, v15, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;Z)V` @kind direct;
  #L4a799e.  v12:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.n` @type ^`long` @kind wide;
  #L4a79a2.  v14:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4a79a6.  v10:= v12 @kind wide;
  #L4a79a8.  call temp:= `schedulePeriodically`(v8, v9, v10, v12, v14) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4a79ae.  call temp:= `e`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.e:()Z` @kind virtual;
  #L4a79b4.  v1:= temp;
  #L4a79b6.  if v1 == 0 then goto L4a79ca;
  #L4a79ba.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4a79c0.  v1:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.p` @type ^`java.util.List` @kind object;
  #L4a79c4.  call temp:= `remove`(v1, v0) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L4a79ca.  v0:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a79ce.  v1:= 9223372036854775807L;
  #L4a79d8.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a79de.  goto L4a7a14;
  #L4a79e0.  v0:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a79e4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a79ea.  v0:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a79ee.  v1:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4a79f2.  v2:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`long` @kind wide;
  #L4a79f6.  call temp:= `e`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed;.e:(J)Ljava/lang/String;` @kind static;
  #L4a79fc.  v2:= temp @kind object;
  #L4a79fe.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a7a04.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a7a0a.  call `a`(v15) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;.a:()V` @kind virtual;
  #L4a7a10.  v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`boolean` := v4 @kind boolean;
  #L4a7a14.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d` v12 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4a7a28.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a7a2e.  v0:= temp;
  #L4a7a30.  if v0 == 0 then goto L4a7a36;
  #L4a7a34.  return @kind void;
  #L4a7a36.  v0:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4a7a3a.  v1:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a7a3e.  v2:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.p` @type ^`java.util.List` @kind object;
  #L4a7a42.  v3:= 1I;
  #L4a7a44.  v4:= 1I;
  #L4a7a46.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`boolean` @kind boolean;
  #L4a7a4a.  if v5 == 0 then goto L4a7a5e;
  #L4a7a4e.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4a7a54.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4a7a5a.  goto L4a7c36;
  #L4a7a5e.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.h` @type ^`boolean` @kind boolean;
  #L4a7a62.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4a7a68.  v6:= temp @kind object;
  #L4a7a6a.  v7:= 0I;
  #L4a7a6c.  if v6 != 0 then goto L4a7a74;
  #L4a7a70.  v8:= 1I;
  #L4a7a72.  goto L4a7a76;
  #L4a7a74.  v8:= 0I;
  #L4a7a76.  if v5 == 0 then goto L4a7af0;
  #L4a7a7a.  if v8 == 0 then goto L4a7af0;
  #L4a7a7e.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.i` @type ^`java.lang.Throwable` @kind object;
  #L4a7a82.  if v5 == 0 then goto L4a7ab6;
  #L4a7a86.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4a7a8c.  v6:= temp @kind object;
  #L4a7a8e.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4a7a94.  v7:= temp;
  #L4a7a96.  if v7 == 0 then goto L4a7aae;
  #L4a7a9a.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4a7aa0.  v7:= temp @kind object;
  #L4a7aa2.  v7:= (`io.reactivex.rxjava3.processors.UnicastProcessor`) v7 @kind object;
  #L4a7aa6.  call `onError`(v7, v5) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a7aac.  goto L4a7a8e;
  #L4a7aae.  call `onError`(v1, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a7ab4.  goto L4a7ae4;
  #L4a7ab6.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4a7abc.  v5:= temp @kind object;
  #L4a7abe.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4a7ac4.  v6:= temp;
  #L4a7ac6.  if v6 == 0 then goto L4a7ade;
  #L4a7aca.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4a7ad0.  v6:= temp @kind object;
  #L4a7ad2.  v6:= (`io.reactivex.rxjava3.processors.UnicastProcessor`) v6 @kind object;
  #L4a7ad6.  call `onComplete`(v6) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4a7adc.  goto L4a7abe;
  #L4a7ade.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a7ae4.  call `a`(v12) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;.a:()V` @kind virtual;
  #L4a7aea.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`boolean` := v3 @kind boolean;
  #L4a7aee.  goto L4a7a46;
  #L4a7af0.  if v8 != 0 then goto L4a7c36;
  #L4a7af4.  v5:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.q` @type ^`java.lang.Object` @kind object;
  #L4a7af8.  if v6 != v5 then goto L4a7be4;
  #L4a7afc.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a7b00.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4a7b06.  v5:= temp;
  #L4a7b08.  if v5 != 0 then goto L4a7a46;
  #L4a7b0c.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`long` @kind wide;
  #L4a7b10.  v8:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a7b14.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a7b1a.  v8:= temp @kind wide;
  #L4a7b1c.  v10:= lcmp(v8, v5);
  #L4a7b20.  if v10 == 0 then goto L4a7b8c;
  #L4a7b24.  v8:= 1L;
  #L4a7b28.  v5:= v5 + v8 @kind long;
  #L4a7b2a.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`long` := v5 @kind wide;
  #L4a7b2e.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4a7b32.  call temp:= `getAndIncrement`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a7b38.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.e` @type ^`int`;
  #L4a7b3c.  call temp:= `create`(v5, v12) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind static;
  #L4a7b42.  v5:= temp @kind object;
  #L4a7b44.  call temp:= `add`(v2, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4a7b4a.  v6:= new `io.reactivex.rxjava3.internal.operators.flowable.b`;
  #L4a7b4e.  call `<init>`(v6, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.<init>:(Lio/reactivex/rxjava3/processors/FlowableProcessor;)V` @kind direct;
  #L4a7b54.  call `onNext`(v1, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a7b5a.  v8:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.o` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4a7b5e.  v9:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d$a`;
  #L4a7b62.  call `<init>`(v9, v12, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;Z)V` @kind direct;
  #L4a7b68.  v10:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.c` @type ^`long` @kind wide;
  #L4a7b6c.  v7:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4a7b70.  call temp:= `schedule`(v8, v9, v10, v7) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4a7b76.  call temp:= `e`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.e:()Z` @kind virtual;
  #L4a7b7c.  v6:= temp;
  #L4a7b7e.  if v6 == 0 then goto L4a7a46;
  #L4a7b82.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4a7b88.  goto L4a7a46;
  #L4a7b8c.  v7:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a7b90.  call `cancel`(v7) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a7b96.  v7:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4a7b9a.  call temp:= `e`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed;.e:(J)Ljava/lang/String;` @kind static;
  #L4a7ba0.  v5:= temp @kind object;
  #L4a7ba2.  call `<init>`(v7, v5) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a7ba8.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4a7bae.  v5:= temp @kind object;
  #L4a7bb0.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4a7bb6.  v6:= temp;
  #L4a7bb8.  if v6 == 0 then goto L4a7bd0;
  #L4a7bbc.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4a7bc2.  v6:= temp @kind object;
  #L4a7bc4.  v6:= (`io.reactivex.rxjava3.processors.UnicastProcessor`) v6 @kind object;
  #L4a7bc8.  call `onError`(v6, v7) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a7bce.  goto L4a7bb0;
  #L4a7bd0.  call `onError`(v1, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a7bd6.  call `a`(v12) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;.a:()V` @kind virtual;
  #L4a7bdc.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`boolean` := v3 @kind boolean;
  #L4a7be0.  goto L4a7a46;
  #L4a7be4.  v5:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.r` @type ^`java.lang.Object` @kind object;
  #L4a7be8.  if v6 != v5 then goto L4a7c0e;
  #L4a7bec.  call temp:= `isEmpty`(v2) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L4a7bf2.  v5:= temp;
  #L4a7bf4.  if v5 != 0 then goto L4a7a46;
  #L4a7bf8.  call temp:= `remove`(v2, v7) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L4a7bfe.  v5:= temp @kind object;
  #L4a7c00.  v5:= (`io.reactivex.rxjava3.processors.UnicastProcessor`) v5 @kind object;
  #L4a7c04.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4a7c0a.  goto L4a7a46;
  #L4a7c0e.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4a7c14.  v5:= temp @kind object;
  #L4a7c16.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4a7c1c.  v7:= temp;
  #L4a7c1e.  if v7 == 0 then goto L4a7a46;
  #L4a7c22.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4a7c28.  v7:= temp @kind object;
  #L4a7c2a.  v7:= (`io.reactivex.rxjava3.processors.UnicastProcessor`) v7 @kind object;
  #L4a7c2e.  call `onNext`(v7, v6) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a7c34.  goto L4a7c16;
  #L4a7c36.  v4:= -v4 @kind int;
  #L4a7c38.  call temp:= `addAndGet`(v12, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4a7c3e.  v4:= temp;
  #L4a7c40.  if v4 != 0 then goto L4a7a46;
  #L4a7c44.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d` v1 @kind this, `boolean` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;.e:(Z)V` @AccessFlag  {
    temp;
    v0;

  #L4a78c0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4a78c4.  if v2 == 0 then goto L4a78ce;
  #L4a78c8.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.q` @type ^`java.lang.Object` @kind object;
  #L4a78cc.  goto L4a78d2;
  #L4a78ce.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.r` @type ^`java.lang.Object` @kind object;
  #L4a78d2.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4a78d8.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;.c:()V` @kind virtual;
  #L4a78de.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;.run:()V` @AccessFlag PUBLIC {
    temp;

  #L4a7c58.  call `d`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.d:()V` @kind virtual;
  #L4a7c5e.  return @kind void;
}
