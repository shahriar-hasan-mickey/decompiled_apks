record `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.h` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.i` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bed78.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4bed7e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4bed82.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.f` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4bed86.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.b` @type ^`boolean` := v3 @kind boolean;
  #L4bed8a.  v1:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L4bed8e.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4bed94.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v1 @kind object;
  #L4bed98.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4bed9c.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4beda2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4beda6.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4bedaa.  v2:= 1I;
  #L4bedac.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4bedb2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4bedb6.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4bedba.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4bedc0.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4bedc4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4bedd8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4beddc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4bede2.  v0:= temp @kind object;
  #L4bede4.  v0:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L4bede8.  if v0 == 0 then goto L4bedf2;
  #L4bedec.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4bedf2.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4bee3c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4bee42.  v0:= temp;
  #L4bee44.  if v0 != 0 then goto L4bee4e;
  #L4bee48.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.c:()V` @kind virtual;
  #L4bee4e.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a` v8 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4bee60.  v0:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4bee64.  v1:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4bee68.  v2:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4bee6c.  v3:= 1I;
  #L4bee6e.  v4:= 1I;
  #L4bee70.  v5:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.i` @type ^`boolean` @kind boolean;
  #L4bee74.  if v5 == 0 then goto L4bee80;
  #L4bee78.  call `a`(v8) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.a:()V` @kind virtual;
  #L4bee7e.  return @kind void;
  #L4bee80.  v5:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.b` @type ^`boolean` @kind boolean;
  #L4bee84.  if v5 != 0 then goto L4beeae;
  #L4bee88.  v5:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bee8c.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4bee92.  v5:= temp @kind object;
  #L4bee94.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L4bee98.  if v5 == 0 then goto L4beeae;
  #L4bee9c.  call `a`(v8) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.a:()V` @kind virtual;
  #L4beea2.  v1:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4beea6.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4beeac.  return @kind void;
  #L4beeae.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4beeb4.  v5:= temp;
  #L4beeb6.  v6:= 0I;
  #L4beeb8.  if v5 != 0 then goto L4beec0;
  #L4beebc.  v5:= 1I;
  #L4beebe.  goto L4beec2;
  #L4beec0.  v5:= 0I;
  #L4beec2.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4beec8.  v7:= temp @kind object;
  #L4beeca.  v7:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v7 @kind object;
  #L4beece.  if v7 == 0 then goto L4beedc;
  #L4beed2.  call temp:= `poll`(v7) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4beed8.  v7:= temp @kind object;
  #L4beeda.  goto L4beede;
  #L4beedc.  v7:= 0I;
  #L4beede.  if v7 != 0 then goto L4beee4;
  #L4beee2.  v6:= 1I;
  #L4beee4.  if v5 == 0 then goto L4beefc;
  #L4beee8.  if v6 == 0 then goto L4beefc;
  #L4beeec.  v0:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4beef0.  v1:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4beef4.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4beefa.  return @kind void;
  #L4beefc.  if v6 == 0 then goto L4bef10;
  #L4bef00.  v4:= -v4 @kind int;
  #L4bef02.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4bef08.  v4:= temp;
  #L4bef0a.  if v4 != 0 then goto L4bee70;
  #L4bef0e.  return @kind void;
  #L4bef10.  call `onNext`(v0, v7) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bef16.  goto L4bee70;
}
procedure `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.d:()Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4bed18.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4bed1c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4bed22.  v0:= temp @kind object;
  #L4bed24.  v0:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L4bed28.  if v0 == 0 then goto L4bed2e;
  #L4bed2c.  return v0 @kind object;
  #L4bed2e.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4bed32.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Observable;.bufferSize:()I` @kind static;
  #L4bed38.  v1:= temp;
  #L4bed3a.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4bed40.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4bed44.  v2:= 0I;
  #L4bed46.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4bed4c.  v1:= temp;
  #L4bed4e.  if v1 == 0 then goto L4bed54;
  #L4bed52.  return v0 @kind object;
  #L4bed54.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4bed58.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4bed5e.  v0:= temp @kind object;
  #L4bed60.  v0:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L4bed64.  return v0 @kind object;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bee04.  v0:= 1I;
  #L4bee06.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4bee0a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4bee0e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bee14.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4bee18.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4bee1e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bee22.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4bee28.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a$a` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.e:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4bef28.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4bef2c.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4bef32.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bef36.  call temp:= `tryAddThrowableOrReport`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bef3c.  v2:= temp;
  #L4bef3e.  if v2 == 0 then goto L4bef6e;
  #L4bef42.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.b` @type ^`boolean` @kind boolean;
  #L4bef46.  if v2 != 0 then goto L4bef5e;
  #L4bef4a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4bef4e.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bef54.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4bef58.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4bef5e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4bef62.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4bef68.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.b:()V` @kind virtual;
  #L4bef6e.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a$a` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.f:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a$a;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4bef80.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4bef84.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4bef8a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4bef90.  v3:= temp;
  #L4bef92.  if v3 != 0 then goto L4bf004;
  #L4bef96.  v3:= 0I;
  #L4bef98.  v0:= 1I;
  #L4bef9a.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4befa0.  v1:= temp;
  #L4befa2.  if v1 == 0 then goto L4bf004;
  #L4befa6.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4befaa.  call `onNext`(v1, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4befb0.  v4:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4befb4.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4befba.  v4:= temp;
  #L4befbc.  if v4 != 0 then goto L4befc2;
  #L4befc0.  v3:= 1I;
  #L4befc2.  v4:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4befc6.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4befcc.  v4:= temp @kind object;
  #L4befce.  v4:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v4 @kind object;
  #L4befd2.  if v3 == 0 then goto L4beff6;
  #L4befd6.  if v4 == 0 then goto L4befe6;
  #L4befda.  call temp:= `isEmpty`(v4) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4befe0.  v3:= temp;
  #L4befe2.  if v3 == 0 then goto L4beff6;
  #L4befe6.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4befea.  v4:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4befee.  call `tryTerminateConsumer`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4beff4.  return @kind void;
  #L4beff6.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4beffc.  v3:= temp;
  #L4beffe.  if v3 != 0 then goto L4bf02e;
  #L4bf002.  return @kind void;
  #L4bf004.  call temp:= `d`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.d:()Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;` @kind virtual;
  #L4bf00a.  v3:= temp @kind object;
  #L4bf00c.  @monitorenter v3
  #L4bf00e.  call temp:= `offer`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4bf014.  @monitorexit v3
  #L4bf016.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4bf01a.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4bf020.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4bf026.  v3:= temp;
  #L4bf028.  if v3 == 0 then goto L4bf02e;
  #L4bf02c.  return @kind void;
  #L4bf02e.  call `c`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.c:()V` @kind virtual;
  #L4bf034.  return @kind void;
  #L4bf036.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bf038.  @monitorexit v3
  #L4bf03a.  throw v4;
  catch `java.lang.Throwable` @[L4bf00e..L4bf016] goto L4bf036;
  catch `java.lang.Throwable` @[L4bf038..L4bf03a] goto L4bf036;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bed00.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.i` @type ^`boolean` @kind boolean;
  #L4bed04.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bf060.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4bf064.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4bf06a.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.b:()V` @kind virtual;
  #L4bf070.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bf084.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4bf088.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4bf08e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bf092.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bf098.  v2:= temp;
  #L4bf09a.  if v2 == 0 then goto L4bf0b6;
  #L4bf09e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.b` @type ^`boolean` @kind boolean;
  #L4bf0a2.  if v2 != 0 then goto L4bf0b0;
  #L4bf0a6.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4bf0aa.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4bf0b0.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.b:()V` @kind virtual;
  #L4bf0b6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bf0c8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.f` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4bf0cc.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4bf0d2.  v3:= temp @kind object;
  #L4bf0d4.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L4bf0d8.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4bf0de.  v3:= (`io.reactivex.rxjava3.core.SingleSource`) v3 @kind object;
  #L4bf0e2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4bf0e6.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4bf0ec.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a$a`;
  #L4bf0f0.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;)V` @kind direct;
  #L4bf0f6.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.i` @type ^`boolean` @kind boolean;
  #L4bf0fa.  if v1 != 0 then goto L4bf114;
  #L4bf0fe.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4bf102.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4bf108.  v1:= temp;
  #L4bf10a.  if v1 == 0 then goto L4bf114;
  #L4bf10e.  call `subscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/SingleSource;.subscribe:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind interface;
  #L4bf114.  return @kind void;
  #L4bf116.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bf118.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bf11e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4bf122.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bf128.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bf12e.  return @kind void;
  catch `java.lang.Throwable` @[L4bf0c8..L4bf0e2] goto L4bf116;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bf14c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4bf150.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4bf156.  v0:= temp;
  #L4bf158.  if v0 == 0 then goto L4bf16a;
  #L4bf15c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4bf160.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4bf164.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4bf16a.  return @kind void;
}
