record `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReferenceArray` @kind class, `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$d` @kind interface {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c.b` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$c;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ae5b8.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L4ae5be.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4ae5c2.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4ae5c8.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4ae5cc.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$c;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ae60c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c.b` @type ^`int`;
  #L4ae610.  v1:= 0I;
  #L4ae612.  call `lazySet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L4ae618.  v0:= v0 + 1;
  #L4ae61c.  v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c.b` @type ^`int` := v0;
  #L4ae620.  return @kind void;
}
procedure `int` `c`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$c;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ae4fc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c.b` @type ^`int`;
  #L4ae500.  return v0;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$c;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ae5e0.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$c;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4ae5e6.  v0:= temp @kind object;
  #L4ae5e8.  if v0 == 0 then goto L4ae5fa;
  #L4ae5ec.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$c;.isEmpty:()Z` @kind virtual;
  #L4ae5f2.  v0:= temp;
  #L4ae5f4.  if v0 != 0 then goto L4ae5fa;
  #L4ae5f8.  goto L4ae5e0;
  #L4ae5fa.  return @kind void;
}
procedure `int` `d`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$c;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ae514.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4ae518.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4ae51e.  v0:= temp;
  #L4ae520.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$c;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ae478.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c.b` @type ^`int`;
  #L4ae47c.  call temp:= `d`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$c;.d:()I` @kind virtual;
  #L4ae482.  v1:= temp;
  #L4ae484.  if v0 != v1 then goto L4ae48c;
  #L4ae488.  v0:= 1I;
  #L4ae48a.  goto L4ae48e;
  #L4ae48c.  v0:= 0I;
  #L4ae48e.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$c;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ae4a0.  v0:= "value is null" @kind object;
  #L4ae4a4.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ae4aa.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4ae4ae.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ae4b4.  v0:= temp;
  #L4ae4b6.  call temp:= `length`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L4ae4bc.  v1:= temp;
  #L4ae4be.  if v0 >= v1 then goto L4ae4cc;
  #L4ae4c2.  call `lazySet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L4ae4c8.  v3:= 1I;
  #L4ae4ca.  return v3;
  #L4ae4cc.  v3:= 0I;
  #L4ae4ce.  return v3;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$c;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L4ae4e0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L4ae4e4.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L4ae4ea.  throw v1;
}
procedure `java.lang.Object` `peek`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$c;.peek:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ae534.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c.b` @type ^`int`;
  #L4ae538.  call temp:= `length`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L4ae53e.  v1:= temp;
  #L4ae540.  if v0 != v1 then goto L4ae548;
  #L4ae544.  v0:= 0I;
  #L4ae546.  return v0 @kind object;
  #L4ae548.  call temp:= `get`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4ae54e.  v0:= temp @kind object;
  #L4ae550.  return v0 @kind object;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$c;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ae564.  v0:= v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c.b` @type ^`int`;
  #L4ae568.  call temp:= `length`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L4ae56e.  v1:= temp;
  #L4ae570.  v2:= 0I;
  #L4ae572.  if v0 != v1 then goto L4ae578;
  #L4ae576.  return v2 @kind object;
  #L4ae578.  v1:= v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4ae57c.  call temp:= `get`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4ae582.  v3:= temp @kind object;
  #L4ae584.  if v3 == 0 then goto L4ae598;
  #L4ae588.  v1:= v0 + 1;
  #L4ae58c.  v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c.b` @type ^`int` := v1;
  #L4ae590.  call `lazySet`(v4, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L4ae596.  return v3 @kind object;
  #L4ae598.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4ae59e.  v3:= temp;
  #L4ae5a0.  if v3 != v0 then goto L4ae57c;
  #L4ae5a4.  return v2 @kind object;
}
