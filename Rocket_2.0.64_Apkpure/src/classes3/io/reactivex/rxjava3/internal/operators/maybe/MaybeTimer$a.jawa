record `io.reactivex.rxjava3.internal.operators.maybe.MaybeTimer$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeTimer$a.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeTimer$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimer$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimer$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b0368.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b036e.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimer$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4b0372.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimer$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimer$a;.a:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag  {
    temp;

  #L4b03c4.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b03ca.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimer$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimer$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4b0384.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b038a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimer$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimer$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b0340.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b0346.  v0:= temp @kind object;
  #L4b0348.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4b034c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b0352.  v0:= temp;
  #L4b0354.  return v0;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimer$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimer$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b039c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimer$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4b03a0.  v1:= 0L;
  #L4b03a4.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4b03aa.  v1:= temp @kind object;
  #L4b03ac.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4b03b2.  return @kind void;
}
