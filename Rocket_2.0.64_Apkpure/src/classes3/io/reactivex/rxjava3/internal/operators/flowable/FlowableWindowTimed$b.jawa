record `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a` @kind class, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.n` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.o` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.p` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.q` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.r` @AccessFlag ;
  `io.reactivex.rxjava3.processors.UnicastProcessor` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.s` @AccessFlag ;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.t` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b` v6 @kind this, `org.reactivestreams.Subscriber` v7 @kind object, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.rxjava3.core.Scheduler` v11 @kind object, `int` v12 , `long` v13 , `boolean` v15 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;IJZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4a71b0.  v0:= v6 @kind object;
  #L4a71b2.  v1:= v7 @kind object;
  #L4a71b4.  v2:= v8 @kind wide;
  #L4a71b6.  v4:= v10 @kind object;
  #L4a71b8.  v5:= v12;
  #L4a71ba.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;I)V` @kind direct;
  #L4a71c0.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.n` @type ^`io.reactivex.rxjava3.core.Scheduler` := v11 @kind object;
  #L4a71c4.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.p` @type ^`long` := v13 @kind wide;
  #L4a71c8.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.o` @type ^`boolean` := v15 @kind boolean;
  #L4a71cc.  if v15 == 0 then goto L4a71de;
  #L4a71d0.  call temp:= `createWorker`(v11) @signature `Lio/reactivex/rxjava3/core/Scheduler;.createWorker:()Lio/reactivex/rxjava3/core/Scheduler$Worker;` @kind virtual;
  #L4a71d6.  v7:= temp @kind object;
  #L4a71d8.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.q` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v7 @kind object;
  #L4a71dc.  goto L4a71e4;
  #L4a71de.  v7:= 0I;
  #L4a71e0.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.q` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v7 @kind object;
  #L4a71e4.  v7:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4a71e8.  call `<init>`(v7) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4a71ee.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.t` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v7 @kind object;
  #L4a71f2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4a7228.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.t` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4a722c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4a7232.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.q` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4a7236.  if v0 == 0 then goto L4a7240;
  #L4a723a.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4a7240.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b` v11 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4a7254.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a7258.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4a725e.  v0:= temp;
  #L4a7260.  if v0 != 0 then goto L4a736c;
  #L4a7264.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a7268.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a726e.  v0:= temp @kind wide;
  #L4a7270.  v2:= 0L;
  #L4a7274.  v4:= lcmp(v0, v2);
  #L4a7278.  if v4 == 0 then goto L4a7336;
  #L4a727c.  v0:= 1L;
  #L4a7280.  v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`long` := v0 @kind wide;
  #L4a7284.  v2:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4a7288.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a728e.  v2:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.e` @type ^`int`;
  #L4a7292.  call temp:= `create`(v2, v11) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind static;
  #L4a7298.  v2:= temp @kind object;
  #L4a729a.  v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.s` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v2 @kind object;
  #L4a729e.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.b`;
  #L4a72a2.  v3:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.s` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` @kind object;
  #L4a72a6.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.<init>:(Lio/reactivex/rxjava3/processors/FlowableProcessor;)V` @kind direct;
  #L4a72ac.  v3:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a72b0.  call `onNext`(v3, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a72b6.  v5:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b$a`;
  #L4a72ba.  call `<init>`(v5, v11, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;J)V` @kind direct;
  #L4a72c0.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.o` @type ^`boolean` @kind boolean;
  #L4a72c4.  if v0 == 0 then goto L4a72ea;
  #L4a72c8.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.t` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4a72cc.  v4:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.q` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4a72d0.  v8:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.c` @type ^`long` @kind wide;
  #L4a72d4.  v10:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4a72d8.  v6:= v8 @kind wide;
  #L4a72da.  call temp:= `schedulePeriodically`(v4, v5, v6, v8, v10) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4a72e0.  v1:= temp @kind object;
  #L4a72e2.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4a72e8.  goto L4a730a;
  #L4a72ea.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.t` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4a72ee.  v4:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.n` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4a72f2.  v8:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.c` @type ^`long` @kind wide;
  #L4a72f6.  v10:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4a72fa.  v6:= v8 @kind wide;
  #L4a72fc.  call temp:= `schedulePeriodicallyDirect`(v4, v5, v6, v8, v10) @signature `Lio/reactivex/rxjava3/core/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4a7302.  v1:= temp @kind object;
  #L4a7304.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4a730a.  call temp:= `e`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.e:()Z` @kind virtual;
  #L4a7310.  v0:= temp;
  #L4a7312.  if v0 == 0 then goto L4a7320;
  #L4a7316.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.s` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` @kind object;
  #L4a731a.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4a7320.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a7324.  v1:= 9223372036854775807L;
  #L4a732e.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a7334.  goto L4a736c;
  #L4a7336.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a733a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a7340.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a7344.  v1:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4a7348.  v2:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`long` @kind wide;
  #L4a734c.  call temp:= `e`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed;.e:(J)Ljava/lang/String;` @kind static;
  #L4a7352.  v2:= temp @kind object;
  #L4a7354.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a735a.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a7360.  call `a`(v11) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.a:()V` @kind virtual;
  #L4a7366.  v0:= 1I;
  #L4a7368.  v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`boolean` := v0 @kind boolean;
  #L4a736c.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b` v12 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4a7380.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a7386.  v0:= temp;
  #L4a7388.  if v0 == 0 then goto L4a738e;
  #L4a738c.  return @kind void;
  #L4a738e.  v0:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4a7392.  v1:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a7396.  v2:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.s` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` @kind object;
  #L4a739a.  v3:= 1I;
  #L4a739c.  v4:= 1I;
  #L4a739e.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`boolean` @kind boolean;
  #L4a73a2.  v6:= 0I;
  #L4a73a4.  if v5 == 0 then goto L4a73b6;
  #L4a73a8.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4a73ae.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.s` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v6 @kind object;
  #L4a73b2.  v2:= v6 @kind object;
  #L4a73b4.  goto L4a7478;
  #L4a73b6.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.h` @type ^`boolean` @kind boolean;
  #L4a73ba.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4a73c0.  v6:= temp @kind object;
  #L4a73c2.  if v6 != 0 then goto L4a73ca;
  #L4a73c6.  v7:= 1I;
  #L4a73c8.  goto L4a73cc;
  #L4a73ca.  v7:= 0I;
  #L4a73cc.  if v5 == 0 then goto L4a740a;
  #L4a73d0.  if v7 == 0 then goto L4a740a;
  #L4a73d4.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.i` @type ^`java.lang.Throwable` @kind object;
  #L4a73d8.  if v5 == 0 then goto L4a73ee;
  #L4a73dc.  if v2 == 0 then goto L4a73e6;
  #L4a73e0.  call `onError`(v2, v5) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a73e6.  call `onError`(v1, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a73ec.  goto L4a73fe;
  #L4a73ee.  if v2 == 0 then goto L4a73f8;
  #L4a73f2.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4a73f8.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a73fe.  call `a`(v12) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.a:()V` @kind virtual;
  #L4a7404.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`boolean` := v3 @kind boolean;
  #L4a7408.  goto L4a739e;
  #L4a740a.  if v7 != 0 then goto L4a7478;
  #L4a740e.  v5:= instanceof @variable v6 @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b$a` @kind boolean;
  #L4a7412.  v7:= 0L;
  #L4a7416.  if v5 == 0 then goto L4a7444;
  #L4a741a.  v6:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b$a`) v6 @kind object;
  #L4a741e.  v5:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b$a.b` @type ^`long` @kind wide;
  #L4a7422.  v9:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`long` @kind wide;
  #L4a7426.  v11:= lcmp(v5, v9);
  #L4a742a.  if v11 == 0 then goto L4a7436;
  #L4a742e.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.o` @type ^`boolean` @kind boolean;
  #L4a7432.  if v5 != 0 then goto L4a739e;
  #L4a7436.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.r` @type ^`long` := v7 @kind wide;
  #L4a743a.  call temp:= `f`(v12, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.f:(Lio/reactivex/rxjava3/processors/UnicastProcessor;)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind virtual;
  #L4a7440.  v2:= temp @kind object;
  #L4a7442.  goto L4a739e;
  #L4a7444.  if v2 == 0 then goto L4a739e;
  #L4a7448.  call `onNext`(v2, v6) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a744e.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.r` @type ^`long` @kind wide;
  #L4a7452.  v9:= 1L;
  #L4a7456.  v5:= v5 + v9 @kind long;
  #L4a7458.  v9:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.p` @type ^`long` @kind wide;
  #L4a745c.  v11:= lcmp(v5, v9);
  #L4a7460.  if v11 != 0 then goto L4a7472;
  #L4a7464.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.r` @type ^`long` := v7 @kind wide;
  #L4a7468.  call temp:= `f`(v12, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.f:(Lio/reactivex/rxjava3/processors/UnicastProcessor;)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind virtual;
  #L4a746e.  v2:= temp @kind object;
  #L4a7470.  goto L4a739e;
  #L4a7472.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.r` @type ^`long` := v5 @kind wide;
  #L4a7476.  goto L4a739e;
  #L4a7478.  v4:= -v4 @kind int;
  #L4a747a.  call temp:= `addAndGet`(v12, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4a7480.  v4:= temp;
  #L4a7482.  if v4 != 0 then goto L4a739e;
  #L4a7486.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b` v1 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b$a` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.e:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b$a;)V` @AccessFlag  {
    temp;
    v0;

  #L4a7204.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4a7208.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4a720e.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.c:()V` @kind virtual;
  #L4a7214.  return @kind void;
}
procedure `io.reactivex.rxjava3.processors.UnicastProcessor` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b` v11 @kind this, `io.reactivex.rxjava3.processors.UnicastProcessor` v12 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.f:(Lio/reactivex/rxjava3/processors/UnicastProcessor;)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4a70b0.  if v12 == 0 then goto L4a70bc;
  #L4a70b4.  call `onComplete`(v12) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4a70ba.  v12:= 0I;
  #L4a70bc.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a70c0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4a70c6.  v0:= temp;
  #L4a70c8.  if v0 == 0 then goto L4a70d4;
  #L4a70cc.  call `a`(v11) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.a:()V` @kind virtual;
  #L4a70d2.  goto L4a719c;
  #L4a70d4.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`long` @kind wide;
  #L4a70d8.  v2:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a70dc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a70e2.  v2:= temp @kind wide;
  #L4a70e4.  v4:= lcmp(v2, v0);
  #L4a70e8.  if v4 != 0 then goto L4a7120;
  #L4a70ec.  v2:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a70f0.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a70f6.  call `a`(v11) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.a:()V` @kind virtual;
  #L4a70fc.  v2:= 1I;
  #L4a70fe.  v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`boolean` := v2 @kind boolean;
  #L4a7102.  v2:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a7106.  v3:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4a710a.  call temp:= `e`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed;.e:(J)Ljava/lang/String;` @kind static;
  #L4a7110.  v0:= temp @kind object;
  #L4a7112.  call `<init>`(v3, v0) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a7118.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a711e.  goto L4a719c;
  #L4a7120.  v2:= 1L;
  #L4a7124.  v0:= v0 + v2 @kind long;
  #L4a7126.  v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`long` := v0 @kind wide;
  #L4a712a.  v12:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4a712e.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a7134.  v12:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.e` @type ^`int`;
  #L4a7138.  call temp:= `create`(v12, v11) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind static;
  #L4a713e.  v12:= temp @kind object;
  #L4a7140.  v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.s` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v12 @kind object;
  #L4a7144.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.b`;
  #L4a7148.  call `<init>`(v2, v12) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.<init>:(Lio/reactivex/rxjava3/processors/FlowableProcessor;)V` @kind direct;
  #L4a714e.  v3:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a7152.  call `onNext`(v3, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a7158.  v3:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.o` @type ^`boolean` @kind boolean;
  #L4a715c.  if v3 == 0 then goto L4a718a;
  #L4a7160.  v3:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.t` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4a7164.  v4:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.q` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4a7168.  v5:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b$a`;
  #L4a716c.  call `<init>`(v5, v11, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;J)V` @kind direct;
  #L4a7172.  v8:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.c` @type ^`long` @kind wide;
  #L4a7176.  v10:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4a717a.  v6:= v8 @kind wide;
  #L4a717c.  call temp:= `schedulePeriodically`(v4, v5, v6, v8, v10) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4a7182.  v0:= temp @kind object;
  #L4a7184.  call temp:= `update`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.update:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4a718a.  call temp:= `e`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.e:()Z` @kind virtual;
  #L4a7190.  v0:= temp;
  #L4a7192.  if v0 == 0 then goto L4a719c;
  #L4a7196.  call `onComplete`(v12) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4a719c.  return v12 @kind object;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.run:()V` @AccessFlag PUBLIC {
    temp;

  #L4a7498.  call `d`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.d:()V` @kind virtual;
  #L4a749e.  return @kind void;
}
