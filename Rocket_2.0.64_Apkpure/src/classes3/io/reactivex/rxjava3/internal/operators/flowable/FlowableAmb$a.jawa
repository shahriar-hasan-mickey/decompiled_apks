record `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a` @kind class @AccessFlag FINAL extends `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b`[] `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$a;.<init>:(Lorg/reactivestreams/Subscriber;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4875f0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4875f6.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4875fa.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L487600.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L487604.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L487608.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b`[v3];
  #L48760c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b`[] := v2 @kind object;
  #L487610.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a` v7 @kind this, `org.reactivestreams.Publisher`[] v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$a;.a:([Lorg/reactivestreams/Publisher;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4876d4.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b`[] @kind object;
  #L4876d8.  v1:= length @variable v0;
  #L4876da.  v2:= 0I;
  #L4876dc.  v3:= 0I;
  #L4876de.  if v3 >= v1 then goto L4876fc;
  #L4876e2.  v4:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b`;
  #L4876e6.  v5:= v3 + 1;
  #L4876ea.  v6:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4876ee.  call `<init>`(v4, v7, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$a;ILorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4876f4.  v0[v3]:= v4 @kind object;
  #L4876f8.  v3:= v5;
  #L4876fa.  goto L4876de;
  #L4876fc.  v3:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L487700.  call `lazySet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L487706.  v3:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48770a.  call `onSubscribe`(v3, v7) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L487710.  if v2 >= v1 then goto L48773a;
  #L487714.  v3:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L487718.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L48771e.  v3:= temp;
  #L487720.  if v3 == 0 then goto L487726;
  #L487724.  return @kind void;
  #L487726.  v3:= v8[v2] @kind object;
  #L48772a.  v4:= v0[v2] @kind object;
  #L48772e.  call `subscribe`(v3, v4) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L487734.  v2:= v2 + 1;
  #L487738.  goto L487710;
  #L48773a.  return @kind void;
}
procedure `boolean` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a` v4 @kind this, `int` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$a;.b:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L487598.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L48759c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4875a2.  v0:= temp;
  #L4875a4.  v1:= 0I;
  #L4875a6.  if v0 != 0 then goto L4875de;
  #L4875aa.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4875ae.  call temp:= `compareAndSet`(v0, v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4875b4.  v0:= temp;
  #L4875b6.  if v0 == 0 then goto L4875de;
  #L4875ba.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b`[] @kind object;
  #L4875be.  v2:= length @variable v0;
  #L4875c0.  if v1 >= v2 then goto L4875da;
  #L4875c4.  v3:= v1 + 1;
  #L4875c8.  if v3 == v5 then goto L4875d6;
  #L4875cc.  v1:= v0[v1] @kind object;
  #L4875d0.  call `cancel`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$b;.cancel:()V` @kind virtual;
  #L4875d6.  v1:= v3;
  #L4875d8.  goto L4875c0;
  #L4875da.  v5:= 1I;
  #L4875dc.  return v5;
  #L4875de.  return v1;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L487624.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L487628.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L48762e.  v0:= temp;
  #L487630.  v1:= -1I;
  #L487632.  if v0 == v1 then goto L48765c;
  #L487636.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L48763a.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L487640.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b`[] @kind object;
  #L487644.  v1:= length @variable v0;
  #L487646.  v2:= 0I;
  #L487648.  if v2 >= v1 then goto L48765c;
  #L48764c.  v3:= v0[v2] @kind object;
  #L487650.  call `cancel`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$b;.cancel:()V` @kind virtual;
  #L487656.  v2:= v2 + 1;
  #L48765a.  goto L487648;
  #L48765c.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L487670.  call temp:= `validate`(v5) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L487676.  v0:= temp;
  #L487678.  if v0 == 0 then goto L4876c0;
  #L48767c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L487680.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L487686.  v0:= temp;
  #L487688.  if v0 <= 0 then goto L4876a0;
  #L48768c.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b`[] @kind object;
  #L487690.  v0:= v0 + -1;
  #L487694.  v0:= v1[v0] @kind object;
  #L487698.  call `request`(v0, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$b;.request:(J)V` @kind virtual;
  #L48769e.  goto L4876c0;
  #L4876a0.  if v0 != 0 then goto L4876c0;
  #L4876a4.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b`[] @kind object;
  #L4876a8.  v1:= length @variable v0;
  #L4876aa.  v2:= 0I;
  #L4876ac.  if v2 >= v1 then goto L4876c0;
  #L4876b0.  v3:= v0[v2] @kind object;
  #L4876b4.  call `request`(v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$b;.request:(J)V` @kind virtual;
  #L4876ba.  v2:= v2 + 1;
  #L4876be.  goto L4876ac;
  #L4876c0.  return @kind void;
}
