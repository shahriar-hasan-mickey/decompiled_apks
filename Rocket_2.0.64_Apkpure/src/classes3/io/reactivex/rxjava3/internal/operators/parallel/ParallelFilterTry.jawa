record `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.parallel.ParallelFlowable` @kind class {
  `io.reactivex.rxjava3.parallel.ParallelFlowable` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Predicate` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry` v0 @kind this, `io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind object, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Predicate;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4d05e8.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L4d05ee.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` := v1 @kind object;
  #L4d05f2.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.b` @type ^`io.reactivex.rxjava3.functions.Predicate` := v2 @kind object;
  #L4d05f6.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v3 @kind object;
  #L4d05fa.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d05c8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` @kind object;
  #L4d05cc.  call temp:= `parallelism`(v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L4d05d2.  v0:= temp;
  #L4d05d4.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry` v7 @kind this, `org.reactivestreams.Subscriber`[] v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4d060c.  call temp:= `validate`(v7, v8) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L4d0612.  v0:= temp;
  #L4d0614.  if v0 != 0 then goto L4d061a;
  #L4d0618.  return @kind void;
  #L4d061a.  v0:= length @variable v8;
  #L4d061c.  v1:= new `org.reactivestreams.Subscriber`[v0];
  #L4d0620.  v2:= 0I;
  #L4d0622.  if v2 >= v0 then goto L4d066a;
  #L4d0626.  v3:= v8[v2] @kind object;
  #L4d062a.  v4:= instanceof @variable v3 @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L4d062e.  if v4 == 0 then goto L4d064e;
  #L4d0632.  v4:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$c`;
  #L4d0636.  v3:= (`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber`) v3 @kind object;
  #L4d063a.  v5:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.b` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L4d063e.  v6:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4d0642.  call `<init>`(v4, v3, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$c;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Predicate;Lio/reactivex/rxjava3/functions/BiFunction;)V` @kind direct;
  #L4d0648.  v1[v2]:= v4 @kind object;
  #L4d064c.  goto L4d0664;
  #L4d064e.  v4:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$d`;
  #L4d0652.  v5:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.b` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L4d0656.  v6:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4d065a.  call `<init>`(v4, v3, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$d;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Predicate;Lio/reactivex/rxjava3/functions/BiFunction;)V` @kind direct;
  #L4d0660.  v1[v2]:= v4 @kind object;
  #L4d0664.  v2:= v2 + 1;
  #L4d0668.  goto L4d0622;
  #L4d066a.  v8:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` @kind object;
  #L4d066e.  call `subscribe`(v8, v1) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4d0674.  return @kind void;
}
