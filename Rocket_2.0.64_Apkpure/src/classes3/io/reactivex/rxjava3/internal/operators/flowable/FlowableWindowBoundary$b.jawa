record `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.g` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.i` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.j` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.processors.UnicastProcessor` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.k` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.l` @AccessFlag ;
}
global `java.lang.Object` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.m` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4a6088.  v0:= new `java.lang.Object`;
  #L4a608c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a6092.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.m` @type ^`java.lang.Object` := v0 @kind object;
  #L4a6096.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.<init>:(Lorg/reactivestreams/Subscriber;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a60a8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4a60ae.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4a60b2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.b` @type ^`int` := v2;
  #L4a60b6.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a`;
  #L4a60ba.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;)V` @kind direct;
  #L4a60c0.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a` := v1 @kind object;
  #L4a60c4.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4a60c8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4a60ce.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4a60d2.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4a60d6.  v2:= 1I;
  #L4a60d8.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4a60de.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4a60e2.  v1:= new `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue`;
  #L4a60e6.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4a60ec.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.f` @type ^`io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` := v1 @kind object;
  #L4a60f0.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4a60f4.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4a60fa.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4a60fe.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4a6102.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4a6108.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4a610c.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4a6110.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a6116.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.i` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4a611a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` v12 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4a6178.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a617e.  v0:= temp;
  #L4a6180.  if v0 == 0 then goto L4a6186;
  #L4a6184.  return @kind void;
  #L4a6186.  v0:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a618a.  v1:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.f` @type ^`io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` @kind object;
  #L4a618e.  v2:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a6192.  v3:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.l` @type ^`long` @kind wide;
  #L4a6196.  v5:= 1I;
  #L4a6198.  v6:= 1I;
  #L4a619a.  v7:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4a619e.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4a61a4.  v7:= temp;
  #L4a61a6.  v8:= 0I;
  #L4a61a8.  if v7 != 0 then goto L4a61b8;
  #L4a61ac.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L4a61b2.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.k` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v8 @kind object;
  #L4a61b6.  return @kind void;
  #L4a61b8.  v7:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.k` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` @kind object;
  #L4a61bc.  v9:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.j` @type ^`boolean` @kind boolean;
  #L4a61c0.  if v9 == 0 then goto L4a61f4;
  #L4a61c4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a61ca.  v10:= temp @kind object;
  #L4a61cc.  if v10 == 0 then goto L4a61f4;
  #L4a61d0.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L4a61d6.  call temp:= `terminate`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4a61dc.  v1:= temp @kind object;
  #L4a61de.  if v7 == 0 then goto L4a61ec;
  #L4a61e2.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.k` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v8 @kind object;
  #L4a61e6.  call `onError`(v7, v1) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a61ec.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a61f2.  return @kind void;
  #L4a61f4.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4a61fa.  v10:= temp @kind object;
  #L4a61fc.  if v10 != 0 then goto L4a6204;
  #L4a6200.  v11:= 1I;
  #L4a6202.  goto L4a6206;
  #L4a6204.  v11:= 0I;
  #L4a6206.  if v9 == 0 then goto L4a6246;
  #L4a620a.  if v11 == 0 then goto L4a6246;
  #L4a620e.  call temp:= `terminate`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4a6214.  v1:= temp @kind object;
  #L4a6216.  if v1 != 0 then goto L4a6230;
  #L4a621a.  if v7 == 0 then goto L4a6228;
  #L4a621e.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.k` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v8 @kind object;
  #L4a6222.  call `onComplete`(v7) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4a6228.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a622e.  goto L4a6244;
  #L4a6230.  if v7 == 0 then goto L4a623e;
  #L4a6234.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.k` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v8 @kind object;
  #L4a6238.  call `onError`(v7, v1) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a623e.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a6244.  return @kind void;
  #L4a6246.  if v11 == 0 then goto L4a625e;
  #L4a624a.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.l` @type ^`long` := v3 @kind wide;
  #L4a624e.  v6:= -v6 @kind int;
  #L4a6250.  call temp:= `addAndGet`(v12, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4a6256.  v6:= temp;
  #L4a6258.  if v6 != 0 then goto L4a619a;
  #L4a625c.  return @kind void;
  #L4a625e.  v9:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.m` @type ^`java.lang.Object` @kind object;
  #L4a6262.  if v10 == v9 then goto L4a626e;
  #L4a6266.  call `onNext`(v7, v10) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a626c.  goto L4a619a;
  #L4a626e.  if v7 == 0 then goto L4a627c;
  #L4a6272.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.k` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v8 @kind object;
  #L4a6276.  call `onComplete`(v7) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4a627c.  v7:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a6280.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4a6286.  v7:= temp;
  #L4a6288.  if v7 != 0 then goto L4a619a;
  #L4a628c.  v7:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.b` @type ^`int`;
  #L4a6290.  call temp:= `create`(v7, v12) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind static;
  #L4a6296.  v7:= temp @kind object;
  #L4a6298.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.k` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v7 @kind object;
  #L4a629c.  v8:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4a62a0.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a62a6.  v8:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a62aa.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a62b0.  v8:= temp @kind wide;
  #L4a62b2.  v10:= lcmp(v3, v8);
  #L4a62b6.  if v10 == 0 then goto L4a62e6;
  #L4a62ba.  v8:= 1L;
  #L4a62be.  v3:= v3 + v8 @kind long;
  #L4a62c0.  v8:= new `io.reactivex.rxjava3.internal.operators.flowable.b`;
  #L4a62c4.  call `<init>`(v8, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.<init>:(Lio/reactivex/rxjava3/processors/FlowableProcessor;)V` @kind direct;
  #L4a62ca.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a62d0.  call temp:= `e`(v8) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.e:()Z` @kind virtual;
  #L4a62d6.  v8:= temp;
  #L4a62d8.  if v8 == 0 then goto L4a619a;
  #L4a62dc.  call `onComplete`(v7) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4a62e2.  goto L4a619a;
  #L4a62e6.  v7:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a62ea.  call temp:= `cancel`(v7) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4a62f0.  v7:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a` @kind object;
  #L4a62f4.  call `dispose`(v7) @signature `Lio/reactivex/rxjava3/subscribers/DisposableSubscriber;.dispose:()V` @kind virtual;
  #L4a62fa.  v7:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4a62fe.  v8:= "Could not deliver a window due to lack of requests" @kind object;
  #L4a6302.  call `<init>`(v7, v8) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a6308.  call temp:= `tryAddThrowableOrReport`(v2, v7) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4a630e.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.j` @type ^`boolean` := v5 @kind boolean;
  #L4a6312.  goto L4a619a;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4a6328.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a632c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4a6332.  v0:= 1I;
  #L4a6334.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.j` @type ^`boolean` := v0 @kind boolean;
  #L4a6338.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.a:()V` @kind virtual;
  #L4a633e.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.c:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4a6350.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a6354.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4a635a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a635e.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4a6364.  v2:= temp;
  #L4a6366.  if v2 == 0 then goto L4a6376;
  #L4a636a.  v2:= 1I;
  #L4a636c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.j` @type ^`boolean` := v2 @kind boolean;
  #L4a6370.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.a:()V` @kind virtual;
  #L4a6376.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a612c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a6130.  v1:= 0I;
  #L4a6132.  v2:= 1I;
  #L4a6134.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4a613a.  v0:= temp;
  #L4a613c.  if v0 == 0 then goto L4a6164;
  #L4a6140.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a` @kind object;
  #L4a6144.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/subscribers/DisposableSubscriber;.dispose:()V` @kind virtual;
  #L4a614a.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4a614e.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4a6154.  v0:= temp;
  #L4a6156.  if v0 != 0 then goto L4a6164;
  #L4a615a.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a615e.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4a6164.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4a6388.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.f` @type ^`io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` @kind object;
  #L4a638c.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.m` @type ^`java.lang.Object` @kind object;
  #L4a6390.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4a6396.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.a:()V` @kind virtual;
  #L4a639c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a63b0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a` @kind object;
  #L4a63b4.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/subscribers/DisposableSubscriber;.dispose:()V` @kind virtual;
  #L4a63ba.  v0:= 1I;
  #L4a63bc.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.j` @type ^`boolean` := v0 @kind boolean;
  #L4a63c0.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.a:()V` @kind virtual;
  #L4a63c6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a63d8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a` @kind object;
  #L4a63dc.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/subscribers/DisposableSubscriber;.dispose:()V` @kind virtual;
  #L4a63e2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a63e6.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4a63ec.  v2:= temp;
  #L4a63ee.  if v2 == 0 then goto L4a63fe;
  #L4a63f2.  v2:= 1I;
  #L4a63f4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.j` @type ^`boolean` := v2 @kind boolean;
  #L4a63f8.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.a:()V` @kind virtual;
  #L4a63fe.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a6410.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.f` @type ^`io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` @kind object;
  #L4a6414.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4a641a.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.a:()V` @kind virtual;
  #L4a6420.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a6434.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a6438.  v1:= 9223372036854775807L;
  #L4a6442.  call temp:= `setOnce`(v0, v4, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L4a6448.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a645c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a6460.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4a6466.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a6478.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4a647c.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4a6482.  v0:= temp;
  #L4a6484.  if v0 != 0 then goto L4a6492;
  #L4a6488.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a648c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4a6492.  return @kind void;
}
