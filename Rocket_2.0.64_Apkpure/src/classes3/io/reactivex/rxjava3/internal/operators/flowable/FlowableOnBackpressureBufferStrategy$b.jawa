record `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Action` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.BackpressureOverflowStrategy` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.c` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.e` @AccessFlag FINAL;
  `java.util.Deque` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.i` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.j` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Action` v2 @kind object, `io.reactivex.rxjava3.core.BackpressureOverflowStrategy` v3 @kind object, `long` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/core/BackpressureOverflowStrategy;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49a3a4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L49a3aa.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L49a3ae.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.b` @type ^`io.reactivex.rxjava3.functions.Action` := v2 @kind object;
  #L49a3b2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.c` @type ^`io.reactivex.rxjava3.core.BackpressureOverflowStrategy` := v3 @kind object;
  #L49a3b6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.d` @type ^`long` := v4 @kind wide;
  #L49a3ba.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L49a3be.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L49a3c4.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L49a3c8.  v1:= new `java.util.ArrayDeque`;
  #L49a3cc.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L49a3d2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.f` @type ^`java.util.Deque` := v1 @kind object;
  #L49a3d6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v1 @kind this, `java.util.Deque` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.a:(Ljava/util/Deque;)V` @AccessFlag  {
    temp;
    v0;

  #L49a420.  @monitorenter v2
  #L49a422.  call `clear`(v2) @signature `Ljava/util/Deque;.clear:()V` @kind interface;
  #L49a428.  @monitorexit v2
  #L49a42a.  return @kind void;
  #L49a42c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49a42e.  @monitorexit v2
  #L49a430.  throw v0;
  catch `java.lang.Throwable` @[L49a422..L49a430] goto L49a42c;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v14 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L49a450.  call temp:= `getAndIncrement`(v14) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L49a456.  v0:= temp;
  #L49a458.  if v0 == 0 then goto L49a45e;
  #L49a45c.  return @kind void;
  #L49a45e.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.f` @type ^`java.util.Deque` @kind object;
  #L49a462.  v1:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49a466.  v2:= 1I;
  #L49a468.  v3:= 1I;
  #L49a46a.  v4:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L49a46e.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49a474.  v4:= temp @kind wide;
  #L49a476.  v6:= 0L;
  #L49a47a.  v8:= v6 @kind wide;
  #L49a47c.  v10:= lcmp(v8, v4);
  #L49a480.  if v10 == 0 then goto L49a4ee;
  #L49a484.  v11:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.h` @type ^`boolean` @kind boolean;
  #L49a488.  if v11 == 0 then goto L49a494;
  #L49a48c.  call `a`(v14, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.a:(Ljava/util/Deque;)V` @kind virtual;
  #L49a492.  return @kind void;
  #L49a494.  v11:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.i` @type ^`boolean` @kind boolean;
  #L49a498.  @monitorenter v0
  #L49a49a.  call temp:= `poll`(v0) @signature `Ljava/util/Deque;.poll:()Ljava/lang/Object;` @kind interface;
  #L49a4a0.  v12:= temp @kind object;
  #L49a4a2.  @monitorexit v0
  #L49a4a4.  if v12 != 0 then goto L49a4ac;
  #L49a4a8.  v13:= 1I;
  #L49a4aa.  goto L49a4ae;
  #L49a4ac.  v13:= 0I;
  #L49a4ae.  if v11 == 0 then goto L49a4d4;
  #L49a4b2.  v11:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.j` @type ^`java.lang.Throwable` @kind object;
  #L49a4b6.  if v11 == 0 then goto L49a4c8;
  #L49a4ba.  call `a`(v14, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.a:(Ljava/util/Deque;)V` @kind virtual;
  #L49a4c0.  call `onError`(v1, v11) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49a4c6.  return @kind void;
  #L49a4c8.  if v13 == 0 then goto L49a4d4;
  #L49a4cc.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49a4d2.  return @kind void;
  #L49a4d4.  if v13 == 0 then goto L49a4da;
  #L49a4d8.  goto L49a4ee;
  #L49a4da.  call `onNext`(v1, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L49a4e0.  v10:= 1L;
  #L49a4e4.  v8:= v8 + v10 @kind long;
  #L49a4e6.  goto L49a47c;
  #L49a4e8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49a4ea.  @monitorexit v0
  #L49a4ec.  throw v1;
  #L49a4ee.  if v10 != 0 then goto L49a53e;
  #L49a4f2.  v4:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.h` @type ^`boolean` @kind boolean;
  #L49a4f6.  if v4 == 0 then goto L49a502;
  #L49a4fa.  call `a`(v14, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.a:(Ljava/util/Deque;)V` @kind virtual;
  #L49a500.  return @kind void;
  #L49a502.  v4:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.i` @type ^`boolean` @kind boolean;
  #L49a506.  @monitorenter v0
  #L49a508.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Deque;.isEmpty:()Z` @kind interface;
  #L49a50e.  v5:= temp;
  #L49a510.  @monitorexit v0
  #L49a512.  if v4 == 0 then goto L49a53e;
  #L49a516.  v4:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.j` @type ^`java.lang.Throwable` @kind object;
  #L49a51a.  if v4 == 0 then goto L49a52c;
  #L49a51e.  call `a`(v14, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.a:(Ljava/util/Deque;)V` @kind virtual;
  #L49a524.  call `onError`(v1, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49a52a.  return @kind void;
  #L49a52c.  if v5 == 0 then goto L49a53e;
  #L49a530.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49a536.  return @kind void;
  #L49a538.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49a53a.  @monitorexit v0
  #L49a53c.  throw v1;
  #L49a53e.  v4:= lcmp(v8, v6);
  #L49a542.  if v4 == 0 then goto L49a550;
  #L49a546.  v4:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L49a54a.  call temp:= `produced`(v4, v8) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L49a550.  v3:= -v3 @kind int;
  #L49a552.  call temp:= `addAndGet`(v14, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L49a558.  v3:= temp;
  #L49a55a.  if v3 != 0 then goto L49a46a;
  #L49a55e.  return @kind void;
  catch `java.lang.Throwable` @[L49a49a..L49a4a4] goto L49a4e8;
  catch `java.lang.Throwable` @[L49a4ea..L49a4ec] goto L49a4e8;
  catch `java.lang.Throwable` @[L49a508..L49a512] goto L49a538;
  catch `java.lang.Throwable` @[L49a53a..L49a53c] goto L49a538;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49a3e8.  v0:= 1I;
  #L49a3ea.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.h` @type ^`boolean` := v0 @kind boolean;
  #L49a3ee.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49a3f2.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L49a3f8.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L49a3fe.  v0:= temp;
  #L49a400.  if v0 != 0 then goto L49a40e;
  #L49a404.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.f` @type ^`java.util.Deque` @kind object;
  #L49a408.  call `a`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.a:(Ljava/util/Deque;)V` @kind virtual;
  #L49a40e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49a598.  v0:= 1I;
  #L49a59a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.i` @type ^`boolean` := v0 @kind boolean;
  #L49a59e.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.b:()V` @kind virtual;
  #L49a5a4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49a5b8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.i` @type ^`boolean` @kind boolean;
  #L49a5bc.  if v0 == 0 then goto L49a5c8;
  #L49a5c0.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L49a5c6.  return @kind void;
  #L49a5c8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.j` @type ^`java.lang.Throwable` := v2 @kind object;
  #L49a5cc.  v2:= 1I;
  #L49a5ce.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.i` @type ^`boolean` := v2 @kind boolean;
  #L49a5d2.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.b:()V` @kind virtual;
  #L49a5d8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v8 @kind this, `java.lang.Object` v9 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L49a5ec.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.i` @type ^`boolean` @kind boolean;
  #L49a5f0.  if v0 == 0 then goto L49a5f6;
  #L49a5f4.  return @kind void;
  #L49a5f6.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.f` @type ^`java.util.Deque` @kind object;
  #L49a5fa.  @monitorenter v0
  #L49a5fc.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L49a602.  v1:= temp;
  #L49a604.  v1:= (`long`) v1 @kind i2l;
  #L49a606.  v3:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.d` @type ^`long` @kind wide;
  #L49a60a.  v5:= 0I;
  #L49a60c.  v6:= 1I;
  #L49a60e.  v7:= lcmp(v1, v3);
  #L49a612.  if v7 != 0 then goto L49a654;
  #L49a616.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$a.a` @type ^`int`[] @kind object;
  #L49a61a.  v2:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.c` @type ^`io.reactivex.rxjava3.core.BackpressureOverflowStrategy` @kind object;
  #L49a61e.  call temp:= `ordinal`(v2) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L49a624.  v2:= temp;
  #L49a626.  v1:= v1[v2];
  #L49a62a.  if v1 == v6 then goto L49a644;
  #L49a62e.  v2:= 2I;
  #L49a630.  if v1 == v2 then goto L49a636;
  #L49a634.  goto L49a65c;
  #L49a636.  call temp:= `poll`(v0) @signature `Ljava/util/Deque;.poll:()Ljava/lang/Object;` @kind interface;
  #L49a63c.  call temp:= `offer`(v0, v9) @signature `Ljava/util/Deque;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L49a642.  goto L49a650;
  #L49a644.  call temp:= `pollLast`(v0) @signature `Ljava/util/Deque;.pollLast:()Ljava/lang/Object;` @kind interface;
  #L49a64a.  call temp:= `offer`(v0, v9) @signature `Ljava/util/Deque;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L49a650.  v5:= 1I;
  #L49a652.  goto L49a65a;
  #L49a654.  call temp:= `offer`(v0, v9) @signature `Ljava/util/Deque;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L49a65a.  v6:= 0I;
  #L49a65c.  @monitorexit v0
  #L49a65e.  if v5 == 0 then goto L49a68c;
  #L49a662.  v9:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.b` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L49a666.  if v9 == 0 then goto L49a6b2;
  #L49a66a.  call `run`(v9) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L49a670.  goto L49a6b2;
  #L49a672.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49a674.  call `throwIfFatal`(v9) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49a67a.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49a67e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L49a684.  call `onError`(v8, v9) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49a68a.  goto L49a6b2;
  #L49a68c.  if v6 == 0 then goto L49a6ac;
  #L49a690.  v9:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49a694.  call `cancel`(v9) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L49a69a.  v9:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L49a69e.  call `<init>`(v9) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L49a6a4.  call `onError`(v8, v9) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49a6aa.  goto L49a6b2;
  #L49a6ac.  call `b`(v8) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.b:()V` @kind virtual;
  #L49a6b2.  return @kind void;
  #L49a6b4.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49a6b6.  @monitorexit v0
  #L49a6b8.  throw v9;
  catch `java.lang.Throwable` @[L49a5fc..L49a65e] goto L49a6b4;
  catch `java.lang.Throwable` @[L49a66a..L49a670] goto L49a672;
  catch `java.lang.Throwable` @[L49a6b6..L49a6b8] goto L49a6b4;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49a6ec.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49a6f0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L49a6f6.  v0:= temp;
  #L49a6f8.  if v0 == 0 then goto L49a71a;
  #L49a6fc.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.g` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L49a700.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49a704.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L49a70a.  v0:= 9223372036854775807L;
  #L49a714.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L49a71a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49a72c.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L49a732.  v0:= temp;
  #L49a734.  if v0 == 0 then goto L49a748;
  #L49a738.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L49a73c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L49a742.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.b:()V` @kind virtual;
  #L49a748.  return @kind void;
}
