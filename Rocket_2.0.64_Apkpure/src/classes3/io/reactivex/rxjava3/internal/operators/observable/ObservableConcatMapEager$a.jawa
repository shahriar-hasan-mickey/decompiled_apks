record `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `io.reactivex.rxjava3.internal.observers.InnerQueuedObserverSupport` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.ErrorMode` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @AccessFlag FINAL;
  `java.util.ArrayDeque` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.h` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.i` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.j` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.k` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.l` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.observers.InnerQueuedObserver` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.m` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.n` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 , `int` v4 , `io.reactivex.rxjava3.internal.util.ErrorMode` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;IILio/reactivex/rxjava3/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b9acc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4b9ad2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4b9ad6.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4b9ada.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.c` @type ^`int` := v3;
  #L4b9ade.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.d` @type ^`int` := v4;
  #L4b9ae2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.e` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` := v5 @kind object;
  #L4b9ae6.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4b9aea.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4b9af0.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4b9af4.  v1:= new `java.util.ArrayDeque`;
  #L4b9af8.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L4b9afe.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.g` @type ^`java.util.ArrayDeque` := v1 @kind object;
  #L4b9b02.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4b9b50.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.m` @type ^`io.reactivex.rxjava3.internal.observers.InnerQueuedObserver` @kind object;
  #L4b9b54.  if v0 == 0 then goto L4b9b5e;
  #L4b9b58.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/InnerQueuedObserver;.dispose:()V` @kind virtual;
  #L4b9b5e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.g` @type ^`java.util.ArrayDeque` @kind object;
  #L4b9b62.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4b9b68.  v0:= temp @kind object;
  #L4b9b6a.  v0:= (`io.reactivex.rxjava3.internal.observers.InnerQueuedObserver`) v0 @kind object;
  #L4b9b6e.  if v0 != 0 then goto L4b9b74;
  #L4b9b72.  return @kind void;
  #L4b9b74.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/InnerQueuedObserver;.dispose:()V` @kind virtual;
  #L4b9b7a.  goto L4b9b5e;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4b9e70.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4b9e76.  v0:= temp;
  #L4b9e78.  if v0 != 0 then goto L4b9e98;
  #L4b9e7c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4b9e80.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b9e86.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L4b9e8c.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4b9e92.  v0:= temp;
  #L4b9e94.  if v0 != 0 then goto L4b9e7c;
  #L4b9e98.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b9b14.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.l` @type ^`boolean` @kind boolean;
  #L4b9b18.  if v0 == 0 then goto L4b9b1e;
  #L4b9b1c.  return @kind void;
  #L4b9b1e.  v0:= 1I;
  #L4b9b20.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.l` @type ^`boolean` := v0 @kind boolean;
  #L4b9b24.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.i` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b9b28.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b9b2e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b9b32.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4b9b38.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.b:()V` @kind virtual;
  #L4b9b3e.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a` v13 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L4b9b8c.  call temp:= `getAndIncrement`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4b9b92.  v0:= temp;
  #L4b9b94.  if v0 == 0 then goto L4b9b9a;
  #L4b9b98.  return @kind void;
  #L4b9b9a.  v0:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4b9b9e.  v1:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.g` @type ^`java.util.ArrayDeque` @kind object;
  #L4b9ba2.  v2:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b9ba6.  v3:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.e` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b9baa.  v4:= 1I;
  #L4b9bac.  v5:= 1I;
  #L4b9bae.  v6:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.n` @type ^`int`;
  #L4b9bb2.  v7:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.c` @type ^`int`;
  #L4b9bb6.  if v6 == v7 then goto L4b9c88;
  #L4b9bba.  v7:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.l` @type ^`boolean` @kind boolean;
  #L4b9bbe.  if v7 == 0 then goto L4b9bd0;
  #L4b9bc2.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b9bc8.  call `a`(v13) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L4b9bce.  return @kind void;
  #L4b9bd0.  v7:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b9bd4.  if v3 != v7 then goto L4b9c08;
  #L4b9bd8.  v7:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b9bdc.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b9be2.  v7:= temp @kind object;
  #L4b9be4.  v7:= (`java.lang.Throwable`) v7 @kind object;
  #L4b9be8.  if v7 == 0 then goto L4b9c08;
  #L4b9bec.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b9bf2.  call `a`(v13) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L4b9bf8.  v0:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b9bfc.  v1:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b9c00.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4b9c06.  return @kind void;
  #L4b9c08.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4b9c0e.  v7:= temp @kind object;
  #L4b9c10.  if v7 != 0 then goto L4b9c16;
  #L4b9c14.  goto L4b9c88;
  #L4b9c16.  v8:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4b9c1a.  call temp:= `apply`(v8, v7) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b9c20.  v7:= temp @kind object;
  #L4b9c22.  v8:= "The mapper returned a null ObservableSource" @kind object;
  #L4b9c26.  call temp:= `requireNonNull`(v7, v8) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b9c2c.  v7:= (`io.reactivex.rxjava3.core.ObservableSource`) v7 @kind object;
  #L4b9c30.  v8:= new `io.reactivex.rxjava3.internal.observers.InnerQueuedObserver`;
  #L4b9c34.  v9:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.d` @type ^`int`;
  #L4b9c38.  call `<init>`(v8, v13, v9) @signature `Lio/reactivex/rxjava3/internal/observers/InnerQueuedObserver;.<init>:(Lio/reactivex/rxjava3/internal/observers/InnerQueuedObserverSupport;I)V` @kind direct;
  #L4b9c3e.  call temp:= `offer`(v1, v8) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4b9c44.  call `subscribe`(v7, v8) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4b9c4a.  v6:= v6 + 1;
  #L4b9c4e.  goto L4b9bb2;
  #L4b9c50.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b9c52.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b9c58.  v2:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.i` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b9c5c.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b9c62.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b9c68.  call `a`(v13) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L4b9c6e.  v0:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b9c72.  call temp:= `tryAddThrowableOrReport`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b9c78.  v0:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b9c7c.  v1:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b9c80.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4b9c86.  return @kind void;
  #L4b9c88.  v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.n` @type ^`int` := v6;
  #L4b9c8c.  v6:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.l` @type ^`boolean` @kind boolean;
  #L4b9c90.  if v6 == 0 then goto L4b9ca2;
  #L4b9c94.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b9c9a.  call `a`(v13) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L4b9ca0.  return @kind void;
  #L4b9ca2.  v6:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b9ca6.  if v3 != v6 then goto L4b9cda;
  #L4b9caa.  v6:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b9cae.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b9cb4.  v6:= temp @kind object;
  #L4b9cb6.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L4b9cba.  if v6 == 0 then goto L4b9cda;
  #L4b9cbe.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b9cc4.  call `a`(v13) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L4b9cca.  v0:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b9cce.  v1:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b9cd2.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4b9cd8.  return @kind void;
  #L4b9cda.  v6:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.m` @type ^`io.reactivex.rxjava3.internal.observers.InnerQueuedObserver` @kind object;
  #L4b9cde.  v7:= 0I;
  #L4b9ce0.  if v6 != 0 then goto L4b9d78;
  #L4b9ce4.  v6:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b9ce8.  if v3 != v6 then goto L4b9d18;
  #L4b9cec.  v6:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b9cf0.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b9cf6.  v6:= temp @kind object;
  #L4b9cf8.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L4b9cfc.  if v6 == 0 then goto L4b9d18;
  #L4b9d00.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b9d06.  call `a`(v13) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L4b9d0c.  v0:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b9d10.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4b9d16.  return @kind void;
  #L4b9d18.  v6:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.j` @type ^`boolean` @kind boolean;
  #L4b9d1c.  call temp:= `poll`(v1) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4b9d22.  v8:= temp @kind object;
  #L4b9d24.  v8:= (`io.reactivex.rxjava3.internal.observers.InnerQueuedObserver`) v8 @kind object;
  #L4b9d28.  if v8 != 0 then goto L4b9d30;
  #L4b9d2c.  v9:= 1I;
  #L4b9d2e.  goto L4b9d32;
  #L4b9d30.  v9:= 0I;
  #L4b9d32.  if v6 == 0 then goto L4b9d6e;
  #L4b9d36.  if v9 == 0 then goto L4b9d6e;
  #L4b9d3a.  v1:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b9d3e.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b9d44.  v1:= temp @kind object;
  #L4b9d46.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L4b9d4a.  if v1 == 0 then goto L4b9d66;
  #L4b9d4e.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b9d54.  call `a`(v13) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L4b9d5a.  v0:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b9d5e.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4b9d64.  goto L4b9d6c;
  #L4b9d66.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4b9d6c.  return @kind void;
  #L4b9d6e.  if v9 != 0 then goto L4b9d76;
  #L4b9d72.  v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.m` @type ^`io.reactivex.rxjava3.internal.observers.InnerQueuedObserver` := v8 @kind object;
  #L4b9d76.  v6:= v8 @kind object;
  #L4b9d78.  if v6 == 0 then goto L4b9e36;
  #L4b9d7c.  call temp:= `queue`(v6) @signature `Lio/reactivex/rxjava3/internal/observers/InnerQueuedObserver;.queue:()Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;` @kind virtual;
  #L4b9d82.  v8:= temp @kind object;
  #L4b9d84.  v9:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.l` @type ^`boolean` @kind boolean;
  #L4b9d88.  if v9 == 0 then goto L4b9d9a;
  #L4b9d8c.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b9d92.  call `a`(v13) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L4b9d98.  return @kind void;
  #L4b9d9a.  call temp:= `isDone`(v6) @signature `Lio/reactivex/rxjava3/internal/observers/InnerQueuedObserver;.isDone:()Z` @kind virtual;
  #L4b9da0.  v9:= temp;
  #L4b9da2.  v10:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b9da6.  if v3 != v10 then goto L4b9dd6;
  #L4b9daa.  v10:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b9dae.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b9db4.  v10:= temp @kind object;
  #L4b9db6.  v10:= (`java.lang.Throwable`) v10 @kind object;
  #L4b9dba.  if v10 == 0 then goto L4b9dd6;
  #L4b9dbe.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b9dc4.  call `a`(v13) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L4b9dca.  v0:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b9dce.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4b9dd4.  return @kind void;
  #L4b9dd6.  v10:= 0I;
  #L4b9dd8.  call temp:= `poll`(v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4b9dde.  v11:= temp @kind object;
  #L4b9de0.  if v11 != 0 then goto L4b9de8;
  #L4b9de4.  v12:= 1I;
  #L4b9de6.  goto L4b9dea;
  #L4b9de8.  v12:= 0I;
  #L4b9dea.  if v9 == 0 then goto L4b9e04;
  #L4b9dee.  if v12 == 0 then goto L4b9e04;
  #L4b9df2.  v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.m` @type ^`io.reactivex.rxjava3.internal.observers.InnerQueuedObserver` := v10 @kind object;
  #L4b9df6.  v6:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.n` @type ^`int`;
  #L4b9dfa.  v6:= v6 - v4 @kind int;
  #L4b9dfc.  v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.n` @type ^`int` := v6;
  #L4b9e00.  goto L4b9bae;
  #L4b9e04.  if v12 == 0 then goto L4b9e0a;
  #L4b9e08.  goto L4b9e36;
  #L4b9e0a.  call `onNext`(v2, v11) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b9e10.  goto L4b9d84;
  #L4b9e12.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b9e14.  call `throwIfFatal`(v6) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b9e1a.  v7:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b9e1e.  call temp:= `tryAddThrowableOrReport`(v7, v6) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b9e24.  v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.m` @type ^`io.reactivex.rxjava3.internal.observers.InnerQueuedObserver` := v10 @kind object;
  #L4b9e28.  v6:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.n` @type ^`int`;
  #L4b9e2c.  v6:= v6 - v4 @kind int;
  #L4b9e2e.  v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.n` @type ^`int` := v6;
  #L4b9e32.  goto L4b9bae;
  #L4b9e36.  v5:= -v5 @kind int;
  #L4b9e38.  call temp:= `addAndGet`(v13, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4b9e3e.  v5:= temp;
  #L4b9e40.  if v5 != 0 then goto L4b9bae;
  #L4b9e44.  return @kind void;
  catch `java.lang.Throwable` @[L4b9c08..L4b9c30] goto L4b9c50;
  catch `java.lang.Throwable` @[L4b9dd8..L4b9de0] goto L4b9e12;
}
procedure `void` `innerComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a` v0 @kind this, `io.reactivex.rxjava3.internal.observers.InnerQueuedObserver` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.innerComplete:(Lio/reactivex/rxjava3/internal/observers/InnerQueuedObserver;)V` @AccessFlag PUBLIC {
    temp;

  #L4b9eac.  call `setDone`(v1) @signature `Lio/reactivex/rxjava3/internal/observers/InnerQueuedObserver;.setDone:()V` @kind virtual;
  #L4b9eb2.  call `drain`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @kind virtual;
  #L4b9eb8.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this, `io.reactivex.rxjava3.internal.observers.InnerQueuedObserver` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.innerError:(Lio/reactivex/rxjava3/internal/observers/InnerQueuedObserver;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b9ecc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b9ed0.  call temp:= `tryAddThrowableOrReport`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b9ed6.  v3:= temp;
  #L4b9ed8.  if v3 == 0 then goto L4b9efe;
  #L4b9edc.  v3:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.e` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b9ee0.  v0:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b9ee4.  if v3 != v0 then goto L4b9ef2;
  #L4b9ee8.  v3:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.i` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b9eec.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b9ef2.  call `setDone`(v2) @signature `Lio/reactivex/rxjava3/internal/observers/InnerQueuedObserver;.setDone:()V` @kind virtual;
  #L4b9ef8.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @kind virtual;
  #L4b9efe.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a` v0 @kind this, `io.reactivex.rxjava3.internal.observers.InnerQueuedObserver` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.innerNext:(Lio/reactivex/rxjava3/internal/observers/InnerQueuedObserver;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4b9f10.  call temp:= `queue`(v1) @signature `Lio/reactivex/rxjava3/internal/observers/InnerQueuedObserver;.queue:()Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;` @kind virtual;
  #L4b9f16.  v1:= temp @kind object;
  #L4b9f18.  call temp:= `offer`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4b9f1e.  call `drain`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @kind virtual;
  #L4b9f24.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b9ab4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.l` @type ^`boolean` @kind boolean;
  #L4b9ab8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b9f38.  v0:= 1I;
  #L4b9f3a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.j` @type ^`boolean` := v0 @kind boolean;
  #L4b9f3e.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @kind virtual;
  #L4b9f44.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b9f58.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b9f5c.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b9f62.  v2:= temp;
  #L4b9f64.  if v2 == 0 then goto L4b9f74;
  #L4b9f68.  v2:= 1I;
  #L4b9f6a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.j` @type ^`boolean` := v2 @kind boolean;
  #L4b9f6e.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @kind virtual;
  #L4b9f74.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b9f88.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.k` @type ^`int`;
  #L4b9f8c.  if v0 != 0 then goto L4b9f9a;
  #L4b9f90.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4b9f94.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4b9f9a.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @kind virtual;
  #L4b9fa0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a` v2 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b9fb4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.i` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b9fb8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b9fbe.  v0:= temp;
  #L4b9fc0.  if v0 == 0 then goto L4ba038;
  #L4b9fc4.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.i` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v3 @kind object;
  #L4b9fc8.  v0:= instanceof @variable v3 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind boolean;
  #L4b9fcc.  if v0 == 0 then goto L4ba01c;
  #L4b9fd0.  v3:= (`io.reactivex.rxjava3.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L4b9fd4.  v0:= 3I;
  #L4b9fd6.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4b9fdc.  v0:= temp;
  #L4b9fde.  v1:= 1I;
  #L4b9fe0.  if v0 != v1 then goto L4ba002;
  #L4b9fe4.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.k` @type ^`int` := v0;
  #L4b9fe8.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4b9fec.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.j` @type ^`boolean` := v1 @kind boolean;
  #L4b9ff0.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b9ff4.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4b9ffa.  call `drain`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @kind virtual;
  #L4ba000.  return @kind void;
  #L4ba002.  v1:= 2I;
  #L4ba004.  if v0 != v1 then goto L4ba01c;
  #L4ba008.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.k` @type ^`int` := v0;
  #L4ba00c.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4ba010.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ba014.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4ba01a.  return @kind void;
  #L4ba01c.  v3:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4ba020.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.d` @type ^`int`;
  #L4ba024.  call `<init>`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4ba02a.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4ba02e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ba032.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4ba038.  return @kind void;
}
