record `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a` @kind class, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.m` @AccessFlag FINAL;
  `io.reactivex.rxjava3.subjects.UnicastSubject` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.n` @AccessFlag ;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.o` @AccessFlag FINAL;
  `java.lang.Runnable` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.p` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.q` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4cde9c.  v0:= new `java.lang.Object`;
  #L4cdea0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4cdea6.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.q` @type ^`java.lang.Object` := v0 @kind object;
  #L4cdeaa.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c` v6 @kind this, `io.reactivex.rxjava3.core.Observer` v7 @kind object, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.rxjava3.core.Scheduler` v11 @kind object, `int` v12 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$c;.<init>:(Lio/reactivex/rxjava3/core/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4cdebc.  v0:= v6 @kind object;
  #L4cdebe.  v1:= v7 @kind object;
  #L4cdec0.  v2:= v8 @kind wide;
  #L4cdec2.  v4:= v10 @kind object;
  #L4cdec4.  v5:= v12;
  #L4cdec6.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;JLjava/util/concurrent/TimeUnit;I)V` @kind direct;
  #L4cdecc.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.m` @type ^`io.reactivex.rxjava3.core.Scheduler` := v11 @kind object;
  #L4cded0.  v7:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4cded4.  call `<init>`(v7) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4cdeda.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.o` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v7 @kind object;
  #L4cdede.  v7:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c$a`;
  #L4cdee2.  call `<init>`(v7, v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$c$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$c;)V` @kind direct;
  #L4cdee8.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.p` @type ^`java.lang.Runnable` := v7 @kind object;
  #L4cdeec.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$c;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4cdf00.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.o` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4cdf04.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4cdf0a.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c` v9 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$c;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4cdf1c.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4cdf20.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4cdf26.  v0:= temp;
  #L4cdf28.  if v0 != 0 then goto L4cdf9e;
  #L4cdf2c.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4cdf30.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4cdf36.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.e` @type ^`int`;
  #L4cdf3a.  v1:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.p` @type ^`java.lang.Runnable` @kind object;
  #L4cdf3e.  call temp:= `create`(v0, v1) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @kind static;
  #L4cdf44.  v0:= temp @kind object;
  #L4cdf46.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.n` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v0 @kind object;
  #L4cdf4a.  v1:= 1L;
  #L4cdf4e.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`long` := v1 @kind wide;
  #L4cdf52.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.b`;
  #L4cdf56.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.<init>:(Lio/reactivex/rxjava3/subjects/Subject;)V` @kind direct;
  #L4cdf5c.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4cdf60.  call `onNext`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cdf66.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.o` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4cdf6a.  v2:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.m` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4cdf6e.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.c` @type ^`long` @kind wide;
  #L4cdf72.  v8:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4cdf76.  v3:= v9 @kind object;
  #L4cdf78.  v4:= v6 @kind wide;
  #L4cdf7a.  call temp:= `schedulePeriodicallyDirect`(v2, v3, v4, v6, v8) @signature `Lio/reactivex/rxjava3/core/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4cdf80.  v2:= temp @kind object;
  #L4cdf82.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4cdf88.  call temp:= `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.d:()Z` @kind virtual;
  #L4cdf8e.  v0:= temp;
  #L4cdf90.  if v0 == 0 then goto L4cdf9e;
  #L4cdf94.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.n` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` @kind object;
  #L4cdf98.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4cdf9e.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c` v9 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$c;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4cdfb0.  call temp:= `getAndIncrement`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4cdfb6.  v0:= temp;
  #L4cdfb8.  if v0 == 0 then goto L4cdfbe;
  #L4cdfbc.  return @kind void;
  #L4cdfbe.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4cdfc2.  v1:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4cdfc6.  v2:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.n` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` @kind object;
  #L4cdfca.  v3:= 1I;
  #L4cdfcc.  v4:= 1I;
  #L4cdfce.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.k` @type ^`boolean` @kind boolean;
  #L4cdfd2.  v6:= 0I;
  #L4cdfd4.  if v5 == 0 then goto L4cdfe8;
  #L4cdfd8.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4cdfde.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.n` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v6 @kind object;
  #L4cdfe2.  v2:= v6 @kind object;
  #L4cdfe4.  goto L4ce0d2;
  #L4cdfe8.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.g` @type ^`boolean` @kind boolean;
  #L4cdfec.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4cdff2.  v7:= temp @kind object;
  #L4cdff4.  if v7 != 0 then goto L4cdffc;
  #L4cdff8.  v8:= 1I;
  #L4cdffa.  goto L4cdffe;
  #L4cdffc.  v8:= 0I;
  #L4cdffe.  if v5 == 0 then goto L4ce03c;
  #L4ce002.  if v8 == 0 then goto L4ce03c;
  #L4ce006.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.h` @type ^`java.lang.Throwable` @kind object;
  #L4ce00a.  if v5 == 0 then goto L4ce020;
  #L4ce00e.  if v2 == 0 then goto L4ce018;
  #L4ce012.  call `onError`(v2, v5) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ce018.  call `onError`(v1, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ce01e.  goto L4ce030;
  #L4ce020.  if v2 == 0 then goto L4ce02a;
  #L4ce024.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4ce02a.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4ce030.  call `a`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$c;.a:()V` @kind virtual;
  #L4ce036.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.k` @type ^`boolean` := v3 @kind boolean;
  #L4ce03a.  goto L4cdfce;
  #L4ce03c.  if v8 != 0 then goto L4ce0d2;
  #L4ce040.  v5:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.q` @type ^`java.lang.Object` @kind object;
  #L4ce044.  if v7 != v5 then goto L4ce0c4;
  #L4ce048.  if v2 == 0 then goto L4ce058;
  #L4ce04c.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4ce052.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.n` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v6 @kind object;
  #L4ce056.  v2:= v6 @kind object;
  #L4ce058.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4ce05c.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4ce062.  v5:= temp;
  #L4ce064.  if v5 == 0 then goto L4ce074;
  #L4ce068.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.o` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4ce06c.  call `dispose`(v5) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4ce072.  goto L4cdfce;
  #L4ce074.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`long` @kind wide;
  #L4ce078.  v7:= 1L;
  #L4ce07c.  v5:= v5 + v7 @kind long;
  #L4ce07e.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`long` := v5 @kind wide;
  #L4ce082.  v2:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4ce086.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ce08c.  v2:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.e` @type ^`int`;
  #L4ce090.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.p` @type ^`java.lang.Runnable` @kind object;
  #L4ce094.  call temp:= `create`(v2, v5) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @kind static;
  #L4ce09a.  v2:= temp @kind object;
  #L4ce09c.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.n` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v2 @kind object;
  #L4ce0a0.  v5:= new `io.reactivex.rxjava3.internal.operators.observable.b`;
  #L4ce0a4.  call `<init>`(v5, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.<init>:(Lio/reactivex/rxjava3/subjects/Subject;)V` @kind direct;
  #L4ce0aa.  call `onNext`(v1, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ce0b0.  call temp:= `d`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.d:()Z` @kind virtual;
  #L4ce0b6.  v5:= temp;
  #L4ce0b8.  if v5 == 0 then goto L4cdfce;
  #L4ce0bc.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4ce0c2.  goto L4cdfce;
  #L4ce0c4.  if v2 == 0 then goto L4cdfce;
  #L4ce0c8.  call `onNext`(v2, v7) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4ce0ce.  goto L4cdfce;
  #L4ce0d2.  v4:= -v4 @kind int;
  #L4ce0d4.  call temp:= `addAndGet`(v9, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4ce0da.  v4:= temp;
  #L4ce0dc.  if v4 != 0 then goto L4cdfce;
  #L4ce0e0.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ce0f4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4ce0f8.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.q` @type ^`java.lang.Object` @kind object;
  #L4ce0fc.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4ce102.  call `c`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$c;.c:()V` @kind virtual;
  #L4ce108.  return @kind void;
}
