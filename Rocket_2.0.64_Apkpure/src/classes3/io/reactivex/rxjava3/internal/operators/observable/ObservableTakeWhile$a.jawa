record `io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Predicate` `io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeWhile$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ca7c8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ca7ce.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4ca7d2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.b` @type ^`io.reactivex.rxjava3.functions.Predicate` := v2 @kind object;
  #L4ca7d6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeWhile$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ca7e8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ca7ec.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ca7f2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeWhile$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ca7a8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ca7ac.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4ca7b2.  v0:= temp;
  #L4ca7b4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeWhile$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ca804.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.d` @type ^`boolean` @kind boolean;
  #L4ca808.  if v0 == 0 then goto L4ca80e;
  #L4ca80c.  return @kind void;
  #L4ca80e.  v0:= 1I;
  #L4ca810.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4ca814.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ca818.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4ca81e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeWhile$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ca830.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.d` @type ^`boolean` @kind boolean;
  #L4ca834.  if v0 == 0 then goto L4ca840;
  #L4ca838.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4ca83e.  return @kind void;
  #L4ca840.  v0:= 1I;
  #L4ca842.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4ca846.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ca84a.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ca850.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeWhile$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ca864.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.d` @type ^`boolean` @kind boolean;
  #L4ca868.  if v0 == 0 then goto L4ca86e;
  #L4ca86c.  return @kind void;
  #L4ca86e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.b` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L4ca872.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4ca878.  v0:= temp;
  #L4ca87a.  if v0 != 0 then goto L4ca89a;
  #L4ca87e.  v2:= 1I;
  #L4ca880.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.d` @type ^`boolean` := v2 @kind boolean;
  #L4ca884.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ca888.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ca88e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ca892.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4ca898.  return @kind void;
  #L4ca89a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ca89e.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ca8a4.  return @kind void;
  #L4ca8a6.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ca8a8.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ca8ae.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ca8b2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ca8b8.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeWhile$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ca8be.  return @kind void;
  catch `java.lang.Throwable` @[L4ca86e..L4ca87a] goto L4ca8a6;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeWhile$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ca8dc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ca8e0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ca8e6.  v0:= temp;
  #L4ca8e8.  if v0 == 0 then goto L4ca8fa;
  #L4ca8ec.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4ca8f0.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ca8f4.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4ca8fa.  return @kind void;
}
