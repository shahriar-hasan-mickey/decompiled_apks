record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingle$a;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a0d98.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4a0d9e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.a` @type ^`java.lang.Object` := v2 @kind object;
  #L4a0da2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.b` @type ^`boolean` := v3 @kind boolean;
  #L4a0da6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingle$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a0db8.  call `cancel`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @kind super;
  #L4a0dbe.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a0dc2.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a0dc8.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a0ddc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.d` @type ^`boolean` @kind boolean;
  #L4a0de0.  if v0 == 0 then goto L4a0de6;
  #L4a0de4.  return @kind void;
  #L4a0de6.  v0:= 1I;
  #L4a0de8.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4a0dec.  v0:= v2.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L4a0df0.  v1:= 0I;
  #L4a0df2.  v2.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v1 @kind object;
  #L4a0df6.  if v0 != 0 then goto L4a0dfe;
  #L4a0dfa.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.a` @type ^`java.lang.Object` @kind object;
  #L4a0dfe.  if v0 != 0 then goto L4a0e2c;
  #L4a0e02.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.b` @type ^`boolean` @kind boolean;
  #L4a0e06.  if v0 == 0 then goto L4a0e20;
  #L4a0e0a.  v0:= v2.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a0e0e.  v1:= new `java.util.NoSuchElementException`;
  #L4a0e12.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L4a0e18.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a0e1e.  goto L4a0e32;
  #L4a0e20.  v0:= v2.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a0e24.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a0e2a.  goto L4a0e32;
  #L4a0e2c.  call `complete`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L4a0e32.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a0e44.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.d` @type ^`boolean` @kind boolean;
  #L4a0e48.  if v0 == 0 then goto L4a0e54;
  #L4a0e4c.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4a0e52.  return @kind void;
  #L4a0e54.  v0:= 1I;
  #L4a0e56.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4a0e5a.  v0:= v1.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a0e5e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a0e64.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a0e78.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.d` @type ^`boolean` @kind boolean;
  #L4a0e7c.  if v0 == 0 then goto L4a0e82;
  #L4a0e80.  return @kind void;
  #L4a0e82.  v0:= v2.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L4a0e86.  if v0 == 0 then goto L4a0eb4;
  #L4a0e8a.  v3:= 1I;
  #L4a0e8c.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.d` @type ^`boolean` := v3 @kind boolean;
  #L4a0e90.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a0e94.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a0e9a.  v3:= v2.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a0e9e.  v0:= new `java.lang.IllegalArgumentException`;
  #L4a0ea2.  v1:= "Sequence contains more than one element!" @kind object;
  #L4a0ea6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a0eac.  call `onError`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a0eb2.  return @kind void;
  #L4a0eb4.  v2.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v3 @kind object;
  #L4a0eb8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a0ecc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a0ed0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4a0ed6.  v0:= temp;
  #L4a0ed8.  if v0 == 0 then goto L4a0efa;
  #L4a0edc.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4a0ee0.  v0:= v2.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a0ee4.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4a0eea.  v0:= 9223372036854775807L;
  #L4a0ef4.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a0efa.  return @kind void;
}
