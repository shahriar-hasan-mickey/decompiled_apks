record `io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.a` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `java.util.Iterator` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZipIterable$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Ljava/util/Iterator;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cf238.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4cf23e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4cf242.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.b` @type ^`java.util.Iterator` := v2 @kind object;
  #L4cf246.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v3 @kind object;
  #L4cf24a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZipIterable$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4cf278.  v0:= 1I;
  #L4cf27a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4cf27e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4cf282.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4cf288.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4cf28c.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cf292.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZipIterable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cf25c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4cf260.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4cf266.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZipIterable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cf218.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4cf21c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4cf222.  v0:= temp;
  #L4cf224.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZipIterable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cf2a4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.e` @type ^`boolean` @kind boolean;
  #L4cf2a8.  if v0 == 0 then goto L4cf2ae;
  #L4cf2ac.  return @kind void;
  #L4cf2ae.  v0:= 1I;
  #L4cf2b0.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4cf2b4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4cf2b8.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4cf2be.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZipIterable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cf2d0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.e` @type ^`boolean` @kind boolean;
  #L4cf2d4.  if v0 == 0 then goto L4cf2e0;
  #L4cf2d8.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4cf2de.  return @kind void;
  #L4cf2e0.  v0:= 1I;
  #L4cf2e2.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4cf2e6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4cf2ea.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cf2f0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZipIterable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4cf304.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.e` @type ^`boolean` @kind boolean;
  #L4cf308.  if v0 == 0 then goto L4cf30e;
  #L4cf30c.  return @kind void;
  #L4cf30e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.b` @type ^`java.util.Iterator` @kind object;
  #L4cf312.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4cf318.  v0:= temp @kind object;
  #L4cf31a.  v1:= "The iterator returned a null value" @kind object;
  #L4cf31e.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4cf324.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4cf328.  call temp:= `apply`(v1, v3, v0) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4cf32e.  v3:= temp @kind object;
  #L4cf330.  v0:= "The zipper function returned a null value" @kind object;
  #L4cf334.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4cf33a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4cf33e.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cf344.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.b` @type ^`java.util.Iterator` @kind object;
  #L4cf348.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4cf34e.  v3:= temp;
  #L4cf350.  if v3 != 0 then goto L4cf36e;
  #L4cf354.  v3:= 1I;
  #L4cf356.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.e` @type ^`boolean` := v3 @kind boolean;
  #L4cf35a.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4cf35e.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4cf364.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4cf368.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4cf36e.  return @kind void;
  #L4cf370.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cf372.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4cf378.  call `a`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZipIterable$a;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4cf37e.  return @kind void;
  #L4cf380.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cf382.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4cf388.  call `a`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZipIterable$a;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4cf38e.  return @kind void;
  #L4cf390.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cf392.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4cf398.  call `a`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZipIterable$a;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4cf39e.  return @kind void;
  catch `java.lang.Throwable` @[L4cf30e..L4cf324] goto L4cf390;
  catch `java.lang.Throwable` @[L4cf324..L4cf33a] goto L4cf380;
  catch `java.lang.Throwable` @[L4cf344..L4cf350] goto L4cf370;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZipIterable$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cf3d0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4cf3d4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4cf3da.  v0:= temp;
  #L4cf3dc.  if v0 == 0 then goto L4cf3ee;
  #L4cf3e0.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4cf3e4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4cf3e8.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4cf3ee.  return @kind void;
}
