record `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.a` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.d` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.e` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.g` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.h` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.i` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.j` @AccessFlag VOLATILE;
}
global `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[] `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.k` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[] `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.l` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L48a080.  v0:= 0I;
  #L48a082.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[v0];
  #L48a086.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.k` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[] := v1 @kind object;
  #L48a08a.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[v0];
  #L48a08e.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.l` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[] := v0 @kind object;
  #L48a092.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache` v0 @kind this, `io.reactivex.rxjava3.core.Flowable` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.<init>:(Lio/reactivex/rxjava3/core/Flowable;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L48a0a4.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/a;.<init>:(Lio/reactivex/rxjava3/core/Flowable;)V` @kind direct;
  #L48a0aa.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.c` @type ^`int` := v2;
  #L48a0ae.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L48a0b2.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L48a0b8.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L48a0bc.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b`;
  #L48a0c0.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$b;.<init>:(I)V` @kind direct;
  #L48a0c6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.f` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b` := v1 @kind object;
  #L48a0ca.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.g` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b` := v1 @kind object;
  #L48a0ce.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L48a0d2.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.k` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[] @kind object;
  #L48a0d6.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L48a0dc.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L48a0e0.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache` v4 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.e:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48a0f4.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48a0f8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48a0fe.  v0:= temp @kind object;
  #L48a100.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[]) v0 @kind object;
  #L48a104.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.l` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[] @kind object;
  #L48a108.  if v0 != v1 then goto L48a10e;
  #L48a10c.  return @kind void;
  #L48a10e.  v1:= length @variable v0;
  #L48a110.  v2:= v1 + 1;
  #L48a114.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[v2];
  #L48a118.  v3:= 0I;
  #L48a11a.  call `arraycopy`(v0, v3, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L48a120.  v2[v1]:= v5 @kind object;
  #L48a124.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48a128.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L48a12e.  v0:= temp;
  #L48a130.  if v0 == 0 then goto L48a0f4;
  #L48a134.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache` v6 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.f:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48a294.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48a298.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48a29e.  v0:= temp @kind object;
  #L48a2a0.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[]) v0 @kind object;
  #L48a2a4.  v1:= length @variable v0;
  #L48a2a6.  if v1 != 0 then goto L48a2ac;
  #L48a2aa.  return @kind void;
  #L48a2ac.  v2:= -1I;
  #L48a2ae.  v3:= 0I;
  #L48a2b0.  v4:= 0I;
  #L48a2b2.  if v4 >= v1 then goto L48a2c8;
  #L48a2b6.  v5:= v0[v4] @kind object;
  #L48a2ba.  if v5 != v7 then goto L48a2c2;
  #L48a2be.  v2:= v4;
  #L48a2c0.  goto L48a2c8;
  #L48a2c2.  v4:= v4 + 1;
  #L48a2c6.  goto L48a2b2;
  #L48a2c8.  if v2 >= 0 then goto L48a2ce;
  #L48a2cc.  return @kind void;
  #L48a2ce.  v4:= 1I;
  #L48a2d0.  if v1 != v4 then goto L48a2da;
  #L48a2d4.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.k` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[] @kind object;
  #L48a2d8.  goto L48a2f8;
  #L48a2da.  v5:= v1 + -1;
  #L48a2de.  v5:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[v5];
  #L48a2e2.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L48a2e8.  v3:= v2 + 1;
  #L48a2ec.  v1:= v1 - v2 @kind int;
  #L48a2ee.  v1:= v1 - v4 @kind int;
  #L48a2f0.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L48a2f6.  v1:= v5 @kind object;
  #L48a2f8.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48a2fc.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L48a302.  v0:= temp;
  #L48a304.  if v0 == 0 then goto L48a294;
  #L48a308.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache` v18 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a` v19 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.g:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L48a31c.  v0:= v18 @kind object;
  #L48a320.  v1:= v19 @kind object;
  #L48a324.  call temp:= `getAndIncrement`(v19) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L48a32a.  v2:= temp;
  #L48a32c.  if v2 == 0 then goto L48a332;
  #L48a330.  return @kind void;
  #L48a332.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.f` @type ^`long` @kind wide;
  #L48a336.  v4:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.e` @type ^`int`;
  #L48a33a.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b` @kind object;
  #L48a33e.  v6:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L48a342.  v7:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48a346.  v8:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.c` @type ^`int`;
  #L48a34a.  v9:= 1I;
  #L48a34c.  v10:= 1I;
  #L48a34e.  v11:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.j` @type ^`boolean` @kind boolean;
  #L48a352.  v12:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.e` @type ^`long` @kind wide;
  #L48a356.  v14:= 0I;
  #L48a358.  v15:= lcmp(v12, v2);
  #L48a35c.  if v15 != 0 then goto L48a364;
  #L48a360.  v12:= 1I;
  #L48a362.  goto L48a366;
  #L48a364.  v12:= 0I;
  #L48a366.  v13:= 0I;
  #L48a368.  if v11 == 0 then goto L48a38c;
  #L48a36c.  if v12 == 0 then goto L48a38c;
  #L48a370.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b` := v13 @kind object;
  #L48a374.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.i` @type ^`java.lang.Throwable` @kind object;
  #L48a378.  if v1 == 0 then goto L48a384;
  #L48a37c.  call `onError`(v7, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48a382.  goto L48a38a;
  #L48a384.  call `onComplete`(v7) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L48a38a.  return @kind void;
  #L48a38c.  if v12 != 0 then goto L48a3d6;
  #L48a390.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L48a396.  v11:= temp @kind wide;
  #L48a398.  v15:= -9223372036854775808L;
  #L48a39c.  v17:= lcmp(v11, v15);
  #L48a3a0.  if v17 != 0 then goto L48a3aa;
  #L48a3a4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b` := v13 @kind object;
  #L48a3a8.  return @kind void;
  #L48a3aa.  v13:= lcmp(v11, v2);
  #L48a3ae.  if v13 == 0 then goto L48a3d6;
  #L48a3b2.  if v4 != v8 then goto L48a3be;
  #L48a3b6.  v4:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b` @kind object;
  #L48a3ba.  v5:= v4 @kind object;
  #L48a3bc.  v4:= 0I;
  #L48a3be.  v11:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b.a` @type ^`java.lang.Object`[] @kind object;
  #L48a3c2.  v11:= v11[v4] @kind object;
  #L48a3c6.  call `onNext`(v7, v11) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48a3cc.  v4:= v4 + v9 @kind int;
  #L48a3ce.  v11:= 1L;
  #L48a3d2.  v2:= v2 + v11 @kind long;
  #L48a3d4.  goto L48a34e;
  #L48a3d6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.f` @type ^`long` := v2 @kind wide;
  #L48a3da.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.e` @type ^`int` := v4;
  #L48a3de.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b` := v5 @kind object;
  #L48a3e2.  v10:= -v10 @kind int;
  #L48a3e4.  call temp:= `addAndGet`(v1, v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L48a3ea.  v10:= temp;
  #L48a3ec.  if v10 != 0 then goto L48a34e;
  #L48a3f0.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48a148.  v0:= 1I;
  #L48a14a.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.j` @type ^`boolean` := v0 @kind boolean;
  #L48a14e.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48a152.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.l` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[] @kind object;
  #L48a156.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L48a15c.  v0:= temp @kind object;
  #L48a15e.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[]) v0 @kind object;
  #L48a162.  v1:= length @variable v0;
  #L48a164.  v2:= 0I;
  #L48a166.  if v2 >= v1 then goto L48a17a;
  #L48a16a.  v3:= v0[v2] @kind object;
  #L48a16e.  call `g`(v4, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.g:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$a;)V` @kind virtual;
  #L48a174.  v2:= v2 + 1;
  #L48a178.  goto L48a166;
  #L48a17a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L48a18c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.j` @type ^`boolean` @kind boolean;
  #L48a190.  if v0 == 0 then goto L48a19c;
  #L48a194.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L48a19a.  return @kind void;
  #L48a19c.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.i` @type ^`java.lang.Throwable` := v4 @kind object;
  #L48a1a0.  v4:= 1I;
  #L48a1a2.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.j` @type ^`boolean` := v4 @kind boolean;
  #L48a1a6.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48a1aa.  v0:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.l` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[] @kind object;
  #L48a1ae.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L48a1b4.  v4:= temp @kind object;
  #L48a1b6.  v4:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[]) v4 @kind object;
  #L48a1ba.  v0:= length @variable v4;
  #L48a1bc.  v1:= 0I;
  #L48a1be.  if v1 >= v0 then goto L48a1d2;
  #L48a1c2.  v2:= v4[v1] @kind object;
  #L48a1c6.  call `g`(v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.g:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$a;)V` @kind virtual;
  #L48a1cc.  v1:= v1 + 1;
  #L48a1d0.  goto L48a1be;
  #L48a1d2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48a1e4.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.h` @type ^`int`;
  #L48a1e8.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.c` @type ^`int`;
  #L48a1ec.  v2:= 0I;
  #L48a1ee.  v3:= 1I;
  #L48a1f0.  if v0 != v1 then goto L48a218;
  #L48a1f4.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b`;
  #L48a1f8.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$b;.<init>:(I)V` @kind direct;
  #L48a1fe.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b.a` @type ^`java.lang.Object`[] @kind object;
  #L48a202.  v0[v2]:= v6 @kind object;
  #L48a206.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.h` @type ^`int` := v3;
  #L48a20a.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.g` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b` @kind object;
  #L48a20e.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b` := v1 @kind object;
  #L48a212.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.g` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b` := v1 @kind object;
  #L48a216.  goto L48a22a;
  #L48a218.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.g` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b` @kind object;
  #L48a21c.  v1:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b.a` @type ^`java.lang.Object`[] @kind object;
  #L48a220.  v1[v0]:= v6 @kind object;
  #L48a224.  v0:= v0 + v3 @kind int;
  #L48a226.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.h` @type ^`int` := v0;
  #L48a22a.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.e` @type ^`long` @kind wide;
  #L48a22e.  v3:= 1L;
  #L48a232.  v0:= v0 + v3 @kind long;
  #L48a234.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.e` @type ^`long` := v0 @kind wide;
  #L48a238.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48a23c.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48a242.  v6:= temp @kind object;
  #L48a244.  v6:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[]) v6 @kind object;
  #L48a248.  v0:= length @variable v6;
  #L48a24a.  if v2 >= v0 then goto L48a25e;
  #L48a24e.  v1:= v6[v2] @kind object;
  #L48a252.  call `g`(v5, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.g:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$a;)V` @kind virtual;
  #L48a258.  v2:= v2 + 1;
  #L48a25c.  goto L48a24a;
  #L48a25e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48a270.  v0:= 9223372036854775807L;
  #L48a27a.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L48a280.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L48a404.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`;
  #L48a408.  call `<init>`(v0, v4, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;)V` @kind direct;
  #L48a40e.  call `onSubscribe`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L48a414.  call `e`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.e:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$a;)V` @kind virtual;
  #L48a41a.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L48a41e.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L48a424.  v4:= temp;
  #L48a426.  if v4 != 0 then goto L48a44a;
  #L48a42a.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L48a42e.  v1:= 0I;
  #L48a430.  v2:= 1I;
  #L48a432.  call temp:= `compareAndSet`(v4, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L48a438.  v4:= temp;
  #L48a43a.  if v4 == 0 then goto L48a44a;
  #L48a43e.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.a.source` @type ^`io.reactivex.rxjava3.core.Flowable` @kind object;
  #L48a442.  call `subscribe`(v4, v3) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V` @kind virtual;
  #L48a448.  goto L48a450;
  #L48a44a.  call `g`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.g:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$a;)V` @kind virtual;
  #L48a450.  return @kind void;
}
