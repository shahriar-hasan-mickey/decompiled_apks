record `io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a.c` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScan$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c7b7c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c7b82.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4c7b86.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v2 @kind object;
  #L4c7b8a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScan$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c7b9c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c7ba0.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c7ba6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScan$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c7b5c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c7b60.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4c7b66.  v0:= temp;
  #L4c7b68.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScan$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c7bb8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a.e` @type ^`boolean` @kind boolean;
  #L4c7bbc.  if v0 == 0 then goto L4c7bc2;
  #L4c7bc0.  return @kind void;
  #L4c7bc2.  v0:= 1I;
  #L4c7bc4.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4c7bc8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c7bcc.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4c7bd2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScan$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c7be4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a.e` @type ^`boolean` @kind boolean;
  #L4c7be8.  if v0 == 0 then goto L4c7bf4;
  #L4c7bec.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c7bf2.  return @kind void;
  #L4c7bf4.  v0:= 1I;
  #L4c7bf6.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4c7bfa.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c7bfe.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c7c04.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScan$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c7c18.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a.e` @type ^`boolean` @kind boolean;
  #L4c7c1c.  if v0 == 0 then goto L4c7c22;
  #L4c7c20.  return @kind void;
  #L4c7c22.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c7c26.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a.d` @type ^`java.lang.Object` @kind object;
  #L4c7c2a.  if v1 != 0 then goto L4c7c3a;
  #L4c7c2e.  v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a.d` @type ^`java.lang.Object` := v4 @kind object;
  #L4c7c32.  call `onNext`(v0, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c7c38.  goto L4c7c5a;
  #L4c7c3a.  v2:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4c7c3e.  call temp:= `apply`(v2, v1, v4) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c7c44.  v4:= temp @kind object;
  #L4c7c46.  v1:= "The value returned by the accumulator is null" @kind object;
  #L4c7c4a.  call temp:= `requireNonNull`(v4, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c7c50.  v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a.d` @type ^`java.lang.Object` := v4 @kind object;
  #L4c7c54.  call `onNext`(v0, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c7c5a.  return @kind void;
  #L4c7c5c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c7c5e.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c7c64.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c7c68.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c7c6e.  call `onError`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScan$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c7c74.  return @kind void;
  catch `java.lang.Throwable` @[L4c7c3a..L4c7c50] goto L4c7c5c;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScan$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c7c94.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c7c98.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4c7c9e.  v0:= temp;
  #L4c7ca0.  if v0 == 0 then goto L4c7cb2;
  #L4c7ca4.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4c7ca8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScan$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c7cac.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4c7cb2.  return @kind void;
}
