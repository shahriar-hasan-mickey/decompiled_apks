record `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.n` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.o` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 , `io.reactivex.rxjava3.core.Scheduler$Worker` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$d;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;ILio/reactivex/rxjava3/core/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48c820.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$b;.<init>:(Lio/reactivex/rxjava3/functions/Function;ILio/reactivex/rxjava3/core/Scheduler$Worker;)V` @kind direct;
  #L48c826.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.n` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L48c82a.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L48c82e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L48c834.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.o` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L48c838.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$d;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48c894.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48c898.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L48c89e.  v2:= temp;
  #L48c8a0.  if v2 == 0 then goto L48c8d2;
  #L48c8a4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48c8a8.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48c8ae.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L48c8b4.  v2:= temp;
  #L48c8b6.  if v2 != 0 then goto L48c8d2;
  #L48c8ba.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48c8be.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48c8c2.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L48c8c8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L48c8cc.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L48c8d2.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$d;.c:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48c8e4.  call temp:= `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$d;.f:()Z` @kind virtual;
  #L48c8ea.  v0:= temp;
  #L48c8ec.  if v0 == 0 then goto L48c924;
  #L48c8f0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48c8f4.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48c8fa.  v2:= 1I;
  #L48c8fc.  v0:= 0I;
  #L48c8fe.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L48c904.  v2:= temp;
  #L48c906.  if v2 == 0 then goto L48c90c;
  #L48c90a.  return @kind void;
  #L48c90c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48c910.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48c914.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L48c91a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L48c91e.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L48c924.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$d;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48c84c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.j` @type ^`boolean` @kind boolean;
  #L48c850.  if v0 != 0 then goto L48c882;
  #L48c854.  v0:= 1I;
  #L48c856.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.j` @type ^`boolean` := v0 @kind boolean;
  #L48c85a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L48c85e.  call `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind virtual;
  #L48c864.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48c868.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48c86e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L48c872.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L48c878.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48c87c.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L48c882.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$d;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L48cbbc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.o` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L48cbc0.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L48cbc6.  v0:= temp;
  #L48cbc8.  if v0 != 0 then goto L48cbd6;
  #L48cbcc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L48cbd0.  call temp:= `schedule`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L48cbd6.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$d;.e:()V` @AccessFlag  {
    temp;
    v0;

  #L48cbe8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48cbec.  call `onSubscribe`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L48cbf2.  return @kind void;
}
procedure `boolean` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$d;.f:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L48c7ec.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L48c7f2.  v0:= temp;
  #L48c7f4.  v1:= 1I;
  #L48c7f6.  v2:= 0I;
  #L48c7f8.  if v0 != 0 then goto L48c80a;
  #L48c7fc.  call temp:= `compareAndSet`(v3, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L48c802.  v0:= temp;
  #L48c804.  if v0 == 0 then goto L48c80a;
  #L48c808.  goto L48c80c;
  #L48c80a.  v1:= 0I;
  #L48c80c.  return v1;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$d;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48c938.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48c93c.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L48c942.  v2:= temp;
  #L48c944.  if v2 == 0 then goto L48c976;
  #L48c948.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L48c94c.  call `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind virtual;
  #L48c952.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L48c958.  v2:= temp;
  #L48c95a.  if v2 != 0 then goto L48c976;
  #L48c95e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48c962.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48c966.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L48c96c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L48c970.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L48c976.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$d;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48c988.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L48c98c.  call `request`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.request:(J)V` @kind virtual;
  #L48c992.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d` v7 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$d;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L48c9a4.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.j` @type ^`boolean` @kind boolean;
  #L48c9a8.  if v0 == 0 then goto L48c9ae;
  #L48c9ac.  return @kind void;
  #L48c9ae.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.l` @type ^`boolean` @kind boolean;
  #L48c9b2.  if v0 != 0 then goto L48cb76;
  #L48c9b6.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.i` @type ^`boolean` @kind boolean;
  #L48c9ba.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L48c9be.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L48c9c4.  v1:= temp @kind object;
  #L48c9c6.  v2:= 0I;
  #L48c9c8.  v3:= 1I;
  #L48c9ca.  if v1 != 0 then goto L48c9d2;
  #L48c9ce.  v4:= 1I;
  #L48c9d0.  goto L48c9d4;
  #L48c9d2.  v4:= 0I;
  #L48c9d4.  if v0 == 0 then goto L48c9f2;
  #L48c9d8.  if v4 == 0 then goto L48c9f2;
  #L48c9dc.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48c9e0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L48c9e6.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L48c9ea.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L48c9f0.  return @kind void;
  #L48c9f2.  if v4 != 0 then goto L48cb76;
  #L48c9f6.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L48c9fa.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L48ca00.  v0:= temp @kind object;
  #L48ca02.  v1:= "The mapper returned a null Publisher" @kind object;
  #L48ca06.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48ca0c.  v0:= (`org.reactivestreams.Publisher`) v0 @kind object;
  #L48ca10.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.m` @type ^`int`;
  #L48ca14.  if v1 == v3 then goto L48ca3c;
  #L48ca18.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.g` @type ^`int`;
  #L48ca1c.  v1:= v1 + v3 @kind int;
  #L48ca1e.  v4:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.d` @type ^`int`;
  #L48ca22.  if v1 != v4 then goto L48ca38;
  #L48ca26.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.g` @type ^`int` := v2;
  #L48ca2a.  v4:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48ca2e.  v5:= (`long`) v1 @kind i2l;
  #L48ca30.  call `request`(v4, v5) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L48ca36.  goto L48ca3c;
  #L48ca38.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.g` @type ^`int` := v1;
  #L48ca3c.  v1:= instanceof @variable v0 @type ^`io.reactivex.rxjava3.functions.Supplier` @kind boolean;
  #L48ca40.  if v1 == 0 then goto L48cafa;
  #L48ca44.  v0:= (`io.reactivex.rxjava3.functions.Supplier`) v0 @kind object;
  #L48ca48.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L48ca4e.  v0:= temp @kind object;
  #L48ca50.  if v0 == 0 then goto L48c9a4;
  #L48ca54.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.j` @type ^`boolean` @kind boolean;
  #L48ca58.  if v1 == 0 then goto L48ca5e;
  #L48ca5c.  goto L48c9a4;
  #L48ca5e.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L48ca62.  call temp:= `isUnbounded`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.isUnbounded:()Z` @kind virtual;
  #L48ca68.  v1:= temp;
  #L48ca6a.  if v1 == 0 then goto L48caaa;
  #L48ca6e.  call temp:= `f`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$d;.f:()Z` @kind virtual;
  #L48ca74.  v1:= temp;
  #L48ca76.  if v1 == 0 then goto L48c9a4;
  #L48ca7a.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48ca7e.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48ca84.  call temp:= `compareAndSet`(v7, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L48ca8a.  v0:= temp;
  #L48ca8c.  if v0 != 0 then goto L48c9a4;
  #L48ca90.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48ca94.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48ca98.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L48ca9e.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L48caa2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L48caa8.  return @kind void;
  #L48caaa.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.l` @type ^`boolean` := v3 @kind boolean;
  #L48caae.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L48cab2.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$g`;
  #L48cab6.  call `<init>`(v2, v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$g;.<init>:(Ljava/lang/Object;Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L48cabc.  call `setSubscription`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L48cac2.  goto L48cb76;
  #L48cac4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48cac6.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48cacc.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48cad0.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48cad6.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48cada.  call temp:= `tryAddThrowableOrReport`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L48cae0.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48cae4.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48cae8.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L48caee.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L48caf2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L48caf8.  return @kind void;
  #L48cafa.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.l` @type ^`boolean` := v3 @kind boolean;
  #L48cafe.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L48cb02.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L48cb08.  goto L48cb76;
  #L48cb0a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48cb0c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48cb12.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48cb16.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48cb1c.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48cb20.  call temp:= `tryAddThrowableOrReport`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L48cb26.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48cb2a.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48cb2e.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L48cb34.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L48cb38.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L48cb3e.  return @kind void;
  #L48cb40.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48cb42.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48cb48.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48cb4c.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48cb52.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48cb56.  call temp:= `tryAddThrowableOrReport`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L48cb5c.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48cb60.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48cb64.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L48cb6a.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L48cb6e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L48cb74.  return @kind void;
  #L48cb76.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.o` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L48cb7a.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L48cb80.  v0:= temp;
  #L48cb82.  if v0 != 0 then goto L48c9a4;
  #L48cb86.  return @kind void;
  catch `java.lang.Throwable` @[L48c9ba..L48c9c6] goto L48cb40;
  catch `java.lang.Throwable` @[L48c9f6..L48ca10] goto L48cb0a;
  catch `java.lang.Throwable` @[L48ca48..L48ca50] goto L48cac4;
}
