record `io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.core.SingleObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/SingleFlatMapObservable$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b5138.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b513e.  v0.`io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4b5142.  v0.`io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4b5146.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/SingleFlatMapObservable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4b5158.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b515e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/SingleFlatMapObservable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b5110.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b5116.  v0:= temp @kind object;
  #L4b5118.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4b511c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b5122.  v0:= temp;
  #L4b5124.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/SingleFlatMapObservable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b5170.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b5174.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4b517a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/SingleFlatMapObservable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b518c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b5190.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b5196.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/SingleFlatMapObservable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b51a8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b51ac.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b51b2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/SingleFlatMapObservable$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4b51c4.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b51ca.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/SingleFlatMapObservable$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b51dc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4b51e0.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b51e6.  v2:= temp @kind object;
  #L4b51e8.  v0:= "The mapper returned a null Publisher" @kind object;
  #L4b51ec.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b51f2.  v2:= (`io.reactivex.rxjava3.core.ObservableSource`) v2 @kind object;
  #L4b51f6.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/SingleFlatMapObservable$a;.isDisposed:()Z` @kind virtual;
  #L4b51fc.  v0:= temp;
  #L4b51fe.  if v0 != 0 then goto L4b5208;
  #L4b5202.  call `subscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4b5208.  return @kind void;
  #L4b520a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b520c.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b5212.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b5216.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b521c.  return @kind void;
  catch `java.lang.Throwable` @[L4b51dc..L4b51f6] goto L4b520a;
}
