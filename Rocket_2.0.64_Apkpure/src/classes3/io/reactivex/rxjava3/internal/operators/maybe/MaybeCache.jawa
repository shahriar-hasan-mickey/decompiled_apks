record `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Maybe` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.c` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.d` @AccessFlag ;
}
global `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[] `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[] `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4a938c.  v0:= 0I;
  #L4a938e.  v1:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[v0];
  #L4a9392.  `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.e` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[] := v1 @kind object;
  #L4a9396.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[v0];
  #L4a939a.  `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.f` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[] := v0 @kind object;
  #L4a939e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache` v1 @kind this, `io.reactivex.rxjava3.core.MaybeSource` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4a93b0.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/core/Maybe;.<init>:()V` @kind direct;
  #L4a93b6.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4a93ba.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4a93c0.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4a93c4.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4a93c8.  v0:= `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.e` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[] @kind object;
  #L4a93cc.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4a93d2.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4a93d6.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache` v4 @kind this, `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache;.a:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a9338.  v0:= v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a933c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a9342.  v0:= temp @kind object;
  #L4a9344.  v0:= (`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[]) v0 @kind object;
  #L4a9348.  v1:= `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.f` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[] @kind object;
  #L4a934c.  v2:= 0I;
  #L4a934e.  if v0 != v1 then goto L4a9354;
  #L4a9352.  return v2;
  #L4a9354.  v1:= length @variable v0;
  #L4a9356.  v3:= v1 + 1;
  #L4a935a.  v3:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[v3];
  #L4a935e.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4a9364.  v3[v1]:= v5 @kind object;
  #L4a9368.  v1:= v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a936c.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4a9372.  v0:= temp;
  #L4a9374.  if v0 == 0 then goto L4a9338;
  #L4a9378.  v5:= 1I;
  #L4a937a.  return v5;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache` v6 @kind this, `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache;.b:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4a94f4.  v0:= v6.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a94f8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a94fe.  v0:= temp @kind object;
  #L4a9500.  v0:= (`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[]) v0 @kind object;
  #L4a9504.  v1:= length @variable v0;
  #L4a9506.  if v1 != 0 then goto L4a950c;
  #L4a950a.  return @kind void;
  #L4a950c.  v2:= -1I;
  #L4a950e.  v3:= 0I;
  #L4a9510.  v4:= 0I;
  #L4a9512.  if v4 >= v1 then goto L4a9528;
  #L4a9516.  v5:= v0[v4] @kind object;
  #L4a951a.  if v5 != v7 then goto L4a9522;
  #L4a951e.  v2:= v4;
  #L4a9520.  goto L4a9528;
  #L4a9522.  v4:= v4 + 1;
  #L4a9526.  goto L4a9512;
  #L4a9528.  if v2 >= 0 then goto L4a952e;
  #L4a952c.  return @kind void;
  #L4a952e.  v4:= 1I;
  #L4a9530.  if v1 != v4 then goto L4a953a;
  #L4a9534.  v1:= `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.e` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[] @kind object;
  #L4a9538.  goto L4a9558;
  #L4a953a.  v5:= v1 + -1;
  #L4a953e.  v5:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[v5];
  #L4a9542.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4a9548.  v3:= v2 + 1;
  #L4a954c.  v1:= v1 - v2 @kind int;
  #L4a954e.  v1:= v1 - v4 @kind int;
  #L4a9550.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4a9556.  v1:= v5 @kind object;
  #L4a9558.  v2:= v6.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a955c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4a9562.  v0:= temp;
  #L4a9564.  if v0 == 0 then goto L4a94f4;
  #L4a9568.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a93e8.  v0:= v5.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a93ec.  v1:= `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.f` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[] @kind object;
  #L4a93f0.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4a93f6.  v0:= temp @kind object;
  #L4a93f8.  v0:= (`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[]) v0 @kind object;
  #L4a93fc.  v1:= length @variable v0;
  #L4a93fe.  v2:= 0I;
  #L4a9400.  if v2 >= v1 then goto L4a9424;
  #L4a9404.  v3:= v0[v2] @kind object;
  #L4a9408.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache$a;.isDisposed:()Z` @kind virtual;
  #L4a940e.  v4:= temp;
  #L4a9410.  if v4 != 0 then goto L4a941e;
  #L4a9414.  v3:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4a9418.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4a941e.  v2:= v2 + 1;
  #L4a9422.  goto L4a9400;
  #L4a9424.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a9438.  v5.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.d` @type ^`java.lang.Throwable` := v6 @kind object;
  #L4a943c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a9440.  v1:= `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.f` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[] @kind object;
  #L4a9444.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4a944a.  v0:= temp @kind object;
  #L4a944c.  v0:= (`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[]) v0 @kind object;
  #L4a9450.  v1:= length @variable v0;
  #L4a9452.  v2:= 0I;
  #L4a9454.  if v2 >= v1 then goto L4a9478;
  #L4a9458.  v3:= v0[v2] @kind object;
  #L4a945c.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache$a;.isDisposed:()Z` @kind virtual;
  #L4a9462.  v4:= temp;
  #L4a9464.  if v4 != 0 then goto L4a9472;
  #L4a9468.  v3:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4a946c.  call `onError`(v3, v6) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a9472.  v2:= v2 + 1;
  #L4a9476.  goto L4a9454;
  #L4a9478.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4a948c.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a94a0.  v5.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.c` @type ^`java.lang.Object` := v6 @kind object;
  #L4a94a4.  v0:= v5.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a94a8.  v1:= `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.f` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[] @kind object;
  #L4a94ac.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4a94b2.  v0:= temp @kind object;
  #L4a94b4.  v0:= (`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[]) v0 @kind object;
  #L4a94b8.  v1:= length @variable v0;
  #L4a94ba.  v2:= 0I;
  #L4a94bc.  if v2 >= v1 then goto L4a94e0;
  #L4a94c0.  v3:= v0[v2] @kind object;
  #L4a94c4.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache$a;.isDisposed:()Z` @kind virtual;
  #L4a94ca.  v4:= temp;
  #L4a94cc.  if v4 != 0 then goto L4a94da;
  #L4a94d0.  v3:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4a94d4.  call `onSuccess`(v3, v6) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4a94da.  v2:= v2 + 1;
  #L4a94de.  goto L4a94bc;
  #L4a94e0.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache` v2 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache;.subscribeActual:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4a957c.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`;
  #L4a9580.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache;)V` @kind direct;
  #L4a9586.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4a958c.  call temp:= `a`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache;.a:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache$a;)Z` @kind virtual;
  #L4a9592.  v1:= temp;
  #L4a9594.  if v1 == 0 then goto L4a95ca;
  #L4a9598.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache$a;.isDisposed:()Z` @kind virtual;
  #L4a959e.  v3:= temp;
  #L4a95a0.  if v3 == 0 then goto L4a95ac;
  #L4a95a4.  call `b`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache;.b:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache$a;)V` @kind virtual;
  #L4a95aa.  return @kind void;
  #L4a95ac.  v3:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a95b0.  v0:= 0I;
  #L4a95b2.  call temp:= `getAndSet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4a95b8.  v3:= temp @kind object;
  #L4a95ba.  v3:= (`io.reactivex.rxjava3.core.MaybeSource`) v3 @kind object;
  #L4a95be.  if v3 == 0 then goto L4a95c8;
  #L4a95c2.  call `subscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4a95c8.  return @kind void;
  #L4a95ca.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache$a;.isDisposed:()Z` @kind virtual;
  #L4a95d0.  v0:= temp;
  #L4a95d2.  if v0 != 0 then goto L4a95fc;
  #L4a95d6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.d` @type ^`java.lang.Throwable` @kind object;
  #L4a95da.  if v0 == 0 then goto L4a95e6;
  #L4a95de.  call `onError`(v3, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a95e4.  goto L4a95fc;
  #L4a95e6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.c` @type ^`java.lang.Object` @kind object;
  #L4a95ea.  if v0 == 0 then goto L4a95f6;
  #L4a95ee.  call `onSuccess`(v3, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4a95f4.  goto L4a95fc;
  #L4a95f6.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4a95fc.  return @kind void;
}
