record `io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$b` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.c` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.d` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.h` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.i` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.j` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.k` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.l` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.m` @AccessFlag VOLATILE;
}
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.n` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.o` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.p` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.q` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4c1e58.  v0:= 1I;
  #L4c1e5a.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c1e60.  v0:= temp @kind object;
  #L4c1e62.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.n` @type ^`java.lang.Integer` := v0 @kind object;
  #L4c1e66.  v0:= 2I;
  #L4c1e68.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c1e6e.  v0:= temp @kind object;
  #L4c1e70.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.o` @type ^`java.lang.Integer` := v0 @kind object;
  #L4c1e74.  v0:= 3I;
  #L4c1e76.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c1e7c.  v0:= temp @kind object;
  #L4c1e7e.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.p` @type ^`java.lang.Integer` := v0 @kind object;
  #L4c1e82.  v0:= 4I;
  #L4c1e84.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c1e8a.  v0:= temp @kind object;
  #L4c1e8c.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.q` @type ^`java.lang.Integer` := v0 @kind object;
  #L4c1e90.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `io.reactivex.rxjava3.functions.Function` v4 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4c1ea4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4c1eaa.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v2 @kind object;
  #L4c1eae.  v2:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L4c1eb2.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4c1eb8.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v2 @kind object;
  #L4c1ebc.  v2:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4c1ec0.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Observable;.bufferSize:()I` @kind static;
  #L4c1ec6.  v0:= temp;
  #L4c1ec8.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4c1ece.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L4c1ed2.  v2:= new `java.util.LinkedHashMap`;
  #L4c1ed6.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L4c1edc.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.d` @type ^`java.util.Map` := v2 @kind object;
  #L4c1ee0.  v2:= new `java.util.LinkedHashMap`;
  #L4c1ee4.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L4c1eea.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.e` @type ^`java.util.Map` := v2 @kind object;
  #L4c1eee.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c1ef2.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c1ef8.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4c1efc.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.g` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4c1f00.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.h` @type ^`io.reactivex.rxjava3.functions.Function` := v4 @kind object;
  #L4c1f04.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.i` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v5 @kind object;
  #L4c1f08.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4c1f0c.  v3:= 2I;
  #L4c1f0e.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4c1f14.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L4c1f18.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c23b4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c23b8.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4c23be.  v0:= temp;
  #L4c23c0.  if v0 == 0 then goto L4c23d6;
  #L4c23c4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c23c8.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c23ce.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.g:()V` @kind virtual;
  #L4c23d4.  goto L4c23dc;
  #L4c23d6.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c23dc.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a` v1 @kind this, `boolean` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.b:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c23f0.  @monitorenter v1
  #L4c23f2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c23f6.  if v2 == 0 then goto L4c2400;
  #L4c23fa.  v2:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.n` @type ^`java.lang.Integer` @kind object;
  #L4c23fe.  goto L4c2404;
  #L4c2400.  v2:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L4c2404.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c240a.  @monitorexit v1
  #L4c240c.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.g:()V` @kind virtual;
  #L4c2412.  return @kind void;
  #L4c2414.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c2416.  @monitorexit v1
  #L4c2418.  throw v2;
  catch `java.lang.Throwable` @[L4c23f2..L4c240c] goto L4c2414;
  catch `java.lang.Throwable` @[L4c2416..L4c2418] goto L4c2414;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.c:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c2358.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c235c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4c2362.  v0:= temp;
  #L4c2364.  if v0 == 0 then goto L4c2370;
  #L4c2368.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.g:()V` @kind virtual;
  #L4c236e.  goto L4c2376;
  #L4c2370.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c2376.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$d` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.d:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c2388.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c238c.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c2392.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c2396.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c239c.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.g:()V` @kind virtual;
  #L4c23a2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c1f48.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.m` @type ^`boolean` @kind boolean;
  #L4c1f4c.  if v0 != 0 then goto L4c1f72;
  #L4c1f50.  v0:= 1I;
  #L4c1f52.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.m` @type ^`boolean` := v0 @kind boolean;
  #L4c1f56.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.f:()V` @kind virtual;
  #L4c1f5c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c1f62.  v0:= temp;
  #L4c1f64.  if v0 != 0 then goto L4c1f72;
  #L4c1f68.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c1f6c.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c1f72.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a` v1 @kind this, `boolean` v2 , `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$c` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.e:(ZLio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c2308.  @monitorenter v1
  #L4c230a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c230e.  if v2 == 0 then goto L4c2318;
  #L4c2312.  v2:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L4c2316.  goto L4c231c;
  #L4c2318.  v2:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.q` @type ^`java.lang.Integer` @kind object;
  #L4c231c.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c2322.  @monitorexit v1
  #L4c2324.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.g:()V` @kind virtual;
  #L4c232a.  return @kind void;
  #L4c232c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c232e.  @monitorexit v1
  #L4c2330.  throw v2;
  catch `java.lang.Throwable` @[L4c230a..L4c2324] goto L4c232c;
  catch `java.lang.Throwable` @[L4c232e..L4c2330] goto L4c232c;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.f:()V` @AccessFlag  {
    temp;
    v0;

  #L4c1f2c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c1f30.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4c1f36.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a` v10 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4c1f84.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c1f8a.  v0:= temp;
  #L4c1f8c.  if v0 == 0 then goto L4c1f92;
  #L4c1f90.  return @kind void;
  #L4c1f92.  v0:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c1f96.  v1:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c1f9a.  v2:= 1I;
  #L4c1f9c.  v3:= 1I;
  #L4c1f9e.  v4:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.m` @type ^`boolean` @kind boolean;
  #L4c1fa2.  if v4 == 0 then goto L4c1fae;
  #L4c1fa6.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c1fac.  return @kind void;
  #L4c1fae.  v4:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c1fb2.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c1fb8.  v4:= temp @kind object;
  #L4c1fba.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L4c1fbe.  if v4 == 0 then goto L4c1fd6;
  #L4c1fc2.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c1fc8.  call `f`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.f:()V` @kind virtual;
  #L4c1fce.  call `h`(v10, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.h:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4c1fd4.  return @kind void;
  #L4c1fd6.  v4:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c1fda.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4c1fe0.  v4:= temp;
  #L4c1fe2.  v5:= 0I;
  #L4c1fe4.  if v4 != 0 then goto L4c1fec;
  #L4c1fe8.  v4:= 1I;
  #L4c1fea.  goto L4c1fee;
  #L4c1fec.  v4:= 0I;
  #L4c1fee.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4c1ff4.  v6:= temp @kind object;
  #L4c1ff6.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L4c1ffa.  if v6 != 0 then goto L4c2002;
  #L4c1ffe.  v7:= 1I;
  #L4c2000.  goto L4c2004;
  #L4c2002.  v7:= 0I;
  #L4c2004.  if v4 == 0 then goto L4c2032;
  #L4c2008.  if v7 == 0 then goto L4c2032;
  #L4c200c.  v0:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.d` @type ^`java.util.Map` @kind object;
  #L4c2010.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4c2016.  v0:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4c201a.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4c2020.  v0:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c2024.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4c202a.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4c2030.  return @kind void;
  #L4c2032.  if v7 == 0 then goto L4c2046;
  #L4c2036.  v3:= -v3 @kind int;
  #L4c2038.  call temp:= `addAndGet`(v10, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4c203e.  v3:= temp;
  #L4c2040.  if v3 != 0 then goto L4c1f9e;
  #L4c2044.  return @kind void;
  #L4c2046.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4c204c.  v4:= temp @kind object;
  #L4c204e.  v7:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.n` @type ^`java.lang.Integer` @kind object;
  #L4c2052.  v8:= "The resultSelector returned a null value" @kind object;
  #L4c2056.  if v6 != v7 then goto L4c212a;
  #L4c205a.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.k` @type ^`int`;
  #L4c205e.  v6:= v5 + 1;
  #L4c2062.  v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.k` @type ^`int` := v6;
  #L4c2066.  v6:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.d` @type ^`java.util.Map` @kind object;
  #L4c206a.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c2070.  v7:= temp @kind object;
  #L4c2072.  call temp:= `put`(v6, v7, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c2078.  v6:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.g` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c207c.  call temp:= `apply`(v6, v4) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c2082.  v6:= temp @kind object;
  #L4c2084.  v7:= "The leftEnd returned a null ObservableSource" @kind object;
  #L4c2088.  call temp:= `requireNonNull`(v6, v7) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c208e.  v6:= (`io.reactivex.rxjava3.core.ObservableSource`) v6 @kind object;
  #L4c2092.  v7:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$c`;
  #L4c2096.  call `<init>`(v7, v10, v2, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$b;ZI)V` @kind direct;
  #L4c209c.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c20a0.  call temp:= `add`(v5, v7) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c20a6.  call `subscribe`(v6, v7) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4c20ac.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c20b0.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c20b6.  v5:= temp @kind object;
  #L4c20b8.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L4c20bc.  if v5 == 0 then goto L4c20d4;
  #L4c20c0.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c20c6.  call `f`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.f:()V` @kind virtual;
  #L4c20cc.  call `h`(v10, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.h:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4c20d2.  return @kind void;
  #L4c20d4.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4c20d8.  call temp:= `values`(v5) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4c20de.  v5:= temp @kind object;
  #L4c20e0.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4c20e6.  v5:= temp @kind object;
  #L4c20e8.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4c20ee.  v6:= temp;
  #L4c20f0.  if v6 == 0 then goto L4c1f9e;
  #L4c20f4.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4c20fa.  v6:= temp @kind object;
  #L4c20fc.  v7:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.i` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4c2100.  call temp:= `apply`(v7, v4, v6) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c2106.  v6:= temp @kind object;
  #L4c2108.  call temp:= `requireNonNull`(v6, v8) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c210e.  call `onNext`(v1, v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c2114.  goto L4c20e8;
  #L4c2116.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c2118.  call `i`(v10, v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4c211e.  return @kind void;
  #L4c2120.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c2122.  call `i`(v10, v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4c2128.  return @kind void;
  #L4c212a.  v7:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L4c212e.  if v6 != v7 then goto L4c2202;
  #L4c2132.  v6:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.l` @type ^`int`;
  #L4c2136.  v7:= v6 + 1;
  #L4c213a.  v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.l` @type ^`int` := v7;
  #L4c213e.  v7:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4c2142.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c2148.  v9:= temp @kind object;
  #L4c214a.  call temp:= `put`(v7, v9, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c2150.  v7:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.h` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c2154.  call temp:= `apply`(v7, v4) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c215a.  v7:= temp @kind object;
  #L4c215c.  v9:= "The rightEnd returned a null ObservableSource" @kind object;
  #L4c2160.  call temp:= `requireNonNull`(v7, v9) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c2166.  v7:= (`io.reactivex.rxjava3.core.ObservableSource`) v7 @kind object;
  #L4c216a.  v9:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$c`;
  #L4c216e.  call `<init>`(v9, v10, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$b;ZI)V` @kind direct;
  #L4c2174.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c2178.  call temp:= `add`(v5, v9) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c217e.  call `subscribe`(v7, v9) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4c2184.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c2188.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c218e.  v5:= temp @kind object;
  #L4c2190.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L4c2194.  if v5 == 0 then goto L4c21ac;
  #L4c2198.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c219e.  call `f`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.f:()V` @kind virtual;
  #L4c21a4.  call `h`(v10, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.h:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4c21aa.  return @kind void;
  #L4c21ac.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.d` @type ^`java.util.Map` @kind object;
  #L4c21b0.  call temp:= `values`(v5) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4c21b6.  v5:= temp @kind object;
  #L4c21b8.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4c21be.  v5:= temp @kind object;
  #L4c21c0.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4c21c6.  v6:= temp;
  #L4c21c8.  if v6 == 0 then goto L4c1f9e;
  #L4c21cc.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4c21d2.  v6:= temp @kind object;
  #L4c21d4.  v7:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.i` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4c21d8.  call temp:= `apply`(v7, v6, v4) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c21de.  v6:= temp @kind object;
  #L4c21e0.  call temp:= `requireNonNull`(v6, v8) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c21e6.  call `onNext`(v1, v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c21ec.  goto L4c21c0;
  #L4c21ee.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c21f0.  call `i`(v10, v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4c21f6.  return @kind void;
  #L4c21f8.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c21fa.  call `i`(v10, v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4c2200.  return @kind void;
  #L4c2202.  v5:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L4c2206.  if v6 != v5 then goto L4c2232;
  #L4c220a.  v4:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$c`) v4 @kind object;
  #L4c220e.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.d` @type ^`java.util.Map` @kind object;
  #L4c2212.  v6:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$c.c` @type ^`int`;
  #L4c2216.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c221c.  v6:= temp @kind object;
  #L4c221e.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c2224.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c2228.  call temp:= `remove`(v5, v4) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.remove:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c222e.  goto L4c1f9e;
  #L4c2232.  v4:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$c`) v4 @kind object;
  #L4c2236.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4c223a.  v6:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$c.c` @type ^`int`;
  #L4c223e.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c2244.  v6:= temp @kind object;
  #L4c2246.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c224c.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c2250.  call temp:= `remove`(v5, v4) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.remove:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c2256.  goto L4c1f9e;
  catch `java.lang.Throwable` @[L4c2078..L4c2092] goto L4c2120;
  catch `java.lang.Throwable` @[L4c20fc..L4c210e] goto L4c2116;
  catch `java.lang.Throwable` @[L4c2150..L4c216a] goto L4c21f8;
  catch `java.lang.Throwable` @[L4c21d4..L4c21e6] goto L4c21ee;
}
procedure `void` `h`(`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a` v2 @kind this, `io.reactivex.rxjava3.core.Observer` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.h:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4c229c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c22a0.  call temp:= `terminate`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L4c22a6.  v0:= temp @kind object;
  #L4c22a8.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.d` @type ^`java.util.Map` @kind object;
  #L4c22ac.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4c22b2.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4c22b6.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4c22bc.  call `onError`(v3, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c22c2.  return @kind void;
}
procedure `void` `i`(`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object, `io.reactivex.rxjava3.core.Observer` v3 @kind object, `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @AccessFlag  {
    temp;
    v0;

  #L4c22d4.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c22da.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c22de.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4c22e4.  call `clear`(v4) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c22ea.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.f:()V` @kind virtual;
  #L4c22f0.  call `h`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.h:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4c22f6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c1e40.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.m` @type ^`boolean` @kind boolean;
  #L4c1e44.  return v0;
}
