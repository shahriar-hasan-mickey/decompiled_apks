record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.i` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.j` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.k` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L492de4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L492dea.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L492dee.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.h` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L492df2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.b` @type ^`boolean` := v3 @kind boolean;
  #L492df6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.c` @type ^`int` := v4;
  #L492dfa.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L492dfe.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L492e04.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L492e08.  v1:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L492e0c.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L492e12.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v1 @kind object;
  #L492e16.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L492e1a.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L492e20.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L492e24.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L492e28.  v2:= 1I;
  #L492e2a.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L492e30.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L492e34.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L492e38.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L492e3e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L492e42.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L492e8c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L492e90.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L492e96.  v0:= temp @kind object;
  #L492e98.  v0:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L492e9c.  if v0 == 0 then goto L492ea6;
  #L492ea0.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L492ea6.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L492eb8.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L492ebe.  v0:= temp;
  #L492ec0.  if v0 != 0 then goto L492eca;
  #L492ec4.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.c:()V` @kind virtual;
  #L492eca.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a` v17 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L492edc.  v0:= v17 @kind object;
  #L492ee0.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L492ee4.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L492ee8.  v3:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L492eec.  v4:= 1I;
  #L492eee.  v5:= 1I;
  #L492ef0.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L492ef4.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L492efa.  v6:= temp @kind wide;
  #L492efc.  v8:= 0L;
  #L492f00.  v10:= v8 @kind wide;
  #L492f02.  v12:= 0I;
  #L492f04.  v13:= lcmp(v10, v6);
  #L492f08.  if v13 == 0 then goto L492fb2;
  #L492f0c.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.k` @type ^`boolean` @kind boolean;
  #L492f10.  if v14 == 0 then goto L492f1c;
  #L492f14.  call `a`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.a:()V` @kind virtual;
  #L492f1a.  return @kind void;
  #L492f1c.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.b` @type ^`boolean` @kind boolean;
  #L492f20.  if v14 != 0 then goto L492f4e;
  #L492f24.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L492f28.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L492f2e.  v14:= temp @kind object;
  #L492f30.  v14:= (`java.lang.Throwable`) v14 @kind object;
  #L492f34.  if v14 == 0 then goto L492f4e;
  #L492f38.  call `a`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.a:()V` @kind virtual;
  #L492f3e.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L492f42.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L492f46.  call `tryTerminateConsumer`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L492f4c.  return @kind void;
  #L492f4e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L492f54.  v14:= temp;
  #L492f56.  if v14 != 0 then goto L492f5e;
  #L492f5a.  v14:= 1I;
  #L492f5c.  goto L492f60;
  #L492f5e.  v14:= 0I;
  #L492f60.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L492f66.  v15:= temp @kind object;
  #L492f68.  v15:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v15 @kind object;
  #L492f6c.  if v15 == 0 then goto L492f7a;
  #L492f70.  call temp:= `poll`(v15) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L492f76.  v15:= temp @kind object;
  #L492f78.  goto L492f7c;
  #L492f7a.  v15:= 0I;
  #L492f7c.  if v15 != 0 then goto L492f86;
  #L492f80.  v16:= 1I;
  #L492f84.  goto L492f8a;
  #L492f86.  v16:= 0I;
  #L492f8a.  if v14 == 0 then goto L492f9e;
  #L492f8e.  if v16 == 0 then goto L492f9e;
  #L492f92.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L492f96.  call `tryTerminateConsumer`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L492f9c.  return @kind void;
  #L492f9e.  if v16 == 0 then goto L492fa4;
  #L492fa2.  goto L492fb2;
  #L492fa4.  call `onNext`(v1, v15) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L492faa.  v12:= 1L;
  #L492fae.  v10:= v10 + v12 @kind long;
  #L492fb0.  goto L492f02;
  #L492fb2.  if v13 != 0 then goto L493038;
  #L492fb6.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.k` @type ^`boolean` @kind boolean;
  #L492fba.  if v6 == 0 then goto L492fc6;
  #L492fbe.  call `a`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.a:()V` @kind virtual;
  #L492fc4.  return @kind void;
  #L492fc6.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.b` @type ^`boolean` @kind boolean;
  #L492fca.  if v6 != 0 then goto L492ff4;
  #L492fce.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L492fd2.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L492fd8.  v6:= temp @kind object;
  #L492fda.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L492fde.  if v6 == 0 then goto L492ff4;
  #L492fe2.  call `a`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.a:()V` @kind virtual;
  #L492fe8.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L492fec.  call `tryTerminateConsumer`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L492ff2.  return @kind void;
  #L492ff4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L492ffa.  v6:= temp;
  #L492ffc.  if v6 != 0 then goto L493004;
  #L493000.  v6:= 1I;
  #L493002.  goto L493006;
  #L493004.  v6:= 0I;
  #L493006.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49300c.  v7:= temp @kind object;
  #L49300e.  v7:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v7 @kind object;
  #L493012.  if v7 == 0 then goto L493022;
  #L493016.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L49301c.  v7:= temp;
  #L49301e.  if v7 == 0 then goto L493024;
  #L493022.  v12:= 1I;
  #L493024.  if v6 == 0 then goto L493038;
  #L493028.  if v12 == 0 then goto L493038;
  #L49302c.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L493030.  call `tryTerminateConsumer`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L493036.  return @kind void;
  #L493038.  v6:= lcmp(v10, v8);
  #L49303c.  if v6 == 0 then goto L493062;
  #L493040.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L493044.  call temp:= `produced`(v6, v10) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L49304a.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.c` @type ^`int`;
  #L49304e.  v7:= 2147483647I;
  #L493054.  if v6 == v7 then goto L493062;
  #L493058.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49305c.  call `request`(v6, v10) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L493062.  v5:= -v5 @kind int;
  #L493064.  call temp:= `addAndGet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L49306a.  v5:= temp;
  #L49306c.  if v5 != 0 then goto L492ef0;
  #L493070.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L492e54.  v0:= 1I;
  #L492e56.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.k` @type ^`boolean` := v0 @kind boolean;
  #L492e5a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L492e5e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L492e64.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L492e68.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L492e6e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L492e72.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L492e78.  return @kind void;
}
procedure `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.d:()Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L492d84.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L492d88.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L492d8e.  v0:= temp @kind object;
  #L492d90.  v0:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L492d94.  if v0 == 0 then goto L492d9a;
  #L492d98.  return v0 @kind object;
  #L492d9a.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L492d9e.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L492da4.  v1:= temp;
  #L492da6.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L492dac.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L492db0.  v2:= 0I;
  #L492db2.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L492db8.  v1:= temp;
  #L492dba.  if v1 == 0 then goto L492dc0;
  #L492dbe.  return v0 @kind object;
  #L492dc0.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L492dc4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L492dca.  v0:= temp @kind object;
  #L492dcc.  v0:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L492dd0.  return v0 @kind object;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.e:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L493084.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L493088.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L49308e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L493092.  call temp:= `tryAddThrowableOrReport`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L493098.  v3:= temp;
  #L49309a.  if v3 == 0 then goto L4930e8;
  #L49309e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.b` @type ^`boolean` @kind boolean;
  #L4930a2.  if v3 != 0 then goto L4930bc;
  #L4930a6.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4930aa.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4930b0.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4930b4.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4930ba.  goto L4930d8;
  #L4930bc.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.c` @type ^`int`;
  #L4930c0.  v4:= 2147483647I;
  #L4930c6.  if v3 == v4 then goto L4930d8;
  #L4930ca.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4930ce.  v0:= 1L;
  #L4930d2.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4930d8.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4930dc.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4930e2.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.b:()V` @kind virtual;
  #L4930e8.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a` v5 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a$a` v6 @kind object, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.f:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a$a;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4930fc.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L493100.  call temp:= `delete`(v0, v6) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L493106.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L49310c.  v6:= temp;
  #L49310e.  if v6 != 0 then goto L4931d8;
  #L493112.  v6:= 0I;
  #L493114.  v0:= 1I;
  #L493116.  call temp:= `compareAndSet`(v5, v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L49311c.  v1:= temp;
  #L49311e.  if v1 == 0 then goto L4931d8;
  #L493122.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L493126.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L49312c.  v1:= temp;
  #L49312e.  if v1 != 0 then goto L493134;
  #L493132.  v6:= 1I;
  #L493134.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L493138.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49313e.  v0:= temp @kind wide;
  #L493140.  v2:= 0L;
  #L493144.  v4:= lcmp(v0, v2);
  #L493148.  if v4 == 0 then goto L4931b2;
  #L49314c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L493150.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L493156.  v7:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49315a.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L493160.  v7:= temp @kind object;
  #L493162.  v7:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v7 @kind object;
  #L493166.  if v6 == 0 then goto L49318a;
  #L49316a.  if v7 == 0 then goto L49317a;
  #L49316e.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L493174.  v6:= temp;
  #L493176.  if v6 == 0 then goto L49318a;
  #L49317a.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L49317e.  v7:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L493182.  call `tryTerminateConsumer`(v6, v7) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L493188.  return @kind void;
  #L49318a.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L49318e.  v0:= 1L;
  #L493192.  call temp:= `produced`(v6, v0) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L493198.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.c` @type ^`int`;
  #L49319c.  v7:= 2147483647I;
  #L4931a2.  if v6 == v7 then goto L4931c4;
  #L4931a6.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4931aa.  call `request`(v6, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4931b0.  goto L4931c4;
  #L4931b2.  call temp:= `d`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.d:()Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;` @kind virtual;
  #L4931b8.  v6:= temp @kind object;
  #L4931ba.  @monitorenter v6
  #L4931bc.  call temp:= `offer`(v6, v7) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4931c2.  @monitorexit v6
  #L4931c4.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4931ca.  v6:= temp;
  #L4931cc.  if v6 != 0 then goto L493202;
  #L4931d0.  return @kind void;
  #L4931d2.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4931d4.  @monitorexit v6
  #L4931d6.  throw v7;
  #L4931d8.  call temp:= `d`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.d:()Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;` @kind virtual;
  #L4931de.  v6:= temp @kind object;
  #L4931e0.  @monitorenter v6
  #L4931e2.  call temp:= `offer`(v6, v7) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4931e8.  @monitorexit v6
  #L4931ea.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4931ee.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4931f4.  call temp:= `getAndIncrement`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4931fa.  v6:= temp;
  #L4931fc.  if v6 == 0 then goto L493202;
  #L493200.  return @kind void;
  #L493202.  call `c`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.c:()V` @kind virtual;
  #L493208.  return @kind void;
  #L49320a.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49320c.  @monitorexit v6
  #L49320e.  throw v7;
  catch `java.lang.Throwable` @[L4931bc..L4931c4] goto L4931d2;
  catch `java.lang.Throwable` @[L4931d4..L4931d6] goto L4931d2;
  catch `java.lang.Throwable` @[L4931e2..L4931ea] goto L49320a;
  catch `java.lang.Throwable` @[L49320c..L49320e] goto L49320a;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L493248.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L49324c.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L493252.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.b:()V` @kind virtual;
  #L493258.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49326c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L493270.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L493276.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L49327a.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L493280.  v2:= temp;
  #L493282.  if v2 == 0 then goto L49329e;
  #L493286.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.b` @type ^`boolean` @kind boolean;
  #L49328a.  if v2 != 0 then goto L493298;
  #L49328e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L493292.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L493298.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.b:()V` @kind virtual;
  #L49329e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4932b0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.h` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4932b4.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4932ba.  v3:= temp @kind object;
  #L4932bc.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L4932c0.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4932c6.  v3:= (`io.reactivex.rxjava3.core.SingleSource`) v3 @kind object;
  #L4932ca.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4932ce.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4932d4.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a$a`;
  #L4932d8.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;)V` @kind direct;
  #L4932de.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.k` @type ^`boolean` @kind boolean;
  #L4932e2.  if v1 != 0 then goto L4932fc;
  #L4932e6.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4932ea.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4932f0.  v1:= temp;
  #L4932f2.  if v1 == 0 then goto L4932fc;
  #L4932f6.  call `subscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/SingleSource;.subscribe:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind interface;
  #L4932fc.  return @kind void;
  #L4932fe.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L493300.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L493306.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49330a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L493310.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L493316.  return @kind void;
  catch `java.lang.Throwable` @[L4932b0..L4932ca] goto L4932fe;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L493334.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L493338.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L49333e.  v0:= temp;
  #L493340.  if v0 == 0 then goto L49337a;
  #L493344.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L493348.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49334c.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L493352.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.c` @type ^`int`;
  #L493356.  v1:= 2147483647I;
  #L49335c.  if v0 != v1 then goto L493372;
  #L493360.  v0:= 9223372036854775807L;
  #L49336a.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L493370.  goto L49337a;
  #L493372.  v0:= (`long`) v0 @kind i2l;
  #L493374.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L49337a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49338c.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L493392.  v0:= temp;
  #L493394.  if v0 == 0 then goto L4933a8;
  #L493398.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L49339c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4933a2.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.b:()V` @kind virtual;
  #L4933a8.  return @kind void;
}
