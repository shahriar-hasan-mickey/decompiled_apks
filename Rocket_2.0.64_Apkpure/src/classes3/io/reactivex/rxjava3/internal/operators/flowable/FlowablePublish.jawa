record `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.flowables.ConnectableFlowable` @kind class, `io.reactivex.rxjava3.internal.fuseable.HasUpstreamPublisher` @kind interface {
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish;.<init>:(Lorg/reactivestreams/Publisher;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49c1e8.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/flowables/ConnectableFlowable;.<init>:()V` @kind direct;
  #L49c1ee.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.b` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L49c1f2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.c` @type ^`int` := v2;
  #L49c1f6.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L49c1fa.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L49c200.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L49c204.  return @kind void;
}
procedure `void` `connect`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish` v4 @kind this, `io.reactivex.rxjava3.functions.Consumer` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish;.connect:(Lio/reactivex/rxjava3/functions/Consumer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49c218.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49c21c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49c222.  v0:= temp @kind object;
  #L49c224.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b`) v0 @kind object;
  #L49c228.  if v0 == 0 then goto L49c238;
  #L49c22c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.isDisposed:()Z` @kind virtual;
  #L49c232.  v1:= temp;
  #L49c234.  if v1 == 0 then goto L49c25e;
  #L49c238.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b`;
  #L49c23c.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49c240.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.c` @type ^`int`;
  #L49c244.  call `<init>`(v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;I)V` @kind direct;
  #L49c24a.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49c24e.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L49c254.  v0:= temp;
  #L49c256.  if v0 != 0 then goto L49c25c;
  #L49c25a.  goto L49c218;
  #L49c25c.  v0:= v1 @kind object;
  #L49c25e.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L49c262.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L49c268.  v1:= temp;
  #L49c26a.  v2:= 1I;
  #L49c26c.  v3:= 0I;
  #L49c26e.  if v1 != 0 then goto L49c284;
  #L49c272.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L49c276.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L49c27c.  v1:= temp;
  #L49c27e.  if v1 == 0 then goto L49c284;
  #L49c282.  goto L49c286;
  #L49c284.  v2:= 0I;
  #L49c286.  call `accept`(v5, v0) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L49c28c.  if v2 == 0 then goto L49c29a;
  #L49c290.  v5:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L49c294.  call `subscribe`(v5, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L49c29a.  return @kind void;
  #L49c29c.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49c29e.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49c2a4.  call temp:= `wrapOrThrow`(v5) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L49c2aa.  v5:= temp @kind object;
  #L49c2ac.  throw v5;
  catch `java.lang.Throwable` @[L49c286..L49c28c] goto L49c29c;
}
procedure `void` `reset`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49c2cc.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49c2d0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49c2d6.  v0:= temp @kind object;
  #L49c2d8.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b`) v0 @kind object;
  #L49c2dc.  if v0 == 0 then goto L49c2f8;
  #L49c2e0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.isDisposed:()Z` @kind virtual;
  #L49c2e6.  v1:= temp;
  #L49c2e8.  if v1 == 0 then goto L49c2f8;
  #L49c2ec.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49c2f0.  v2:= 0I;
  #L49c2f2.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L49c2f8.  return @kind void;
}
procedure `org.reactivestreams.Publisher` `source`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish;.source:()Lorg/reactivestreams/Publisher;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49c1d0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L49c1d4.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish` v4 @kind this, `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49c30c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49c310.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49c316.  v0:= temp @kind object;
  #L49c318.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b`) v0 @kind object;
  #L49c31c.  if v0 != 0 then goto L49c346;
  #L49c320.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b`;
  #L49c324.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49c328.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.c` @type ^`int`;
  #L49c32c.  call `<init>`(v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;I)V` @kind direct;
  #L49c332.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49c336.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L49c33c.  v0:= temp;
  #L49c33e.  if v0 != 0 then goto L49c344;
  #L49c342.  goto L49c30c;
  #L49c344.  v0:= v1 @kind object;
  #L49c346.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`;
  #L49c34a.  call `<init>`(v1, v5, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;)V` @kind direct;
  #L49c350.  call `onSubscribe`(v5, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L49c356.  call temp:= `a`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.a:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$a;)Z` @kind virtual;
  #L49c35c.  v5:= temp;
  #L49c35e.  if v5 == 0 then goto L49c37e;
  #L49c362.  call temp:= `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$a;.a:()Z` @kind virtual;
  #L49c368.  v5:= temp;
  #L49c36a.  if v5 == 0 then goto L49c376;
  #L49c36e.  call `d`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.d:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$a;)V` @kind virtual;
  #L49c374.  goto L49c37c;
  #L49c376.  call `c`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.c:()V` @kind virtual;
  #L49c37c.  return @kind void;
  #L49c37e.  v5:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.i` @type ^`java.lang.Throwable` @kind object;
  #L49c382.  if v5 == 0 then goto L49c392;
  #L49c386.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49c38a.  call `onError`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49c390.  goto L49c39c;
  #L49c392.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49c396.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49c39c.  return @kind void;
}
