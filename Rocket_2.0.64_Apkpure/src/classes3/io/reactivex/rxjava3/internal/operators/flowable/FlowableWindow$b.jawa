record `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.c` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.d` @AccessFlag FINAL;
  `java.util.ArrayDeque` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.g` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.i` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.j` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.k` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.l` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.m` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.n` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.o` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.p` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `long` v5 , `int` v7 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.<init>:(Lorg/reactivestreams/Subscriber;JJI)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4a591c.  v0:= 1I;
  #L4a591e.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4a5924.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4a5928.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.c` @type ^`long` := v3 @kind wide;
  #L4a592c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.d` @type ^`long` := v5 @kind wide;
  #L4a5930.  v2:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4a5934.  call `<init>`(v2, v7) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4a593a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L4a593e.  v2:= new `java.util.ArrayDeque`;
  #L4a5942.  call `<init>`(v2) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L4a5948.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` := v2 @kind object;
  #L4a594c.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4a5950.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4a5956.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L4a595a.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4a595e.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4a5964.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L4a5968.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4a596c.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a5972.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.h` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L4a5976.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4a597a.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4a5980.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.i` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L4a5984.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.j` @type ^`int` := v7;
  #L4a5988.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b` v1 @kind this, `boolean` v2 , `boolean` v3 , `org.reactivestreams.Subscriber` v4 @kind object, `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.a:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)Z` @AccessFlag  {
    temp;
    v0;

  #L4a58e0.  if v2 == 0 then goto L4a5908;
  #L4a58e4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.o` @type ^`java.lang.Throwable` @kind object;
  #L4a58e8.  v0:= 1I;
  #L4a58ea.  if v2 == 0 then goto L4a58fc;
  #L4a58ee.  call `clear`(v5) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4a58f4.  call `onError`(v4, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a58fa.  return v0;
  #L4a58fc.  if v3 == 0 then goto L4a5908;
  #L4a5900.  call `onComplete`(v4) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a5906.  return v0;
  #L4a5908.  v2:= 0I;
  #L4a590a.  return v2;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b` v15 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L4a59d4.  v0:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.i` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4a59d8.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a59de.  v0:= temp;
  #L4a59e0.  if v0 == 0 then goto L4a59e6;
  #L4a59e4.  return @kind void;
  #L4a59e6.  v0:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a59ea.  v1:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4a59ee.  v2:= 1I;
  #L4a59f0.  v3:= 1I;
  #L4a59f2.  v4:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.p` @type ^`boolean` @kind boolean;
  #L4a59f6.  if v4 == 0 then goto L4a5a12;
  #L4a59fa.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4a5a00.  v4:= temp @kind object;
  #L4a5a02.  v4:= (`io.reactivex.rxjava3.processors.UnicastProcessor`) v4 @kind object;
  #L4a5a06.  if v4 == 0 then goto L4a5adc;
  #L4a5a0a.  call `onComplete`(v4) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4a5a10.  goto L4a59fa;
  #L4a5a12.  v4:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a5a16.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a5a1c.  v4:= temp @kind wide;
  #L4a5a1e.  v6:= 0L;
  #L4a5a22.  v8:= v6 @kind wide;
  #L4a5a24.  v10:= lcmp(v8, v4);
  #L4a5a28.  if v10 == 0 then goto L4a5a8e;
  #L4a5a2c.  v11:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.n` @type ^`boolean` @kind boolean;
  #L4a5a30.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4a5a36.  v12:= temp @kind object;
  #L4a5a38.  v12:= (`io.reactivex.rxjava3.processors.UnicastProcessor`) v12 @kind object;
  #L4a5a3c.  if v12 != 0 then goto L4a5a44;
  #L4a5a40.  v13:= 1I;
  #L4a5a42.  goto L4a5a46;
  #L4a5a44.  v13:= 0I;
  #L4a5a46.  v14:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.p` @type ^`boolean` @kind boolean;
  #L4a5a4a.  if v14 == 0 then goto L4a5a50;
  #L4a5a4e.  goto L4a59f2;
  #L4a5a50.  call temp:= `a`(v15, v11, v13, v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.a:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L4a5a56.  v11:= temp;
  #L4a5a58.  if v11 == 0 then goto L4a5a5e;
  #L4a5a5c.  return @kind void;
  #L4a5a5e.  if v13 == 0 then goto L4a5a64;
  #L4a5a62.  goto L4a5a8e;
  #L4a5a64.  v10:= new `io.reactivex.rxjava3.internal.operators.flowable.b`;
  #L4a5a68.  call `<init>`(v10, v12) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.<init>:(Lio/reactivex/rxjava3/processors/FlowableProcessor;)V` @kind direct;
  #L4a5a6e.  call `onNext`(v0, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a5a74.  call temp:= `e`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.e:()Z` @kind virtual;
  #L4a5a7a.  v10:= temp;
  #L4a5a7c.  if v10 == 0 then goto L4a5a86;
  #L4a5a80.  call `onComplete`(v12) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4a5a86.  v10:= 1L;
  #L4a5a8a.  v8:= v8 + v10 @kind long;
  #L4a5a8c.  goto L4a5a24;
  #L4a5a8e.  if v10 != 0 then goto L4a5ab6;
  #L4a5a92.  v10:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.p` @type ^`boolean` @kind boolean;
  #L4a5a96.  if v10 == 0 then goto L4a5a9c;
  #L4a5a9a.  goto L4a59f2;
  #L4a5a9c.  v10:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.n` @type ^`boolean` @kind boolean;
  #L4a5aa0.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4a5aa6.  v11:= temp;
  #L4a5aa8.  call temp:= `a`(v15, v10, v11, v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.a:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L4a5aae.  v10:= temp;
  #L4a5ab0.  if v10 == 0 then goto L4a5ab6;
  #L4a5ab4.  return @kind void;
  #L4a5ab6.  v10:= lcmp(v8, v6);
  #L4a5aba.  if v10 == 0 then goto L4a5adc;
  #L4a5abe.  v6:= 9223372036854775807L;
  #L4a5ac8.  v10:= lcmp(v4, v6);
  #L4a5acc.  if v10 == 0 then goto L4a5adc;
  #L4a5ad0.  v4:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a5ad4.  v5:= -v8 @kind long;
  #L4a5ad6.  call temp:= `addAndGet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4a5adc.  v4:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.i` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4a5ae0.  v3:= -v3 @kind int;
  #L4a5ae2.  call temp:= `addAndGet`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4a5ae8.  v3:= temp;
  #L4a5aea.  if v3 != 0 then goto L4a59f2;
  #L4a5aee.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a599c.  v0:= 1I;
  #L4a599e.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.p` @type ^`boolean` := v0 @kind boolean;
  #L4a59a2.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a59a6.  v2:= 0I;
  #L4a59a8.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4a59ae.  v0:= temp;
  #L4a59b0.  if v0 == 0 then goto L4a59ba;
  #L4a59b4.  call `run`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.run:()V` @kind virtual;
  #L4a59ba.  call `b`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.b:()V` @kind virtual;
  #L4a59c0.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a5b00.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L4a5b04.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L4a5b0a.  v0:= temp @kind object;
  #L4a5b0c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4a5b12.  v1:= temp;
  #L4a5b14.  if v1 == 0 then goto L4a5b2c;
  #L4a5b18.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4a5b1e.  v1:= temp @kind object;
  #L4a5b20.  v1:= (`org.reactivestreams.Processor`) v1 @kind object;
  #L4a5b24.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a5b2a.  goto L4a5b0c;
  #L4a5b2c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L4a5b30.  call `clear`(v0) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L4a5b36.  v0:= 1I;
  #L4a5b38.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.n` @type ^`boolean` := v0 @kind boolean;
  #L4a5b3c.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.b:()V` @kind virtual;
  #L4a5b42.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a5b54.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L4a5b58.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L4a5b5e.  v0:= temp @kind object;
  #L4a5b60.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4a5b66.  v1:= temp;
  #L4a5b68.  if v1 == 0 then goto L4a5b80;
  #L4a5b6c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4a5b72.  v1:= temp @kind object;
  #L4a5b74.  v1:= (`org.reactivestreams.Processor`) v1 @kind object;
  #L4a5b78.  call `onError`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a5b7e.  goto L4a5b60;
  #L4a5b80.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L4a5b84.  call `clear`(v0) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L4a5b8a.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.o` @type ^`java.lang.Throwable` := v3 @kind object;
  #L4a5b8e.  v3:= 1I;
  #L4a5b90.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.n` @type ^`boolean` := v3 @kind boolean;
  #L4a5b94.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.b:()V` @kind virtual;
  #L4a5b9a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4a5bac.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.k` @type ^`long` @kind wide;
  #L4a5bb0.  v2:= 0L;
  #L4a5bb4.  v4:= lcmp(v0, v2);
  #L4a5bb8.  if v4 != 0 then goto L4a5be2;
  #L4a5bbc.  v4:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.p` @type ^`boolean` @kind boolean;
  #L4a5bc0.  if v4 != 0 then goto L4a5be2;
  #L4a5bc4.  call temp:= `getAndIncrement`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a5bca.  v4:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.j` @type ^`int`;
  #L4a5bce.  call temp:= `create`(v4, v9) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind static;
  #L4a5bd4.  v4:= temp @kind object;
  #L4a5bd6.  v5:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L4a5bda.  call temp:= `offer`(v5, v4) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4a5be0.  goto L4a5be4;
  #L4a5be2.  v4:= 0I;
  #L4a5be4.  v5:= 1L;
  #L4a5be8.  v0:= v0 + v5 @kind long;
  #L4a5bea.  v7:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L4a5bee.  call temp:= `iterator`(v7) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L4a5bf4.  v7:= temp @kind object;
  #L4a5bf6.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4a5bfc.  v8:= temp;
  #L4a5bfe.  if v8 == 0 then goto L4a5c16;
  #L4a5c02.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4a5c08.  v8:= temp @kind object;
  #L4a5c0a.  v8:= (`org.reactivestreams.Processor`) v8 @kind object;
  #L4a5c0e.  call `onNext`(v8, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a5c14.  goto L4a5bf6;
  #L4a5c16.  if v4 == 0 then goto L4a5c2a;
  #L4a5c1a.  v10:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4a5c1e.  call temp:= `offer`(v10, v4) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4a5c24.  call `b`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.b:()V` @kind virtual;
  #L4a5c2a.  v7:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.l` @type ^`long` @kind wide;
  #L4a5c2e.  v7:= v7 + v5 @kind long;
  #L4a5c30.  v4:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.c` @type ^`long` @kind wide;
  #L4a5c34.  v10:= lcmp(v7, v4);
  #L4a5c38.  if v10 != 0 then goto L4a5c62;
  #L4a5c3c.  v4:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.d` @type ^`long` @kind wide;
  #L4a5c40.  v7:= v7 - v4 @kind long;
  #L4a5c42.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.l` @type ^`long` := v7 @kind wide;
  #L4a5c46.  v10:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L4a5c4a.  call temp:= `poll`(v10) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4a5c50.  v10:= temp @kind object;
  #L4a5c52.  v10:= (`org.reactivestreams.Processor`) v10 @kind object;
  #L4a5c56.  if v10 == 0 then goto L4a5c66;
  #L4a5c5a.  call `onComplete`(v10) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a5c60.  goto L4a5c66;
  #L4a5c62.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.l` @type ^`long` := v7 @kind wide;
  #L4a5c66.  v4:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.d` @type ^`long` @kind wide;
  #L4a5c6a.  v10:= lcmp(v0, v4);
  #L4a5c6e.  if v10 != 0 then goto L4a5c78;
  #L4a5c72.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.k` @type ^`long` := v2 @kind wide;
  #L4a5c76.  goto L4a5c7c;
  #L4a5c78.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.k` @type ^`long` := v0 @kind wide;
  #L4a5c7c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a5c90.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.m` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a5c94.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4a5c9a.  v0:= temp;
  #L4a5c9c.  if v0 == 0 then goto L4a5cae;
  #L4a5ca0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.m` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4a5ca4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a5ca8.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4a5cae.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a5cc0.  call temp:= `validate`(v5) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4a5cc6.  v0:= temp;
  #L4a5cc8.  if v0 == 0 then goto L4a5d40;
  #L4a5ccc.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a5cd0.  call temp:= `add`(v0, v5) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4a5cd6.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a5cda.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4a5ce0.  v0:= temp;
  #L4a5ce2.  if v0 != 0 then goto L4a5d24;
  #L4a5ce6.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a5cea.  v1:= 0I;
  #L4a5cec.  v2:= 1I;
  #L4a5cee.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4a5cf4.  v0:= temp;
  #L4a5cf6.  if v0 == 0 then goto L4a5d24;
  #L4a5cfa.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.d` @type ^`long` @kind wide;
  #L4a5cfe.  v2:= 1L;
  #L4a5d02.  v5:= v5 - v2 @kind long;
  #L4a5d04.  call temp:= `multiplyCap`(v0, v5) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L4a5d0a.  v5:= temp @kind wide;
  #L4a5d0c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.c` @type ^`long` @kind wide;
  #L4a5d10.  call temp:= `addCap`(v0, v5) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L4a5d16.  v5:= temp @kind wide;
  #L4a5d18.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.m` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a5d1c.  call `request`(v0, v5) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a5d22.  goto L4a5d3a;
  #L4a5d24.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.d` @type ^`long` @kind wide;
  #L4a5d28.  call temp:= `multiplyCap`(v0, v5) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L4a5d2e.  v5:= temp @kind wide;
  #L4a5d30.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.m` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a5d34.  call `request`(v0, v5) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a5d3a.  call `b`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.b:()V` @kind virtual;
  #L4a5d40.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a5d54.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4a5d5a.  v0:= temp;
  #L4a5d5c.  if v0 != 0 then goto L4a5d6a;
  #L4a5d60.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.m` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a5d64.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a5d6a.  return @kind void;
}
