record `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` @kind class, `org.reactivestreams.Publisher` @kind interface {
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.f` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.g` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.i` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.j` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.k` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.l` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.m` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v1 @kind this, `int` v2 , `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v3 @kind object, `java.lang.Object` v4 @kind object, `boolean` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.<init>:(ILio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;Ljava/lang/Object;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4956c0.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L4956c6.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4956ca.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4956d0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L4956d4.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4956d8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4956de.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L4956e2.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4956e6.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4956ec.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.i` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4956f0.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4956f4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4956fa.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.l` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L4956fe.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L495702.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L495708.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.m` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L49570c.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L495710.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L495716.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v0 @kind object;
  #L49571a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` := v3 @kind object;
  #L49571e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.a` @type ^`java.lang.Object` := v4 @kind object;
  #L495722.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.d` @type ^`boolean` := v5 @kind boolean;
  #L495726.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L495738.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L49573c.  v1:= 0I;
  #L49573e.  v2:= 1I;
  #L495740.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L495746.  v0:= temp;
  #L495748.  if v0 == 0 then goto L495758;
  #L49574c.  call `e`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.e:()V` @kind virtual;
  #L495752.  call `drain`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.drain:()V` @kind virtual;
  #L495758.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4957e4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4957e8.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4957ee.  v1:= temp @kind object;
  #L4957f0.  if v1 == 0 then goto L495802;
  #L4957f4.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.k` @type ^`int`;
  #L4957f8.  v1:= v1 + 1;
  #L4957fc.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.k` @type ^`int` := v1;
  #L495800.  goto L4957e8;
  #L495802.  call `n`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.n:()V` @kind virtual;
  #L495808.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L49581c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L495822.  v0:= temp;
  #L495824.  if v0 == 0 then goto L49582a;
  #L495828.  return @kind void;
  #L49582a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.j` @type ^`boolean` @kind boolean;
  #L49582e.  if v0 == 0 then goto L49583a;
  #L495832.  call `h`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.h:()V` @kind virtual;
  #L495838.  goto L495840;
  #L49583a.  call `i`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.i:()V` @kind virtual;
  #L495840.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L49576c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L495770.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L495776.  v0:= temp;
  #L495778.  v0:= v0 ^& 2;
  #L49577c.  if v0 != 0 then goto L4957a2;
  #L495780.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.m` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L495784.  v1:= 0I;
  #L495786.  v2:= 1I;
  #L495788.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L49578e.  v0:= temp;
  #L495790.  if v0 == 0 then goto L4957a2;
  #L495794.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` @kind object;
  #L495798.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.a` @type ^`java.lang.Object` @kind object;
  #L49579c.  call `cancel`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.cancel:(Ljava/lang/Object;)V` @kind virtual;
  #L4957a2.  return @kind void;
}
procedure `boolean` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v2 @kind this, `boolean` v3 , `boolean` v4 , `org.reactivestreams.Subscriber` v5 @kind object, `boolean` v6 , `long` v7 , `boolean` v9 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.f:(ZZLorg/reactivestreams/Subscriber;ZJZ)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L495538.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L49553c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L495542.  v0:= temp;
  #L495544.  v1:= 1I;
  #L495546.  if v0 == 0 then goto L495552;
  #L49554a.  call `g`(v2, v7, v9) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.g:(JZ)V` @kind virtual;
  #L495550.  return v1;
  #L495552.  if v3 == 0 then goto L4955c6;
  #L495556.  if v6 == 0 then goto L495586;
  #L49555a.  if v4 == 0 then goto L4955c6;
  #L49555e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L495562.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.lazySet:(Z)V` @kind virtual;
  #L495568.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.g` @type ^`java.lang.Throwable` @kind object;
  #L49556c.  if v3 == 0 then goto L495578;
  #L495570.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L495576.  goto L495584;
  #L495578.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49557e.  call `j`(v2, v7, v9) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.j:(JZ)V` @kind virtual;
  #L495584.  return v1;
  #L495586.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.g` @type ^`java.lang.Throwable` @kind object;
  #L49558a.  if v3 == 0 then goto L4955aa;
  #L49558e.  v4:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L495592.  call `clear`(v4) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L495598.  v4:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L49559c.  call `lazySet`(v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.lazySet:(Z)V` @kind virtual;
  #L4955a2.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4955a8.  return v1;
  #L4955aa.  if v4 == 0 then goto L4955c6;
  #L4955ae.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4955b2.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.lazySet:(Z)V` @kind virtual;
  #L4955b8.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4955be.  call `j`(v2, v7, v9) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.j:(JZ)V` @kind virtual;
  #L4955c4.  return v1;
  #L4955c6.  v3:= 0I;
  #L4955c8.  return v3;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v2 @kind this, `long` v3 , `boolean` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.g:(JZ)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4957b4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4957b8.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4957be.  v0:= temp @kind object;
  #L4957c0.  if v0 == 0 then goto L4957cc;
  #L4957c4.  v0:= 1L;
  #L4957c8.  v3:= v3 + v0 @kind long;
  #L4957ca.  goto L4957b4;
  #L4957cc.  call `j`(v2, v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.j:(JZ)V` @kind virtual;
  #L4957d2.  return @kind void;
}
procedure `void` `h`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.h:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L495854.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L495858.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49585c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L495862.  v1:= temp @kind object;
  #L495864.  v1:= (`org.reactivestreams.Subscriber`) v1 @kind object;
  #L495868.  v2:= 1I;
  #L49586a.  if v1 == 0 then goto L4958ca;
  #L49586e.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L495872.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L495878.  v3:= temp;
  #L49587a.  if v3 == 0 then goto L495880;
  #L49587e.  return @kind void;
  #L495880.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.f` @type ^`boolean` @kind boolean;
  #L495884.  if v3 == 0 then goto L4958a6;
  #L495888.  v4:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.d` @type ^`boolean` @kind boolean;
  #L49588c.  if v4 != 0 then goto L4958a6;
  #L495890.  v4:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.g` @type ^`java.lang.Throwable` @kind object;
  #L495894.  if v4 == 0 then goto L4958a6;
  #L495898.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L49589e.  call `onError`(v1, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4958a4.  return @kind void;
  #L4958a6.  v4:= 0I;
  #L4958a8.  call `onNext`(v1, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4958ae.  if v3 == 0 then goto L4958ca;
  #L4958b2.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.g` @type ^`java.lang.Throwable` @kind object;
  #L4958b6.  if v0 == 0 then goto L4958c2;
  #L4958ba.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4958c0.  goto L4958c8;
  #L4958c2.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4958c8.  return @kind void;
  #L4958ca.  v2:= -v2 @kind int;
  #L4958cc.  call temp:= `addAndGet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4958d2.  v2:= temp;
  #L4958d4.  if v2 != 0 then goto L4958da;
  #L4958d8.  return @kind void;
  #L4958da.  if v1 != 0 then goto L49586a;
  #L4958de.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4958e2.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4958e8.  v1:= temp @kind object;
  #L4958ea.  v1:= (`org.reactivestreams.Subscriber`) v1 @kind object;
  #L4958ee.  goto L49586a;
}
procedure `void` `i`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v25 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.i:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;
    v23;
    v24;

  #L495900.  v8:= v25 @kind object;
  #L495904.  v9:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L495908.  v10:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.d` @type ^`boolean` @kind boolean;
  #L49590c.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L495910.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L495916.  v0:= temp @kind object;
  #L495918.  v0:= (`org.reactivestreams.Subscriber`) v0 @kind object;
  #L49591c.  v11:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L495920.  v13:= v0 @kind object;
  #L495922.  v14:= 1I;
  #L495924.  call temp:= `get`(v11) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L49592a.  v0:= temp;
  #L49592c.  v15:= 0I;
  #L49592e.  v5:= 0L;
  #L495932.  if v0 == 0 then goto L495940;
  #L495936.  call `g`(v8, v5, v15) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.g:(JZ)V` @kind virtual;
  #L49593c.  goto L495a18;
  #L495940.  if v13 == 0 then goto L495a18;
  #L495944.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L495948.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49594e.  v16:= temp @kind wide;
  #L495950.  v3:= v5 @kind wide;
  #L495952.  v18:= lcmp(v3, v16);
  #L495956.  if v18 == 0 then goto L4959c6;
  #L49595a.  v1:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.f` @type ^`boolean` @kind boolean;
  #L49595e.  call temp:= `poll`(v9) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L495964.  v7:= temp @kind object;
  #L495966.  if v7 != 0 then goto L495970;
  #L49596a.  v19:= 1I;
  #L49596e.  goto L495974;
  #L495970.  v19:= 0I;
  #L495974.  v20:= v19 ^~ 1;
  #L495978.  v0:= v25 @kind object;
  #L49597c.  v2:= v19;
  #L495980.  v21:= v3 @kind wide;
  #L495984.  v3:= v13 @kind object;
  #L495986.  v4:= v10;
  #L495988.  v23:= v5 @kind wide;
  #L49598c.  v5:= v21 @kind wide;
  #L495990.  v12:= v7 @kind object;
  #L495992.  v7:= v20;
  #L495996.  call temp:= `f`(v0, v1, v2, v3, v4, v5, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.f:(ZZLorg/reactivestreams/Subscriber;ZJZ)Z` @kind virtual;
  #L49599c.  v0:= temp;
  #L49599e.  if v0 == 0 then goto L4959a4;
  #L4959a2.  goto L495924;
  #L4959a4.  if v19 == 0 then goto L4959ae;
  #L4959a8.  v5:= v21 @kind wide;
  #L4959ac.  goto L4959cc;
  #L4959ae.  call `onNext`(v13, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4959b4.  v0:= 1L;
  #L4959b8.  v5:= v21 @kind wide;
  #L4959bc.  v3:= v5 + v0 @kind long;
  #L4959c0.  v5:= v23 @kind wide;
  #L4959c4.  goto L495952;
  #L4959c6.  v23:= v5 @kind wide;
  #L4959ca.  v5:= v3 @kind wide;
  #L4959cc.  if v18 != 0 then goto L4959fe;
  #L4959d0.  v1:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.f` @type ^`boolean` @kind boolean;
  #L4959d4.  call temp:= `isEmpty`(v9) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4959da.  v2:= temp;
  #L4959dc.  v7:= 0I;
  #L4959de.  v0:= v25 @kind object;
  #L4959e2.  v3:= v13 @kind object;
  #L4959e4.  v4:= v10;
  #L4959e6.  v21:= v5 @kind wide;
  #L4959ea.  call temp:= `f`(v0, v1, v2, v3, v4, v5, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.f:(ZZLorg/reactivestreams/Subscriber;ZJZ)Z` @kind virtual;
  #L4959f0.  v0:= temp;
  #L4959f2.  if v0 == 0 then goto L4959f8;
  #L4959f6.  goto L495924;
  #L4959f8.  v3:= v21 @kind wide;
  #L4959fc.  goto L495a00;
  #L4959fe.  v3:= v5 @kind wide;
  #L495a00.  v0:= lcmp(v3, v23);
  #L495a04.  if v0 == 0 then goto L495a18;
  #L495a08.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L495a0c.  call temp:= `produced`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L495a12.  call `k`(v8, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.k:(J)V` @kind virtual;
  #L495a18.  v0:= -v14 @kind int;
  #L495a1a.  call temp:= `addAndGet`(v8, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L495a20.  v14:= temp;
  #L495a22.  if v14 != 0 then goto L495a28;
  #L495a26.  return @kind void;
  #L495a28.  if v13 != 0 then goto L495924;
  #L495a2c.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L495a30.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L495a36.  v0:= temp @kind object;
  #L495a38.  v13:= v0 @kind object;
  #L495a3a.  v13:= (`org.reactivestreams.Subscriber`) v13 @kind object;
  #L495a3e.  goto L495924;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4955dc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4955e0.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4955e6.  v0:= temp;
  #L4955e8.  if v0 == 0 then goto L4955f6;
  #L4955ec.  call `n`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.n:()V` @kind virtual;
  #L4955f2.  v0:= 1I;
  #L4955f4.  return v0;
  #L4955f6.  call `n`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.n:()V` @kind virtual;
  #L4955fc.  v0:= 0I;
  #L4955fe.  return v0;
}
procedure `void` `j`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v2 @kind this, `long` v3 , `boolean` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.j:(JZ)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L495abc.  if v5 == 0 then goto L495ac6;
  #L495ac0.  v0:= 1L;
  #L495ac4.  v3:= v3 + v0 @kind long;
  #L495ac6.  v0:= 0L;
  #L495aca.  v5:= lcmp(v3, v0);
  #L495ace.  if v5 == 0 then goto L495ad8;
  #L495ad2.  call `k`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.k:(J)V` @kind virtual;
  #L495ad8.  return @kind void;
}
procedure `void` `k`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.k:(J)V` @AccessFlag  {
    temp;
    v0;

  #L495b1c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L495b20.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L495b26.  v0:= temp;
  #L495b28.  v0:= v0 ^& 2;
  #L495b2c.  if v0 != 0 then goto L495b3a;
  #L495b30.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` @kind object;
  #L495b34.  call `c`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.c:(J)V` @kind virtual;
  #L495b3a.  return @kind void;
}
procedure `boolean` `l`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.l:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L495610.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L495614.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L49561a.  v0:= temp;
  #L49561c.  v1:= 0I;
  #L49561e.  if v0 != 0 then goto L495636;
  #L495622.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L495626.  v2:= 2I;
  #L495628.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L49562e.  v0:= temp;
  #L495630.  if v0 == 0 then goto L495636;
  #L495634.  v1:= 1I;
  #L495636.  return v1;
}
procedure `boolean` `m`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.m:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L495648.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.m` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L49564c.  v1:= 0I;
  #L49564e.  v2:= 1I;
  #L495650.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L495656.  v0:= temp;
  #L495658.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.f` @type ^`boolean` := v2 @kind boolean;
  #L49565c.  call `drain`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.drain:()V` @kind virtual;
  #L495662.  return v0;
}
procedure `void` `n`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.n:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L495bd0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.k` @type ^`int`;
  #L495bd4.  if v0 == 0 then goto L495be6;
  #L495bd8.  v1:= 0I;
  #L495bda.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.k` @type ^`int` := v1;
  #L495bde.  v0:= (`long`) v0 @kind i2l;
  #L495be0.  call `k`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.k:(J)V` @kind virtual;
  #L495be6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L495a54.  v0:= 1I;
  #L495a56.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.f` @type ^`boolean` := v0 @kind boolean;
  #L495a5a.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.drain:()V` @kind virtual;
  #L495a60.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L495a74.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.g` @type ^`java.lang.Throwable` := v1 @kind object;
  #L495a78.  v1:= 1I;
  #L495a7a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.f` @type ^`boolean` := v1 @kind boolean;
  #L495a7e.  call `drain`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.drain:()V` @kind virtual;
  #L495a84.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L495a98.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L495a9c.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L495aa2.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.drain:()V` @kind virtual;
  #L495aa8.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L495688.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L49568c.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L495692.  v0:= temp @kind object;
  #L495694.  if v0 == 0 then goto L4956a6;
  #L495698.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.k` @type ^`int`;
  #L49569c.  v1:= v1 + 1;
  #L4956a0.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.k` @type ^`int` := v1;
  #L4956a4.  return v0 @kind object;
  #L4956a6.  call `n`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.n:()V` @kind virtual;
  #L4956ac.  v0:= 0I;
  #L4956ae.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L495aec.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L495af2.  v0:= temp;
  #L495af4.  if v0 == 0 then goto L495b08;
  #L495af8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L495afc.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L495b02.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.drain:()V` @kind virtual;
  #L495b08.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L495674.  v1:= 0I;
  #L495676.  return v1;
}
procedure `void` `subscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L495b4c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L495b50.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L495b56.  v0:= temp;
  #L495b58.  v1:= v0 ^& 1;
  #L495b5c.  if v1 == 0 then goto L495b76;
  #L495b60.  v0:= new `java.lang.IllegalStateException`;
  #L495b64.  v1:= "Only one Subscriber allowed!" @kind object;
  #L495b68.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L495b6e.  call `error`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L495b74.  return @kind void;
  #L495b76.  v1:= v0 ^| 1;
  #L495b7a.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L495b7e.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L495b84.  v0:= temp;
  #L495b86.  if v0 == 0 then goto L495b4c;
  #L495b8a.  call `onSubscribe`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L495b90.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L495b94.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L495b9a.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L495b9e.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L495ba4.  v4:= temp;
  #L495ba6.  if v4 == 0 then goto L495bb8;
  #L495baa.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L495bae.  v0:= 0I;
  #L495bb0.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L495bb6.  goto L495bbe;
  #L495bb8.  call `drain`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.drain:()V` @kind virtual;
  #L495bbe.  return @kind void;
}
