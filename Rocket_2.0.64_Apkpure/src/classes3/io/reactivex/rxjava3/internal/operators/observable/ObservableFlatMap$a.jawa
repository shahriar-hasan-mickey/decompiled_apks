record `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface {
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.c` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.d` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a` v0 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bd604.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4bd60a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.a` @type ^`long` := v2 @kind wide;
  #L4bd60e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` := v1 @kind object;
  #L4bd612.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$a;.a:()V` @AccessFlag PUBLIC {
    temp;

  #L4bd624.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4bd62a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd63c.  v0:= 1I;
  #L4bd63e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4bd642.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` @kind object;
  #L4bd646.  call `d`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.d:()V` @kind virtual;
  #L4bd64c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd660.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` @kind object;
  #L4bd664.  v0:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bd668.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bd66e.  v2:= temp;
  #L4bd670.  if v2 == 0 then goto L4bd696;
  #L4bd674.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` @kind object;
  #L4bd678.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.c` @type ^`boolean` @kind boolean;
  #L4bd67c.  if v0 != 0 then goto L4bd686;
  #L4bd680.  call temp:= `c`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.c:()Z` @kind virtual;
  #L4bd686.  v2:= 1I;
  #L4bd688.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.c` @type ^`boolean` := v2 @kind boolean;
  #L4bd68c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` @kind object;
  #L4bd690.  call `d`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.d:()V` @kind virtual;
  #L4bd696.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd6a8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.e` @type ^`int`;
  #L4bd6ac.  if v0 != 0 then goto L4bd6bc;
  #L4bd6b0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` @kind object;
  #L4bd6b4.  call `i`(v0, v2, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.i:(Ljava/lang/Object;Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$a;)V` @kind virtual;
  #L4bd6ba.  goto L4bd6c6;
  #L4bd6bc.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` @kind object;
  #L4bd6c0.  call `d`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.d:()V` @kind virtual;
  #L4bd6c6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a` v2 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bd6d8.  call temp:= `setOnce`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4bd6de.  v0:= temp;
  #L4bd6e0.  if v0 == 0 then goto L4bd726;
  #L4bd6e4.  v0:= instanceof @variable v3 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind boolean;
  #L4bd6e8.  if v0 == 0 then goto L4bd726;
  #L4bd6ec.  v3:= (`io.reactivex.rxjava3.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L4bd6f0.  v0:= 7I;
  #L4bd6f2.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4bd6f8.  v0:= temp;
  #L4bd6fa.  v1:= 1I;
  #L4bd6fc.  if v0 != v1 then goto L4bd718;
  #L4bd700.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.e` @type ^`int` := v0;
  #L4bd704.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4bd708.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.c` @type ^`boolean` := v1 @kind boolean;
  #L4bd70c.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` @kind object;
  #L4bd710.  call `d`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.d:()V` @kind virtual;
  #L4bd716.  return @kind void;
  #L4bd718.  v1:= 2I;
  #L4bd71a.  if v0 != v1 then goto L4bd726;
  #L4bd71e.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.e` @type ^`int` := v0;
  #L4bd722.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4bd726.  return @kind void;
}
