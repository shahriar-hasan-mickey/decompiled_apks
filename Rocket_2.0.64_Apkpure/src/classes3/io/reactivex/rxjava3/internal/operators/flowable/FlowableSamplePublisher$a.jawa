record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c` @kind class {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$a.g` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$a;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49f4ac.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L49f4b2.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L49f4b6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L49f4bc.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L49f4c0.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L49f4d4.  v0:= 1I;
  #L49f4d6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$a.g` @type ^`boolean` := v0 @kind boolean;
  #L49f4da.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L49f4de.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L49f4e4.  v0:= temp;
  #L49f4e6.  if v0 != 0 then goto L49f4fa;
  #L49f4ea.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.c:()V` @kind virtual;
  #L49f4f0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49f4f4.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49f4fa.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$a;.e:()V` @AccessFlag  {
    temp;
    v0;

  #L49f50c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L49f510.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L49f516.  v0:= temp;
  #L49f518.  if v0 != 0 then goto L49f546;
  #L49f51c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$a.g` @type ^`boolean` @kind boolean;
  #L49f520.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.c:()V` @kind virtual;
  #L49f526.  if v0 == 0 then goto L49f536;
  #L49f52a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49f52e.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49f534.  return @kind void;
  #L49f536.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L49f53a.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L49f540.  v0:= temp;
  #L49f542.  if v0 != 0 then goto L49f51c;
  #L49f546.  return @kind void;
}
