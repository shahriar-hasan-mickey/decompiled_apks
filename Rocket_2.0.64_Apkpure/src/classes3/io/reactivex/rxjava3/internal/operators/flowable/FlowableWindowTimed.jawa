record `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.a` @kind class {
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.e` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.f` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.g` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.h` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed` v0 @kind this, `io.reactivex.rxjava3.core.Flowable` v1 @kind object, `long` v2 , `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `io.reactivex.rxjava3.core.Scheduler` v7 @kind object, `long` v8 , `int` v10 , `boolean` v11 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed;.<init>:(Lio/reactivex/rxjava3/core/Flowable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;JIZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a7cb0.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/a;.<init>:(Lio/reactivex/rxjava3/core/Flowable;)V` @kind direct;
  #L4a7cb6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.b` @type ^`long` := v2 @kind wide;
  #L4a7cba.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.c` @type ^`long` := v4 @kind wide;
  #L4a7cbe.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.d` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L4a7cc2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.e` @type ^`io.reactivex.rxjava3.core.Scheduler` := v7 @kind object;
  #L4a7cc6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.f` @type ^`long` := v8 @kind wide;
  #L4a7cca.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.g` @type ^`int` := v10;
  #L4a7cce.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.h` @type ^`boolean` := v11 @kind boolean;
  #L4a7cd2.  return @kind void;
}
procedure `java.lang.String` `e`(`long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed;.e:(J)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L4a7c70.  v0:= new `java.lang.StringBuilder`;
  #L4a7c74.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4a7c7a.  v1:= "Unable to emit the next window (#" @kind object;
  #L4a7c7e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a7c84.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a7c8a.  v2:= ") due to lack of requests. Please make sure the downstream is ready to consume windows." @kind object;
  #L4a7c8e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a7c94.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4a7c9a.  v2:= temp @kind object;
  #L4a7c9c.  return v2 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed` v12 @kind this, `org.reactivestreams.Subscriber` v13 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4a7ce4.  v0:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.b` @type ^`long` @kind wide;
  #L4a7ce8.  v2:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.c` @type ^`long` @kind wide;
  #L4a7cec.  v4:= lcmp(v0, v2);
  #L4a7cf0.  if v4 != 0 then goto L4a7d66;
  #L4a7cf4.  v0:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.f` @type ^`long` @kind wide;
  #L4a7cf8.  v2:= 9223372036854775807L;
  #L4a7d02.  v4:= lcmp(v0, v2);
  #L4a7d06.  if v4 != 0 then goto L4a7d34;
  #L4a7d0a.  v0:= v12.`io.reactivex.rxjava3.internal.operators.flowable.a.source` @type ^`io.reactivex.rxjava3.core.Flowable` @kind object;
  #L4a7d0e.  v8:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c`;
  #L4a7d12.  v3:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.b` @type ^`long` @kind wide;
  #L4a7d16.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4a7d1a.  v6:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.e` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4a7d1e.  v7:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.g` @type ^`int`;
  #L4a7d22.  v1:= v8 @kind object;
  #L4a7d24.  v2:= v13 @kind object;
  #L4a7d26.  call `<init>`(v1, v2, v3, v5, v6, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$c;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;I)V` @kind direct;
  #L4a7d2c.  call `subscribe`(v0, v8) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V` @kind virtual;
  #L4a7d32.  return @kind void;
  #L4a7d34.  v0:= v12.`io.reactivex.rxjava3.internal.operators.flowable.a.source` @type ^`io.reactivex.rxjava3.core.Flowable` @kind object;
  #L4a7d38.  v11:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b`;
  #L4a7d3c.  v3:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.b` @type ^`long` @kind wide;
  #L4a7d40.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4a7d44.  v6:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.e` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4a7d48.  v7:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.g` @type ^`int`;
  #L4a7d4c.  v8:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.f` @type ^`long` @kind wide;
  #L4a7d50.  v10:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.h` @type ^`boolean` @kind boolean;
  #L4a7d54.  v1:= v11 @kind object;
  #L4a7d56.  v2:= v13 @kind object;
  #L4a7d58.  call `<init>`(v1, v2, v3, v5, v6, v7, v8, v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;IJZ)V` @kind direct;
  #L4a7d5e.  call `subscribe`(v0, v11) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V` @kind virtual;
  #L4a7d64.  return @kind void;
  #L4a7d66.  v0:= v12.`io.reactivex.rxjava3.internal.operators.flowable.a.source` @type ^`io.reactivex.rxjava3.core.Flowable` @kind object;
  #L4a7d6a.  v10:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d`;
  #L4a7d6e.  v3:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.b` @type ^`long` @kind wide;
  #L4a7d72.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.c` @type ^`long` @kind wide;
  #L4a7d76.  v7:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4a7d7a.  v1:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.e` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4a7d7e.  call temp:= `createWorker`(v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.createWorker:()Lio/reactivex/rxjava3/core/Scheduler$Worker;` @kind virtual;
  #L4a7d84.  v8:= temp @kind object;
  #L4a7d86.  v9:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.g` @type ^`int`;
  #L4a7d8a.  v1:= v10 @kind object;
  #L4a7d8c.  v2:= v13 @kind object;
  #L4a7d8e.  call `<init>`(v1, v2, v3, v5, v7, v8, v9) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;.<init>:(Lorg/reactivestreams/Subscriber;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler$Worker;I)V` @kind direct;
  #L4a7d94.  call `subscribe`(v0, v10) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V` @kind virtual;
  #L4a7d9a.  return @kind void;
}
