record `io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BooleanSupplier` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.d` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.BooleanSupplier` v2 @kind object, `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatUntil$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/BooleanSupplier;Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49d6e8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L49d6ee.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L49d6f2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.b` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` := v3 @kind object;
  #L49d6f6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.c` @type ^`org.reactivestreams.Publisher` := v4 @kind object;
  #L49d6fa.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.d` @type ^`io.reactivex.rxjava3.functions.BooleanSupplier` := v2 @kind object;
  #L49d6fe.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatUntil$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49d7c8.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L49d7ce.  v0:= temp;
  #L49d7d0.  if v0 != 0 then goto L49d81e;
  #L49d7d4.  v0:= 1I;
  #L49d7d6.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.b` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L49d7da.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.isCancelled:()Z` @kind virtual;
  #L49d7e0.  v1:= temp;
  #L49d7e2.  if v1 == 0 then goto L49d7e8;
  #L49d7e6.  return @kind void;
  #L49d7e8.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.e` @type ^`long` @kind wide;
  #L49d7ec.  v3:= 0L;
  #L49d7f0.  v5:= lcmp(v1, v3);
  #L49d7f4.  if v5 == 0 then goto L49d806;
  #L49d7f8.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.e` @type ^`long` := v3 @kind wide;
  #L49d7fc.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.b` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L49d800.  call `produced`(v3, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L49d806.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.c` @type ^`org.reactivestreams.Publisher` @kind object;
  #L49d80a.  call `subscribe`(v1, v6) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L49d810.  v0:= -v0 @kind int;
  #L49d812.  call temp:= `addAndGet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L49d818.  v0:= temp;
  #L49d81a.  if v0 != 0 then goto L49d7d6;
  #L49d81e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatUntil$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49d710.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.d` @type ^`io.reactivex.rxjava3.functions.BooleanSupplier` @kind object;
  #L49d714.  call temp:= `getAsBoolean`(v0) @signature `Lio/reactivex/rxjava3/functions/BooleanSupplier;.getAsBoolean:()Z` @kind interface;
  #L49d71a.  v0:= temp;
  #L49d71c.  if v0 == 0 then goto L49d72c;
  #L49d720.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49d724.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49d72a.  goto L49d732;
  #L49d72c.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatUntil$a;.a:()V` @kind virtual;
  #L49d732.  return @kind void;
  #L49d734.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49d736.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49d73c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49d740.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49d746.  return @kind void;
  catch `java.lang.Throwable` @[L49d710..L49d71c] goto L49d734;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatUntil$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49d764.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49d768.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49d76e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatUntil$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49d780.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.e` @type ^`long` @kind wide;
  #L49d784.  v2:= 1L;
  #L49d788.  v0:= v0 + v2 @kind long;
  #L49d78a.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.e` @type ^`long` := v0 @kind wide;
  #L49d78e.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49d792.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L49d798.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatUntil$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49d7ac.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.b` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L49d7b0.  call `setSubscription`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L49d7b6.  return @kind void;
}
