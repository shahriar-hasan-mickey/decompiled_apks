record `io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.CompletableObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.CompletableObserver` `io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a$a` `io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.c` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a` v0 @kind this, `io.reactivex.rxjava3.core.CompletableObserver` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableTakeUntilCompletable$a;.<init>:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L485cb4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L485cba.  v0.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` := v1 @kind object;
  #L485cbe.  v1:= new `io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a$a`;
  #L485cc2.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableTakeUntilCompletable$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/completable/CompletableTakeUntilCompletable$a;)V` @kind direct;
  #L485cc8.  v0.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.b` @type ^`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a$a` := v1 @kind object;
  #L485ccc.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L485cd0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L485cd6.  v0.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L485cda.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableTakeUntilCompletable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L485d24.  v0:= v3.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L485d28.  v1:= 0I;
  #L485d2a.  v2:= 1I;
  #L485d2c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L485d32.  v0:= temp;
  #L485d34.  if v0 == 0 then goto L485d48;
  #L485d38.  call temp:= `dispose`(v3) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L485d3e.  v0:= v3.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L485d42.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onComplete:()V` @kind interface;
  #L485d48.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableTakeUntilCompletable$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L485d5c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L485d60.  v1:= 0I;
  #L485d62.  v2:= 1I;
  #L485d64.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L485d6a.  v0:= temp;
  #L485d6c.  if v0 == 0 then goto L485d82;
  #L485d70.  call temp:= `dispose`(v3) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L485d76.  v0:= v3.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L485d7a.  call `onError`(v0, v4) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L485d80.  goto L485d88;
  #L485d82.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L485d88.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableTakeUntilCompletable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L485cec.  v0:= v3.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L485cf0.  v1:= 0I;
  #L485cf2.  v2:= 1I;
  #L485cf4.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L485cfa.  v0:= temp;
  #L485cfc.  if v0 == 0 then goto L485d10;
  #L485d00.  call temp:= `dispose`(v3) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L485d06.  v0:= v3.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.b` @type ^`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a$a` @kind object;
  #L485d0a.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L485d10.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableTakeUntilCompletable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L485c94.  v0:= v1.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L485c98.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L485c9e.  v0:= temp;
  #L485ca0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableTakeUntilCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L485d9c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L485da0.  v1:= 0I;
  #L485da2.  v2:= 1I;
  #L485da4.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L485daa.  v0:= temp;
  #L485dac.  if v0 == 0 then goto L485dc4;
  #L485db0.  v0:= v3.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.b` @type ^`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a$a` @kind object;
  #L485db4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L485dba.  v0:= v3.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L485dbe.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onComplete:()V` @kind interface;
  #L485dc4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableTakeUntilCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L485dd8.  v0:= v3.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L485ddc.  v1:= 0I;
  #L485dde.  v2:= 1I;
  #L485de0.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L485de6.  v0:= temp;
  #L485de8.  if v0 == 0 then goto L485e02;
  #L485dec.  v0:= v3.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.b` @type ^`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a$a` @kind object;
  #L485df0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L485df6.  v0:= v3.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L485dfa.  call `onError`(v0, v4) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L485e00.  goto L485e08;
  #L485e02.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L485e08.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableTakeUntilCompletable$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L485e1c.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L485e22.  return @kind void;
}
