record `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.e` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.f` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.g` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.h` @AccessFlag ;
  `io.reactivex.rxjava3.processors.UnicastProcessor` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.i` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `long` v5 , `int` v7 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$c;.<init>:(Lorg/reactivestreams/Subscriber;JJI)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4a5d7c.  v0:= 1I;
  #L4a5d7e.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4a5d84.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4a5d88.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.b` @type ^`long` := v3 @kind wide;
  #L4a5d8c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.c` @type ^`long` := v5 @kind wide;
  #L4a5d90.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4a5d94.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4a5d9a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L4a5d9e.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4a5da2.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4a5da8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L4a5dac.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.f` @type ^`int` := v7;
  #L4a5db0.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a5dc4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a5dc8.  v1:= 0I;
  #L4a5dca.  v2:= 1I;
  #L4a5dcc.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4a5dd2.  v0:= temp;
  #L4a5dd4.  if v0 == 0 then goto L4a5dde;
  #L4a5dd8.  call `run`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$c;.run:()V` @kind virtual;
  #L4a5dde.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a5df0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.i` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` @kind object;
  #L4a5df4.  if v0 == 0 then goto L4a5e04;
  #L4a5df8.  v1:= 0I;
  #L4a5dfa.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.i` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v1 @kind object;
  #L4a5dfe.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a5e04.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a5e08.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a5e0e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a5e20.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.i` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` @kind object;
  #L4a5e24.  if v0 == 0 then goto L4a5e34;
  #L4a5e28.  v1:= 0I;
  #L4a5e2a.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.i` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v1 @kind object;
  #L4a5e2e.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a5e34.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a5e38.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a5e3e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4a5e50.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.g` @type ^`long` @kind wide;
  #L4a5e54.  v2:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.i` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` @kind object;
  #L4a5e58.  v3:= 0L;
  #L4a5e5c.  v5:= 0I;
  #L4a5e5e.  v6:= lcmp(v0, v3);
  #L4a5e62.  if v6 != 0 then goto L4a5e92;
  #L4a5e66.  call temp:= `getAndIncrement`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a5e6c.  v2:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.f` @type ^`int`;
  #L4a5e70.  call temp:= `create`(v2, v9) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind static;
  #L4a5e76.  v2:= temp @kind object;
  #L4a5e78.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.i` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v2 @kind object;
  #L4a5e7c.  v6:= new `io.reactivex.rxjava3.internal.operators.flowable.b`;
  #L4a5e80.  call `<init>`(v6, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.<init>:(Lio/reactivex/rxjava3/processors/FlowableProcessor;)V` @kind direct;
  #L4a5e86.  v7:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a5e8a.  call `onNext`(v7, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a5e90.  goto L4a5e94;
  #L4a5e92.  v6:= v5 @kind object;
  #L4a5e94.  v7:= 1L;
  #L4a5e98.  v0:= v0 + v7 @kind long;
  #L4a5e9a.  if v2 == 0 then goto L4a5ea4;
  #L4a5e9e.  call `onNext`(v2, v10) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a5ea4.  v7:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.b` @type ^`long` @kind wide;
  #L4a5ea8.  v10:= lcmp(v0, v7);
  #L4a5eac.  if v10 != 0 then goto L4a5eba;
  #L4a5eb0.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.i` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v5 @kind object;
  #L4a5eb4.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4a5eba.  v7:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.c` @type ^`long` @kind wide;
  #L4a5ebe.  v10:= lcmp(v0, v7);
  #L4a5ec2.  if v10 != 0 then goto L4a5ecc;
  #L4a5ec6.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.g` @type ^`long` := v3 @kind wide;
  #L4a5eca.  goto L4a5ed0;
  #L4a5ecc.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.g` @type ^`long` := v0 @kind wide;
  #L4a5ed0.  if v6 == 0 then goto L4a5eea;
  #L4a5ed4.  call temp:= `e`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.e:()Z` @kind virtual;
  #L4a5eda.  v10:= temp;
  #L4a5edc.  if v10 == 0 then goto L4a5eea;
  #L4a5ee0.  v10:= v6.`io.reactivex.rxjava3.internal.operators.flowable.b.b` @type ^`io.reactivex.rxjava3.processors.FlowableProcessor` @kind object;
  #L4a5ee4.  call `onComplete`(v10) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a5eea.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a5efc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a5f00.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4a5f06.  v0:= temp;
  #L4a5f08.  if v0 == 0 then goto L4a5f1a;
  #L4a5f0c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.h` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4a5f10.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a5f14.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4a5f1a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4a5f2c.  call temp:= `validate`(v7) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4a5f32.  v0:= temp;
  #L4a5f34.  if v0 == 0 then goto L4a5faa;
  #L4a5f38.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a5f3c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4a5f42.  v0:= temp;
  #L4a5f44.  if v0 != 0 then goto L4a5f94;
  #L4a5f48.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a5f4c.  v1:= 0I;
  #L4a5f4e.  v2:= 1I;
  #L4a5f50.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4a5f56.  v0:= temp;
  #L4a5f58.  if v0 == 0 then goto L4a5f94;
  #L4a5f5c.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.b` @type ^`long` @kind wide;
  #L4a5f60.  call temp:= `multiplyCap`(v0, v7) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L4a5f66.  v0:= temp @kind wide;
  #L4a5f68.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.c` @type ^`long` @kind wide;
  #L4a5f6c.  v4:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.b` @type ^`long` @kind wide;
  #L4a5f70.  v2:= v2 - v4 @kind long;
  #L4a5f72.  v4:= 1L;
  #L4a5f76.  v7:= v7 - v4 @kind long;
  #L4a5f78.  call temp:= `multiplyCap`(v2, v7) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L4a5f7e.  v7:= temp @kind wide;
  #L4a5f80.  call temp:= `addCap`(v0, v7) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L4a5f86.  v7:= temp @kind wide;
  #L4a5f88.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a5f8c.  call `request`(v0, v7) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a5f92.  goto L4a5faa;
  #L4a5f94.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.c` @type ^`long` @kind wide;
  #L4a5f98.  call temp:= `multiplyCap`(v0, v7) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L4a5f9e.  v7:= temp @kind wide;
  #L4a5fa0.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a5fa4.  call `request`(v0, v7) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a5faa.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a5fbc.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4a5fc2.  v0:= temp;
  #L4a5fc4.  if v0 != 0 then goto L4a5fd2;
  #L4a5fc8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a5fcc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a5fd2.  return @kind void;
}
