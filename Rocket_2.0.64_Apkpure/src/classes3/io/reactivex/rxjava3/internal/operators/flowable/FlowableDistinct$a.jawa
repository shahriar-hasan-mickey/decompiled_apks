record `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber` @kind class {
  `java.util.Collection` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `java.util.Collection` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinct$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;Ljava/util/Collection;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48f1ec.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L48f1f2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L48f1f6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a.a` @type ^`java.util.Collection` := v3 @kind object;
  #L48f1fa.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinct$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48f20c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L48f210.  call `clear`(v0) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L48f216.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableSubscriber;.clear:()V` @kind super;
  #L48f21c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinct$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48f230.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` @kind boolean;
  #L48f234.  if v0 != 0 then goto L48f252;
  #L48f238.  v0:= 1I;
  #L48f23a.  v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L48f23e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L48f242.  call `clear`(v0) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L48f248.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48f24c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L48f252.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinct$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48f264.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` @kind boolean;
  #L48f268.  if v0 == 0 then goto L48f274;
  #L48f26c.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L48f272.  goto L48f28e;
  #L48f274.  v0:= 1I;
  #L48f276.  v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L48f27a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L48f27e.  call `clear`(v0) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L48f284.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48f288.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48f28e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinct$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48f2a0.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` @kind boolean;
  #L48f2a4.  if v0 == 0 then goto L48f2aa;
  #L48f2a8.  return @kind void;
  #L48f2aa.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.sourceMode` @type ^`int`;
  #L48f2ae.  if v0 != 0 then goto L48f2fe;
  #L48f2b2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L48f2b6.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L48f2bc.  v0:= temp @kind object;
  #L48f2be.  v1:= "The keySelector returned a null key" @kind object;
  #L48f2c2.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48f2c8.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L48f2cc.  call temp:= `add`(v1, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48f2d2.  v0:= temp;
  #L48f2d4.  if v0 == 0 then goto L48f2e4;
  #L48f2d8.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48f2dc.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48f2e2.  goto L48f30a;
  #L48f2e4.  v3:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48f2e8.  v0:= 1L;
  #L48f2ec.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L48f2f2.  goto L48f30a;
  #L48f2f4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48f2f6.  call `fail`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L48f2fc.  return @kind void;
  #L48f2fe.  v3:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48f302.  v0:= 0I;
  #L48f304.  call `onNext`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48f30a.  return @kind void;
  catch `java.lang.Throwable` @[L48f2b2..L48f2d4] goto L48f2f4;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinct$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48f188.  v0:= v4.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.qs` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind object;
  #L48f18c.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L48f192.  v0:= temp @kind object;
  #L48f194.  if v0 == 0 then goto L48f1da;
  #L48f198.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L48f19c.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L48f1a0.  call temp:= `apply`(v2, v0) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L48f1a6.  v2:= temp @kind object;
  #L48f1a8.  v3:= "The keySelector returned a null key" @kind object;
  #L48f1ac.  call temp:= `requireNonNull`(v2, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48f1b2.  call temp:= `add`(v1, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48f1b8.  v1:= temp;
  #L48f1ba.  if v1 == 0 then goto L48f1c0;
  #L48f1be.  goto L48f1da;
  #L48f1c0.  v0:= v4.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.sourceMode` @type ^`int`;
  #L48f1c4.  v1:= 2I;
  #L48f1c6.  if v0 != v1 then goto L48f188;
  #L48f1ca.  v0:= v4.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48f1ce.  v1:= 1L;
  #L48f1d2.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L48f1d8.  goto L48f188;
  #L48f1da.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinct$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L48f16c.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L48f172.  v1:= temp;
  #L48f174.  return v1;
}
