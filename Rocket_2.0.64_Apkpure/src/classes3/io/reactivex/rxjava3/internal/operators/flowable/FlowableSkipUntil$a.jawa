record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a$a` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.f` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipUntil$a;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a1a04.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4a1a0a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4a1a0e.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4a1a12.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4a1a18.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4a1a1c.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4a1a20.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a1a26.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4a1a2a.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a$a`;
  #L4a1a2e.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipUntil$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipUntil$a;)V` @kind direct;
  #L4a1a34.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a$a` := v1 @kind object;
  #L4a1a38.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4a1a3c.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4a1a42.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4a1a46.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipUntil$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a1a58.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a1a5c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4a1a62.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a$a` @kind object;
  #L4a1a66.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4a1a6c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipUntil$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a1a80.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a$a` @kind object;
  #L4a1a84.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4a1a8a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a1a8e.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a1a92.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4a1a98.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipUntil$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a1aac.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a$a` @kind object;
  #L4a1ab0.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4a1ab6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a1aba.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a1abe.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4a1ac4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipUntil$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a1ad8.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipUntil$a;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L4a1ade.  v3:= temp;
  #L4a1ae0.  if v3 != 0 then goto L4a1afe;
  #L4a1ae4.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a1ae8.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a1aee.  v3:= temp @kind object;
  #L4a1af0.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L4a1af4.  v0:= 1L;
  #L4a1af8.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a1afe.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipUntil$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a1b10.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a1b14.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a1b18.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4a1b1e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipUntil$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a1b30.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a1b34.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a1b38.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L4a1b3e.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipUntil$a;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a19d4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.f` @type ^`boolean` @kind boolean;
  #L4a19d8.  if v0 == 0 then goto L4a19ee;
  #L4a19dc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a19e0.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a19e4.  call temp:= `onNext`(v0, v3, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onNext:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)Z` @kind static;
  #L4a19ea.  v3:= 1I;
  #L4a19ec.  return v3;
  #L4a19ee.  v3:= 0I;
  #L4a19f0.  return v3;
}
