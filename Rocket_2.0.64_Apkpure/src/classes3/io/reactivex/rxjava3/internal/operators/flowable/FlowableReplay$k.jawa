record `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` @kind class {
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.e` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.f` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.g` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.h` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k` v0 @kind this, `int` v1 , `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.rxjava3.core.Scheduler` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$k;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49e960.  call `<init>`(v0, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.<init>:(Z)V` @kind direct;
  #L49e966.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.e` @type ^`io.reactivex.rxjava3.core.Scheduler` := v5 @kind object;
  #L49e96a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.h` @type ^`int` := v1;
  #L49e96e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.f` @type ^`long` := v2 @kind wide;
  #L49e972.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.g` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L49e976.  return @kind void;
}
procedure `java.lang.Object` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k` v3 @kind this, `java.lang.Object` v4 @kind object, `boolean` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$k;.e:(Ljava/lang/Object;Z)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L49e900.  v0:= new `io.reactivex.rxjava3.schedulers.Timed`;
  #L49e904.  if v5 == 0 then goto L49e914;
  #L49e908.  v1:= 9223372036854775807L;
  #L49e912.  goto L49e924;
  #L49e914.  v5:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.e` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L49e918.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.g` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L49e91c.  call temp:= `now`(v5, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L49e922.  v1:= temp @kind wide;
  #L49e924.  v5:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.g` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L49e928.  call `<init>`(v0, v4, v1, v5) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.<init>:(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L49e92e.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k` v8 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$k;.f:()Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L49e864.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.e` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L49e868.  v1:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.g` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L49e86c.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L49e872.  v0:= temp @kind wide;
  #L49e874.  v2:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.f` @type ^`long` @kind wide;
  #L49e878.  v0:= v0 - v2 @kind long;
  #L49e87a.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49e880.  v2:= temp @kind object;
  #L49e882.  v2:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v2 @kind object;
  #L49e886.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49e88c.  v3:= temp @kind object;
  #L49e88e.  v3:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v3 @kind object;
  #L49e892.  v7:= v3 @kind object;
  #L49e894.  v3:= v2 @kind object;
  #L49e896.  v2:= v7 @kind object;
  #L49e898.  if v2 != 0 then goto L49e89e;
  #L49e89c.  goto L49e8ee;
  #L49e89e.  v4:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e.a` @type ^`java.lang.Object` @kind object;
  #L49e8a2.  v4:= (`io.reactivex.rxjava3.schedulers.Timed`) v4 @kind object;
  #L49e8a6.  call temp:= `value`(v4) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L49e8ac.  v5:= temp @kind object;
  #L49e8ae.  call temp:= `isComplete`(v5) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L49e8b4.  v5:= temp;
  #L49e8b6.  if v5 != 0 then goto L49e8ee;
  #L49e8ba.  call temp:= `value`(v4) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L49e8c0.  v5:= temp @kind object;
  #L49e8c2.  call temp:= `isError`(v5) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L49e8c8.  v5:= temp;
  #L49e8ca.  if v5 == 0 then goto L49e8d0;
  #L49e8ce.  goto L49e8ee;
  #L49e8d0.  call temp:= `time`(v4) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.time:()J` @kind virtual;
  #L49e8d6.  v4:= temp @kind wide;
  #L49e8d8.  v6:= lcmp(v4, v0);
  #L49e8dc.  if v6 > 0 then goto L49e8ee;
  #L49e8e0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49e8e6.  v3:= temp @kind object;
  #L49e8e8.  v3:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v3 @kind object;
  #L49e8ec.  goto L49e892;
  #L49e8ee.  return v3 @kind object;
}
procedure `java.lang.Object` `g`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$k;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L49e940.  v1:= (`io.reactivex.rxjava3.schedulers.Timed`) v1 @kind object;
  #L49e944.  call temp:= `value`(v1) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L49e94a.  v1:= temp @kind object;
  #L49e94c.  return v1 @kind object;
}
procedure `void` `k`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k` v10 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$k;.k:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L49e988.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.e` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L49e98c.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.g` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L49e990.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L49e996.  v0:= temp @kind wide;
  #L49e998.  v2:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.f` @type ^`long` @kind wide;
  #L49e99c.  v0:= v0 - v2 @kind long;
  #L49e99e.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49e9a4.  v2:= temp @kind object;
  #L49e9a6.  v2:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v2 @kind object;
  #L49e9aa.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49e9b0.  v3:= temp @kind object;
  #L49e9b2.  v3:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v3 @kind object;
  #L49e9b6.  v4:= 0I;
  #L49e9b8.  v9:= v3 @kind object;
  #L49e9ba.  v3:= v2 @kind object;
  #L49e9bc.  v2:= v9 @kind object;
  #L49e9be.  v5:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.c` @type ^`int`;
  #L49e9c2.  v6:= 1I;
  #L49e9c4.  if v5 <= v6 then goto L49ea1e;
  #L49e9c8.  v7:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.h` @type ^`int`;
  #L49e9cc.  if v5 <= v7 then goto L49e9ea;
  #L49e9d0.  v4:= v4 + 1;
  #L49e9d4.  v5:= v5 + -1;
  #L49e9d8.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.c` @type ^`int` := v5;
  #L49e9dc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49e9e2.  v3:= temp @kind object;
  #L49e9e4.  v3:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v3 @kind object;
  #L49e9e8.  goto L49e9b8;
  #L49e9ea.  v5:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e.a` @type ^`java.lang.Object` @kind object;
  #L49e9ee.  v5:= (`io.reactivex.rxjava3.schedulers.Timed`) v5 @kind object;
  #L49e9f2.  call temp:= `time`(v5) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.time:()J` @kind virtual;
  #L49e9f8.  v7:= temp @kind wide;
  #L49e9fa.  v5:= lcmp(v7, v0);
  #L49e9fe.  if v5 > 0 then goto L49ea1e;
  #L49ea02.  v4:= v4 + 1;
  #L49ea06.  v3:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.c` @type ^`int`;
  #L49ea0a.  v3:= v3 - v6 @kind int;
  #L49ea0c.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.c` @type ^`int` := v3;
  #L49ea10.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49ea16.  v3:= temp @kind object;
  #L49ea18.  v3:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v3 @kind object;
  #L49ea1c.  goto L49e9b8;
  #L49ea1e.  if v4 == 0 then goto L49ea28;
  #L49ea22.  call `i`(v10, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.i:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;)V` @kind virtual;
  #L49ea28.  return @kind void;
}
procedure `void` `l`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k` v10 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$k;.l:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L49ea3c.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.e` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L49ea40.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.g` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L49ea44.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L49ea4a.  v0:= temp @kind wide;
  #L49ea4c.  v2:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.f` @type ^`long` @kind wide;
  #L49ea50.  v0:= v0 - v2 @kind long;
  #L49ea52.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49ea58.  v2:= temp @kind object;
  #L49ea5a.  v2:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v2 @kind object;
  #L49ea5e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49ea64.  v3:= temp @kind object;
  #L49ea66.  v3:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v3 @kind object;
  #L49ea6a.  v4:= 0I;
  #L49ea6c.  v9:= v3 @kind object;
  #L49ea6e.  v3:= v2 @kind object;
  #L49ea70.  v2:= v9 @kind object;
  #L49ea72.  v5:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.c` @type ^`int`;
  #L49ea76.  v6:= 1I;
  #L49ea78.  if v5 <= v6 then goto L49eab0;
  #L49ea7c.  v5:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e.a` @type ^`java.lang.Object` @kind object;
  #L49ea80.  v5:= (`io.reactivex.rxjava3.schedulers.Timed`) v5 @kind object;
  #L49ea84.  call temp:= `time`(v5) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.time:()J` @kind virtual;
  #L49ea8a.  v7:= temp @kind wide;
  #L49ea8c.  v5:= lcmp(v7, v0);
  #L49ea90.  if v5 > 0 then goto L49eab0;
  #L49ea94.  v4:= v4 + 1;
  #L49ea98.  v3:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.c` @type ^`int`;
  #L49ea9c.  v3:= v3 - v6 @kind int;
  #L49ea9e.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.c` @type ^`int` := v3;
  #L49eaa2.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49eaa8.  v3:= temp @kind object;
  #L49eaaa.  v3:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v3 @kind object;
  #L49eaae.  goto L49ea6c;
  #L49eab0.  if v4 == 0 then goto L49eaba;
  #L49eab4.  call `i`(v10, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.i:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;)V` @kind virtual;
  #L49eaba.  return @kind void;
}
