record `io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.d` @AccessFlag FINAL;
  `java.util.ArrayDeque` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.f` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.g` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.h` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.i` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `long` v2 , `long` v4 , `int` v6 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindow$b;.<init>:(Lio/reactivex/rxjava3/core/Observer;JJI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cc914.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4cc91a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4cc91e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.b` @type ^`long` := v2 @kind wide;
  #L4cc922.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.c` @type ^`long` := v4 @kind wide;
  #L4cc926.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.d` @type ^`int` := v6;
  #L4cc92a.  v1:= new `java.util.ArrayDeque`;
  #L4cc92e.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L4cc934.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.e` @type ^`java.util.ArrayDeque` := v1 @kind object;
  #L4cc938.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4cc93c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4cc942.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4cc946.  v1:= 1I;
  #L4cc948.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4cc94e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindow$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4cc960.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4cc964.  v1:= 0I;
  #L4cc966.  v2:= 1I;
  #L4cc968.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4cc96e.  v0:= temp;
  #L4cc970.  if v0 == 0 then goto L4cc97a;
  #L4cc974.  call `run`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindow$b;.run:()V` @kind virtual;
  #L4cc97a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindow$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cc8f4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4cc8f8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4cc8fe.  v0:= temp;
  #L4cc900.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindow$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4cc98c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L4cc990.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L4cc996.  v1:= temp;
  #L4cc998.  if v1 != 0 then goto L4cc9b0;
  #L4cc99c.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4cc9a2.  v1:= temp @kind object;
  #L4cc9a4.  v1:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v1 @kind object;
  #L4cc9a8.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4cc9ae.  goto L4cc990;
  #L4cc9b0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4cc9b4.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4cc9ba.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindow$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4cc9cc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L4cc9d0.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L4cc9d6.  v1:= temp;
  #L4cc9d8.  if v1 != 0 then goto L4cc9f0;
  #L4cc9dc.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4cc9e2.  v1:= temp @kind object;
  #L4cc9e4.  v1:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v1 @kind object;
  #L4cc9e8.  call `onError`(v1, v3) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4cc9ee.  goto L4cc9d0;
  #L4cc9f0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4cc9f4.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cc9fa.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b` v13 @kind this, `java.lang.Object` v14 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindow$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L4cca0c.  v0:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L4cca10.  v1:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.g` @type ^`long` @kind wide;
  #L4cca14.  v3:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.c` @type ^`long` @kind wide;
  #L4cca18.  v5:= v1 %% v3 @kind long;
  #L4cca1c.  v7:= 0L;
  #L4cca20.  v9:= lcmp(v5, v7);
  #L4cca24.  if v9 != 0 then goto L4cca66;
  #L4cca28.  v5:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4cca2c.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4cca32.  v5:= temp;
  #L4cca34.  if v5 != 0 then goto L4cca66;
  #L4cca38.  call temp:= `getAndIncrement`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4cca3e.  v5:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.d` @type ^`int`;
  #L4cca42.  call temp:= `create`(v5, v13) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @kind static;
  #L4cca48.  v5:= temp @kind object;
  #L4cca4a.  v6:= new `io.reactivex.rxjava3.internal.operators.observable.b`;
  #L4cca4e.  call `<init>`(v6, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.<init>:(Lio/reactivex/rxjava3/subjects/Subject;)V` @kind direct;
  #L4cca54.  call temp:= `offer`(v0, v5) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4cca5a.  v5:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4cca5e.  call `onNext`(v5, v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cca64.  goto L4cca68;
  #L4cca66.  v6:= 0I;
  #L4cca68.  v7:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.h` @type ^`long` @kind wide;
  #L4cca6c.  v9:= 1L;
  #L4cca70.  v7:= v7 + v9 @kind long;
  #L4cca72.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L4cca78.  v5:= temp @kind object;
  #L4cca7a.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4cca80.  v11:= temp;
  #L4cca82.  if v11 == 0 then goto L4cca9a;
  #L4cca86.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4cca8c.  v11:= temp @kind object;
  #L4cca8e.  v11:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v11 @kind object;
  #L4cca92.  call `onNext`(v11, v14) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4cca98.  goto L4cca7a;
  #L4cca9a.  v11:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.b` @type ^`long` @kind wide;
  #L4cca9e.  v14:= lcmp(v7, v11);
  #L4ccaa2.  if v14 < 0 then goto L4ccade;
  #L4ccaa6.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4ccaac.  v14:= temp @kind object;
  #L4ccaae.  v14:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v14 @kind object;
  #L4ccab2.  call `onComplete`(v14) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4ccab8.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L4ccabe.  v14:= temp;
  #L4ccac0.  if v14 == 0 then goto L4ccad6;
  #L4ccac4.  v14:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4ccac8.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4ccace.  v14:= temp;
  #L4ccad0.  if v14 == 0 then goto L4ccad6;
  #L4ccad4.  return @kind void;
  #L4ccad6.  v7:= v7 - v3 @kind long;
  #L4ccad8.  v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.h` @type ^`long` := v7 @kind wide;
  #L4ccadc.  goto L4ccae2;
  #L4ccade.  v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.h` @type ^`long` := v7 @kind wide;
  #L4ccae2.  v1:= v1 + v9 @kind long;
  #L4ccae4.  v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.g` @type ^`long` := v1 @kind wide;
  #L4ccae8.  if v6 == 0 then goto L4ccb02;
  #L4ccaec.  call temp:= `d`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.d:()Z` @kind virtual;
  #L4ccaf2.  v14:= temp;
  #L4ccaf4.  if v14 == 0 then goto L4ccb02;
  #L4ccaf8.  v14:= v6.`io.reactivex.rxjava3.internal.operators.observable.b.a` @type ^`io.reactivex.rxjava3.subjects.Subject` @kind object;
  #L4ccafc.  call `onComplete`(v14) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4ccb02.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindow$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ccb14.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.i` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ccb18.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ccb1e.  v0:= temp;
  #L4ccb20.  if v0 == 0 then goto L4ccb32;
  #L4ccb24.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.i` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4ccb28.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ccb2c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4ccb32.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindow$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ccb44.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4ccb4a.  v0:= temp;
  #L4ccb4c.  if v0 != 0 then goto L4ccb5a;
  #L4ccb50.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.i` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ccb54.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ccb5a.  return @kind void;
}
