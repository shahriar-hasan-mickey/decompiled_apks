record `io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Maybe` @kind class, `io.reactivex.rxjava3.functions.Supplier` @kind interface {
  `java.lang.Runnable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnable.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnable` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFromRunnable;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4ad428.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.<init>:()V` @kind direct;
  #L4ad42e.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnable.a` @type ^`java.lang.Runnable` := v1 @kind object;
  #L4ad432.  return @kind void;
}
procedure `java.lang.Object` `get`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnable` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFromRunnable;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ad408.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnable.a` @type ^`java.lang.Runnable` @kind object;
  #L4ad40c.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L4ad412.  v0:= 0I;
  #L4ad414.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnable` v2 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFromRunnable;.subscribeActual:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4ad444.  call temp:= `b`() @signature `Ls0/d;.b:()Lio/reactivex/rxjava3/disposables/Disposable;` @kind static;
  #L4ad44a.  v0:= temp @kind object;
  #L4ad44c.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4ad452.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4ad458.  v1:= temp;
  #L4ad45a.  if v1 != 0 then goto L4ad49e;
  #L4ad45e.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnable.a` @type ^`java.lang.Runnable` @kind object;
  #L4ad462.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L4ad468.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4ad46e.  v0:= temp;
  #L4ad470.  if v0 != 0 then goto L4ad49e;
  #L4ad474.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4ad47a.  goto L4ad49e;
  #L4ad47c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ad47e.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ad484.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4ad48a.  v0:= temp;
  #L4ad48c.  if v0 != 0 then goto L4ad498;
  #L4ad490.  call `onError`(v3, v1) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ad496.  goto L4ad49e;
  #L4ad498.  call `onError`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4ad49e.  return @kind void;
  catch `java.lang.Throwable` @[L4ad45e..L4ad468] goto L4ad47c;
}
