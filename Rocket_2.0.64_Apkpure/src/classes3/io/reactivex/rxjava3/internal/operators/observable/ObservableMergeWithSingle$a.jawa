record `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a$a` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.e` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.f` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.h` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.i` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c34ac.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4c34b2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4c34b6.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c34ba.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c34c0.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4c34c4.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a$a`;
  #L4c34c8.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;)V` @kind direct;
  #L4c34ce.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a$a` := v1 @kind object;
  #L4c34d2.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4c34d6.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4c34dc.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4c34e0.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4c3540.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c3546.  v0:= temp;
  #L4c3548.  if v0 != 0 then goto L4c3552;
  #L4c354c.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.b:()V` @kind virtual;
  #L4c3552.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a` v9 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4c3564.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c3568.  v1:= 1I;
  #L4c356a.  v2:= 1I;
  #L4c356c.  v3:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.g` @type ^`boolean` @kind boolean;
  #L4c3570.  v4:= 0I;
  #L4c3572.  if v3 == 0 then goto L4c3580;
  #L4c3576.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.f` @type ^`java.lang.Object` := v4 @kind object;
  #L4c357a.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v4 @kind object;
  #L4c357e.  return @kind void;
  #L4c3580.  v3:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c3584.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c358a.  v3:= temp @kind object;
  #L4c358c.  if v3 == 0 then goto L4c35a4;
  #L4c3590.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.f` @type ^`java.lang.Object` := v4 @kind object;
  #L4c3594.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v4 @kind object;
  #L4c3598.  v1:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c359c.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4c35a2.  return @kind void;
  #L4c35a4.  v3:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.i` @type ^`int`;
  #L4c35a8.  v5:= 2I;
  #L4c35aa.  if v3 != v1 then goto L4c35c2;
  #L4c35ae.  v3:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.f` @type ^`java.lang.Object` @kind object;
  #L4c35b2.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.f` @type ^`java.lang.Object` := v4 @kind object;
  #L4c35b6.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.i` @type ^`int` := v5;
  #L4c35ba.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c35c0.  v3:= 2I;
  #L4c35c2.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.h` @type ^`boolean` @kind boolean;
  #L4c35c6.  v7:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4c35ca.  if v7 == 0 then goto L4c35d8;
  #L4c35ce.  call temp:= `poll`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4c35d4.  v7:= temp @kind object;
  #L4c35d6.  goto L4c35da;
  #L4c35d8.  v7:= v4 @kind object;
  #L4c35da.  if v7 != 0 then goto L4c35e2;
  #L4c35de.  v8:= 1I;
  #L4c35e0.  goto L4c35e4;
  #L4c35e2.  v8:= 0I;
  #L4c35e4.  if v6 == 0 then goto L4c35fc;
  #L4c35e8.  if v8 == 0 then goto L4c35fc;
  #L4c35ec.  if v3 != v5 then goto L4c35fc;
  #L4c35f0.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v4 @kind object;
  #L4c35f4.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4c35fa.  return @kind void;
  #L4c35fc.  if v8 == 0 then goto L4c3610;
  #L4c3600.  v2:= -v2 @kind int;
  #L4c3602.  call temp:= `addAndGet`(v9, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4c3608.  v2:= temp;
  #L4c360a.  if v2 != 0 then goto L4c356c;
  #L4c360e.  return @kind void;
  #L4c3610.  call `onNext`(v0, v7) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c3616.  goto L4c356c;
}
procedure `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.c:()Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4c347c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4c3480.  if v0 != 0 then goto L4c349a;
  #L4c3484.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4c3488.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Observable;.bufferSize:()I` @kind static;
  #L4c348e.  v1:= temp;
  #L4c3490.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4c3496.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L4c349a.  return v0 @kind object;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.d:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4c36f4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c36f8.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4c36fe.  v2:= temp;
  #L4c3700.  if v2 == 0 then goto L4c3714;
  #L4c3704.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c3708.  call temp:= `dispose`(v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c370e.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.a:()V` @kind virtual;
  #L4c3714.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c34f4.  v0:= 1I;
  #L4c34f6.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4c34fa.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c34fe.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c3504.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a$a` @kind object;
  #L4c3508.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c350e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c3512.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4c3518.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c351e.  v0:= temp;
  #L4c3520.  if v0 != 0 then goto L4c352e;
  #L4c3524.  v0:= 0I;
  #L4c3526.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L4c352a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.f` @type ^`java.lang.Object` := v0 @kind object;
  #L4c352e.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.e:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4c3728.  v0:= 0I;
  #L4c372a.  v1:= 1I;
  #L4c372c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4c3732.  v0:= temp;
  #L4c3734.  if v0 == 0 then goto L4c374a;
  #L4c3738.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c373c.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c3742.  v3:= 2I;
  #L4c3744.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.i` @type ^`int` := v3;
  #L4c3748.  goto L4c3760;
  #L4c374a.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.f` @type ^`java.lang.Object` := v3 @kind object;
  #L4c374e.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.i` @type ^`int` := v1;
  #L4c3752.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c3758.  v3:= temp;
  #L4c375a.  if v3 == 0 then goto L4c3760;
  #L4c375e.  return @kind void;
  #L4c3760.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.b:()V` @kind virtual;
  #L4c3766.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c3450.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c3454.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c345a.  v0:= temp @kind object;
  #L4c345c.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4c3460.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4c3466.  v0:= temp;
  #L4c3468.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c3628.  v0:= 1I;
  #L4c362a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4c362e.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.a:()V` @kind virtual;
  #L4c3634.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c3648.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c364c.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4c3652.  v2:= temp;
  #L4c3654.  if v2 == 0 then goto L4c3668;
  #L4c3658.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a$a` @kind object;
  #L4c365c.  call temp:= `dispose`(v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c3662.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.a:()V` @kind virtual;
  #L4c3668.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c367c.  v0:= 0I;
  #L4c367e.  v1:= 1I;
  #L4c3680.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4c3686.  v0:= temp;
  #L4c3688.  if v0 == 0 then goto L4c36a4;
  #L4c368c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c3690.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c3696.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c369c.  v3:= temp;
  #L4c369e.  if v3 != 0 then goto L4c36c0;
  #L4c36a2.  return @kind void;
  #L4c36a4.  call temp:= `c`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.c:()Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L4c36aa.  v0:= temp @kind object;
  #L4c36ac.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4c36b2.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c36b8.  v3:= temp;
  #L4c36ba.  if v3 == 0 then goto L4c36c0;
  #L4c36be.  return @kind void;
  #L4c36c0.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.b:()V` @kind virtual;
  #L4c36c6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c36d8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c36dc.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4c36e2.  return @kind void;
}
