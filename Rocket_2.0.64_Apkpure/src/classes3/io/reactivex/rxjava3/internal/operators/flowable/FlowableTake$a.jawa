record `io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.b` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTake$a;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a28b8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a28be.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4a28c2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.b` @type ^`long` := v2 @kind wide;
  #L4a28c6.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L4a28cc.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTake$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a28e0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a28e4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a28ea.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTake$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a28fc.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.b` @type ^`long` @kind wide;
  #L4a2900.  v2:= 0L;
  #L4a2904.  v4:= lcmp(v0, v2);
  #L4a2908.  if v4 <= 0 then goto L4a291a;
  #L4a290c.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.b` @type ^`long` := v2 @kind wide;
  #L4a2910.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a2914.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a291a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTake$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a292c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.b` @type ^`long` @kind wide;
  #L4a2930.  v2:= 0L;
  #L4a2934.  v4:= lcmp(v0, v2);
  #L4a2938.  if v4 <= 0 then goto L4a294c;
  #L4a293c.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.b` @type ^`long` := v2 @kind wide;
  #L4a2940.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a2944.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a294a.  goto L4a2952;
  #L4a294c.  call `onError`(v6) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4a2952.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTake$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4a2964.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.b` @type ^`long` @kind wide;
  #L4a2968.  v2:= 0L;
  #L4a296c.  v4:= lcmp(v0, v2);
  #L4a2970.  if v4 <= 0 then goto L4a29a4;
  #L4a2974.  v4:= 1L;
  #L4a2978.  v0:= v0 - v4 @kind long;
  #L4a297a.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.b` @type ^`long` := v0 @kind wide;
  #L4a297e.  v4:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a2982.  call `onNext`(v4, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a2988.  v7:= lcmp(v0, v2);
  #L4a298c.  if v7 != 0 then goto L4a29a4;
  #L4a2990.  v7:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a2994.  call `cancel`(v7) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a299a.  v7:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a299e.  call `onComplete`(v7) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a29a4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a` v5 @kind this, `org.reactivestreams.Subscription` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTake$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a29b8.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a29bc.  call temp:= `validate`(v0, v6) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4a29c2.  v0:= temp;
  #L4a29c4.  if v0 == 0 then goto L4a29f8;
  #L4a29c8.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.b` @type ^`long` @kind wide;
  #L4a29cc.  v2:= 0L;
  #L4a29d0.  v4:= lcmp(v0, v2);
  #L4a29d4.  if v4 != 0 then goto L4a29ea;
  #L4a29d8.  call `cancel`(v6) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a29de.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a29e2.  call `complete`(v6) @signature `Lio/reactivex/rxjava3/internal/subscriptions/EmptySubscription;.complete:(Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L4a29e8.  goto L4a29f8;
  #L4a29ea.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.c` @type ^`org.reactivestreams.Subscription` := v6 @kind object;
  #L4a29ee.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a29f2.  call `onSubscribe`(v6, v5) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4a29f8.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTake$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4a2a0c.  call temp:= `validate`(v7) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4a2a12.  v0:= temp;
  #L4a2a14.  if v0 == 0 then goto L4a2a50;
  #L4a2a18.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a2a1e.  v0:= temp @kind wide;
  #L4a2a20.  v2:= 0L;
  #L4a2a24.  v4:= lcmp(v0, v2);
  #L4a2a28.  if v4 != 0 then goto L4a2a2e;
  #L4a2a2c.  goto L4a2a50;
  #L4a2a2e.  call temp:= `min`(v0, v7) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L4a2a34.  v2:= temp @kind wide;
  #L4a2a36.  v4:= v0 - v2 @kind long;
  #L4a2a3a.  call temp:= `compareAndSet`(v6, v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4a2a40.  v0:= temp;
  #L4a2a42.  if v0 == 0 then goto L4a2a18;
  #L4a2a46.  v7:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a2a4a.  call `request`(v7, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a2a50.  return @kind void;
}
