record `io.reactivex.rxjava3.internal.operators.observable.ObservableZip` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Observable` @kind class {
  `io.reactivex.rxjava3.core.ObservableSource`[] `io.reactivex.rxjava3.internal.operators.observable.ObservableZip.a` @AccessFlag FINAL;
  `java.lang.Iterable` `io.reactivex.rxjava3.internal.operators.observable.ObservableZip.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableZip.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableZip.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableZip.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZip` v0 @kind this, `io.reactivex.rxjava3.core.ObservableSource`[] v1 @kind object, `java.lang.Iterable` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `int` v4 , `boolean` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip;.<init>:([Lio/reactivex/rxjava3/core/ObservableSource;Ljava/lang/Iterable;Lio/reactivex/rxjava3/functions/Function;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4cf4b4.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Observable;.<init>:()V` @kind direct;
  #L4cf4ba.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip.a` @type ^`io.reactivex.rxjava3.core.ObservableSource`[] := v1 @kind object;
  #L4cf4be.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip.b` @type ^`java.lang.Iterable` := v2 @kind object;
  #L4cf4c2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip.c` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4cf4c6.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip.d` @type ^`int` := v4;
  #L4cf4ca.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip.e` @type ^`boolean` := v5 @kind boolean;
  #L4cf4ce.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZip` v6 @kind this, `io.reactivex.rxjava3.core.Observer` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip;.subscribeActual:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4cf4e0.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip.a` @type ^`io.reactivex.rxjava3.core.ObservableSource`[] @kind object;
  #L4cf4e4.  if v0 != 0 then goto L4cf53c;
  #L4cf4e8.  v0:= 8I;
  #L4cf4ec.  v0:= new `io.reactivex.rxjava3.core.ObservableSource`[v0];
  #L4cf4f0.  v1:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip.b` @type ^`java.lang.Iterable` @kind object;
  #L4cf4f4.  call temp:= `iterator`(v1) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4cf4fa.  v1:= temp @kind object;
  #L4cf4fc.  v2:= 0I;
  #L4cf4fe.  v3:= 0I;
  #L4cf500.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4cf506.  v4:= temp;
  #L4cf508.  if v4 == 0 then goto L4cf53e;
  #L4cf50c.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4cf512.  v4:= temp @kind object;
  #L4cf514.  v4:= (`io.reactivex.rxjava3.core.ObservableSource`) v4 @kind object;
  #L4cf518.  v5:= length @variable v0;
  #L4cf51a.  if v3 != v5 then goto L4cf530;
  #L4cf51e.  v5:= v3 ^> 2;
  #L4cf522.  v5:= v5 + v3 @kind int;
  #L4cf524.  v5:= new `io.reactivex.rxjava3.core.ObservableSource`[v5];
  #L4cf528.  call `arraycopy`(v0, v2, v5, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4cf52e.  v0:= v5 @kind object;
  #L4cf530.  v5:= v3 + 1;
  #L4cf534.  v0[v3]:= v4 @kind object;
  #L4cf538.  v3:= v5;
  #L4cf53a.  goto L4cf500;
  #L4cf53c.  v3:= length @variable v0;
  #L4cf53e.  if v3 != 0 then goto L4cf54a;
  #L4cf542.  call `complete`(v7) @signature `Lio/reactivex/rxjava3/internal/disposables/EmptyDisposable;.complete:(Lio/reactivex/rxjava3/core/Observer;)V` @kind static;
  #L4cf548.  return @kind void;
  #L4cf54a.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a`;
  #L4cf54e.  v2:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip.c` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4cf552.  v4:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip.e` @type ^`boolean` @kind boolean;
  #L4cf556.  call `<init>`(v1, v7, v2, v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;IZ)V` @kind direct;
  #L4cf55c.  v7:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip.d` @type ^`int`;
  #L4cf560.  call `f`(v1, v0, v7) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.f:([Lio/reactivex/rxjava3/core/ObservableSource;I)V` @kind virtual;
  #L4cf566.  return @kind void;
}
