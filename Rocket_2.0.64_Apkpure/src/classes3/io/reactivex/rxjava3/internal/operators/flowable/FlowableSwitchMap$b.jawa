record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.e` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.g` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.h` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.i` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.j` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.k` @AccessFlag VOLATILE;
}
global `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.l` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a2334.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a`;
  #L4a2338.  v1:= 0I;
  #L4a233a.  v2:= -1L;
  #L4a233e.  v4:= 1I;
  #L4a2340.  call `<init>`(v0, v1, v2, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;JI)V` @kind direct;
  #L4a2346.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.l` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a` := v0 @kind object;
  #L4a234a.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.a:()V` @kind virtual;
  #L4a2350.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `int` v4 , `boolean` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4a2364.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4a236a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4a236e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4a2374.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4a2378.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4a237c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a2382.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.j` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L4a2386.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4a238a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.b` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4a238e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.c` @type ^`int` := v4;
  #L4a2392.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.d` @type ^`boolean` := v5 @kind boolean;
  #L4a2396.  v2:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4a239a.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4a23a0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v2 @kind object;
  #L4a23a4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4a23f4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a23f8.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.l` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a` @kind object;
  #L4a23fc.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4a2402.  v0:= temp @kind object;
  #L4a2404.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a`) v0 @kind object;
  #L4a2408.  if v0 == v1 then goto L4a2416;
  #L4a240c.  if v0 == 0 then goto L4a2416;
  #L4a2410.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.a:()V` @kind virtual;
  #L4a2416.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` v17 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L4a2428.  v1:= v17 @kind object;
  #L4a242c.  call temp:= `getAndIncrement`(v17) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a2432.  v0:= temp;
  #L4a2434.  if v0 == 0 then goto L4a243a;
  #L4a2438.  return @kind void;
  #L4a243a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a243e.  v4:= 1I;
  #L4a2440.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L4a2444.  if v0 == 0 then goto L4a244a;
  #L4a2448.  return @kind void;
  #L4a244a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.e` @type ^`boolean` @kind boolean;
  #L4a244e.  if v0 == 0 then goto L4a24b4;
  #L4a2452.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L4a2456.  if v0 == 0 then goto L4a2476;
  #L4a245a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a245e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a2464.  v0:= temp @kind object;
  #L4a2466.  if v0 != 0 then goto L4a24b4;
  #L4a246a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a246e.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4a2474.  return @kind void;
  #L4a2476.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a247a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a2480.  v0:= temp @kind object;
  #L4a2482.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L4a2486.  if v0 == 0 then goto L4a249c;
  #L4a248a.  call `a`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.a:()V` @kind virtual;
  #L4a2490.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a2494.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4a249a.  return @kind void;
  #L4a249c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a24a0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a24a6.  v0:= temp @kind object;
  #L4a24a8.  if v0 != 0 then goto L4a24b4;
  #L4a24ac.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a24b2.  return @kind void;
  #L4a24b4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a24b8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a24be.  v0:= temp @kind object;
  #L4a24c0.  v5:= v0 @kind object;
  #L4a24c2.  v5:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a`) v5 @kind object;
  #L4a24c6.  v6:= 0I;
  #L4a24c8.  if v5 == 0 then goto L4a24d4;
  #L4a24cc.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4a24d0.  v7:= v0 @kind object;
  #L4a24d2.  goto L4a24d6;
  #L4a24d4.  v7:= v6 @kind object;
  #L4a24d6.  if v7 == 0 then goto L4a2662;
  #L4a24da.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.j` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a24de.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a24e4.  v8:= temp @kind wide;
  #L4a24e6.  v10:= 0L;
  #L4a24ea.  v12:= v10 @kind wide;
  #L4a24ec.  v15:= lcmp(v12, v8);
  #L4a24f0.  if v15 == 0 then goto L4a25b6;
  #L4a24f4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L4a24f8.  if v0 == 0 then goto L4a24fe;
  #L4a24fc.  return @kind void;
  #L4a24fe.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.e` @type ^`boolean` @kind boolean;
  #L4a2502.  call temp:= `poll`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4a2508.  v16:= temp @kind object;
  #L4a250a.  v3:= v16 @kind object;
  #L4a250e.  goto L4a2534;
  #L4a2510.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a2512.  v16:= v0 @kind object;
  #L4a2516.  call `throwIfFatal`(v16) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4a251c.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.a:()V` @kind virtual;
  #L4a2522.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a2526.  v3:= v16 @kind object;
  #L4a252a.  call temp:= `tryAddThrowableOrReport`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4a2530.  v3:= v6 @kind object;
  #L4a2532.  v0:= 1I;
  #L4a2534.  if v3 != 0 then goto L4a253e;
  #L4a2538.  v16:= 1I;
  #L4a253c.  goto L4a2542;
  #L4a253e.  v16:= 0I;
  #L4a2542.  v14:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a2546.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a254c.  v14:= temp @kind object;
  #L4a254e.  if v5 == v14 then goto L4a2556;
  #L4a2552.  v14:= 1I;
  #L4a2554.  goto L4a25b8;
  #L4a2556.  if v0 == 0 then goto L4a25a2;
  #L4a255a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L4a255e.  if v0 != 0 then goto L4a2592;
  #L4a2562.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a2566.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a256c.  v0:= temp @kind object;
  #L4a256e.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L4a2572.  if v0 == 0 then goto L4a2582;
  #L4a2576.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a257a.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4a2580.  return @kind void;
  #L4a2582.  if v16 == 0 then goto L4a25a2;
  #L4a2586.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a258a.  call temp:= `compareAndSet`(v0, v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4a2590.  goto L4a2552;
  #L4a2592.  if v16 == 0 then goto L4a25a2;
  #L4a2596.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a259a.  call temp:= `compareAndSet`(v0, v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4a25a0.  goto L4a2552;
  #L4a25a2.  if v16 == 0 then goto L4a25a8;
  #L4a25a6.  goto L4a25b6;
  #L4a25a8.  call `onNext`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a25ae.  v14:= 1L;
  #L4a25b2.  v12:= v12 + v14 @kind long;
  #L4a25b4.  goto L4a24ec;
  #L4a25b6.  v14:= 0I;
  #L4a25b8.  if v15 != 0 then goto L4a2626;
  #L4a25bc.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.e` @type ^`boolean` @kind boolean;
  #L4a25c0.  if v0 == 0 then goto L4a2626;
  #L4a25c4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L4a25c8.  if v0 != 0 then goto L4a260c;
  #L4a25cc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a25d0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a25d6.  v0:= temp @kind object;
  #L4a25d8.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L4a25dc.  if v0 == 0 then goto L4a25f2;
  #L4a25e0.  call `a`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.a:()V` @kind virtual;
  #L4a25e6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a25ea.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4a25f0.  return @kind void;
  #L4a25f2.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4a25f8.  v0:= temp;
  #L4a25fa.  if v0 == 0 then goto L4a2626;
  #L4a25fe.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a2602.  call temp:= `compareAndSet`(v0, v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4a2608.  goto L4a2440;
  #L4a260c.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4a2612.  v0:= temp;
  #L4a2614.  if v0 == 0 then goto L4a2626;
  #L4a2618.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a261c.  call temp:= `compareAndSet`(v0, v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4a2622.  goto L4a2440;
  #L4a2626.  v0:= lcmp(v12, v10);
  #L4a262a.  if v0 == 0 then goto L4a265a;
  #L4a262e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L4a2632.  if v0 != 0 then goto L4a265a;
  #L4a2636.  v6:= 9223372036854775807L;
  #L4a2640.  v0:= lcmp(v8, v6);
  #L4a2644.  if v0 == 0 then goto L4a2654;
  #L4a2648.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.j` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a264c.  v6:= -v12 @kind long;
  #L4a264e.  call temp:= `addAndGet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4a2654.  call `b`(v5, v12) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.b:(J)V` @kind virtual;
  #L4a265a.  if v14 == 0 then goto L4a2662;
  #L4a265e.  goto L4a2440;
  #L4a2662.  v0:= -v4 @kind int;
  #L4a2664.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4a266a.  v4:= temp;
  #L4a266c.  if v4 != 0 then goto L4a2440;
  #L4a2670.  return @kind void;
  catch `java.lang.Throwable` @[L4a2502..L4a250a] goto L4a2510;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a23b8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L4a23bc.  if v0 != 0 then goto L4a23e0;
  #L4a23c0.  v0:= 1I;
  #L4a23c2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.g` @type ^`boolean` := v0 @kind boolean;
  #L4a23c6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a23ca.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a23d0.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.a:()V` @kind virtual;
  #L4a23d6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a23da.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4a23e0.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a2690.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.e` @type ^`boolean` @kind boolean;
  #L4a2694.  if v0 == 0 then goto L4a269a;
  #L4a2698.  return @kind void;
  #L4a269a.  v0:= 1I;
  #L4a269c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.e` @type ^`boolean` := v0 @kind boolean;
  #L4a26a0.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @kind virtual;
  #L4a26a6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a26b8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.e` @type ^`boolean` @kind boolean;
  #L4a26bc.  if v0 != 0 then goto L4a26ec;
  #L4a26c0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a26c4.  call temp:= `tryAddThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4a26ca.  v0:= temp;
  #L4a26cc.  if v0 == 0 then goto L4a26ec;
  #L4a26d0.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L4a26d4.  if v2 != 0 then goto L4a26de;
  #L4a26d8.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.a:()V` @kind virtual;
  #L4a26de.  v2:= 1I;
  #L4a26e0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.e` @type ^`boolean` := v2 @kind boolean;
  #L4a26e4.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @kind virtual;
  #L4a26ea.  goto L4a26f2;
  #L4a26ec.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4a26f2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a2704.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.e` @type ^`boolean` @kind boolean;
  #L4a2708.  if v0 == 0 then goto L4a270e;
  #L4a270c.  return @kind void;
  #L4a270e.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.k` @type ^`long` @kind wide;
  #L4a2712.  v2:= 1L;
  #L4a2716.  v0:= v0 + v2 @kind long;
  #L4a2718.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.k` @type ^`long` := v0 @kind wide;
  #L4a271c.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a2720.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a2726.  v2:= temp @kind object;
  #L4a2728.  v2:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a`) v2 @kind object;
  #L4a272c.  if v2 == 0 then goto L4a2736;
  #L4a2730.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.a:()V` @kind virtual;
  #L4a2736.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4a273a.  call temp:= `apply`(v2, v5) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4a2740.  v5:= temp @kind object;
  #L4a2742.  v2:= "The publisher returned is null" @kind object;
  #L4a2746.  call temp:= `requireNonNull`(v5, v2) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4a274c.  v5:= (`org.reactivestreams.Publisher`) v5 @kind object;
  #L4a2750.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a`;
  #L4a2754.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.c` @type ^`int`;
  #L4a2758.  call `<init>`(v2, v4, v0, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;JI)V` @kind direct;
  #L4a275e.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a2762.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a2768.  v0:= temp @kind object;
  #L4a276a.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a`) v0 @kind object;
  #L4a276e.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.l` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a` @kind object;
  #L4a2772.  if v0 != v1 then goto L4a2778;
  #L4a2776.  goto L4a278e;
  #L4a2778.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a277c.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4a2782.  v0:= temp;
  #L4a2784.  if v0 == 0 then goto L4a275e;
  #L4a2788.  call `subscribe`(v5, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4a278e.  return @kind void;
  #L4a2790.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a2792.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4a2798.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a279c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a27a2.  call `onError`(v4, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a27a8.  return @kind void;
  catch `java.lang.Throwable` @[L4a2736..L4a2750] goto L4a2790;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a27c8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a27cc.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4a27d2.  v0:= temp;
  #L4a27d4.  if v0 == 0 then goto L4a27e6;
  #L4a27d8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.h` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4a27dc.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a27e0.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4a27e6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a27f8.  call temp:= `validate`(v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4a27fe.  v0:= temp;
  #L4a2800.  if v0 == 0 then goto L4a283a;
  #L4a2804.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.j` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a2808.  call temp:= `add`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4a280e.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.k` @type ^`long` @kind wide;
  #L4a2812.  v0:= 0L;
  #L4a2816.  v2:= lcmp(v4, v0);
  #L4a281a.  if v2 != 0 then goto L4a2834;
  #L4a281e.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a2822.  v0:= 9223372036854775807L;
  #L4a282c.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a2832.  goto L4a283a;
  #L4a2834.  call `b`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @kind virtual;
  #L4a283a.  return @kind void;
}
