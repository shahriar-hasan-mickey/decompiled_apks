record `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b` @kind class {
  `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$c.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$c` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$c;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Predicate;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d0380.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$b;.<init>:(Lio/reactivex/rxjava3/functions/Predicate;Lio/reactivex/rxjava3/functions/BiFunction;)V` @kind direct;
  #L4d0386.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$c.e` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L4d038a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d039c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b.d` @type ^`boolean` @kind boolean;
  #L4d03a0.  if v0 != 0 then goto L4d03b4;
  #L4d03a4.  v0:= 1I;
  #L4d03a6.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b.d` @type ^`boolean` := v0 @kind boolean;
  #L4d03aa.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$c.e` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4d03ae.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d03b4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d03c8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b.d` @type ^`boolean` @kind boolean;
  #L4d03cc.  if v0 == 0 then goto L4d03d8;
  #L4d03d0.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d03d6.  return @kind void;
  #L4d03d8.  v0:= 1I;
  #L4d03da.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b.d` @type ^`boolean` := v0 @kind boolean;
  #L4d03de.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$c.e` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4d03e2.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d03e8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$c` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d03fc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d0400.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d0406.  v0:= temp;
  #L4d0408.  if v0 == 0 then goto L4d041a;
  #L4d040c.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4d0410.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$c.e` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4d0414.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d041a.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$c` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$c;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4d028c.  v0:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b.d` @type ^`boolean` @kind boolean;
  #L4d0290.  v1:= 0I;
  #L4d0292.  if v0 != 0 then goto L4d0356;
  #L4d0296.  v2:= 0L;
  #L4d029a.  v0:= 1I;
  #L4d029c.  v4:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b.a` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L4d02a0.  call temp:= `test`(v4, v10) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4d02a6.  v2:= temp;
  #L4d02a8.  if v2 == 0 then goto L4d02be;
  #L4d02ac.  v2:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$c.e` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4d02b0.  call temp:= `tryOnNext`(v2, v10) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4d02b6.  v10:= temp;
  #L4d02b8.  if v10 == 0 then goto L4d02be;
  #L4d02bc.  v1:= 1I;
  #L4d02be.  return v1;
  #L4d02c0.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d02c2.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d02c8.  v5:= 2I;
  #L4d02ca.  v6:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4d02ce.  v7:= 1L;
  #L4d02d2.  v2:= v2 + v7 @kind long;
  #L4d02d4.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4d02da.  v7:= temp @kind object;
  #L4d02dc.  call temp:= `apply`(v6, v7, v4) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4d02e2.  v6:= temp @kind object;
  #L4d02e4.  v7:= "The errorHandler returned a null ParallelFailureHandling" @kind object;
  #L4d02e8.  call temp:= `requireNonNull`(v6, v7) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4d02ee.  v6:= (`io.reactivex.rxjava3.parallel.ParallelFailureHandling`) v6 @kind object;
  #L4d02f2.  v7:= `@@io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$a.a` @type ^`int`[] @kind object;
  #L4d02f6.  call temp:= `ordinal`(v6) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L4d02fc.  v6:= temp;
  #L4d02fe.  v6:= v7[v6];
  #L4d0302.  if v6 == v0 then goto L4d029a;
  #L4d0306.  if v6 == v5 then goto L4d032a;
  #L4d030a.  v10:= 3I;
  #L4d030c.  if v6 == v10 then goto L4d031e;
  #L4d0310.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$b;.cancel:()V` @kind virtual;
  #L4d0316.  call `onError`(v9, v4) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d031c.  return v1;
  #L4d031e.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$b;.cancel:()V` @kind virtual;
  #L4d0324.  call `onComplete`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$c;.onComplete:()V` @kind virtual;
  #L4d032a.  return v1;
  #L4d032c.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d032e.  call `throwIfFatal`(v10) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d0334.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$b;.cancel:()V` @kind virtual;
  #L4d033a.  v2:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L4d033e.  v3:= new `java.lang.Throwable`[v5];
  #L4d0342.  v3[v1]:= v4 @kind object;
  #L4d0346.  v3[v0]:= v10 @kind object;
  #L4d034a.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4d0350.  call `onError`(v9, v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d0356.  return v1;
  catch `java.lang.Throwable` @[L4d029c..L4d02a8] goto L4d02c0;
  catch `java.lang.Throwable` @[L4d02ca..L4d02f2] goto L4d032c;
}
