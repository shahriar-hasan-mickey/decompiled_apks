record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Flowable` @kind class, `io.reactivex.rxjava3.functions.Supplier` @kind interface {
  `java.lang.Runnable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnable.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnable` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromRunnable;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L494b00.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.<init>:()V` @kind direct;
  #L494b06.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnable.b` @type ^`java.lang.Runnable` := v1 @kind object;
  #L494b0a.  return @kind void;
}
procedure `java.lang.Object` `get`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnable` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromRunnable;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L494ae0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnable.b` @type ^`java.lang.Runnable` @kind object;
  #L494ae4.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L494aea.  v0:= 0I;
  #L494aec.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnable` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromRunnable;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L494b1c.  v0:= new `io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable`;
  #L494b20.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/CancellableQueueFuseable;.<init>:()V` @kind direct;
  #L494b26.  call `onSubscribe`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L494b2c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/CancellableQueueFuseable;.isDisposed:()Z` @kind virtual;
  #L494b32.  v1:= temp;
  #L494b34.  if v1 != 0 then goto L494b78;
  #L494b38.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnable.b` @type ^`java.lang.Runnable` @kind object;
  #L494b3c.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L494b42.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/CancellableQueueFuseable;.isDisposed:()Z` @kind virtual;
  #L494b48.  v0:= temp;
  #L494b4a.  if v0 != 0 then goto L494b78;
  #L494b4e.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L494b54.  goto L494b78;
  #L494b56.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L494b58.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L494b5e.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/CancellableQueueFuseable;.isDisposed:()Z` @kind virtual;
  #L494b64.  v0:= temp;
  #L494b66.  if v0 != 0 then goto L494b72;
  #L494b6a.  call `onError`(v3, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L494b70.  goto L494b78;
  #L494b72.  call `onError`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L494b78.  return @kind void;
  catch `java.lang.Throwable` @[L494b38..L494b42] goto L494b56;
}
