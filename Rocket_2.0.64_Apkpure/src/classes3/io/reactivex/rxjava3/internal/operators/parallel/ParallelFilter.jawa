record `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.parallel.ParallelFlowable` @kind class {
  `io.reactivex.rxjava3.parallel.ParallelFlowable` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Predicate` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter` v0 @kind this, `io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind object, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Predicate;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4d06a8.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L4d06ae.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` := v1 @kind object;
  #L4d06b2.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.b` @type ^`io.reactivex.rxjava3.functions.Predicate` := v2 @kind object;
  #L4d06b6.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d0688.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` @kind object;
  #L4d068c.  call temp:= `parallelism`(v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L4d0692.  v0:= temp;
  #L4d0694.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter` v6 @kind this, `org.reactivestreams.Subscriber`[] v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4d06c8.  call temp:= `validate`(v6, v7) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L4d06ce.  v0:= temp;
  #L4d06d0.  if v0 != 0 then goto L4d06d6;
  #L4d06d4.  return @kind void;
  #L4d06d6.  v0:= length @variable v7;
  #L4d06d8.  v1:= new `org.reactivestreams.Subscriber`[v0];
  #L4d06dc.  v2:= 0I;
  #L4d06de.  if v2 >= v0 then goto L4d071e;
  #L4d06e2.  v3:= v7[v2] @kind object;
  #L4d06e6.  v4:= instanceof @variable v3 @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L4d06ea.  if v4 == 0 then goto L4d0706;
  #L4d06ee.  v4:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$b`;
  #L4d06f2.  v3:= (`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber`) v3 @kind object;
  #L4d06f6.  v5:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.b` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L4d06fa.  call `<init>`(v4, v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$b;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Predicate;)V` @kind direct;
  #L4d0700.  v1[v2]:= v4 @kind object;
  #L4d0704.  goto L4d0718;
  #L4d0706.  v4:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$c`;
  #L4d070a.  v5:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.b` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L4d070e.  call `<init>`(v4, v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Predicate;)V` @kind direct;
  #L4d0714.  v1[v2]:= v4 @kind object;
  #L4d0718.  v2:= v2 + 1;
  #L4d071c.  goto L4d06de;
  #L4d071e.  v7:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` @kind object;
  #L4d0722.  call `subscribe`(v7, v1) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4d0728.  return @kind void;
}
