record `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Flowable` @kind class {
  `io.reactivex.rxjava3.core.MaybeSource`[] `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray` v0 @kind this, `io.reactivex.rxjava3.core.MaybeSource`[] v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray;.<init>:([Lio/reactivex/rxjava3/core/MaybeSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4ae634.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.<init>:()V` @kind direct;
  #L4ae63a.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray.b` @type ^`io.reactivex.rxjava3.core.MaybeSource`[] := v1 @kind object;
  #L4ae63e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray` v6 @kind this, `org.reactivestreams.Subscriber` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4ae650.  v0:= v6.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray.b` @type ^`io.reactivex.rxjava3.core.MaybeSource`[] @kind object;
  #L4ae654.  v1:= length @variable v0;
  #L4ae656.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L4ae65c.  v2:= temp;
  #L4ae65e.  if v1 > v2 then goto L4ae66e;
  #L4ae662.  v2:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c`;
  #L4ae666.  call `<init>`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$c;.<init>:(I)V` @kind direct;
  #L4ae66c.  goto L4ae678;
  #L4ae66e.  v2:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$a`;
  #L4ae672.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$a;.<init>:()V` @kind direct;
  #L4ae678.  v3:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b`;
  #L4ae67c.  call `<init>`(v3, v7, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.<init>:(Lorg/reactivestreams/Subscriber;ILio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$d;)V` @kind direct;
  #L4ae682.  call `onSubscribe`(v7, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4ae688.  v7:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ae68c.  v1:= length @variable v0;
  #L4ae68e.  v2:= 0I;
  #L4ae690.  if v2 >= v1 then goto L4ae6be;
  #L4ae694.  v4:= v0[v2] @kind object;
  #L4ae698.  call temp:= `isCancelled`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.isCancelled:()Z` @kind virtual;
  #L4ae69e.  v5:= temp;
  #L4ae6a0.  if v5 != 0 then goto L4ae6be;
  #L4ae6a4.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ae6aa.  v5:= temp @kind object;
  #L4ae6ac.  if v5 == 0 then goto L4ae6b2;
  #L4ae6b0.  goto L4ae6be;
  #L4ae6b2.  call `subscribe`(v4, v3) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4ae6b8.  v2:= v2 + 1;
  #L4ae6bc.  goto L4ae690;
  #L4ae6be.  return @kind void;
}
