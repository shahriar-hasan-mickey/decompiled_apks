record `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Supplier` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.d` @AccessFlag FINAL;
  `java.util.Collection` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.e` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.f` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.g` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.h` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `int` v3 , `io.reactivex.rxjava3.functions.Supplier` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$c;.<init>:(Lorg/reactivestreams/Subscriber;IILio/reactivex/rxjava3/functions/Supplier;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L488440.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L488446.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L48844a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.c` @type ^`int` := v2;
  #L48844e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.d` @type ^`int` := v3;
  #L488452.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.b` @type ^`io.reactivex.rxjava3.functions.Supplier` := v4 @kind object;
  #L488456.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L488468.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48846c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L488472.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L488484.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.g` @type ^`boolean` @kind boolean;
  #L488488.  if v0 == 0 then goto L48848e;
  #L48848c.  return @kind void;
  #L48848e.  v0:= 1I;
  #L488490.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.g` @type ^`boolean` := v0 @kind boolean;
  #L488494.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.e` @type ^`java.util.Collection` @kind object;
  #L488498.  v1:= 0I;
  #L48849a.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.e` @type ^`java.util.Collection` := v1 @kind object;
  #L48849e.  if v0 == 0 then goto L4884ac;
  #L4884a2.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4884a6.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4884ac.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4884b0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4884b6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4884c8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.g` @type ^`boolean` @kind boolean;
  #L4884cc.  if v0 == 0 then goto L4884d8;
  #L4884d0.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4884d6.  return @kind void;
  #L4884d8.  v0:= 1I;
  #L4884da.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.g` @type ^`boolean` := v0 @kind boolean;
  #L4884de.  v0:= 0I;
  #L4884e0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.e` @type ^`java.util.Collection` := v0 @kind object;
  #L4884e4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4884e8.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4884ee.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L488500.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.g` @type ^`boolean` @kind boolean;
  #L488504.  if v0 == 0 then goto L48850a;
  #L488508.  return @kind void;
  #L48850a.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.e` @type ^`java.util.Collection` @kind object;
  #L48850e.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.h` @type ^`int`;
  #L488512.  v2:= v1 + 1;
  #L488516.  if v1 != 0 then goto L488550;
  #L48851a.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.b` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L48851e.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L488524.  v0:= temp @kind object;
  #L488526.  v1:= "The bufferSupplier returned a null buffer" @kind object;
  #L48852a.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L488530.  v0:= (`java.util.Collection`) v0 @kind object;
  #L488534.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.e` @type ^`java.util.Collection` := v0 @kind object;
  #L488538.  goto L488550;
  #L48853a.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48853c.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L488542.  call `cancel`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$c;.cancel:()V` @kind virtual;
  #L488548.  call `onError`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L48854e.  return @kind void;
  #L488550.  if v0 == 0 then goto L48857a;
  #L488554.  call temp:= `add`(v0, v4) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48855a.  call temp:= `size`(v0) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L488560.  v4:= temp;
  #L488562.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.c` @type ^`int`;
  #L488566.  if v4 != v1 then goto L48857a;
  #L48856a.  v4:= 0I;
  #L48856c.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.e` @type ^`java.util.Collection` := v4 @kind object;
  #L488570.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L488574.  call `onNext`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48857a.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.d` @type ^`int`;
  #L48857e.  if v2 != v4 then goto L488584;
  #L488582.  v2:= 0I;
  #L488584.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.h` @type ^`int` := v2;
  #L488588.  return @kind void;
  catch `java.lang.Throwable` @[L48851a..L488534] goto L48853a;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4885a8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4885ac.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4885b2.  v0:= temp;
  #L4885b4.  if v0 == 0 then goto L4885c6;
  #L4885b8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.f` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4885bc.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4885c0.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4885c6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4885d8.  call temp:= `validate`(v7) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4885de.  v0:= temp;
  #L4885e0.  if v0 == 0 then goto L488654;
  #L4885e4.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4885ea.  v0:= temp;
  #L4885ec.  if v0 != 0 then goto L48863c;
  #L4885f0.  v0:= 0I;
  #L4885f2.  v1:= 1I;
  #L4885f4.  call temp:= `compareAndSet`(v6, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4885fa.  v0:= temp;
  #L4885fc.  if v0 == 0 then goto L48863c;
  #L488600.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.c` @type ^`int`;
  #L488604.  v0:= (`long`) v0 @kind i2l;
  #L488606.  call temp:= `multiplyCap`(v7, v0) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L48860c.  v0:= temp @kind wide;
  #L48860e.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.d` @type ^`int`;
  #L488612.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.c` @type ^`int`;
  #L488616.  v2:= v2 - v3 @kind int;
  #L488618.  v2:= (`long`) v2 @kind i2l;
  #L48861a.  v4:= 1L;
  #L48861e.  v7:= v7 - v4 @kind long;
  #L488620.  call temp:= `multiplyCap`(v2, v7) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L488626.  v7:= temp @kind wide;
  #L488628.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48862c.  call temp:= `addCap`(v0, v7) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L488632.  v7:= temp @kind wide;
  #L488634.  call `request`(v2, v7) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L48863a.  goto L488654;
  #L48863c.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L488640.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.d` @type ^`int`;
  #L488644.  v1:= (`long`) v1 @kind i2l;
  #L488646.  call temp:= `multiplyCap`(v1, v7) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L48864c.  v7:= temp @kind wide;
  #L48864e.  call `request`(v0, v7) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L488654.  return @kind void;
}
