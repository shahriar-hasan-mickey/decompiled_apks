record `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d1d8c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4d1d92.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L4d1d96.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4d1d9a.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v3 @kind object;
  #L4d1d9e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d1db0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d1db4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d1dba.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d1dcc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.e` @type ^`boolean` @kind boolean;
  #L4d1dd0.  if v0 == 0 then goto L4d1dd6;
  #L4d1dd4.  return @kind void;
  #L4d1dd6.  v0:= 1I;
  #L4d1dd8.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.e` @type ^`boolean` := v0 @kind boolean;
  #L4d1ddc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4d1de0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d1de6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d1df8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.e` @type ^`boolean` @kind boolean;
  #L4d1dfc.  if v0 == 0 then goto L4d1e08;
  #L4d1e00.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d1e06.  return @kind void;
  #L4d1e08.  v0:= 1I;
  #L4d1e0a.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.e` @type ^`boolean` := v0 @kind boolean;
  #L4d1e0e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4d1e12.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d1e18.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d1e2c.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L4d1e32.  v3:= temp;
  #L4d1e34.  if v3 != 0 then goto L4d1e4e;
  #L4d1e38.  v3:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.e` @type ^`boolean` @kind boolean;
  #L4d1e3c.  if v3 != 0 then goto L4d1e4e;
  #L4d1e40.  v3:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d1e44.  v0:= 1L;
  #L4d1e48.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d1e4e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d1e60.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d1e64.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d1e6a.  v0:= temp;
  #L4d1e6c.  if v0 == 0 then goto L4d1e7e;
  #L4d1e70.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.d` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4d1e74.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4d1e78.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d1e7e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d1e90.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d1e94.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d1e9a.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4d1c94.  v0:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.e` @type ^`boolean` @kind boolean;
  #L4d1c98.  v1:= 0I;
  #L4d1c9a.  if v0 == 0 then goto L4d1ca0;
  #L4d1c9e.  return v1;
  #L4d1ca0.  v2:= 0L;
  #L4d1ca4.  v0:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4d1ca8.  call temp:= `apply`(v0, v10) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4d1cae.  v0:= temp @kind object;
  #L4d1cb0.  v4:= "The mapper returned a null value" @kind object;
  #L4d1cb4.  call temp:= `requireNonNull`(v0, v4) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4d1cba.  v10:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4d1cbe.  call temp:= `tryOnNext`(v10, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4d1cc4.  v10:= temp;
  #L4d1cc6.  return v10;
  #L4d1cc8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d1cca.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d1cd0.  v4:= 1I;
  #L4d1cd2.  v5:= 2I;
  #L4d1cd4.  v6:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4d1cd8.  v7:= 1L;
  #L4d1cdc.  v2:= v2 + v7 @kind long;
  #L4d1cde.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4d1ce4.  v7:= temp @kind object;
  #L4d1ce6.  call temp:= `apply`(v6, v7, v0) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4d1cec.  v6:= temp @kind object;
  #L4d1cee.  v7:= "The errorHandler returned a null ParallelFailureHandling" @kind object;
  #L4d1cf2.  call temp:= `requireNonNull`(v6, v7) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4d1cf8.  v6:= (`io.reactivex.rxjava3.parallel.ParallelFailureHandling`) v6 @kind object;
  #L4d1cfc.  v7:= `@@io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$a.a` @type ^`int`[] @kind object;
  #L4d1d00.  call temp:= `ordinal`(v6) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L4d1d06.  v6:= temp;
  #L4d1d08.  v6:= v7[v6];
  #L4d1d0c.  if v6 == v4 then goto L4d1ca4;
  #L4d1d10.  if v6 == v5 then goto L4d1d34;
  #L4d1d14.  v10:= 3I;
  #L4d1d16.  if v6 == v10 then goto L4d1d28;
  #L4d1d1a.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.cancel:()V` @kind virtual;
  #L4d1d20.  call `onError`(v9, v0) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d1d26.  return v1;
  #L4d1d28.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.cancel:()V` @kind virtual;
  #L4d1d2e.  call `onComplete`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.onComplete:()V` @kind virtual;
  #L4d1d34.  return v1;
  #L4d1d36.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d1d38.  call `throwIfFatal`(v10) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d1d3e.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.cancel:()V` @kind virtual;
  #L4d1d44.  v2:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L4d1d48.  v3:= new `java.lang.Throwable`[v5];
  #L4d1d4c.  v3[v1]:= v0 @kind object;
  #L4d1d50.  v3[v4]:= v10 @kind object;
  #L4d1d54.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4d1d5a.  call `onError`(v9, v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d1d60.  return v1;
  catch `java.lang.Throwable` @[L4d1ca4..L4d1cba] goto L4d1cc8;
  catch `java.lang.Throwable` @[L4d1cd4..L4d1cfc] goto L4d1d36;
}
