record `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.Observer` @kind interface {
  `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.d` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b` v0 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c81f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c81fa.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a` := v1 @kind object;
  #L4c81fe.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.c` @type ^`int` := v2;
  #L4c8202.  v1:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4c8206.  call `<init>`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4c820c.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v1 @kind object;
  #L4c8210.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c8224.  v0:= 1I;
  #L4c8226.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.d` @type ^`boolean` := v0 @kind boolean;
  #L4c822a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a` @kind object;
  #L4c822e.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;.b:()V` @kind virtual;
  #L4c8234.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4c8248.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.e` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4c824c.  v1:= 1I;
  #L4c824e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.d` @type ^`boolean` := v1 @kind boolean;
  #L4c8252.  v1:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a` @kind object;
  #L4c8256.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;.b:()V` @kind virtual;
  #L4c825c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c8270.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c8274.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4c827a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a` @kind object;
  #L4c827e.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;.b:()V` @kind virtual;
  #L4c8284.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b` v2 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c8298.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a` @kind object;
  #L4c829c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.c` @type ^`int`;
  #L4c82a0.  call temp:= `c`(v0, v3, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;.c:(Lio/reactivex/rxjava3/disposables/Disposable;I)Z` @kind virtual;
  #L4c82a6.  return @kind void;
}
