record `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface {
  `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.a` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.c` @AccessFlag PRIVATE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.d` @AccessFlag PRIVATE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.e` @AccessFlag PRIVATE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.f` @AccessFlag PRIVATE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a` v1 @kind this, `io.reactivex.rxjava3.core.ObservableSource` v2 @kind object, `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$a;.<init>:(Lio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$b;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4b5b28.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b5b2e.  v0:= 1I;
  #L4b5b30.  v1.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4b5b34.  v1.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4b5b38.  v1.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.b` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v2 @kind object;
  #L4b5b3c.  v1.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` := v3 @kind object;
  #L4b5b40.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$a;.a:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b5a1c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.g` @type ^`boolean` @kind boolean;
  #L4b5a20.  v1:= 1I;
  #L4b5a22.  if v0 != 0 then goto L4b5a4c;
  #L4b5a26.  v4.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.g` @type ^`boolean` := v1 @kind boolean;
  #L4b5a2a.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` @kind object;
  #L4b5a2e.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$b;.b:()V` @kind virtual;
  #L4b5a34.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableMaterialize`;
  #L4b5a38.  v2:= v4.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.b` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4b5a3c.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMaterialize;.<init>:(Lio/reactivex/rxjava3/core/ObservableSource;)V` @kind direct;
  #L4b5a42.  v2:= v4.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` @kind object;
  #L4b5a46.  call `subscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observable;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4b5a4c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` @kind object;
  #L4b5a50.  call temp:= `c`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$b;.c:()Lio/reactivex/rxjava3/core/Notification;` @kind virtual;
  #L4b5a56.  v0:= temp @kind object;
  #L4b5a58.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnNext:()Z` @kind virtual;
  #L4b5a5e.  v2:= temp;
  #L4b5a60.  v3:= 0I;
  #L4b5a62.  if v2 == 0 then goto L4b5a78;
  #L4b5a66.  v4.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.e` @type ^`boolean` := v3 @kind boolean;
  #L4b5a6a.  call temp:= `getValue`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L4b5a70.  v0:= temp @kind object;
  #L4b5a72.  v4.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.c` @type ^`java.lang.Object` := v0 @kind object;
  #L4b5a76.  return v1;
  #L4b5a78.  v4.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.d` @type ^`boolean` := v3 @kind boolean;
  #L4b5a7c.  call temp:= `isOnComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnComplete:()Z` @kind virtual;
  #L4b5a82.  v1:= temp;
  #L4b5a84.  if v1 == 0 then goto L4b5a8a;
  #L4b5a88.  return v3;
  #L4b5a8a.  call temp:= `getError`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L4b5a90.  v0:= temp @kind object;
  #L4b5a92.  v4.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.f` @type ^`java.lang.Throwable` := v0 @kind object;
  #L4b5a96.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4b5a9c.  v0:= temp @kind object;
  #L4b5a9e.  throw v0;
  #L4b5aa0.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L4b5aa2.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` @kind object;
  #L4b5aa6.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/observers/DisposableObserver;.dispose:()V` @kind virtual;
  #L4b5aac.  v4.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.f` @type ^`java.lang.Throwable` := v0 @kind object;
  #L4b5ab0.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4b5ab6.  v0:= temp @kind object;
  #L4b5ab8.  throw v0;
  catch `java.lang.InterruptedException` @[L4b5a4c..L4b5a58] goto L4b5aa0;
}
procedure `boolean` `hasNext`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b59d4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.f` @type ^`java.lang.Throwable` @kind object;
  #L4b59d8.  if v0 != 0 then goto L4b5a00;
  #L4b59dc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.d` @type ^`boolean` @kind boolean;
  #L4b59e0.  v1:= 0I;
  #L4b59e2.  if v0 != 0 then goto L4b59e8;
  #L4b59e6.  return v1;
  #L4b59e8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.e` @type ^`boolean` @kind boolean;
  #L4b59ec.  if v0 == 0 then goto L4b59fc;
  #L4b59f0.  call temp:= `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$a;.a:()Z` @kind direct;
  #L4b59f6.  v0:= temp;
  #L4b59f8.  if v0 == 0 then goto L4b59fe;
  #L4b59fc.  v1:= 1I;
  #L4b59fe.  return v1;
  #L4b5a00.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4b5a06.  v0:= temp @kind object;
  #L4b5a08.  throw v0;
}
procedure `java.lang.Object` `next`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b5adc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.f` @type ^`java.lang.Throwable` @kind object;
  #L4b5ae0.  if v0 != 0 then goto L4b5b0c;
  #L4b5ae4.  call temp:= `hasNext`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$a;.hasNext:()Z` @kind virtual;
  #L4b5aea.  v0:= temp;
  #L4b5aec.  if v0 == 0 then goto L4b5afc;
  #L4b5af0.  v0:= 1I;
  #L4b5af2.  v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4b5af6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.c` @type ^`java.lang.Object` @kind object;
  #L4b5afa.  return v0 @kind object;
  #L4b5afc.  v0:= new `java.util.NoSuchElementException`;
  #L4b5b00.  v1:= "No more elements" @kind object;
  #L4b5b04.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b5b0a.  throw v0;
  #L4b5b0c.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4b5b12.  v0:= temp @kind object;
  #L4b5b14.  throw v0;
}
procedure `void` `remove`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b5b54.  v0:= new `java.lang.UnsupportedOperationException`;
  #L4b5b58.  v1:= "Read only iterator" @kind object;
  #L4b5b5c.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b5b62.  throw v0;
}
