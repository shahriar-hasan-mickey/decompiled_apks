record `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.d` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.f` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.h` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.i` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.j` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.k` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.l` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.m` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `int` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a6edc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4a6ee2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4a6ee6.  v1:= new `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue`;
  #L4a6eea.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4a6ef0.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L4a6ef4.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.c` @type ^`long` := v2 @kind wide;
  #L4a6ef8.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L4a6efc.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.e` @type ^`int` := v5;
  #L4a6f00.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4a6f04.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a6f0a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4a6f0e.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4a6f12.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4a6f18.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4a6f1c.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4a6f20.  v2:= 1I;
  #L4a6f22.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4a6f28.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4a6f2c.  return @kind void;
}
procedure `void` `a`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.a:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `b`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.b:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `c`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.c:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4a6f40.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a6f44.  v1:= 0I;
  #L4a6f46.  v2:= 1I;
  #L4a6f48.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4a6f4e.  v0:= temp;
  #L4a6f50.  if v0 == 0 then goto L4a6f5a;
  #L4a6f54.  call `d`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.d:()V` @kind virtual;
  #L4a6f5a.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.d:()V` @AccessFlag FINAL {
    temp;
    v0;

  #L4a7034.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4a7038.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4a703e.  v0:= temp;
  #L4a7040.  if v0 != 0 then goto L4a7060;
  #L4a7044.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.a:()V` @kind virtual;
  #L4a704a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a704e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a7054.  v0:= 1I;
  #L4a7056.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`boolean` := v0 @kind boolean;
  #L4a705a.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.c:()V` @kind virtual;
  #L4a7060.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.onComplete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4a6f6c.  v0:= 1I;
  #L4a6f6e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4a6f72.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.c:()V` @kind virtual;
  #L4a6f78.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4a6f8c.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.i` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4a6f90.  v1:= 1I;
  #L4a6f92.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.h` @type ^`boolean` := v1 @kind boolean;
  #L4a6f96.  call `c`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.c:()V` @kind virtual;
  #L4a6f9c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4a6fb0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4a6fb4.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4a6fba.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.c:()V` @kind virtual;
  #L4a6fc0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4a6fd4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a6fd8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4a6fde.  v0:= temp;
  #L4a6fe0.  if v0 == 0 then goto L4a6ff8;
  #L4a6fe4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4a6fe8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a6fec.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4a6ff2.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.b:()V` @kind virtual;
  #L4a6ff8.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4a700c.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4a7012.  v0:= temp;
  #L4a7014.  if v0 == 0 then goto L4a7022;
  #L4a7018.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a701c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4a7022.  return @kind void;
}
