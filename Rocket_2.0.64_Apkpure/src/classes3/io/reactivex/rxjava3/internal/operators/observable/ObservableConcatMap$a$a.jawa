record `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b9324.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b932a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4b932e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a$a.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a` := v2 @kind object;
  #L4b9332.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a$a;.a:()V` @AccessFlag  {
    temp;

  #L4b9344.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b934a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b935c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a$a.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a` @kind object;
  #L4b9360.  v1:= 0I;
  #L4b9362.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.i` @type ^`boolean` := v1 @kind boolean;
  #L4b9366.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a;.a:()V` @kind virtual;
  #L4b936c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b9380.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a$a.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a` @kind object;
  #L4b9384.  v1:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b9388.  call temp:= `tryAddThrowableOrReport`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b938e.  v3:= temp;
  #L4b9390.  if v3 == 0 then goto L4b93b2;
  #L4b9394.  v3:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.f` @type ^`boolean` @kind boolean;
  #L4b9398.  if v3 != 0 then goto L4b93a6;
  #L4b939c.  v3:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b93a0.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b93a6.  v3:= 0I;
  #L4b93a8.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.i` @type ^`boolean` := v3 @kind boolean;
  #L4b93ac.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a;.a:()V` @kind virtual;
  #L4b93b2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b93c4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b93c8.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b93ce.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4b93e0.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b93e6.  return @kind void;
}
