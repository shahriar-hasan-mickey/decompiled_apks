record `io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.e` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.f` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.i` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.j` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.k` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/core/Scheduler$Worker;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c3940.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L4c3946.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4c394a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v2 @kind object;
  #L4c394e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.c` @type ^`boolean` := v3 @kind boolean;
  #L4c3952.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.d` @type ^`int` := v4;
  #L4c3956.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v2 @kind this, `boolean` v3 , `boolean` v4 , `io.reactivex.rxjava3.core.Observer` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.a:(ZZLio/reactivex/rxjava3/core/Observer;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4c3824.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L4c3828.  v1:= 1I;
  #L4c382a.  if v0 == 0 then goto L4c383a;
  #L4c382e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4c3832.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4c3838.  return v1;
  #L4c383a.  if v3 == 0 then goto L4c38ae;
  #L4c383e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.g` @type ^`java.lang.Throwable` @kind object;
  #L4c3842.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.c` @type ^`boolean` @kind boolean;
  #L4c3846.  if v0 == 0 then goto L4c3870;
  #L4c384a.  if v4 == 0 then goto L4c38ae;
  #L4c384e.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` := v1 @kind boolean;
  #L4c3852.  if v3 == 0 then goto L4c385e;
  #L4c3856.  call `onError`(v5, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c385c.  goto L4c3864;
  #L4c385e.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4c3864.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4c3868.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c386e.  return v1;
  #L4c3870.  if v3 == 0 then goto L4c3894;
  #L4c3874.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` := v1 @kind boolean;
  #L4c3878.  v4:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4c387c.  call `clear`(v4) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4c3882.  call `onError`(v5, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c3888.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4c388c.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c3892.  return v1;
  #L4c3894.  if v4 == 0 then goto L4c38ae;
  #L4c3898.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` := v1 @kind boolean;
  #L4c389c.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4c38a2.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4c38a6.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c38ac.  return v1;
  #L4c38ae.  v3:= 0I;
  #L4c38b0.  return v3;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c3968.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4c396c.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4c3972.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c3984.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L4c3988.  if v0 != 0 then goto L4c39c4;
  #L4c398c.  v0:= 1I;
  #L4c398e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4c3992.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c3996.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c399c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4c39a0.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c39a6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.k` @type ^`boolean` @kind boolean;
  #L4c39aa.  if v0 != 0 then goto L4c39c4;
  #L4c39ae.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c39b4.  v0:= temp;
  #L4c39b6.  if v0 != 0 then goto L4c39c4;
  #L4c39ba.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4c39be.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4c39c4.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c39d8.  v0:= 1I;
  #L4c39da.  v1:= 1I;
  #L4c39dc.  v2:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L4c39e0.  if v2 == 0 then goto L4c39e6;
  #L4c39e4.  return @kind void;
  #L4c39e6.  v2:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L4c39ea.  v3:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.g` @type ^`java.lang.Throwable` @kind object;
  #L4c39ee.  v4:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.c` @type ^`boolean` @kind boolean;
  #L4c39f2.  if v4 != 0 then goto L4c3a1c;
  #L4c39f6.  if v2 == 0 then goto L4c3a1c;
  #L4c39fa.  if v3 == 0 then goto L4c3a1c;
  #L4c39fe.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4c3a02.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c3a06.  v1:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.g` @type ^`java.lang.Throwable` @kind object;
  #L4c3a0a.  call `onError`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c3a10.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4c3a14.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c3a1a.  return @kind void;
  #L4c3a1c.  v3:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c3a20.  v4:= 0I;
  #L4c3a22.  call `onNext`(v3, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c3a28.  if v2 == 0 then goto L4c3a5a;
  #L4c3a2c.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4c3a30.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.g` @type ^`java.lang.Throwable` @kind object;
  #L4c3a34.  if v0 == 0 then goto L4c3a44;
  #L4c3a38.  v1:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c3a3c.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c3a42.  goto L4c3a4e;
  #L4c3a44.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c3a48.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4c3a4e.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4c3a52.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c3a58.  return @kind void;
  #L4c3a5a.  v1:= -v1 @kind int;
  #L4c3a5c.  call temp:= `addAndGet`(v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4c3a62.  v1:= temp;
  #L4c3a64.  if v1 != 0 then goto L4c39dc;
  #L4c3a68.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v7 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4c3a7c.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4c3a80.  v1:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c3a84.  v2:= 1I;
  #L4c3a86.  v3:= 1I;
  #L4c3a88.  v4:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L4c3a8c.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4c3a92.  v5:= temp;
  #L4c3a94.  call temp:= `a`(v7, v4, v5, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.a:(ZZLio/reactivex/rxjava3/core/Observer;)Z` @kind virtual;
  #L4c3a9a.  v4:= temp;
  #L4c3a9c.  if v4 == 0 then goto L4c3aa2;
  #L4c3aa0.  return @kind void;
  #L4c3aa2.  v4:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L4c3aa6.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4c3aac.  v5:= temp @kind object;
  #L4c3aae.  if v5 != 0 then goto L4c3ab6;
  #L4c3ab2.  v6:= 1I;
  #L4c3ab4.  goto L4c3ab8;
  #L4c3ab6.  v6:= 0I;
  #L4c3ab8.  call temp:= `a`(v7, v4, v6, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.a:(ZZLio/reactivex/rxjava3/core/Observer;)Z` @kind virtual;
  #L4c3abe.  v4:= temp;
  #L4c3ac0.  if v4 == 0 then goto L4c3ac6;
  #L4c3ac4.  return @kind void;
  #L4c3ac6.  if v6 == 0 then goto L4c3ada;
  #L4c3aca.  v3:= -v3 @kind int;
  #L4c3acc.  call temp:= `addAndGet`(v7, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4c3ad2.  v3:= temp;
  #L4c3ad4.  if v3 != 0 then goto L4c3a88;
  #L4c3ad8.  return @kind void;
  #L4c3ada.  call `onNext`(v1, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c3ae0.  goto L4c3aa2;
  #L4c3ae2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c3ae4.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c3aea.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` := v2 @kind boolean;
  #L4c3aee.  v2:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c3af2.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c3af8.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4c3afe.  call `onError`(v1, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c3b04.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4c3b08.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c3b0e.  return @kind void;
  catch `java.lang.Throwable` @[L4c3aa6..L4c3aae] goto L4c3ae2;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.g:()V` @AccessFlag  {
    temp;
    v0;

  #L4c3c80.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c3c86.  v0:= temp;
  #L4c3c88.  if v0 != 0 then goto L4c3c96;
  #L4c3c8c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4c3c90.  call temp:= `schedule`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4c3c96.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c38c4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L4c38c8.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c38dc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4c38e0.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4c38e6.  v0:= temp;
  #L4c38e8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c3b2c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L4c3b30.  if v0 == 0 then goto L4c3b36;
  #L4c3b34.  return @kind void;
  #L4c3b36.  v0:= 1I;
  #L4c3b38.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4c3b3c.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.g:()V` @kind virtual;
  #L4c3b42.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c3b54.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L4c3b58.  if v0 == 0 then goto L4c3b64;
  #L4c3b5c.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c3b62.  return @kind void;
  #L4c3b64.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.g` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4c3b68.  v2:= 1I;
  #L4c3b6a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` := v2 @kind boolean;
  #L4c3b6e.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.g:()V` @kind virtual;
  #L4c3b74.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c3b88.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L4c3b8c.  if v0 == 0 then goto L4c3b92;
  #L4c3b90.  return @kind void;
  #L4c3b92.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.j` @type ^`int`;
  #L4c3b96.  v1:= 2I;
  #L4c3b98.  if v0 == v1 then goto L4c3ba6;
  #L4c3b9c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4c3ba0.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4c3ba6.  call `g`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.g:()V` @kind virtual;
  #L4c3bac.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v2 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c3bc0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c3bc4.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4c3bca.  v0:= temp;
  #L4c3bcc.  if v0 == 0 then goto L4c3c44;
  #L4c3bd0.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v3 @kind object;
  #L4c3bd4.  v0:= instanceof @variable v3 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind boolean;
  #L4c3bd8.  if v0 == 0 then goto L4c3c28;
  #L4c3bdc.  v3:= (`io.reactivex.rxjava3.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L4c3be0.  v0:= 7I;
  #L4c3be2.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4c3be8.  v0:= temp;
  #L4c3bea.  v1:= 1I;
  #L4c3bec.  if v0 != v1 then goto L4c3c0e;
  #L4c3bf0.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.j` @type ^`int` := v0;
  #L4c3bf4.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4c3bf8.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` := v1 @kind boolean;
  #L4c3bfc.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c3c00.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4c3c06.  call `g`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.g:()V` @kind virtual;
  #L4c3c0c.  return @kind void;
  #L4c3c0e.  v1:= 2I;
  #L4c3c10.  if v0 != v1 then goto L4c3c28;
  #L4c3c14.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.j` @type ^`int` := v0;
  #L4c3c18.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4c3c1c.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c3c20.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4c3c26.  return @kind void;
  #L4c3c28.  v3:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4c3c2c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.d` @type ^`int`;
  #L4c3c30.  call `<init>`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4c3c36.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4c3c3a.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c3c3e.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4c3c44.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c3920.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4c3924.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4c392a.  v0:= temp @kind object;
  #L4c392c.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c38fc.  v0:= 2I;
  #L4c38fe.  v2:= v2 ^& v0 @kind int;
  #L4c3900.  if v2 == 0 then goto L4c390c;
  #L4c3904.  v2:= 1I;
  #L4c3906.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.k` @type ^`boolean` := v2 @kind boolean;
  #L4c390a.  return v0;
  #L4c390c.  v2:= 0I;
  #L4c390e.  return v2;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c3c58.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.k` @type ^`boolean` @kind boolean;
  #L4c3c5c.  if v0 == 0 then goto L4c3c68;
  #L4c3c60.  call `e`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.e:()V` @kind virtual;
  #L4c3c66.  goto L4c3c6e;
  #L4c3c68.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.f:()V` @kind virtual;
  #L4c3c6e.  return @kind void;
}
