record `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.f` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.h` @AccessFlag VOLATILE;
}
global `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a$a` `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.i` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4b4c18.  v0:= new `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a$a`;
  #L4b4c1c.  v1:= 0I;
  #L4b4c1e.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;)V` @kind direct;
  #L4b4c24.  `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.i` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a$a` := v0 @kind object;
  #L4b4c28.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b4c3c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4b4c42.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4b4c46.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4b4c4a.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.c` @type ^`boolean` := v3 @kind boolean;
  #L4b4c4e.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4b4c52.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4b4c58.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4b4c5c.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4b4c60.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b4c66.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4b4c6a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4b4cb0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b4cb4.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.i` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a$a` @kind object;
  #L4b4cb8.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4b4cbe.  v0:= temp @kind object;
  #L4b4cc0.  v0:= (`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a$a`) v0 @kind object;
  #L4b4cc4.  if v0 == 0 then goto L4b4cd2;
  #L4b4cc8.  if v0 == v1 then goto L4b4cd2;
  #L4b4ccc.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a$a;.a:()V` @kind virtual;
  #L4b4cd2.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a` v8 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4b4ce4.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4b4cea.  v0:= temp;
  #L4b4cec.  if v0 == 0 then goto L4b4cf2;
  #L4b4cf0.  return @kind void;
  #L4b4cf2.  v0:= v8.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b4cf6.  v1:= v8.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b4cfa.  v2:= v8.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b4cfe.  v3:= 1I;
  #L4b4d00.  v4:= 1I;
  #L4b4d02.  v5:= v8.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.h` @type ^`boolean` @kind boolean;
  #L4b4d06.  if v5 == 0 then goto L4b4d0c;
  #L4b4d0a.  return @kind void;
  #L4b4d0c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b4d12.  v5:= temp @kind object;
  #L4b4d14.  if v5 == 0 then goto L4b4d28;
  #L4b4d18.  v5:= v8.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.c` @type ^`boolean` @kind boolean;
  #L4b4d1c.  if v5 != 0 then goto L4b4d28;
  #L4b4d20.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4b4d26.  return @kind void;
  #L4b4d28.  v5:= v8.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.g` @type ^`boolean` @kind boolean;
  #L4b4d2c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b4d32.  v6:= temp @kind object;
  #L4b4d34.  v6:= (`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a$a`) v6 @kind object;
  #L4b4d38.  if v6 != 0 then goto L4b4d40;
  #L4b4d3c.  v7:= 1I;
  #L4b4d3e.  goto L4b4d42;
  #L4b4d40.  v7:= 0I;
  #L4b4d42.  if v5 == 0 then goto L4b4d52;
  #L4b4d46.  if v7 == 0 then goto L4b4d52;
  #L4b4d4a.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4b4d50.  return @kind void;
  #L4b4d52.  if v7 != 0 then goto L4b4d74;
  #L4b4d56.  v5:= v6.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a$a.b` @type ^`java.lang.Object` @kind object;
  #L4b4d5a.  if v5 != 0 then goto L4b4d60;
  #L4b4d5e.  goto L4b4d74;
  #L4b4d60.  v5:= 0I;
  #L4b4d62.  call temp:= `compareAndSet`(v2, v6, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b4d68.  v5:= v6.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a$a.b` @type ^`java.lang.Object` @kind object;
  #L4b4d6c.  call `onNext`(v0, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b4d72.  goto L4b4d02;
  #L4b4d74.  v4:= -v4 @kind int;
  #L4b4d76.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4b4d7c.  v4:= temp;
  #L4b4d7e.  if v4 != 0 then goto L4b4d02;
  #L4b4d82.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.c:(Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4b4d94.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b4d98.  v1:= 0I;
  #L4b4d9a.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b4da0.  v3:= temp;
  #L4b4da2.  if v3 == 0 then goto L4b4dd6;
  #L4b4da6.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b4daa.  call temp:= `tryAddThrowableOrReport`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b4db0.  v3:= temp;
  #L4b4db2.  if v3 == 0 then goto L4b4ddc;
  #L4b4db6.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.c` @type ^`boolean` @kind boolean;
  #L4b4dba.  if v3 != 0 then goto L4b4dce;
  #L4b4dbe.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b4dc2.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b4dc8.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.a:()V` @kind virtual;
  #L4b4dce.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.b:()V` @kind virtual;
  #L4b4dd4.  goto L4b4ddc;
  #L4b4dd6.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b4ddc.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b4c7c.  v0:= 1I;
  #L4b4c7e.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4b4c82.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b4c86.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b4c8c.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.a:()V` @kind virtual;
  #L4b4c92.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b4c96.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4b4c9c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b4c00.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.h` @type ^`boolean` @kind boolean;
  #L4b4c04.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b4df0.  v0:= 1I;
  #L4b4df2.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4b4df6.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.b:()V` @kind virtual;
  #L4b4dfc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b4e10.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b4e14.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b4e1a.  v2:= temp;
  #L4b4e1c.  if v2 == 0 then goto L4b4e3a;
  #L4b4e20.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.c` @type ^`boolean` @kind boolean;
  #L4b4e24.  if v2 != 0 then goto L4b4e2e;
  #L4b4e28.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.a:()V` @kind virtual;
  #L4b4e2e.  v2:= 1I;
  #L4b4e30.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.g` @type ^`boolean` := v2 @kind boolean;
  #L4b4e34.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.b:()V` @kind virtual;
  #L4b4e3a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b4e4c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b4e50.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b4e56.  v0:= temp @kind object;
  #L4b4e58.  v0:= (`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a$a`) v0 @kind object;
  #L4b4e5c.  if v0 == 0 then goto L4b4e66;
  #L4b4e60.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a$a;.a:()V` @kind virtual;
  #L4b4e66.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4b4e6a.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b4e70.  v4:= temp @kind object;
  #L4b4e72.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L4b4e76.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b4e7c.  v4:= (`io.reactivex.rxjava3.core.SingleSource`) v4 @kind object;
  #L4b4e80.  v0:= new `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a$a`;
  #L4b4e84.  call `<init>`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;)V` @kind direct;
  #L4b4e8a.  v1:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b4e8e.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b4e94.  v1:= temp @kind object;
  #L4b4e96.  v1:= (`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a$a`) v1 @kind object;
  #L4b4e9a.  v2:= `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.i` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a$a` @kind object;
  #L4b4e9e.  if v1 != v2 then goto L4b4ea4;
  #L4b4ea2.  goto L4b4eba;
  #L4b4ea4.  v2:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b4ea8.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b4eae.  v1:= temp;
  #L4b4eb0.  if v1 == 0 then goto L4b4e8a;
  #L4b4eb4.  call `subscribe`(v4, v0) @signature `Lio/reactivex/rxjava3/core/SingleSource;.subscribe:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind interface;
  #L4b4eba.  return @kind void;
  #L4b4ebc.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b4ebe.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b4ec4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b4ec8.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b4ece.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b4ed2.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.i` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a$a` @kind object;
  #L4b4ed6.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4b4edc.  call `onError`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b4ee2.  return @kind void;
  catch `java.lang.Throwable` @[L4b4e66..L4b4e80] goto L4b4ebc;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b4f00.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b4f04.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b4f0a.  v0:= temp;
  #L4b4f0c.  if v0 == 0 then goto L4b4f1e;
  #L4b4f10.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4b4f14.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b4f18.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4b4f1e.  return @kind void;
}
