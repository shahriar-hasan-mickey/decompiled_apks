record `io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber` @kind class {
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Action` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Action` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Consumer` v2 @kind object, `io.reactivex.rxjava3.functions.Consumer` v3 @kind object, `io.reactivex.rxjava3.functions.Action` v4 @kind object, `io.reactivex.rxjava3.functions.Action` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoOnEach$a;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Action;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48ff0c.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;)V` @kind direct;
  #L48ff12.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.a` @type ^`io.reactivex.rxjava3.functions.Consumer` := v2 @kind object;
  #L48ff16.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.b` @type ^`io.reactivex.rxjava3.functions.Consumer` := v3 @kind object;
  #L48ff1a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.c` @type ^`io.reactivex.rxjava3.functions.Action` := v4 @kind object;
  #L48ff1e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.d` @type ^`io.reactivex.rxjava3.functions.Action` := v5 @kind object;
  #L48ff22.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoOnEach$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48ff34.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L48ff38.  if v0 == 0 then goto L48ff3e;
  #L48ff3c.  return @kind void;
  #L48ff3e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.c` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L48ff42.  call `run`(v0) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L48ff48.  v0:= 1I;
  #L48ff4a.  v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L48ff4e.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L48ff52.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L48ff58.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.d` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L48ff5c.  call `run`(v0) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L48ff62.  goto L48ff72;
  #L48ff64.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48ff66.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48ff6c.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L48ff72.  return @kind void;
  #L48ff74.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48ff76.  call `fail`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L48ff7c.  return @kind void;
  catch `java.lang.Throwable` @[L48ff3e..L48ff48] goto L48ff74;
  catch `java.lang.Throwable` @[L48ff58..L48ff62] goto L48ff64;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoOnEach$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48ffa8.  v0:= v6.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L48ffac.  if v0 == 0 then goto L48ffb8;
  #L48ffb0.  call `onError`(v7) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L48ffb6.  return @kind void;
  #L48ffb8.  v0:= 1I;
  #L48ffba.  v6.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L48ffbe.  v1:= 0I;
  #L48ffc0.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L48ffc4.  call `accept`(v2, v7) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L48ffca.  goto L48fff8;
  #L48ffcc.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48ffce.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48ffd4.  v3:= v6.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L48ffd8.  v4:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L48ffdc.  v5:= 2I;
  #L48ffde.  v5:= new `java.lang.Throwable`[v5];
  #L48ffe2.  v5[v1]:= v7 @kind object;
  #L48ffe6.  v5[v0]:= v2 @kind object;
  #L48ffea.  call `<init>`(v4, v5) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L48fff0.  call `onError`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48fff6.  v0:= 0I;
  #L48fff8.  if v0 == 0 then goto L490006;
  #L48fffc.  v0:= v6.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L490000.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L490006.  v7:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.d` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L49000a.  call `run`(v7) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L490010.  goto L490020;
  #L490012.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L490014.  call `throwIfFatal`(v7) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49001a.  call `onError`(v7) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L490020.  return @kind void;
  catch `java.lang.Throwable` @[L48ffc0..L48ffca] goto L48ffcc;
  catch `java.lang.Throwable` @[L490006..L490010] goto L490012;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoOnEach$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49004c.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L490050.  if v0 == 0 then goto L490056;
  #L490054.  return @kind void;
  #L490056.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L49005a.  if v0 == 0 then goto L49006c;
  #L49005e.  v2:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L490062.  v0:= 0I;
  #L490064.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L49006a.  return @kind void;
  #L49006c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.a` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L490070.  call `accept`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L490076.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L49007a.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L490080.  return @kind void;
  #L490082.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L490084.  call `fail`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49008a.  return @kind void;
  catch `java.lang.Throwable` @[L49006c..L490076] goto L490082;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoOnEach$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48fdf0.  v0:= 0I;
  #L48fdf2.  v1:= 2I;
  #L48fdf4.  v2:= 1I;
  #L48fdf6.  v3:= v6.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.qs` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind object;
  #L48fdfa.  call temp:= `poll`(v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L48fe00.  v3:= temp @kind object;
  #L48fe02.  if v3 == 0 then goto L48fe66;
  #L48fe06.  v4:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.a` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L48fe0a.  call `accept`(v4, v3) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L48fe10.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.d` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L48fe14.  call `run`(v0) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L48fe1a.  goto L48fe82;
  #L48fe1c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48fe1e.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48fe24.  v4:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L48fe28.  call `accept`(v4, v3) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L48fe2e.  call temp:= `throwIfThrowable`(v3) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.throwIfThrowable:(Ljava/lang/Throwable;)Ljava/lang/Exception;` @kind static;
  #L48fe34.  v0:= temp @kind object;
  #L48fe36.  throw v0;
  #L48fe38.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48fe3a.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48fe40.  v5:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L48fe44.  v1:= new `java.lang.Throwable`[v1];
  #L48fe48.  v1[v0]:= v3 @kind object;
  #L48fe4c.  v1[v2]:= v4 @kind object;
  #L48fe50.  call `<init>`(v5, v1) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L48fe56.  throw v5;
  #L48fe58.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48fe5a.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.d` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L48fe5e.  call `run`(v1) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L48fe64.  throw v0;
  #L48fe66.  v0:= v6.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L48fe6a.  if v0 != v2 then goto L48fe82;
  #L48fe6e.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.c` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L48fe72.  call `run`(v0) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L48fe78.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.d` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L48fe7c.  call `run`(v0) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L48fe82.  return v3 @kind object;
  #L48fe84.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48fe86.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48fe8c.  v4:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L48fe90.  call `accept`(v4, v3) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L48fe96.  call temp:= `throwIfThrowable`(v3) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.throwIfThrowable:(Ljava/lang/Throwable;)Ljava/lang/Exception;` @kind static;
  #L48fe9c.  v0:= temp @kind object;
  #L48fe9e.  throw v0;
  #L48fea0.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48fea2.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48fea8.  v5:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L48feac.  v1:= new `java.lang.Throwable`[v1];
  #L48feb0.  v1[v0]:= v3 @kind object;
  #L48feb4.  v1[v2]:= v4 @kind object;
  #L48feb8.  call `<init>`(v5, v1) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L48febe.  throw v5;
  catch `java.lang.Throwable` @[L48fdf6..L48fe02] goto L48fe84;
  catch `java.lang.Throwable` @[L48fe06..L48fe10] goto L48fe1c;
  catch `java.lang.Throwable` @[L48fe1e..L48fe24] goto L48fe58;
  catch `java.lang.Throwable` @[L48fe24..L48fe2e] goto L48fe38;
  catch `java.lang.Throwable` @[L48fe2e..L48fe58] goto L48fe58;
  catch `java.lang.Throwable` @[L48fe8c..L48fe96] goto L48fea0;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoOnEach$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L48fdd4.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L48fdda.  v1:= temp;
  #L48fddc.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoOnEach$a;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48fd88.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L48fd8c.  v1:= 0I;
  #L48fd8e.  if v0 == 0 then goto L48fd94;
  #L48fd92.  return v1;
  #L48fd94.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.a` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L48fd98.  call `accept`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L48fd9e.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L48fda2.  call temp:= `tryOnNext`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L48fda8.  v3:= temp;
  #L48fdaa.  return v3;
  #L48fdac.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48fdae.  call `fail`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L48fdb4.  return v1;
  catch `java.lang.Throwable` @[L48fd94..L48fd9e] goto L48fdac;
}
