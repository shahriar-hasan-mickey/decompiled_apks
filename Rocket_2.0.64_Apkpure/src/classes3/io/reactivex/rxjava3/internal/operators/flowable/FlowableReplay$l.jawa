record `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$l` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` @kind class {
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$l.e` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$l.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$l` v0 @kind this, `int` v1 , `boolean` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$l;.<init>:(IZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49eacc.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.<init>:(Z)V` @kind direct;
  #L49ead2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$l.e` @type ^`int` := v1;
  #L49ead6.  return @kind void;
}
procedure `void` `k`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$l` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$l;.k:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L49eae8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.c` @type ^`int`;
  #L49eaec.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$l.e` @type ^`int`;
  #L49eaf0.  if v0 <= v1 then goto L49eafa;
  #L49eaf4.  call `h`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.h:()V` @kind virtual;
  #L49eafa.  return @kind void;
}
