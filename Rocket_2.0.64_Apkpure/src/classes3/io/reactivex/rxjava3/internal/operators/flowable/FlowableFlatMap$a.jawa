record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.e` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.f` @AccessFlag VOLATILE;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.g` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.h` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a` v0 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v1 @kind object, `int` v2 , `long` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;IJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L490fb8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L490fbe.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.a` @type ^`long` := v3 @kind wide;
  #L490fc2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` := v1 @kind object;
  #L490fc6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.d` @type ^`int` := v2;
  #L490fca.  v1:= v2 ^> 2;
  #L490fce.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.c` @type ^`int` := v1;
  #L490fd2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.a:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4910ec.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.h` @type ^`int`;
  #L4910f0.  v1:= 1I;
  #L4910f2.  if v0 == v1 then goto L49112a;
  #L4910f6.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.g` @type ^`long` @kind wide;
  #L4910fa.  v0:= v0 + v4 @kind long;
  #L4910fc.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.c` @type ^`int`;
  #L491100.  v4:= (`long`) v4 @kind i2l;
  #L491102.  v2:= lcmp(v0, v4);
  #L491106.  if v2 < 0 then goto L491126;
  #L49110a.  v4:= 0L;
  #L49110e.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.g` @type ^`long` := v4 @kind wide;
  #L491112.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L491118.  v4:= temp @kind object;
  #L49111a.  v4:= (`org.reactivestreams.Subscription`) v4 @kind object;
  #L49111e.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L491124.  goto L49112a;
  #L491126.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.g` @type ^`long` := v0 @kind wide;
  #L49112a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L490fe4.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L490fea.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L490f90.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L490f96.  v0:= temp @kind object;
  #L490f98.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L490f9c.  if v0 != v1 then goto L490fa4;
  #L490fa0.  v0:= 1I;
  #L490fa2.  goto L490fa6;
  #L490fa4.  v0:= 0I;
  #L490fa6.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L490ffc.  v0:= 1I;
  #L490ffe.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.e` @type ^`boolean` := v0 @kind boolean;
  #L491002.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` @kind object;
  #L491006.  call `e`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @kind virtual;
  #L49100c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L491020.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L491024.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L49102a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` @kind object;
  #L49102e.  call `h`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.h:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;Ljava/lang/Throwable;)V` @kind virtual;
  #L491034.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L491048.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.h` @type ^`int`;
  #L49104c.  v1:= 2I;
  #L49104e.  if v0 == v1 then goto L49105e;
  #L491052.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` @kind object;
  #L491056.  call `j`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.j:(Ljava/lang/Object;Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;)V` @kind virtual;
  #L49105c.  goto L491068;
  #L49105e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` @kind object;
  #L491062.  call `e`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @kind virtual;
  #L491068.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49107c.  call temp:= `setOnce`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L491082.  v0:= temp;
  #L491084.  if v0 == 0 then goto L4910d8;
  #L491088.  v0:= instanceof @variable v4 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind boolean;
  #L49108c.  if v0 == 0 then goto L4910cc;
  #L491090.  v0:= v4 @kind object;
  #L491092.  v0:= (`io.reactivex.rxjava3.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L491096.  v1:= 7I;
  #L491098.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L49109e.  v1:= temp;
  #L4910a0.  v2:= 1I;
  #L4910a2.  if v1 != v2 then goto L4910be;
  #L4910a6.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.h` @type ^`int` := v1;
  #L4910aa.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4910ae.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.e` @type ^`boolean` := v2 @kind boolean;
  #L4910b2.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` @kind object;
  #L4910b6.  call `e`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @kind virtual;
  #L4910bc.  return @kind void;
  #L4910be.  v2:= 2I;
  #L4910c0.  if v1 != v2 then goto L4910cc;
  #L4910c4.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.h` @type ^`int` := v1;
  #L4910c8.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4910cc.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.d` @type ^`int`;
  #L4910d0.  v0:= (`long`) v0 @kind i2l;
  #L4910d2.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4910d8.  return @kind void;
}
