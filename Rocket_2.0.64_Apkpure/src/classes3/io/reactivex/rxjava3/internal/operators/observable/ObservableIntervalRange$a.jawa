record `io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `long` v2 , `long` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableIntervalRange$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;JJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c1c40.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c1c46.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4c1c4a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a.c` @type ^`long` := v2 @kind wide;
  #L4c1c4e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a.b` @type ^`long` := v4 @kind wide;
  #L4c1c52.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableIntervalRange$a;.a:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4c1ce4.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4c1cea.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableIntervalRange$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4c1c64.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c1c6a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableIntervalRange$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c1c18.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c1c1e.  v0:= temp @kind object;
  #L4c1c20.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4c1c24.  if v0 != v1 then goto L4c1c2c;
  #L4c1c28.  v0:= 1I;
  #L4c1c2a.  goto L4c1c2e;
  #L4c1c2c.  v0:= 0I;
  #L4c1c2e.  return v0;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableIntervalRange$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c1c7c.  call temp:= `isDisposed`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableIntervalRange$a;.isDisposed:()Z` @kind virtual;
  #L4c1c82.  v0:= temp;
  #L4c1c84.  if v0 != 0 then goto L4c1cd2;
  #L4c1c88.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a.c` @type ^`long` @kind wide;
  #L4c1c8c.  v2:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c1c90.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4c1c96.  v3:= temp @kind object;
  #L4c1c98.  call `onNext`(v2, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c1c9e.  v2:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a.b` @type ^`long` @kind wide;
  #L4c1ca2.  v4:= lcmp(v0, v2);
  #L4c1ca6.  if v4 != 0 then goto L4c1cc8;
  #L4c1caa.  call temp:= `isDisposed`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableIntervalRange$a;.isDisposed:()Z` @kind virtual;
  #L4c1cb0.  v0:= temp;
  #L4c1cb2.  if v0 != 0 then goto L4c1cc0;
  #L4c1cb6.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c1cba.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4c1cc0.  call temp:= `dispose`(v5) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c1cc6.  return @kind void;
  #L4c1cc8.  v2:= 1L;
  #L4c1ccc.  v0:= v0 + v2 @kind long;
  #L4c1cce.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a.c` @type ^`long` := v0 @kind wide;
  #L4c1cd2.  return @kind void;
}
