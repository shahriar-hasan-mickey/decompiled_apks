record `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` @kind class @AccessFlag ABSTRACT extends `io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.e` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @AccessFlag ;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.j` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.k` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.l` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.m` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` v0 @kind this, `io.reactivex.rxjava3.core.Scheduler$Worker` v1 @kind object, `boolean` v2 , `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.<init>:(Lio/reactivex/rxjava3/core/Scheduler$Worker;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4995b0.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L4995b6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v1 @kind object;
  #L4995ba.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.b` @type ^`boolean` := v2 @kind boolean;
  #L4995be.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.c` @type ^`int` := v3;
  #L4995c2.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4995c6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4995cc.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4995d0.  v1:= v3 ^> 2;
  #L4995d4.  v3:= v3 - v1 @kind int;
  #L4995d6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.d` @type ^`int` := v3;
  #L4995da.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4995ec.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L4995f0.  if v0 == 0 then goto L4995f6;
  #L4995f4.  return @kind void;
  #L4995f6.  v0:= 1I;
  #L4995f8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4995fc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L499600.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L499606.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L49960a.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L499610.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.m` @type ^`boolean` @kind boolean;
  #L499614.  if v0 != 0 then goto L49962e;
  #L499618.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L49961e.  v0:= temp;
  #L499620.  if v0 != 0 then goto L49962e;
  #L499624.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L499628.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L49962e.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L499640.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L499644.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L49964a.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` v2 @kind this, `boolean` v3 , `boolean` v4 , `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L4994d0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L4994d4.  v1:= 1I;
  #L4994d6.  if v0 == 0 then goto L4994e2;
  #L4994da.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.clear:()V` @kind virtual;
  #L4994e0.  return v1;
  #L4994e2.  if v3 == 0 then goto L499556;
  #L4994e6.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.b` @type ^`boolean` @kind boolean;
  #L4994ea.  if v3 == 0 then goto L499518;
  #L4994ee.  if v4 == 0 then goto L499556;
  #L4994f2.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v1 @kind boolean;
  #L4994f6.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.j` @type ^`java.lang.Throwable` @kind object;
  #L4994fa.  if v3 == 0 then goto L499506;
  #L4994fe.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L499504.  goto L49950c;
  #L499506.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49950c.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L499510.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L499516.  return v1;
  #L499518.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.j` @type ^`java.lang.Throwable` @kind object;
  #L49951c.  if v3 == 0 then goto L49953c;
  #L499520.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v1 @kind boolean;
  #L499524.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.clear:()V` @kind virtual;
  #L49952a.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L499530.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L499534.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L49953a.  return v1;
  #L49953c.  if v4 == 0 then goto L499556;
  #L499540.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v1 @kind boolean;
  #L499544.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49954a.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L49954e.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L499554.  return v1;
  #L499556.  v3:= 0I;
  #L499558.  return v3;
}
procedure `void` `f`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.f:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `g`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.g:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `h`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.h:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `i`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.i:()V` @AccessFlag FINAL {
    temp;
    v0;

  #L49978c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L499792.  v0:= temp;
  #L499794.  if v0 == 0 then goto L49979a;
  #L499798.  return @kind void;
  #L49979a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L49979e.  call temp:= `schedule`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4997a4.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49956c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L499570.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L499576.  v0:= temp;
  #L499578.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.onComplete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49965c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L499660.  if v0 != 0 then goto L499670;
  #L499664.  v0:= 1I;
  #L499666.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` := v0 @kind boolean;
  #L49966a.  call `i`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.i:()V` @kind virtual;
  #L499670.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L499684.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L499688.  if v0 == 0 then goto L499694;
  #L49968c.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L499692.  return @kind void;
  #L499694.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.j` @type ^`java.lang.Throwable` := v2 @kind object;
  #L499698.  v2:= 1I;
  #L49969a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` := v2 @kind boolean;
  #L49969e.  call `i`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.i:()V` @kind virtual;
  #L4996a4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4996b8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L4996bc.  if v0 == 0 then goto L4996c2;
  #L4996c0.  return @kind void;
  #L4996c2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int`;
  #L4996c6.  v1:= 2I;
  #L4996c8.  if v0 != v1 then goto L4996d4;
  #L4996cc.  call `i`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.i:()V` @kind virtual;
  #L4996d2.  return @kind void;
  #L4996d4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4996d8.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4996de.  v3:= temp;
  #L4996e0.  if v3 != 0 then goto L499706;
  #L4996e4.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4996e8.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4996ee.  v3:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4996f2.  v0:= "Queue is full?!" @kind object;
  #L4996f6.  call `<init>`(v3, v0) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4996fc.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.j` @type ^`java.lang.Throwable` := v3 @kind object;
  #L499700.  v3:= 1I;
  #L499702.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` := v3 @kind boolean;
  #L499706.  call `i`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.i:()V` @kind virtual;
  #L49970c.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L499720.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L499726.  v0:= temp;
  #L499728.  if v0 == 0 then goto L49973c;
  #L49972c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L499730.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L499736.  call `i`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.i:()V` @kind virtual;
  #L49973c.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49958c.  v0:= 2I;
  #L49958e.  v2:= v2 ^& v0 @kind int;
  #L499590.  if v2 == 0 then goto L49959c;
  #L499594.  v2:= 1I;
  #L499596.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.m` @type ^`boolean` := v2 @kind boolean;
  #L49959a.  return v0;
  #L49959c.  v2:= 0I;
  #L49959e.  return v2;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.run:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L499750.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.m` @type ^`boolean` @kind boolean;
  #L499754.  if v0 == 0 then goto L499760;
  #L499758.  call `g`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.g:()V` @kind virtual;
  #L49975e.  goto L499778;
  #L499760.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int`;
  #L499764.  v1:= 1I;
  #L499766.  if v0 != v1 then goto L499772;
  #L49976a.  call `h`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.h:()V` @kind virtual;
  #L499770.  goto L499778;
  #L499772.  call `f`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.f:()V` @kind virtual;
  #L499778.  return @kind void;
}
