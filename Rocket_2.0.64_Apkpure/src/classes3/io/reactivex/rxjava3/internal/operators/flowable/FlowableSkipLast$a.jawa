record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a` @kind class @AccessFlag FINAL extends `java.util.ArrayDeque` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipLast$a;.<init>:(Lorg/reactivestreams/Subscriber;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a1478.  call `<init>`(v0, v2) @signature `Ljava/util/ArrayDeque;.<init>:(I)V` @kind direct;
  #L4a147e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4a1482.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.b` @type ^`int` := v2;
  #L4a1486.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipLast$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a1498.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a149c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a14a2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipLast$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a14b4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a14b8.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a14be.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipLast$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a14d0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a14d4.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a14da.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipLast$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a14ec.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.b` @type ^`int`;
  #L4a14f0.  call temp:= `size`(v3) @signature `Ljava/util/ArrayDeque;.size:()I` @kind virtual;
  #L4a14f6.  v1:= temp;
  #L4a14f8.  if v0 != v1 then goto L4a1510;
  #L4a14fc.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a1500.  call temp:= `poll`(v3) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4a1506.  v1:= temp @kind object;
  #L4a1508.  call `onNext`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a150e.  goto L4a151e;
  #L4a1510.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a1514.  v1:= 1L;
  #L4a1518.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a151e.  call temp:= `offer`(v3, v4) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4a1524.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipLast$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a1538.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a153c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4a1542.  v0:= temp;
  #L4a1544.  if v0 == 0 then goto L4a1556;
  #L4a1548.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4a154c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a1550.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4a1556.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipLast$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a1568.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a156c.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a1572.  return @kind void;
}
