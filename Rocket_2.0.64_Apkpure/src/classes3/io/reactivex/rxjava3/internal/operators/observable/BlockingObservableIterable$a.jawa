record `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `java.util.Iterator` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.a` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.b` @AccessFlag FINAL;
  `java.util.concurrent.locks.Condition` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.d` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.e` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4b5418.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b541e.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4b5422.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4b5428.  v1.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v0 @kind object;
  #L4b542c.  v2:= new `java.util.concurrent.locks.ReentrantLock`;
  #L4b5430.  call `<init>`(v2) @signature `Ljava/util/concurrent/locks/ReentrantLock;.<init>:()V` @kind direct;
  #L4b5436.  v1.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.b` @type ^`java.util.concurrent.locks.Lock` := v2 @kind object;
  #L4b543a.  call temp:= `newCondition`(v2) @signature `Ljava/util/concurrent/locks/Lock;.newCondition:()Ljava/util/concurrent/locks/Condition;` @kind interface;
  #L4b5440.  v2:= temp @kind object;
  #L4b5442.  v1.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.c` @type ^`java.util.concurrent.locks.Condition` := v2 @kind object;
  #L4b5446.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4b5518.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.b` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4b551c.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L4b5522.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.c` @type ^`java.util.concurrent.locks.Condition` @kind object;
  #L4b5526.  call `signalAll`(v0) @signature `Ljava/util/concurrent/locks/Condition;.signalAll:()V` @kind interface;
  #L4b552c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.b` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4b5530.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L4b5536.  return @kind void;
  #L4b5538.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b553a.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.b` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4b553e.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L4b5544.  throw v0;
  catch `java.lang.Throwable` @[L4b5522..L4b552c] goto L4b5538;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4b5458.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b545e.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.a:()V` @kind virtual;
  #L4b5464.  return @kind void;
}
procedure `boolean` `hasNext`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b52c0.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.isDisposed:()Z` @kind virtual;
  #L4b52c6.  v0:= temp;
  #L4b52c8.  v1:= 0I;
  #L4b52ca.  if v0 == 0 then goto L4b52e2;
  #L4b52ce.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.e` @type ^`java.lang.Throwable` @kind object;
  #L4b52d2.  if v0 != 0 then goto L4b52d8;
  #L4b52d6.  return v1;
  #L4b52d8.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4b52de.  v0:= temp @kind object;
  #L4b52e0.  throw v0;
  #L4b52e2.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.d` @type ^`boolean` @kind boolean;
  #L4b52e6.  v2:= v3.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4b52ea.  call temp:= `isEmpty`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4b52f0.  v2:= temp;
  #L4b52f2.  if v0 == 0 then goto L4b530e;
  #L4b52f6.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.e` @type ^`java.lang.Throwable` @kind object;
  #L4b52fa.  if v0 != 0 then goto L4b5304;
  #L4b52fe.  if v2 == 0 then goto L4b530e;
  #L4b5302.  return v1;
  #L4b5304.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4b530a.  v0:= temp @kind object;
  #L4b530c.  throw v0;
  #L4b530e.  if v2 == 0 then goto L4b5384;
  #L4b5312.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L4b5318.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.b` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4b531c.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L4b5322.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.d` @type ^`boolean` @kind boolean;
  #L4b5326.  if v0 != 0 then goto L4b5352;
  #L4b532a.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4b532e.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4b5334.  v0:= temp;
  #L4b5336.  if v0 == 0 then goto L4b5352;
  #L4b533a.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.isDisposed:()Z` @kind virtual;
  #L4b5340.  v0:= temp;
  #L4b5342.  if v0 != 0 then goto L4b5352;
  #L4b5346.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.c` @type ^`java.util.concurrent.locks.Condition` @kind object;
  #L4b534a.  call `await`(v0) @signature `Ljava/util/concurrent/locks/Condition;.await:()V` @kind interface;
  #L4b5350.  goto L4b5322;
  #L4b5352.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.b` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4b5356.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L4b535c.  goto L4b52c0;
  #L4b535e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b5360.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.b` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4b5364.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L4b536a.  throw v0;
  #L4b536c.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L4b536e.  call temp:= `dispose`(v3) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b5374.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.a:()V` @kind virtual;
  #L4b537a.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4b5380.  v0:= temp @kind object;
  #L4b5382.  throw v0;
  #L4b5384.  v0:= 1I;
  #L4b5386.  return v0;
  catch `java.lang.InterruptedException` @[L4b5312..L4b5322] goto L4b536c;
  catch `java.lang.Throwable` @[L4b5322..L4b5350] goto L4b535e;
  catch `java.lang.InterruptedException` @[L4b5352..L4b536c] goto L4b536c;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b53b8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b53be.  v0:= temp @kind object;
  #L4b53c0.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4b53c4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b53ca.  v0:= temp;
  #L4b53cc.  return v0;
}
procedure `java.lang.Object` `next`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b53e0.  call temp:= `hasNext`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.hasNext:()Z` @kind virtual;
  #L4b53e6.  v0:= temp;
  #L4b53e8.  if v0 == 0 then goto L4b53fa;
  #L4b53ec.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4b53f0.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4b53f6.  v0:= temp @kind object;
  #L4b53f8.  return v0 @kind object;
  #L4b53fa.  v0:= new `java.util.NoSuchElementException`;
  #L4b53fe.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L4b5404.  throw v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b5478.  v0:= 1I;
  #L4b547a.  v1.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4b547e.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.a:()V` @kind virtual;
  #L4b5484.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4b5498.  v0.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.e` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4b549c.  v1:= 1I;
  #L4b549e.  v0.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.d` @type ^`boolean` := v1 @kind boolean;
  #L4b54a2.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.a:()V` @kind virtual;
  #L4b54a8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b54bc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4b54c0.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4b54c6.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.a:()V` @kind virtual;
  #L4b54cc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4b54e0.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b54e6.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b54f8.  v0:= new `java.lang.UnsupportedOperationException`;
  #L4b54fc.  v1:= "remove" @kind object;
  #L4b5500.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b5506.  throw v0;
}
