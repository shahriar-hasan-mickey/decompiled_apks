record `io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber` @kind class {
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$a.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$a` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMap$a;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4981c4.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;)V` @kind direct;
  #L4981ca.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$a.a` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4981ce.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMap$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4981e0.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L4981e4.  if v0 == 0 then goto L4981ea;
  #L4981e8.  return @kind void;
  #L4981ea.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L4981ee.  if v0 == 0 then goto L498200;
  #L4981f2.  v2:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4981f6.  v0:= 0I;
  #L4981f8.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4981fe.  return @kind void;
  #L498200.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$a.a` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L498204.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L49820a.  v2:= temp @kind object;
  #L49820c.  v0:= "The mapper function returned a null value." @kind object;
  #L498210.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L498216.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L49821a.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L498220.  return @kind void;
  #L498222.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L498224.  call `fail`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49822a.  return @kind void;
  catch `java.lang.Throwable` @[L498200..L498216] goto L498222;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMap$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L498188.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.qs` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind object;
  #L49818c.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L498192.  v0:= temp @kind object;
  #L498194.  if v0 == 0 then goto L4981b0;
  #L498198.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$a.a` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L49819c.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4981a2.  v0:= temp @kind object;
  #L4981a4.  v1:= "The mapper function returned a null value." @kind object;
  #L4981a8.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4981ae.  goto L4981b2;
  #L4981b0.  v0:= 0I;
  #L4981b2.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMap$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L49816c.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L498172.  v1:= temp;
  #L498174.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMap$a;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L498100.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L498104.  v1:= 1I;
  #L498106.  if v0 == 0 then goto L49810c;
  #L49810a.  return v1;
  #L49810c.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L498110.  if v0 == 0 then goto L498122;
  #L498114.  v3:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L498118.  v0:= 0I;
  #L49811a.  call temp:= `tryOnNext`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L498120.  return v1;
  #L498122.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$a.a` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L498126.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L49812c.  v3:= temp @kind object;
  #L49812e.  v0:= "The mapper function returned a null value." @kind object;
  #L498132.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L498138.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L49813c.  call temp:= `tryOnNext`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L498142.  v3:= temp;
  #L498144.  return v3;
  #L498146.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L498148.  call `fail`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49814e.  return v1;
  catch `java.lang.Throwable` @[L498122..L498138] goto L498146;
}
