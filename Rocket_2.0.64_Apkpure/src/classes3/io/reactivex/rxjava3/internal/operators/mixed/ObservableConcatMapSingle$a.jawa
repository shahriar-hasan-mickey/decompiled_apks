record `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a$a` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.ErrorMode` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.i` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.j` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.k` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 , `io.reactivex.rxjava3.internal.util.ErrorMode` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;ILio/reactivex/rxjava3/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b3fcc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4b3fd2.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4b3fd6.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4b3fda.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.f` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` := v4 @kind object;
  #L4b3fde.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4b3fe2.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4b3fe8.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4b3fec.  v1:= new `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a$a`;
  #L4b3ff0.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;)V` @kind direct;
  #L4b3ff6.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a$a` := v1 @kind object;
  #L4b3ffa.  v1:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4b3ffe.  call `<init>`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4b4004.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L4b4008.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a` v10 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4b4070.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4b4076.  v0:= temp;
  #L4b4078.  if v0 == 0 then goto L4b407e;
  #L4b407c.  return @kind void;
  #L4b407e.  v0:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b4082.  v1:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.f` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b4086.  v2:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4b408a.  v3:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b408e.  v4:= 1I;
  #L4b4090.  v5:= 1I;
  #L4b4092.  v6:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.i` @type ^`boolean` @kind boolean;
  #L4b4096.  v7:= 0I;
  #L4b4098.  if v6 == 0 then goto L4b40a8;
  #L4b409c.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b40a2.  v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.j` @type ^`java.lang.Object` := v7 @kind object;
  #L4b40a6.  goto L4b4176;
  #L4b40a8.  v6:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.k` @type ^`int`;
  #L4b40ac.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b40b2.  v8:= temp @kind object;
  #L4b40b4.  if v8 == 0 then goto L4b40de;
  #L4b40b8.  v8:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b40bc.  if v1 == v8 then goto L4b40cc;
  #L4b40c0.  v8:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b40c4.  if v1 != v8 then goto L4b40de;
  #L4b40c8.  if v6 != 0 then goto L4b40de;
  #L4b40cc.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b40d2.  v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.j` @type ^`java.lang.Object` := v7 @kind object;
  #L4b40d6.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4b40dc.  return @kind void;
  #L4b40de.  v8:= 0I;
  #L4b40e0.  if v6 != 0 then goto L4b415c;
  #L4b40e4.  v6:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.h` @type ^`boolean` @kind boolean;
  #L4b40e8.  call temp:= `poll`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4b40ee.  v7:= temp @kind object;
  #L4b40f0.  if v7 != 0 then goto L4b40f6;
  #L4b40f4.  v8:= 1I;
  #L4b40f6.  if v6 == 0 then goto L4b4106;
  #L4b40fa.  if v8 == 0 then goto L4b4106;
  #L4b40fe.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4b4104.  return @kind void;
  #L4b4106.  if v8 == 0 then goto L4b410c;
  #L4b410a.  goto L4b4176;
  #L4b410c.  v6:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4b4110.  call temp:= `apply`(v6, v7) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b4116.  v6:= temp @kind object;
  #L4b4118.  v7:= "The mapper returned a null SingleSource" @kind object;
  #L4b411c.  call temp:= `requireNonNull`(v6, v7) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b4122.  v6:= (`io.reactivex.rxjava3.core.SingleSource`) v6 @kind object;
  #L4b4126.  v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.k` @type ^`int` := v4;
  #L4b412a.  v7:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a$a` @kind object;
  #L4b412e.  call `subscribe`(v6, v7) @signature `Lio/reactivex/rxjava3/core/SingleSource;.subscribe:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind interface;
  #L4b4134.  goto L4b4176;
  #L4b4136.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b4138.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b413e.  v4:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b4142.  call `dispose`(v4) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b4148.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b414e.  call temp:= `tryAddThrowableOrReport`(v3, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b4154.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4b415a.  return @kind void;
  #L4b415c.  v9:= 2I;
  #L4b415e.  if v6 != v9 then goto L4b4176;
  #L4b4162.  v6:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.j` @type ^`java.lang.Object` @kind object;
  #L4b4166.  v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.j` @type ^`java.lang.Object` := v7 @kind object;
  #L4b416a.  call `onNext`(v0, v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b4170.  v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.k` @type ^`int` := v8;
  #L4b4174.  goto L4b4092;
  #L4b4176.  v5:= -v5 @kind int;
  #L4b4178.  call temp:= `addAndGet`(v10, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4b417e.  v5:= temp;
  #L4b4180.  if v5 != 0 then goto L4b4092;
  #L4b4184.  return @kind void;
  catch `java.lang.Throwable` @[L4b410c..L4b4126] goto L4b4136;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4b41a4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b41a8.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b41ae.  v2:= temp;
  #L4b41b0.  if v2 == 0 then goto L4b41d6;
  #L4b41b4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.f` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b41b8.  v0:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.END` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b41bc.  if v2 == v0 then goto L4b41ca;
  #L4b41c0.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b41c4.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b41ca.  v2:= 0I;
  #L4b41cc.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.k` @type ^`int` := v2;
  #L4b41d0.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.a:()V` @kind virtual;
  #L4b41d6.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.c:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;

  #L4b41e8.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.j` @type ^`java.lang.Object` := v1 @kind object;
  #L4b41ec.  v1:= 2I;
  #L4b41ee.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.k` @type ^`int` := v1;
  #L4b41f2.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.a:()V` @kind virtual;
  #L4b41f8.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b401c.  v0:= 1I;
  #L4b401e.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4b4022.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b4026.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b402c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a$a` @kind object;
  #L4b4030.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a$a;.a:()V` @kind virtual;
  #L4b4036.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b403a.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4b4040.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4b4046.  v0:= temp;
  #L4b4048.  if v0 != 0 then goto L4b405c;
  #L4b404c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4b4050.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b4056.  v0:= 0I;
  #L4b4058.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.j` @type ^`java.lang.Object` := v0 @kind object;
  #L4b405c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b3fb4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.i` @type ^`boolean` @kind boolean;
  #L4b3fb8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b420c.  v0:= 1I;
  #L4b420e.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4b4212.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.a:()V` @kind virtual;
  #L4b4218.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b422c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b4230.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b4236.  v2:= temp;
  #L4b4238.  if v2 == 0 then goto L4b425e;
  #L4b423c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.f` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b4240.  v0:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b4244.  if v2 != v0 then goto L4b4252;
  #L4b4248.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a$a` @kind object;
  #L4b424c.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a$a;.a:()V` @kind virtual;
  #L4b4252.  v2:= 1I;
  #L4b4254.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.h` @type ^`boolean` := v2 @kind boolean;
  #L4b4258.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.a:()V` @kind virtual;
  #L4b425e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b4270.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4b4274.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4b427a.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.a:()V` @kind virtual;
  #L4b4280.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b4294.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b4298.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b429e.  v0:= temp;
  #L4b42a0.  if v0 == 0 then goto L4b42b2;
  #L4b42a4.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4b42a8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b42ac.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4b42b2.  return @kind void;
}
