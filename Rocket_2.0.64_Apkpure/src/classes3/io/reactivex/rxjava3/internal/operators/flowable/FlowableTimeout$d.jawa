record `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$c` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.e` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$d;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a43a0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a43a6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4a43aa.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4a43ae.  v1:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4a43b2.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4a43b8.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.c` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L4a43bc.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4a43c0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4a43c6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4a43ca.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4a43ce.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a43d4.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4a43d8.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d` v2 @kind this, `long` v3 , `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$d;.a:(JLjava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a45e0.  v0:= 9223372036854775807L;
  #L4a45ea.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4a45f0.  v3:= temp;
  #L4a45f2.  if v3 == 0 then goto L4a460c;
  #L4a45f6.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a45fa.  call temp:= `cancel`(v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4a4600.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a4604.  call `onError`(v3, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a460a.  goto L4a4612;
  #L4a460c.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4a4612.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$d;.b:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a4598.  v0:= 9223372036854775807L;
  #L4a45a2.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4a45a8.  v3:= temp;
  #L4a45aa.  if v3 == 0 then goto L4a45cc;
  #L4a45ae.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a45b2.  call temp:= `cancel`(v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4a45b8.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a45bc.  v4:= new `java.util.concurrent.TimeoutException`;
  #L4a45c0.  call `<init>`(v4) @signature `Ljava/util/concurrent/TimeoutException;.<init>:()V` @kind direct;
  #L4a45c6.  call `onError`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a45cc.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d` v3 @kind this, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$d;.c:(Lorg/reactivestreams/Publisher;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4a4644.  if v4 == 0 then goto L4a466c;
  #L4a4648.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a`;
  #L4a464c.  v1:= 0L;
  #L4a4650.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$a;.<init>:(JLio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$c;)V` @kind direct;
  #L4a4656.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.c` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4a465a.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4a4660.  v1:= temp;
  #L4a4662.  if v1 == 0 then goto L4a466c;
  #L4a4666.  call `subscribe`(v4, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4a466c.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$d;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a43ec.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a43f0.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4a43f6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.c` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4a43fa.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4a4400.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$d;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a4414.  v0:= 9223372036854775807L;
  #L4a441e.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4a4424.  v2:= temp @kind wide;
  #L4a4426.  v4:= lcmp(v2, v0);
  #L4a442a.  if v4 == 0 then goto L4a4442;
  #L4a442e.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.c` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4a4432.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4a4438.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a443c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a4442.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$d;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a4454.  v0:= 9223372036854775807L;
  #L4a445e.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4a4464.  v2:= temp @kind wide;
  #L4a4466.  v4:= lcmp(v2, v0);
  #L4a446a.  if v4 == 0 then goto L4a4484;
  #L4a446e.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.c` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4a4472.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4a4478.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a447c.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a4482.  goto L4a448a;
  #L4a4484.  call `onError`(v6) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4a448a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$d;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4a449c.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a44a2.  v0:= temp @kind wide;
  #L4a44a4.  v2:= 9223372036854775807L;
  #L4a44ae.  v4:= lcmp(v0, v2);
  #L4a44b2.  if v4 == 0 then goto L4a4558;
  #L4a44b6.  v4:= 1L;
  #L4a44ba.  v4:= v4 + v0 @kind long;
  #L4a44bc.  call temp:= `compareAndSet`(v6, v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4a44c2.  v0:= temp;
  #L4a44c4.  if v0 != 0 then goto L4a44ca;
  #L4a44c8.  goto L4a4558;
  #L4a44ca.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.c` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4a44ce.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a44d4.  v0:= temp @kind object;
  #L4a44d6.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4a44da.  if v0 == 0 then goto L4a44e4;
  #L4a44de.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4a44e4.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a44e8.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a44ee.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4a44f2.  call temp:= `apply`(v0, v7) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4a44f8.  v7:= temp @kind object;
  #L4a44fa.  v0:= "The itemTimeoutIndicator returned a null Publisher." @kind object;
  #L4a44fe.  call temp:= `requireNonNull`(v7, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4a4504.  v7:= (`org.reactivestreams.Publisher`) v7 @kind object;
  #L4a4508.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a`;
  #L4a450c.  call `<init>`(v0, v4, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$a;.<init>:(JLio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$c;)V` @kind direct;
  #L4a4512.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.c` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4a4516.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4a451c.  v1:= temp;
  #L4a451e.  if v1 == 0 then goto L4a4528;
  #L4a4522.  call `subscribe`(v7, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4a4528.  return @kind void;
  #L4a452a.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a452c.  call `throwIfFatal`(v7) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4a4532.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a4536.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a453c.  v0:= temp @kind object;
  #L4a453e.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4a4542.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a4548.  call temp:= `getAndSet`(v6, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4a454e.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a4552.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a4558.  return @kind void;
  catch `java.lang.Throwable` @[L4a44ee..L4a4508] goto L4a452a;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$d;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a4578.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a457c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a4580.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4a4586.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$d;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a4624.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a4628.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a462c.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L4a4632.  return @kind void;
}
