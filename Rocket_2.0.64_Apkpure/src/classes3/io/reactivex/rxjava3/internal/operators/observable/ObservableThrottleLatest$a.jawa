record `io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.h` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.i` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.k` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.l` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableThrottleLatest$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler$Worker;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cab84.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4cab8a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4cab8e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.b` @type ^`long` := v2 @kind wide;
  #L4cab92.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L4cab96.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v5 @kind object;
  #L4cab9a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.e` @type ^`boolean` := v6 @kind boolean;
  #L4cab9e.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4caba2.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4caba8.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4cabac.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a` v8 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableThrottleLatest$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4cac04.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4cac0a.  v0:= temp;
  #L4cac0c.  if v0 == 0 then goto L4cac12;
  #L4cac10.  return @kind void;
  #L4cac12.  v0:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cac16.  v1:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4cac1a.  v2:= 1I;
  #L4cac1c.  v3:= 1I;
  #L4cac1e.  v4:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.j` @type ^`boolean` @kind boolean;
  #L4cac22.  v5:= 0I;
  #L4cac24.  if v4 == 0 then goto L4cac30;
  #L4cac28.  call `lazySet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4cac2e.  return @kind void;
  #L4cac30.  v4:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.h` @type ^`boolean` @kind boolean;
  #L4cac34.  if v4 == 0 then goto L4cac5c;
  #L4cac38.  v6:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.i` @type ^`java.lang.Throwable` @kind object;
  #L4cac3c.  if v6 == 0 then goto L4cac5c;
  #L4cac40.  call `lazySet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4cac46.  v0:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.i` @type ^`java.lang.Throwable` @kind object;
  #L4cac4a.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cac50.  v0:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4cac54.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4cac5a.  return @kind void;
  #L4cac5c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cac62.  v6:= temp @kind object;
  #L4cac64.  v7:= 0I;
  #L4cac66.  if v6 != 0 then goto L4cac6e;
  #L4cac6a.  v6:= 1I;
  #L4cac6c.  goto L4cac70;
  #L4cac6e.  v6:= 0I;
  #L4cac70.  if v4 == 0 then goto L4caca0;
  #L4cac74.  call temp:= `getAndSet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4cac7a.  v0:= temp @kind object;
  #L4cac7c.  if v6 != 0 then goto L4cac8e;
  #L4cac80.  v2:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.e` @type ^`boolean` @kind boolean;
  #L4cac84.  if v2 == 0 then goto L4cac8e;
  #L4cac88.  call `onNext`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cac8e.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4cac94.  v0:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4cac98.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4cac9e.  return @kind void;
  #L4caca0.  if v6 == 0 then goto L4cacb6;
  #L4caca4.  v4:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.k` @type ^`boolean` @kind boolean;
  #L4caca8.  if v4 == 0 then goto L4cacc8;
  #L4cacac.  v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.l` @type ^`boolean` := v7 @kind boolean;
  #L4cacb0.  v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.k` @type ^`boolean` := v7 @kind boolean;
  #L4cacb4.  goto L4cacc8;
  #L4cacb6.  v4:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.l` @type ^`boolean` @kind boolean;
  #L4cacba.  if v4 == 0 then goto L4cacd8;
  #L4cacbe.  v4:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.k` @type ^`boolean` @kind boolean;
  #L4cacc2.  if v4 == 0 then goto L4cacc8;
  #L4cacc6.  goto L4cacd8;
  #L4cacc8.  v3:= -v3 @kind int;
  #L4cacca.  call temp:= `addAndGet`(v8, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4cacd0.  v3:= temp;
  #L4cacd2.  if v3 != 0 then goto L4cac1e;
  #L4cacd6.  return @kind void;
  #L4cacd8.  call temp:= `getAndSet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4cacde.  v4:= temp @kind object;
  #L4cace0.  call `onNext`(v1, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cace6.  v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.k` @type ^`boolean` := v7 @kind boolean;
  #L4cacea.  v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.l` @type ^`boolean` := v2 @kind boolean;
  #L4cacee.  v4:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4cacf2.  v5:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.b` @type ^`long` @kind wide;
  #L4cacf6.  v7:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4cacfa.  call temp:= `schedule`(v4, v8, v5, v7) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4cad00.  goto L4cac1e;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableThrottleLatest$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4cabc0.  v0:= 1I;
  #L4cabc2.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.j` @type ^`boolean` := v0 @kind boolean;
  #L4cabc6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4cabca.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4cabd0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4cabd4.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4cabda.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4cabe0.  v0:= temp;
  #L4cabe2.  if v0 != 0 then goto L4cabf2;
  #L4cabe6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cabea.  v1:= 0I;
  #L4cabec.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4cabf2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableThrottleLatest$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cab6c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.j` @type ^`boolean` @kind boolean;
  #L4cab70.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableThrottleLatest$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cad14.  v0:= 1I;
  #L4cad16.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4cad1a.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableThrottleLatest$a;.a:()V` @kind virtual;
  #L4cad20.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableThrottleLatest$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4cad34.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.i` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4cad38.  v1:= 1I;
  #L4cad3a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.h` @type ^`boolean` := v1 @kind boolean;
  #L4cad3e.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableThrottleLatest$a;.a:()V` @kind virtual;
  #L4cad44.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableThrottleLatest$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cad58.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cad5c.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4cad62.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableThrottleLatest$a;.a:()V` @kind virtual;
  #L4cad68.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableThrottleLatest$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cad7c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4cad80.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4cad86.  v0:= temp;
  #L4cad88.  if v0 == 0 then goto L4cad9a;
  #L4cad8c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4cad90.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4cad94.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4cad9a.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableThrottleLatest$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cadac.  v0:= 1I;
  #L4cadae.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.k` @type ^`boolean` := v0 @kind boolean;
  #L4cadb2.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableThrottleLatest$a;.a:()V` @kind virtual;
  #L4cadb8.  return @kind void;
}
