record `io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.a` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Iterator` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZipIterable$a;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a8cc4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a8cca.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4a8cce.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.b` @type ^`java.util.Iterator` := v2 @kind object;
  #L4a8cd2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v3 @kind object;
  #L4a8cd6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZipIterable$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4a8d04.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4a8d0a.  v0:= 1I;
  #L4a8d0c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4a8d10.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a8d14.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a8d1a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a8d1e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a8d24.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZipIterable$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a8ce8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a8cec.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a8cf2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZipIterable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a8d38.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.e` @type ^`boolean` @kind boolean;
  #L4a8d3c.  if v0 == 0 then goto L4a8d42;
  #L4a8d40.  return @kind void;
  #L4a8d42.  v0:= 1I;
  #L4a8d44.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4a8d48.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a8d4c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a8d52.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZipIterable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a8d64.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.e` @type ^`boolean` @kind boolean;
  #L4a8d68.  if v0 == 0 then goto L4a8d74;
  #L4a8d6c.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4a8d72.  return @kind void;
  #L4a8d74.  v0:= 1I;
  #L4a8d76.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4a8d7a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a8d7e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a8d84.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZipIterable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a8d98.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.e` @type ^`boolean` @kind boolean;
  #L4a8d9c.  if v0 == 0 then goto L4a8da2;
  #L4a8da0.  return @kind void;
  #L4a8da2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.b` @type ^`java.util.Iterator` @kind object;
  #L4a8da6.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4a8dac.  v0:= temp @kind object;
  #L4a8dae.  v1:= "The iterator returned a null value" @kind object;
  #L4a8db2.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4a8db8.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4a8dbc.  call temp:= `apply`(v1, v3, v0) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4a8dc2.  v3:= temp @kind object;
  #L4a8dc4.  v0:= "The zipper function returned a null value" @kind object;
  #L4a8dc8.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4a8dce.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a8dd2.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a8dd8.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.b` @type ^`java.util.Iterator` @kind object;
  #L4a8ddc.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4a8de2.  v3:= temp;
  #L4a8de4.  if v3 != 0 then goto L4a8e02;
  #L4a8de8.  v3:= 1I;
  #L4a8dea.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.e` @type ^`boolean` := v3 @kind boolean;
  #L4a8dee.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a8df2.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a8df8.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a8dfc.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a8e02.  return @kind void;
  #L4a8e04.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a8e06.  call `a`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZipIterable$a;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a8e0c.  return @kind void;
  #L4a8e0e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a8e10.  call `a`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZipIterable$a;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a8e16.  return @kind void;
  #L4a8e18.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a8e1a.  call `a`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZipIterable$a;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a8e20.  return @kind void;
  catch `java.lang.Throwable` @[L4a8da2..L4a8db8] goto L4a8e18;
  catch `java.lang.Throwable` @[L4a8db8..L4a8dce] goto L4a8e0e;
  catch `java.lang.Throwable` @[L4a8dd8..L4a8de4] goto L4a8e04;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZipIterable$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a8e54.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a8e58.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4a8e5e.  v0:= temp;
  #L4a8e60.  if v0 == 0 then goto L4a8e72;
  #L4a8e64.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.d` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4a8e68.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a8e6c.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4a8e72.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZipIterable$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a8e84.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a8e88.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a8e8e.  return @kind void;
}
