record `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a` @kind class, `java.lang.Runnable` @kind interface {
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.m` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.n` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.o` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.p` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.q` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4ce15c.  v0:= new `java.lang.Object`;
  #L4ce160.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ce166.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.p` @type ^`java.lang.Object` := v0 @kind object;
  #L4ce16a.  v0:= new `java.lang.Object`;
  #L4ce16e.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ce174.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.q` @type ^`java.lang.Object` := v0 @kind object;
  #L4ce178.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d` v6 @kind this, `io.reactivex.rxjava3.core.Observer` v7 @kind object, `long` v8 , `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v13 @kind object, `int` v14 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d;.<init>:(Lio/reactivex/rxjava3/core/Observer;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler$Worker;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4ce18c.  v0:= v6 @kind object;
  #L4ce18e.  v1:= v7 @kind object;
  #L4ce190.  v2:= v8 @kind wide;
  #L4ce192.  v4:= v12 @kind object;
  #L4ce194.  v5:= v14;
  #L4ce196.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;JLjava/util/concurrent/TimeUnit;I)V` @kind direct;
  #L4ce19c.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.m` @type ^`long` := v10 @kind wide;
  #L4ce1a0.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.n` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v13 @kind object;
  #L4ce1a4.  v7:= new `java.util.LinkedList`;
  #L4ce1a8.  call `<init>`(v7) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L4ce1ae.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.o` @type ^`java.util.List` := v7 @kind object;
  #L4ce1b2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4ce1f4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.n` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ce1f8.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ce1fe.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d` v14 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L4ce210.  v0:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4ce214.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4ce21a.  v0:= temp;
  #L4ce21c.  if v0 != 0 then goto L4ce2b6;
  #L4ce220.  v0:= 1L;
  #L4ce224.  v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`long` := v0 @kind wide;
  #L4ce228.  v0:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4ce22c.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ce232.  v0:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.e` @type ^`int`;
  #L4ce236.  call temp:= `create`(v0, v14) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @kind static;
  #L4ce23c.  v0:= temp @kind object;
  #L4ce23e.  v1:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.o` @type ^`java.util.List` @kind object;
  #L4ce242.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4ce248.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.b`;
  #L4ce24c.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.<init>:(Lio/reactivex/rxjava3/subjects/Subject;)V` @kind direct;
  #L4ce252.  v2:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ce256.  call `onNext`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ce25c.  v2:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.n` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ce260.  v3:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d$a`;
  #L4ce264.  v4:= 0I;
  #L4ce266.  call `<init>`(v3, v14, v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d;Z)V` @kind direct;
  #L4ce26c.  v4:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.c` @type ^`long` @kind wide;
  #L4ce270.  v6:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4ce274.  call temp:= `schedule`(v2, v3, v4, v6) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4ce27a.  v7:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.n` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ce27e.  v8:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d$a`;
  #L4ce282.  v2:= 1I;
  #L4ce284.  call `<init>`(v8, v14, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d;Z)V` @kind direct;
  #L4ce28a.  v11:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.m` @type ^`long` @kind wide;
  #L4ce28e.  v13:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4ce292.  v9:= v11 @kind wide;
  #L4ce294.  call temp:= `schedulePeriodically`(v7, v8, v9, v11, v13) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4ce29a.  call temp:= `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.d:()Z` @kind virtual;
  #L4ce2a0.  v1:= temp;
  #L4ce2a2.  if v1 == 0 then goto L4ce2b6;
  #L4ce2a6.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4ce2ac.  v1:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.o` @type ^`java.util.List` @kind object;
  #L4ce2b0.  call temp:= `remove`(v1, v0) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L4ce2b6.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d` v12 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4ce2c8.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ce2ce.  v0:= temp;
  #L4ce2d0.  if v0 == 0 then goto L4ce2d6;
  #L4ce2d4.  return @kind void;
  #L4ce2d6.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4ce2da.  v1:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ce2de.  v2:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.o` @type ^`java.util.List` @kind object;
  #L4ce2e2.  v3:= 1I;
  #L4ce2e4.  v4:= 1I;
  #L4ce2e6.  v5:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.k` @type ^`boolean` @kind boolean;
  #L4ce2ea.  if v5 == 0 then goto L4ce2fe;
  #L4ce2ee.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4ce2f4.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4ce2fa.  goto L4ce46a;
  #L4ce2fe.  v5:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.g` @type ^`boolean` @kind boolean;
  #L4ce302.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4ce308.  v6:= temp @kind object;
  #L4ce30a.  v7:= 0I;
  #L4ce30c.  if v6 != 0 then goto L4ce314;
  #L4ce310.  v8:= 1I;
  #L4ce312.  goto L4ce316;
  #L4ce314.  v8:= 0I;
  #L4ce316.  if v5 == 0 then goto L4ce390;
  #L4ce31a.  if v8 == 0 then goto L4ce390;
  #L4ce31e.  v5:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.h` @type ^`java.lang.Throwable` @kind object;
  #L4ce322.  if v5 == 0 then goto L4ce356;
  #L4ce326.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4ce32c.  v6:= temp @kind object;
  #L4ce32e.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ce334.  v7:= temp;
  #L4ce336.  if v7 == 0 then goto L4ce34e;
  #L4ce33a.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4ce340.  v7:= temp @kind object;
  #L4ce342.  v7:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v7 @kind object;
  #L4ce346.  call `onError`(v7, v5) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ce34c.  goto L4ce32e;
  #L4ce34e.  call `onError`(v1, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ce354.  goto L4ce384;
  #L4ce356.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4ce35c.  v5:= temp @kind object;
  #L4ce35e.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ce364.  v6:= temp;
  #L4ce366.  if v6 == 0 then goto L4ce37e;
  #L4ce36a.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4ce370.  v6:= temp @kind object;
  #L4ce372.  v6:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v6 @kind object;
  #L4ce376.  call `onComplete`(v6) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4ce37c.  goto L4ce35e;
  #L4ce37e.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4ce384.  call `a`(v12) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d;.a:()V` @kind virtual;
  #L4ce38a.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.k` @type ^`boolean` := v3 @kind boolean;
  #L4ce38e.  goto L4ce2e6;
  #L4ce390.  if v8 != 0 then goto L4ce46a;
  #L4ce394.  v5:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.p` @type ^`java.lang.Object` @kind object;
  #L4ce398.  if v6 != v5 then goto L4ce418;
  #L4ce39c.  v5:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4ce3a0.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4ce3a6.  v5:= temp;
  #L4ce3a8.  if v5 != 0 then goto L4ce2e6;
  #L4ce3ac.  v5:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`long` @kind wide;
  #L4ce3b0.  v8:= 1L;
  #L4ce3b4.  v5:= v5 + v8 @kind long;
  #L4ce3b6.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`long` := v5 @kind wide;
  #L4ce3ba.  v5:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4ce3be.  call temp:= `getAndIncrement`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ce3c4.  v5:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.e` @type ^`int`;
  #L4ce3c8.  call temp:= `create`(v5, v12) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @kind static;
  #L4ce3ce.  v5:= temp @kind object;
  #L4ce3d0.  call temp:= `add`(v2, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4ce3d6.  v6:= new `io.reactivex.rxjava3.internal.operators.observable.b`;
  #L4ce3da.  call `<init>`(v6, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.<init>:(Lio/reactivex/rxjava3/subjects/Subject;)V` @kind direct;
  #L4ce3e0.  call `onNext`(v1, v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ce3e6.  v8:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.n` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ce3ea.  v9:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d$a`;
  #L4ce3ee.  call `<init>`(v9, v12, v7) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d;Z)V` @kind direct;
  #L4ce3f4.  v10:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.c` @type ^`long` @kind wide;
  #L4ce3f8.  v7:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4ce3fc.  call temp:= `schedule`(v8, v9, v10, v7) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4ce402.  call temp:= `d`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.d:()Z` @kind virtual;
  #L4ce408.  v6:= temp;
  #L4ce40a.  if v6 == 0 then goto L4ce2e6;
  #L4ce40e.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4ce414.  goto L4ce2e6;
  #L4ce418.  v5:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.q` @type ^`java.lang.Object` @kind object;
  #L4ce41c.  if v6 != v5 then goto L4ce442;
  #L4ce420.  call temp:= `isEmpty`(v2) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L4ce426.  v5:= temp;
  #L4ce428.  if v5 != 0 then goto L4ce2e6;
  #L4ce42c.  call temp:= `remove`(v2, v7) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L4ce432.  v5:= temp @kind object;
  #L4ce434.  v5:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v5 @kind object;
  #L4ce438.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4ce43e.  goto L4ce2e6;
  #L4ce442.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4ce448.  v5:= temp @kind object;
  #L4ce44a.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ce450.  v7:= temp;
  #L4ce452.  if v7 == 0 then goto L4ce2e6;
  #L4ce456.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4ce45c.  v7:= temp @kind object;
  #L4ce45e.  v7:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v7 @kind object;
  #L4ce462.  call `onNext`(v7, v6) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4ce468.  goto L4ce44a;
  #L4ce46a.  v4:= -v4 @kind int;
  #L4ce46c.  call temp:= `addAndGet`(v12, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4ce472.  v4:= temp;
  #L4ce474.  if v4 != 0 then goto L4ce2e6;
  #L4ce478.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d` v1 @kind this, `boolean` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d;.e:(Z)V` @AccessFlag  {
    temp;
    v0;

  #L4ce1c4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4ce1c8.  if v2 == 0 then goto L4ce1d2;
  #L4ce1cc.  v2:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.p` @type ^`java.lang.Object` @kind object;
  #L4ce1d0.  goto L4ce1d6;
  #L4ce1d2.  v2:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.q` @type ^`java.lang.Object` @kind object;
  #L4ce1d6.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4ce1dc.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d;.c:()V` @kind virtual;
  #L4ce1e2.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d;.run:()V` @AccessFlag PUBLIC {
    temp;

  #L4ce48c.  call `d`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$a;.d:()V` @kind virtual;
  #L4ce492.  return @kind void;
}
