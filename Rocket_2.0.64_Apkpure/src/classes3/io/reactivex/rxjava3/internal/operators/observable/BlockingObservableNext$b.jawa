record `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.observers.DisposableObserver` @kind class {
  `java.util.concurrent.BlockingQueue` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b.d` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$b;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4b5ba4.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/observers/DisposableObserver;.<init>:()V` @kind direct;
  #L4b5baa.  v0:= new `java.util.concurrent.ArrayBlockingQueue`;
  #L4b5bae.  v1:= 1I;
  #L4b5bb0.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/ArrayBlockingQueue;.<init>:(I)V` @kind direct;
  #L4b5bb6.  v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b.d` @type ^`java.util.concurrent.BlockingQueue` := v0 @kind object;
  #L4b5bba.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4b5bbe.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4b5bc4.  v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L4b5bc8.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` v2 @kind this, `io.reactivex.rxjava3.core.Notification` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$b;.a:(Lio/reactivex/rxjava3/core/Notification;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b5c08.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4b5c0c.  v1:= 0I;
  #L4b5c0e.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L4b5c14.  v0:= temp;
  #L4b5c16.  v1:= 1I;
  #L4b5c18.  if v0 == v1 then goto L4b5c28;
  #L4b5c1c.  call temp:= `isOnNext`(v3) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnNext:()Z` @kind virtual;
  #L4b5c22.  v0:= temp;
  #L4b5c24.  if v0 != 0 then goto L4b5c5c;
  #L4b5c28.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b.d` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L4b5c2c.  call temp:= `offer`(v0, v3) @signature `Ljava/util/concurrent/BlockingQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4b5c32.  v0:= temp;
  #L4b5c34.  if v0 != 0 then goto L4b5c5c;
  #L4b5c38.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b.d` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L4b5c3c.  call temp:= `poll`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4b5c42.  v0:= temp @kind object;
  #L4b5c44.  v0:= (`io.reactivex.rxjava3.core.Notification`) v0 @kind object;
  #L4b5c48.  if v0 == 0 then goto L4b5c28;
  #L4b5c4c.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnNext:()Z` @kind virtual;
  #L4b5c52.  v1:= temp;
  #L4b5c54.  if v1 != 0 then goto L4b5c28;
  #L4b5c58.  v3:= v0 @kind object;
  #L4b5c5a.  goto L4b5c28;
  #L4b5c5c.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4b5c8c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4b5c90.  v1:= 1I;
  #L4b5c92.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L4b5c98.  return @kind void;
}
procedure `io.reactivex.rxjava3.core.Notification` `c`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$b;.c:()Lio/reactivex/rxjava3/core/Notification;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b5b74.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$b;.b:()V` @kind virtual;
  #L4b5b7a.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L4b5b80.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b.d` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L4b5b84.  call temp:= `take`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.take:()Ljava/lang/Object;` @kind interface;
  #L4b5b8a.  v0:= temp @kind object;
  #L4b5b8c.  v0:= (`io.reactivex.rxjava3.core.Notification`) v0 @kind object;
  #L4b5b90.  return v0 @kind object;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L4b5bdc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4b5bf0.  call `onError`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b5bf6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4b5c70.  v1:= (`io.reactivex.rxjava3.core.Notification`) v1 @kind object;
  #L4b5c74.  call `a`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$b;.a:(Lio/reactivex/rxjava3/core/Notification;)V` @kind virtual;
  #L4b5c7a.  return @kind void;
}
