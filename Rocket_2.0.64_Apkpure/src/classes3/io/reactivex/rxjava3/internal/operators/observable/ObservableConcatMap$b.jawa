record `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b$a` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.e` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.f` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.i` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.j` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b97e4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4b97ea.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4b97ee.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4b97f2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.d` @type ^`int` := v3;
  #L4b97f6.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b$a`;
  #L4b97fa.  call `<init>`(v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;)V` @kind direct;
  #L4b9800.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b$a` := v2 @kind object;
  #L4b9804.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b985c.  call temp:= `getAndIncrement`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4b9862.  v0:= temp;
  #L4b9864.  if v0 == 0 then goto L4b986a;
  #L4b9868.  return @kind void;
  #L4b986a.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.h` @type ^`boolean` @kind boolean;
  #L4b986e.  if v0 == 0 then goto L4b987e;
  #L4b9872.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4b9876.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b987c.  return @kind void;
  #L4b987e.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.g` @type ^`boolean` @kind boolean;
  #L4b9882.  if v0 != 0 then goto L4b9930;
  #L4b9886.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.i` @type ^`boolean` @kind boolean;
  #L4b988a.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4b988e.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4b9894.  v1:= temp @kind object;
  #L4b9896.  v2:= 1I;
  #L4b9898.  if v1 != 0 then goto L4b98a0;
  #L4b989c.  v3:= 1I;
  #L4b989e.  goto L4b98a2;
  #L4b98a0.  v3:= 0I;
  #L4b98a2.  if v0 == 0 then goto L4b98ba;
  #L4b98a6.  if v3 == 0 then goto L4b98ba;
  #L4b98aa.  v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.h` @type ^`boolean` := v2 @kind boolean;
  #L4b98ae.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b98b2.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4b98b8.  return @kind void;
  #L4b98ba.  if v3 != 0 then goto L4b9930;
  #L4b98be.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4b98c2.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b98c8.  v0:= temp @kind object;
  #L4b98ca.  v1:= "The mapper returned a null ObservableSource" @kind object;
  #L4b98ce.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b98d4.  v0:= (`io.reactivex.rxjava3.core.ObservableSource`) v0 @kind object;
  #L4b98d8.  v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.g` @type ^`boolean` := v2 @kind boolean;
  #L4b98dc.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b$a` @kind object;
  #L4b98e0.  call `subscribe`(v0, v1) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4b98e6.  goto L4b9930;
  #L4b98e8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b98ea.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b98f0.  call `dispose`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.dispose:()V` @kind virtual;
  #L4b98f6.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4b98fa.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b9900.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b9904.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b990a.  return @kind void;
  #L4b990c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b990e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b9914.  call `dispose`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.dispose:()V` @kind virtual;
  #L4b991a.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4b991e.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b9924.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b9928.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b992e.  return @kind void;
  #L4b9930.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4b9936.  v0:= temp;
  #L4b9938.  if v0 != 0 then goto L4b986a;
  #L4b993c.  return @kind void;
  catch `java.lang.Throwable` @[L4b988a..L4b9896] goto L4b990c;
  catch `java.lang.Throwable` @[L4b98be..L4b98d8] goto L4b98e8;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4b9968.  v0:= 0I;
  #L4b996a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.g` @type ^`boolean` := v0 @kind boolean;
  #L4b996e.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.a:()V` @kind virtual;
  #L4b9974.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b9818.  v0:= 1I;
  #L4b981a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.h` @type ^`boolean` := v0 @kind boolean;
  #L4b981e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b$a` @kind object;
  #L4b9822.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b$a;.a:()V` @kind virtual;
  #L4b9828.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b982c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b9832.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4b9838.  v0:= temp;
  #L4b983a.  if v0 != 0 then goto L4b9848;
  #L4b983e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4b9842.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b9848.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b97cc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.h` @type ^`boolean` @kind boolean;
  #L4b97d0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b9988.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.i` @type ^`boolean` @kind boolean;
  #L4b998c.  if v0 == 0 then goto L4b9992;
  #L4b9990.  return @kind void;
  #L4b9992.  v0:= 1I;
  #L4b9994.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.i` @type ^`boolean` := v0 @kind boolean;
  #L4b9998.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.a:()V` @kind virtual;
  #L4b999e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b99b0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.i` @type ^`boolean` @kind boolean;
  #L4b99b4.  if v0 == 0 then goto L4b99c0;
  #L4b99b8.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b99be.  return @kind void;
  #L4b99c0.  v0:= 1I;
  #L4b99c2.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.i` @type ^`boolean` := v0 @kind boolean;
  #L4b99c6.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.dispose:()V` @kind virtual;
  #L4b99cc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b99d0.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b99d6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b99e8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.i` @type ^`boolean` @kind boolean;
  #L4b99ec.  if v0 == 0 then goto L4b99f2;
  #L4b99f0.  return @kind void;
  #L4b99f2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.j` @type ^`int`;
  #L4b99f6.  if v0 != 0 then goto L4b9a04;
  #L4b99fa.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4b99fe.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4b9a04.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.a:()V` @kind virtual;
  #L4b9a0a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b` v2 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b9a1c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b9a20.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b9a26.  v0:= temp;
  #L4b9a28.  if v0 == 0 then goto L4b9aa0;
  #L4b9a2c.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v3 @kind object;
  #L4b9a30.  v0:= instanceof @variable v3 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind boolean;
  #L4b9a34.  if v0 == 0 then goto L4b9a84;
  #L4b9a38.  v3:= (`io.reactivex.rxjava3.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L4b9a3c.  v0:= 3I;
  #L4b9a3e.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4b9a44.  v0:= temp;
  #L4b9a46.  v1:= 1I;
  #L4b9a48.  if v0 != v1 then goto L4b9a6a;
  #L4b9a4c.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.j` @type ^`int` := v0;
  #L4b9a50.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4b9a54.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.i` @type ^`boolean` := v1 @kind boolean;
  #L4b9a58.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b9a5c.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4b9a62.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.a:()V` @kind virtual;
  #L4b9a68.  return @kind void;
  #L4b9a6a.  v1:= 2I;
  #L4b9a6c.  if v0 != v1 then goto L4b9a84;
  #L4b9a70.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.j` @type ^`int` := v0;
  #L4b9a74.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4b9a78.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b9a7c.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4b9a82.  return @kind void;
  #L4b9a84.  v3:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4b9a88.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.d` @type ^`int`;
  #L4b9a8c.  call `<init>`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4b9a92.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4b9a96.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b9a9a.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4b9aa0.  return @kind void;
}
