record `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.d` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.e` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.f` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.h` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$b;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48e590.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L48e596.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L48e59a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.b` @type ^`long` := v2 @kind wide;
  #L48e59e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L48e5a2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v5 @kind object;
  #L48e5a6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b` v3 @kind this, `long` v4 , `java.lang.Object` v6 @kind object, `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$b;.a:(JLjava/lang/Object;Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L48e5e0.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.g` @type ^`long` @kind wide;
  #L48e5e4.  v2:= lcmp(v4, v0);
  #L48e5e8.  if v2 != 0 then goto L48e63a;
  #L48e5ec.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L48e5f2.  v4:= temp @kind wide;
  #L48e5f4.  v0:= 0L;
  #L48e5f8.  v2:= lcmp(v4, v0);
  #L48e5fc.  if v2 == 0 then goto L48e61c;
  #L48e600.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48e604.  call `onNext`(v4, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48e60a.  v4:= 1L;
  #L48e60e.  call temp:= `produced`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L48e614.  call `dispose`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$a;.dispose:()V` @kind virtual;
  #L48e61a.  goto L48e63a;
  #L48e61c.  call `cancel`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$b;.cancel:()V` @kind virtual;
  #L48e622.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48e626.  v5:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L48e62a.  v6:= "Could not deliver value due to lack of requests" @kind object;
  #L48e62e.  call `<init>`(v5, v6) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48e634.  call `onError`(v4, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48e63a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48e5b8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48e5bc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48e5c2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L48e5c6.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L48e5cc.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48e64c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.h` @type ^`boolean` @kind boolean;
  #L48e650.  if v0 == 0 then goto L48e656;
  #L48e654.  return @kind void;
  #L48e656.  v0:= 1I;
  #L48e658.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.h` @type ^`boolean` := v0 @kind boolean;
  #L48e65c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L48e660.  if v0 == 0 then goto L48e66a;
  #L48e664.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L48e66a.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$a`) v0 @kind object;
  #L48e66e.  if v0 == 0 then goto L48e678;
  #L48e672.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$a;.a:()V` @kind virtual;
  #L48e678.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48e67c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L48e682.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L48e686.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L48e68c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48e6a0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.h` @type ^`boolean` @kind boolean;
  #L48e6a4.  if v0 == 0 then goto L48e6b0;
  #L48e6a8.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L48e6ae.  return @kind void;
  #L48e6b0.  v0:= 1I;
  #L48e6b2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.h` @type ^`boolean` := v0 @kind boolean;
  #L48e6b6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L48e6ba.  if v0 == 0 then goto L48e6c4;
  #L48e6be.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L48e6c4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48e6c8.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48e6ce.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L48e6d2.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L48e6d8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48e6ec.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.h` @type ^`boolean` @kind boolean;
  #L48e6f0.  if v0 == 0 then goto L48e6f6;
  #L48e6f4.  return @kind void;
  #L48e6f6.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.g` @type ^`long` @kind wide;
  #L48e6fa.  v2:= 1L;
  #L48e6fe.  v0:= v0 + v2 @kind long;
  #L48e700.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.g` @type ^`long` := v0 @kind wide;
  #L48e704.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L48e708.  if v2 == 0 then goto L48e712;
  #L48e70c.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L48e712.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$a`;
  #L48e716.  call `<init>`(v2, v5, v0, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$a;.<init>:(Ljava/lang/Object;JLio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$b;)V` @kind direct;
  #L48e71c.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L48e720.  v5:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L48e724.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.b` @type ^`long` @kind wide;
  #L48e728.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L48e72c.  call temp:= `schedule`(v5, v2, v0, v3) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L48e732.  v5:= temp @kind object;
  #L48e734.  call `b`(v2, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$a;.b:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L48e73a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48e74c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48e750.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L48e756.  v0:= temp;
  #L48e758.  if v0 == 0 then goto L48e77a;
  #L48e75c.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.e` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L48e760.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48e764.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L48e76a.  v0:= 9223372036854775807L;
  #L48e774.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L48e77a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48e78c.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L48e792.  v0:= temp;
  #L48e794.  if v0 == 0 then goto L48e79e;
  #L48e798.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L48e79e.  return @kind void;
}
