record `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b$a` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.f` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.i` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.j` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.k` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 , `io.reactivex.rxjava3.core.Scheduler$Worker` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;ILio/reactivex/rxjava3/core/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ba5c0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4ba5c6.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4ba5ca.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4ba5ce.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.d` @type ^`int` := v3;
  #L4ba5d2.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b$a`;
  #L4ba5d6.  call `<init>`(v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;)V` @kind direct;
  #L4ba5dc.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b$a` := v2 @kind object;
  #L4ba5e0.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v4 @kind object;
  #L4ba5e4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4ba644.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ba64a.  v0:= temp;
  #L4ba64c.  if v0 == 0 then goto L4ba652;
  #L4ba650.  return @kind void;
  #L4ba652.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ba656.  call temp:= `schedule`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4ba65c.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4ba670.  v0:= 0I;
  #L4ba672.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.h` @type ^`boolean` := v0 @kind boolean;
  #L4ba676.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.a:()V` @kind virtual;
  #L4ba67c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ba5f8.  v0:= 1I;
  #L4ba5fa.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.i` @type ^`boolean` := v0 @kind boolean;
  #L4ba5fe.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b$a` @kind object;
  #L4ba602.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b$a;.a:()V` @kind virtual;
  #L4ba608.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ba60c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ba612.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ba616.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ba61c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ba622.  v0:= temp;
  #L4ba624.  if v0 != 0 then goto L4ba632;
  #L4ba628.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4ba62c.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4ba632.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ba5a8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.i` @type ^`boolean` @kind boolean;
  #L4ba5ac.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ba690.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.j` @type ^`boolean` @kind boolean;
  #L4ba694.  if v0 == 0 then goto L4ba69a;
  #L4ba698.  return @kind void;
  #L4ba69a.  v0:= 1I;
  #L4ba69c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.j` @type ^`boolean` := v0 @kind boolean;
  #L4ba6a0.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.a:()V` @kind virtual;
  #L4ba6a6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ba6b8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.j` @type ^`boolean` @kind boolean;
  #L4ba6bc.  if v0 == 0 then goto L4ba6c8;
  #L4ba6c0.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4ba6c6.  return @kind void;
  #L4ba6c8.  v0:= 1I;
  #L4ba6ca.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.j` @type ^`boolean` := v0 @kind boolean;
  #L4ba6ce.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.dispose:()V` @kind virtual;
  #L4ba6d4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ba6d8.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ba6de.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ba6f0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.j` @type ^`boolean` @kind boolean;
  #L4ba6f4.  if v0 == 0 then goto L4ba6fa;
  #L4ba6f8.  return @kind void;
  #L4ba6fa.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.k` @type ^`int`;
  #L4ba6fe.  if v0 != 0 then goto L4ba70c;
  #L4ba702.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4ba706.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4ba70c.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.a:()V` @kind virtual;
  #L4ba712.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b` v2 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ba724.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ba728.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ba72e.  v0:= temp;
  #L4ba730.  if v0 == 0 then goto L4ba7a8;
  #L4ba734.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v3 @kind object;
  #L4ba738.  v0:= instanceof @variable v3 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind boolean;
  #L4ba73c.  if v0 == 0 then goto L4ba78c;
  #L4ba740.  v3:= (`io.reactivex.rxjava3.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L4ba744.  v0:= 3I;
  #L4ba746.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4ba74c.  v0:= temp;
  #L4ba74e.  v1:= 1I;
  #L4ba750.  if v0 != v1 then goto L4ba772;
  #L4ba754.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.k` @type ^`int` := v0;
  #L4ba758.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4ba75c.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.j` @type ^`boolean` := v1 @kind boolean;
  #L4ba760.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ba764.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4ba76a.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.a:()V` @kind virtual;
  #L4ba770.  return @kind void;
  #L4ba772.  v1:= 2I;
  #L4ba774.  if v0 != v1 then goto L4ba78c;
  #L4ba778.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.k` @type ^`int` := v0;
  #L4ba77c.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4ba780.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ba784.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4ba78a.  return @kind void;
  #L4ba78c.  v3:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4ba790.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.d` @type ^`int`;
  #L4ba794.  call `<init>`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4ba79a.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4ba79e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ba7a2.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4ba7a8.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ba7bc.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.i` @type ^`boolean` @kind boolean;
  #L4ba7c0.  if v0 == 0 then goto L4ba7d0;
  #L4ba7c4.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4ba7c8.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4ba7ce.  return @kind void;
  #L4ba7d0.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.h` @type ^`boolean` @kind boolean;
  #L4ba7d4.  if v0 != 0 then goto L4ba8a0;
  #L4ba7d8.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.j` @type ^`boolean` @kind boolean;
  #L4ba7dc.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4ba7e0.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4ba7e6.  v1:= temp @kind object;
  #L4ba7e8.  v2:= 1I;
  #L4ba7ea.  if v1 != 0 then goto L4ba7f2;
  #L4ba7ee.  v3:= 1I;
  #L4ba7f0.  goto L4ba7f4;
  #L4ba7f2.  v3:= 0I;
  #L4ba7f4.  if v0 == 0 then goto L4ba816;
  #L4ba7f8.  if v3 == 0 then goto L4ba816;
  #L4ba7fc.  v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.i` @type ^`boolean` := v2 @kind boolean;
  #L4ba800.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ba804.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4ba80a.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ba80e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ba814.  return @kind void;
  #L4ba816.  if v3 != 0 then goto L4ba8a0;
  #L4ba81a.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4ba81e.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4ba824.  v0:= temp @kind object;
  #L4ba826.  v1:= "The mapper returned a null ObservableSource" @kind object;
  #L4ba82a.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ba830.  v0:= (`io.reactivex.rxjava3.core.ObservableSource`) v0 @kind object;
  #L4ba834.  v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.h` @type ^`boolean` := v2 @kind boolean;
  #L4ba838.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b$a` @kind object;
  #L4ba83c.  call `subscribe`(v0, v1) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4ba842.  goto L4ba8a0;
  #L4ba844.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ba846.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ba84c.  call `dispose`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.dispose:()V` @kind virtual;
  #L4ba852.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4ba856.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4ba85c.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ba860.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ba866.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ba86a.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ba870.  return @kind void;
  #L4ba872.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ba874.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ba87a.  call `dispose`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.dispose:()V` @kind virtual;
  #L4ba880.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4ba884.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4ba88a.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ba88e.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ba894.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ba898.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ba89e.  return @kind void;
  #L4ba8a0.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4ba8a6.  v0:= temp;
  #L4ba8a8.  if v0 != 0 then goto L4ba7bc;
  #L4ba8ac.  return @kind void;
  catch `java.lang.Throwable` @[L4ba7dc..L4ba7e8] goto L4ba872;
  catch `java.lang.Throwable` @[L4ba81a..L4ba834] goto L4ba844;
}
