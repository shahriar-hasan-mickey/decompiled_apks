record `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$a` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.g` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.h` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.i` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.subjects.UnicastSubject` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.j` @AccessFlag ;
}
global `java.lang.Object` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.k` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4ccc30.  v0:= new `java.lang.Object`;
  #L4ccc34.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ccc3a.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.k` @type ^`java.lang.Object` := v0 @kind object;
  #L4ccc3e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.<init>:(Lio/reactivex/rxjava3/core/Observer;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ccc50.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4ccc56.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4ccc5a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.b` @type ^`int` := v2;
  #L4ccc5e.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$a`;
  #L4ccc62.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;)V` @kind direct;
  #L4ccc68.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$a` := v1 @kind object;
  #L4ccc6c.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4ccc70.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4ccc76.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4ccc7a.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4ccc7e.  v2:= 1I;
  #L4ccc80.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4ccc86.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4ccc8a.  v1:= new `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue`;
  #L4ccc8e.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4ccc94.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.f` @type ^`io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` := v1 @kind object;
  #L4ccc98.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4ccc9c.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4ccca2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4ccca6.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4cccaa.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4cccb0.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4cccb4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` v10 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4ccd14.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ccd1a.  v0:= temp;
  #L4ccd1c.  if v0 == 0 then goto L4ccd22;
  #L4ccd20.  return @kind void;
  #L4ccd22.  v0:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ccd26.  v1:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.f` @type ^`io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` @kind object;
  #L4ccd2a.  v2:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ccd2e.  v3:= 1I;
  #L4ccd30.  v4:= 1I;
  #L4ccd32.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4ccd36.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4ccd3c.  v5:= temp;
  #L4ccd3e.  v6:= 0I;
  #L4ccd40.  if v5 != 0 then goto L4ccd50;
  #L4ccd44.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L4ccd4a.  v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.j` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v6 @kind object;
  #L4ccd4e.  return @kind void;
  #L4ccd50.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.j` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` @kind object;
  #L4ccd54.  v7:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.i` @type ^`boolean` @kind boolean;
  #L4ccd58.  if v7 == 0 then goto L4ccd8c;
  #L4ccd5c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ccd62.  v8:= temp @kind object;
  #L4ccd64.  if v8 == 0 then goto L4ccd8c;
  #L4ccd68.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L4ccd6e.  call temp:= `terminate`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4ccd74.  v1:= temp @kind object;
  #L4ccd76.  if v5 == 0 then goto L4ccd84;
  #L4ccd7a.  v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.j` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v6 @kind object;
  #L4ccd7e.  call `onError`(v5, v1) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ccd84.  call `onError`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ccd8a.  return @kind void;
  #L4ccd8c.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4ccd92.  v8:= temp @kind object;
  #L4ccd94.  if v8 != 0 then goto L4ccd9c;
  #L4ccd98.  v9:= 1I;
  #L4ccd9a.  goto L4ccd9e;
  #L4ccd9c.  v9:= 0I;
  #L4ccd9e.  if v7 == 0 then goto L4ccdde;
  #L4ccda2.  if v9 == 0 then goto L4ccdde;
  #L4ccda6.  call temp:= `terminate`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4ccdac.  v1:= temp @kind object;
  #L4ccdae.  if v1 != 0 then goto L4ccdc8;
  #L4ccdb2.  if v5 == 0 then goto L4ccdc0;
  #L4ccdb6.  v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.j` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v6 @kind object;
  #L4ccdba.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4ccdc0.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4ccdc6.  goto L4ccddc;
  #L4ccdc8.  if v5 == 0 then goto L4ccdd6;
  #L4ccdcc.  v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.j` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v6 @kind object;
  #L4ccdd0.  call `onError`(v5, v1) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ccdd6.  call `onError`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ccddc.  return @kind void;
  #L4ccdde.  if v9 == 0 then goto L4ccdf2;
  #L4ccde2.  v4:= -v4 @kind int;
  #L4ccde4.  call temp:= `addAndGet`(v10, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4ccdea.  v4:= temp;
  #L4ccdec.  if v4 != 0 then goto L4ccd32;
  #L4ccdf0.  return @kind void;
  #L4ccdf2.  v7:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.k` @type ^`java.lang.Object` @kind object;
  #L4ccdf6.  if v8 == v7 then goto L4cce02;
  #L4ccdfa.  call `onNext`(v5, v8) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4cce00.  goto L4ccd32;
  #L4cce02.  if v5 == 0 then goto L4cce10;
  #L4cce06.  v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.j` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v6 @kind object;
  #L4cce0a.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4cce10.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4cce14.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4cce1a.  v5:= temp;
  #L4cce1c.  if v5 != 0 then goto L4ccd32;
  #L4cce20.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.b` @type ^`int`;
  #L4cce24.  call temp:= `create`(v5, v10) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @kind static;
  #L4cce2a.  v5:= temp @kind object;
  #L4cce2c.  v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.j` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v5 @kind object;
  #L4cce30.  v6:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4cce34.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4cce3a.  v6:= new `io.reactivex.rxjava3.internal.operators.observable.b`;
  #L4cce3e.  call `<init>`(v6, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.<init>:(Lio/reactivex/rxjava3/subjects/Subject;)V` @kind direct;
  #L4cce44.  call `onNext`(v0, v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cce4a.  call temp:= `d`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.d:()Z` @kind virtual;
  #L4cce50.  v6:= temp;
  #L4cce52.  if v6 == 0 then goto L4ccd32;
  #L4cce56.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4cce5c.  goto L4ccd32;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4cce70.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cce74.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4cce7a.  v0:= 1I;
  #L4cce7c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.i` @type ^`boolean` := v0 @kind boolean;
  #L4cce80.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.a:()V` @kind virtual;
  #L4cce86.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.c:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4cce98.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cce9c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4ccea2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ccea6.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4cceac.  v2:= temp;
  #L4cceae.  if v2 == 0 then goto L4ccebe;
  #L4cceb2.  v2:= 1I;
  #L4cceb4.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.i` @type ^`boolean` := v2 @kind boolean;
  #L4cceb8.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.a:()V` @kind virtual;
  #L4ccebe.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4cced0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.f` @type ^`io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` @kind object;
  #L4cced4.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.k` @type ^`java.lang.Object` @kind object;
  #L4cced8.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4ccede.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.a:()V` @kind virtual;
  #L4ccee4.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4cccc8.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4ccccc.  v1:= 0I;
  #L4cccce.  v2:= 1I;
  #L4cccd0.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4cccd6.  v0:= temp;
  #L4cccd8.  if v0 == 0 then goto L4ccd00;
  #L4cccdc.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$a` @kind object;
  #L4ccce0.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/observers/DisposableObserver;.dispose:()V` @kind virtual;
  #L4ccce6.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4cccea.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4cccf0.  v0:= temp;
  #L4cccf2.  if v0 != 0 then goto L4ccd00;
  #L4cccf6.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cccfa.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4ccd00.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ccc10.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4ccc14.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4ccc1a.  v0:= temp;
  #L4ccc1c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ccef8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$a` @kind object;
  #L4ccefc.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/observers/DisposableObserver;.dispose:()V` @kind virtual;
  #L4ccf02.  v0:= 1I;
  #L4ccf04.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.i` @type ^`boolean` := v0 @kind boolean;
  #L4ccf08.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.a:()V` @kind virtual;
  #L4ccf0e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ccf20.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$a` @kind object;
  #L4ccf24.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/observers/DisposableObserver;.dispose:()V` @kind virtual;
  #L4ccf2a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ccf2e.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4ccf34.  v2:= temp;
  #L4ccf36.  if v2 == 0 then goto L4ccf46;
  #L4ccf3a.  v2:= 1I;
  #L4ccf3c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.i` @type ^`boolean` := v2 @kind boolean;
  #L4ccf40.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.a:()V` @kind virtual;
  #L4ccf46.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ccf58.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.f` @type ^`io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` @kind object;
  #L4ccf5c.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4ccf62.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.a:()V` @kind virtual;
  #L4ccf68.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ccf7c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ccf80.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ccf86.  v2:= temp;
  #L4ccf88.  if v2 == 0 then goto L4ccf92;
  #L4ccf8c.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.d:()V` @kind virtual;
  #L4ccf92.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ccfa4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4ccfa8.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4ccfae.  v0:= temp;
  #L4ccfb0.  if v0 != 0 then goto L4ccfbe;
  #L4ccfb4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ccfb8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4ccfbe.  return @kind void;
}
