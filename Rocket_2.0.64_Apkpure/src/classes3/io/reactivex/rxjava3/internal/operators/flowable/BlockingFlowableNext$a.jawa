record `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface {
  `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.a` @AccessFlag PRIVATE_FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.c` @AccessFlag PRIVATE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.d` @AccessFlag PRIVATE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.e` @AccessFlag PRIVATE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.f` @AccessFlag PRIVATE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$a;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$b;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L487024.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48702a.  v0:= 1I;
  #L48702c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.d` @type ^`boolean` := v0 @kind boolean;
  #L487030.  v1.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.e` @type ^`boolean` := v0 @kind boolean;
  #L487034.  v1.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.b` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L487038.  v1.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` := v3 @kind object;
  #L48703c.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$a;.a:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L486f14.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.g` @type ^`boolean` @kind boolean;
  #L486f18.  v1:= 1I;
  #L486f1a.  if v0 != 0 then goto L486f4a;
  #L486f1e.  v4.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.g` @type ^`boolean` := v1 @kind boolean;
  #L486f22.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` @kind object;
  #L486f26.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$b;.b:()V` @kind virtual;
  #L486f2c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L486f30.  call temp:= `fromPublisher`(v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L486f36.  v0:= temp @kind object;
  #L486f38.  call temp:= `materialize`(v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.materialize:()Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L486f3e.  v0:= temp @kind object;
  #L486f40.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` @kind object;
  #L486f44.  call `subscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V` @kind virtual;
  #L486f4a.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` @kind object;
  #L486f4e.  call temp:= `c`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$b;.c:()Lio/reactivex/rxjava3/core/Notification;` @kind virtual;
  #L486f54.  v0:= temp @kind object;
  #L486f56.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnNext:()Z` @kind virtual;
  #L486f5c.  v2:= temp;
  #L486f5e.  v3:= 0I;
  #L486f60.  if v2 == 0 then goto L486f76;
  #L486f64.  v4.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.e` @type ^`boolean` := v3 @kind boolean;
  #L486f68.  call temp:= `getValue`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L486f6e.  v0:= temp @kind object;
  #L486f70.  v4.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.c` @type ^`java.lang.Object` := v0 @kind object;
  #L486f74.  return v1;
  #L486f76.  v4.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.d` @type ^`boolean` := v3 @kind boolean;
  #L486f7a.  call temp:= `isOnComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnComplete:()Z` @kind virtual;
  #L486f80.  v1:= temp;
  #L486f82.  if v1 == 0 then goto L486f88;
  #L486f86.  return v3;
  #L486f88.  call temp:= `getError`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L486f8e.  v0:= temp @kind object;
  #L486f90.  v4.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.f` @type ^`java.lang.Throwable` := v0 @kind object;
  #L486f94.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L486f9a.  v0:= temp @kind object;
  #L486f9c.  throw v0;
  #L486f9e.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L486fa0.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` @kind object;
  #L486fa4.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/subscribers/DisposableSubscriber;.dispose:()V` @kind virtual;
  #L486faa.  v4.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.f` @type ^`java.lang.Throwable` := v0 @kind object;
  #L486fae.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L486fb4.  v0:= temp @kind object;
  #L486fb6.  throw v0;
  catch `java.lang.InterruptedException` @[L486f14..L486f9e] goto L486f9e;
}
procedure `boolean` `hasNext`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L486ecc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.f` @type ^`java.lang.Throwable` @kind object;
  #L486ed0.  if v0 != 0 then goto L486ef8;
  #L486ed4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.d` @type ^`boolean` @kind boolean;
  #L486ed8.  v1:= 0I;
  #L486eda.  if v0 != 0 then goto L486ee0;
  #L486ede.  return v1;
  #L486ee0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.e` @type ^`boolean` @kind boolean;
  #L486ee4.  if v0 == 0 then goto L486ef4;
  #L486ee8.  call temp:= `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$a;.a:()Z` @kind direct;
  #L486eee.  v0:= temp;
  #L486ef0.  if v0 == 0 then goto L486ef6;
  #L486ef4.  v1:= 1I;
  #L486ef6.  return v1;
  #L486ef8.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L486efe.  v0:= temp @kind object;
  #L486f00.  throw v0;
}
procedure `java.lang.Object` `next`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L486fd8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.f` @type ^`java.lang.Throwable` @kind object;
  #L486fdc.  if v0 != 0 then goto L487008;
  #L486fe0.  call temp:= `hasNext`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$a;.hasNext:()Z` @kind virtual;
  #L486fe6.  v0:= temp;
  #L486fe8.  if v0 == 0 then goto L486ff8;
  #L486fec.  v0:= 1I;
  #L486fee.  v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.e` @type ^`boolean` := v0 @kind boolean;
  #L486ff2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.c` @type ^`java.lang.Object` @kind object;
  #L486ff6.  return v0 @kind object;
  #L486ff8.  v0:= new `java.util.NoSuchElementException`;
  #L486ffc.  v1:= "No more elements" @kind object;
  #L487000.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L487006.  throw v0;
  #L487008.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L48700e.  v0:= temp @kind object;
  #L487010.  throw v0;
}
procedure `void` `remove`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L487050.  v0:= new `java.lang.UnsupportedOperationException`;
  #L487054.  v1:= "Read only iterator" @kind object;
  #L487058.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48705e.  throw v0;
}
