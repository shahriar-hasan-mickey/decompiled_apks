record `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Supplier` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.c` @AccessFlag FINAL;
  `java.util.Collection` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.d` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.e` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.f` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.g` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `io.reactivex.rxjava3.functions.Supplier` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$a;.<init>:(Lorg/reactivestreams/Subscriber;ILio/reactivex/rxjava3/functions/Supplier;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L487fc0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L487fc6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L487fca.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.c` @type ^`int` := v2;
  #L487fce.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.b` @type ^`io.reactivex.rxjava3.functions.Supplier` := v3 @kind object;
  #L487fd2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L487fe4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L487fe8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L487fee.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L488000.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.f` @type ^`boolean` @kind boolean;
  #L488004.  if v0 == 0 then goto L48800a;
  #L488008.  return @kind void;
  #L48800a.  v0:= 1I;
  #L48800c.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.f` @type ^`boolean` := v0 @kind boolean;
  #L488010.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.d` @type ^`java.util.Collection` @kind object;
  #L488014.  v1:= 0I;
  #L488016.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.d` @type ^`java.util.Collection` := v1 @kind object;
  #L48801a.  if v0 == 0 then goto L488028;
  #L48801e.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L488022.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L488028.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48802c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L488032.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L488044.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.f` @type ^`boolean` @kind boolean;
  #L488048.  if v0 == 0 then goto L488054;
  #L48804c.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L488052.  return @kind void;
  #L488054.  v0:= 0I;
  #L488056.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.d` @type ^`java.util.Collection` := v0 @kind object;
  #L48805a.  v0:= 1I;
  #L48805c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.f` @type ^`boolean` := v0 @kind boolean;
  #L488060.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L488064.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48806a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48807c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.f` @type ^`boolean` @kind boolean;
  #L488080.  if v0 == 0 then goto L488086;
  #L488084.  return @kind void;
  #L488086.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.d` @type ^`java.util.Collection` @kind object;
  #L48808a.  if v0 != 0 then goto L4880c4;
  #L48808e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.b` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L488092.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L488098.  v0:= temp @kind object;
  #L48809a.  v1:= "The bufferSupplier returned a null buffer" @kind object;
  #L48809e.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4880a4.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4880a8.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.d` @type ^`java.util.Collection` := v0 @kind object;
  #L4880ac.  goto L4880c4;
  #L4880ae.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4880b0.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4880b6.  call `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$a;.cancel:()V` @kind virtual;
  #L4880bc.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4880c2.  return @kind void;
  #L4880c4.  call temp:= `add`(v0, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4880ca.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.g` @type ^`int`;
  #L4880ce.  v3:= v3 + 1;
  #L4880d2.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.c` @type ^`int`;
  #L4880d6.  if v3 != v1 then goto L4880f2;
  #L4880da.  v3:= 0I;
  #L4880dc.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.g` @type ^`int` := v3;
  #L4880e0.  v3:= 0I;
  #L4880e2.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.d` @type ^`java.util.Collection` := v3 @kind object;
  #L4880e6.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4880ea.  call `onNext`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4880f0.  goto L4880f6;
  #L4880f2.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.g` @type ^`int` := v3;
  #L4880f6.  return @kind void;
  catch `java.lang.Throwable` @[L48808e..L4880a8] goto L4880ae;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L488114.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L488118.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L48811e.  v0:= temp;
  #L488120.  if v0 == 0 then goto L488132;
  #L488124.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.e` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L488128.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48812c.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L488132.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L488144.  call temp:= `validate`(v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L48814a.  v0:= temp;
  #L48814c.  if v0 == 0 then goto L488168;
  #L488150.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L488154.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.c` @type ^`int`;
  #L488158.  v1:= (`long`) v1 @kind i2l;
  #L48815a.  call temp:= `multiplyCap`(v4, v1) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L488160.  v4:= temp @kind wide;
  #L488162.  call `request`(v0, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L488168.  return @kind void;
}
