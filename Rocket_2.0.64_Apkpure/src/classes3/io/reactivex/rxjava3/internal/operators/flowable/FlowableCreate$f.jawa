record `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.c` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.e` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.f` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$f;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48da88.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L48da8e.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L48da92.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L48da98.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L48da9c.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L48daa0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L48daa6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.f` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L48daaa.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$f;.c:()V` @AccessFlag  {
    temp;

  #L48dc48.  call `f`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$f;.f:()V` @kind virtual;
  #L48dc4e.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$f;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L48dc60.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L48dc64.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L48dc6a.  v0:= temp;
  #L48dc6c.  if v0 != 0 then goto L48dc7c;
  #L48dc70.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48dc74.  v1:= 0I;
  #L48dc76.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L48dc7c.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$f;.e:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48da4c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.e` @type ^`boolean` @kind boolean;
  #L48da50.  if v0 != 0 then goto L48da74;
  #L48da54.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L48da5a.  v0:= temp;
  #L48da5c.  if v0 == 0 then goto L48da62;
  #L48da60.  goto L48da74;
  #L48da62.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.d` @type ^`java.lang.Throwable` := v2 @kind object;
  #L48da66.  v2:= 1I;
  #L48da68.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.e` @type ^`boolean` := v2 @kind boolean;
  #L48da6c.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$f;.f:()V` @kind virtual;
  #L48da72.  return v2;
  #L48da74.  v2:= 0I;
  #L48da76.  return v2;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f` v17 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$f;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L48dabc.  v0:= v17 @kind object;
  #L48dac0.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L48dac4.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L48daca.  v1:= temp;
  #L48dacc.  if v1 == 0 then goto L48dad2;
  #L48dad0.  return @kind void;
  #L48dad2.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48dad6.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48dada.  v3:= 1I;
  #L48dadc.  v4:= 1I;
  #L48dade.  call temp:= `get`(v17) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L48dae4.  v5:= temp @kind wide;
  #L48dae6.  v7:= 0L;
  #L48daea.  v9:= v7 @kind wide;
  #L48daec.  v11:= 0I;
  #L48daee.  v12:= 0I;
  #L48daf0.  v13:= lcmp(v9, v5);
  #L48daf4.  if v13 == 0 then goto L48db5a;
  #L48daf8.  call temp:= `isCancelled`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L48dafe.  v14:= temp;
  #L48db00.  if v14 == 0 then goto L48db0c;
  #L48db04.  call `lazySet`(v2, v12) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L48db0a.  return @kind void;
  #L48db0c.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.e` @type ^`boolean` @kind boolean;
  #L48db10.  call temp:= `getAndSet`(v2, v12) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L48db16.  v15:= temp @kind object;
  #L48db18.  if v15 != 0 then goto L48db22;
  #L48db1c.  v16:= 1I;
  #L48db20.  goto L48db26;
  #L48db22.  v16:= 0I;
  #L48db26.  if v14 == 0 then goto L48db46;
  #L48db2a.  if v16 == 0 then goto L48db46;
  #L48db2e.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.d` @type ^`java.lang.Throwable` @kind object;
  #L48db32.  if v1 == 0 then goto L48db3e;
  #L48db36.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.b:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L48db3c.  goto L48db44;
  #L48db3e.  call `a`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.a:()V` @kind virtual;
  #L48db44.  return @kind void;
  #L48db46.  if v16 == 0 then goto L48db4c;
  #L48db4a.  goto L48db5a;
  #L48db4c.  call `onNext`(v1, v15) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48db52.  v11:= 1L;
  #L48db56.  v9:= v9 + v11 @kind long;
  #L48db58.  goto L48daec;
  #L48db5a.  if v13 != 0 then goto L48dba4;
  #L48db5e.  call temp:= `isCancelled`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L48db64.  v5:= temp;
  #L48db66.  if v5 == 0 then goto L48db72;
  #L48db6a.  call `lazySet`(v2, v12) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L48db70.  return @kind void;
  #L48db72.  v5:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.e` @type ^`boolean` @kind boolean;
  #L48db76.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48db7c.  v6:= temp @kind object;
  #L48db7e.  if v6 != 0 then goto L48db84;
  #L48db82.  v11:= 1I;
  #L48db84.  if v5 == 0 then goto L48dba4;
  #L48db88.  if v11 == 0 then goto L48dba4;
  #L48db8c.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.d` @type ^`java.lang.Throwable` @kind object;
  #L48db90.  if v1 == 0 then goto L48db9c;
  #L48db94.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.b:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L48db9a.  goto L48dba2;
  #L48db9c.  call `a`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.a:()V` @kind virtual;
  #L48dba2.  return @kind void;
  #L48dba4.  v5:= lcmp(v9, v7);
  #L48dba8.  if v5 == 0 then goto L48dbb2;
  #L48dbac.  call temp:= `produced`(v0, v9) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L48dbb2.  v5:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L48dbb6.  v4:= -v4 @kind int;
  #L48dbb8.  call temp:= `addAndGet`(v5, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L48dbbe.  v4:= temp;
  #L48dbc0.  if v4 != 0 then goto L48dade;
  #L48dbc4.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$f;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48dbd8.  v0:= 1I;
  #L48dbda.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.e` @type ^`boolean` := v0 @kind boolean;
  #L48dbde.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$f;.f:()V` @kind virtual;
  #L48dbe4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$f;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48dbf8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.e` @type ^`boolean` @kind boolean;
  #L48dbfc.  if v0 != 0 then goto L48dc36;
  #L48dc00.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L48dc06.  v0:= temp;
  #L48dc08.  if v0 == 0 then goto L48dc0e;
  #L48dc0c.  goto L48dc36;
  #L48dc0e.  if v2 != 0 then goto L48dc26;
  #L48dc12.  v2:= "onNext called with a null value." @kind object;
  #L48dc16.  call temp:= `createNullPointerException`(v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;` @kind static;
  #L48dc1c.  v2:= temp @kind object;
  #L48dc1e.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L48dc24.  return @kind void;
  #L48dc26.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48dc2a.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L48dc30.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$f;.f:()V` @kind virtual;
  #L48dc36.  return @kind void;
}
