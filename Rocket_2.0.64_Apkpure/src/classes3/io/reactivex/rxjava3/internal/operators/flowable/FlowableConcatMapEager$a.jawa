record `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriberSupport` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.ErrorMode` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.h` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.i` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.k` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.l` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 , `int` v4 , `io.reactivex.rxjava3.internal.util.ErrorMode` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;IILio/reactivex/rxjava3/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48bc18.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L48bc1e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L48bc22.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L48bc26.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.c` @type ^`int` := v3;
  #L48bc2a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.d` @type ^`int` := v4;
  #L48bc2e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.e` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` := v5 @kind object;
  #L48bc32.  v1:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L48bc36.  call temp:= `min`(v4, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L48bc3c.  v2:= temp;
  #L48bc3e.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L48bc44.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.h` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v1 @kind object;
  #L48bc48.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L48bc4c.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L48bc52.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L48bc56.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L48bc5a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L48bc60.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.g` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L48bc64.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L48bcb4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber` @kind object;
  #L48bcb8.  v1:= 0I;
  #L48bcba.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber` := v1 @kind object;
  #L48bcbe.  if v0 == 0 then goto L48bcc8;
  #L48bcc2.  call `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L48bcc8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.h` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L48bccc.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L48bcd2.  v0:= temp @kind object;
  #L48bcd4.  v0:= (`io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber`) v0 @kind object;
  #L48bcd8.  if v0 == 0 then goto L48bce4;
  #L48bcdc.  call `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L48bce2.  goto L48bcc8;
  #L48bce4.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L48bf68.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L48bf6e.  v0:= temp;
  #L48bf70.  if v0 != 0 then goto L48bf86;
  #L48bf74.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @kind virtual;
  #L48bf7a.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L48bf80.  v0:= temp;
  #L48bf82.  if v0 != 0 then goto L48bf74;
  #L48bf86.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48bc78.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.j` @type ^`boolean` @kind boolean;
  #L48bc7c.  if v0 == 0 then goto L48bc82;
  #L48bc80.  return @kind void;
  #L48bc82.  v0:= 1I;
  #L48bc84.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.j` @type ^`boolean` := v0 @kind boolean;
  #L48bc88.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48bc8c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48bc92.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48bc96.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L48bc9c.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.b:()V` @kind virtual;
  #L48bca2.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a` v19 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.drain:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L48bcf8.  v1:= v19 @kind object;
  #L48bcfc.  call temp:= `getAndIncrement`(v19) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L48bd02.  v0:= temp;
  #L48bd04.  if v0 == 0 then goto L48bd0a;
  #L48bd08.  return @kind void;
  #L48bd0a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber` @kind object;
  #L48bd0e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48bd12.  v3:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.e` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L48bd16.  v5:= 1I;
  #L48bd18.  v6:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L48bd1c.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L48bd22.  v6:= temp @kind wide;
  #L48bd24.  if v0 != 0 then goto L48bd90;
  #L48bd28.  v0:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.END` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L48bd2c.  if v3 == v0 then goto L48bd5a;
  #L48bd30.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48bd34.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48bd3a.  v0:= temp @kind object;
  #L48bd3c.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L48bd40.  if v0 == 0 then goto L48bd5a;
  #L48bd44.  call `a`(v19) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @kind virtual;
  #L48bd4a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48bd4e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48bd52.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L48bd58.  return @kind void;
  #L48bd5a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.k` @type ^`boolean` @kind boolean;
  #L48bd5e.  v8:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.h` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L48bd62.  call temp:= `poll`(v8) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L48bd68.  v8:= temp @kind object;
  #L48bd6a.  v8:= (`io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber`) v8 @kind object;
  #L48bd6e.  if v0 == 0 then goto L48bd86;
  #L48bd72.  if v8 != 0 then goto L48bd86;
  #L48bd76.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48bd7a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48bd7e.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L48bd84.  return @kind void;
  #L48bd86.  if v8 == 0 then goto L48bd92;
  #L48bd8a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber` := v8 @kind object;
  #L48bd8e.  goto L48bd92;
  #L48bd90.  v8:= v0 @kind object;
  #L48bd92.  v9:= 0L;
  #L48bd96.  v11:= 0I;
  #L48bd98.  if v8 == 0 then goto L48bef6;
  #L48bd9c.  call temp:= `queue`(v8) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.queue:()Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;` @kind virtual;
  #L48bda2.  v12:= temp @kind object;
  #L48bda4.  if v12 == 0 then goto L48bef6;
  #L48bda8.  v16:= v5;
  #L48bdac.  v13:= v9 @kind wide;
  #L48bdae.  v4:= 1L;
  #L48bdb2.  v17:= lcmp(v13, v6);
  #L48bdb6.  if v17 == 0 then goto L48be78;
  #L48bdba.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.j` @type ^`boolean` @kind boolean;
  #L48bdbe.  if v0 == 0 then goto L48bdca;
  #L48bdc2.  call `a`(v19) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @kind virtual;
  #L48bdc8.  return @kind void;
  #L48bdca.  v0:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L48bdce.  if v3 != v0 then goto L48be06;
  #L48bdd2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48bdd6.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48bddc.  v0:= temp @kind object;
  #L48bdde.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L48bde2.  if v0 == 0 then goto L48be06;
  #L48bde6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber` := v11 @kind object;
  #L48bdea.  call `cancel`(v8) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L48bdf0.  call `a`(v19) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @kind virtual;
  #L48bdf6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48bdfa.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48bdfe.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L48be04.  return @kind void;
  #L48be06.  call temp:= `isDone`(v8) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.isDone:()Z` @kind virtual;
  #L48be0c.  v0:= temp;
  #L48be0e.  call temp:= `poll`(v12) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L48be14.  v15:= temp @kind object;
  #L48be16.  if v15 != 0 then goto L48be20;
  #L48be1a.  v18:= 1I;
  #L48be1e.  goto L48be24;
  #L48be20.  v18:= 0I;
  #L48be24.  if v0 == 0 then goto L48be40;
  #L48be28.  if v18 == 0 then goto L48be40;
  #L48be2c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber` := v11 @kind object;
  #L48be30.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48be34.  call `request`(v0, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L48be3a.  v8:= v11 @kind object;
  #L48be3c.  v0:= 1I;
  #L48be3e.  goto L48be7a;
  #L48be40.  if v18 == 0 then goto L48be46;
  #L48be44.  goto L48be78;
  #L48be46.  call `onNext`(v2, v15) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48be4c.  v13:= v13 + v4 @kind long;
  #L48be4e.  call `request`(v8, v4) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.request:(J)V` @kind virtual;
  #L48be54.  goto L48bdae;
  #L48be56.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48be58.  v3:= v0 @kind object;
  #L48be5a.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48be60.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber` := v11 @kind object;
  #L48be64.  call `cancel`(v8) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L48be6a.  call `a`(v19) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @kind virtual;
  #L48be70.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48be76.  return @kind void;
  #L48be78.  v0:= 0I;
  #L48be7a.  if v17 != 0 then goto L48befe;
  #L48be7e.  v15:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.j` @type ^`boolean` @kind boolean;
  #L48be82.  if v15 == 0 then goto L48be8e;
  #L48be86.  call `a`(v19) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @kind virtual;
  #L48be8c.  return @kind void;
  #L48be8e.  v15:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L48be92.  if v3 != v15 then goto L48beca;
  #L48be96.  v15:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48be9a.  call temp:= `get`(v15) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48bea0.  v15:= temp @kind object;
  #L48bea2.  v15:= (`java.lang.Throwable`) v15 @kind object;
  #L48bea6.  if v15 == 0 then goto L48beca;
  #L48beaa.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber` := v11 @kind object;
  #L48beae.  call `cancel`(v8) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L48beb4.  call `a`(v19) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @kind virtual;
  #L48beba.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48bebe.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48bec2.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L48bec8.  return @kind void;
  #L48beca.  call temp:= `isDone`(v8) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.isDone:()Z` @kind virtual;
  #L48bed0.  v15:= temp;
  #L48bed2.  call temp:= `isEmpty`(v12) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L48bed8.  v12:= temp;
  #L48beda.  if v15 == 0 then goto L48befe;
  #L48bede.  if v12 == 0 then goto L48befe;
  #L48bee2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber` := v11 @kind object;
  #L48bee6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48beea.  call `request`(v0, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L48bef0.  v8:= v11 @kind object;
  #L48bef2.  v0:= 1I;
  #L48bef4.  goto L48befe;
  #L48bef6.  v16:= v5;
  #L48befa.  v13:= v9 @kind wide;
  #L48befc.  v0:= 0I;
  #L48befe.  v4:= lcmp(v13, v9);
  #L48bf02.  if v4 == 0 then goto L48bf24;
  #L48bf06.  v4:= 9223372036854775807L;
  #L48bf10.  v9:= lcmp(v6, v4);
  #L48bf14.  if v9 == 0 then goto L48bf24;
  #L48bf18.  v4:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L48bf1c.  v5:= -v13 @kind long;
  #L48bf1e.  call temp:= `addAndGet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L48bf24.  if v0 == 0 then goto L48bf32;
  #L48bf28.  v0:= v8 @kind object;
  #L48bf2a.  v5:= v16;
  #L48bf2e.  goto L48bd18;
  #L48bf32.  v4:= v16;
  #L48bf36.  v0:= -v4 @kind int;
  #L48bf38.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L48bf3e.  v5:= temp;
  #L48bf40.  if v5 != 0 then goto L48bf46;
  #L48bf44.  return @kind void;
  #L48bf46.  v0:= v8 @kind object;
  #L48bf48.  goto L48bd18;
  catch `java.lang.Throwable` @[L48be0e..L48be16] goto L48be56;
}
procedure `void` `innerComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a` v0 @kind this, `io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.innerComplete:(Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;)V` @AccessFlag PUBLIC {
    temp;

  #L48bf98.  call `setDone`(v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.setDone:()V` @kind virtual;
  #L48bf9e.  call `drain`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.drain:()V` @kind virtual;
  #L48bfa4.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a` v1 @kind this, `io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.innerError:(Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48bfb8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48bfbc.  call temp:= `tryAddThrowableOrReport`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L48bfc2.  v3:= temp;
  #L48bfc4.  if v3 == 0 then goto L48bfea;
  #L48bfc8.  call `setDone`(v2) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.setDone:()V` @kind virtual;
  #L48bfce.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.e` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L48bfd2.  v3:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.END` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L48bfd6.  if v2 == v3 then goto L48bfe4;
  #L48bfda.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48bfde.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48bfe4.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.drain:()V` @kind virtual;
  #L48bfea.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a` v1 @kind this, `io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.innerNext:(Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48bffc.  call temp:= `queue`(v2) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.queue:()Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;` @kind virtual;
  #L48c002.  v0:= temp @kind object;
  #L48c004.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L48c00a.  v3:= temp;
  #L48c00c.  if v3 == 0 then goto L48c018;
  #L48c010.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.drain:()V` @kind virtual;
  #L48c016.  goto L48c02e;
  #L48c018.  call `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L48c01e.  v3:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L48c022.  call `<init>`(v3) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L48c028.  call `innerError`(v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.innerError:(Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;Ljava/lang/Throwable;)V` @kind virtual;
  #L48c02e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48c040.  v0:= 1I;
  #L48c042.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.k` @type ^`boolean` := v0 @kind boolean;
  #L48c046.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.drain:()V` @kind virtual;
  #L48c04c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48c060.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48c064.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L48c06a.  v2:= temp;
  #L48c06c.  if v2 == 0 then goto L48c07c;
  #L48c070.  v2:= 1I;
  #L48c072.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.k` @type ^`boolean` := v2 @kind boolean;
  #L48c076.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.drain:()V` @kind virtual;
  #L48c07c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48c090.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L48c094.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L48c09a.  v3:= temp @kind object;
  #L48c09c.  v0:= "The mapper returned a null Publisher" @kind object;
  #L48c0a0.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48c0a6.  v3:= (`org.reactivestreams.Publisher`) v3 @kind object;
  #L48c0aa.  v0:= new `io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber`;
  #L48c0ae.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.d` @type ^`int`;
  #L48c0b2.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.<init>:(Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriberSupport;I)V` @kind direct;
  #L48c0b8.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.j` @type ^`boolean` @kind boolean;
  #L48c0bc.  if v1 == 0 then goto L48c0c2;
  #L48c0c0.  return @kind void;
  #L48c0c2.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.h` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L48c0c6.  call temp:= `offer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L48c0cc.  call `subscribe`(v3, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L48c0d2.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.j` @type ^`boolean` @kind boolean;
  #L48c0d6.  if v3 == 0 then goto L48c0e6;
  #L48c0da.  call `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L48c0e0.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.b:()V` @kind virtual;
  #L48c0e6.  return @kind void;
  #L48c0e8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48c0ea.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48c0f0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48c0f4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48c0fa.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L48c100.  return @kind void;
  catch `java.lang.Throwable` @[L48c090..L48c0aa] goto L48c0e8;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48c120.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48c124.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L48c12a.  v0:= temp;
  #L48c12c.  if v0 == 0 then goto L48c160;
  #L48c130.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.i` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L48c134.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48c138.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L48c13e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.c` @type ^`int`;
  #L48c142.  v1:= 2147483647I;
  #L48c148.  if v0 != v1 then goto L48c158;
  #L48c14c.  v0:= 9223372036854775807L;
  #L48c156.  goto L48c15a;
  #L48c158.  v0:= (`long`) v0 @kind i2l;
  #L48c15a.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L48c160.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48c174.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L48c17a.  v0:= temp;
  #L48c17c.  if v0 == 0 then goto L48c190;
  #L48c180.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L48c184.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L48c18a.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.drain:()V` @kind virtual;
  #L48c190.  return @kind void;
}
